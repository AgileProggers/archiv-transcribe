1
00:00:00,000 --> 00:00:19,360
Häh, warum sieht die Quali so kacke aus?

2
00:00:19,360 --> 00:00:20,360
Watt!

3
00:00:20,360 --> 00:00:42,520
Ach, meine Auflösung ist falsch, lul.

4
00:00:42,520 --> 00:00:43,520
Geht gut.

5
00:00:43,520 --> 00:00:49,600
Das ist ein guter Titel, das muss ich jetzt gleich ändern.

6
00:00:49,600 --> 00:01:17,240
Das ist auch ein bester Titel.

7
00:01:17,240 --> 00:01:31,320
So, also, ich warte mal bis noch ein paar Leute da sind, weil es bringt dann nichts,

8
00:01:31,320 --> 00:01:41,080
wenn ich jetzt erzähle, was wir heute machen und es ist noch keiner da.

9
00:01:41,080 --> 00:01:53,000
Was ist das, fragt DxVinstea, ja, meinst du Git oder meinst du das, was du im Hintergrund

10
00:01:53,000 --> 00:01:54,000
siehst?

11
00:01:54,000 --> 00:01:55,000
Hallo, Opa-Burger.

12
00:01:55,000 --> 00:01:56,000
Git!

13
00:01:56,000 --> 00:02:17,200
Git ist ein Versionsverwaltungssystem oder eine, oh, wie schreiben sie offiziell, eine

14
00:02:17,200 --> 00:02:21,000
dezentrale Versionsverwaltung oder so.

15
00:02:21,000 --> 00:02:26,440
Komm mal gucken, was die selbst sagen, was sie sind.

16
00:02:26,440 --> 00:02:31,840
Ja gut, it's a version control system, da wäre ich jetzt auch drauf gekommen.

17
00:02:31,840 --> 00:02:35,720
Was sagen sie denn selbst, was sie sind?

18
00:02:35,720 --> 00:02:42,040
Git easy to learn, lightning fast, das sind immer die besten Intros.

19
00:02:42,040 --> 00:02:45,040
Ups.

20
00:02:45,040 --> 00:02:54,720
Das ist noch die Textdatei, wo ich meinen neuen Rechner geplant habe, aber der neue

21
00:02:54,720 --> 00:02:57,200
Rechner ist ja mittlerweile am Start.

22
00:02:57,200 --> 00:03:12,800
Ja, wir gucken uns heute Git an, weil, hat einen ganz speziellen Grund, ich hab das ja

23
00:03:12,800 --> 00:03:17,840
auch vor einer Weile schon mal angekündigt oder gefragt, besser gesagt, ob ich das machen

24
00:03:17,840 --> 00:03:24,600
soll, ob wir uns mal so Git-Grundlagen angucken wollen, sollen, wie auch immer und nachdem

25
00:03:24,600 --> 00:03:30,600
ich jetzt schon überraschend viele Leute immer mal wieder gefragt haben, wann es das

26
00:03:30,600 --> 00:03:35,800
denn jetzt gibt, hab ich mir gedacht, ah ja, go, go, go, da war das jetzt mal.

27
00:03:35,800 --> 00:03:40,280
Also ich kann jetzt sagen, also wer jetzt Call of Duty haben will, das mach ich vielleicht

28
00:03:40,280 --> 00:03:45,040
später noch ein paar Runden, aber jetzt machen wir erstmal Git-Grundlagen.

29
00:03:45,040 --> 00:04:01,040
Mal so in die Runde gefragt, so an die Leute, die schon da sind, habt ihr erstens eine Ahnung,

30
00:04:01,040 --> 00:04:07,120
was man mit einem Versionsverwaltungssystem macht oder mit einem Software, Source Code

31
00:04:07,120 --> 00:04:15,200
Versionssystem, Versionssystem, wie auch immer man es genau nennen mag, und habt ihr schon

32
00:04:15,200 --> 00:04:16,200
mal was mit Git gemacht?

33
00:04:16,200 --> 00:04:27,320
Git-Clone, Git-Clone ist, das haben wahrscheinlich die meisten, das ist das erste, was man damit

34
00:04:27,320 --> 00:04:28,320
macht.

35
00:04:28,320 --> 00:04:40,880
Also ich mein, GitHub werden wahrscheinlich auch die meisten kennen, weil man sagen muss,

36
00:04:40,880 --> 00:04:53,760
dass GitHub mit Git eigentlich erstmal gar nichts zu tun hat, GitHub ist ein Web-Frontend

37
00:04:53,760 --> 00:05:01,040
und hat mit Git an sich nichts zu tun.

38
00:05:01,040 --> 00:05:07,120
Du hast Git benutzt, um deine Hausaufgaben an der Uni abzugeben, echt, muss man Hausaufgaben

39
00:05:07,120 --> 00:05:11,480
mit Git hochladen, auch nicht schlecht.

40
00:05:11,480 --> 00:05:19,760
Sivuri hat es auch schon benutzt, ja es gibt da mittlerweile für so ziemlich jedes Betriebssystem

41
00:05:19,760 --> 00:05:28,520
entweder Pakete oder irgendwas fertig zum installieren oder irgendwelche IDE-Extensions, was auch

42
00:05:28,520 --> 00:05:35,360
immer, ist der Sound eigentlich von der Lautstärke her so ok, mal kurz gucken, oder soll ich

43
00:05:35,360 --> 00:05:40,440
den Sound auch ein bisschen leiser machen, also man kann das ja mittlerweile echt auf

44
00:05:40,440 --> 00:05:48,520
jedem Betriebssystem benutzen, ja, aber bevor wir uns jetzt so die Git-Grundlagen angucken

45
00:05:48,520 --> 00:05:51,920
können, müssen wir eine Sache noch machen, nachdem ich keinen Lust habe jetzt irgendeinen

46
00:05:51,920 --> 00:06:02,320
GitHub-Account vollzumüllen mit irgendwas, installieren wir uns oder hab ich ein Git-Management-Web-Frontend

47
00:06:02,320 --> 00:06:11,080
schon mal hier lokal bei mir installiert, was fast aussieht wie GitHub, wo wir da unser

48
00:06:11,080 --> 00:06:15,320
Repo anlegen können, das wir auch mal zu einem Remote-Server pullen können oder von einem

49
00:06:15,320 --> 00:06:18,640
Remote-Server pullen können und zu einem Remote-Server pushen können und sowas in

50
00:06:18,640 --> 00:06:32,040
der Richtung, Lola ausauf kam ja verbraucht, er macht das schon, so, jetzt mal die Frage,

51
00:06:32,040 --> 00:06:35,440
ich muss da selbstfalls ein bisschen reinkommen, ich hab mir ehrlich gesagt nicht so viele

52
00:06:35,440 --> 00:06:46,280
Gedanken gemacht, wie wir am besten anfangen, zumindest, zumindest GitHub werden wahrscheinlich

53
00:06:46,280 --> 00:06:51,760
die meisten Leute kennen, zum Beispiel der Linux-Könnel ist auf GitHub, der South-Code

54
00:06:51,760 --> 00:06:57,760
vom Linux-Könnel ist auf GitHub, so, da ist er, den klonen wir uns jetzt aber nicht, weil

55
00:06:57,760 --> 00:07:02,040
das ist saumäßig groß, ich weiß gar nicht wie lange das mittlerweile dauert, sich den

56
00:07:02,040 --> 00:07:11,000
Linux-Könnel zu klonen, also da ist, es hat auch ein paar Comets und so mittlerweile, oder

57
00:07:11,000 --> 00:07:21,000
was, was ist das für eine nervige Musik, so, es ist von Google beispielsweise auch ganz

58
00:07:21,000 --> 00:07:28,040
viel Software auf GitHub, öffentlich verfügbar, auch im Linux-Könnel, aber von Google gibt's

59
00:07:28,040 --> 00:07:40,600
auch viel, Microsoft hat Visual Studio Code, auch auf GitHub, den South-Code, ja, Mr.

60
00:07:40,600 --> 00:07:45,800
Milchmann, den Linux-Könnel klonen ist so eine Sache für sich, da würde ich aufpassen,

61
00:07:45,800 --> 00:07:51,400
das dauert ewig und ist ziemlich groß, aber nichtsdestotrotz ist es mit Git alles relativ

62
00:07:51,400 --> 00:07:55,000
schnell, wenn man es erstmal geklont hat, so, was wir jetzt als erstes machen, ist wir

63
00:07:55,000 --> 00:08:00,320
installieren uns mal so einen kleinen eigenen GitHub-Klon, den wir als Web-Frontend verwenden

64
00:08:00,320 --> 00:08:05,240
können, wohlgemerkt, das Web-Frontend hat mit Git unten drunter, also mit dem eigentlichen

65
00:08:05,240 --> 00:08:11,680
Tool überhaupt nichts zu tun, das macht bloß die Verwaltung und die Zusammenarbeit, wenn

66
00:08:11,680 --> 00:08:17,160
man mit mehreren Leuten oder auch alleine an unterschiedlichen Projekten in Repos arbeitet,

67
00:08:17,160 --> 00:08:22,600
ein bisschen einfacher, und nachdem viele Leute mit GitHub arbeiten, dachte ich mir,

68
00:08:22,600 --> 00:08:29,640
es ist genauso wichtig, so ein bisschen das zu zeigen, anstatt nur rein Git auf der Kommando-Zeile,

69
00:08:29,640 --> 00:08:33,760
denn wir gucken uns Git an, so wie es gedacht ist, nämlich mit den Kommando-Zeilen-Tools,

70
00:08:33,760 --> 00:08:42,600
es gibt für fast jede Entwicklungsumgebung mittlerweile Addons, wo man das quasi mit

71
00:08:42,600 --> 00:08:48,560
irgendeinem GUI rumklicken kann, gibt's für Eclipse beispielsweise, hat den besten Namen

72
00:08:48,560 --> 00:08:56,000
überhaupt, heißt EGIT, passt zu Eclipse, es hört gleich so richtig an, EGIT, aber es

73
00:08:56,000 --> 00:08:59,880
ist halt auch Eclipse, da muss man sich nicht wundern, es gibt für aber alle anderen Ideas

74
00:08:59,880 --> 00:09:05,760
mittlerweile, entweder schon eingebaut oder aber zum Unterladen, Git Extensions, Visual

75
00:09:05,760 --> 00:09:09,480
Studio Code hat's eingebaut, Visual Studio selbst hat's mittlerweile glaube ich auch

76
00:09:09,480 --> 00:09:18,360
eingebaut und für die anderen großen Ideas auch, aber ich bin da Ansicht, am besten

77
00:09:18,360 --> 00:09:23,560
kann man Git immer noch auf der Kommando-Zeile verwenden, weil das einfach die Tools sind,

78
00:09:23,560 --> 00:09:29,080
wofür es ursprünglich dafür entwickelt wurden und viele Sachen unter der Haube kann man

79
00:09:29,080 --> 00:09:37,480
auch nur mit den Kommando-Zeilen-Tools machen, so aber vorher, jetzt nochmal eine Frage an

80
00:09:37,480 --> 00:09:44,480
euch, wie gesagt wir benutzen kein GitHub Direct, wir benutzen GitHub Clone, bei mir

81
00:09:44,480 --> 00:09:49,040
die Lokal, das ist die Frage, ich hab schon einen installiert, den können wir gleich

82
00:09:49,040 --> 00:09:57,480
verwenden oder wollen wir uns mal einen selbst installieren, ich habe hier meinen Server

83
00:09:57,480 --> 00:10:06,800
stehen um die Ecke im Schrank und da könnten wir uns schnell einen Git Tiga, oder wie ihr

84
00:10:06,800 --> 00:10:12,320
man das ausspricht, Webfronten dann drauf installieren, dass man auch mal so sieht wie

85
00:10:12,320 --> 00:10:20,040
simpel das eigentlich geht, sich quasi so ein privates GitHub zu installieren, wohlgemerkt

86
00:10:20,040 --> 00:10:25,600
nochmal an der Stelle, man braucht kein Webfrontend um Git zu verwenden, ich kann auch ohne Probleme

87
00:10:25,600 --> 00:10:35,840
rein bei mir Lokal Stream, ich kann auch rein bei mir Lokal Git verwenden und machen und

88
00:10:35,840 --> 00:10:57,320
tun, ich brauche dazu kein Webfrontend wie Git haben, jetzt halt die Frage, soll ich

89
00:10:57,320 --> 00:11:06,120
erst mal eine Teamarkt Session, Teamarkt setzt irgendwie meine Terminal Variable nicht richtig,

90
00:11:06,120 --> 00:11:23,800
kann das sein, kann ja nix werden, wie dem auch sein, ich verbinde mich jetzt mal auf

91
00:11:23,800 --> 00:11:29,680
meinen Server und installiere uns einen lokalen GitHub Klon, den wir dann verwenden, was ist

92
00:11:29,680 --> 00:11:38,640
der Unterschied zwischen Git Tiga und Gox, Gox, Git Tiga ist ein Gox Fork, das ist alles

93
00:11:38,640 --> 00:11:43,360
Go programmiert und alles ziemlich ähnlich, es gibt eigentlich zwei, ich sag mal drei

94
00:11:43,360 --> 00:11:50,080
größere GitHub Klone, das ist einmal Gox, das ist einmal Bitbucket und das ist einmal

95
00:11:50,080 --> 00:11:56,240
GitLab, wenn ich jetzt noch richtig tippen könnte, das sind so, oder sagen wir mal,

96
00:11:56,240 --> 00:12:00,400
wenn man das hier noch mitnimmt, vier, das sind so die vier größten GitHub Klone zum

97
00:12:00,400 --> 00:12:05,800
selbst installieren, GitLab ist mit Abstand am ekligsten und kompliziertesten zu installieren,

98
00:12:05,800 --> 00:12:10,400
das ist eine Ruby und Rails Anwendung, funktioniert auch wunderbar, aber das zu installieren ist

99
00:12:10,400 --> 00:12:18,720
echt immer ein riesen Akt, Bitbucket gibt es auch zum lokalen installieren, ist von Atlassian,

100
00:12:18,720 --> 00:12:28,720
das ist im Business Bereich relativ beliebt und Gox, wahrscheinlich spricht man das Go

101
00:12:28,720 --> 00:12:35,560
GS oder so aus, ist auch sowas in der Richtung, so ein GitHub Klon, aber wir installieren

102
00:12:35,560 --> 00:12:40,240
uns jetzt erstmal lokal Git Tiga, wie man das auch immer schreibt, das ist ziemlich

103
00:12:40,240 --> 00:12:43,800
simpel, ich werde jetzt einfach mal einen Container anlegen auf meinem Server, installieren

104
00:12:43,800 --> 00:12:51,320
das und dann verwenden wir das im restlichen Stream, bei uns wird Bitbucket verwendet,

105
00:12:51,320 --> 00:12:55,240
ich gehe mal davon aus, dass es Bitbucket nicht Gitbucket heißen soll, Bitbucket ist

106
00:12:55,240 --> 00:13:03,600
im Business Umfeld tatsächlich sehr beliebt, weil Bitbuckets kommt von Atlassian und Atlassian

107
00:13:03,600 --> 00:13:14,680
stellen ganz viele Business Zeug Software her, so Ticket Systeme und Wikis und so, wo Business

108
00:13:14,680 --> 00:13:25,000
Leute draufstehen, deswegen ist im Business Umfeld Bitbucket relativ beliebt, so, ja,

109
00:13:25,000 --> 00:13:29,760
schlaue ich mich mal auf meinem Server ein, der den ganz unauffälligen Namen POGCHAMP.INTERN

110
00:13:29,760 --> 00:13:38,760
trägt, jetzt muss ich aber aufpassen, was ich mache, denn ich will ja hier kein Mist,

111
00:13:38,760 --> 00:13:46,600
Mist auf meinem Server treiben, sonst ist alles weg, aber vorher muss ich mal, wie kommt

112
00:13:46,600 --> 00:14:09,400
man TMAX Set, weil es geht mir auf den Sack, dass ich keine Farben habe, aha, kann man

113
00:14:09,400 --> 00:14:23,480
Default Terminal umstellen, Default Terminal Option, ja, das machen wir doch mal, meine

114
00:14:23,480 --> 00:14:30,560
TMAX Conf sieht außer ein bisschen Farben, wir können auch mal irgendwann uns noch eine

115
00:14:30,560 --> 00:14:37,560
Runde TMAX und so die grundlegenden Kommando Zeilen, Tools und sowas angucken, was habe

116
00:14:37,560 --> 00:14:52,560
ich mir jetzt verkehrt gemacht, wie ist denn die richtige, achso Set, wie ging das nochmal,

117
00:14:52,560 --> 00:15:07,000
Set, achso geht das, ok, weißt du, Stack Overflow Driven Programming, so ging das, ups,

118
00:15:07,000 --> 00:15:18,800
ja, jetzt haben wir glaube ich auch, jetzt haben wir auch ordentliche Farbe und alles,

119
00:15:18,800 --> 00:15:25,440
so, loggen wir uns mal auf meinem Server ein und ich schreibe jetzt mein Passwort nicht

120
00:15:25,440 --> 00:15:32,880
hin, sodass man das sehen kann, so und wir legen uns jetzt mal einen neuen Container

121
00:15:32,880 --> 00:15:36,240
an, das mache ich mit LXT, das kann man auch mit Docker oder sonst was in der Richtung

122
00:15:36,240 --> 00:15:41,600
machen, mit Docker ist es ein bisschen einfacher, da gibt es schon komplett fertige Docker Container,

123
00:15:41,600 --> 00:15:47,440
die startlich einfach und da läuft dann irgendwie in Setze X beliebiges Git Webfrontend ein,

124
00:15:47,440 --> 00:15:57,440
wir legen uns jetzt einfach mal selbst einen an, wie nennen wir denn den, Launch, so nennen

125
00:15:57,440 --> 00:16:03,400
wir ihn nicht, wir müssen ihn irgendwie Twitch Emotes mäßig nennen, habe ich schon einen

126
00:16:03,400 --> 00:16:15,640
gebated Container, ich glaube nicht, gebated, heißt der jetzt, so, jetzt haben wir uns noch

127
00:16:15,640 --> 00:16:23,840
einen Container angelegt, da brauche ich jetzt natürlich noch ein Netzwerk Interface und

128
00:16:23,840 --> 00:16:36,680
jetzt können wir uns verbinden in das Ding, so, das wird unser Git Frontend Server, ich

129
00:16:36,680 --> 00:16:41,440
kann mir vorstellen, das ist jetzt ziemlich verwirrend, was ich hier treibe, weil, weiß

130
00:16:41,440 --> 00:16:53,000
nicht, wie sehr verbreitet Linux Container und sowas sind, zumindest ist es eigentlich

131
00:16:53,000 --> 00:17:01,240
vollkommen wurscht, weil ich will ja nur mal temporär mir einen Git Webfrontend installieren,

132
00:17:01,240 --> 00:17:11,280
ist eigentlich egal, was ich genau mache, so, install, wo haben die hier ihre Install Anleitung,

133
00:17:11,280 --> 00:17:21,440
Git Grundlagen gebated, install, install from binary, das ist ok, das ist Go, Go ist das

134
00:17:21,440 --> 00:17:25,680
immer relativ simpel, da kann man einfach was runterladen, starten und gut ist, ah, ich

135
00:17:25,680 --> 00:17:29,800
komme nicht ins Internet, weil ich keine IP habe, dann starten wir mal den Container

136
00:17:29,800 --> 00:17:39,320
neu, dann kriege ich wahrscheinlich eine IP, so, also habe ich eine IP, jetzt kann ich

137
00:17:39,320 --> 00:17:43,080
auch den Gram runterladen, wir machen da jetzt gar keine großen Sperenzien, wir lassen es

138
00:17:43,080 --> 00:17:50,080
jetzt unter root laufen und gut ist, ich müsste jetzt von meinem Rechner aus eigentlich gebated.internal

139
00:17:50,080 --> 00:18:00,000
auflösen können, geht nicht, warum geht das nicht, normalerweise sollte man DHCP Server,

140
00:18:00,000 --> 00:18:13,880
sobald sich, sobald sich den Server eine DHCP IP zieht, sollte der den eigentlich eintragen,

141
00:18:13,880 --> 00:18:19,480
macht er aber nicht, aber naja, es gibt schlimmeres, warum macht er sowas nicht, was soll das,

142
00:18:19,480 --> 00:18:37,400
muss ich mal nachgucken, ist aber auch egal, wir können auch die IP von dem Ding nehmen,

143
00:18:37,400 --> 00:18:43,400
kann es sein, dass man Container mit einer VM gleichsetzen kann, so ungefähr, es gibt

144
00:18:43,400 --> 00:18:55,600
halt einen gravierenden Unterschied, dass eine VM quasi die Hardware komplett virtualisiert,

145
00:18:55,600 --> 00:19:03,280
emuliert, wie auch immer man das will und ein Container nicht, also ein Container, wenn

146
00:19:03,280 --> 00:19:08,400
du in einem Container ein Programm startest, ist das im Endeffekt kein Unterschied, so

147
00:19:08,400 --> 00:19:12,240
wie wenn du das auf dem Server direkt starten würdest, bloß das noch so ein bisschen Sandbox

148
00:19:12,240 --> 00:19:20,160
drum herum ist, VM läuft ja komplett in einer eigenen virtuellen Rechner, der mit dem Hostsystem

149
00:19:20,160 --> 00:19:36,440
nichts mehr zu tun hat, so würde ich mal die Unterschiede beschreiben zwischen Container

150
00:19:36,440 --> 00:19:43,760
und VM, was ich echt merkwürdig finde, dass normalerweise geht das immer, sobald ich einen

151
00:19:43,760 --> 00:19:48,720
neuen Container anlege, zack, ist der im DNS drinne, ich weiß nicht, warum das nicht funktioniert

152
00:19:48,720 --> 00:20:00,280
jetzt, weil ich meine, weil man selber funktioniert es ja auch, kann das sein, dass ich noch den,

153
00:20:00,280 --> 00:20:06,720
dass ich noch Hostname setzen muss, das könnte tatsächlich sein, dass ich noch Hostname und

154
00:20:06,720 --> 00:20:34,840
Zeug setzen muss, probieren wir das nochmal aus, Hostname, Ups, Hostname, eh, umgedreht,

155
00:20:34,840 --> 00:21:04,000
muss man das nochmal gucken, ob es jetzt funktioniert, strage es nebenbei nochmal so ein, so, gut,

156
00:21:04,000 --> 00:21:13,080
besser wieder, jetzt gehts, sehr schön, es löst das auch auf, jetzt haben wir hier eine

157
00:21:13,080 --> 00:21:17,440
ordentliche Domain, die brauchen wir zwar nicht, aber sie ist schöner, ok, haben wir

158
00:21:17,440 --> 00:21:30,160
den Krampel runtergeladen, haben wir, ah ja, haben wir, Moment, das ist eine total alte

159
00:21:30,160 --> 00:21:40,600
Version, die will ich nicht, Downloadpage, kurze Frage Max, wie findest du World War

160
00:21:40,600 --> 00:21:45,360
2 bisher, also wie gesagt, ich fand es in der Beta schon nicht schlecht, aber es steht

161
00:21:45,360 --> 00:21:56,440
und fällt damit, wie das auf dem PC sich entwickelt mit Spielerzahlen und Cheater, der Milchmann

162
00:21:56,440 --> 00:22:03,960
hat sich die Linux-Krone geklonen, sehr schön, so, haben wir hier lang genug jetzt rumgemacht,

163
00:22:03,960 --> 00:22:13,400
jetzt gucken wir uns mal, wirklich Git an, keine Webfront eins, so, jetzt gehen wir mal

164
00:22:13,400 --> 00:22:23,560
auf unseren lokalen GitHub-Klonen, tubated.internal.port3000, warum port3000, weil es da steht, zack, so,

165
00:22:23,560 --> 00:22:27,720
wir brauchen eine Lokale, wir benutzen immer SQL-Datenbank-Lokal, nein, nicht immer SQL,

166
00:22:27,720 --> 00:22:49,280
SQLite-Datenbank-Lokal, Domain is eternal, tubated.internal, so, Admin-Account wird jetzt

167
00:22:49,280 --> 00:23:04,920
über Max, Passwort, ganz furchtbar komplex, adds, was weiß ich, null, einfach komm, egal,

168
00:23:04,920 --> 00:23:15,600
okay, oh, brauchen wir nicht, wieder neues repo an, so, das ist jetzt nicht GitHub, das

169
00:23:15,600 --> 00:23:23,800
ist jetzt bei mir lokal installierte Version von, denkst, wie heißt, Git, Gitia, äh,

170
00:23:23,800 --> 00:23:28,240
Richie, äh, der Richie fragt, was ist Git, denn überhaupt, und wozu verwendet man es,

171
00:23:28,240 --> 00:23:34,160
Git ist ein Versionsverwaltungssystem für, ich lass den Service als Routel auf und sieh

172
00:23:34,160 --> 00:23:38,880
wo, genau, scheiß drauf, das ist jetzt nur zum, zum angucken, nicht für produktiven

173
00:23:38,880 --> 00:23:45,440
Einsatz, ähm, das ist ein Versionsverwaltungssystem, das heißt, damit kann man seinen Source-Code

174
00:23:45,440 --> 00:23:48,680
verwalten und jetzt natürlich die große Frage, was hat man davon, wenn man seinen Source-Code

175
00:23:48,680 --> 00:23:55,240
damit verwaltet, man kann zum Beispiel einfacher Fehler suchen, wann Fehler aufgetreten sind,

176
00:23:55,240 --> 00:24:01,200
man kann gucken, quasi, wann welche Sachen hinzugekommen sind, ab wann was kaputt ist,

177
00:24:01,200 --> 00:24:08,240
man kann sich die Versionshistorie angucken, ähm, wenn man was verkackt, ist es relativ

178
00:24:08,240 --> 00:24:13,520
einfach, auf einen funktionierenden Stand zurückzugehen, wenn man mit mehreren Leuten

179
00:24:13,520 --> 00:24:20,120
an einem Projekt arbeitet, ist das sehr schön, um das dann am Ende, die Ergebnisse zu kombinieren

180
00:24:20,120 --> 00:24:28,080
und sowas, also, wenn man nicht gerade allein an irgendwas werkelt, ist es fast schon Pflicht

181
00:24:28,080 --> 00:24:35,960
und selbst wenn man allein an was werkelt, hat das schon seine Vorteile, weil zum Beispiel,

182
00:24:35,960 --> 00:24:41,120
ich mein, mal angenommen, man hat jetzt hier irgendwas, irgendwas programmiert, ja, irgendwas

183
00:24:41,120 --> 00:24:47,000
langes, was auch immer, das ist jetzt irgendwie meine tolle Programmiersprache, so und ich

184
00:24:47,000 --> 00:24:51,640
hab jetzt ganz viel programmiert, so, einen ganzen Tag lang hab ich das hier jetzt programmiert,

185
00:24:51,640 --> 00:24:56,680
das war ganz furchtbar schwer und ich mein, jeder kennt's, dass man dann sagt, fuck, irgendwas

186
00:24:56,680 --> 00:25:02,680
hab ich jetzt kaputt gemacht, woran lag das denn jetzt noch mal und dann fängst du an,

187
00:25:02,680 --> 00:25:08,440
hier die große Steuerung Z-Orgie zu machen, bis zu einem Stand vor ein paar Stunden, wo

188
00:25:08,440 --> 00:25:13,240
du weißt, dass es funktioniert, dann änderst du wieder was und dann vertippst du dich und

189
00:25:13,240 --> 00:25:17,600
kommst nicht mehr zurück und hast zwei Stunden Arbeit verloren, das Problem hat man mit einer

190
00:25:17,600 --> 00:25:22,000
Versionsverwaltungssystem nicht mehr, wenn man es dann ordentlich verwendet, weil dann

191
00:25:22,000 --> 00:25:26,640
macht man sich einfach, dann committet man einfach seine Changes, die man zu einem Stand,

192
00:25:26,640 --> 00:25:30,600
wo man weiß, dass sie funktioniert haben und wenn man es dann verkackt, dann kann ich immer

193
00:25:30,600 --> 00:25:34,920
noch sagen, ok, ich geh jetzt auf den Stand zurück, wo es funktioniert hat, so, legen

194
00:25:34,920 --> 00:25:45,440
wir mal ein neues Repo an, ja, sowas hatte jeder wahrscheinlich schon, Stream, das brauchen

195
00:25:45,440 --> 00:25:57,880
wir nicht, Create Repo, der hat's nicht so hier mit Domains richtig setzten, das stimmt

196
00:25:57,880 --> 00:26:08,840
nicht wirklich, oder, kann man das jetzt noch ändern, die Domain ist, ja die Domain ist

197
00:26:08,840 --> 00:26:14,320
nicht in Tunnel, der hätte sagen sollen, man soll den FQDN angeben, Kackprogramm, äh,

198
00:26:14,320 --> 00:26:24,880
nervt mich jetzt schon, ich weiß jetzt, wo wir in welchem Ort wir sind, machen wir den

199
00:26:24,880 --> 00:26:31,760
ganzen Scheiß nochmal, so und wir machen jetzt wirklich mal so ganz simple Sachen, wie gesagt

200
00:26:31,760 --> 00:26:35,480
wir legen uns jetzt ein Repo an, dann machen wir mal ein paar Branches, dann machen wir

201
00:26:35,480 --> 00:26:44,240
ein paar Commits, dann merken wir das ganze, ähm, also eigentlich ziemlich, ziemlich

202
00:26:44,240 --> 00:27:01,040
basic, machen wir die ganzen Kram nochmal, weil's komische Sachen gemacht hat, ok, dann

203
00:27:01,040 --> 00:27:17,320
ist es jetzt, schreiben wir das halt mal komplett hin, äh, Admin Accounts, hochkomplexes Passwort,

204
00:27:17,320 --> 00:27:25,240
so, so, jetzt legen wir nochmal unser Repo an für heute, was wir heute verwenden, nennen

205
00:27:25,240 --> 00:27:33,760
wir mal Stream, blablabla, create, jetzt stimmt das ganze auch, so, hier stehen jetzt schon

206
00:27:33,760 --> 00:27:51,360
so ein paar Standard, die Musik ist irgendwie, oh, wupp wupp wupp, wupp wupp wupp, so, das

207
00:27:51,360 --> 00:27:58,880
ist jetzt quasi unser Fake GitHub, mit unserem Repo drauf, das Repo nennt sich Stream, das

208
00:27:58,880 --> 00:28:03,920
wird auf GitHub nicht so viel anders aussehen, ähm, in dem Repo ist noch überhaupt nichts

209
00:28:03,920 --> 00:28:10,360
drinne, deswegen legen wir uns jetzt ein neues Repo an und pushen da initial mal eine leere

210
00:28:10,360 --> 00:28:14,920
Readme Datei rein, das machen wir nicht so wie es da steht, sondern wir machen das jetzt

211
00:28:14,920 --> 00:28:19,080
eine Reihe nach, ähm, ich geh jetzt erstmal in meinen Repo Ordner, das muss man nicht

212
00:28:19,080 --> 00:28:23,720
machen, aber ich mach das immer ganz gerne, ich hab in meinem Heimatverzeichnis immer

213
00:28:23,720 --> 00:28:27,360
einen Ordner, der nennt sich Repos, und da sind meine ganzen unterschiedlichen Git Repos

214
00:28:27,360 --> 00:28:32,800
drinne, die ich von irgendwo geklont hab, oder selbst angelegt hab, ähm, das sind, irgendwie

215
00:28:32,800 --> 00:28:38,240
geht mir die Musik heute echt auf den Sack, ich mach jetzt mal aus, hat da, hat jemand

216
00:28:38,240 --> 00:28:51,080
einen guten Link zu irgendwelcher entspannender Hintergrundmusik, da klone ich meistens meine

217
00:28:51,080 --> 00:28:55,520
ganzen Repos rein, da weiß ich wenigstens wo sie sind, auf der Arbeit sind da wahrscheinlich

218
00:28:55,520 --> 00:28:59,440
schon alle 70 Repos oder sowas in der Richtung drinne, so, ich hab sogar schon ein Repo vorhin

219
00:28:59,440 --> 00:29:08,280
angelegt, ich lösch das jetzt aber nochmal, ähm, Stream, ein Repo legt man ganz einfach

220
00:29:08,280 --> 00:29:13,200
an, indem man in den Ordner reingeht und sagt Git Init, ich glaube man kann auch sagen Git

221
00:29:13,200 --> 00:29:23,720
Init Name, geht auch, also man kann auch sagen Git Init Stream, jetzt haben wir ein leeres

222
00:29:23,720 --> 00:29:27,920
Git Repo angelegt, wo nichts drinne ist, der auch noch keine Comments hat und noch gar

223
00:29:27,920 --> 00:29:38,480
nichts, es ist einfach ein leeres Git Repo, ich glaub euch nix hier im Chat, was auch immer,

224
00:29:38,480 --> 00:29:43,720
wenn da einer schon was vorschlägt und mit Kappa dahinter, da weiß ich schon, das klappt

225
00:29:43,720 --> 00:29:48,520
wahrscheinlich eher nicht mit Entspannungsmusik, komm wir machen wieder hier, wie hieß er,

226
00:29:48,520 --> 00:29:56,960
ähm, Piano, wie hieß der Typ der, das war doch echt entspannt, das hatten wir doch schon

227
00:29:56,960 --> 00:30:08,200
mal vor ner Weile an, außerdem haben es die Japaner halt übelst drauf, ja das ist echt

228
00:30:08,200 --> 00:30:22,400
entspannt, aber es ist ein bisschen leise, ja das ist nice, so, ähm, wir legen jetzt

229
00:30:22,400 --> 00:30:28,920
einfach mal ne leere Readme Datei an, in unserem Repo, wir schreiben da nix rein, wir können

230
00:30:28,920 --> 00:30:33,240
da reinschreiben Hallo oder irgendwie sowas, so, und jetzt haben wir gerade ein leeres

231
00:30:33,240 --> 00:30:40,600
Git Repo angelegt und die erste Datei drin erstellt, das muss keine Readme Datei sein,

232
00:30:40,600 --> 00:30:45,600
das kann alles mögliche sein, das kann auch direkt euren schon vorhandener Source Code

233
00:30:45,600 --> 00:30:50,640
sein, den ihr da jetzt einfach reinkopiert, was aber wichtig ist, sobald man irgendwas

234
00:30:50,640 --> 00:30:54,840
geändert hat und Git mitteilen möchte, dass man diesen Stand benutzen will beziehungsweise

235
00:30:54,840 --> 00:31:01,840
diesen Stand jetzt, ähm, nen, ja, was man denn, nen Name geben will oder den Stand committen

236
00:31:01,840 --> 00:31:06,760
will, weil so heißt der Befehl letztendlich auch, macht man Git commit und am Anfang wird

237
00:31:06,760 --> 00:31:17,640
er jetzt meckern, dass ich noch keine Lautstärke, Lautstärke, am Anfang wird er jetzt natürlich

238
00:31:17,640 --> 00:31:25,400
meckern, dass ich noch keine, keinen Namen und, und Gedöns und Zeug gesetzt hab, ähm,

239
00:31:25,400 --> 00:31:31,880
aber so ist das halt, ähm, ja, und er wird wahrscheinlich meckern, dass es nichts zu

240
00:31:31,880 --> 00:31:39,360
committen gibt, richtig, wir pushen jetzt einfach mal ne leere Datei ins Repo rein und dann

241
00:31:39,360 --> 00:31:55,120
gucken wir uns das Ganze im Detail nochmal an. So, ich muss, äh, Name setzen, meine E-Mail

242
00:31:55,120 --> 00:32:09,840
Adresse ist maxandlocalhost und mein Name ist max, fertig. So, ähm, und jetzt kann

243
00:32:09,840 --> 00:32:16,400
ich den Stand nehmen, den ich hier drinne hab und, ähm, quasi erst mal zu meinem Remote

244
00:32:16,400 --> 00:32:21,920
Server schieben und sobald ich das gemacht hab, wird dann hier dann auch der ganze Krempel

245
00:32:21,920 --> 00:32:34,880
drin auftauchen. Hier wird gehackselt, ja, genau, Silent Pain. Äh, Oxygen Event, was

246
00:32:34,880 --> 00:32:48,200
meinst du? Für was ist das ganze Programmierzeug? Ja, zum Programmieren, oder was meinst du?

247
00:32:48,200 --> 00:32:59,480
Äh, Swiss fragts, Max, auf wieviel Gigahertz ist dein i7-8700k? Auf 5 ist der. Mittlerweile.

248
00:32:59,480 --> 00:33:10,920
Auf 5 Gigahertz. Max, hast du schon mal versucht einen Cheat für ein Game zu programmieren?

249
00:33:10,920 --> 00:33:28,440
Nö. So, ähm, wobei das machen wir nicht, wir machen das so wie die das geschrieben

250
00:33:28,440 --> 00:33:40,600
haben. Wat? Ich darf nicht drauf zugreifen, warum? Ah, ich darf wahrscheinlich nicht

251
00:33:40,600 --> 00:33:52,040
drauf zugreifen, weil ich, ich muss wahrscheinlich noch mein SSH Key, mein SSH Key noch hier

252
00:33:52,040 --> 00:33:57,640
irgendwie hinterlegen, irgendwo, wo auch immer, der genau hin muss. Ist natürlich jetzt

253
00:33:57,640 --> 00:34:01,440
ein bisschen doof. Ja, ich hätt mir das vielleicht ein bisschen besser überlegen sollen am Anfang,

254
00:34:01,440 --> 00:34:11,200
wie wir das machen, aber gleich, gleich haben wir's. Äh, wahrscheinlich new settings, SSH

255
00:34:11,200 --> 00:34:21,840
Key, geht das so? Ich hab das Tool noch nie verwendet. Sehr schön, hat funktioniert.

256
00:34:21,840 --> 00:34:25,360
So, in dem Zustand, wie unser Repo jetzt ist, vergesst einfach alles, was wir gerade gemacht

257
00:34:25,360 --> 00:34:30,080
haben, in dem Zustand, wie unser Repo jetzt ist, sieht es normalerweise so aus, wenn man

258
00:34:30,080 --> 00:34:35,560
es sich von GitHub geklonet hat. Also sprich, man hat, ähm, das können wir jetzt auch mal

259
00:34:35,560 --> 00:34:49,840
machen. Wo ist es denn hin? Genau, jetzt ist die ReadMe drinne und sonst nix. So, wir löschen

260
00:34:49,840 --> 00:34:54,240
das Repo jetzt nochmal lokal und eine Sache wird man dann schon sehen, wenn ich lokal

261
00:34:54,240 --> 00:34:59,040
irgendwas an meinem Repo mache, hat das logischerweise überhaupt keine Auswirkungen drauf, was mit

262
00:34:59,040 --> 00:35:04,040
dem Stand irgendwo anders passiert. Und das ist eine ganz wichtige Sache, die man sich

263
00:35:04,040 --> 00:35:11,760
bei Git erstmal standardmäßig merken muss, ähm, bevor ich nicht was pushe, es ist alles

264
00:35:11,760 --> 00:35:17,560
nur lokal, auch wenn da lokal irgendwie Remote dran steht oder sowas in der Richtung. Das

265
00:35:17,560 --> 00:35:22,400
ist vollkommen wurscht bei Git, es ist alles nur lokal, das muss man sich merken. Also

266
00:35:22,400 --> 00:35:27,440
man kann nichts irgendwie kaputt machen, das ist nicht wie bei SVN oder sowas in der Richtung,

267
00:35:27,440 --> 00:35:32,680
wo man quasi halb immer mit einem Bein auf dem Server ist. Bei Git ist alles standardmäßig

268
00:35:32,680 --> 00:35:39,640
lokal, bis man explizit sagt, man schiebt es irgendwo hin. Auch wenn es auf den ersten

269
00:35:39,640 --> 00:35:47,880
Blick nicht so aussieht. So, also wenn jemand schon mal auf GitHub war, ähm, oder falls

270
00:35:47,880 --> 00:35:52,040
irgendjemand sich jetzt mal die Linux-Körne klonen will oder sowas in der Richtung, ähm,

271
00:35:52,040 --> 00:35:59,200
ja, Patrick, ich hause mir ein Git-Tee, oder wie das Ding hieß. Ist einfacher zu installieren

272
00:35:59,200 --> 00:36:10,720
als GitLab. Man kann auch GitLab verwenden, ist eigentlich überhaupt kein Ding. So. Z-Frames,

273
00:36:10,720 --> 00:36:15,480
das guck ich mir nachher mal irgendwann an. So, ähm, also vollkommen unabhängig von dem,

274
00:36:15,480 --> 00:36:19,800
was wir jetzt gemacht haben, der erste Schritt, wo viele Leute erstmal mit Git in Berührung

275
00:36:19,800 --> 00:36:23,560
kommen, ist, wenn sie sich irgendwo in ein Repo klonen wollen. Also sprich, den Source-Code

276
00:36:23,560 --> 00:36:29,440
beispielsweise von GitHub, hier jetzt von Visual Studio Code oder von irgendwelchen Projekten

277
00:36:29,440 --> 00:36:37,080
wollen sie sich lokal bei ihnen auf dem Rechner klonen, editieren vielleicht, vielleicht

278
00:36:37,080 --> 00:36:41,000
auch noch was einreichen, dann wieder bei dem jeweiligen Projekt. Aber das erste, womit

279
00:36:41,000 --> 00:36:43,840
Leute in Kontakt kommen, ist wahrscheinlich Git-Clone. Und Git-Clone ist auch genauso

280
00:36:43,840 --> 00:36:48,120
simpel, wie es aussieht. Man schreibt einfach hin, Git-Clone, und dann die Url, was man

281
00:36:48,120 --> 00:36:52,440
sich klonen will, und dann hat man lokal einen Ordner von dem jeweiligen Repo, was

282
00:36:52,440 --> 00:36:59,280
man sich geklont hat. Also easy. Das ist auch noch nicht wirklich das Komplizierte. Das

283
00:36:59,280 --> 00:37:03,200
kriegt glaube ich jeder noch hin. Das kann man auch mit allen möglichen Sachen machen.

284
00:37:03,200 --> 00:37:06,320
Ich könnte jetzt auch beispielsweise sagen, jetzt sind wir hier auf GitHub, ich könnte

285
00:37:06,320 --> 00:37:12,520
auch sagen, hier, ich will mir jetzt einfach mal Visual Studio Code klonen. Das funktioniert,

286
00:37:12,520 --> 00:37:16,120
kann ich machen. Git-Clone, bam, das man sieht schon, das dauert ein bisschen länger,

287
00:37:16,120 --> 00:37:23,320
das ist auch ein bisschen größer. Funktioniert, ist überhaupt kein Ding. Ähm, wirklich interessant

288
00:37:23,320 --> 00:37:30,360
wird es natürlich erst, wenn man was editiert, bzw. wenn man was entwickelt. Und noch interessanter

289
00:37:30,360 --> 00:37:35,320
wird es, wenn mehrere Leute dran editieren und dran entwickeln. Was man eben schon ganz

290
00:37:35,320 --> 00:37:40,320
gut gesehen hat, ist die Musik wieder ein bisschen laut, ne? Ach wobei, nicht, das passt.

291
00:37:40,320 --> 00:37:46,320
Aber ein bisschen. Was man eben schon ganz gut gesehen hat, ich meine, ich konnte lokal

292
00:37:46,320 --> 00:37:50,640
das Repo löschen und es war Remod noch da. Das heißt, jeder der an irgendeinem Projekt

293
00:37:50,640 --> 00:38:00,240
mitarbeitet und das Repo sich geklont hat, hat lokal erstmal ne Kopie vom kompletten

294
00:38:00,240 --> 00:38:09,200
Repo. Wirklich komplett, mit allem dabei. Ähm, das hat natürlich den riesen Vorteil,

295
00:38:09,200 --> 00:38:13,080
es geht auch nicht so leicht mal was verloren. Selbst wenn der Server, auf dem das ganze

296
00:38:13,080 --> 00:38:18,680
mal gehostet war, oder gehostet ist, wenn der verreckt, also wenn morgen jetzt beispielsweise

297
00:38:18,680 --> 00:38:25,440
GitHub abraucht, weiß ja nicht, könnte sein, so Ruby on Rails Abwendung, ähm, wenn morgen

298
00:38:25,440 --> 00:38:31,000
GitHub abraucht, ist der Source Code von Visual Studio Code garantiert nicht verloren, weil

299
00:38:31,000 --> 00:38:36,520
sich mindestens 5000 Leute dieses Repo bisher geforkt haben, äh, und sich wahrscheinlich

300
00:38:36,520 --> 00:38:41,800
noch viel viel mehr Leute dieses Repo mal lokal bei sich irgendwo hingeklont haben.

301
00:38:41,800 --> 00:38:54,640
Und das ist auch eines der wichtigsten Unterschiede zu ähm, anderen Versionsverwaltungssystemen

302
00:38:54,640 --> 00:39:01,800
wie, äh, wie SVN oder sowas, dass man eben erstmal hauptsächlich lokal arbeitet und

303
00:39:01,800 --> 00:39:09,600
erst dann pusht, bzw. sich neue Changes pullt. Und man kann Git nach Herzenlust ausprobieren

304
00:39:09,600 --> 00:39:13,680
bei sich lokal, man kann nichts kaputt machen. Es wäre ja auch ziemlich bescheuert, ich meine,

305
00:39:13,680 --> 00:39:17,040
ich hab mir jetzt hier den Source Code von Visual Studio Code geklont und ich lösche

306
00:39:17,040 --> 00:39:23,360
jetzt einfach mal alles. Bäm! Es wäre ganz schön bescheuert, wenn es jetzt bei Microsoft

307
00:39:23,360 --> 00:39:31,560
gelöscht wäre, ne? Ist es nicht, es ist nur bei mir lokal gelöscht. Ok, gehen wir mal

308
00:39:31,560 --> 00:39:36,960
wieder in unser Test Repo. Wenn man jetzt was entwickelt, irgendwas kleines, ja? Irgendeine

309
00:39:36,960 --> 00:39:42,800
Mini-Anwendung. Wir können jetzt ja mal hier im, im, wir machen irgendwie mal so ein Mini-Bashed

310
00:39:42,800 --> 00:39:48,520
Crypt, was, was irgendeinen Mist ausgibt oder so. Ähm, dann commiten wir da ein paar Änderungen

311
00:39:48,520 --> 00:39:56,480
rein und dann pushen wir das und merchant das und schauen uns das mal in der Ruhe, äh,

312
00:39:56,480 --> 00:40:04,560
in Ruhe an. Ähm, ich muss sagen, mir fällt es ein bisschen schwierig, das so zu erklären

313
00:40:04,560 --> 00:40:09,000
von Anfang an, dass das alles nachvollziehbar ist, weil ich benutze das schon eine ganze

314
00:40:09,000 --> 00:40:15,600
Weile und ich kümmere mich eigentlich hauptsächlich um der, auf der Arbeit, um unsere Git Repos,

315
00:40:15,600 --> 00:40:21,600
um unsere Software Repos. Und viele Sachen, die ich wahrscheinlich einfach so mache, leuchten

316
00:40:21,600 --> 00:40:38,160
euch nicht so großartig ein, könnte ich mir vorstellen. So, ähm, ja, es gibt ein paar

317
00:40:38,160 --> 00:40:42,200
wichtige Sachen, die man auch wissen muss, wo immer einige Leute durcheinander kommen.

318
00:40:42,200 --> 00:40:51,680
Es gibt, ähm, wenn man sich ein Repo geklont hat, gibt es standardmäßig erstmal zwei

319
00:40:51,680 --> 00:40:59,320
Sachen, oder meistens zwei Sachen standardmäßig. Ähm, die Quelle, von der man sich das Repo

320
00:40:59,320 --> 00:41:08,000
geklont hat, ist standardmäßig eingetragen hier als Remote-Server. Der nennt sich Origin,

321
00:41:08,000 --> 00:41:12,600
das Ding heißt immer Origin. Origin ist immer der Server, von dem ich mir mein Repo geklont

322
00:41:12,600 --> 00:41:19,640
habe, aber das muss nicht so heißen. Das kann irgendwie heißen. Origin ist einfach nur Name

323
00:41:19,640 --> 00:41:24,680
und sie mussten ja irgendeinen Default-Name vergeben. Ja, ich glaube, der Nightbot ist

324
00:41:24,680 --> 00:41:30,280
abgeschmiert, Sebaro, stimmt's? Aber die haben gestern auch schon ganz schön rumgeleckt.

325
00:41:30,280 --> 00:41:38,080
Vielleicht ist es einfach kaputt. Das muss man sich merken, ähm, Origin ist einfach nur

326
00:41:38,080 --> 00:41:41,000
ein Name. Das sehe ich auch auf der Arbeit ganz oft, dass viele Leute denken, Origin

327
00:41:41,000 --> 00:41:46,720
wäre irgendein Git-Befehl oder sowas. Und das hat auch nichts mit Origin von EA zu tun,

328
00:41:46,720 --> 00:41:52,080
sondern es ist einfach gemeint, von da hast du es halt ursprünglich geklont, dein Repo.

329
00:41:52,080 --> 00:42:01,480
Aber man kann auch mehrere Remote-Repos haben und dort Sachen reinpushen. Also ich könnte

330
00:42:01,480 --> 00:42:08,920
beispielsweise hier meinen lokalen Server haben, wo halt dieses Frontend beispielsweise

331
00:42:08,920 --> 00:42:14,280
drauf läuft, plus noch einen Rechner von einem Kumpel, der bei mir mitentwickelt, oder noch

332
00:42:14,280 --> 00:42:18,920
einen Server in irgendeinem Rechenzentrum, auf dem die Anwendung wirklich drauf läuft.

333
00:42:18,920 --> 00:42:27,560
Und die kann ich mir alle als Remotes eintragen und bei Push und Pull verwenden. Aber dass

334
00:42:27,560 --> 00:42:33,520
das Ding Origin heißt, ist vollkommen egal, ist einfach nur ein Name. So, und was man

335
00:42:33,520 --> 00:42:50,800
auch wissen muss... Hä, Siebauer, was? Hä, verstehe ich nicht. Was man auch noch wissen

336
00:42:50,800 --> 00:43:01,000
muss, dass man standardmäßig eine Branche hat, der Master heißt, das ist auch einfach

337
00:43:01,000 --> 00:43:08,960
nur, weil er ja irgendwas nach dem Klonen anzeigen muss. Und dann nimmt er einfach standardmäßig

338
00:43:08,960 --> 00:43:16,560
Master, wenn es ihn gibt. Das ist nichts, was wirklich so heißen muss. Viele Leute denken,

339
00:43:16,560 --> 00:43:22,320
die Dinger müssen Origin oder müssen Master heißen, ist vollkommen egal. So, also wir

340
00:43:22,320 --> 00:43:31,400
haben jetzt wirklich ein ziemlich leeres, quasi nur mit einer Datei befüllendem repo.

341
00:43:31,400 --> 00:43:36,960
Und in dieser Datei steht einfach nur Hallo drin. Wenn wir uns jetzt mal die History angucken,

342
00:43:36,960 --> 00:43:42,440
sehen wir, es gibt genau ein Comment, das ist von mir und das ist vor, was weiß ich, 10

343
00:43:42,440 --> 00:43:52,040
Minuten entstanden und ist offensichtlich das erste. Was man bei Git wissen muss, was

344
00:43:52,040 --> 00:43:59,800
ist, oder so die Grundlagen, mit denen man früher oder später in Berührung kommt, sind,

345
00:43:59,800 --> 00:44:12,320
was sind Comments, was sind Branches, vielleicht noch was sind Tags und was gibt es denn sonst

346
00:44:12,320 --> 00:44:20,800
noch interessantes, was sind Remotes. Aber am wichtigsten ist eigentlich am Anfang mal

347
00:44:20,800 --> 00:44:27,640
zu wissen, was ist ein Branch und was ist ein Comment. Wenn ich jetzt hier irgendwas anfange

348
00:44:27,640 --> 00:44:34,640
zu entwickeln, so beispielsweise, ich will jetzt ein ganz tolles Bash-Skript programmieren,

349
00:44:34,640 --> 00:44:40,480
was irgendwas tolles macht. Ich hatte ja einer eine glorreiche Idee, was das tolles machen

350
00:44:40,480 --> 00:44:51,080
könnte. Oder machen wir es anders. Komm, wir einfach alles in Mastercommenten. Ja, das

351
00:44:51,080 --> 00:44:54,600
ist finde ich sogar, äh, Patrick, das ist finde ich sogar legitim, wenn man das macht,

352
00:44:54,600 --> 00:44:59,120
wenn man alleine daran entwickelt. Wir machen das jetzt mal, das repo machen wir jetzt mal

353
00:44:59,120 --> 00:45:06,440
auf mit Visual Studio Code, dass man bisschen GUI-mäßig, dass man sieht, dass das überhaupt

354
00:45:06,440 --> 00:45:29,600
nichts mit den eigentlichen Programmen zu tun hat, was man verwendet. Ähm, äh, Open

355
00:45:29,600 --> 00:45:39,960
Folder. Plende das standardmäßig Readmees aus, das Ding, oder was? Lull. Ein Skript,

356
00:45:39,960 --> 00:45:43,560
das den Sinn des Lebens bricht. Jawoll, das können wir machen. Also, wir fangen jetzt,

357
00:45:43,560 --> 00:45:49,160
wir fangen jetzt mal an ein ganz tolles Bash-Skript zu programmieren. Ähm, und danach kommitten

358
00:45:49,160 --> 00:45:53,400
wir das in unser Git-Repo, machen Änderungen und Dinger. Ich glaube, dann wird das wahrscheinlich

359
00:45:53,400 --> 00:45:59,640
auch alles ein bisschen, bisschen greifbarer. Wie macht mir die neue Datei-Steuerung N. So,

360
00:45:59,640 --> 00:46:12,400
das wird jetzt, äh, unser ganz tolles Bash-Skript. Die Schrift ist riesengroß. Echo. Hallo Twitch.

361
00:46:12,400 --> 00:46:28,280
Ups, ich hab einen Punkt zu viel. So. Und, wenn man sich das jetzt mal anguckt in unserem

362
00:46:28,280 --> 00:46:33,480
Git-Repo, äh, Hasenkürze fragt, was ist deiner Meinung nach die Entwicklungsumgebung

363
00:46:33,480 --> 00:46:39,160
der Zukunft? Eclipse Intellijane Visual Studio kommt drauf an, für was. Also, ich denke,

364
00:46:39,160 --> 00:46:47,600
unter Windows und für Microsoft-Gedöns, was, also sowas wie C-Sharp oder, oder VisualBasic.net

365
00:46:47,600 --> 00:46:55,840
oder solche Dinger. Ich bin im falschen Ordner gelandet. Echt? Ne, ich glaub, ich glaub,

366
00:46:55,840 --> 00:47:06,320
das passt. Ähm, ne, ich bin im falschen Ordner. WTF, hä? Ach, ich bin im falschen, ja, ich

367
00:47:06,320 --> 00:47:14,840
bin wirklich im falschen Ordner. Lul. Da ist es. Da ist jetzt auch das drinne. Naja,

368
00:47:14,840 --> 00:47:20,840
um nochmal zur Entwicklungsumgebung zurückzukommen. Jetzt ist auch die ReadMe drinne, ja. Jetzt

369
00:47:20,840 --> 00:47:25,480
funktioniert das Ganze auch. Ähm, unter Windows wird es weiter Visual Studio bleiben. Für

370
00:47:25,480 --> 00:47:31,520
JavaScript seh ich, also für JavaScript und Webzeug, seh ich ehrlich gesagt Visual Studio

371
00:47:31,520 --> 00:47:41,240
Code ziemlich weit vorne und ist auch recht beliebt. Für C++ find ich den Cute Creator

372
00:47:41,240 --> 00:47:47,480
ziemlich gut. Aber man kann auch, wenn man Windows Zeug entwickelt, das ohne Problem

373
00:47:47,480 --> 00:47:56,480
mit Visual Studio machen. Und für Java und solche Sachen, ich hasse Eclipse. Ich, Eclipse

374
00:47:56,480 --> 00:48:01,520
ist wirklich, da musst du instant kotzen, wenn man es benutzen muss. Ähm, wenn, dann

375
00:48:01,520 --> 00:48:11,960
verwende ich Intelli, war das IntelliJ? IntelliJ, ID, genau, ja, das Ding. Für Groovy und solche

376
00:48:11,960 --> 00:48:19,840
Sachen. Aber, ähm, für Webgeschichten ist Visual Studio Code zur Zeit sehr angesagt.

377
00:48:19,840 --> 00:48:31,880
So, jetzt hab ich, jetzt hab ich irgendwie ziemlich n Mist gemacht hier. So, ähm, wir

378
00:48:31,880 --> 00:48:37,080
haben jetzt angefangen unser tolles Bash Script zu programmieren. Das macht nicht sonderlich

379
00:48:37,080 --> 00:48:46,400
viel. Das macht aktuell noch gar nix. Außer auszugeben, hallo Twitch. Nein, das neue Assassin's

380
00:48:46,400 --> 00:48:55,120
Creed hab ich mir noch nicht angeguckt. Ähm, jetzt will ich aber vielleicht, dass da der

381
00:48:55,120 --> 00:49:01,360
Patrick oder der Sebaro oder irgendjemand dran mitarbeiten können. Und deswegen muss

382
00:49:01,360 --> 00:49:09,480
ich jetzt erstmal mein tolles neues Bash Script comitten und pushen, dass das irgendjemand

383
00:49:09,480 --> 00:49:16,840
anderes verwenden könnte. Und man sieht hier schon, dass Git da grundsätzlich das erstmal

384
00:49:16,840 --> 00:49:22,440
unterscheidet zwischen Dateien, die es kennt und Dateien, die es nicht kennt. Wenn ich

385
00:49:22,440 --> 00:49:29,400
eine neue Datei angelegt hab, dann sagt Git erstmal standardmäßig, ähm, selbst wenn

386
00:49:29,400 --> 00:49:35,040
ich jetzt sage, ich will comitten, sagt Git erstmal standardmäßig, ne, kenn ich net,

387
00:49:35,040 --> 00:49:42,760
das ist das. Wenn ich mir mit Git Status angucke, was gerade im Repo so passiert, ähm, sehe

388
00:49:42,760 --> 00:49:47,720
ich, dass ich untracked Files drinne hab. Warum sind die Files untracked? Naja, ich

389
00:49:47,720 --> 00:49:53,360
hab's gerade eben erst angelegt. Und da muss ich initial einmal für jede Datei, die neu

390
00:49:53,360 --> 00:49:57,880
ist, man kann das auch umgehen, ja, man kann das auch einfacher machen, ähm, die muss

391
00:49:57,880 --> 00:50:01,640
ich erstmal hinzufügen. Muss ich erstmal sagen, Git, kümmere dich um die Datei in

392
00:50:01,640 --> 00:50:05,920
diesem Ordner. Nur weil ich hier in dem Git Ordner drinne bin, heißt das noch lange nicht,

393
00:50:05,920 --> 00:50:09,720
dass sich Git standardmäßig für jede Datei zuständig fühlt. So, wenn ich jetzt ein Git

394
00:50:09,720 --> 00:50:14,520
add auf die Datei gemacht hab, dann sehe ich schonmal bei dem nächsten Git Status, change

395
00:50:14,520 --> 00:50:19,480
to be committed, also sprich, Git kennt die Datei jetzt, ähm, und ich kann mir jetzt

396
00:50:19,480 --> 00:50:24,680
auch mit Git diff, ne, mit Git, äh, fuck, wie ging das, staged, ähm, kann ich mir auch

397
00:50:24,680 --> 00:50:32,880
angucken, was Git jetzt committen würde. Und nun kann ich auch sagen, Git commit, und

398
00:50:32,880 --> 00:50:42,000
jetzt, ich kann das immer nur betonen, die meisten Leute halten sich nicht dran, oder,

399
00:50:42,000 --> 00:50:47,880
ähm, sind da einfach nur zu faul für, ich muss sagen, bin ich auch oftmals, ne gescheite

400
00:50:47,880 --> 00:50:54,160
Commit Message reinzuschreiben. Das muss nix langes sein, aber was ne schlechte Commit

401
00:50:54,160 --> 00:50:59,480
Message ist, ist zum Beispiel das hier. Wenn ich an jedem Projekt arbeite, und selbst wenn

402
00:50:59,480 --> 00:51:06,440
ich nur alleine dran arbeite, dann hab ich spätestens in zwei Tagen keine Ahnung mehr,

403
00:51:06,440 --> 00:51:11,040
was ich hier bitteschön bei Fixes gemacht hab. Wenn ich da jetzt reinschreib, wenn

404
00:51:11,040 --> 00:51:21,560
ich da wenigstens sowas reinschreib, Schreibfehler, fix, irgendwie, verschrieben, gefixt, ähm,

405
00:51:21,560 --> 00:51:29,520
also, es hat seinen Vorteil, wenn man da irgendwas Sinnvolles reinschreibt, ja, äh, es reicht

406
00:51:29,520 --> 00:51:33,840
schon, wenn wir irgendwie reinschreiben, hier edit new script oder irgendwas, da hat man

407
00:51:33,840 --> 00:51:41,920
halbwegs noch nen Anhaltspunkt, was denn da, warum ist das eigentlich Nano? Warum ist das

408
00:51:41,920 --> 00:51:53,040
Nano? Ich will, ich will kein Nano. Wie konnte man das nochmal ändern? Editor, ähm, wenn

409
00:51:53,040 --> 00:52:01,960
man das hier so richtig schreibt, config, global, editor, oh, fuck, wie ging das jetzt,

410
00:52:01,960 --> 00:52:09,480
das muss ich nachgucken. Was einem auch bei Git klar sein muss, man ist ziemlich oft unterwegs,

411
00:52:09,480 --> 00:52:14,160
man kann entweder in der Gitman-Page gucken, wobei die Gitman-Page absolut wir geschrieben

412
00:52:14,160 --> 00:52:21,440
ist, oder aber, man schaut einfach nach. Ah, hier, guck, git config global core editor

413
00:52:21,440 --> 00:52:29,320
vim, das will ich machen. So, und wenn ich jetzt das nächste Mal was committe, dann geht

414
00:52:29,320 --> 00:52:33,360
auch ein ordentlicher Editor auf und nicht Nano. So, was man jetzt hier schon sieht ist,

415
00:52:33,360 --> 00:52:39,800
ich hab ein neues Skript angelegt, ähm, ich hab's commited, wenn ich jetzt in die history

416
00:52:39,800 --> 00:52:45,160
gucke, ja, ja, Milchwein, ich sag ja Stack Overflow Driven Programming, wenn ich jetzt

417
00:52:45,160 --> 00:52:49,680
in meine history gucke, also sprich, dort wo ich sehe, in welcher Reihenfolge was passiert

418
00:52:49,680 --> 00:52:55,840
ist, dann seh ich auch, ok, es gab hier unten einmal mein initiales Comet und hier drüber

419
00:52:55,840 --> 00:52:59,480
seh ich, ich hab ein neues Comet gemacht hier vor ein paar Minuten, wo ich ein neues Skript

420
00:52:59,480 --> 00:53:04,320
hinzugefügt hab. Wenn ich's jetzt genau wissen will, aktuell ist es noch ziemlich übersichtlich.

421
00:53:04,320 --> 00:53:15,080
Moment. Aktuell ist es noch ziemlich übersichtlich, es ist, sind zwei Comets in dem Repo und die

422
00:53:15,080 --> 00:53:21,000
sind beide von mir. Ähm, wenn man sich jetzt mal beispielsweise von Visual Studio Code

423
00:53:21,000 --> 00:53:26,240
die Comets anguckt, das sind beispielsweise 25.000 und von total vielen unterschiedlichen

424
00:53:26,240 --> 00:53:30,120
Leuten. Wir gucken uns jetzt noch mal auf der Kommando-Zeile an, ich klon mir das Ganze

425
00:53:30,120 --> 00:53:34,680
noch mal. Das ist ein Projekt, das ist, hat eine gute Größe, das ist nicht so riesengroß

426
00:53:34,680 --> 00:53:46,840
wie der, wie jetzt irgendwie der Linux Kernel oder sowas. Na, eben war das Ganze aber auch

427
00:53:46,840 --> 00:53:56,760
schon ein bisschen schneller. Hat das eben schon genau so lang gebraucht, den Krams zu

428
00:53:56,760 --> 00:54:03,360
klonen, ging das nicht eben noch schneller? Ha. Ja gut, sobald, sobald das geklont ist,

429
00:54:03,360 --> 00:54:06,040
gucken wir da mal in die Historie rein, da sehen wir, dass ich schon ein bisschen mehr

430
00:54:06,040 --> 00:54:11,720
als war mir im Repo drin und da wird eine Sache auch schon mal gleich klar und zwar,

431
00:54:11,720 --> 00:54:16,800
dass es sinnvoll ist, ordentliche Comet-Messages zu machen. Das ist jetzt nämlich ein Projekt,

432
00:54:16,800 --> 00:54:27,800
wo 409 Leute schon mitgewirkt haben in 25.000 oder in knapp 26.000 Comets. Da wird es dann

433
00:54:27,800 --> 00:54:30,560
schon ein bisschen schwieriger mit der Übersicht. Wenn wir jetzt hier mal ein Gitlog drinnen

434
00:54:30,560 --> 00:54:34,440
machen, sehen wir nämlich auch, dass es sind von ganz vielen unterschiedlichen Leuten,

435
00:54:34,440 --> 00:54:39,800
die da dran mitgearbeitet haben und wenn jetzt hier jeder reingeschrieben hätte, irgendwie

436
00:54:39,800 --> 00:54:44,160
fix ist, dann wird es ganz schön kompliziert zu checken, was da eigentlich passiert ist.

437
00:54:44,160 --> 00:54:50,280
Einmal wieder zurück zu unserem Noob-Repo, so ein Billig-Repo, das hat immer noch zwei

438
00:54:50,280 --> 00:54:57,480
Comets drin und jetzt der große Unterschied zu Versionsverwaltungssystemen wie beispielsweise

439
00:54:57,480 --> 00:55:04,720
SVN, ja doch, ich kann das Zeug nicht richtig, ich verdrehe da immer die Buchstaben, ich

440
00:55:04,720 --> 00:55:12,160
verdrehe auch immer CVS und CSV und alles. Der große Unterschied zu quasi zentralen

441
00:55:12,160 --> 00:55:17,400
Versionsverwaltungssystemen mit dem zentralen Server, was es ja so bei Git nicht gibt, ist,

442
00:55:17,400 --> 00:55:23,520
ich habe jetzt eine neue Datei angelegt, ich habe jetzt diesen neuen Stand committed, habe

443
00:55:23,520 --> 00:55:32,560
ich mit einer Commit-Message dabei, aber das ist nach wie vor nur lokal bei mir. Das muss

444
00:55:32,560 --> 00:55:37,160
man wissen, das ist nur lokal, also sprich, wenn jetzt irgendjemand von euch sich hier

445
00:55:37,160 --> 00:55:43,920
mein Repo klonen würde, würde er diese Änderung noch nicht sehen, obwohl sie committed sind,

446
00:55:43,920 --> 00:55:56,600
das ist bei SVN komplett anders. Da ist Commit halt Commit. Und was ich jetzt machen muss,

447
00:55:56,600 --> 00:56:02,680
dass das andere Leute auch benutzen können, bzw. um es halt zu irgendeinem anderen Server

448
00:56:02,680 --> 00:56:13,520
zu schieben, achtmal mit Git push. Und hier ist es auch wichtig, dass man, auch wenn man

449
00:56:13,520 --> 00:56:19,440
es nicht machen muss, ist es sinnvoll, hier immer die kompletten Optionen anzugeben.

450
00:56:19,440 --> 00:56:25,560
Also quasi, was ich machen will ist, ich will Git benutzen, ich will meinen Stand woanders

451
00:56:25,560 --> 00:56:33,040
hinschieben, Git push, jetzt muss ich angeben, wohin, in dem Fall Origin, Origin ist das Repo,

452
00:56:33,040 --> 00:56:38,360
von dem ich geklonet habe, und jetzt, welcher Branch, was ein Branch ist, kommen wir gleich

453
00:56:38,360 --> 00:56:43,880
noch dazu. So, wenn ich das mache, dann funktioniert das Ganze auch, und wenn ich jetzt hier refresche,

454
00:56:43,880 --> 00:56:50,960
ist das auch da, mein Skript. Und wenn jetzt jemand von euch sich mein Repo geklonet hätte,

455
00:56:50,960 --> 00:57:00,280
und Git pull macht, dann wird er die Änderung auch sehen. Warum ich das für wichtig halte,

456
00:57:00,280 --> 00:57:07,120
hier immer alles komplett anzugeben. Man kann auch die Kurzfassung machen, Git push. Git

457
00:57:07,120 --> 00:57:13,000
push funktioniert in 99% der Fälle ohne Probleme, weil Git mittlerweile relativ clever ist, und

458
00:57:13,000 --> 00:57:20,640
bei Git push standardmäßig halt nur den Branch pusht, auf dem man drauf ist. Das war früher

459
00:57:20,640 --> 00:57:27,640
nicht so. Früher war Git push das Standard, das die Fault verhalten so, dass alle Branches,

460
00:57:27,640 --> 00:57:32,680
die man lokal hatte, gepusht wurden, und da hat man teilweise Sachen gepusht, die man

461
00:57:32,680 --> 00:57:39,360
nicht pushen wollte. Ich hatte mal auf der Arbeit einen, der hat irgendwie 15 Branches

462
00:57:39,360 --> 00:57:45,560
gepusht, die er sich mal irgendwann ausgecheckt hat, paar Änderungen drin ausprobiert hat,

463
00:57:45,560 --> 00:57:55,280
und die wollte er eigentlich gar nicht pushen. Das war halt ein bisschen blöd für ihn. Der

464
00:57:55,280 --> 00:58:01,680
Name Origin verwirrt mich. Origin ist der Default Name für die Quelle, von der man,

465
00:58:01,680 --> 00:58:05,560
oder wie es der Patrick gerade sagt, von der Herkunft, von der Quelle, wo man geklont

466
00:58:05,560 --> 00:58:16,280
hat. Das ist der Default Name des Servers, des Remotes, bei Git heißt das Remote, von

467
00:58:16,280 --> 00:58:23,600
dem man geklont hat. Man kann das übrigens auch umbenennen. Ich kann auch Git remote

468
00:58:23,600 --> 00:58:35,920
rename, wie ging das nochmal, wenn ich das noch richtig schreibe, Git remote rename,

469
00:58:35,920 --> 00:58:47,800
Origin kann ich auch umbenennen in, zum Beispiel GitHub. Wenn ich mir das jetzt angucke, heißt

470
00:58:47,800 --> 00:58:51,200
das überhaupt nicht mehr Origin. Wenn ich das jetzt nochmal machen würde, würde ich

471
00:58:51,200 --> 00:58:56,440
sagen, das geht nicht, weil es das Remote Origin nicht mehr gibt. Jetzt müsste ich sagen,

472
00:58:56,440 --> 00:59:10,920
Git push, Git hub master. Ist auch zu empfehlen, also wenn man mehrere Remotes hat, ist das

473
00:59:10,920 --> 00:59:16,000
sinnvoll, die so zu benennen, dass man auf den ersten Blick gleich sieht, ja was wozu

474
00:59:16,000 --> 00:59:23,280
gehört. Also das ist schon nicht verkehrt. Wir rename das nochmal, weil es ist ja gar

475
00:59:23,280 --> 00:59:30,640
nicht GitHub, sondern es ist unser Fake GitHub. Es ist ja gar kein echtes GitHub, worauf

476
00:59:30,640 --> 00:59:37,240
wir gepusht haben. Es ist ja nur unser Fake GitHub. Was wir jetzt gemacht haben ist, wir

477
00:59:37,240 --> 00:59:43,080
haben ein neues Skript angelegt, wir haben das committed und wir haben das gepusht. Das

478
00:59:43,080 --> 00:59:53,560
sind so die Standard-Basis-Operationen, die man immer braucht in Git. Ohne commiten, ohne

479
00:59:53,560 --> 01:00:04,040
adden, ohne commiten, ohne pushen kommt man meistens nicht weit. Den Part mit pushen kann

480
01:00:04,040 --> 01:00:09,280
man weglassen, wenn man nur lokal arbeitet. Man braucht sowas hier nicht, also sprich,

481
01:00:09,280 --> 01:00:15,440
man muss sein Zeug nicht auf GitHub hochladen, das muss nicht sein. Man kann auch rein lokal

482
01:00:15,440 --> 01:00:21,520
arbeiten. Ist auch nicht schlecht, wie gesagt, wenn man irgendwas klein im Bastelt und auch

483
01:00:21,520 --> 01:00:33,320
gar nicht vorhat, das zu veröffentlichen. So, was gibt es jetzt als nächstes? Genau,

484
01:00:33,320 --> 01:00:42,760
was sind Branches? Dazu muss man sich erstmal angucken, was sind commits. Wenn man in die

485
01:00:42,760 --> 01:00:47,920
History guckt, was man, by the way, mit GitLog macht. GitLog hat übrigens sehr viele praktische

486
01:00:47,920 --> 01:00:57,280
Optionen, beispielsweise das hier. Das hier ist ein Beispiel für typische Git-Optionen,

487
01:00:57,280 --> 01:01:03,160
die sind nicht immer logisch. Also standardmäßig zeigt mir GitLog meine History an, also sprich

488
01:01:03,160 --> 01:01:10,480
vom ältesten Commit zum neuesten Commit. Sag ich jetzt, GitLog name only als Option

489
01:01:10,480 --> 01:01:15,720
zeigt es mir mehr an, allerdings noch die Namen, die sich geändert haben im jeweiligen

490
01:01:15,720 --> 01:01:20,240
Commit der Datei, also welche Dateien sich im jeweiligen Commit geändert haben. Obwohl

491
01:01:20,240 --> 01:01:24,360
die Option minus minus name only so aussieht, als würde es weniger anzeigen, nämlich nur

492
01:01:24,360 --> 01:01:30,240
names only, macht es das nicht. Ganz viele Git-Commandos sind total wir, da muss man

493
01:01:30,240 --> 01:01:36,760
sich mit abfinden. Und die Git-Man-Pages sind ehrlich gesagt auch nicht sonderlich

494
01:01:36,760 --> 01:01:40,880
hilfreich. So mal hier als Beispiel. Guckt euch, lest euch mal, oder lesen wir uns mal

495
01:01:40,880 --> 01:01:47,320
die ersten Sätze durch von GitPush. Man versteht nichts. Normalerweise ist eine Man-Page dafür

496
01:01:47,320 --> 01:01:52,040
da, das soll einem das alles erklären, ein bisschen helfen, wie das Ganze funktioniert.

497
01:01:52,040 --> 01:01:59,240
So, und die Hilfeseite für GitPush sagt mir, GitPush updates remote refs using local refs

498
01:01:59,240 --> 01:02:04,200
while sending objects necessary to complete the given refs. Und jetzt kommt der beste

499
01:02:04,200 --> 01:02:12,880
Satz überhaupt. You can make interesting things happen to a repository. Also, die Git-Man-Pages

500
01:02:12,880 --> 01:02:19,280
sind legendär verwirrend. Ich würde gar nicht erst anfangen Git-Man-Pages zu lesen,

501
01:02:19,280 --> 01:02:22,880
in dem Fall ist man wirklich mit einer Google-Suche und Stack-Overflow-Antworten meistens besser

502
01:02:22,880 --> 01:02:31,520
dran. Also Git-Man-Pages sind wirklich sehr verwirrend. So, aber wenn wir uns jetzt nochmal

503
01:02:31,520 --> 01:02:36,280
die History angucken, sehen wir, wir haben zwei Comets drinne, mein initiales Comet und

504
01:02:36,280 --> 01:02:45,280
das, wo wir das Skript hinzugefügt haben. Jedes Comet bekommt in Git eine eindeutige

505
01:02:45,280 --> 01:02:53,960
Hashtag-ID. Das ist ein Schar-Hash-Wert, wenn das interessiert. Und man sieht ja auch

506
01:02:53,960 --> 01:03:01,400
teilweise ganz interessante Informationen dahinter. Zum Beispiel, welcher Remote-Stand eben auf

507
01:03:01,400 --> 01:03:05,520
welchem Comet gerade ist und sowas, aber das ist jetzt erstmal egal. Wichtig ist, dass

508
01:03:05,520 --> 01:03:10,240
jedes Comet einen eindeutigen Hashtag-Wert bekommt. Und dieser Hashtag-Wert oder diese

509
01:03:10,240 --> 01:03:17,680
Comet-ID, nennen wir es mal Comet-ID, ist eines der Grundlagen, worauf Git basiert und

510
01:03:17,680 --> 01:03:21,400
eines der wichtigsten Sachen. Man muss nicht wissen, was es ist, was es genau macht. Was

511
01:03:21,400 --> 01:03:29,080
man wissen muss ist, jedes Comet hat weltweit sehr, sehr, sehr wahrscheinlich eine eindeutige

512
01:03:29,080 --> 01:03:40,760
ID. Und ihr habt hier beispielsweise das Visual Studio Code-Repo gesehen, das hat schon 25.000

513
01:03:40,760 --> 01:03:48,640
Comets. Und es ist sehr wahrscheinlich, dass es kein Git-Repo gibt. Alle Git-Repos weltweit

514
01:03:48,640 --> 01:03:59,040
zusammen. Dass es kein Comet gibt, das die gleiche ID hat. Und das ist auch wichtig,

515
01:03:59,040 --> 01:04:10,480
weil bei Git ziemlich viel auf dieser Comet-ID basiert. Man braucht sie selbst relativ selten,

516
01:04:10,480 --> 01:04:15,480
aber ich denke, das ist eine wichtige Sache, die einem klar sein muss. Weil, und das ist

517
01:04:15,480 --> 01:04:21,280
auch eine wichtige Sache, man kann in Git die History, ich weiß, dass es geht, aber

518
01:04:21,280 --> 01:04:29,680
ich sag's jetzt mal ein bisschen überspitzt, man kann in Git die History nicht ändern.

519
01:04:29,680 --> 01:04:37,200
Man kann in Git die History nur umschreiben. Und wenn man in Git die History umschreibt,

520
01:04:37,200 --> 01:04:45,040
ändert sich alles ab dem Zeitpunkt des Umschreibens. Weil die ganzen Comets basieren aufeinander.

521
01:04:45,040 --> 01:04:51,200
Also sprich, diese Comet-ID, oder besser gesagt, diese Comet-ID, wird errechnet, aus dem der

522
01:04:51,200 --> 01:04:57,480
es committet, aus der Uhrzeit, wann es committet wird, und ganz wichtig, aus der Comet-ID,

523
01:04:57,480 --> 01:05:04,000
des Vorgänger-Comets. Das heißt, wenn ich jetzt feststelle, ich hab hier unten irgendwann

524
01:05:04,000 --> 01:05:09,480
mal Mist committet, was vorkommen wird, wie man das beheben kann, kommen wir auch noch

525
01:05:09,480 --> 01:05:15,640
dazu. Wenn ich jetzt feststelle, ich hab hier unten irgendwann mal Mist committet in mein

526
01:05:15,640 --> 01:05:21,880
Git Repo, dann kann ich das erstmal so pauschal nicht ändern. Das ist drinnen. Für immer

527
01:05:21,880 --> 01:05:28,040
und ewig ist das in diesem Git Repo drinnen. Weil wenn ich jetzt hier hingehen würde,

528
01:05:28,040 --> 01:05:34,720
und das ändern, würden sich alle Comets, die da drauf kommen, die nachvollen Comets,

529
01:05:34,720 --> 01:05:39,840
wie sich die Comet-ID ändern. Was dazu führen würde, dass es für Git intern ein komplett

530
01:05:39,840 --> 01:05:45,720
anderes Repo wäre, und alle, die irgendwie mitarbeiten an dem Repo, eine Historie haben

531
01:05:45,720 --> 01:05:50,760
die nicht mehr zusammenpasst. Also die Historie in Git kann man nicht ändern. Man kann sie

532
01:05:50,760 --> 01:05:57,520
nur umschreiben, und da sollte man auch aufpassen, was man macht. So, deswegen ist es auch nochmal

533
01:05:57,520 --> 01:06:04,840
wichtig, dass es einem klar wird, dass man mit Git standardmäßig nur lokal arbeitet.

534
01:06:04,840 --> 01:06:10,200
Das heißt, man kann, wenn man Mist committet hat, bevor man es pusht, das ändern, wie

535
01:06:10,200 --> 01:06:18,120
man will, das wird nie jemand sehen, aber wenn man es gepusht hat, ist es da. Quasi

536
01:06:18,120 --> 01:06:25,280
für immer. Das heißt, man muss sich überlegen, was man pusht. So, einmal angenommen, das

537
01:06:25,280 --> 01:06:29,440
ist was, was viele Git-Tutorials beispielsweise viel später machen, aber ich finde, das ist

538
01:06:29,440 --> 01:06:35,240
eigentlich eines der häufigsten Probleme, die Leute haben, die neu mit Git anfangen

539
01:06:35,240 --> 01:06:40,880
oder die halt allgemein sich da, sich das gerade einfach ein bisschen angucken und das

540
01:06:40,880 --> 01:06:44,840
lernen wollen. Wie kriege ich denn jetzt was wieder raus, wenn ich Mist committet habe?

541
01:06:44,840 --> 01:06:51,160
Was, die Uhrzeit stimmt nicht? Ja, stimmt, die Uhrzeit stimmt nicht. Die Uhrzeit ist

542
01:06:51,160 --> 01:06:57,840
total falsch. So, wie kriege ich denn jetzt wieder raus, wenn ich Mist committet habe?

543
01:06:57,840 --> 01:07:04,040
Weil angenommen, ich habe hier jetzt irgendwas committet. Wir können uns mit git log minus

544
01:07:04,040 --> 01:07:09,560
p, kann man sich anzeigen lassen, was committet wurde. Da sehen wir zum Beispiel, okay, ich

545
01:07:09,560 --> 01:07:16,040
habe hier halt eine Datei committet mit diesem Inhalt und ich habe jetzt festgestellt, Mist,

546
01:07:16,040 --> 01:07:19,480
eigentlich wollte ich schreiben, hallo stream und ich habe hallo twitch tv geschrieben.

547
01:07:19,480 --> 01:07:25,720
Ich habe das jetzt gepusht, das ist da. Also man sieht das ja auch hier, wenn sich jetzt

548
01:07:25,720 --> 01:07:31,240
irgendjemand geklont hätte, ja, dann hätte er jetzt halt das fehlerhafte Skript gehabt.

549
01:07:31,240 --> 01:07:35,920
Was mache ich denn jetzt? Wie kriege ich denn das wieder raus? Und die einfache Antwort

550
01:07:35,920 --> 01:07:45,160
ist gar nicht. Fixen und neu committen. Das ist der Weg in Git Fehler zu beheben. Also

551
01:07:45,160 --> 01:07:55,160
selbst, wenn ich jetzt quasi theoretisch zurückrollen könnte, sollte ich das auf keinen Fall machen,

552
01:07:55,160 --> 01:07:59,760
wenn ich es schon gepusht habe, weil danach sieht die history anders aus. So, und der

553
01:07:59,760 --> 01:08:05,680
Gitweg, sowas zu fixen, ist im Prinzip ganz einfach. Man macht ein neues Comet. Also sprich,

554
01:08:05,680 --> 01:08:14,040
ich rolle das jetzt nicht zurück und committe es nochmal mit dem korrekten Text, sondern

555
01:08:14,040 --> 01:08:18,360
ich editiere das jetzt einfach zu dem, was ich eigentlich haben wollte, zwar hallo stream,

556
01:08:18,360 --> 01:08:22,360
ich wollte nicht hallo twitch schreiben und jetzt committe ich das ganze einfach nochmal.

557
01:08:22,360 --> 01:08:30,080
Jetzt Git Status eingeben, sagt der mir hier, guck mal, es hat sich was geändert. Visual

558
01:08:30,080 --> 01:08:33,840
Studio Code sollte glaube ich auch irgendwie anzeigen, dass sich was geändert hat, macht

559
01:08:33,840 --> 01:08:41,680
es nicht. Konnte das Visual Studio Code nicht, konnte das nicht anzeigen, dass sich was

560
01:08:41,680 --> 01:08:49,280
Git technisch geändert hat. Keine Ahnung, ist ja auch wurscht. Ähm, wir machen das

561
01:08:49,280 --> 01:08:55,680
jetzt mal hier alles Commando-Zeile. Genau, und jetzt mache ich ein neues Comet. Ich kann

562
01:08:55,680 --> 01:09:02,320
das alles ein bisschen abkürzen. Die richtige Reihenfolge ist doch links im Git-Reiter.

563
01:09:02,320 --> 01:09:09,920
Ah, das habe ich gesucht, ja quasi so ein Diff, was sich geändert hat. Aber sonderlich

564
01:09:09,920 --> 01:09:14,160
schön ist es, schön ist es nicht. Ich kenne es von manchen Editoren, dass man hier vorne

565
01:09:14,160 --> 01:09:20,360
so Plus und Minus angezeigt bekommt, wo sich was geändert hat. Ist aber auch egal. So,

566
01:09:20,360 --> 01:09:25,960
die normale Reihenfolge, was zu committen ist ja, man edit es, ich mach das jetzt nicht,

567
01:09:25,960 --> 01:09:33,480
man committet es und danach kann man es pushen oder das lokal lassen. Es gibt eine Kurzform

568
01:09:33,480 --> 01:09:39,280
davon und die wird wahrscheinlich jeder verwenden, der häufiger Git verwendet, weil es einfach

569
01:09:39,280 --> 01:09:48,400
nervig ist immer was zu adden. Man sagt einfach Git A minus M. Das heißt, committe alles,

570
01:09:48,400 --> 01:09:55,400
alle Änderungen aus Dateien, die du kennst. In dem Fall, tolles Skript. Message nimmt

571
01:09:55,400 --> 01:10:02,720
den Text, den ich hier hinten angebe, als Comet-Message. Ja, ich schaue jetzt irgendwie

572
01:10:02,720 --> 01:10:09,400
mit Echo Text, was auch immer. So, wenn ich jetzt nachgucke, jetzt habe ich ein drittes

573
01:10:09,400 --> 01:10:17,120
Comet, was den Fehler korrigiert hat, den ich vorher mit committet habe. Ich habe vorher

574
01:10:17,120 --> 01:10:20,600
Mist committet, den habe ich jetzt wieder korrigiert. Und das ist der Weg, wie man das

575
01:10:20,600 --> 01:10:28,120
in Git fixt. Standardmäßig rollt man nichts zurück, um was zu fixen. Also man rollt nichts

576
01:10:28,120 --> 01:10:34,320
zurück, fixt es und committet es wieder. Man sagt, ok, der Fehler ist drinne, man ändert

577
01:10:34,320 --> 01:10:38,320
ihn und macht ein neues Comet. Was ja auch irgendwo sinnvoll ist, weil überlegt euch

578
01:10:38,320 --> 01:10:44,360
mal, ihr habt einen Fehler gepusht schon. Jemand anderes, der mitarbeitet, hat sich

579
01:10:44,360 --> 01:10:52,440
das quasi ausgecheckt bei sich und hat jetzt die Datei mit dem Fehler und er hat vielleicht

580
01:10:52,440 --> 01:10:57,320
da drin schon was editiert und ihr würdet es dann zurückrollen und dann pusht ihr eine

581
01:10:57,320 --> 01:11:02,600
Datei, die so aussieht, die, quasi die Version, die er bei sich lokal hat, hätte es ja dann

582
01:11:02,600 --> 01:11:08,200
nie gegeben in der History. Deswegen hat Git bei sowas Probleme, wenn man History ändert.

583
01:11:08,200 --> 01:11:11,600
Da kommt es zu ganz wirren Ergebnissen und ich kann es nicht empfehlen, irgendwie die

584
01:11:11,600 --> 01:11:19,320
History umzuschreiben. Es sei denn, es ist lokal, bevor man pusht. So. Wenn man noch

585
01:11:19,320 --> 01:11:23,120
nicht gepusht hat, kann man sich das Leben ein bisschen einfacher machen. Wie gesagt,

586
01:11:23,120 --> 01:11:27,480
normalerweise kommt das in Git-Tutorials immer viel später dran, aber ich finde das, wie

587
01:11:27,480 --> 01:11:34,360
gesagt, das ist eines da, ja, eines, ein großes Problem, was viele Leute haben, die neue Git

588
01:11:34,360 --> 01:11:37,480
verwenden. Wenn man noch nicht gepusht hat, kann man sich das Leben ein bisschen einfacher

589
01:11:37,480 --> 01:11:44,560
machen. Zum Beispiel, wenn ich jetzt sage, Mist, meine Comet-Message ist falsch. Ich

590
01:11:44,560 --> 01:11:49,720
wollte eigentlich nicht hinschreiben, Changed Echo Text, sondern Fixed Echo Text. Mist,

591
01:11:49,720 --> 01:11:53,400
was mache ich denn jetzt? Soll ich jetzt ein neues Comet wirklich machen, wo ich dann

592
01:11:53,400 --> 01:11:59,160
nochmal Fixed Echo, das ist doch, das ist doof. Das ist doof. Aber ich hab Glück, ich hab

593
01:11:59,160 --> 01:12:03,800
noch nicht gepusht. Da sieht man hier unten auch an dem kleinen Pfeil von meiner, äh,

594
01:12:03,800 --> 01:12:13,880
hier bash-git-sonsmaas-extension, äh, zschl-bash, äh, zsh-git-extension, ähm, dass ich quasi

595
01:12:13,880 --> 01:12:17,800
lokal mehr Comets habe als Remote und ich die jetzt pushen könnte. Deswegen ist da

596
01:12:17,800 --> 01:12:22,920
jetzt so ein Pfeil nach oben. Ähm, wenn ich jetzt einfach nur die Comet-Message ändern

597
01:12:22,920 --> 01:12:28,120
will von meinem letzten Comet, wohlgemerkt, wenn ich noch nicht gepusht habe, sobald ich

598
01:12:28,120 --> 01:12:33,280
gepusht habe, soll ich dieses Comet nie wieder anfassen, ähm, dann kann ich das so machen.

599
01:12:33,280 --> 01:12:43,000
Und wir merken uns jetzt mal hier den Hash-Wert von diesem Comet, also quasi die weltweit

600
01:12:43,000 --> 01:12:48,600
eindeutige Comet-ID. So, und hiermit kann ich jetzt das letzte Comet nochmal ändern.

601
01:12:48,600 --> 01:12:55,600
So, und ich wollte schreiben Fixed-Echo-Text. Bam. Und jetzt kommt der Knackpunkt, die Comet-ID

602
01:12:55,600 --> 01:13:00,560
hat sich geändert. Und die Comet-ID ist das, woran Git festmacht, ob es ein Comet eben

603
01:13:00,560 --> 01:13:05,760
kennt oder nicht. Das heißt, wenn ich es schon gepusht hätte, hätte das jetzt geändert,

604
01:13:05,760 --> 01:13:13,520
dass, äh, dann wäre Git verwirrt. Und alle, die es schon geklont hätten, wären auch verwirrt,

605
01:13:13,520 --> 01:13:17,600
weil dann auf einmal was verschwindet, was schon mal da war. Und Git basiert darauf,

606
01:13:17,600 --> 01:13:21,560
dass nichts verschwindet, sondern nur neue Sachen oben drauf kommen. Also das muss immer

607
01:13:21,560 --> 01:13:26,760
so eine, die Historie muss immer quasi eins auf dem anderen aufsetzen und darf sich nicht

608
01:13:26,760 --> 01:13:32,000
zwischendrin ändern. Ähm, aber nachdem ich das ja nur lokal bei mir hatte, hat das Remote

609
01:13:32,000 --> 01:13:36,200
noch nie jemand gesehen. Sieht man ja auch, wenn ich hier meine Comments angucke, mein

610
01:13:36,200 --> 01:13:40,480
neustes Comet hab ich noch überhaupt nicht gepusht. Jetzt hab ich es lokal bei mir gefixt

611
01:13:40,480 --> 01:13:45,920
und jetzt kann ich das Ganze auch pushen und gut ist. Ähm, so und ich zeig euch jetzt

612
01:13:45,920 --> 01:13:54,360
mal, was passiert, wenn ich das doch machen würde, die Historie ändern. Die haben was

613
01:13:54,360 --> 01:14:02,240
genannt. GitHub, nee. Fake GitHub. So und dann gucken wir uns mal an, was Branches sind.

614
01:14:02,240 --> 01:14:08,880
Comets sind da. Passt, jetzt hab ich es gepusht. So und wenn ich jetzt mich nicht dran halte

615
01:14:08,880 --> 01:14:18,480
und sage, ich ändere was in meiner Historie, obwohl ich schon gepusht habe. Äh, ah guck

616
01:14:18,480 --> 01:14:23,160
mal, der Eaxe ist da. Schon durch, mit was? Du meinst hier mit, äh, mit Kot? Ne, ich

617
01:14:23,160 --> 01:14:27,320
hab heute noch gar nicht gespielt. Ich hatte heute noch keine Zeit. Aber wahrscheinlich

618
01:14:27,320 --> 01:14:31,440
spiel ich nachher ne Runde. Komm, wir können nachher ne Runde, ähm, Dings hier War spielen

619
01:14:31,440 --> 01:14:36,960
zusammen, wenn du willst. So und wenn ich jetzt jetzt doch mache, also sprich, wenn

620
01:14:36,960 --> 01:14:40,240
ich jetzt doch die Historie ändere, obwohl ich schon gepusht hab, machen wir mal, ich

621
01:14:40,240 --> 01:14:45,320
hab jetzt schon gepusht, jetzt sag ich, ach nee, ich würde doch gerne, dass mein, dass

622
01:14:45,320 --> 01:14:51,320
meine letzte Comet Message wieder, äh, nicht Fixed Echo Text ist, sondern, äh, Changed

623
01:14:51,320 --> 01:14:58,400
so Echo, Echo Text. Kann ich lokal machen. Jetzt zeigt es mir hier aber auch schon lokal

624
01:14:58,400 --> 01:15:02,080
an, äh, die Historie passt irgendwie nicht zusammen. Und wenn ich das jetzt versuche

625
01:15:02,080 --> 01:15:13,320
zu pushen, dann sagt Git, geht nicht. Weil, Git hat als letztes Comet, das hier und bei

626
01:15:13,320 --> 01:15:17,400
mir lokal will ich was pushen, wo es dieses Comet nicht gibt. Da sagt Git jetzt irgendwie,

627
01:15:17,400 --> 01:15:22,320
Moment, das passt nicht zusammen. Äh, guckst du Overwatch World Cup Halbfinale? Ja, mach

628
01:15:22,320 --> 01:15:30,240
ich. Das geht demnächst los, ne? Muss ich mal gucken. Ja, geht irgendwie in 20 Minuten

629
01:15:30,240 --> 01:15:36,960
oder so los. Also die Basics mach ich, mach ich immer noch fertig. Äh, äh, Eax, ich

630
01:15:36,960 --> 01:15:41,320
will Overwatch gucken fällt mir gerade ein. Ich wollt, wollt, äh, Dings die Overwatch

631
01:15:41,320 --> 01:15:45,120
Halbfinale gucken. Ich kann's vergessen, dass das jetzt schon anfängt. So, und jetzt

632
01:15:45,120 --> 01:15:52,080
sieht man schon, wenn ich das versuch zu pushen, geht nicht. So, und eine, die blödeste Sache,

633
01:15:52,080 --> 01:15:56,920
die ich jetzt machen könnte, ich zeige euch nur mal, dass es geht, ist, wenn ich mit Force

634
01:15:56,920 --> 01:16:02,880
pushe. Weil dann sag ich, Git, einfach scheiß drauf, was du denkst, mach's einfach. So,

635
01:16:02,880 --> 01:16:07,200
und jetzt sieht man, ähm, wenn ich jetzt hier auf Comets gehe, jetzt ist das Comet

636
01:16:07,200 --> 01:16:11,640
verschwunden und meins da. Jeder, der sich dieses Repo jetzt geklonet hätte, würde

637
01:16:11,640 --> 01:16:16,200
einen Fehler bekommen, wenn er das nächste Mal versucht, was zu pullen. Das will man

638
01:16:16,200 --> 01:16:23,720
nicht. Also, ganz einfach kann man sich merken, sobald was gepusht ist, wird das nicht mehr

639
01:16:23,720 --> 01:16:31,520
angefasst. Nie wieder. Bis das Universum sich in Luft auflöst. Was gepusht wurde,

640
01:16:31,520 --> 01:16:39,440
public, wird nie wieder angefasst. So. Das muss man jetzt mal so klar sagen. Monka Shake,

641
01:16:39,440 --> 01:16:45,840
das macht man nicht, sowas. Weil dann haben alle, die dann dran mitarbeiten und man selbst

642
01:16:45,840 --> 01:16:55,400
Probleme danach. Wie kann ich denn jetzt was rückgängig machen? Ähm, mal angenommen,

643
01:16:55,400 --> 01:16:59,920
ich hab jetzt was größeres geändert und das war einfach kompletter Mist. Also sprich,

644
01:16:59,920 --> 01:17:12,560
ähm, ich hab jetzt hier nen Sündagsfehler drinne. Ich hab jetzt hier nen Sündagsfehler

645
01:17:12,560 --> 01:17:24,200
drinne. So. Ich hab ein neues Feature programmiert, was eigentlich, ähm, ganz toll ist und super

646
01:17:24,200 --> 01:17:30,520
funktionieren sollte. So, und ich hab das jetzt committed, gepusht und jetzt stell ich fest,

647
01:17:30,520 --> 01:17:39,520
Mist ich habe Mist gepusht. Ich hab nen Sündagsfehler drinne. Ja gut. In dem Fall ist es jetzt relativ

648
01:17:39,520 --> 01:17:43,760
einfach. Ich mein, ich kann jetzt das genauso machen, wie ich es eben gezeigt hab. Ich

649
01:17:43,760 --> 01:17:48,400
könnte hier reingehen, das löschen und nochmal neu committen. Aber, wenn wir jetzt mal von

650
01:17:48,400 --> 01:17:54,320
ausgehen würden, realistischer gesehen, ähm, dieses neue Feature würde sich, sagen wir

651
01:17:54,320 --> 01:18:03,200
mal, über 20 Dateien und 500 geänderte Zeilen erstrecken und ich, quasi derjenige, der sich

652
01:18:03,200 --> 01:18:08,800
um das Repo kümmert, ja, dass das alles sauber und ordentlich läuft, hat gar keine Ahnung

653
01:18:08,800 --> 01:18:14,280
von dem, was dieser Typ da committed hat, dann ist es ganz schön schwierig von Hand

654
01:18:14,280 --> 01:18:18,840
das Commit wieder rückgängig zu machen und in die Form zu bringen, dass es wieder funktioniert.

655
01:18:18,840 --> 01:18:24,680
Bei anderen Versionsverwaltungssystemen wäre die logischste Schlussfolgerung jetzt, ich

656
01:18:24,680 --> 01:18:29,440
rolle zurück, also quasi auf den Stand vor diesem Commit, was alles kaputt gemacht hat,

657
01:18:29,440 --> 01:18:35,880
weil, ne, dieses Commit hat unser tolles Programm zerstört. Also würde ich jetzt normalerweise

658
01:18:35,880 --> 01:18:40,240
hier rauf zurückrollen, weil ich weiß, davor ging es noch alles. Das ist ja auch, sieht

659
01:18:40,240 --> 01:18:43,800
man es wieder, ist eines der großen Vorteile von einem Versionsverwaltungssystem, da kann

660
01:18:43,800 --> 01:18:50,200
ich sowas machen, sprich, ich hab hier meine vergangenen Stände relativ gut beschrieben

661
01:18:50,200 --> 01:18:55,640
und weiß auch jetzt noch, wie das Programm heute Morgen ausgeschaut hat, oder ich kann

662
01:18:55,640 --> 01:19:00,800
mir den Stand von heute Morgen auch angucken. Also, wie macht man das jetzt? Also mal angenommen,

663
01:19:00,800 --> 01:19:05,320
dieses Feature hätte sich jetzt über 20 Dateien verteilt und hätte 500 Zeilen geändert

664
01:19:05,320 --> 01:19:09,000
und ich hab dieses Feature nicht programmiert, also ich weiß gar nicht genau, was der da

665
01:19:09,000 --> 01:19:14,480
eigentlich gemacht hat. Ich will es einfach rückgängig machen. Ich will es einfach rückgängig

666
01:19:14,480 --> 01:19:19,120
machen und, wie ich es gerade gesagt hab, einfach auf den Stand vorher zurückrollen

667
01:19:19,120 --> 01:19:34,000
ist mit Git nicht. Dafür gibt es bei Git den Befehl Revert. Revert macht genau das, was

668
01:19:34,000 --> 01:19:40,720
ich vorher von Hand gemacht hab, nämlich der dreht das Comet einfach um. Also, ich

669
01:19:40,720 --> 01:19:48,040
zeig es euch hier nochmal. In dem letzten Comet weiß Git ja, dass ich, ich zeig mal

670
01:19:48,040 --> 01:20:00,840
nur das letzte an, Git weiß ja, in dem letzten Comet wurden diese Zeilen geändert, hinzugefügt.

671
01:20:00,840 --> 01:20:08,200
So, und Git Revert ist ziemlich simpel in dem, was es macht, das dreht das einfach um.

672
01:20:08,200 --> 01:20:13,320
Also sprich, wenn in diesem Comet diese Zeilen hinzugekommen sind, wird ein Git Revert diese

673
01:20:13,320 --> 01:20:19,760
Zeilen löschen. Zeilen, die gelöscht werden, wird ein Git Revert hinzufügen. Ein Git Revert

674
01:20:19,760 --> 01:20:28,040
macht quasi einfach ein umgedrehtes Comet. So, und wenn es jetzt wirklich von jemand

675
01:20:28,040 --> 01:20:33,360
anderem, was entwickelt worden wäre, dieses Feature, was jetzt unser Programm kaputt

676
01:20:33,360 --> 01:20:38,360
gemacht hat und halt sich über 500 Zeilen erstrecken würde und ich will einfach nur,

677
01:20:38,360 --> 01:20:45,080
dass das Programm wieder geht, dann würde ich sagen Git Revert, letztes Comet, da kann

678
01:20:45,080 --> 01:20:50,360
man jetzt entweder die Comet ID nehmen oder man kann es auch abkürzen, wir nehmen jetzt

679
01:20:50,360 --> 01:20:56,400
mal die Comet ID, das ist glaube ich einfacher und jetzt sagt er mir auch hier, ok, das

680
01:20:56,400 --> 01:21:02,760
ist ein neues Comet, aber dieses Comet löscht einfach nur die Veränderung von eben diesem

681
01:21:02,760 --> 01:21:07,920
Comet. Wenn ich jetzt in meine History gucke, ist im Endeffekt genauso, wie ich das vorher

682
01:21:07,920 --> 01:21:12,400
von Hand gemacht habe, bloß, dass das Git Revert automatisch für mich gemacht hat. Das

683
01:21:12,400 --> 01:21:17,840
Comet ist immer noch da, aber der Inhalt ist wieder weg. Also sprich, die Dateien sind

684
01:21:17,840 --> 01:21:23,000
wieder auf dem Stand von da, aber ich bin in der History nicht auf dem Stand von da,

685
01:21:23,000 --> 01:21:29,760
sondern dort. So viel zu, wenn man Mist Cometet hat, wie kriegt man es wieder weg. Find ich

686
01:21:29,760 --> 01:21:33,200
ist eines der wichtigsten Sachen, die man wissen muss, die meisten Git Tutorials machen

687
01:21:33,200 --> 01:21:38,360
das irgendwann am Schluss. Und jetzt kann ich das nämlich auch pushen ohne Force, weil

688
01:21:38,360 --> 01:21:43,040
die History immer noch 1, 2, 3, 4, 5, also aufeinander basiert und nichts mehr verschwindet

689
01:21:43,040 --> 01:21:47,760
zwischendurch. So was sieht man ab und zu mal, also sprich, wenn man den öffentlichen Git

690
01:21:47,760 --> 01:21:53,760
Push guckt, wird man das ab und zu mal sehen, Revert von bla bla bla. Also sprich, da ist

691
01:21:53,760 --> 01:21:58,400
irgendwie ein Comet reingekommen, was irgendwas kaputt gemacht hat und anstatt es lange zu

692
01:21:58,400 --> 01:22:03,440
suchen oder es zu fixen, sagt man, ok, wir Reverten das einfach erstmal wieder, dann

693
01:22:03,440 --> 01:22:10,760
ist es weg. Aber es ist halt wohlgemerkt aus dem Programm raus, also hier aus dem Bash

694
01:22:10,760 --> 01:22:14,560
Script ist es raus, allerdings in der Git History ist es noch drin. Das ist wichtig

695
01:22:14,560 --> 01:22:22,640
zu wissen. So. Nächste Frage ist, was ist ein Branch? Wir haben uns jetzt angeguckt,

696
01:22:22,640 --> 01:22:28,240
die History, wir haben uns angeguckt, dass jedes Comet eine eindeutige Aldi hat. Ja cheat,

697
01:22:28,240 --> 01:22:33,880
ich weiß, dass meine Comet Messages wahnsinnig aussagekräftig sind, aber die sind aussagekräftiger

698
01:22:33,880 --> 01:22:48,240
als die meisten Comet Messages, die ich auf der Arbeit lese. So. Also, wir wissen jetzt,

699
01:22:48,240 --> 01:22:59,640
wie man was committet, wie man, wenn man Mist committet hat, das wieder wegbekommt und wir

700
01:22:59,640 --> 01:23:05,880
wissen, wie man was zu einem Remoteserver pushen kann. Das sind schon mal ganz gute

701
01:23:05,880 --> 01:23:12,040
Grundlagen, wo man erstmal mitarbeiten kann und wo man auch schon zumindest in beschränktem

702
01:23:12,040 --> 01:23:22,360
Umfang zusammenarbeiten kann. Äh, zockst du heute noch Cod? Ich hatte eigentlich vor

703
01:23:22,360 --> 01:23:30,040
heute Cod zu spielen, allerdings fängt gleich der Overwatch World Cup an und ich wollte

704
01:23:30,040 --> 01:23:38,280
ich gucken. Aber eins, ich muss jetzt mal eine Sache gucken, wenn wir gerade dabei sind.

705
01:23:38,280 --> 01:23:47,400
Kommuniert er das? Nein, ich guck das einfach nur. Naja, immerhin 45.000, das ist für

706
01:23:47,400 --> 01:23:55,920
immer noch relativ viel, ja. So. Jetzt gucken wir uns aber nochmal an, zwei Sachen muss

707
01:23:55,920 --> 01:24:06,160
man uns noch anschauen, bevor wir so mit den absoluten Git Basics durch sind und zwar

708
01:24:06,160 --> 01:24:13,040
sind, was sind Branches und wie führt man zwei Branches wieder zusammen. Das ist ein

709
01:24:13,040 --> 01:24:18,000
Thema, generell kann man über diese ganzen Sachen stundenlang erzählen und wir sind

710
01:24:18,000 --> 01:24:22,880
wahrscheinlich auch jetzt mit diesem Stream heute noch nicht ganz fertig, weil wirklich

711
01:24:22,880 --> 01:24:26,680
weit kommen tut man damit noch nicht, es fehlen noch ein paar Sachen. Aber was wichtig zu

712
01:24:26,680 --> 01:24:39,040
wissen ist, was sind Branches. Branches sind ähm, Namen für einen Commit, könnte man

713
01:24:39,040 --> 01:24:50,280
so sagen, wo man später noch neue oben drauf legen kann. Ähm, also sprich, ich kann jetzt,

714
01:24:50,280 --> 01:24:55,120
dass ich hier im Master Branch drinnen bin, ist einfach nur, weil das so defaultmäßig

715
01:24:55,120 --> 01:25:02,480
ist, weil man in irgendeinem Branch drinnen sein muss. Ähm, Branch ist, gibt's bestimmt

716
01:25:02,480 --> 01:25:09,560
ein schönes Bild dazu, genau. Ein Branch ist sowas, also quasi, man hat einen Baum, man

717
01:25:09,560 --> 01:25:18,400
hat einen Ast und davon gehen halt so kleine Branchen, kleinere Äste von raus. Und so

718
01:25:18,400 --> 01:25:25,560
ähnlich ist das in Git auch, ich hab hier meinen Master Branch, also quasi das default

719
01:25:25,560 --> 01:25:31,360
Ding, in dem ich standardmäßig entwickle. Wenn ich jetzt was neues einbauen möchte

720
01:25:31,360 --> 01:25:39,880
in unser tolles Bash Crypt. Wenn ich jetzt da irgendwas neues drin einbauen will, was

721
01:25:39,880 --> 01:25:45,520
ganz furchtbar experimentell ist zum Beispiel, von dem ich nicht weiß, ob es überhaupt

722
01:25:45,520 --> 01:25:52,920
funktionieren wird, dann wäre das ziemlich blöd, ich würde das im Master Branch entwickeln,

723
01:25:52,920 --> 01:25:57,840
Committen und zwischendrin pushen, weil dann kriegen ja alle Leute die Version, die vielleicht

724
01:25:57,840 --> 01:26:04,920
kaputt ist. Und deswegen macht man sich dann meistens einen eigenen Branch auf dafür,

725
01:26:04,920 --> 01:26:08,240
man kann auch den Master entwickeln, vor allem wenn man alleine an irgendwas entwickelt.

726
01:26:08,240 --> 01:26:19,240
Hehe, der Nilsson. Übrigens Nilsson, was mir gerade einfällt, hat dich auf Twitter

727
01:26:19,240 --> 01:26:28,240
in dem letzten Mal ein Joe angeschrieben, ob du über seine Rechnerzusammenstellung drüber

728
01:26:28,240 --> 01:26:32,840
gucken könntest. Das wäre nett von dir, wenn du mal drüber gucken könntest, weil

729
01:26:32,840 --> 01:26:38,400
da tut sich da sehr schwer. Genau, wir machen jetzt, wir wollen jetzt ein super experimentelles

730
01:26:38,400 --> 01:26:43,240
hochkritisches Feature in unser tolles Bash Crypt einbauen. Zum Beispiel, wie das Serious

731
01:26:43,240 --> 01:26:49,480
Max gerade schreibt im Chat Echo123. Ganz kritisch, furchtbar schlimm und das wollen

732
01:26:49,480 --> 01:26:56,040
wir nicht in unserem Hauptentwicklungszweig, Hauptentwicklungsbranche machen, weil wir

733
01:26:56,040 --> 01:27:01,880
wollen ja da eine Version drin haben, die erstmal, auf den ersten Blick lauffähig

734
01:27:01,880 --> 01:27:08,920
ist. Deswegen macht man dann einen eigenen Branch auf, dazu sagt man Git Checkout minus

735
01:27:08,920 --> 01:27:18,120
B. Zum Beispiel, äh, nennen wir jetzt den Branch neues Feature. Das ist vielleicht

736
01:27:18,120 --> 01:27:29,200
auch nicht der beste Name. So, äh, und jetzt hab ich quasi den Stand, ich geh nochmal

737
01:27:29,200 --> 01:27:35,800
zurück. Fuck, ich hab meine Alias hier nicht, nicht, Git Checkout Master. Äh, jetzt hab

738
01:27:35,800 --> 01:27:44,200
ich quasi den Stand von meiner History genommen und einfach, wie man es hier oben sieht, ähm,

739
01:27:44,200 --> 01:27:50,400
da noch einen weiteren Namen dran geklebt. Also, auf dieses Comet, dieses Comet kann

740
01:27:50,400 --> 01:27:56,320
ich zur Zeit mit unterschiedlichen Namen ansprechen. Beispielsweise mit Master, mit, ja, FakeGit

741
01:27:56,320 --> 01:28:02,920
Hat Master, äh, oder eben auch mit neues Feature. Alle diese Branches zeigen aktuell noch auf

742
01:28:02,920 --> 01:28:11,520
dieses Comet. Jetzt hab ich es aber aufgesplittet, indem ich einen neuen Branch gemacht hab und

743
01:28:11,520 --> 01:28:17,360
wenn ich jetzt neue Sachen committe, dann sind die erstmal nur in neues Feature drinne

744
01:28:17,360 --> 01:28:24,000
und nicht in Master. Also, zum Beispiel, wir machen jetzt hier mal ganz, ganz kritisch,

745
01:28:24,000 --> 01:28:32,880
Echo123. Das ist wirklich, das ist hoch expert, wie schreibt man das überhaupt? Kritisch.

746
01:28:32,880 --> 01:28:38,960
Das ist ganz kritisch, Echo123, das kann echt in die Hose gehen, ja. Äh, das, das committe

747
01:28:38,960 --> 01:28:51,880
ich jetzt noch mit, ähm, es ist hier, Achtung, gefährlich. So, jetzt hab ich ein neues Comet

748
01:28:51,880 --> 01:29:02,480
angelegt für mein ganz kritisches, äh, ganz kompliziertes, kritisches Feature und das

749
01:29:02,480 --> 01:29:06,200
ist jetzt nur in diesem Branch drinnen. Und wenn man hier auf mein FakeGit Hat noch mal

750
01:29:06,200 --> 01:29:11,280
geht, dann sieht man auch aktuell gibt es woanders überhaupt eine Branch Anzeige. Ah,

751
01:29:11,280 --> 01:29:25,040
hier, Branch. Es gibt aktuell nur Master Branch. Jetzt kann ich das pushen als, ähm, in diesem

752
01:29:25,040 --> 01:29:34,280
Branch und das hat jetzt den großen Vorteil, dass der Master Branch auf einer Version geblieben

753
01:29:34,280 --> 01:29:41,280
ist, die geht, die funktioniert, allerdings mein neues Feature Branch eben diesen super

754
01:29:41,280 --> 01:29:45,520
gefährlichen Comet enthält, der vielleicht alles kaputt gemacht hat. So, und die Version

755
01:29:45,520 --> 01:29:52,120
dieses Scripts kann man jetzt erstmal ordentlich testen und ausprobieren und wenn dieses neue

756
01:29:52,120 --> 01:29:59,080
Feature sich dann als brauchbar herausgestellt hat, dann kann ich sagen, ich nehme das neue

757
01:29:59,080 --> 01:30:05,520
Feature jetzt und schiebe das wieder zurück in den Master Branch. Aber bis ich das gemacht

758
01:30:05,520 --> 01:30:17,680
hab, ist im Master Branch weiterhin ein relativ stabiler Stand und alle experimentellen Entwicklungen

759
01:30:17,680 --> 01:30:24,440
hier in diesem neuen Feature Branch. Ja, Silbaro, genau dafür ist das sinnvoll. Silbaro hat

760
01:30:24,440 --> 01:30:32,160
geschrieben, neue Branches sind voll für neue Versionen oder Betas. Richtig. Man verwendet

761
01:30:32,160 --> 01:30:39,000
Branches für unterschiedliche Sachen, entweder gibt es, also eigentlich kann man es machen

762
01:30:39,000 --> 01:30:46,040
wie man will, aber es gibt so ein paar Konventionen, wie man das in Neudeutsch nennt, Best Practice,

763
01:30:46,040 --> 01:30:50,640
es gibt so ein paar Sachen, die haben sich so etabliert, also man macht Branches beispielsweise

764
01:30:50,640 --> 01:30:59,640
für neue Features. Man macht Branches auch für alte Release Versionen, wo man vielleicht

765
01:30:59,640 --> 01:31:11,520
noch was dran fixen muss. Das macht der Lidlxkernel beispielsweise so. Man kann auch Hotfix Branches

766
01:31:11,520 --> 01:31:24,520
machen. In der Regel macht man Branches immer dann, wenn man erstmal den eigentlichen Stand

767
01:31:24,520 --> 01:31:38,920
nicht verändern will und erstmal ausprobieren möchte. Deswegen ist es in den Reb, ich muss

768
01:31:38,920 --> 01:31:45,480
meine Git-Aliasse hier einrichten, sonst dreh ich durch. Deswegen ist es auch bei den Git-Repos,

769
01:31:45,480 --> 01:31:53,920
die ich verwalte, so, dass in den Master-Branche außer mir keiner pushen darf. Das hab ich

770
01:31:53,920 --> 01:32:09,600
durchgeblockt. Außer mir darf in 5 Branches keiner pushen, unter anderem Master. So ist

771
01:32:09,600 --> 01:32:17,640
sichergestellt, dass zumindest ein gewisses Maß an Kontrolle vorhanden ist, was im Master

772
01:32:17,640 --> 01:32:24,000
kommt und was nicht. Weil es ist einfach so, dass Master eben der Standard-Branch ist,

773
01:32:24,000 --> 01:32:34,960
auf dem Leute ihre neuen Entwicklungen aufsetzen. Und der sollte halbwegs stabil sein. Das ist

774
01:32:34,960 --> 01:32:41,040
nicht das stable Release, was ich jetzt irgendwie zum Download anbiete oder so. Das sollte aber

775
01:32:41,040 --> 01:32:58,120
ein halbwegs stabiler Entwicklungsstand sein, wo andere Leute drauf aufsetzen können. Das

776
01:32:58,120 --> 01:33:03,120
Ding Master heißt, ist aber wie gesagt auch einfach nur ein Name, genauso wie das Origin

777
01:33:03,120 --> 01:33:08,240
des Remotes. Das ist einfach nur ein Name, ich kann das Ding auch umbenennen. Also wenn

778
01:33:08,240 --> 01:33:12,880
ich jetzt beispielsweise nicht will, dass es standardmäßig einen Master-Branch gibt,

779
01:33:12,880 --> 01:33:21,740
ich kann's auch umbenennen. Ich kann jetzt auch sagen, Master zu stable. Was bescheuert

780
01:33:21,740 --> 01:33:26,640
ist, weil in der Regel ist das eben der aktive Entwicklungs-Branch, der aber halt nicht kaputt

781
01:33:26,640 --> 01:33:39,720
sein sollte. Und jetzt können wir beispielsweise ein neues Feature testen, alles wunderbar.

782
01:33:39,720 --> 01:33:45,040
Und wenn ich fertig bin, und das werden wir nächstes Mal noch ein bisschen vertiefen,

783
01:33:45,040 --> 01:33:48,920
weil dann gucken wir uns mal an, was passiert, wenn das Zusammenführen Konflikte gibt und

784
01:33:48,920 --> 01:33:59,400
sowas in der Richtung. Wenn ich damit fertig bin, wenn das getestet ist, und nachdem ich

785
01:33:59,400 --> 01:34:03,160
diesen Branch gepusht habe, können das natürlich auch andere Leute bei sich ausprobieren,

786
01:34:03,160 --> 01:34:11,280
indem sie einfach eben mit Git Checkout den Branch wechseln. Dann kommt das Ganze wieder

787
01:34:11,280 --> 01:34:23,840
zurück in Master. Ach fuck, wie konnte man Graf mal nochmal Git Lock? So, aktuell sieht

788
01:34:23,840 --> 01:34:28,360
unsere History noch ziemlich gerade aus. Erstes Comet, zweites Comet, drittes Comet, viertes

789
01:34:28,360 --> 01:34:34,560
Comet, jedes Comet setzt aufeinander auf und alles ist gut. So sieht aktuell unsere

790
01:34:34,560 --> 01:34:39,120
History aus. Wenn ich jetzt fertig bin mit meinem neuen Feature, wenn ich das fertig

791
01:34:39,120 --> 01:34:47,200
entwickelt habe, kann ich sagen, ok, ich nehme dieses neue Feature und schiebe es in mein

792
01:34:47,200 --> 01:34:55,640
Hauptentwicklungsbranche rein, also in Master. Was mache ich mit Git Merge? Diese Option

793
01:34:55,640 --> 01:34:58,920
kann ich nächstes Mal erklären, das muss ich jetzt machen, dass ich überhaupt was sehe.

794
01:34:58,920 --> 01:35:05,880
So, jetzt kann ich das Mergen, dann gibt es ein eigenes Merge Comet und wenn ich jetzt

795
01:35:05,880 --> 01:35:10,600
in meine History reingucke, sehe ich, siehe da, das sind die Comets, die wir schon ein

796
01:35:10,600 --> 01:35:18,600
bisschen hatten und jetzt kommt hier ein neues Comet, das kommt aber aus einem anderen Branch,

797
01:35:18,600 --> 01:35:23,640
ich meine, das ist hier so ASCII-Graf gemalt, ja, man kann sich schon so ungefähr vorstellen.

798
01:35:23,640 --> 01:35:30,560
Bis hier ging es immer geradeaus und da kam aus einem zweiten Branch, hier wurde es abgespalten

799
01:35:30,560 --> 01:35:36,720
aus dem eigentlichen Branch, was committet und das ging dann parallel und hier in diesem

800
01:35:36,720 --> 01:35:45,400
letzten Comet wurde es wieder zusammengefügt. Ja, natürlich, das war jetzt wirklich die

801
01:35:45,400 --> 01:35:53,600
absolut ideale Zustand. Es kann ohne Probleme passieren, dass zwei Leute parallel an der

802
01:35:53,600 --> 01:35:59,800
gleichen Datei was geändert haben und dass sich das dann nicht verträgt beim Mergen.

803
01:35:59,800 --> 01:36:04,440
Aber das gucken wir uns das nächste Mal an und das nächste Mal habe ich mir vorher auch

804
01:36:04,440 --> 01:36:08,880
ein bisschen mehr Gedanken gemacht, was ich eigentlich erzählen will, weil es hat ein

805
01:36:08,880 --> 01:36:14,840
bisschen gedauert, bis ich reingekommen bin. Zumindest, was wir uns heute angeguckt haben,

806
01:36:14,840 --> 01:36:20,520
damit kommt man zumindest auf GitHub so basic-mäßig schon mal ganz gut zurecht, man kann sich

807
01:36:20,520 --> 01:36:25,240
in den Repo klonen, man kann was editieren, man kann was committen, man kann was pushen,

808
01:36:25,240 --> 01:36:30,280
das sind erstmal die wichtigsten Sachen und man kann Branches wechseln, wenn man vielleicht

809
01:36:30,280 --> 01:36:36,000
was ausprobieren will. Ich meine, es könnte ja sein, dass man ein GitHub-Projekt sich

810
01:36:36,000 --> 01:36:41,040
angucken möchte und halt nicht den Masterstand, den Hauptentwicklungsstand, von dem man sich

811
01:36:41,040 --> 01:36:46,080
angucken will, sondern wirklich irgendein experimentales Feature, weil einen das eben

812
01:36:46,080 --> 01:36:52,840
interessiert. Also Branch wechseln ist auch eine wichtige Geschichte und die logische

813
01:36:52,840 --> 01:36:56,120
Schlussfolgerung daraus ist, man muss auch wissen, wie man zwei Branches wieder zusammenführt.

814
01:36:56,120 --> 01:37:09,200
Ja, auskernFox mache ich auch so. Er hat geschrieben, wie hältst du es mit merge und commit? Ich

815
01:37:09,200 --> 01:37:12,680
fahre immer ganz gut mit Branches, in die nur committed wird und Branches, in die nur

816
01:37:12,680 --> 01:37:24,920
gemerged wird. Das mache ich ähnlich, mit immer mal kleinen Ausnahmen. Also, was nächstes

817
01:37:24,920 --> 01:37:30,920
Mal ist morgen Mittag? Was meinst du? Also, ich mache das immer mit kleinen Ausnahmen,

818
01:37:30,920 --> 01:37:39,600
weil manchmal ist es einfach viel einfacher, wenn man wirklich da irgendwie einen Zahlendreher

819
01:37:39,600 --> 01:37:45,600
drin hat oder sowas. Also, mal angenommen. Mal angenommen, wir haben jetzt eine neue

820
01:37:45,600 --> 01:37:55,360
Version und irgendwie die QS stellt fest, ist irgendwas kaputt. Natürlich kann ich

821
01:37:55,360 --> 01:37:59,200
demjenigen dann sagen, der damit was zu tun hat, hier mach mal einen Hotfix-Branch oder

822
01:37:59,200 --> 01:38:05,080
sonst was auf, das ist schon sinnvoll. Zu der Reihenlehre nach, ja. Aber wenn das mal

823
01:38:05,080 --> 01:38:11,440
angenommen wirklich sowas ganz furchtbar Simples ist, dass der einfach, keine Ahnung,

824
01:38:11,440 --> 01:38:16,080
Zahlendreher bei einer IP oder bei einem Name oder sowas falsch hat, dann setzen wir

825
01:38:16,080 --> 01:38:19,880
uns auch manchmal zu mir an den Rechner, gehen auf den jeweiligen Branch drauf, also auf

826
01:38:19,880 --> 01:38:26,800
den Beta, auf den aktuellen Beta-Branch und machen dann halt commit da drauf, obwohl da

827
01:38:26,800 --> 01:38:32,040
eigentlich nichts drauf committed werden soll. Das kann ich dann aber entscheiden und wenn

828
01:38:32,040 --> 01:38:36,320
ich das einfach sehe, dass es nur ein Zahlendreher ist oder so, dann sag ich dann, ja okay, komm,

829
01:38:36,320 --> 01:38:39,920
lass machen, machen wir keinen extra Branch auf. Aber auf ScanFolks normalerweise mach

830
01:38:39,920 --> 01:38:48,680
ich das auch so, ja. Alle Leute haben gefälligst, den eigenen Branch zu entwickeln, es zu testen

831
01:38:48,680 --> 01:38:55,040
und quasi als Merchrequest, Pullrequest, wie man es nennt, wie man es auch immer macht,

832
01:38:55,040 --> 01:39:04,600
einzureichen als Änderung für Master. Tobi tickt, benutzt du eine Git GUI um Merchkonflikte

833
01:39:04,600 --> 01:39:11,560
zu erkennen? Na ja, Merchkonflikte erkennt man auf jeden Fall, wenn es sobald sie gibt,

834
01:39:11,560 --> 01:39:17,120
weil da geht es nicht weiter. Ansonsten verwende ich eigentlich keine GUI für, ich mach das,

835
01:39:17,120 --> 01:39:20,760
wenn es kleine übersichtliche Merchkonflikte sind, aber das gucken wir uns das nächste

836
01:39:20,760 --> 01:39:26,800
Mal an. Wenn es kleine übersichtliche Merchkonflikte sind, mach ich das hier einfach auf der Kommandozeile

837
01:39:26,800 --> 01:39:33,200
im Wim. Oder aber, was auch ein ganz gutes Merch, ganz gut Merch-Diff an sich hat, ist

838
01:39:33,200 --> 01:39:41,240
Visual Studio Code. Aber normalerweise sind, ich weiß, dass viele Leute, die früher SVN

839
01:39:41,240 --> 01:39:44,720
verwendet haben, für die ist Merchen und Merchkonflikte und solche Sachen, das ist

840
01:39:44,720 --> 01:39:52,160
für die, das ist kurz bevor das Rechenzentrum implodiert quasi, das ist in Git alles nicht

841
01:39:52,160 --> 01:39:59,320
so wild. Also die meisten Merchkonflikte sind recht übersichtlich. Und ich meine, ich hab

842
01:39:59,320 --> 01:40:04,560
jetzt noch nie an sowas Großem beispielsweise, oder ich hatte noch nie die Verantwortung

843
01:40:04,560 --> 01:40:10,120
für das Repo, sowas Großem wie beispielsweise der Git, äh, der Linux-Könnel, ja. Aber

844
01:40:10,120 --> 01:40:14,520
wer hat das schon? Da gibt es eine Handvoll Leute auf der Welt, die das haben. Aber die

845
01:40:14,520 --> 01:40:21,680
Repo, äh, die Repos bei uns sind relativ groß. Und die Merchkonflikte, die es da gibt, sind

846
01:40:21,680 --> 01:40:33,120
eigentlich recht übersichtlich. Das ist nicht so wild. Weil es ist so, dass, es ist ja meistens

847
01:40:33,120 --> 01:40:39,640
in einem Projekt, wo mehrere Leute dran arbeiten, schon so ein bisschen aufgeteilt, so wer ist

848
01:40:39,640 --> 01:40:45,560
für was zuständig. Also es ist selten, dass quasi 3-4 Leute an den gleichen Dateien was

849
01:40:45,560 --> 01:40:51,880
editieren, ja. Der eine kümmert sich um das, der eine kümmert sich eher um das. Und klar,

850
01:40:51,880 --> 01:40:57,680
es gibt auch mal Dateien, wo parallel dran editiert wird. Aber meistens, meistens editieren

851
01:40:57,680 --> 01:41:02,000
die Leute an unterschiedlichen Dateien. Dementsprechend gibt es gar keine Merchkonflikte. Oder wenn

852
01:41:02,000 --> 01:41:06,080
es Merchkonflikte gibt, ist es relativ einfach zu lösen. Entweder ist es so offensichtlich,

853
01:41:06,080 --> 01:41:11,160
dass man das direkt, dass ich es direkt selber sehe. Oder aber, naja, ich nehme einfach die

854
01:41:11,160 --> 01:41:16,240
zwei Leute, von denen die Comets sind und die Bratsches sind, die Konflikten und sag

855
01:41:16,240 --> 01:41:22,360
ja, Jungs, werdet euch mal einig, wie muss es denn aussehen am Ende. Und das ist meistens

856
01:41:22,360 --> 01:41:27,320
nicht, nicht großartig kompliziert. Da sind vielleicht 3-4 Zeilen dann, die da konflikten

857
01:41:27,320 --> 01:41:36,320
oder so. Also es hält sich in Grenzen. Welches Webinterface benutzt ihr in der Firma für

858
01:41:36,320 --> 01:41:40,920
Pull-Request? GitLab. Wir haben früher GitLab verwendet. Und ich fand GitLab auch ziemlich

859
01:41:40,920 --> 01:41:47,480
gut. Ich hätte auch GitLab weiterverwendet. Aber die Firma hat sich ganz viele Atlassian-Tools

860
01:41:47,480 --> 01:42:03,880
gekauft. Und jetzt haben wir Bitbucket. Ja, Sebaro. Das stimmt. Irgendjemand hat eben

861
01:42:03,880 --> 01:42:10,280
was zu Pull-Request. Ach nee, hier war eine Frage drinne. Welches Webinterface benutzt

862
01:42:10,280 --> 01:42:18,680
ihr in der Firma für Pull-Request? GitLab. Bitbucket. Bitbucket. Das ist auch ganz gut.

863
01:42:18,680 --> 01:42:28,080
Also im Vergleich zu anderen Kack-Business-Software ist Bitbucket wirklich in Ordnung. Ich finde

864
01:42:28,080 --> 01:42:35,720
GitLab auch gut. Wobei GitLab mittlerweile ziemlich aufgebläht ist. Ah gut, es ist

865
01:42:35,720 --> 01:42:41,360
halt eine Ruby-On-Wales-Anwendung. So, ich hoffe euch hat der Stream gefallen. Ich gebe

866
01:42:41,360 --> 01:42:45,720
zu, das war am Anfang ein bisschen chaotisch, weil ich selbst nicht genau wusste, was ich

867
01:42:45,720 --> 01:42:48,400
alles erzählen muss, in welcher Reihenfolge und so. Das nächste Mal mache ich mir ein

868
01:42:48,400 --> 01:43:00,200
bisschen mehr Gedanken drüber. Aber ich hoffe so die ganz grundlegenden Basics sind

869
01:43:00,200 --> 01:43:06,720
zu rüber gekommen. Also sprich, man könnte jetzt ein Repo von GitHub klonen und dort

870
01:43:06,720 --> 01:43:11,760
eine Änderung mit drin und machen und vielleicht vorher einen eigenen Branch aufmachen und

871
01:43:11,760 --> 01:43:25,120
das Ganze pushen. Morgen geht es weiter. Ja, ich kann morgen weiter machen, Cheat. Hast

872
01:43:25,120 --> 01:43:32,960
du Vorschläge, was ich morgen machen soll? Also was immer super ist, ist wenn die Leute

873
01:43:32,960 --> 01:43:38,040
Fragen haben zu irgendwelchen Sachen, dann ist es einfach an roten Fahrten zu finden,

874
01:43:38,040 --> 01:43:45,720
was man erzählen kann. Wie schalt es mit dem Discord-Server aus, habe ich noch nicht gemacht.

875
01:43:45,720 --> 01:43:58,040
Also was ich morgen, ich werde morgen ein bisschen versteckte Sachen zeigen, die aber

876
01:43:58,040 --> 01:44:04,920
recht praktisch sind. Zum Beispiel, wie man Fehler finden kann. Es gibt in Git eingebaute

877
01:44:04,920 --> 01:44:12,440
Tools, die einem das Fehler finden ziemlich erleichtern. Also mit Fehler finden meine

878
01:44:12,440 --> 01:44:16,760
ich jetzt zum Beispiel, man stellt halt wirklich in der Beta-Phase irgendwie fest, es geht

879
01:44:16,760 --> 01:44:21,200
was nicht und dann geht es darum zu finden oder den Comet rauszufinden, der es kaputt

880
01:44:21,200 --> 01:44:29,480
gemacht hat. Das ist in Git viel einfacher als gedacht. Flash Gordon fragt, was ist mit

881
01:44:29,480 --> 01:44:37,200
Stashing und Staging? Du meinst, was der Unterschied ist? Verstehe ich das richtig? Oder ob ich

882
01:44:37,200 --> 01:44:57,160
es zeigen soll? Ja, Fatal, das stimmt. So richtige Probleme kriegt man eh erst, wenn man es verwendet.

883
01:44:57,160 --> 01:45:07,640
Ja, Cherrypicks ist aber schon ein bisschen, das brauchen die meisten Leute nicht. Das

884
01:45:07,640 --> 01:45:17,080
brauche ich, wenn man sich um sowas kümmert, quasi als Verantwortlicher für die Repos

885
01:45:17,080 --> 01:45:23,080
und so und für die unterschiedlichen Entwicklungsstufen. Da braucht man öfters mal Cherrypick, aber

886
01:45:23,080 --> 01:45:35,280
die meisten Leute brauchen es eigentlich nicht. Ganz simpel gesagt, Flash Gordon, hat Stash

887
01:45:35,280 --> 01:45:38,800
und Stage eigentlich überhaupt nichts miteinander zu tun, das sind komplett unterschiedliche

888
01:45:38,800 --> 01:45:42,400
Sachen. Stashing ist Zwischenspeichern von Änderungen, wenn man einen Branch wechseln

889
01:45:42,400 --> 01:45:49,880
muss und Staging ist das, was ich vorgemerkt habe für das nächste Comet, um es mal ganz

890
01:45:49,880 --> 01:45:56,840
kurz zu sagen. Wenn ich etwas adde und noch nicht committe, dann ist es gestaged für

891
01:45:56,840 --> 01:46:05,120
das nächste Comet und wenn ich etwas editiert habe, aber jetzt nicht committen will, weil

892
01:46:05,120 --> 01:46:08,160
ich vielleicht den Branch wechseln muss, weil mein Chef gerade zu mir gekommen ist und

893
01:46:08,160 --> 01:46:24,360
gesagt hat, du musst etwas machen, dann stash ich quasi in Zwischenspeicher. Ja, Fatal,

894
01:46:24,360 --> 01:46:39,000
das ist cool, dann hat es sich am wenigsten gelohnt, dass ich etwas dazu erzählt habe.

895
01:46:39,000 --> 01:46:48,000
Ja, dann mache ich das mal morgen. Es gibt noch einige coole Sachen, die man zeigen kann,

896
01:46:48,000 --> 01:46:54,880
wobei man sagen muss, bei Git ist es so, man kann damit alles machen, man kann damit machen,

897
01:46:54,880 --> 01:47:00,200
was man will und wie man es will, man sollte aber aufpassen, dass man es nicht übertreibt.

898
01:47:00,200 --> 01:47:08,280
Nur weil ich 500 Branches anlegen kann, muss ich das nicht unbedingt machen. Git selbst

899
01:47:08,280 --> 01:47:14,880
stört das überhaupt nicht, Git ist mit 500 Branches noch genauso schnell wie mit 2 Branches,

900
01:47:14,880 --> 01:47:20,680
aber es ist halt nicht wirklich übersichtlich. Nur weil ich 5 Branches auf einmal merken

901
01:47:20,680 --> 01:47:26,320
kann, weil das Git zulässt, muss ich das nicht unbedingt machen. Also, man kann alles

902
01:47:26,320 --> 01:47:31,000
mitmachen, es ist auch vollkommen egal, wie man das macht, aber wenn ich bei jedem Comet

903
01:47:31,000 --> 01:47:36,600
Force pushen muss, mache ich irgendwas verkehrt. Wie wäre es mit Versionstacks? Ja, könnte

904
01:47:36,600 --> 01:47:42,640
man auch machen. Bei der Gelegenheit könnte man eigentlich noch mal sagen, dass Comet

905
01:47:42,640 --> 01:48:00,520
IDs und Branches und Texts relativ ähnlich sind. Rebase, Rebase könnte man auch mal machen.

906
01:48:00,520 --> 01:48:09,200
Rebase ist wichtig, wenn man halt seine eigenen Comets aufräumen will, bevor man sie einreicht

907
01:48:09,200 --> 01:48:23,360
als Pull oder Merchrequest. Ja, das werde ich morgen machen. Und jetzt werde ich Overwatch

908
01:48:23,360 --> 01:48:32,240
World Cup gucken. Ich hoffe euch hat es gefallen. Übrigens wir haben ja heute unsere Linux

909
01:48:32,240 --> 01:48:39,040
FM verwendet, die wir vor paar Wochen eingerichtet haben zusammen im Stream. Wem das noch nicht

910
01:48:39,040 --> 01:49:07,520
aufgefallen ist. Gut. Dann macht's gut, bis morgen. Tschüss.

