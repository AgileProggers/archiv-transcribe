WEBVTT

00:00.000 --> 00:19.360
Häh, warum sieht die Quali so kacke aus?

00:19.360 --> 00:20.360
Watt!

00:20.360 --> 00:42.520
Ach, meine Auflösung ist falsch, lul.

00:42.520 --> 00:43.520
Geht gut.

00:43.520 --> 00:49.600
Das ist ein guter Titel, das muss ich jetzt gleich ändern.

00:49.600 --> 01:17.240
Das ist auch ein bester Titel.

01:17.240 --> 01:31.320
So, also, ich warte mal bis noch ein paar Leute da sind, weil es bringt dann nichts,

01:31.320 --> 01:41.080
wenn ich jetzt erzähle, was wir heute machen und es ist noch keiner da.

01:41.080 --> 01:53.000
Was ist das, fragt DxVinstea, ja, meinst du Git oder meinst du das, was du im Hintergrund

01:53.000 --> 01:54.000
siehst?

01:54.000 --> 01:55.000
Hallo, Opa-Burger.

01:55.000 --> 01:56.000
Git!

01:56.000 --> 02:17.200
Git ist ein Versionsverwaltungssystem oder eine, oh, wie schreiben sie offiziell, eine

02:17.200 --> 02:21.000
dezentrale Versionsverwaltung oder so.

02:21.000 --> 02:26.440
Komm mal gucken, was die selbst sagen, was sie sind.

02:26.440 --> 02:31.840
Ja gut, it's a version control system, da wäre ich jetzt auch drauf gekommen.

02:31.840 --> 02:35.720
Was sagen sie denn selbst, was sie sind?

02:35.720 --> 02:42.040
Git easy to learn, lightning fast, das sind immer die besten Intros.

02:42.040 --> 02:45.040
Ups.

02:45.040 --> 02:54.720
Das ist noch die Textdatei, wo ich meinen neuen Rechner geplant habe, aber der neue

02:54.720 --> 02:57.200
Rechner ist ja mittlerweile am Start.

02:57.200 --> 03:12.800
Ja, wir gucken uns heute Git an, weil, hat einen ganz speziellen Grund, ich hab das ja

03:12.800 --> 03:17.840
auch vor einer Weile schon mal angekündigt oder gefragt, besser gesagt, ob ich das machen

03:17.840 --> 03:24.600
soll, ob wir uns mal so Git-Grundlagen angucken wollen, sollen, wie auch immer und nachdem

03:24.600 --> 03:30.600
ich jetzt schon überraschend viele Leute immer mal wieder gefragt haben, wann es das

03:30.600 --> 03:35.800
denn jetzt gibt, hab ich mir gedacht, ah ja, go, go, go, da war das jetzt mal.

03:35.800 --> 03:40.280
Also ich kann jetzt sagen, also wer jetzt Call of Duty haben will, das mach ich vielleicht

03:40.280 --> 03:45.040
später noch ein paar Runden, aber jetzt machen wir erstmal Git-Grundlagen.

03:45.040 --> 04:01.040
Mal so in die Runde gefragt, so an die Leute, die schon da sind, habt ihr erstens eine Ahnung,

04:01.040 --> 04:07.120
was man mit einem Versionsverwaltungssystem macht oder mit einem Software, Source Code

04:07.120 --> 04:15.200
Versionssystem, Versionssystem, wie auch immer man es genau nennen mag, und habt ihr schon

04:15.200 --> 04:16.200
mal was mit Git gemacht?

04:16.200 --> 04:27.320
Git-Clone, Git-Clone ist, das haben wahrscheinlich die meisten, das ist das erste, was man damit

04:27.320 --> 04:28.320
macht.

04:28.320 --> 04:40.880
Also ich mein, GitHub werden wahrscheinlich auch die meisten kennen, weil man sagen muss,

04:40.880 --> 04:53.760
dass GitHub mit Git eigentlich erstmal gar nichts zu tun hat, GitHub ist ein Web-Frontend

04:53.760 --> 05:01.040
und hat mit Git an sich nichts zu tun.

05:01.040 --> 05:07.120
Du hast Git benutzt, um deine Hausaufgaben an der Uni abzugeben, echt, muss man Hausaufgaben

05:07.120 --> 05:11.480
mit Git hochladen, auch nicht schlecht.

05:11.480 --> 05:19.760
Sivuri hat es auch schon benutzt, ja es gibt da mittlerweile für so ziemlich jedes Betriebssystem

05:19.760 --> 05:28.520
entweder Pakete oder irgendwas fertig zum installieren oder irgendwelche IDE-Extensions, was auch

05:28.520 --> 05:35.360
immer, ist der Sound eigentlich von der Lautstärke her so ok, mal kurz gucken, oder soll ich

05:35.360 --> 05:40.440
den Sound auch ein bisschen leiser machen, also man kann das ja mittlerweile echt auf

05:40.440 --> 05:48.520
jedem Betriebssystem benutzen, ja, aber bevor wir uns jetzt so die Git-Grundlagen angucken

05:48.520 --> 05:51.920
können, müssen wir eine Sache noch machen, nachdem ich keinen Lust habe jetzt irgendeinen

05:51.920 --> 06:02.320
GitHub-Account vollzumüllen mit irgendwas, installieren wir uns oder hab ich ein Git-Management-Web-Frontend

06:02.320 --> 06:11.080
schon mal hier lokal bei mir installiert, was fast aussieht wie GitHub, wo wir da unser

06:11.080 --> 06:15.320
Repo anlegen können, das wir auch mal zu einem Remote-Server pullen können oder von einem

06:15.320 --> 06:18.640
Remote-Server pullen können und zu einem Remote-Server pushen können und sowas in

06:18.640 --> 06:32.040
der Richtung, Lola ausauf kam ja verbraucht, er macht das schon, so, jetzt mal die Frage,

06:32.040 --> 06:35.440
ich muss da selbstfalls ein bisschen reinkommen, ich hab mir ehrlich gesagt nicht so viele

06:35.440 --> 06:46.280
Gedanken gemacht, wie wir am besten anfangen, zumindest, zumindest GitHub werden wahrscheinlich

06:46.280 --> 06:51.760
die meisten Leute kennen, zum Beispiel der Linux-Könnel ist auf GitHub, der South-Code

06:51.760 --> 06:57.760
vom Linux-Könnel ist auf GitHub, so, da ist er, den klonen wir uns jetzt aber nicht, weil

06:57.760 --> 07:02.040
das ist saumäßig groß, ich weiß gar nicht wie lange das mittlerweile dauert, sich den

07:02.040 --> 07:11.000
Linux-Könnel zu klonen, also da ist, es hat auch ein paar Comets und so mittlerweile, oder

07:11.000 --> 07:21.000
was, was ist das für eine nervige Musik, so, es ist von Google beispielsweise auch ganz

07:21.000 --> 07:28.040
viel Software auf GitHub, öffentlich verfügbar, auch im Linux-Könnel, aber von Google gibt's

07:28.040 --> 07:40.600
auch viel, Microsoft hat Visual Studio Code, auch auf GitHub, den South-Code, ja, Mr.

07:40.600 --> 07:45.800
Milchmann, den Linux-Könnel klonen ist so eine Sache für sich, da würde ich aufpassen,

07:45.800 --> 07:51.400
das dauert ewig und ist ziemlich groß, aber nichtsdestotrotz ist es mit Git alles relativ

07:51.400 --> 07:55.000
schnell, wenn man es erstmal geklont hat, so, was wir jetzt als erstes machen, ist wir

07:55.000 --> 08:00.320
installieren uns mal so einen kleinen eigenen GitHub-Klon, den wir als Web-Frontend verwenden

08:00.320 --> 08:05.240
können, wohlgemerkt, das Web-Frontend hat mit Git unten drunter, also mit dem eigentlichen

08:05.240 --> 08:11.680
Tool überhaupt nichts zu tun, das macht bloß die Verwaltung und die Zusammenarbeit, wenn

08:11.680 --> 08:17.160
man mit mehreren Leuten oder auch alleine an unterschiedlichen Projekten in Repos arbeitet,

08:17.160 --> 08:22.600
ein bisschen einfacher, und nachdem viele Leute mit GitHub arbeiten, dachte ich mir,

08:22.600 --> 08:29.640
es ist genauso wichtig, so ein bisschen das zu zeigen, anstatt nur rein Git auf der Kommando-Zeile,

08:29.640 --> 08:33.760
denn wir gucken uns Git an, so wie es gedacht ist, nämlich mit den Kommando-Zeilen-Tools,

08:33.760 --> 08:42.600
es gibt für fast jede Entwicklungsumgebung mittlerweile Addons, wo man das quasi mit

08:42.600 --> 08:48.560
irgendeinem GUI rumklicken kann, gibt's für Eclipse beispielsweise, hat den besten Namen

08:48.560 --> 08:56.000
überhaupt, heißt EGIT, passt zu Eclipse, es hört gleich so richtig an, EGIT, aber es

08:56.000 --> 08:59.880
ist halt auch Eclipse, da muss man sich nicht wundern, es gibt für aber alle anderen Ideas

08:59.880 --> 09:05.760
mittlerweile, entweder schon eingebaut oder aber zum Unterladen, Git Extensions, Visual

09:05.760 --> 09:09.480
Studio Code hat's eingebaut, Visual Studio selbst hat's mittlerweile glaube ich auch

09:09.480 --> 09:18.360
eingebaut und für die anderen großen Ideas auch, aber ich bin da Ansicht, am besten

09:18.360 --> 09:23.560
kann man Git immer noch auf der Kommando-Zeile verwenden, weil das einfach die Tools sind,

09:23.560 --> 09:29.080
wofür es ursprünglich dafür entwickelt wurden und viele Sachen unter der Haube kann man

09:29.080 --> 09:37.480
auch nur mit den Kommando-Zeilen-Tools machen, so aber vorher, jetzt nochmal eine Frage an

09:37.480 --> 09:44.480
euch, wie gesagt wir benutzen kein GitHub Direct, wir benutzen GitHub Clone, bei mir

09:44.480 --> 09:49.040
die Lokal, das ist die Frage, ich hab schon einen installiert, den können wir gleich

09:49.040 --> 09:57.480
verwenden oder wollen wir uns mal einen selbst installieren, ich habe hier meinen Server

09:57.480 --> 10:06.800
stehen um die Ecke im Schrank und da könnten wir uns schnell einen Git Tiga, oder wie ihr

10:06.800 --> 10:12.320
man das ausspricht, Webfronten dann drauf installieren, dass man auch mal so sieht wie

10:12.320 --> 10:20.040
simpel das eigentlich geht, sich quasi so ein privates GitHub zu installieren, wohlgemerkt

10:20.040 --> 10:25.600
nochmal an der Stelle, man braucht kein Webfrontend um Git zu verwenden, ich kann auch ohne Probleme

10:25.600 --> 10:35.840
rein bei mir Lokal Stream, ich kann auch rein bei mir Lokal Git verwenden und machen und

10:35.840 --> 10:57.320
tun, ich brauche dazu kein Webfrontend wie Git haben, jetzt halt die Frage, soll ich

10:57.320 --> 11:06.120
erst mal eine Teamarkt Session, Teamarkt setzt irgendwie meine Terminal Variable nicht richtig,

11:06.120 --> 11:23.800
kann das sein, kann ja nix werden, wie dem auch sein, ich verbinde mich jetzt mal auf

11:23.800 --> 11:29.680
meinen Server und installiere uns einen lokalen GitHub Klon, den wir dann verwenden, was ist

11:29.680 --> 11:38.640
der Unterschied zwischen Git Tiga und Gox, Gox, Git Tiga ist ein Gox Fork, das ist alles

11:38.640 --> 11:43.360
Go programmiert und alles ziemlich ähnlich, es gibt eigentlich zwei, ich sag mal drei

11:43.360 --> 11:50.080
größere GitHub Klone, das ist einmal Gox, das ist einmal Bitbucket und das ist einmal

11:50.080 --> 11:56.240
GitLab, wenn ich jetzt noch richtig tippen könnte, das sind so, oder sagen wir mal,

11:56.240 --> 12:00.400
wenn man das hier noch mitnimmt, vier, das sind so die vier größten GitHub Klone zum

12:00.400 --> 12:05.800
selbst installieren, GitLab ist mit Abstand am ekligsten und kompliziertesten zu installieren,

12:05.800 --> 12:10.400
das ist eine Ruby und Rails Anwendung, funktioniert auch wunderbar, aber das zu installieren ist

12:10.400 --> 12:18.720
echt immer ein riesen Akt, Bitbucket gibt es auch zum lokalen installieren, ist von Atlassian,

12:18.720 --> 12:28.720
das ist im Business Bereich relativ beliebt und Gox, wahrscheinlich spricht man das Go

12:28.720 --> 12:35.560
GS oder so aus, ist auch sowas in der Richtung, so ein GitHub Klon, aber wir installieren

12:35.560 --> 12:40.240
uns jetzt erstmal lokal Git Tiga, wie man das auch immer schreibt, das ist ziemlich

12:40.240 --> 12:43.800
simpel, ich werde jetzt einfach mal einen Container anlegen auf meinem Server, installieren

12:43.800 --> 12:51.320
das und dann verwenden wir das im restlichen Stream, bei uns wird Bitbucket verwendet,

12:51.320 --> 12:55.240
ich gehe mal davon aus, dass es Bitbucket nicht Gitbucket heißen soll, Bitbucket ist

12:55.240 --> 13:03.600
im Business Umfeld tatsächlich sehr beliebt, weil Bitbuckets kommt von Atlassian und Atlassian

13:03.600 --> 13:14.680
stellen ganz viele Business Zeug Software her, so Ticket Systeme und Wikis und so, wo Business

13:14.680 --> 13:25.000
Leute draufstehen, deswegen ist im Business Umfeld Bitbucket relativ beliebt, so, ja,

13:25.000 --> 13:29.760
schlaue ich mich mal auf meinem Server ein, der den ganz unauffälligen Namen POGCHAMP.INTERN

13:29.760 --> 13:38.760
trägt, jetzt muss ich aber aufpassen, was ich mache, denn ich will ja hier kein Mist,

13:38.760 --> 13:46.600
Mist auf meinem Server treiben, sonst ist alles weg, aber vorher muss ich mal, wie kommt

13:46.600 --> 14:09.400
man TMAX Set, weil es geht mir auf den Sack, dass ich keine Farben habe, aha, kann man

14:09.400 --> 14:23.480
Default Terminal umstellen, Default Terminal Option, ja, das machen wir doch mal, meine

14:23.480 --> 14:30.560
TMAX Conf sieht außer ein bisschen Farben, wir können auch mal irgendwann uns noch eine

14:30.560 --> 14:37.560
Runde TMAX und so die grundlegenden Kommando Zeilen, Tools und sowas angucken, was habe

14:37.560 --> 14:52.560
ich mir jetzt verkehrt gemacht, wie ist denn die richtige, achso Set, wie ging das nochmal,

14:52.560 --> 15:07.000
Set, achso geht das, ok, weißt du, Stack Overflow Driven Programming, so ging das, ups,

15:07.000 --> 15:18.800
ja, jetzt haben wir glaube ich auch, jetzt haben wir auch ordentliche Farbe und alles,

15:18.800 --> 15:25.440
so, loggen wir uns mal auf meinem Server ein und ich schreibe jetzt mein Passwort nicht

15:25.440 --> 15:32.880
hin, sodass man das sehen kann, so und wir legen uns jetzt mal einen neuen Container

15:32.880 --> 15:36.240
an, das mache ich mit LXT, das kann man auch mit Docker oder sonst was in der Richtung

15:36.240 --> 15:41.600
machen, mit Docker ist es ein bisschen einfacher, da gibt es schon komplett fertige Docker Container,

15:41.600 --> 15:47.440
die startlich einfach und da läuft dann irgendwie in Setze X beliebiges Git Webfrontend ein,

15:47.440 --> 15:57.440
wir legen uns jetzt einfach mal selbst einen an, wie nennen wir denn den, Launch, so nennen

15:57.440 --> 16:03.400
wir ihn nicht, wir müssen ihn irgendwie Twitch Emotes mäßig nennen, habe ich schon einen

16:03.400 --> 16:15.640
gebated Container, ich glaube nicht, gebated, heißt der jetzt, so, jetzt haben wir uns noch

16:15.640 --> 16:23.840
einen Container angelegt, da brauche ich jetzt natürlich noch ein Netzwerk Interface und

16:23.840 --> 16:36.680
jetzt können wir uns verbinden in das Ding, so, das wird unser Git Frontend Server, ich

16:36.680 --> 16:41.440
kann mir vorstellen, das ist jetzt ziemlich verwirrend, was ich hier treibe, weil, weiß

16:41.440 --> 16:53.000
nicht, wie sehr verbreitet Linux Container und sowas sind, zumindest ist es eigentlich

16:53.000 --> 17:01.240
vollkommen wurscht, weil ich will ja nur mal temporär mir einen Git Webfrontend installieren,

17:01.240 --> 17:11.280
ist eigentlich egal, was ich genau mache, so, install, wo haben die hier ihre Install Anleitung,

17:11.280 --> 17:21.440
Git Grundlagen gebated, install, install from binary, das ist ok, das ist Go, Go ist das

17:21.440 --> 17:25.680
immer relativ simpel, da kann man einfach was runterladen, starten und gut ist, ah, ich

17:25.680 --> 17:29.800
komme nicht ins Internet, weil ich keine IP habe, dann starten wir mal den Container

17:29.800 --> 17:39.320
neu, dann kriege ich wahrscheinlich eine IP, so, also habe ich eine IP, jetzt kann ich

17:39.320 --> 17:43.080
auch den Gram runterladen, wir machen da jetzt gar keine großen Sperenzien, wir lassen es

17:43.080 --> 17:50.080
jetzt unter root laufen und gut ist, ich müsste jetzt von meinem Rechner aus eigentlich gebated.internal

17:50.080 --> 18:00.000
auflösen können, geht nicht, warum geht das nicht, normalerweise sollte man DHCP Server,

18:00.000 --> 18:13.880
sobald sich, sobald sich den Server eine DHCP IP zieht, sollte der den eigentlich eintragen,

18:13.880 --> 18:19.480
macht er aber nicht, aber naja, es gibt schlimmeres, warum macht er sowas nicht, was soll das,

18:19.480 --> 18:37.400
muss ich mal nachgucken, ist aber auch egal, wir können auch die IP von dem Ding nehmen,

18:37.400 --> 18:43.400
kann es sein, dass man Container mit einer VM gleichsetzen kann, so ungefähr, es gibt

18:43.400 --> 18:55.600
halt einen gravierenden Unterschied, dass eine VM quasi die Hardware komplett virtualisiert,

18:55.600 --> 19:03.280
emuliert, wie auch immer man das will und ein Container nicht, also ein Container, wenn

19:03.280 --> 19:08.400
du in einem Container ein Programm startest, ist das im Endeffekt kein Unterschied, so

19:08.400 --> 19:12.240
wie wenn du das auf dem Server direkt starten würdest, bloß das noch so ein bisschen Sandbox

19:12.240 --> 19:20.160
drum herum ist, VM läuft ja komplett in einer eigenen virtuellen Rechner, der mit dem Hostsystem

19:20.160 --> 19:36.440
nichts mehr zu tun hat, so würde ich mal die Unterschiede beschreiben zwischen Container

19:36.440 --> 19:43.760
und VM, was ich echt merkwürdig finde, dass normalerweise geht das immer, sobald ich einen

19:43.760 --> 19:48.720
neuen Container anlege, zack, ist der im DNS drinne, ich weiß nicht, warum das nicht funktioniert

19:48.720 --> 20:00.280
jetzt, weil ich meine, weil man selber funktioniert es ja auch, kann das sein, dass ich noch den,

20:00.280 --> 20:06.720
dass ich noch Hostname setzen muss, das könnte tatsächlich sein, dass ich noch Hostname und

20:06.720 --> 20:34.840
Zeug setzen muss, probieren wir das nochmal aus, Hostname, Ups, Hostname, eh, umgedreht,

20:34.840 --> 21:04.000
muss man das nochmal gucken, ob es jetzt funktioniert, strage es nebenbei nochmal so ein, so, gut,

21:04.000 --> 21:13.080
besser wieder, jetzt gehts, sehr schön, es löst das auch auf, jetzt haben wir hier eine

21:13.080 --> 21:17.440
ordentliche Domain, die brauchen wir zwar nicht, aber sie ist schöner, ok, haben wir

21:17.440 --> 21:30.160
den Krampel runtergeladen, haben wir, ah ja, haben wir, Moment, das ist eine total alte

21:30.160 --> 21:40.600
Version, die will ich nicht, Downloadpage, kurze Frage Max, wie findest du World War

21:40.600 --> 21:45.360
2 bisher, also wie gesagt, ich fand es in der Beta schon nicht schlecht, aber es steht

21:45.360 --> 21:56.440
und fällt damit, wie das auf dem PC sich entwickelt mit Spielerzahlen und Cheater, der Milchmann

21:56.440 --> 22:03.960
hat sich die Linux-Krone geklonen, sehr schön, so, haben wir hier lang genug jetzt rumgemacht,

22:03.960 --> 22:13.400
jetzt gucken wir uns mal, wirklich Git an, keine Webfront eins, so, jetzt gehen wir mal

22:13.400 --> 22:23.560
auf unseren lokalen GitHub-Klonen, tubated.internal.port3000, warum port3000, weil es da steht, zack, so,

22:23.560 --> 22:27.720
wir brauchen eine Lokale, wir benutzen immer SQL-Datenbank-Lokal, nein, nicht immer SQL,

22:27.720 --> 22:49.280
SQLite-Datenbank-Lokal, Domain is eternal, tubated.internal, so, Admin-Account wird jetzt

22:49.280 --> 23:04.920
über Max, Passwort, ganz furchtbar komplex, adds, was weiß ich, null, einfach komm, egal,

23:04.920 --> 23:15.600
okay, oh, brauchen wir nicht, wieder neues repo an, so, das ist jetzt nicht GitHub, das

23:15.600 --> 23:23.800
ist jetzt bei mir lokal installierte Version von, denkst, wie heißt, Git, Gitia, äh,

23:23.800 --> 23:28.240
Richie, äh, der Richie fragt, was ist Git, denn überhaupt, und wozu verwendet man es,

23:28.240 --> 23:34.160
Git ist ein Versionsverwaltungssystem für, ich lass den Service als Routel auf und sieh

23:34.160 --> 23:38.880
wo, genau, scheiß drauf, das ist jetzt nur zum, zum angucken, nicht für produktiven

23:38.880 --> 23:45.440
Einsatz, ähm, das ist ein Versionsverwaltungssystem, das heißt, damit kann man seinen Source-Code

23:45.440 --> 23:48.680
verwalten und jetzt natürlich die große Frage, was hat man davon, wenn man seinen Source-Code

23:48.680 --> 23:55.240
damit verwaltet, man kann zum Beispiel einfacher Fehler suchen, wann Fehler aufgetreten sind,

23:55.240 --> 24:01.200
man kann gucken, quasi, wann welche Sachen hinzugekommen sind, ab wann was kaputt ist,

24:01.200 --> 24:08.240
man kann sich die Versionshistorie angucken, ähm, wenn man was verkackt, ist es relativ

24:08.240 --> 24:13.520
einfach, auf einen funktionierenden Stand zurückzugehen, wenn man mit mehreren Leuten

24:13.520 --> 24:20.120
an einem Projekt arbeitet, ist das sehr schön, um das dann am Ende, die Ergebnisse zu kombinieren

24:20.120 --> 24:28.080
und sowas, also, wenn man nicht gerade allein an irgendwas werkelt, ist es fast schon Pflicht

24:28.080 --> 24:35.960
und selbst wenn man allein an was werkelt, hat das schon seine Vorteile, weil zum Beispiel,

24:35.960 --> 24:41.120
ich mein, mal angenommen, man hat jetzt hier irgendwas, irgendwas programmiert, ja, irgendwas

24:41.120 --> 24:47.000
langes, was auch immer, das ist jetzt irgendwie meine tolle Programmiersprache, so und ich

24:47.000 --> 24:51.640
hab jetzt ganz viel programmiert, so, einen ganzen Tag lang hab ich das hier jetzt programmiert,

24:51.640 --> 24:56.680
das war ganz furchtbar schwer und ich mein, jeder kennt's, dass man dann sagt, fuck, irgendwas

24:56.680 --> 25:02.680
hab ich jetzt kaputt gemacht, woran lag das denn jetzt noch mal und dann fängst du an,

25:02.680 --> 25:08.440
hier die große Steuerung Z-Orgie zu machen, bis zu einem Stand vor ein paar Stunden, wo

25:08.440 --> 25:13.240
du weißt, dass es funktioniert, dann änderst du wieder was und dann vertippst du dich und

25:13.240 --> 25:17.600
kommst nicht mehr zurück und hast zwei Stunden Arbeit verloren, das Problem hat man mit einer

25:17.600 --> 25:22.000
Versionsverwaltungssystem nicht mehr, wenn man es dann ordentlich verwendet, weil dann

25:22.000 --> 25:26.640
macht man sich einfach, dann committet man einfach seine Changes, die man zu einem Stand,

25:26.640 --> 25:30.600
wo man weiß, dass sie funktioniert haben und wenn man es dann verkackt, dann kann ich immer

25:30.600 --> 25:34.920
noch sagen, ok, ich geh jetzt auf den Stand zurück, wo es funktioniert hat, so, legen

25:34.920 --> 25:45.440
wir mal ein neues Repo an, ja, sowas hatte jeder wahrscheinlich schon, Stream, das brauchen

25:45.440 --> 25:57.880
wir nicht, Create Repo, der hat's nicht so hier mit Domains richtig setzten, das stimmt

25:57.880 --> 26:08.840
nicht wirklich, oder, kann man das jetzt noch ändern, die Domain ist, ja die Domain ist

26:08.840 --> 26:14.320
nicht in Tunnel, der hätte sagen sollen, man soll den FQDN angeben, Kackprogramm, äh,

26:14.320 --> 26:24.880
nervt mich jetzt schon, ich weiß jetzt, wo wir in welchem Ort wir sind, machen wir den

26:24.880 --> 26:31.760
ganzen Scheiß nochmal, so und wir machen jetzt wirklich mal so ganz simple Sachen, wie gesagt

26:31.760 --> 26:35.480
wir legen uns jetzt ein Repo an, dann machen wir mal ein paar Branches, dann machen wir

26:35.480 --> 26:44.240
ein paar Commits, dann merken wir das ganze, ähm, also eigentlich ziemlich, ziemlich

26:44.240 --> 27:01.040
basic, machen wir die ganzen Kram nochmal, weil's komische Sachen gemacht hat, ok, dann

27:01.040 --> 27:17.320
ist es jetzt, schreiben wir das halt mal komplett hin, äh, Admin Accounts, hochkomplexes Passwort,

27:17.320 --> 27:25.240
so, so, jetzt legen wir nochmal unser Repo an für heute, was wir heute verwenden, nennen

27:25.240 --> 27:33.760
wir mal Stream, blablabla, create, jetzt stimmt das ganze auch, so, hier stehen jetzt schon

27:33.760 --> 27:51.360
so ein paar Standard, die Musik ist irgendwie, oh, wupp wupp wupp, wupp wupp wupp, so, das

27:51.360 --> 27:58.880
ist jetzt quasi unser Fake GitHub, mit unserem Repo drauf, das Repo nennt sich Stream, das

27:58.880 --> 28:03.920
wird auf GitHub nicht so viel anders aussehen, ähm, in dem Repo ist noch überhaupt nichts

28:03.920 --> 28:10.360
drinne, deswegen legen wir uns jetzt ein neues Repo an und pushen da initial mal eine leere

28:10.360 --> 28:14.920
Readme Datei rein, das machen wir nicht so wie es da steht, sondern wir machen das jetzt

28:14.920 --> 28:19.080
eine Reihe nach, ähm, ich geh jetzt erstmal in meinen Repo Ordner, das muss man nicht

28:19.080 --> 28:23.720
machen, aber ich mach das immer ganz gerne, ich hab in meinem Heimatverzeichnis immer

28:23.720 --> 28:27.360
einen Ordner, der nennt sich Repos, und da sind meine ganzen unterschiedlichen Git Repos

28:27.360 --> 28:32.800
drinne, die ich von irgendwo geklont hab, oder selbst angelegt hab, ähm, das sind, irgendwie

28:32.800 --> 28:38.240
geht mir die Musik heute echt auf den Sack, ich mach jetzt mal aus, hat da, hat jemand

28:38.240 --> 28:51.080
einen guten Link zu irgendwelcher entspannender Hintergrundmusik, da klone ich meistens meine

28:51.080 --> 28:55.520
ganzen Repos rein, da weiß ich wenigstens wo sie sind, auf der Arbeit sind da wahrscheinlich

28:55.520 --> 28:59.440
schon alle 70 Repos oder sowas in der Richtung drinne, so, ich hab sogar schon ein Repo vorhin

28:59.440 --> 29:08.280
angelegt, ich lösch das jetzt aber nochmal, ähm, Stream, ein Repo legt man ganz einfach

29:08.280 --> 29:13.200
an, indem man in den Ordner reingeht und sagt Git Init, ich glaube man kann auch sagen Git

29:13.200 --> 29:23.720
Init Name, geht auch, also man kann auch sagen Git Init Stream, jetzt haben wir ein leeres

29:23.720 --> 29:27.920
Git Repo angelegt, wo nichts drinne ist, der auch noch keine Comments hat und noch gar

29:27.920 --> 29:38.480
nichts, es ist einfach ein leeres Git Repo, ich glaub euch nix hier im Chat, was auch immer,

29:38.480 --> 29:43.720
wenn da einer schon was vorschlägt und mit Kappa dahinter, da weiß ich schon, das klappt

29:43.720 --> 29:48.520
wahrscheinlich eher nicht mit Entspannungsmusik, komm wir machen wieder hier, wie hieß er,

29:48.520 --> 29:56.960
ähm, Piano, wie hieß der Typ der, das war doch echt entspannt, das hatten wir doch schon

29:56.960 --> 30:08.200
mal vor ner Weile an, außerdem haben es die Japaner halt übelst drauf, ja das ist echt

30:08.200 --> 30:22.400
entspannt, aber es ist ein bisschen leise, ja das ist nice, so, ähm, wir legen jetzt

30:22.400 --> 30:28.920
einfach mal ne leere Readme Datei an, in unserem Repo, wir schreiben da nix rein, wir können

30:28.920 --> 30:33.240
da reinschreiben Hallo oder irgendwie sowas, so, und jetzt haben wir gerade ein leeres

30:33.240 --> 30:40.600
Git Repo angelegt und die erste Datei drin erstellt, das muss keine Readme Datei sein,

30:40.600 --> 30:45.600
das kann alles mögliche sein, das kann auch direkt euren schon vorhandener Source Code

30:45.600 --> 30:50.640
sein, den ihr da jetzt einfach reinkopiert, was aber wichtig ist, sobald man irgendwas

30:50.640 --> 30:54.840
geändert hat und Git mitteilen möchte, dass man diesen Stand benutzen will beziehungsweise

30:54.840 --> 31:01.840
diesen Stand jetzt, ähm, nen, ja, was man denn, nen Name geben will oder den Stand committen

31:01.840 --> 31:06.760
will, weil so heißt der Befehl letztendlich auch, macht man Git commit und am Anfang wird

31:06.760 --> 31:17.640
er jetzt meckern, dass ich noch keine Lautstärke, Lautstärke, am Anfang wird er jetzt natürlich

31:17.640 --> 31:25.400
meckern, dass ich noch keine, keinen Namen und, und Gedöns und Zeug gesetzt hab, ähm,

31:25.400 --> 31:31.880
aber so ist das halt, ähm, ja, und er wird wahrscheinlich meckern, dass es nichts zu

31:31.880 --> 31:39.360
committen gibt, richtig, wir pushen jetzt einfach mal ne leere Datei ins Repo rein und dann

31:39.360 --> 31:55.120
gucken wir uns das Ganze im Detail nochmal an. So, ich muss, äh, Name setzen, meine E-Mail

31:55.120 --> 32:09.840
Adresse ist maxandlocalhost und mein Name ist max, fertig. So, ähm, und jetzt kann

32:09.840 --> 32:16.400
ich den Stand nehmen, den ich hier drinne hab und, ähm, quasi erst mal zu meinem Remote

32:16.400 --> 32:21.920
Server schieben und sobald ich das gemacht hab, wird dann hier dann auch der ganze Krempel

32:21.920 --> 32:34.880
drin auftauchen. Hier wird gehackselt, ja, genau, Silent Pain. Äh, Oxygen Event, was

32:34.880 --> 32:48.200
meinst du? Für was ist das ganze Programmierzeug? Ja, zum Programmieren, oder was meinst du?

32:48.200 --> 32:59.480
Äh, Swiss fragts, Max, auf wieviel Gigahertz ist dein i7-8700k? Auf 5 ist der. Mittlerweile.

32:59.480 --> 33:10.920
Auf 5 Gigahertz. Max, hast du schon mal versucht einen Cheat für ein Game zu programmieren?

33:10.920 --> 33:28.440
Nö. So, ähm, wobei das machen wir nicht, wir machen das so wie die das geschrieben

33:28.440 --> 33:40.600
haben. Wat? Ich darf nicht drauf zugreifen, warum? Ah, ich darf wahrscheinlich nicht

33:40.600 --> 33:52.040
drauf zugreifen, weil ich, ich muss wahrscheinlich noch mein SSH Key, mein SSH Key noch hier

33:52.040 --> 33:57.640
irgendwie hinterlegen, irgendwo, wo auch immer, der genau hin muss. Ist natürlich jetzt

33:57.640 --> 34:01.440
ein bisschen doof. Ja, ich hätt mir das vielleicht ein bisschen besser überlegen sollen am Anfang,

34:01.440 --> 34:11.200
wie wir das machen, aber gleich, gleich haben wir's. Äh, wahrscheinlich new settings, SSH

34:11.200 --> 34:21.840
Key, geht das so? Ich hab das Tool noch nie verwendet. Sehr schön, hat funktioniert.

34:21.840 --> 34:25.360
So, in dem Zustand, wie unser Repo jetzt ist, vergesst einfach alles, was wir gerade gemacht

34:25.360 --> 34:30.080
haben, in dem Zustand, wie unser Repo jetzt ist, sieht es normalerweise so aus, wenn man

34:30.080 --> 34:35.560
es sich von GitHub geklonet hat. Also sprich, man hat, ähm, das können wir jetzt auch mal

34:35.560 --> 34:49.840
machen. Wo ist es denn hin? Genau, jetzt ist die ReadMe drinne und sonst nix. So, wir löschen

34:49.840 --> 34:54.240
das Repo jetzt nochmal lokal und eine Sache wird man dann schon sehen, wenn ich lokal

34:54.240 --> 34:59.040
irgendwas an meinem Repo mache, hat das logischerweise überhaupt keine Auswirkungen drauf, was mit

34:59.040 --> 35:04.040
dem Stand irgendwo anders passiert. Und das ist eine ganz wichtige Sache, die man sich

35:04.040 --> 35:11.760
bei Git erstmal standardmäßig merken muss, ähm, bevor ich nicht was pushe, es ist alles

35:11.760 --> 35:17.560
nur lokal, auch wenn da lokal irgendwie Remote dran steht oder sowas in der Richtung. Das

35:17.560 --> 35:22.400
ist vollkommen wurscht bei Git, es ist alles nur lokal, das muss man sich merken. Also

35:22.400 --> 35:27.440
man kann nichts irgendwie kaputt machen, das ist nicht wie bei SVN oder sowas in der Richtung,

35:27.440 --> 35:32.680
wo man quasi halb immer mit einem Bein auf dem Server ist. Bei Git ist alles standardmäßig

35:32.680 --> 35:39.640
lokal, bis man explizit sagt, man schiebt es irgendwo hin. Auch wenn es auf den ersten

35:39.640 --> 35:47.880
Blick nicht so aussieht. So, also wenn jemand schon mal auf GitHub war, ähm, oder falls

35:47.880 --> 35:52.040
irgendjemand sich jetzt mal die Linux-Körne klonen will oder sowas in der Richtung, ähm,

35:52.040 --> 35:59.200
ja, Patrick, ich hause mir ein Git-Tee, oder wie das Ding hieß. Ist einfacher zu installieren

35:59.200 --> 36:10.720
als GitLab. Man kann auch GitLab verwenden, ist eigentlich überhaupt kein Ding. So. Z-Frames,

36:10.720 --> 36:15.480
das guck ich mir nachher mal irgendwann an. So, ähm, also vollkommen unabhängig von dem,

36:15.480 --> 36:19.800
was wir jetzt gemacht haben, der erste Schritt, wo viele Leute erstmal mit Git in Berührung

36:19.800 --> 36:23.560
kommen, ist, wenn sie sich irgendwo in ein Repo klonen wollen. Also sprich, den Source-Code

36:23.560 --> 36:29.440
beispielsweise von GitHub, hier jetzt von Visual Studio Code oder von irgendwelchen Projekten

36:29.440 --> 36:37.080
wollen sie sich lokal bei ihnen auf dem Rechner klonen, editieren vielleicht, vielleicht

36:37.080 --> 36:41.000
auch noch was einreichen, dann wieder bei dem jeweiligen Projekt. Aber das erste, womit

36:41.000 --> 36:43.840
Leute in Kontakt kommen, ist wahrscheinlich Git-Clone. Und Git-Clone ist auch genauso

36:43.840 --> 36:48.120
simpel, wie es aussieht. Man schreibt einfach hin, Git-Clone, und dann die Url, was man

36:48.120 --> 36:52.440
sich klonen will, und dann hat man lokal einen Ordner von dem jeweiligen Repo, was

36:52.440 --> 36:59.280
man sich geklont hat. Also easy. Das ist auch noch nicht wirklich das Komplizierte. Das

36:59.280 --> 37:03.200
kriegt glaube ich jeder noch hin. Das kann man auch mit allen möglichen Sachen machen.

37:03.200 --> 37:06.320
Ich könnte jetzt auch beispielsweise sagen, jetzt sind wir hier auf GitHub, ich könnte

37:06.320 --> 37:12.520
auch sagen, hier, ich will mir jetzt einfach mal Visual Studio Code klonen. Das funktioniert,

37:12.520 --> 37:16.120
kann ich machen. Git-Clone, bam, das man sieht schon, das dauert ein bisschen länger,

37:16.120 --> 37:23.320
das ist auch ein bisschen größer. Funktioniert, ist überhaupt kein Ding. Ähm, wirklich interessant

37:23.320 --> 37:30.360
wird es natürlich erst, wenn man was editiert, bzw. wenn man was entwickelt. Und noch interessanter

37:30.360 --> 37:35.320
wird es, wenn mehrere Leute dran editieren und dran entwickeln. Was man eben schon ganz

37:35.320 --> 37:40.320
gut gesehen hat, ist die Musik wieder ein bisschen laut, ne? Ach wobei, nicht, das passt.

37:40.320 --> 37:46.320
Aber ein bisschen. Was man eben schon ganz gut gesehen hat, ich meine, ich konnte lokal

37:46.320 --> 37:50.640
das Repo löschen und es war Remod noch da. Das heißt, jeder der an irgendeinem Projekt

37:50.640 --> 38:00.240
mitarbeitet und das Repo sich geklont hat, hat lokal erstmal ne Kopie vom kompletten

38:00.240 --> 38:09.200
Repo. Wirklich komplett, mit allem dabei. Ähm, das hat natürlich den riesen Vorteil,

38:09.200 --> 38:13.080
es geht auch nicht so leicht mal was verloren. Selbst wenn der Server, auf dem das ganze

38:13.080 --> 38:18.680
mal gehostet war, oder gehostet ist, wenn der verreckt, also wenn morgen jetzt beispielsweise

38:18.680 --> 38:25.440
GitHub abraucht, weiß ja nicht, könnte sein, so Ruby on Rails Abwendung, ähm, wenn morgen

38:25.440 --> 38:31.000
GitHub abraucht, ist der Source Code von Visual Studio Code garantiert nicht verloren, weil

38:31.000 --> 38:36.520
sich mindestens 5000 Leute dieses Repo bisher geforkt haben, äh, und sich wahrscheinlich

38:36.520 --> 38:41.800
noch viel viel mehr Leute dieses Repo mal lokal bei sich irgendwo hingeklont haben.

38:41.800 --> 38:54.640
Und das ist auch eines der wichtigsten Unterschiede zu ähm, anderen Versionsverwaltungssystemen

38:54.640 --> 39:01.800
wie, äh, wie SVN oder sowas, dass man eben erstmal hauptsächlich lokal arbeitet und

39:01.800 --> 39:09.600
erst dann pusht, bzw. sich neue Changes pullt. Und man kann Git nach Herzenlust ausprobieren

39:09.600 --> 39:13.680
bei sich lokal, man kann nichts kaputt machen. Es wäre ja auch ziemlich bescheuert, ich meine,

39:13.680 --> 39:17.040
ich hab mir jetzt hier den Source Code von Visual Studio Code geklont und ich lösche

39:17.040 --> 39:23.360
jetzt einfach mal alles. Bäm! Es wäre ganz schön bescheuert, wenn es jetzt bei Microsoft

39:23.360 --> 39:31.560
gelöscht wäre, ne? Ist es nicht, es ist nur bei mir lokal gelöscht. Ok, gehen wir mal

39:31.560 --> 39:36.960
wieder in unser Test Repo. Wenn man jetzt was entwickelt, irgendwas kleines, ja? Irgendeine

39:36.960 --> 39:42.800
Mini-Anwendung. Wir können jetzt ja mal hier im, im, wir machen irgendwie mal so ein Mini-Bashed

39:42.800 --> 39:48.520
Crypt, was, was irgendeinen Mist ausgibt oder so. Ähm, dann commiten wir da ein paar Änderungen

39:48.520 --> 39:56.480
rein und dann pushen wir das und merchant das und schauen uns das mal in der Ruhe, äh,

39:56.480 --> 40:04.560
in Ruhe an. Ähm, ich muss sagen, mir fällt es ein bisschen schwierig, das so zu erklären

40:04.560 --> 40:09.000
von Anfang an, dass das alles nachvollziehbar ist, weil ich benutze das schon eine ganze

40:09.000 --> 40:15.600
Weile und ich kümmere mich eigentlich hauptsächlich um der, auf der Arbeit, um unsere Git Repos,

40:15.600 --> 40:21.600
um unsere Software Repos. Und viele Sachen, die ich wahrscheinlich einfach so mache, leuchten

40:21.600 --> 40:38.160
euch nicht so großartig ein, könnte ich mir vorstellen. So, ähm, ja, es gibt ein paar

40:38.160 --> 40:42.200
wichtige Sachen, die man auch wissen muss, wo immer einige Leute durcheinander kommen.

40:42.200 --> 40:51.680
Es gibt, ähm, wenn man sich ein Repo geklont hat, gibt es standardmäßig erstmal zwei

40:51.680 --> 40:59.320
Sachen, oder meistens zwei Sachen standardmäßig. Ähm, die Quelle, von der man sich das Repo

40:59.320 --> 41:08.000
geklont hat, ist standardmäßig eingetragen hier als Remote-Server. Der nennt sich Origin,

41:08.000 --> 41:12.600
das Ding heißt immer Origin. Origin ist immer der Server, von dem ich mir mein Repo geklont

41:12.600 --> 41:19.640
habe, aber das muss nicht so heißen. Das kann irgendwie heißen. Origin ist einfach nur Name

41:19.640 --> 41:24.680
und sie mussten ja irgendeinen Default-Name vergeben. Ja, ich glaube, der Nightbot ist

41:24.680 --> 41:30.280
abgeschmiert, Sebaro, stimmt's? Aber die haben gestern auch schon ganz schön rumgeleckt.

41:30.280 --> 41:38.080
Vielleicht ist es einfach kaputt. Das muss man sich merken, ähm, Origin ist einfach nur

41:38.080 --> 41:41.000
ein Name. Das sehe ich auch auf der Arbeit ganz oft, dass viele Leute denken, Origin

41:41.000 --> 41:46.720
wäre irgendein Git-Befehl oder sowas. Und das hat auch nichts mit Origin von EA zu tun,

41:46.720 --> 41:52.080
sondern es ist einfach gemeint, von da hast du es halt ursprünglich geklont, dein Repo.

41:52.080 --> 42:01.480
Aber man kann auch mehrere Remote-Repos haben und dort Sachen reinpushen. Also ich könnte

42:01.480 --> 42:08.920
beispielsweise hier meinen lokalen Server haben, wo halt dieses Frontend beispielsweise

42:08.920 --> 42:14.280
drauf läuft, plus noch einen Rechner von einem Kumpel, der bei mir mitentwickelt, oder noch

42:14.280 --> 42:18.920
einen Server in irgendeinem Rechenzentrum, auf dem die Anwendung wirklich drauf läuft.

42:18.920 --> 42:27.560
Und die kann ich mir alle als Remotes eintragen und bei Push und Pull verwenden. Aber dass

42:27.560 --> 42:33.520
das Ding Origin heißt, ist vollkommen egal, ist einfach nur ein Name. So, und was man

42:33.520 --> 42:50.800
auch wissen muss... Hä, Siebauer, was? Hä, verstehe ich nicht. Was man auch noch wissen

42:50.800 --> 43:01.000
muss, dass man standardmäßig eine Branche hat, der Master heißt, das ist auch einfach

43:01.000 --> 43:08.960
nur, weil er ja irgendwas nach dem Klonen anzeigen muss. Und dann nimmt er einfach standardmäßig

43:08.960 --> 43:16.560
Master, wenn es ihn gibt. Das ist nichts, was wirklich so heißen muss. Viele Leute denken,

43:16.560 --> 43:22.320
die Dinger müssen Origin oder müssen Master heißen, ist vollkommen egal. So, also wir

43:22.320 --> 43:31.400
haben jetzt wirklich ein ziemlich leeres, quasi nur mit einer Datei befüllendem repo.

43:31.400 --> 43:36.960
Und in dieser Datei steht einfach nur Hallo drin. Wenn wir uns jetzt mal die History angucken,

43:36.960 --> 43:42.440
sehen wir, es gibt genau ein Comment, das ist von mir und das ist vor, was weiß ich, 10

43:42.440 --> 43:52.040
Minuten entstanden und ist offensichtlich das erste. Was man bei Git wissen muss, was

43:52.040 --> 43:59.800
ist, oder so die Grundlagen, mit denen man früher oder später in Berührung kommt, sind,

43:59.800 --> 44:12.320
was sind Comments, was sind Branches, vielleicht noch was sind Tags und was gibt es denn sonst

44:12.320 --> 44:20.800
noch interessantes, was sind Remotes. Aber am wichtigsten ist eigentlich am Anfang mal

44:20.800 --> 44:27.640
zu wissen, was ist ein Branch und was ist ein Comment. Wenn ich jetzt hier irgendwas anfange

44:27.640 --> 44:34.640
zu entwickeln, so beispielsweise, ich will jetzt ein ganz tolles Bash-Skript programmieren,

44:34.640 --> 44:40.480
was irgendwas tolles macht. Ich hatte ja einer eine glorreiche Idee, was das tolles machen

44:40.480 --> 44:51.080
könnte. Oder machen wir es anders. Komm, wir einfach alles in Mastercommenten. Ja, das

44:51.080 --> 44:54.600
ist finde ich sogar, äh, Patrick, das ist finde ich sogar legitim, wenn man das macht,

44:54.600 --> 44:59.120
wenn man alleine daran entwickelt. Wir machen das jetzt mal, das repo machen wir jetzt mal

44:59.120 --> 45:06.440
auf mit Visual Studio Code, dass man bisschen GUI-mäßig, dass man sieht, dass das überhaupt

45:06.440 --> 45:29.600
nichts mit den eigentlichen Programmen zu tun hat, was man verwendet. Ähm, äh, Open

45:29.600 --> 45:39.960
Folder. Plende das standardmäßig Readmees aus, das Ding, oder was? Lull. Ein Skript,

45:39.960 --> 45:43.560
das den Sinn des Lebens bricht. Jawoll, das können wir machen. Also, wir fangen jetzt,

45:43.560 --> 45:49.160
wir fangen jetzt mal an ein ganz tolles Bash-Skript zu programmieren. Ähm, und danach kommitten

45:49.160 --> 45:53.400
wir das in unser Git-Repo, machen Änderungen und Dinger. Ich glaube, dann wird das wahrscheinlich

45:53.400 --> 45:59.640
auch alles ein bisschen, bisschen greifbarer. Wie macht mir die neue Datei-Steuerung N. So,

45:59.640 --> 46:12.400
das wird jetzt, äh, unser ganz tolles Bash-Skript. Die Schrift ist riesengroß. Echo. Hallo Twitch.

46:12.400 --> 46:28.280
Ups, ich hab einen Punkt zu viel. So. Und, wenn man sich das jetzt mal anguckt in unserem

46:28.280 --> 46:33.480
Git-Repo, äh, Hasenkürze fragt, was ist deiner Meinung nach die Entwicklungsumgebung

46:33.480 --> 46:39.160
der Zukunft? Eclipse Intellijane Visual Studio kommt drauf an, für was. Also, ich denke,

46:39.160 --> 46:47.600
unter Windows und für Microsoft-Gedöns, was, also sowas wie C-Sharp oder, oder VisualBasic.net

46:47.600 --> 46:55.840
oder solche Dinger. Ich bin im falschen Ordner gelandet. Echt? Ne, ich glaub, ich glaub,

46:55.840 --> 47:06.320
das passt. Ähm, ne, ich bin im falschen Ordner. WTF, hä? Ach, ich bin im falschen, ja, ich

47:06.320 --> 47:14.840
bin wirklich im falschen Ordner. Lul. Da ist es. Da ist jetzt auch das drinne. Naja,

47:14.840 --> 47:20.840
um nochmal zur Entwicklungsumgebung zurückzukommen. Jetzt ist auch die ReadMe drinne, ja. Jetzt

47:20.840 --> 47:25.480
funktioniert das Ganze auch. Ähm, unter Windows wird es weiter Visual Studio bleiben. Für

47:25.480 --> 47:31.520
JavaScript seh ich, also für JavaScript und Webzeug, seh ich ehrlich gesagt Visual Studio

47:31.520 --> 47:41.240
Code ziemlich weit vorne und ist auch recht beliebt. Für C++ find ich den Cute Creator

47:41.240 --> 47:47.480
ziemlich gut. Aber man kann auch, wenn man Windows Zeug entwickelt, das ohne Problem

47:47.480 --> 47:56.480
mit Visual Studio machen. Und für Java und solche Sachen, ich hasse Eclipse. Ich, Eclipse

47:56.480 --> 48:01.520
ist wirklich, da musst du instant kotzen, wenn man es benutzen muss. Ähm, wenn, dann

48:01.520 --> 48:11.960
verwende ich Intelli, war das IntelliJ? IntelliJ, ID, genau, ja, das Ding. Für Groovy und solche

48:11.960 --> 48:19.840
Sachen. Aber, ähm, für Webgeschichten ist Visual Studio Code zur Zeit sehr angesagt.

48:19.840 --> 48:31.880
So, jetzt hab ich, jetzt hab ich irgendwie ziemlich n Mist gemacht hier. So, ähm, wir

48:31.880 --> 48:37.080
haben jetzt angefangen unser tolles Bash Script zu programmieren. Das macht nicht sonderlich

48:37.080 --> 48:46.400
viel. Das macht aktuell noch gar nix. Außer auszugeben, hallo Twitch. Nein, das neue Assassin's

48:46.400 --> 48:55.120
Creed hab ich mir noch nicht angeguckt. Ähm, jetzt will ich aber vielleicht, dass da der

48:55.120 --> 49:01.360
Patrick oder der Sebaro oder irgendjemand dran mitarbeiten können. Und deswegen muss

49:01.360 --> 49:09.480
ich jetzt erstmal mein tolles neues Bash Script comitten und pushen, dass das irgendjemand

49:09.480 --> 49:16.840
anderes verwenden könnte. Und man sieht hier schon, dass Git da grundsätzlich das erstmal

49:16.840 --> 49:22.440
unterscheidet zwischen Dateien, die es kennt und Dateien, die es nicht kennt. Wenn ich

49:22.440 --> 49:29.400
eine neue Datei angelegt hab, dann sagt Git erstmal standardmäßig, ähm, selbst wenn

49:29.400 --> 49:35.040
ich jetzt sage, ich will comitten, sagt Git erstmal standardmäßig, ne, kenn ich net,

49:35.040 --> 49:42.760
das ist das. Wenn ich mir mit Git Status angucke, was gerade im Repo so passiert, ähm, sehe

49:42.760 --> 49:47.720
ich, dass ich untracked Files drinne hab. Warum sind die Files untracked? Naja, ich

49:47.720 --> 49:53.360
hab's gerade eben erst angelegt. Und da muss ich initial einmal für jede Datei, die neu

49:53.360 --> 49:57.880
ist, man kann das auch umgehen, ja, man kann das auch einfacher machen, ähm, die muss

49:57.880 --> 50:01.640
ich erstmal hinzufügen. Muss ich erstmal sagen, Git, kümmere dich um die Datei in

50:01.640 --> 50:05.920
diesem Ordner. Nur weil ich hier in dem Git Ordner drinne bin, heißt das noch lange nicht,

50:05.920 --> 50:09.720
dass sich Git standardmäßig für jede Datei zuständig fühlt. So, wenn ich jetzt ein Git

50:09.720 --> 50:14.520
add auf die Datei gemacht hab, dann sehe ich schonmal bei dem nächsten Git Status, change

50:14.520 --> 50:19.480
to be committed, also sprich, Git kennt die Datei jetzt, ähm, und ich kann mir jetzt

50:19.480 --> 50:24.680
auch mit Git diff, ne, mit Git, äh, fuck, wie ging das, staged, ähm, kann ich mir auch

50:24.680 --> 50:32.880
angucken, was Git jetzt committen würde. Und nun kann ich auch sagen, Git commit, und

50:32.880 --> 50:42.000
jetzt, ich kann das immer nur betonen, die meisten Leute halten sich nicht dran, oder,

50:42.000 --> 50:47.880
ähm, sind da einfach nur zu faul für, ich muss sagen, bin ich auch oftmals, ne gescheite

50:47.880 --> 50:54.160
Commit Message reinzuschreiben. Das muss nix langes sein, aber was ne schlechte Commit

50:54.160 --> 50:59.480
Message ist, ist zum Beispiel das hier. Wenn ich an jedem Projekt arbeite, und selbst wenn

50:59.480 --> 51:06.440
ich nur alleine dran arbeite, dann hab ich spätestens in zwei Tagen keine Ahnung mehr,

51:06.440 --> 51:11.040
was ich hier bitteschön bei Fixes gemacht hab. Wenn ich da jetzt reinschreib, wenn

51:11.040 --> 51:21.560
ich da wenigstens sowas reinschreib, Schreibfehler, fix, irgendwie, verschrieben, gefixt, ähm,

51:21.560 --> 51:29.520
also, es hat seinen Vorteil, wenn man da irgendwas Sinnvolles reinschreibt, ja, äh, es reicht

51:29.520 --> 51:33.840
schon, wenn wir irgendwie reinschreiben, hier edit new script oder irgendwas, da hat man

51:33.840 --> 51:41.920
halbwegs noch nen Anhaltspunkt, was denn da, warum ist das eigentlich Nano? Warum ist das

51:41.920 --> 51:53.040
Nano? Ich will, ich will kein Nano. Wie konnte man das nochmal ändern? Editor, ähm, wenn

51:53.040 --> 52:01.960
man das hier so richtig schreibt, config, global, editor, oh, fuck, wie ging das jetzt,

52:01.960 --> 52:09.480
das muss ich nachgucken. Was einem auch bei Git klar sein muss, man ist ziemlich oft unterwegs,

52:09.480 --> 52:14.160
man kann entweder in der Gitman-Page gucken, wobei die Gitman-Page absolut wir geschrieben

52:14.160 --> 52:21.440
ist, oder aber, man schaut einfach nach. Ah, hier, guck, git config global core editor

52:21.440 --> 52:29.320
vim, das will ich machen. So, und wenn ich jetzt das nächste Mal was committe, dann geht

52:29.320 --> 52:33.360
auch ein ordentlicher Editor auf und nicht Nano. So, was man jetzt hier schon sieht ist,

52:33.360 --> 52:39.800
ich hab ein neues Skript angelegt, ähm, ich hab's commited, wenn ich jetzt in die history

52:39.800 --> 52:45.160
gucke, ja, ja, Milchwein, ich sag ja Stack Overflow Driven Programming, wenn ich jetzt

52:45.160 --> 52:49.680
in meine history gucke, also sprich, dort wo ich sehe, in welcher Reihenfolge was passiert

52:49.680 --> 52:55.840
ist, dann seh ich auch, ok, es gab hier unten einmal mein initiales Comet und hier drüber

52:55.840 --> 52:59.480
seh ich, ich hab ein neues Comet gemacht hier vor ein paar Minuten, wo ich ein neues Skript

52:59.480 --> 53:04.320
hinzugefügt hab. Wenn ich's jetzt genau wissen will, aktuell ist es noch ziemlich übersichtlich.

53:04.320 --> 53:15.080
Moment. Aktuell ist es noch ziemlich übersichtlich, es ist, sind zwei Comets in dem Repo und die

53:15.080 --> 53:21.000
sind beide von mir. Ähm, wenn man sich jetzt mal beispielsweise von Visual Studio Code

53:21.000 --> 53:26.240
die Comets anguckt, das sind beispielsweise 25.000 und von total vielen unterschiedlichen

53:26.240 --> 53:30.120
Leuten. Wir gucken uns jetzt noch mal auf der Kommando-Zeile an, ich klon mir das Ganze

53:30.120 --> 53:34.680
noch mal. Das ist ein Projekt, das ist, hat eine gute Größe, das ist nicht so riesengroß

53:34.680 --> 53:46.840
wie der, wie jetzt irgendwie der Linux Kernel oder sowas. Na, eben war das Ganze aber auch

53:46.840 --> 53:56.760
schon ein bisschen schneller. Hat das eben schon genau so lang gebraucht, den Krams zu

53:56.760 --> 54:03.360
klonen, ging das nicht eben noch schneller? Ha. Ja gut, sobald, sobald das geklont ist,

54:03.360 --> 54:06.040
gucken wir da mal in die Historie rein, da sehen wir, dass ich schon ein bisschen mehr

54:06.040 --> 54:11.720
als war mir im Repo drin und da wird eine Sache auch schon mal gleich klar und zwar,

54:11.720 --> 54:16.800
dass es sinnvoll ist, ordentliche Comet-Messages zu machen. Das ist jetzt nämlich ein Projekt,

54:16.800 --> 54:27.800
wo 409 Leute schon mitgewirkt haben in 25.000 oder in knapp 26.000 Comets. Da wird es dann

54:27.800 --> 54:30.560
schon ein bisschen schwieriger mit der Übersicht. Wenn wir jetzt hier mal ein Gitlog drinnen

54:30.560 --> 54:34.440
machen, sehen wir nämlich auch, dass es sind von ganz vielen unterschiedlichen Leuten,

54:34.440 --> 54:39.800
die da dran mitgearbeitet haben und wenn jetzt hier jeder reingeschrieben hätte, irgendwie

54:39.800 --> 54:44.160
fix ist, dann wird es ganz schön kompliziert zu checken, was da eigentlich passiert ist.

54:44.160 --> 54:50.280
Einmal wieder zurück zu unserem Noob-Repo, so ein Billig-Repo, das hat immer noch zwei

54:50.280 --> 54:57.480
Comets drin und jetzt der große Unterschied zu Versionsverwaltungssystemen wie beispielsweise

54:57.480 --> 55:04.720
SVN, ja doch, ich kann das Zeug nicht richtig, ich verdrehe da immer die Buchstaben, ich

55:04.720 --> 55:12.160
verdrehe auch immer CVS und CSV und alles. Der große Unterschied zu quasi zentralen

55:12.160 --> 55:17.400
Versionsverwaltungssystemen mit dem zentralen Server, was es ja so bei Git nicht gibt, ist,

55:17.400 --> 55:23.520
ich habe jetzt eine neue Datei angelegt, ich habe jetzt diesen neuen Stand committed, habe

55:23.520 --> 55:32.560
ich mit einer Commit-Message dabei, aber das ist nach wie vor nur lokal bei mir. Das muss

55:32.560 --> 55:37.160
man wissen, das ist nur lokal, also sprich, wenn jetzt irgendjemand von euch sich hier

55:37.160 --> 55:43.920
mein Repo klonen würde, würde er diese Änderung noch nicht sehen, obwohl sie committed sind,

55:43.920 --> 55:56.600
das ist bei SVN komplett anders. Da ist Commit halt Commit. Und was ich jetzt machen muss,

55:56.600 --> 56:02.680
dass das andere Leute auch benutzen können, bzw. um es halt zu irgendeinem anderen Server

56:02.680 --> 56:13.520
zu schieben, achtmal mit Git push. Und hier ist es auch wichtig, dass man, auch wenn man

56:13.520 --> 56:19.440
es nicht machen muss, ist es sinnvoll, hier immer die kompletten Optionen anzugeben.

56:19.440 --> 56:25.560
Also quasi, was ich machen will ist, ich will Git benutzen, ich will meinen Stand woanders

56:25.560 --> 56:33.040
hinschieben, Git push, jetzt muss ich angeben, wohin, in dem Fall Origin, Origin ist das Repo,

56:33.040 --> 56:38.360
von dem ich geklonet habe, und jetzt, welcher Branch, was ein Branch ist, kommen wir gleich

56:38.360 --> 56:43.880
noch dazu. So, wenn ich das mache, dann funktioniert das Ganze auch, und wenn ich jetzt hier refresche,

56:43.880 --> 56:50.960
ist das auch da, mein Skript. Und wenn jetzt jemand von euch sich mein Repo geklonet hätte,

56:50.960 --> 57:00.280
und Git pull macht, dann wird er die Änderung auch sehen. Warum ich das für wichtig halte,

57:00.280 --> 57:07.120
hier immer alles komplett anzugeben. Man kann auch die Kurzfassung machen, Git push. Git

57:07.120 --> 57:13.000
push funktioniert in 99% der Fälle ohne Probleme, weil Git mittlerweile relativ clever ist, und

57:13.000 --> 57:20.640
bei Git push standardmäßig halt nur den Branch pusht, auf dem man drauf ist. Das war früher

57:20.640 --> 57:27.640
nicht so. Früher war Git push das Standard, das die Fault verhalten so, dass alle Branches,

57:27.640 --> 57:32.680
die man lokal hatte, gepusht wurden, und da hat man teilweise Sachen gepusht, die man

57:32.680 --> 57:39.360
nicht pushen wollte. Ich hatte mal auf der Arbeit einen, der hat irgendwie 15 Branches

57:39.360 --> 57:45.560
gepusht, die er sich mal irgendwann ausgecheckt hat, paar Änderungen drin ausprobiert hat,

57:45.560 --> 57:55.280
und die wollte er eigentlich gar nicht pushen. Das war halt ein bisschen blöd für ihn. Der

57:55.280 --> 58:01.680
Name Origin verwirrt mich. Origin ist der Default Name für die Quelle, von der man,

58:01.680 --> 58:05.560
oder wie es der Patrick gerade sagt, von der Herkunft, von der Quelle, wo man geklont

58:05.560 --> 58:16.280
hat. Das ist der Default Name des Servers, des Remotes, bei Git heißt das Remote, von

58:16.280 --> 58:23.600
dem man geklont hat. Man kann das übrigens auch umbenennen. Ich kann auch Git remote

58:23.600 --> 58:35.920
rename, wie ging das nochmal, wenn ich das noch richtig schreibe, Git remote rename,

58:35.920 --> 58:47.800
Origin kann ich auch umbenennen in, zum Beispiel GitHub. Wenn ich mir das jetzt angucke, heißt

58:47.800 --> 58:51.200
das überhaupt nicht mehr Origin. Wenn ich das jetzt nochmal machen würde, würde ich

58:51.200 --> 58:56.440
sagen, das geht nicht, weil es das Remote Origin nicht mehr gibt. Jetzt müsste ich sagen,

58:56.440 --> 59:10.920
Git push, Git hub master. Ist auch zu empfehlen, also wenn man mehrere Remotes hat, ist das

59:10.920 --> 59:16.000
sinnvoll, die so zu benennen, dass man auf den ersten Blick gleich sieht, ja was wozu

59:16.000 --> 59:23.280
gehört. Also das ist schon nicht verkehrt. Wir rename das nochmal, weil es ist ja gar

59:23.280 --> 59:30.640
nicht GitHub, sondern es ist unser Fake GitHub. Es ist ja gar kein echtes GitHub, worauf

59:30.640 --> 59:37.240
wir gepusht haben. Es ist ja nur unser Fake GitHub. Was wir jetzt gemacht haben ist, wir

59:37.240 --> 59:43.080
haben ein neues Skript angelegt, wir haben das committed und wir haben das gepusht. Das

59:43.080 --> 59:53.560
sind so die Standard-Basis-Operationen, die man immer braucht in Git. Ohne commiten, ohne

59:53.560 --> 01:00:04.040
adden, ohne commiten, ohne pushen kommt man meistens nicht weit. Den Part mit pushen kann

01:00:04.040 --> 01:00:09.280
man weglassen, wenn man nur lokal arbeitet. Man braucht sowas hier nicht, also sprich,

01:00:09.280 --> 01:00:15.440
man muss sein Zeug nicht auf GitHub hochladen, das muss nicht sein. Man kann auch rein lokal

01:00:15.440 --> 01:00:21.520
arbeiten. Ist auch nicht schlecht, wie gesagt, wenn man irgendwas klein im Bastelt und auch

01:00:21.520 --> 01:00:33.320
gar nicht vorhat, das zu veröffentlichen. So, was gibt es jetzt als nächstes? Genau,

01:00:33.320 --> 01:00:42.760
was sind Branches? Dazu muss man sich erstmal angucken, was sind commits. Wenn man in die

01:00:42.760 --> 01:00:47.920
History guckt, was man, by the way, mit GitLog macht. GitLog hat übrigens sehr viele praktische

01:00:47.920 --> 01:00:57.280
Optionen, beispielsweise das hier. Das hier ist ein Beispiel für typische Git-Optionen,

01:00:57.280 --> 01:01:03.160
die sind nicht immer logisch. Also standardmäßig zeigt mir GitLog meine History an, also sprich

01:01:03.160 --> 01:01:10.480
vom ältesten Commit zum neuesten Commit. Sag ich jetzt, GitLog name only als Option

01:01:10.480 --> 01:01:15.720
zeigt es mir mehr an, allerdings noch die Namen, die sich geändert haben im jeweiligen

01:01:15.720 --> 01:01:20.240
Commit der Datei, also welche Dateien sich im jeweiligen Commit geändert haben. Obwohl

01:01:20.240 --> 01:01:24.360
die Option minus minus name only so aussieht, als würde es weniger anzeigen, nämlich nur

01:01:24.360 --> 01:01:30.240
names only, macht es das nicht. Ganz viele Git-Commandos sind total wir, da muss man

01:01:30.240 --> 01:01:36.760
sich mit abfinden. Und die Git-Man-Pages sind ehrlich gesagt auch nicht sonderlich

01:01:36.760 --> 01:01:40.880
hilfreich. So mal hier als Beispiel. Guckt euch, lest euch mal, oder lesen wir uns mal

01:01:40.880 --> 01:01:47.320
die ersten Sätze durch von GitPush. Man versteht nichts. Normalerweise ist eine Man-Page dafür

01:01:47.320 --> 01:01:52.040
da, das soll einem das alles erklären, ein bisschen helfen, wie das Ganze funktioniert.

01:01:52.040 --> 01:01:59.240
So, und die Hilfeseite für GitPush sagt mir, GitPush updates remote refs using local refs

01:01:59.240 --> 01:02:04.200
while sending objects necessary to complete the given refs. Und jetzt kommt der beste

01:02:04.200 --> 01:02:12.880
Satz überhaupt. You can make interesting things happen to a repository. Also, die Git-Man-Pages

01:02:12.880 --> 01:02:19.280
sind legendär verwirrend. Ich würde gar nicht erst anfangen Git-Man-Pages zu lesen,

01:02:19.280 --> 01:02:22.880
in dem Fall ist man wirklich mit einer Google-Suche und Stack-Overflow-Antworten meistens besser

01:02:22.880 --> 01:02:31.520
dran. Also Git-Man-Pages sind wirklich sehr verwirrend. So, aber wenn wir uns jetzt nochmal

01:02:31.520 --> 01:02:36.280
die History angucken, sehen wir, wir haben zwei Comets drinne, mein initiales Comet und

01:02:36.280 --> 01:02:45.280
das, wo wir das Skript hinzugefügt haben. Jedes Comet bekommt in Git eine eindeutige

01:02:45.280 --> 01:02:53.960
Hashtag-ID. Das ist ein Schar-Hash-Wert, wenn das interessiert. Und man sieht ja auch

01:02:53.960 --> 01:03:01.400
teilweise ganz interessante Informationen dahinter. Zum Beispiel, welcher Remote-Stand eben auf

01:03:01.400 --> 01:03:05.520
welchem Comet gerade ist und sowas, aber das ist jetzt erstmal egal. Wichtig ist, dass

01:03:05.520 --> 01:03:10.240
jedes Comet einen eindeutigen Hashtag-Wert bekommt. Und dieser Hashtag-Wert oder diese

01:03:10.240 --> 01:03:17.680
Comet-ID, nennen wir es mal Comet-ID, ist eines der Grundlagen, worauf Git basiert und

01:03:17.680 --> 01:03:21.400
eines der wichtigsten Sachen. Man muss nicht wissen, was es ist, was es genau macht. Was

01:03:21.400 --> 01:03:29.080
man wissen muss ist, jedes Comet hat weltweit sehr, sehr, sehr wahrscheinlich eine eindeutige

01:03:29.080 --> 01:03:40.760
ID. Und ihr habt hier beispielsweise das Visual Studio Code-Repo gesehen, das hat schon 25.000

01:03:40.760 --> 01:03:48.640
Comets. Und es ist sehr wahrscheinlich, dass es kein Git-Repo gibt. Alle Git-Repos weltweit

01:03:48.640 --> 01:03:59.040
zusammen. Dass es kein Comet gibt, das die gleiche ID hat. Und das ist auch wichtig,

01:03:59.040 --> 01:04:10.480
weil bei Git ziemlich viel auf dieser Comet-ID basiert. Man braucht sie selbst relativ selten,

01:04:10.480 --> 01:04:15.480
aber ich denke, das ist eine wichtige Sache, die einem klar sein muss. Weil, und das ist

01:04:15.480 --> 01:04:21.280
auch eine wichtige Sache, man kann in Git die History, ich weiß, dass es geht, aber

01:04:21.280 --> 01:04:29.680
ich sag's jetzt mal ein bisschen überspitzt, man kann in Git die History nicht ändern.

01:04:29.680 --> 01:04:37.200
Man kann in Git die History nur umschreiben. Und wenn man in Git die History umschreibt,

01:04:37.200 --> 01:04:45.040
ändert sich alles ab dem Zeitpunkt des Umschreibens. Weil die ganzen Comets basieren aufeinander.

01:04:45.040 --> 01:04:51.200
Also sprich, diese Comet-ID, oder besser gesagt, diese Comet-ID, wird errechnet, aus dem der

01:04:51.200 --> 01:04:57.480
es committet, aus der Uhrzeit, wann es committet wird, und ganz wichtig, aus der Comet-ID,

01:04:57.480 --> 01:05:04.000
des Vorgänger-Comets. Das heißt, wenn ich jetzt feststelle, ich hab hier unten irgendwann

01:05:04.000 --> 01:05:09.480
mal Mist committet, was vorkommen wird, wie man das beheben kann, kommen wir auch noch

01:05:09.480 --> 01:05:15.640
dazu. Wenn ich jetzt feststelle, ich hab hier unten irgendwann mal Mist committet in mein

01:05:15.640 --> 01:05:21.880
Git Repo, dann kann ich das erstmal so pauschal nicht ändern. Das ist drinnen. Für immer

01:05:21.880 --> 01:05:28.040
und ewig ist das in diesem Git Repo drinnen. Weil wenn ich jetzt hier hingehen würde,

01:05:28.040 --> 01:05:34.720
und das ändern, würden sich alle Comets, die da drauf kommen, die nachvollen Comets,

01:05:34.720 --> 01:05:39.840
wie sich die Comet-ID ändern. Was dazu führen würde, dass es für Git intern ein komplett

01:05:39.840 --> 01:05:45.720
anderes Repo wäre, und alle, die irgendwie mitarbeiten an dem Repo, eine Historie haben

01:05:45.720 --> 01:05:50.760
die nicht mehr zusammenpasst. Also die Historie in Git kann man nicht ändern. Man kann sie

01:05:50.760 --> 01:05:57.520
nur umschreiben, und da sollte man auch aufpassen, was man macht. So, deswegen ist es auch nochmal

01:05:57.520 --> 01:06:04.840
wichtig, dass es einem klar wird, dass man mit Git standardmäßig nur lokal arbeitet.

01:06:04.840 --> 01:06:10.200
Das heißt, man kann, wenn man Mist committet hat, bevor man es pusht, das ändern, wie

01:06:10.200 --> 01:06:18.120
man will, das wird nie jemand sehen, aber wenn man es gepusht hat, ist es da. Quasi

01:06:18.120 --> 01:06:25.280
für immer. Das heißt, man muss sich überlegen, was man pusht. So, einmal angenommen, das

01:06:25.280 --> 01:06:29.440
ist was, was viele Git-Tutorials beispielsweise viel später machen, aber ich finde, das ist

01:06:29.440 --> 01:06:35.240
eigentlich eines der häufigsten Probleme, die Leute haben, die neu mit Git anfangen

01:06:35.240 --> 01:06:40.880
oder die halt allgemein sich da, sich das gerade einfach ein bisschen angucken und das

01:06:40.880 --> 01:06:44.840
lernen wollen. Wie kriege ich denn jetzt was wieder raus, wenn ich Mist committet habe?

01:06:44.840 --> 01:06:51.160
Was, die Uhrzeit stimmt nicht? Ja, stimmt, die Uhrzeit stimmt nicht. Die Uhrzeit ist

01:06:51.160 --> 01:06:57.840
total falsch. So, wie kriege ich denn jetzt wieder raus, wenn ich Mist committet habe?

01:06:57.840 --> 01:07:04.040
Weil angenommen, ich habe hier jetzt irgendwas committet. Wir können uns mit git log minus

01:07:04.040 --> 01:07:09.560
p, kann man sich anzeigen lassen, was committet wurde. Da sehen wir zum Beispiel, okay, ich

01:07:09.560 --> 01:07:16.040
habe hier halt eine Datei committet mit diesem Inhalt und ich habe jetzt festgestellt, Mist,

01:07:16.040 --> 01:07:19.480
eigentlich wollte ich schreiben, hallo stream und ich habe hallo twitch tv geschrieben.

01:07:19.480 --> 01:07:25.720
Ich habe das jetzt gepusht, das ist da. Also man sieht das ja auch hier, wenn sich jetzt

01:07:25.720 --> 01:07:31.240
irgendjemand geklont hätte, ja, dann hätte er jetzt halt das fehlerhafte Skript gehabt.

01:07:31.240 --> 01:07:35.920
Was mache ich denn jetzt? Wie kriege ich denn das wieder raus? Und die einfache Antwort

01:07:35.920 --> 01:07:45.160
ist gar nicht. Fixen und neu committen. Das ist der Weg in Git Fehler zu beheben. Also

01:07:45.160 --> 01:07:55.160
selbst, wenn ich jetzt quasi theoretisch zurückrollen könnte, sollte ich das auf keinen Fall machen,

01:07:55.160 --> 01:07:59.760
wenn ich es schon gepusht habe, weil danach sieht die history anders aus. So, und der

01:07:59.760 --> 01:08:05.680
Gitweg, sowas zu fixen, ist im Prinzip ganz einfach. Man macht ein neues Comet. Also sprich,

01:08:05.680 --> 01:08:14.040
ich rolle das jetzt nicht zurück und committe es nochmal mit dem korrekten Text, sondern

01:08:14.040 --> 01:08:18.360
ich editiere das jetzt einfach zu dem, was ich eigentlich haben wollte, zwar hallo stream,

01:08:18.360 --> 01:08:22.360
ich wollte nicht hallo twitch schreiben und jetzt committe ich das ganze einfach nochmal.

01:08:22.360 --> 01:08:30.080
Jetzt Git Status eingeben, sagt der mir hier, guck mal, es hat sich was geändert. Visual

01:08:30.080 --> 01:08:33.840
Studio Code sollte glaube ich auch irgendwie anzeigen, dass sich was geändert hat, macht

01:08:33.840 --> 01:08:41.680
es nicht. Konnte das Visual Studio Code nicht, konnte das nicht anzeigen, dass sich was

01:08:41.680 --> 01:08:49.280
Git technisch geändert hat. Keine Ahnung, ist ja auch wurscht. Ähm, wir machen das

01:08:49.280 --> 01:08:55.680
jetzt mal hier alles Commando-Zeile. Genau, und jetzt mache ich ein neues Comet. Ich kann

01:08:55.680 --> 01:09:02.320
das alles ein bisschen abkürzen. Die richtige Reihenfolge ist doch links im Git-Reiter.

01:09:02.320 --> 01:09:09.920
Ah, das habe ich gesucht, ja quasi so ein Diff, was sich geändert hat. Aber sonderlich

01:09:09.920 --> 01:09:14.160
schön ist es, schön ist es nicht. Ich kenne es von manchen Editoren, dass man hier vorne

01:09:14.160 --> 01:09:20.360
so Plus und Minus angezeigt bekommt, wo sich was geändert hat. Ist aber auch egal. So,

01:09:20.360 --> 01:09:25.960
die normale Reihenfolge, was zu committen ist ja, man edit es, ich mach das jetzt nicht,

01:09:25.960 --> 01:09:33.480
man committet es und danach kann man es pushen oder das lokal lassen. Es gibt eine Kurzform

01:09:33.480 --> 01:09:39.280
davon und die wird wahrscheinlich jeder verwenden, der häufiger Git verwendet, weil es einfach

01:09:39.280 --> 01:09:48.400
nervig ist immer was zu adden. Man sagt einfach Git A minus M. Das heißt, committe alles,

01:09:48.400 --> 01:09:55.400
alle Änderungen aus Dateien, die du kennst. In dem Fall, tolles Skript. Message nimmt

01:09:55.400 --> 01:10:02.720
den Text, den ich hier hinten angebe, als Comet-Message. Ja, ich schaue jetzt irgendwie

01:10:02.720 --> 01:10:09.400
mit Echo Text, was auch immer. So, wenn ich jetzt nachgucke, jetzt habe ich ein drittes

01:10:09.400 --> 01:10:17.120
Comet, was den Fehler korrigiert hat, den ich vorher mit committet habe. Ich habe vorher

01:10:17.120 --> 01:10:20.600
Mist committet, den habe ich jetzt wieder korrigiert. Und das ist der Weg, wie man das

01:10:20.600 --> 01:10:28.120
in Git fixt. Standardmäßig rollt man nichts zurück, um was zu fixen. Also man rollt nichts

01:10:28.120 --> 01:10:34.320
zurück, fixt es und committet es wieder. Man sagt, ok, der Fehler ist drinne, man ändert

01:10:34.320 --> 01:10:38.320
ihn und macht ein neues Comet. Was ja auch irgendwo sinnvoll ist, weil überlegt euch

01:10:38.320 --> 01:10:44.360
mal, ihr habt einen Fehler gepusht schon. Jemand anderes, der mitarbeitet, hat sich

01:10:44.360 --> 01:10:52.440
das quasi ausgecheckt bei sich und hat jetzt die Datei mit dem Fehler und er hat vielleicht

01:10:52.440 --> 01:10:57.320
da drin schon was editiert und ihr würdet es dann zurückrollen und dann pusht ihr eine

01:10:57.320 --> 01:11:02.600
Datei, die so aussieht, die, quasi die Version, die er bei sich lokal hat, hätte es ja dann

01:11:02.600 --> 01:11:08.200
nie gegeben in der History. Deswegen hat Git bei sowas Probleme, wenn man History ändert.

01:11:08.200 --> 01:11:11.600
Da kommt es zu ganz wirren Ergebnissen und ich kann es nicht empfehlen, irgendwie die

01:11:11.600 --> 01:11:19.320
History umzuschreiben. Es sei denn, es ist lokal, bevor man pusht. So. Wenn man noch

01:11:19.320 --> 01:11:23.120
nicht gepusht hat, kann man sich das Leben ein bisschen einfacher machen. Wie gesagt,

01:11:23.120 --> 01:11:27.480
normalerweise kommt das in Git-Tutorials immer viel später dran, aber ich finde das, wie

01:11:27.480 --> 01:11:34.360
gesagt, das ist eines da, ja, eines, ein großes Problem, was viele Leute haben, die neue Git

01:11:34.360 --> 01:11:37.480
verwenden. Wenn man noch nicht gepusht hat, kann man sich das Leben ein bisschen einfacher

01:11:37.480 --> 01:11:44.560
machen. Zum Beispiel, wenn ich jetzt sage, Mist, meine Comet-Message ist falsch. Ich

01:11:44.560 --> 01:11:49.720
wollte eigentlich nicht hinschreiben, Changed Echo Text, sondern Fixed Echo Text. Mist,

01:11:49.720 --> 01:11:53.400
was mache ich denn jetzt? Soll ich jetzt ein neues Comet wirklich machen, wo ich dann

01:11:53.400 --> 01:11:59.160
nochmal Fixed Echo, das ist doch, das ist doof. Das ist doof. Aber ich hab Glück, ich hab

01:11:59.160 --> 01:12:03.800
noch nicht gepusht. Da sieht man hier unten auch an dem kleinen Pfeil von meiner, äh,

01:12:03.800 --> 01:12:13.880
hier bash-git-sonsmaas-extension, äh, zschl-bash, äh, zsh-git-extension, ähm, dass ich quasi

01:12:13.880 --> 01:12:17.800
lokal mehr Comets habe als Remote und ich die jetzt pushen könnte. Deswegen ist da

01:12:17.800 --> 01:12:22.920
jetzt so ein Pfeil nach oben. Ähm, wenn ich jetzt einfach nur die Comet-Message ändern

01:12:22.920 --> 01:12:28.120
will von meinem letzten Comet, wohlgemerkt, wenn ich noch nicht gepusht habe, sobald ich

01:12:28.120 --> 01:12:33.280
gepusht habe, soll ich dieses Comet nie wieder anfassen, ähm, dann kann ich das so machen.

01:12:33.280 --> 01:12:43.000
Und wir merken uns jetzt mal hier den Hash-Wert von diesem Comet, also quasi die weltweit

01:12:43.000 --> 01:12:48.600
eindeutige Comet-ID. So, und hiermit kann ich jetzt das letzte Comet nochmal ändern.

01:12:48.600 --> 01:12:55.600
So, und ich wollte schreiben Fixed-Echo-Text. Bam. Und jetzt kommt der Knackpunkt, die Comet-ID

01:12:55.600 --> 01:13:00.560
hat sich geändert. Und die Comet-ID ist das, woran Git festmacht, ob es ein Comet eben

01:13:00.560 --> 01:13:05.760
kennt oder nicht. Das heißt, wenn ich es schon gepusht hätte, hätte das jetzt geändert,

01:13:05.760 --> 01:13:13.520
dass, äh, dann wäre Git verwirrt. Und alle, die es schon geklont hätten, wären auch verwirrt,

01:13:13.520 --> 01:13:17.600
weil dann auf einmal was verschwindet, was schon mal da war. Und Git basiert darauf,

01:13:17.600 --> 01:13:21.560
dass nichts verschwindet, sondern nur neue Sachen oben drauf kommen. Also das muss immer

01:13:21.560 --> 01:13:26.760
so eine, die Historie muss immer quasi eins auf dem anderen aufsetzen und darf sich nicht

01:13:26.760 --> 01:13:32.000
zwischendrin ändern. Ähm, aber nachdem ich das ja nur lokal bei mir hatte, hat das Remote

01:13:32.000 --> 01:13:36.200
noch nie jemand gesehen. Sieht man ja auch, wenn ich hier meine Comments angucke, mein

01:13:36.200 --> 01:13:40.480
neustes Comet hab ich noch überhaupt nicht gepusht. Jetzt hab ich es lokal bei mir gefixt

01:13:40.480 --> 01:13:45.920
und jetzt kann ich das Ganze auch pushen und gut ist. Ähm, so und ich zeig euch jetzt

01:13:45.920 --> 01:13:54.360
mal, was passiert, wenn ich das doch machen würde, die Historie ändern. Die haben was

01:13:54.360 --> 01:14:02.240
genannt. GitHub, nee. Fake GitHub. So und dann gucken wir uns mal an, was Branches sind.

01:14:02.240 --> 01:14:08.880
Comets sind da. Passt, jetzt hab ich es gepusht. So und wenn ich jetzt mich nicht dran halte

01:14:08.880 --> 01:14:18.480
und sage, ich ändere was in meiner Historie, obwohl ich schon gepusht habe. Äh, ah guck

01:14:18.480 --> 01:14:23.160
mal, der Eaxe ist da. Schon durch, mit was? Du meinst hier mit, äh, mit Kot? Ne, ich

01:14:23.160 --> 01:14:27.320
hab heute noch gar nicht gespielt. Ich hatte heute noch keine Zeit. Aber wahrscheinlich

01:14:27.320 --> 01:14:31.440
spiel ich nachher ne Runde. Komm, wir können nachher ne Runde, ähm, Dings hier War spielen

01:14:31.440 --> 01:14:36.960
zusammen, wenn du willst. So und wenn ich jetzt jetzt doch mache, also sprich, wenn

01:14:36.960 --> 01:14:40.240
ich jetzt doch die Historie ändere, obwohl ich schon gepusht hab, machen wir mal, ich

01:14:40.240 --> 01:14:45.320
hab jetzt schon gepusht, jetzt sag ich, ach nee, ich würde doch gerne, dass mein, dass

01:14:45.320 --> 01:14:51.320
meine letzte Comet Message wieder, äh, nicht Fixed Echo Text ist, sondern, äh, Changed

01:14:51.320 --> 01:14:58.400
so Echo, Echo Text. Kann ich lokal machen. Jetzt zeigt es mir hier aber auch schon lokal

01:14:58.400 --> 01:15:02.080
an, äh, die Historie passt irgendwie nicht zusammen. Und wenn ich das jetzt versuche

01:15:02.080 --> 01:15:13.320
zu pushen, dann sagt Git, geht nicht. Weil, Git hat als letztes Comet, das hier und bei

01:15:13.320 --> 01:15:17.400
mir lokal will ich was pushen, wo es dieses Comet nicht gibt. Da sagt Git jetzt irgendwie,

01:15:17.400 --> 01:15:22.320
Moment, das passt nicht zusammen. Äh, guckst du Overwatch World Cup Halbfinale? Ja, mach

01:15:22.320 --> 01:15:30.240
ich. Das geht demnächst los, ne? Muss ich mal gucken. Ja, geht irgendwie in 20 Minuten

01:15:30.240 --> 01:15:36.960
oder so los. Also die Basics mach ich, mach ich immer noch fertig. Äh, äh, Eax, ich

01:15:36.960 --> 01:15:41.320
will Overwatch gucken fällt mir gerade ein. Ich wollt, wollt, äh, Dings die Overwatch

01:15:41.320 --> 01:15:45.120
Halbfinale gucken. Ich kann's vergessen, dass das jetzt schon anfängt. So, und jetzt

01:15:45.120 --> 01:15:52.080
sieht man schon, wenn ich das versuch zu pushen, geht nicht. So, und eine, die blödeste Sache,

01:15:52.080 --> 01:15:56.920
die ich jetzt machen könnte, ich zeige euch nur mal, dass es geht, ist, wenn ich mit Force

01:15:56.920 --> 01:16:02.880
pushe. Weil dann sag ich, Git, einfach scheiß drauf, was du denkst, mach's einfach. So,

01:16:02.880 --> 01:16:07.200
und jetzt sieht man, ähm, wenn ich jetzt hier auf Comets gehe, jetzt ist das Comet

01:16:07.200 --> 01:16:11.640
verschwunden und meins da. Jeder, der sich dieses Repo jetzt geklonet hätte, würde

01:16:11.640 --> 01:16:16.200
einen Fehler bekommen, wenn er das nächste Mal versucht, was zu pullen. Das will man

01:16:16.200 --> 01:16:23.720
nicht. Also, ganz einfach kann man sich merken, sobald was gepusht ist, wird das nicht mehr

01:16:23.720 --> 01:16:31.520
angefasst. Nie wieder. Bis das Universum sich in Luft auflöst. Was gepusht wurde,

01:16:31.520 --> 01:16:39.440
public, wird nie wieder angefasst. So. Das muss man jetzt mal so klar sagen. Monka Shake,

01:16:39.440 --> 01:16:45.840
das macht man nicht, sowas. Weil dann haben alle, die dann dran mitarbeiten und man selbst

01:16:45.840 --> 01:16:55.400
Probleme danach. Wie kann ich denn jetzt was rückgängig machen? Ähm, mal angenommen,

01:16:55.400 --> 01:16:59.920
ich hab jetzt was größeres geändert und das war einfach kompletter Mist. Also sprich,

01:16:59.920 --> 01:17:12.560
ähm, ich hab jetzt hier nen Sündagsfehler drinne. Ich hab jetzt hier nen Sündagsfehler

01:17:12.560 --> 01:17:24.200
drinne. So. Ich hab ein neues Feature programmiert, was eigentlich, ähm, ganz toll ist und super

01:17:24.200 --> 01:17:30.520
funktionieren sollte. So, und ich hab das jetzt committed, gepusht und jetzt stell ich fest,

01:17:30.520 --> 01:17:39.520
Mist ich habe Mist gepusht. Ich hab nen Sündagsfehler drinne. Ja gut. In dem Fall ist es jetzt relativ

01:17:39.520 --> 01:17:43.760
einfach. Ich mein, ich kann jetzt das genauso machen, wie ich es eben gezeigt hab. Ich

01:17:43.760 --> 01:17:48.400
könnte hier reingehen, das löschen und nochmal neu committen. Aber, wenn wir jetzt mal von

01:17:48.400 --> 01:17:54.320
ausgehen würden, realistischer gesehen, ähm, dieses neue Feature würde sich, sagen wir

01:17:54.320 --> 01:18:03.200
mal, über 20 Dateien und 500 geänderte Zeilen erstrecken und ich, quasi derjenige, der sich

01:18:03.200 --> 01:18:08.800
um das Repo kümmert, ja, dass das alles sauber und ordentlich läuft, hat gar keine Ahnung

01:18:08.800 --> 01:18:14.280
von dem, was dieser Typ da committed hat, dann ist es ganz schön schwierig von Hand

01:18:14.280 --> 01:18:18.840
das Commit wieder rückgängig zu machen und in die Form zu bringen, dass es wieder funktioniert.

01:18:18.840 --> 01:18:24.680
Bei anderen Versionsverwaltungssystemen wäre die logischste Schlussfolgerung jetzt, ich

01:18:24.680 --> 01:18:29.440
rolle zurück, also quasi auf den Stand vor diesem Commit, was alles kaputt gemacht hat,

01:18:29.440 --> 01:18:35.880
weil, ne, dieses Commit hat unser tolles Programm zerstört. Also würde ich jetzt normalerweise

01:18:35.880 --> 01:18:40.240
hier rauf zurückrollen, weil ich weiß, davor ging es noch alles. Das ist ja auch, sieht

01:18:40.240 --> 01:18:43.800
man es wieder, ist eines der großen Vorteile von einem Versionsverwaltungssystem, da kann

01:18:43.800 --> 01:18:50.200
ich sowas machen, sprich, ich hab hier meine vergangenen Stände relativ gut beschrieben

01:18:50.200 --> 01:18:55.640
und weiß auch jetzt noch, wie das Programm heute Morgen ausgeschaut hat, oder ich kann

01:18:55.640 --> 01:19:00.800
mir den Stand von heute Morgen auch angucken. Also, wie macht man das jetzt? Also mal angenommen,

01:19:00.800 --> 01:19:05.320
dieses Feature hätte sich jetzt über 20 Dateien verteilt und hätte 500 Zeilen geändert

01:19:05.320 --> 01:19:09.000
und ich hab dieses Feature nicht programmiert, also ich weiß gar nicht genau, was der da

01:19:09.000 --> 01:19:14.480
eigentlich gemacht hat. Ich will es einfach rückgängig machen. Ich will es einfach rückgängig

01:19:14.480 --> 01:19:19.120
machen und, wie ich es gerade gesagt hab, einfach auf den Stand vorher zurückrollen

01:19:19.120 --> 01:19:34.000
ist mit Git nicht. Dafür gibt es bei Git den Befehl Revert. Revert macht genau das, was

01:19:34.000 --> 01:19:40.720
ich vorher von Hand gemacht hab, nämlich der dreht das Comet einfach um. Also, ich

01:19:40.720 --> 01:19:48.040
zeig es euch hier nochmal. In dem letzten Comet weiß Git ja, dass ich, ich zeig mal

01:19:48.040 --> 01:20:00.840
nur das letzte an, Git weiß ja, in dem letzten Comet wurden diese Zeilen geändert, hinzugefügt.

01:20:00.840 --> 01:20:08.200
So, und Git Revert ist ziemlich simpel in dem, was es macht, das dreht das einfach um.

01:20:08.200 --> 01:20:13.320
Also sprich, wenn in diesem Comet diese Zeilen hinzugekommen sind, wird ein Git Revert diese

01:20:13.320 --> 01:20:19.760
Zeilen löschen. Zeilen, die gelöscht werden, wird ein Git Revert hinzufügen. Ein Git Revert

01:20:19.760 --> 01:20:28.040
macht quasi einfach ein umgedrehtes Comet. So, und wenn es jetzt wirklich von jemand

01:20:28.040 --> 01:20:33.360
anderem, was entwickelt worden wäre, dieses Feature, was jetzt unser Programm kaputt

01:20:33.360 --> 01:20:38.360
gemacht hat und halt sich über 500 Zeilen erstrecken würde und ich will einfach nur,

01:20:38.360 --> 01:20:45.080
dass das Programm wieder geht, dann würde ich sagen Git Revert, letztes Comet, da kann

01:20:45.080 --> 01:20:50.360
man jetzt entweder die Comet ID nehmen oder man kann es auch abkürzen, wir nehmen jetzt

01:20:50.360 --> 01:20:56.400
mal die Comet ID, das ist glaube ich einfacher und jetzt sagt er mir auch hier, ok, das

01:20:56.400 --> 01:21:02.760
ist ein neues Comet, aber dieses Comet löscht einfach nur die Veränderung von eben diesem

01:21:02.760 --> 01:21:07.920
Comet. Wenn ich jetzt in meine History gucke, ist im Endeffekt genauso, wie ich das vorher

01:21:07.920 --> 01:21:12.400
von Hand gemacht habe, bloß, dass das Git Revert automatisch für mich gemacht hat. Das

01:21:12.400 --> 01:21:17.840
Comet ist immer noch da, aber der Inhalt ist wieder weg. Also sprich, die Dateien sind

01:21:17.840 --> 01:21:23.000
wieder auf dem Stand von da, aber ich bin in der History nicht auf dem Stand von da,

01:21:23.000 --> 01:21:29.760
sondern dort. So viel zu, wenn man Mist Cometet hat, wie kriegt man es wieder weg. Find ich

01:21:29.760 --> 01:21:33.200
ist eines der wichtigsten Sachen, die man wissen muss, die meisten Git Tutorials machen

01:21:33.200 --> 01:21:38.360
das irgendwann am Schluss. Und jetzt kann ich das nämlich auch pushen ohne Force, weil

01:21:38.360 --> 01:21:43.040
die History immer noch 1, 2, 3, 4, 5, also aufeinander basiert und nichts mehr verschwindet

01:21:43.040 --> 01:21:47.760
zwischendurch. So was sieht man ab und zu mal, also sprich, wenn man den öffentlichen Git

01:21:47.760 --> 01:21:53.760
Push guckt, wird man das ab und zu mal sehen, Revert von bla bla bla. Also sprich, da ist

01:21:53.760 --> 01:21:58.400
irgendwie ein Comet reingekommen, was irgendwas kaputt gemacht hat und anstatt es lange zu

01:21:58.400 --> 01:22:03.440
suchen oder es zu fixen, sagt man, ok, wir Reverten das einfach erstmal wieder, dann

01:22:03.440 --> 01:22:10.760
ist es weg. Aber es ist halt wohlgemerkt aus dem Programm raus, also hier aus dem Bash

01:22:10.760 --> 01:22:14.560
Script ist es raus, allerdings in der Git History ist es noch drin. Das ist wichtig

01:22:14.560 --> 01:22:22.640
zu wissen. So. Nächste Frage ist, was ist ein Branch? Wir haben uns jetzt angeguckt,

01:22:22.640 --> 01:22:28.240
die History, wir haben uns angeguckt, dass jedes Comet eine eindeutige Aldi hat. Ja cheat,

01:22:28.240 --> 01:22:33.880
ich weiß, dass meine Comet Messages wahnsinnig aussagekräftig sind, aber die sind aussagekräftiger

01:22:33.880 --> 01:22:48.240
als die meisten Comet Messages, die ich auf der Arbeit lese. So. Also, wir wissen jetzt,

01:22:48.240 --> 01:22:59.640
wie man was committet, wie man, wenn man Mist committet hat, das wieder wegbekommt und wir

01:22:59.640 --> 01:23:05.880
wissen, wie man was zu einem Remoteserver pushen kann. Das sind schon mal ganz gute

01:23:05.880 --> 01:23:12.040
Grundlagen, wo man erstmal mitarbeiten kann und wo man auch schon zumindest in beschränktem

01:23:12.040 --> 01:23:22.360
Umfang zusammenarbeiten kann. Äh, zockst du heute noch Cod? Ich hatte eigentlich vor

01:23:22.360 --> 01:23:30.040
heute Cod zu spielen, allerdings fängt gleich der Overwatch World Cup an und ich wollte

01:23:30.040 --> 01:23:38.280
ich gucken. Aber eins, ich muss jetzt mal eine Sache gucken, wenn wir gerade dabei sind.

01:23:38.280 --> 01:23:47.400
Kommuniert er das? Nein, ich guck das einfach nur. Naja, immerhin 45.000, das ist für

01:23:47.400 --> 01:23:55.920
immer noch relativ viel, ja. So. Jetzt gucken wir uns aber nochmal an, zwei Sachen muss

01:23:55.920 --> 01:24:06.160
man uns noch anschauen, bevor wir so mit den absoluten Git Basics durch sind und zwar

01:24:06.160 --> 01:24:13.040
sind, was sind Branches und wie führt man zwei Branches wieder zusammen. Das ist ein

01:24:13.040 --> 01:24:18.000
Thema, generell kann man über diese ganzen Sachen stundenlang erzählen und wir sind

01:24:18.000 --> 01:24:22.880
wahrscheinlich auch jetzt mit diesem Stream heute noch nicht ganz fertig, weil wirklich

01:24:22.880 --> 01:24:26.680
weit kommen tut man damit noch nicht, es fehlen noch ein paar Sachen. Aber was wichtig zu

01:24:26.680 --> 01:24:39.040
wissen ist, was sind Branches. Branches sind ähm, Namen für einen Commit, könnte man

01:24:39.040 --> 01:24:50.280
so sagen, wo man später noch neue oben drauf legen kann. Ähm, also sprich, ich kann jetzt,

01:24:50.280 --> 01:24:55.120
dass ich hier im Master Branch drinnen bin, ist einfach nur, weil das so defaultmäßig

01:24:55.120 --> 01:25:02.480
ist, weil man in irgendeinem Branch drinnen sein muss. Ähm, Branch ist, gibt's bestimmt

01:25:02.480 --> 01:25:09.560
ein schönes Bild dazu, genau. Ein Branch ist sowas, also quasi, man hat einen Baum, man

01:25:09.560 --> 01:25:18.400
hat einen Ast und davon gehen halt so kleine Branchen, kleinere Äste von raus. Und so

01:25:18.400 --> 01:25:25.560
ähnlich ist das in Git auch, ich hab hier meinen Master Branch, also quasi das default

01:25:25.560 --> 01:25:31.360
Ding, in dem ich standardmäßig entwickle. Wenn ich jetzt was neues einbauen möchte

01:25:31.360 --> 01:25:39.880
in unser tolles Bash Crypt. Wenn ich jetzt da irgendwas neues drin einbauen will, was

01:25:39.880 --> 01:25:45.520
ganz furchtbar experimentell ist zum Beispiel, von dem ich nicht weiß, ob es überhaupt

01:25:45.520 --> 01:25:52.920
funktionieren wird, dann wäre das ziemlich blöd, ich würde das im Master Branch entwickeln,

01:25:52.920 --> 01:25:57.840
Committen und zwischendrin pushen, weil dann kriegen ja alle Leute die Version, die vielleicht

01:25:57.840 --> 01:26:04.920
kaputt ist. Und deswegen macht man sich dann meistens einen eigenen Branch auf dafür,

01:26:04.920 --> 01:26:08.240
man kann auch den Master entwickeln, vor allem wenn man alleine an irgendwas entwickelt.

01:26:08.240 --> 01:26:19.240
Hehe, der Nilsson. Übrigens Nilsson, was mir gerade einfällt, hat dich auf Twitter

01:26:19.240 --> 01:26:28.240
in dem letzten Mal ein Joe angeschrieben, ob du über seine Rechnerzusammenstellung drüber

01:26:28.240 --> 01:26:32.840
gucken könntest. Das wäre nett von dir, wenn du mal drüber gucken könntest, weil

01:26:32.840 --> 01:26:38.400
da tut sich da sehr schwer. Genau, wir machen jetzt, wir wollen jetzt ein super experimentelles

01:26:38.400 --> 01:26:43.240
hochkritisches Feature in unser tolles Bash Crypt einbauen. Zum Beispiel, wie das Serious

01:26:43.240 --> 01:26:49.480
Max gerade schreibt im Chat Echo123. Ganz kritisch, furchtbar schlimm und das wollen

01:26:49.480 --> 01:26:56.040
wir nicht in unserem Hauptentwicklungszweig, Hauptentwicklungsbranche machen, weil wir

01:26:56.040 --> 01:27:01.880
wollen ja da eine Version drin haben, die erstmal, auf den ersten Blick lauffähig

01:27:01.880 --> 01:27:08.920
ist. Deswegen macht man dann einen eigenen Branch auf, dazu sagt man Git Checkout minus

01:27:08.920 --> 01:27:18.120
B. Zum Beispiel, äh, nennen wir jetzt den Branch neues Feature. Das ist vielleicht

01:27:18.120 --> 01:27:29.200
auch nicht der beste Name. So, äh, und jetzt hab ich quasi den Stand, ich geh nochmal

01:27:29.200 --> 01:27:35.800
zurück. Fuck, ich hab meine Alias hier nicht, nicht, Git Checkout Master. Äh, jetzt hab

01:27:35.800 --> 01:27:44.200
ich quasi den Stand von meiner History genommen und einfach, wie man es hier oben sieht, ähm,

01:27:44.200 --> 01:27:50.400
da noch einen weiteren Namen dran geklebt. Also, auf dieses Comet, dieses Comet kann

01:27:50.400 --> 01:27:56.320
ich zur Zeit mit unterschiedlichen Namen ansprechen. Beispielsweise mit Master, mit, ja, FakeGit

01:27:56.320 --> 01:28:02.920
Hat Master, äh, oder eben auch mit neues Feature. Alle diese Branches zeigen aktuell noch auf

01:28:02.920 --> 01:28:11.520
dieses Comet. Jetzt hab ich es aber aufgesplittet, indem ich einen neuen Branch gemacht hab und

01:28:11.520 --> 01:28:17.360
wenn ich jetzt neue Sachen committe, dann sind die erstmal nur in neues Feature drinne

01:28:17.360 --> 01:28:24.000
und nicht in Master. Also, zum Beispiel, wir machen jetzt hier mal ganz, ganz kritisch,

01:28:24.000 --> 01:28:32.880
Echo123. Das ist wirklich, das ist hoch expert, wie schreibt man das überhaupt? Kritisch.

01:28:32.880 --> 01:28:38.960
Das ist ganz kritisch, Echo123, das kann echt in die Hose gehen, ja. Äh, das, das committe

01:28:38.960 --> 01:28:51.880
ich jetzt noch mit, ähm, es ist hier, Achtung, gefährlich. So, jetzt hab ich ein neues Comet

01:28:51.880 --> 01:29:02.480
angelegt für mein ganz kritisches, äh, ganz kompliziertes, kritisches Feature und das

01:29:02.480 --> 01:29:06.200
ist jetzt nur in diesem Branch drinnen. Und wenn man hier auf mein FakeGit Hat noch mal

01:29:06.200 --> 01:29:11.280
geht, dann sieht man auch aktuell gibt es woanders überhaupt eine Branch Anzeige. Ah,

01:29:11.280 --> 01:29:25.040
hier, Branch. Es gibt aktuell nur Master Branch. Jetzt kann ich das pushen als, ähm, in diesem

01:29:25.040 --> 01:29:34.280
Branch und das hat jetzt den großen Vorteil, dass der Master Branch auf einer Version geblieben

01:29:34.280 --> 01:29:41.280
ist, die geht, die funktioniert, allerdings mein neues Feature Branch eben diesen super

01:29:41.280 --> 01:29:45.520
gefährlichen Comet enthält, der vielleicht alles kaputt gemacht hat. So, und die Version

01:29:45.520 --> 01:29:52.120
dieses Scripts kann man jetzt erstmal ordentlich testen und ausprobieren und wenn dieses neue

01:29:52.120 --> 01:29:59.080
Feature sich dann als brauchbar herausgestellt hat, dann kann ich sagen, ich nehme das neue

01:29:59.080 --> 01:30:05.520
Feature jetzt und schiebe das wieder zurück in den Master Branch. Aber bis ich das gemacht

01:30:05.520 --> 01:30:17.680
hab, ist im Master Branch weiterhin ein relativ stabiler Stand und alle experimentellen Entwicklungen

01:30:17.680 --> 01:30:24.440
hier in diesem neuen Feature Branch. Ja, Silbaro, genau dafür ist das sinnvoll. Silbaro hat

01:30:24.440 --> 01:30:32.160
geschrieben, neue Branches sind voll für neue Versionen oder Betas. Richtig. Man verwendet

01:30:32.160 --> 01:30:39.000
Branches für unterschiedliche Sachen, entweder gibt es, also eigentlich kann man es machen

01:30:39.000 --> 01:30:46.040
wie man will, aber es gibt so ein paar Konventionen, wie man das in Neudeutsch nennt, Best Practice,

01:30:46.040 --> 01:30:50.640
es gibt so ein paar Sachen, die haben sich so etabliert, also man macht Branches beispielsweise

01:30:50.640 --> 01:30:59.640
für neue Features. Man macht Branches auch für alte Release Versionen, wo man vielleicht

01:30:59.640 --> 01:31:11.520
noch was dran fixen muss. Das macht der Lidlxkernel beispielsweise so. Man kann auch Hotfix Branches

01:31:11.520 --> 01:31:24.520
machen. In der Regel macht man Branches immer dann, wenn man erstmal den eigentlichen Stand

01:31:24.520 --> 01:31:38.920
nicht verändern will und erstmal ausprobieren möchte. Deswegen ist es in den Reb, ich muss

01:31:38.920 --> 01:31:45.480
meine Git-Aliasse hier einrichten, sonst dreh ich durch. Deswegen ist es auch bei den Git-Repos,

01:31:45.480 --> 01:31:53.920
die ich verwalte, so, dass in den Master-Branche außer mir keiner pushen darf. Das hab ich

01:31:53.920 --> 01:32:09.600
durchgeblockt. Außer mir darf in 5 Branches keiner pushen, unter anderem Master. So ist

01:32:09.600 --> 01:32:17.640
sichergestellt, dass zumindest ein gewisses Maß an Kontrolle vorhanden ist, was im Master

01:32:17.640 --> 01:32:24.000
kommt und was nicht. Weil es ist einfach so, dass Master eben der Standard-Branch ist,

01:32:24.000 --> 01:32:34.960
auf dem Leute ihre neuen Entwicklungen aufsetzen. Und der sollte halbwegs stabil sein. Das ist

01:32:34.960 --> 01:32:41.040
nicht das stable Release, was ich jetzt irgendwie zum Download anbiete oder so. Das sollte aber

01:32:41.040 --> 01:32:58.120
ein halbwegs stabiler Entwicklungsstand sein, wo andere Leute drauf aufsetzen können. Das

01:32:58.120 --> 01:33:03.120
Ding Master heißt, ist aber wie gesagt auch einfach nur ein Name, genauso wie das Origin

01:33:03.120 --> 01:33:08.240
des Remotes. Das ist einfach nur ein Name, ich kann das Ding auch umbenennen. Also wenn

01:33:08.240 --> 01:33:12.880
ich jetzt beispielsweise nicht will, dass es standardmäßig einen Master-Branch gibt,

01:33:12.880 --> 01:33:21.740
ich kann's auch umbenennen. Ich kann jetzt auch sagen, Master zu stable. Was bescheuert

01:33:21.740 --> 01:33:26.640
ist, weil in der Regel ist das eben der aktive Entwicklungs-Branch, der aber halt nicht kaputt

01:33:26.640 --> 01:33:39.720
sein sollte. Und jetzt können wir beispielsweise ein neues Feature testen, alles wunderbar.

01:33:39.720 --> 01:33:45.040
Und wenn ich fertig bin, und das werden wir nächstes Mal noch ein bisschen vertiefen,

01:33:45.040 --> 01:33:48.920
weil dann gucken wir uns mal an, was passiert, wenn das Zusammenführen Konflikte gibt und

01:33:48.920 --> 01:33:59.400
sowas in der Richtung. Wenn ich damit fertig bin, wenn das getestet ist, und nachdem ich

01:33:59.400 --> 01:34:03.160
diesen Branch gepusht habe, können das natürlich auch andere Leute bei sich ausprobieren,

01:34:03.160 --> 01:34:11.280
indem sie einfach eben mit Git Checkout den Branch wechseln. Dann kommt das Ganze wieder

01:34:11.280 --> 01:34:23.840
zurück in Master. Ach fuck, wie konnte man Graf mal nochmal Git Lock? So, aktuell sieht

01:34:23.840 --> 01:34:28.360
unsere History noch ziemlich gerade aus. Erstes Comet, zweites Comet, drittes Comet, viertes

01:34:28.360 --> 01:34:34.560
Comet, jedes Comet setzt aufeinander auf und alles ist gut. So sieht aktuell unsere

01:34:34.560 --> 01:34:39.120
History aus. Wenn ich jetzt fertig bin mit meinem neuen Feature, wenn ich das fertig

01:34:39.120 --> 01:34:47.200
entwickelt habe, kann ich sagen, ok, ich nehme dieses neue Feature und schiebe es in mein

01:34:47.200 --> 01:34:55.640
Hauptentwicklungsbranche rein, also in Master. Was mache ich mit Git Merge? Diese Option

01:34:55.640 --> 01:34:58.920
kann ich nächstes Mal erklären, das muss ich jetzt machen, dass ich überhaupt was sehe.

01:34:58.920 --> 01:35:05.880
So, jetzt kann ich das Mergen, dann gibt es ein eigenes Merge Comet und wenn ich jetzt

01:35:05.880 --> 01:35:10.600
in meine History reingucke, sehe ich, siehe da, das sind die Comets, die wir schon ein

01:35:10.600 --> 01:35:18.600
bisschen hatten und jetzt kommt hier ein neues Comet, das kommt aber aus einem anderen Branch,

01:35:18.600 --> 01:35:23.640
ich meine, das ist hier so ASCII-Graf gemalt, ja, man kann sich schon so ungefähr vorstellen.

01:35:23.640 --> 01:35:30.560
Bis hier ging es immer geradeaus und da kam aus einem zweiten Branch, hier wurde es abgespalten

01:35:30.560 --> 01:35:36.720
aus dem eigentlichen Branch, was committet und das ging dann parallel und hier in diesem

01:35:36.720 --> 01:35:45.400
letzten Comet wurde es wieder zusammengefügt. Ja, natürlich, das war jetzt wirklich die

01:35:45.400 --> 01:35:53.600
absolut ideale Zustand. Es kann ohne Probleme passieren, dass zwei Leute parallel an der

01:35:53.600 --> 01:35:59.800
gleichen Datei was geändert haben und dass sich das dann nicht verträgt beim Mergen.

01:35:59.800 --> 01:36:04.440
Aber das gucken wir uns das nächste Mal an und das nächste Mal habe ich mir vorher auch

01:36:04.440 --> 01:36:08.880
ein bisschen mehr Gedanken gemacht, was ich eigentlich erzählen will, weil es hat ein

01:36:08.880 --> 01:36:14.840
bisschen gedauert, bis ich reingekommen bin. Zumindest, was wir uns heute angeguckt haben,

01:36:14.840 --> 01:36:20.520
damit kommt man zumindest auf GitHub so basic-mäßig schon mal ganz gut zurecht, man kann sich

01:36:20.520 --> 01:36:25.240
in den Repo klonen, man kann was editieren, man kann was committen, man kann was pushen,

01:36:25.240 --> 01:36:30.280
das sind erstmal die wichtigsten Sachen und man kann Branches wechseln, wenn man vielleicht

01:36:30.280 --> 01:36:36.000
was ausprobieren will. Ich meine, es könnte ja sein, dass man ein GitHub-Projekt sich

01:36:36.000 --> 01:36:41.040
angucken möchte und halt nicht den Masterstand, den Hauptentwicklungsstand, von dem man sich

01:36:41.040 --> 01:36:46.080
angucken will, sondern wirklich irgendein experimentales Feature, weil einen das eben

01:36:46.080 --> 01:36:52.840
interessiert. Also Branch wechseln ist auch eine wichtige Geschichte und die logische

01:36:52.840 --> 01:36:56.120
Schlussfolgerung daraus ist, man muss auch wissen, wie man zwei Branches wieder zusammenführt.

01:36:56.120 --> 01:37:09.200
Ja, auskernFox mache ich auch so. Er hat geschrieben, wie hältst du es mit merge und commit? Ich

01:37:09.200 --> 01:37:12.680
fahre immer ganz gut mit Branches, in die nur committed wird und Branches, in die nur

01:37:12.680 --> 01:37:24.920
gemerged wird. Das mache ich ähnlich, mit immer mal kleinen Ausnahmen. Also, was nächstes

01:37:24.920 --> 01:37:30.920
Mal ist morgen Mittag? Was meinst du? Also, ich mache das immer mit kleinen Ausnahmen,

01:37:30.920 --> 01:37:39.600
weil manchmal ist es einfach viel einfacher, wenn man wirklich da irgendwie einen Zahlendreher

01:37:39.600 --> 01:37:45.600
drin hat oder sowas. Also, mal angenommen. Mal angenommen, wir haben jetzt eine neue

01:37:45.600 --> 01:37:55.360
Version und irgendwie die QS stellt fest, ist irgendwas kaputt. Natürlich kann ich

01:37:55.360 --> 01:37:59.200
demjenigen dann sagen, der damit was zu tun hat, hier mach mal einen Hotfix-Branch oder

01:37:59.200 --> 01:38:05.080
sonst was auf, das ist schon sinnvoll. Zu der Reihenlehre nach, ja. Aber wenn das mal

01:38:05.080 --> 01:38:11.440
angenommen wirklich sowas ganz furchtbar Simples ist, dass der einfach, keine Ahnung,

01:38:11.440 --> 01:38:16.080
Zahlendreher bei einer IP oder bei einem Name oder sowas falsch hat, dann setzen wir

01:38:16.080 --> 01:38:19.880
uns auch manchmal zu mir an den Rechner, gehen auf den jeweiligen Branch drauf, also auf

01:38:19.880 --> 01:38:26.800
den Beta, auf den aktuellen Beta-Branch und machen dann halt commit da drauf, obwohl da

01:38:26.800 --> 01:38:32.040
eigentlich nichts drauf committed werden soll. Das kann ich dann aber entscheiden und wenn

01:38:32.040 --> 01:38:36.320
ich das einfach sehe, dass es nur ein Zahlendreher ist oder so, dann sag ich dann, ja okay, komm,

01:38:36.320 --> 01:38:39.920
lass machen, machen wir keinen extra Branch auf. Aber auf ScanFolks normalerweise mach

01:38:39.920 --> 01:38:48.680
ich das auch so, ja. Alle Leute haben gefälligst, den eigenen Branch zu entwickeln, es zu testen

01:38:48.680 --> 01:38:55.040
und quasi als Merchrequest, Pullrequest, wie man es nennt, wie man es auch immer macht,

01:38:55.040 --> 01:39:04.600
einzureichen als Änderung für Master. Tobi tickt, benutzt du eine Git GUI um Merchkonflikte

01:39:04.600 --> 01:39:11.560
zu erkennen? Na ja, Merchkonflikte erkennt man auf jeden Fall, wenn es sobald sie gibt,

01:39:11.560 --> 01:39:17.120
weil da geht es nicht weiter. Ansonsten verwende ich eigentlich keine GUI für, ich mach das,

01:39:17.120 --> 01:39:20.760
wenn es kleine übersichtliche Merchkonflikte sind, aber das gucken wir uns das nächste

01:39:20.760 --> 01:39:26.800
Mal an. Wenn es kleine übersichtliche Merchkonflikte sind, mach ich das hier einfach auf der Kommandozeile

01:39:26.800 --> 01:39:33.200
im Wim. Oder aber, was auch ein ganz gutes Merch, ganz gut Merch-Diff an sich hat, ist

01:39:33.200 --> 01:39:41.240
Visual Studio Code. Aber normalerweise sind, ich weiß, dass viele Leute, die früher SVN

01:39:41.240 --> 01:39:44.720
verwendet haben, für die ist Merchen und Merchkonflikte und solche Sachen, das ist

01:39:44.720 --> 01:39:52.160
für die, das ist kurz bevor das Rechenzentrum implodiert quasi, das ist in Git alles nicht

01:39:52.160 --> 01:39:59.320
so wild. Also die meisten Merchkonflikte sind recht übersichtlich. Und ich meine, ich hab

01:39:59.320 --> 01:40:04.560
jetzt noch nie an sowas Großem beispielsweise, oder ich hatte noch nie die Verantwortung

01:40:04.560 --> 01:40:10.120
für das Repo, sowas Großem wie beispielsweise der Git, äh, der Linux-Könnel, ja. Aber

01:40:10.120 --> 01:40:14.520
wer hat das schon? Da gibt es eine Handvoll Leute auf der Welt, die das haben. Aber die

01:40:14.520 --> 01:40:21.680
Repo, äh, die Repos bei uns sind relativ groß. Und die Merchkonflikte, die es da gibt, sind

01:40:21.680 --> 01:40:33.120
eigentlich recht übersichtlich. Das ist nicht so wild. Weil es ist so, dass, es ist ja meistens

01:40:33.120 --> 01:40:39.640
in einem Projekt, wo mehrere Leute dran arbeiten, schon so ein bisschen aufgeteilt, so wer ist

01:40:39.640 --> 01:40:45.560
für was zuständig. Also es ist selten, dass quasi 3-4 Leute an den gleichen Dateien was

01:40:45.560 --> 01:40:51.880
editieren, ja. Der eine kümmert sich um das, der eine kümmert sich eher um das. Und klar,

01:40:51.880 --> 01:40:57.680
es gibt auch mal Dateien, wo parallel dran editiert wird. Aber meistens, meistens editieren

01:40:57.680 --> 01:41:02.000
die Leute an unterschiedlichen Dateien. Dementsprechend gibt es gar keine Merchkonflikte. Oder wenn

01:41:02.000 --> 01:41:06.080
es Merchkonflikte gibt, ist es relativ einfach zu lösen. Entweder ist es so offensichtlich,

01:41:06.080 --> 01:41:11.160
dass man das direkt, dass ich es direkt selber sehe. Oder aber, naja, ich nehme einfach die

01:41:11.160 --> 01:41:16.240
zwei Leute, von denen die Comets sind und die Bratsches sind, die Konflikten und sag

01:41:16.240 --> 01:41:22.360
ja, Jungs, werdet euch mal einig, wie muss es denn aussehen am Ende. Und das ist meistens

01:41:22.360 --> 01:41:27.320
nicht, nicht großartig kompliziert. Da sind vielleicht 3-4 Zeilen dann, die da konflikten

01:41:27.320 --> 01:41:36.320
oder so. Also es hält sich in Grenzen. Welches Webinterface benutzt ihr in der Firma für

01:41:36.320 --> 01:41:40.920
Pull-Request? GitLab. Wir haben früher GitLab verwendet. Und ich fand GitLab auch ziemlich

01:41:40.920 --> 01:41:47.480
gut. Ich hätte auch GitLab weiterverwendet. Aber die Firma hat sich ganz viele Atlassian-Tools

01:41:47.480 --> 01:42:03.880
gekauft. Und jetzt haben wir Bitbucket. Ja, Sebaro. Das stimmt. Irgendjemand hat eben

01:42:03.880 --> 01:42:10.280
was zu Pull-Request. Ach nee, hier war eine Frage drinne. Welches Webinterface benutzt

01:42:10.280 --> 01:42:18.680
ihr in der Firma für Pull-Request? GitLab. Bitbucket. Bitbucket. Das ist auch ganz gut.

01:42:18.680 --> 01:42:28.080
Also im Vergleich zu anderen Kack-Business-Software ist Bitbucket wirklich in Ordnung. Ich finde

01:42:28.080 --> 01:42:35.720
GitLab auch gut. Wobei GitLab mittlerweile ziemlich aufgebläht ist. Ah gut, es ist

01:42:35.720 --> 01:42:41.360
halt eine Ruby-On-Wales-Anwendung. So, ich hoffe euch hat der Stream gefallen. Ich gebe

01:42:41.360 --> 01:42:45.720
zu, das war am Anfang ein bisschen chaotisch, weil ich selbst nicht genau wusste, was ich

01:42:45.720 --> 01:42:48.400
alles erzählen muss, in welcher Reihenfolge und so. Das nächste Mal mache ich mir ein

01:42:48.400 --> 01:43:00.200
bisschen mehr Gedanken drüber. Aber ich hoffe so die ganz grundlegenden Basics sind

01:43:00.200 --> 01:43:06.720
zu rüber gekommen. Also sprich, man könnte jetzt ein Repo von GitHub klonen und dort

01:43:06.720 --> 01:43:11.760
eine Änderung mit drin und machen und vielleicht vorher einen eigenen Branch aufmachen und

01:43:11.760 --> 01:43:25.120
das Ganze pushen. Morgen geht es weiter. Ja, ich kann morgen weiter machen, Cheat. Hast

01:43:25.120 --> 01:43:32.960
du Vorschläge, was ich morgen machen soll? Also was immer super ist, ist wenn die Leute

01:43:32.960 --> 01:43:38.040
Fragen haben zu irgendwelchen Sachen, dann ist es einfach an roten Fahrten zu finden,

01:43:38.040 --> 01:43:45.720
was man erzählen kann. Wie schalt es mit dem Discord-Server aus, habe ich noch nicht gemacht.

01:43:45.720 --> 01:43:58.040
Also was ich morgen, ich werde morgen ein bisschen versteckte Sachen zeigen, die aber

01:43:58.040 --> 01:44:04.920
recht praktisch sind. Zum Beispiel, wie man Fehler finden kann. Es gibt in Git eingebaute

01:44:04.920 --> 01:44:12.440
Tools, die einem das Fehler finden ziemlich erleichtern. Also mit Fehler finden meine

01:44:12.440 --> 01:44:16.760
ich jetzt zum Beispiel, man stellt halt wirklich in der Beta-Phase irgendwie fest, es geht

01:44:16.760 --> 01:44:21.200
was nicht und dann geht es darum zu finden oder den Comet rauszufinden, der es kaputt

01:44:21.200 --> 01:44:29.480
gemacht hat. Das ist in Git viel einfacher als gedacht. Flash Gordon fragt, was ist mit

01:44:29.480 --> 01:44:37.200
Stashing und Staging? Du meinst, was der Unterschied ist? Verstehe ich das richtig? Oder ob ich

01:44:37.200 --> 01:44:57.160
es zeigen soll? Ja, Fatal, das stimmt. So richtige Probleme kriegt man eh erst, wenn man es verwendet.

01:44:57.160 --> 01:45:07.640
Ja, Cherrypicks ist aber schon ein bisschen, das brauchen die meisten Leute nicht. Das

01:45:07.640 --> 01:45:17.080
brauche ich, wenn man sich um sowas kümmert, quasi als Verantwortlicher für die Repos

01:45:17.080 --> 01:45:23.080
und so und für die unterschiedlichen Entwicklungsstufen. Da braucht man öfters mal Cherrypick, aber

01:45:23.080 --> 01:45:35.280
die meisten Leute brauchen es eigentlich nicht. Ganz simpel gesagt, Flash Gordon, hat Stash

01:45:35.280 --> 01:45:38.800
und Stage eigentlich überhaupt nichts miteinander zu tun, das sind komplett unterschiedliche

01:45:38.800 --> 01:45:42.400
Sachen. Stashing ist Zwischenspeichern von Änderungen, wenn man einen Branch wechseln

01:45:42.400 --> 01:45:49.880
muss und Staging ist das, was ich vorgemerkt habe für das nächste Comet, um es mal ganz

01:45:49.880 --> 01:45:56.840
kurz zu sagen. Wenn ich etwas adde und noch nicht committe, dann ist es gestaged für

01:45:56.840 --> 01:46:05.120
das nächste Comet und wenn ich etwas editiert habe, aber jetzt nicht committen will, weil

01:46:05.120 --> 01:46:08.160
ich vielleicht den Branch wechseln muss, weil mein Chef gerade zu mir gekommen ist und

01:46:08.160 --> 01:46:24.360
gesagt hat, du musst etwas machen, dann stash ich quasi in Zwischenspeicher. Ja, Fatal,

01:46:24.360 --> 01:46:39.000
das ist cool, dann hat es sich am wenigsten gelohnt, dass ich etwas dazu erzählt habe.

01:46:39.000 --> 01:46:48.000
Ja, dann mache ich das mal morgen. Es gibt noch einige coole Sachen, die man zeigen kann,

01:46:48.000 --> 01:46:54.880
wobei man sagen muss, bei Git ist es so, man kann damit alles machen, man kann damit machen,

01:46:54.880 --> 01:47:00.200
was man will und wie man es will, man sollte aber aufpassen, dass man es nicht übertreibt.

01:47:00.200 --> 01:47:08.280
Nur weil ich 500 Branches anlegen kann, muss ich das nicht unbedingt machen. Git selbst

01:47:08.280 --> 01:47:14.880
stört das überhaupt nicht, Git ist mit 500 Branches noch genauso schnell wie mit 2 Branches,

01:47:14.880 --> 01:47:20.680
aber es ist halt nicht wirklich übersichtlich. Nur weil ich 5 Branches auf einmal merken

01:47:20.680 --> 01:47:26.320
kann, weil das Git zulässt, muss ich das nicht unbedingt machen. Also, man kann alles

01:47:26.320 --> 01:47:31.000
mitmachen, es ist auch vollkommen egal, wie man das macht, aber wenn ich bei jedem Comet

01:47:31.000 --> 01:47:36.600
Force pushen muss, mache ich irgendwas verkehrt. Wie wäre es mit Versionstacks? Ja, könnte

01:47:36.600 --> 01:47:42.640
man auch machen. Bei der Gelegenheit könnte man eigentlich noch mal sagen, dass Comet

01:47:42.640 --> 01:48:00.520
IDs und Branches und Texts relativ ähnlich sind. Rebase, Rebase könnte man auch mal machen.

01:48:00.520 --> 01:48:09.200
Rebase ist wichtig, wenn man halt seine eigenen Comets aufräumen will, bevor man sie einreicht

01:48:09.200 --> 01:48:23.360
als Pull oder Merchrequest. Ja, das werde ich morgen machen. Und jetzt werde ich Overwatch

01:48:23.360 --> 01:48:32.240
World Cup gucken. Ich hoffe euch hat es gefallen. Übrigens wir haben ja heute unsere Linux

01:48:32.240 --> 01:48:39.040
FM verwendet, die wir vor paar Wochen eingerichtet haben zusammen im Stream. Wem das noch nicht

01:48:39.040 --> 01:49:07.520
aufgefallen ist. Gut. Dann macht's gut, bis morgen. Tschüss.

