Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Kack wie SSService
Dann machen wir es so, dann wird es jedes Mal neu angelegt, aber wir können es einfach
so machen.
War random gleich Nuda, es ist dann halt bei jeder Anfrage eine neue Instanz, die ist
ja nicht wirklich schlimm.
So random, keine Ahnung, number, number, random, next, so von 0 bis 360, in C sharp ist es
nämlich exclusive, das heißt, das ist jetzt eine random Nummer von 0 inklusive 0 bis exklu-
mal gucken ob das stimmt, ich glaube aber schon.
Exclusive 360, also es ist, es ist 0, 0 taucht auf bis 300, bis inklusive 359.
So, ok.
Und das hauen wir jetzt hier rein.
Und dann sollte unser Keck WSS Service schon soweit fertig sein, dass der, dass der Keck
weht.
I, hallo, I, äh nicht I, N, ok, schauen wir mal, ha, Leute, es ist Keck WSS Service,
es funktioniert, ok, nochmal kurzer recap, was wir jetzt gemacht haben.
Ist es nicht geil, das hat die Welt gebraucht, das hat die Welt gebraucht.
Die Transparenz wird im Browser nicht richtig angezeigt.
Hey, ich bin ein Risiko Investor, natürlich, ähm, war mir schon klar, du bist ja schon
eine Weile am Start, ich hab's schon öfters gesehen, aber, äh, ich dachte schon immer,
schon immer bei deinen Messages, das ist bestimmt ein Risiko Investor und würde gerne absurde
Summen in ihr Startup investieren, wir glauben ihr Service hat das Potenzial, das nächste
Google FB überzuwerden, bitte kontaktieren sie, ey, Fang, Fang ist out, wenn erstmal
Keck WSS Service kommt, da sagen die Leute nicht mehr, sie wollen einen Fang Job, die
sagen, sie wollen ein Keck W, ein Keck W, nein, das sind ja die Amis, die sagen, ich
bin ein Keck W, ein Keck W Job, Tongenbrecher, kannst du ein Autorefresh machen, ja, aber
wozu, so, willst du noch ne API machen, na ist doch, du machst die Seite auf, nur kommst
ein Bild zurück, ok, wunderbar, unsere extrem advanced Keck WSS Service Anwendung ist fertig,
übrigens, nochmal eine Runde Sellout, wenn ihr auch nen virtuellen Linux Server in der
Cloud haben wollt, dann schaut jetzt mal bei meinem Partner Hetzner Cloud vorbei, geht
schon los bei 3€ im Monat und wenn ihr jetzt nen Server mietet, bzw. euch einen neuen Account
habt, und den ganzen, wo hab ich, fuck, ich find's nicht, lull, ah hier, sehr gut, sehr
gut Chat, und das ganze registriert mit meinem Account, alter, ich kann nicht reden, Leute,
Sellout gescheitert, Sellout gescheitert, vorbei, vorbei, jetzt kann ich nicht mal Sellouten,
Kündigung ist raus, äh, jetzt vorbei, IP-Adresse merkt man beim nächsten Reload das Bild senden,
nein, ja, zumindest, wenn ihr euch registriert mit meinem Code, kriegt ihr ein 20€ Startgutschein,
Startguthaben, allerdings nur für neue Kunden, gegen Fake Accounts weiß ich nicht, ob sie
was haben, der Sellout ist richtig sad gewesen, ja, zwar der schlechteste Sellout aller Zeiten,
ist der Frazier on, guck mal so, ist der Frazier on, nein, ah, der war wieder ewig nicht on,
okay, CACW erste Service, okay, machen wir weiter, also unser Webservice ist jetzt fertig,
das Ziel ist jetzt, also wir folgen das machen, Web-Anwendung erstellen, Server einrichten,
reproduzierbar mit Ansible, und dann schieben wir das ganze auf den Server, nur mal kurzer
Recap, vielleicht hat noch nicht jeder so eine ASP.NET Web-Anwendung gesehen, deswegen
zeige ich das nochmal ganz kurz, was es macht, es ist aber wirklich, ihr habt ja gesehen,
es ist äußerst wenig, also die einzigen zwei Dateien, die ich angepasst habe, waren einmal
die Startup-Datei, da habe ich alles rausgeschmissen, wo hier irgendwas von HTTPS oder irgendwelche
API-Generierung drin steht, alles weg, das ist der Rest, ist aber komplett Default, und
ich habe den Standard-Controller umbenannt in CACW-Controller und habe ihm gesagt, dass
er direkt auf dem Route der Seite aktiv sein soll, und sobald man die Seite aufmacht, wird
diese Methode hier aufgerufen mit GET, also wenn du ein GET-Request drauf machst, wird
diese Methode aufgerufen, und er macht nichts anderes, wie aus diesem Ordner ein random
Bild zu lesen und zurückzugeben. Mehr macht das nicht. Das war's, also mehr Anpassungen
gibt es da dran nicht. So, und das reicht schon für CACW SSS-Service, und jetzt werden
wir CACW SSS-Service mal in der Cloud laufen lassen, dass ihr auch alle eine Runde CACW'en
können SSS-Service. Und da ist für jeden Winkel ein Bild drin, genau. Wir machen das
nicht dynamisch, wir machen das nicht dynamisch oder sowas, wir haben im Vorfeld 360 Grad
CACW erstellt. Und dafür wird immer random eins rausgenommen. Ist natürlich auch gut
entlastet den Server, da müssen wir nix on the fly rotaten. Könnten wir vielleicht irgendwann
demnächst, das ist eine coole Sache, dass wir ein bisschen Programmier-Content für den
zweiten Teil oder dritten Teil noch haben. Server-Side-Bild-Rotieren. Dynamisch. Ja,
da könnte man auch eine API machen, Rotate, und dann irgendwie sowas wie Decrease angeben
oder sowas. Big Brain Time, können wir das nächste Mal anbauen, haben wir was zu programmieren.
Gut, also, was haben wir hier? Wir haben unser Master Shit Repo am Start, geht Status, und
jetzt machen wir ein Ansible Repo, weil, Ansible, weil wir wollen ja, und das kann ich euch,
es ist erstmal egal mit welchem Tool, aber ich kann euch das prinzipiell nur empfehlen,
wenn ihr Server aufbaut für Services, die jetzt nicht einfach nur mal angelegt werden
und dann wieder wegschmeißen, weil man mal was ausprobieren wollt, also wenn ihr irgendwas
seriöseres hosten wollt, irgendwas, was vielleicht auch mal ein bisschen länger als zwei Tage
abbleibt, dann kann ich euch nur empfehlen, in irgendeiner Art und Weise, zumal mal mindestens
mal aufzuschreiben, wie ihr den Server eingerichtet habt, was da für Packages drauf sind und sonst
was, oder aber noch besser, das ganze in irgendeinem Skript oder mit irgendeinem Automatisierungstool
zu machen, dass ihr den gleichen Server immer wieder reproduzierbar aufbauen könnt, oder
eventuell auch noch fünf weitere dieser Server reproduzierbar aufbauen könnt. Das ist ja
gerade eine der Punkte, warum dieses ganze Containerzeug so beliebt geworden ist. Ja,
du kannst Container relativ easy immer gleich wieder aufbauen und dementsprechend auch
mit irgendeinem Orchestrator einfach skalieren lassen. Brauchst du heute für 50 User was,
brauchst du nur zwei, hast du morgen 5000 User, brauchst du 20. Ist für euch ein Dockerfile
Ansible gleich Dokumentation? Wenn es ordentlicher Source Code ist, ja. Wenn man es lesen kann.
Ich meine, niemand braucht doch da Files, wo dann drinne steht. Keine Ahnung, so, sagen
wir mal hier in if, if n größer fünf, ja. Es braucht doch niemand Kommentare, wo dann
drinne steht, checks if n is greater than five. Das ist bescheuert, das sieht man ja. Und
dementsprechend, wenn das alles selbsterklärend ist, bräuchte auch kein extra Doku Zeug
für. Für zusätzliche Erklärung ist es natürlich sinnvoll, ne. Was du in Ansible ja nicht reinschreiben
kannst ist, warum nimmst du diese Packages? Ich meine, kannst du schon reinschreiben,
aber ich befürchte mal, das wird da aber keiner drin aktualisieren, außerdem musst
du da ein neues Commit machen, um die Comments zu aktualisieren. Sprich, wenn du bei Ansible
zum Beispiel sagst, wir installieren diese fünf Packages, und du willst irgendwie für
die Nachwelt vorhalten, für die Nachwelt festhalten, warum man diese Packages genommen
hat, dann würde ich das auf n extra Wiki oder so schreiben. Genau, also, es gibt da
verschiedene Tools für Server-Automatisierung. Das bekannteste dürfte wohl Puppet sein,
das ist aber n bisschen Keynes-Champig, find ich. Sieht so aus. Ja, du sagst dir auch,
ich will n User anlegen mit dieser ID und dieser Shell und diesem Home Directory und
sowas. Dann gibt es doch Chef und es gibt Ansible, und Ansible finde ich eigentlich
am nicesten. Ihr wisst, ich hab noch nicht sonderlich viel Ahnung, bzw. noch nicht lange
Ahnung von Ansible, das haben wir vor einem Jahr oder so mal zusammen uns im Stream angeguckt.
Ich muss sagen, mittlerweile finde ich das wirklich sehr nice. Ohne GitHub-Copilot, ja,
ich sehe den Sinn davon nicht. Genau, deswegen machen wir jetzt ein Repo, wo alles reinkommt,
um wir diesen Service aufbauen können. Erpuppet ist, glaub ich, schon bekannter, weil es das
deutlich länger gibt. VirusBLN, Dankeschön für den Sub. Aber Ansible ist auf jeden Fall
beliebter in letzter Zeit. Lass mal gucken, es gibt doch dieses Google vs. Ranking-Geschichte.
Oh, wo war das nochmal? War es Google Trends? Jawoll. Taylor Swift und Kim Kardashian, genau,
das ist Fußball vs. American Football. Das müsste man sich mal für die Welt angucken.
Außer im Freedom-Land ist da wahrscheinlich nicht so viel. Aber es ist ja auch American
Football. Ok, Puppet. Puppet findest du halt immer noch viel mehr, da müssen wir noch
was dazusuchen. Egal, wir suchen einfach mal Puppet und dann suchen wir hier Vergleich
mit Puppet. Puppet ist halt, guck mal, sogar so ist es beliebter. Letzten 5 Jahre. 2004
bis heute. Guck, hier ist das aufgekommen und dann hat es das überholt. Aber insgesamt
würde ich tatsächlich sagen, dass Puppet noch ein bisschen bekannter ist, eben weil
es einfach mal 10 Jahre älter ist. Ne, das stimmt nicht, so alt ist es nicht. Egal,
keck wie erst das Service ist am Start. Gut, also weiter im Text. Nachdem wir alles in
dieses Geepum machen wollen, legen wir einen extra Ordner für unsere Ansible-File an.
Ansible ist ein Tool, um Server automatisiert aufzubauen und das heißt, wir brauchen als
erst mal einen Server, den wir automatisiert konfigurieren können. Das heißt, ich lege
jetzt mal einen Server an. Mal gucken, ob ich das so mit dem Kommandozeilen-Tool hinkriege.
Server, Create, Image. Das ist übrigens das gleiche, wenn ich bei Hetzner im Webinterface
klicke. Also wenn ich hier Add Server mache und durch klicke, ist es genau das gleiche,
wenn ich hier über die Kommandozeile mache. Nur, dass ich es einfacher finde, wenn man
öfters ein paar Server anlegen muss, über die Kommandozeile zu machen. Okay, CX11, Name,
keckweight 2, keck, W, S, Service, SSH Key. Okay, wir nehmen Triple Core, wir nehmen Triple
Core Kiste, die heißen CPX21. CPX21, hoffe, stimmt das? Und wenn ich Glück habe, kriege
ich jetzt auch nicht das Hutpasswort angezeigt. Gibt es nicht auch eine Ansible-Rolle für
die Hetzner-API? Doch, gibt es. Oh, ich darf keine Underscores verwenden. Was ist das?
Keine Underscores. Wie kommt man da hin? So? Okay, das funktioniert. Warum nicht keckchamp,
weil es keck, W, S, Service ist. So, also, IP von meinem Server. Was ich jetzt machen
werde ist, ich werde mich nicht auf dem Server einloggen. Wir legen jetzt erstmal ein Ansible-Playbook
an, heißt das Ganze. So, wir legen ein Ansible-Playbook an. Ich habe immer keine Ahnung, wie nenne
ich das denn mal? Setup. Gut. So, und jetzt muss ich nachgucken, weil ich bin in Ansible
noch nicht so fit, dass ich das aus dem Kopf gut hinbekomme. Was ist denn das? Always.
Trusten. Wir trusten allem. Immer, immer trusten. Okay, es ist YAML. YAML fängt ja mit so tollen
Minus an. So. Wobei, ich nenne es nicht Setup, ich nenne es einfach Server.YAML. Eisch.
So, jetzt hört es aber bei mir auf. Ansible. Ich brauche wieder Ansible. Mist. Ich muss
nachgucken, wie das heißt. Also, Leute, ich log mich mal kurz. Ich muss euch ausmachen,
dass ihr mich keinen Bock mehr auf irgendwelche DDoS stellt. He doesn't know he lacks critical
information. Okay. Wieder an. Also, ich muss mal gucken, wie das funktioniert. Also, normalerweise
ist das Problem, wenn man sich bei Ubuntu einloggt, dass immer beim Login die IP angezeigt
wird. Das will ich ausschalten. Ich weiß, dass es dazu... Also, es gibt zwei Möglichkeiten,
wo das herkommen kann. Einmal Message of the Day oder SSH-Config. Nee, ich mache keinen
VPN. Leben am Limit, Leute. Ich glaube aber, bei Ubuntu kommt es aus der SSH-Config. SSHD-Config.
Das habe ich nämlich schon mal nachgeguckt. Was? IP-Leak unten. Da ist kein IP-Leak.
Ja, der Server. Der Server-IP juckt mich nicht. Server-IP ist mir egal. Es gibt eine Option,
dass SSH nicht macht. Hier. Print last log no. Okay, so heißt das. Das heißt, das muss
ich jetzt Ansible konfigurieren, dass er das macht. Also, Ansible SSHD-Config. Wie macht
man das? Das habe ich keine Ahnung von. Muss ich nachgucken. How to cleanly edit SSHD-Config?
Nee, Print Message of the Day ist aus, warum auch immer, weil Ubuntu keinen Bock darauf
hat. Kein Schimmer. Aber das ist das hier. Print last log. Dann zeigt es dir an. Zuletzt
eingeloggt von und noch ein paar andere Infos. Das ist Ubuntu 20.04. Übrigens, wenn ihr
irgendwelche Fragen habt, einfach entwupplos in Chat. Ich gehe auch gleich nochmal zwischendurch
den Chat durch. So, also wie machen wir das jetzt am richtigsten? Was? Test Replays. Okay.
Also. Ich bin unfähig, was Ansible-Dinger aus dem Kopf zu machen. So. Name. So, das
Ding heißt Setup. Setup Job. Hosts. Alle, die wir angeben. Asks. Okay. Task is Disable.
Show IP on Login. Kannst du auch einfach Touch, Hasch, Login? Wirklich? Cool. Wusste ich
nicht. Asch. How to turn off Login Banner in Linux. Ist das auch für die Geschichte,
die SSH ausgibt? Ich deaktiviere das im SSH Server und fertig. Okay. Disable Show IP
on Login. Also, was wollen wir disablen? Print last log. Das ist Mist, wir wollen keine
Schleife hier machen. Fart. Fart ist etc, ssh, sshd, config. Zack. So, regex. Print
last log. Aber ohne die Raute. Und jetzt soll man print last log no soll dann da rein.
Also, soweit wie ich das jetzt verstehe, macht er folgendes. Wo ist der Unterschied
zwischen Ansible und Docker? Das sind zwei komplett unterschiedliche Programme. Ansible
ist quasi eine Scripting Umgebung, wo du Server bzw. alles was du willst automatisieren kannst
über SSH und Docker ist Frontend für Container, Linux Container. Zwei komplett unterschiedliche
Paar Schuhe. Du kannst mit Ansible aber zum Beispiel auch Container anlegen und Docker
verwalten. Das geht. Ansible benutzt du zum Beispiel für so Sachen wie geh auf den Server,
nimmte die Ausgabe von der IP beim Login aus oder geh auf den Server, legt den User an
mit dem Name xy, Homeverzeichnis sowieso und der User ID sowieso. Danach legt ein Unit
File hin und stellt in der Firewall ein, dass nur Port 22 erlaubt ist. So was in der
Richtung. Hetzer hat eine CLI, ja. Hetzer hat eine CLI. Wow, was ich da gerade gemacht
habe. Ich mach das trotzdem mal weg, auch wenn es egal ist, dass ich das geleakt habe,
aber man weiß ja nie. So. Wait, könnte ich nicht mein Laptop mit Ansible bootstirpen?
Doch, könntest du machen. Du musst aber erstmal ein Betriebssystem drauf kriegen und Ansible
drauf installieren. Ne, musst du nicht, SSH muss laufen. Du brauchst Python drauf, nicht
Ansible. Kannst du machen, ja. So und von der Idee, wir haben jetzt über die Hetzer
CLI einen Server angelegt und mit Ansible lassen wir den jetzt konfigurieren. Also
erstmal SSH Login ausschalten. Das ist schon mal das erste, was wir machen. Dann brauchen
wir noch ein paar Packages auf unserem Server. Was jetzt vielleicht nicht ganz klar ist an
der Stelle, was ist der Vorteil, das so zu machen, anstatt einfach sich auf dem Server
einzulocken und sagen, ab install. Naja, der Vorteil ist, wenn ich mehrfach solche Services
aufbaue, dann muss ich das jedes Mal machen und immer in der gleichen Reihenfolge und
ich darf nichts vergessen. So ist einmal quasi so eine Art Dokumentation da, wie der Server
aufgebaut ist und ich kann das jedes Mal wieder machen. Äh, gute Frage, ob das so funktioniert,
werden wir echt gleich sehen. W-werden wir echt gleich sehen. Wieso macht man das nicht?
Im Bash Script kann man auch machen, hat man früher gemacht, als es diese Tools noch nicht
gab. Ist für kleine Sachen auch vollkommen legitim, aber Ansible hat keine Ahnung, 200
Module für alle möglichen Sachen drinne. Von Unitfiles verwalten, bis R-Syncs machen,
bis Mountpoints verwalten und sonst was. Das ist halt im Bash Script alles von Hand nachzubauen,
wie sehr Pains Champ. Okay, also blablabla. So, und jetzt brauchen wir noch was. Ich will
standardmäßig Packages installieren. Install Packages. Abt. Das weiß ich aus dem Kopf,
wie es geht. Abt, Packages installieren. Name. So, Array. Was wollen wir installieren? Telnet.
Hardtop. Enload. Keymarks. D-Stats. Was brauchen wir sonst noch so? Äh, haben wir schon. NetTools.
Ne, wie schreibt man das? NetTools, glaub ich. So ist wie if-config. Boomer wie ich verwenden
if-config, nicht ip-add. So, und jetzt sagen wir noch status latest, glaube ich. Status
latest. Da muss ich jetzt einmal mal nachgucken. Ansible apt install. Zeig mal her, wie sieht
das richtig aus? Examples. Äh, state. Update cache brauchen wir auch noch. Genau. Update
cache brauchen wir auch noch, dass der vorhin ein update macht. Update cache, yes. Äh,
state wars, ne. Nicht status, state. State latest. Genau. So, und wenn ich das jetzt ausführe,
sollte von der Idee, äh, von der Idee her Folgendes passieren. Der lockt sich auf dem
Server ein, installiert mir die Packages und danach disabler, dass das meine IP anzeigt
beim login. Hypo bei Packages. Ach, das ist eh nur Text. Auch noch ein update-upgrade mit
rein. Das ist eine gute Idee, das machen wir. Update hab ich ja schon. Update cache. Äh,
upgrade. Upgrade, wie macht man das? Upgrade. Upgrade. If yes or save. Vielleicht gibt's
auch ein Exempel für. Upgrade, das muss man wahrscheinlich, ich versuch das mal, ob man
das alles in einem machen kann. Ich, ich glaube ja nicht. Upgrade dist, full. Ähm. Äh,
mal gucken, ob man das alles so auf einmal machen kann. So, dann führen wir das ganze mal aus.
Also wir haben hier, wir haben hier die Datei liegen. Äh, nicht download. CD, repos,
keqw as a service, ansible. So, äh, ansible, playbook. Playbook, minus i. Oh, wie konnte
man die Server, Server-IP überschreiben? Normalerweise braucht man ein, ein, ein, ein Inventory mit
den Hosts drinne, aber das ist jetzt zum testen erstmal, egal. Topminus i. Was ist das upgrade
yes? Nee. Die sagen selbst, dass es upgrade dist ist. Ach so, yes. Ok. Update yes und
klar. Und auch yes. Warum kann man da yes machen oder? Ok, und was ist yes? Ist yes,
full oder dist? Ok, das ist ein bisschen. Ah, nee. Save and it's alias yes. Ok. Yes
ist yep. Yep, cock. So, ähm, jetzt müsste es funktionieren. Ähm, Moment, wie ging,
wie ging es auf dem Server auszuführen? Erstmal gucken, was hatte ich denn hier für eine
IP nochmal? SSH den da. Minus i. Wie ging das nochmal? Ansible Direct IP. How to run ansible
without specifying. Hier. Minus i, der Name und dann das Playbook. Ja, man muss ein Komma
machen. Das war total hängen geblieben. Server. So, also von der Idee her sollte er sich jetzt
auf dem Server einloggen, die Packages installieren. Beziehungsweise, nee, er sollte erstmal ein
upgrade machen, ein upgrade machen, dann die Packages installieren. Ich bin mir nicht sicher,
ob man das alles auf einmal machen kann. Danach sollte er aus der SSHD-Config das Ganze rausschmeißen
und danach brauchen wir noch SSH reload. Danach brauchen wir noch restart SSH, sonst funktioniert
er nicht. Name. Restart SSHD. Ähm, wie ging das nochmal? Service. Service. Name. SSH.
Ansible Service. Da muss ich gucken. State. Restarted. Ok. State Restarted. Ok. Test,
ob es funktioniert. Bam. Grip. Warum? Ah, mein User ist falsch. Remote User. Natürlich
Route, was sonst? Nur Route tut gut. So, zeigen wir mal. Ah, fuck. Discover Inter, was? Ok,
das geht nicht in einem, glaube ich. Ich glaube, das funktioniert nicht in einem. Package upgrade.
Das geht nicht in einem. Dann müssen wir, äh, da müssen wir das, da müssen wir das
splitten. KQS-Service. Ja, guck, so sieht der aus. Ist das nicht geiler Service? Den
deployen wir jetzt auf die Kiste. So, ähm, darf man, darf man sowas hier dann zusammen
machen? Update. Upgrade. Domain gibt's noch keine. Domain müssen wir auch noch machen.
Ah, ah, guck mal, jetzt, jetzt funktioniert's. Äh, Domain müssen wir auch noch machen,
das, äh, machen wir hier mit, wenn wir Zertifikate machen. Domain. Es gibt sich, ja, es gibt
sicherlich eine Ansible-Extension. Macht er das mit den Admin-Rechten automatisch? Äh,
du musst sagen, welchen Remote-User du verwenden willst. Nachdem wir Route sind, kann ich alles
machen. Macht er jetzt was? Äh. Äh, der, der scheint zu updaten, ok. Also. Ah, ich kack
noob. Das hätt ich noch rausschmeißen müssen. Nochmal. Siehste, das Gute ist, wir machen
das jetzt einmal richtig und können jeden Server wieder so aufbauen. Woher, äh, woher
zieht er sich die Login-Daten? Äh, das ist mein SSH-Key, den hab ich standardmäßig
beim Aufbau mit drauf. Ich wähl, guck, wenn ich hier H-Cloud, H-Cloud, sag ich hier SSH-Key
Test-at-Test. Das ist halt der Titel von meinem SSH-Key. Ok, hat funktioniert. Hat funktioniert,
das heißt, jetzt hab ich hier unter anderem JIT drauf, genau, N-Load drauf. Ja, perfekt.
Ah, es hat funktioniert. So, und ist jetzt SSH-ETC-SSHD-Konfig, hat er das jetzt? ATC-SSH-SSHD-Konfig,
hat er das jetzt richtig gemacht? Äh. Print. Ja, guck, Print-Last-Log, no, hat funktioniert.
Ohne hat er auch den SSH-Demon neu gestartet. So, guck mal mal, ob der auch wirklich alles
geupdatet hat. Tatsächlich, Update. Ja, hat alles funktioniert. Server ist jetzt in top
Zustand, nachdem wir das Skript ausgeführt haben. Ja, super. So, und jetzt ist natürlich
die Frage, ob meine IP nicht wieder kommt, wenn ich mich einen ausloge. Das testen wir
jetzt mal. Nope. IP ist weg. Kommt nicht. Hat funktioniert, sehr nice. Alles klar. Ähm,
dann können wir ja weitermachen. Also, jetzt haben wir erstmal so die Basics eingerichtet
auf dem Server. Und jetzt mal vielleicht so als Beispiel, warum das cool ist und warum
das sinnvoll ist. So, hier haben wir den ersten Server oben. Ich lege jetzt nochmal einen Server
an, der heißt jetzt CAC-WSS-Service 2. Server anlegen kostet nichts. Hetzer Cloud rechnet
übrigens stündlich ab. Das heißt, ähm, ich bezahle für den ganzen Kram hier so gut
wie nix. Eigentlich könnten sie die Server, die ich im Stream zeige, wenigstens bezahlen
eigentlich, oder? So. Äh, nicht default streamen. Guck, CAC-WSS-Service, CAC-WSS-Service 2,
und Kosten tut das Ganze 1 Cent aktuell. Ich glaube, 1 Cent ist das Minimalste, was geht.
Engine X oder Apache, was ist besser? Bei Meilen weit ist mir Engine X lieber, viel
lieber. Okay, guck, wir haben jetzt noch einen zweiten Server aufgebaut. Und jetzt muss ich
nur noch folgendes machen. Äh, muss ich nur noch sagen, Ansible Playbook Server aufbauen,
die IP austauscht. Normalerweise hat man Inventory, dass man das per Name machen kann, ja. Zack,
jetzt führ ich das aus und er geht auf den zweiten Server drauf und richtet ihn exakt
so ein wie den ersten Server. Dafür ist das praktisch. Ich könnte jetzt noch 20 Server
hinstellen, die exakt so konfiguriert werden, wie ich das will. Also das ist, gerade bei
sowas ist das enorm praktisch. Ja, warum er Engine X, Engine X ausspricht, verstehe ich
auch nicht. Die Schreibweise verwirrt mich immer. Ich kann den auch nie richtig schreiben.
Echt, richtig 3-Head. Kannst du das nicht als Docker-Container machen? Doch, das machen
wir in Stream Nummer 3. Wir machen 3 Streams dazu. Heute machen wir die Web-Anwendung,
richten den Server mal oldschool mit Ansible, aber es ist oldschool. Ansible ist ja nicht
oldschool, weil oldschool Server ohne Container ein, deployen die App im nächsten Stream,
gucken wir, dass wir das Bild serverseitig rotieren und so eine kleine API noch einbauen.
Dann machen wir GitHub Actions, Deployment und Continuous Integration, weil wir sind
Agile 5-Head-Hackermans. Dann verwenden wir mal den Head-Store-Load-Balancer mit Zertifikaten
und extra Domain. Und im dritten Stream machen wir dann Containerstellen draus. Auf YouTube
gibt es die Streams nicht, ne. Aber wir haben einen Archiv, da ist das alles. So, guckt,
2. Server angelegt und ist direkt konfiguriert, so wie man haben wollen. Also wunderbar. Wann
ist der 2. Stream? 2. Schnitt. Vielleicht nächstes Wochenende oder nächste Woche. Es
dauert auf jeden Fall nicht lang. So. Und daran sieht man jetzt den Vorteil schon, ich
könnte jetzt 20 solcher Server anlegen und total easy konfigurieren lassen. Natürlich
ist unsere Konfig noch nicht fertig, da muss noch ein bisschen was dabei. So, ich lösche
mal CACWSS-Service wieder. Delete. Gut. Also, lass mal überlegen, was brauchen wir denn
noch? Wichtig, wir nehmen eine Heads nach Firewall davor. Da müssen wir uns ja nicht
selbst drum kümmern. Also, das ist übrigens ein neues Feature bei denen, das gibt es
noch nicht so lang. Seit 2 Monaten oder so. Bisher musste man sich komplett selbst drum
kümmern. Also, man musste dann beispielsweise die UFW unter Ubuntu einschalten. Jetzt hat
Hexner, ich glaube sogar, kostenlos. Ich bin mir gar nicht sicher, was der Kram kostet.
Guck mal, der ganze Kram ist noch da. Ich weiß gar nicht, was das kostet. Kann man
jetzt Firewalls anlegen? Das heißt, wir können da auch wirklich nur Sachen freigeben, die
man braucht. So, wir brauchen Port 22, wir brauchen Ping. Ping ist okay, können wir behalten.
Wir brauchen Port 80 und wir brauchen später noch Port 443. Und das Ganze soll auf den
Server gehen. CACW as a service. Apply to one server, Firewall, CACW, Firewall. Create.
Und jetzt sind wir safe. SSH. Ich hoffe, es funktioniert noch. Kunst, sehr gut. Was natürlich
sehr praktisch ist, da muss man sich selbst nicht mehr drum kümmern. Es ist nur Ping
allowed, Port 22 für H80, für HTTP und 443 für HTTPS. Ja, das kommt auf die Anwendung
an. Oh, sind wir dann hier gelandet. Das kommt auf die Anwendung an. Da gibt es nicht so
viele Tricks. Du musst den Server halt rebooten, vor allem wenn es ein Kernel-Update ist.
Ich weiß, es gibt schon die mehr oder weniger trickreiche Geschichten, dass du manche Updates
machen kannst, Rolling, auch Kernel-technisch, aber in der Regel kann man sagen, Kernel-Update
gleich Reboot. Also, du musst gucken, wie das deine Anwendung verkraftet. Was hast du
denn dahinter stehen? Also, wenn du da mehr oder weniger Stateless-Webgeschichten dahinter
stehen hast, dann ist es ganz einfach. Dann machst du einen Loadbalancer davor. Die FW
bei Hetzler ist aber eine Stateless-Firewall, soweit ich weiß. Oder wurde das geändert?
Gibt es wirklich noch Stateless-Firewalls? Kann ich mir gar nicht vorstellen. Es kann
keine Stateless-Firewall sein, dann würde Ping überhaupt nicht funktionieren, weil
das Antwortpaket nicht weiß, wozu es gehört. Das muss Stateful sein. Würde mich sehr wundern.
Müsst ihr mal gucken, ich kann es dir so nicht sagen. So, aber wo sind wir hier? Genau,
Mr. Mr. Ja, haben wir. Ja, also wenn das Web... also, machen wir mal ganz schnell Überblick.
Wie patcht man am besten einen Linux-Cluster? Wobei Cluster, Cluster ist in dem Fall das
falsche Wort. Geklustert ist es ja nur, wenn du verschiedene Notes hast, die irgendwie
miteinander reden. Hier geht es ja darum, du willst Ausfall, möglichst Ausfallzeiten
optimiert deine Systeme neu starten. Und das einfachste ist, du stellst einen Loadbalancer
davor oder einen Loadbalancer-Cluster davor. Also im Angenommen, du hast 10 Web-Server,
du hast alles relativ stateless, ohne Sticky Sessions oder sonst was, einen Loadbalancer
davor und dann kannst du die Server neu starten, wie du lustig bist, ist egal. Da hast du
nur minimale Sachen, die ins Leere gehen. Das funktioniert. Bei Sticky Sessions und
irgendwelchen Stateful-Sachen wird es ein bisschen komplizierter. Dann musst du quasi
erstmal auf Server-Ebene, auf Logikebene gucken, dass dieser Server keine neuen Verbindungen
mehr annimmt und dass die Clients sich zu den neuen Servern verbinden und erst wenn
alles auf den neuen Servern ist, kannst du es dann ausschalten. Kommt aber ganz hart
auf die Anwendung an. Ja gut, das beste ist 5 Minuten warten. 5 Minuten ist glaube ich
Standard-Timeout. Wie man dann einen Loadbalancer patcht? Gar nicht. Es sei denn, du hast einen
Loadbalancer-Cluster. Dann musst du es genau machen, wie ich gesagt habe. Du schwenkst
den Loadbalancer, wartest bis alle Sessions drüben sind. Es gibt ja mittlerweile Loadbalancer,
die können sogar TCP-Sessions quasi sharen. Du wartest bis alle Sessions drüber sind
oder du hast halt irgendwie BigBrain-Loadbalancer, die geschaerte TCP-Sessions haben. PFSense
kann das zum Beispiel. Dann startest du den inaktiven, schwenkst und startest. Kannst
auch Netscaler nehmen, was auch immer. Es gibt noch viel mehr. Wie gesagt, der Aproxy
kannst du nehmen. Da gibt es total viele Sachen, das kann man so pauschal nicht sagen. Aproxy
ist aber tatsächlich ganz nice. Aproxy hat auch ein eingebautes Webinterface, wo du gucken
kannst, wie viele Verbindungen noch drauf sind. Und wenn du super modern bist, der Container-Way,
da gibt es noch ganz andere Sachen. Aber machen wir mal weiter. Wir haben unsere Fireball angelegt,
passt. Das kann nicht komplett stateless sein, Leute. Das muss stateful sein. Ich kann euch
auch sagen, warum. Warte mal. Ich kann einen Ping machen. Und einen Ping, also entweder
bin ich jetzt richtig eui und ich erzähle euch Scheiße oder die Dinger sind stateful.
Damit ein Ping funktioniert, muss es doch eigentlich eine stateful Fireball sein, weil
die Antwort von dem Server muss die Fireball wissen, wo die Anfrage her kam. Und was geht
einem in eine stateful Fireball? Wenn du ausgehend verkehrlich blockst, das stimmt, da hast du
recht. Da hast du recht. Ne, stimmt, muss nicht, muss nicht. Du erlaubst ja eh, du erlaubst
ja eh outgoing zu überall hin. Dann ist egal. Ne, dann kann es, dann muss es das nicht sein.
Normalerweise muss die Fireball wissen, woher der Ping kommt, wenn du nicht von überall
her erlaubst. Also stell dir mal vor, du erlaubst, dass dein Server nirgends wohin zugreifen
kann. Und also dein Server darf ausgehend nirgends wohin Pakete verschicken. Und du möchtest
dem jetzt sagen, wenn ein Ping reingeht, dass es erlaubt, die Antwort auch erlauben und das
geht nur stateful. In dem Fall ist aber egal, wenn du nichts geblockt hast als Upsend, ja
dann müsste es auch so gehen. Müsste ich mir noch mal ein bisschen Gedanken drüber
machen. Also ich wüsste nicht, wie das stateless funktionieren sollte. Das ist ja gerade der
Witz von stateful, dass sowas funktioniert. Also irgendwo muss ja markiert werden, hey,
was ist die Antwort auf das eingehende Paket? Doch, doch, doch. Aber der Fall ist ja in dem
Fall so, du hast in der Fireball geblockt, dass dein Server nach außen überhaupt kommunizieren
darf. Theoretischer Fall. Aber du willst, dass er pingbar ist. Das heißt, dann stellst
du ein, und das geht halt nur stateful, dann stellst du ein, eingehend ICMP erlaubt, ausgehend
nur related Verbindungen, die quasi zu einer vorher schon eingehenden gehören. Das ist
ja der Sinn von stateful Fireballs. Und ich wüsste nicht, wie das funktionieren sollte
stateless. Keine Ahnung. Ich muss euch ehrlich sagen, ich hab mir da jetzt nicht genug Gedanken
drüber gemacht, ob das jetzt gehen sollte oder nicht. Aber ist auf jeden Fall spannende
Sache. Okay, weiter im Text, wir sind voll hinten dran. Weiter geht's. Also wir haben
jetzt unseren Server automatisch aufgebaut. Als nächstes müssen wir irgendwie gucken,
wie wir unsere Web-Anwendung drauf kommen. Das related ist aber ausschlaggebend. Genau,
genau. Zumindest bei IP-Tables heißt das so. Fragt mich nicht, wie das bei anderen Sachen
heißt. Okay, also wir haben den Server eingerichtet mit Ansible. Jetzt müssen wir mal gucken,
was brauchen wir sonst noch? UFW können wir uns schenken, Pakete haben wir installiert,
IP haben wir ausgeschaltet, SSH haben wir neu gestartet. Ja, jetzt müssen wir irgendwie
gucken, wie wir das noch vm, ja. Jetzt müssen wir gucken, wie wir unsere Anwendung drauf
deployen. Das heißt, ich würde mal sagen, wir legen noch einen neuen User an. Wir legen
den User für die Anwendung an. Also, wie legt man Ansible User an? Ansible User. Create.
Übrigens, wenn ihr euch auch mal in der Cloud mit einer Linux VM austoben wollt, dann könnt
ihr jetzt bei meinem Partner Hetzner Cloud vorbeigucken und euch 20 Euro Startgut haben
mit meinem Gutschein sichern. Ausrufezeichen Hetzner im Chat. Der Sellout war jetzt okay,
oder? Vorher habe ich ein bisschen verkackt, aber der war jetzt okay, finde ich. Ne, aber
ernsthaft, ich verwende das selbst schon. Ich glaube jetzt die letzten drei Jahre oder
so. Ist für mich, gerade weil es ein deutscher Hosting-Anbieter ist, ist naheliegend, ja.
Du hast zig andere, klar, aber preisleistungsmäßig und dass du zwei Rechenzentren in Deutschland
hast, macht für mich Hetzner echt sympathisch und brauchbar. Auch die Speicherpreise sind
nicht ultra hoch, weil man ein bisschen mehr braucht. Und wie gesagt, 20 Euro Startgut haben
mit meinem Code für Neukunden, da könnt ihr schon ein paar Monate hier so einen kleinen
Server betreiben und euch da ein bisschen austoben. Hetzner ist echt nice, also da kann
man sich nicht beschweren. Ich hätte diese ganze Sponsoring-Geschichte gar nicht angenommen,
wenn ich den Kram nicht selbst verwenden würde. Ja, das wäre jetzt so wie wenn ich Raid Shadow
Legends mache, mache ich auch nicht. Also ich kann es euch nur empfehlen mal anzugucken.
Okay, jetzt aber weiter im Text. Wie kriegen wir unseren Service auf den, wie kriegen wir
CAC W as a Service auf den Server CAC W as a Service? Gut, wir machen das jetzt mal ganz
einfach. Ich kopiere es von Hand dahin und danach gucken wir wie wir das Ganze mit Unit
File und Ansible noch deployed kriegen. Ne, ein User wollten wir noch anlegen, ein User
wollten wir vorher noch anlegen. Alter, Vmware, du nervst mich hier gerade. Hab ich das, ach,
ich hab das sticky eingestellt, ich wollte gerade sagen, warum ist das immer wieder da.
Ansible Create User, Manage User Accounts. Ich brauche einen neuen User. Und zwar nennen
wir den App. Bester Name, da weiß man sofort was Sache ist. User, das da, perfekt. Die
einfachste User Variante. Ohne Passwort, ohne Login, ohne alles. Okay. Ja. Create App User.
Name, Pushkar15, Commodore Style hier. Ne, die heißt einfach nur App, da weiß man sofort
was Sache ist. App, Passwort, expired, nie. Gibt kein Passwort. Okay, dann führen wir
das mal aus. Wenn man das jetzt übrigens ordentlich macht, müsste man hier noch einstellen so
nach dem Motto, okay, das machen wir nur wenn wir es noch nicht gemacht haben, das machen
wir auch nur wenn es nicht da ist. Das kann man abhängig voneinander machen, aber, okay,
das Ansible. Das sollte jetzt eh alles ein bisschen schneller gehen. Oh, das ist der
falsche Server, null. Das ist der richtige. Das ist der richtige Server, stimmt ja, stimmt
ja gar nicht. He doesn't know, he lacks critical information, ja. Okay, Restart SSR, Create
User. Gut, wir haben den User angelegt, das heißt Home App haben wir jetzt, sehr schön.
Kann ich auch Sudo App machen? Was ist denn das? Oldschool Shell. Okay, wir haben dann
extra User für die App. Okay, dann kopiere ich jetzt mal die App drauf auf den Server,
dann könnt ihr auch mal ausprobieren. Da könnt ihr auch alle eine Runde Keg WS Service aufrufen
gleich. Poste euch dann die IP in den Chat, wenn es soweit ist. So, ich ersünke das jetzt
einfach mal drauf und ich SCP das drauf, ist jetzt erstmal egal. Danach machen wir
das mit Ansible, schön. Also Keg WS Service, also.NET, Publish, ach du Scheiße, das war
echt aus dem Kopf, Publish, haben wir das nicht irgendwo in der History? Publish, Publish,
.NET, Publish, Release, Linux, Self, ja doch, Self-Contains, das bin ich nicht verkehrt.
History ist die beste Dokumentation aller Zeiten. Äh, Aviator, doch, wir hatten hier schon
ein paar mal DDoS Action, da konnte Hetzner aber nur am Rande was dafür, da haben uns
die Leute irgendwelche polnischen Botnetze gemietet und fanden das lustig, dass ich dann
für 10 Minuten im Stream nichts machen konnte, aber wenn ihnen das Geld wert ist, meinetwegen,
sollen sie machen. Das ist kein Witz, hatten wir wirklich. Sachen gibt's, ja. Okay, SCP,
die richtige. SCP, komm, Bam, als Root, wir starten das jetzt als Root, easy, einfach
um zu gucken, ob es funktioniert. Na, mit den 300 Viewern kommt Hetzner klar, das ist
kein Problem, aber mit den 50 Milliarden Botnet-Anfragen aus Polen kam es nicht klar.
By the way, das ist übrigens so, wie man es nicht macht, per SCP eine Anwendung rüber
kopieren, aber zum Testen ist es vollkommen in Ordnung. Später würde ich es, wenn überhaupt
per R-Sync machen und der richtige Weg, den machen wir dann im zweiten Stream über GitHub
Actions deployen lassen und gleich noch ein paar Tests und gucken, ob das alles funktioniert.
So, auf, gib alles. Oh nee, die ganzen Bilder. Drei Stunden später. Aber zum Glück sind
die Bilder nur, haben wir die resized und die sind nicht so groß. Okay. Gleich haben
wir's. SCP dann später in der Pipeline. Ich werde wahrscheinlich mal was über R-Sync.
Okay. Beides, beides. Beides, das haben auch schon Leute in Tetzner Server selbst gedetost.
Okay, also das haben wir jetzt rüber kopiert. CACW. Wo ist es? Nee, Publish. Publish, jetzt
könnt ihr es gleich mal aufrufen. Hier, IP, Home Server. CACW as a Service. Bam, läuft.
Ah nee, Moment, Local Host. Ich mach doch da jetzt kein Reverse Proxy vor. Urls, gleich.
HTTP, Doppelpunkt, Doppelslash, Sternchenport 5000. So Leute, gebt alles. Moment, ich muss
mal kurz gucken, ob ich meine IP leake, wenn ich auf den Server draufgehe. Ah, Port 5000,
von Port 5000 ist in der Firewall ja gar nicht freigegeben. Okay, machen wir Port 80, machen
wir Port 80. Scheiß drauf. Dann kriegen sie auch die ganzen China-Chinesen gleich mit,
dass wir online sind. Okay. Die IPs wird nicht gelegt. Okay, wunderbar. Also, ich mach mal
wieder an. Ja, wir starten das jetzt. Ihr könnt jetzt hier das da ausführen. Ja, da
könnt ihr jetzt hin und ihr kriegt alle eine Runde CACW as a Service. Gebt alles hier.
Wer wollte nicht schon immer CACW in as a Service? Gucken, ob ihr irgendwie ein bisschen nennenswert
Last verursachen könnt. Boah, boah. Geht, aber so wirklich viel bei Enload. Mal schauen.
Ist ja nix. Outgoing. Ah, Busybuzz ist da. Busybuzz ist da. Sag mal, ist das jetzt von
einem Date-Job-Arbeitszeit? Nee, schön wär's. Schön wär's, wenn ich das doppelt bezahlt
kriegen will. Das wär doch mal geil. Leute, wäre es nicht cool, ich könnte mich bei der
Arbeit streamen. Da würde ich Geld von der Arbeit verdienen, Stream-Money von den Subs,
plus das wär doch mal Massive-Brained, Alter. Wenn das gehen würde. Elevenhead. Aber das
geht nicht. Und Massive League, das stimmt. Ok, Leute, funktioniert's bei euch, wenn ihr
da hingeht. Kriegt ihr alle schön CACW as a Service. Ja, nice. Bester Microservice überhaupt,
oder? Ich würd sagen Startup, Startup-verdächtig. Absolut Startup-verdächtig. Fallt an der Börse,
genau. Ok, zack. Ok, wir haben jetzt getestet, dass es prinzipiell funktioniert. Jetzt machen
wir das ordentlich. Gehen wir hier mal raus. Gehen wir mal in Ansible rein. Wir wollen
das Ganze der Reihe nach machen. Ok, Leute, das hab ich noch nie gemacht. Ich hab noch
nie mit Ansible was ordentlich deploit. Moin, Eyelady, Pina. Ich hab noch nie mit Ansible
ordentlich was deploit. Ich würd sagen, wir brauchen einen neuen Job für Build. Name.
Build. Wir machen sowas. Wir machen einen Build-Shop. Wir machen einen Build-Shop und
wir machen danach da noch einen Deploy-Job. Wir machen Setup. Warte mal, wir machen Setup.
Das sollte man in unterschiedlichen Dateien machen wahrscheinlich. Bei Ansible kann man
das glaube ich auch irgendwie taggen. Nicht mehr erreichbar. Ja, ich hab ausgeschaltet.
Was, die Bilder sind nicht transparent? Doch, doch, die müssten transparent sein. Der Browser
zeigt das nur nicht richtig an. Aber die müssten transparent sein. Ok, Build und dann brauchen
wir noch einen weiteren Job. Name. Deploy. In Discord ist transparent. Ja, perfekt.
Zumindest der nächste Tag. Ich weiß es noch nicht genau. Aber ich streame zwischendurch
auf jeden Fall noch ein paar Mal und dann können wir das ausprobieren. Kann ich euch
das zeigen? Wann ich das mache, muss ich mir ausdenken. Also, so, Build. Wie machen wir
das Build? Lass mal überlegen. Wie mach ich denn das Build von Hand? Ich mach.NET Publish.
Self-Contained. Also, so, jetzt machen wir... Also, wie sieht mein Build-Shop aus? Wie kann
man Ansible Local Command machen? Das da, zeig mal her. Ansible Local Action. Hab ich
nicht verstanden. Wie geht das jetzt? Local Action. Ah, Local Action Build. Da kann man
auch bestimmt auch Shell nehmen. Ok, also, Build. Wir kommentieren diesen ganzen Schmodder
mal aus, weil das haben wir jetzt ja schon gemacht. Später brauchen wir das, wenn wir
einen neuen Server installieren. Aber ok, Build. Da muss ich jetzt bestimmt auch wieder
diesen ganzen Mist hier dabei kopieren. Da merke ich immer wieder, dass ich mit Ansible
zu wenig mache. Aber er soll es ja lokal ausführen. Ok, Local Action. Ok, Build App. So, das ist
nicht Command. Shell. Schau mal nach Raw Command. Aber so müsste es auch funktionieren, oder?
Shell. Und jetzt sage ich einfach, CD, eins drauf, in den Ordner, keqws-service, weil
das heißt ja hier so. Guckt. Hier, eins, eins hoch. Keqws-service. Und da mache ich
jetzt mal ein.NET-Build drinne. Also, Publish. Gucke ob das funktioniert. Da bin ja mal gespannt.
So. Und von der Idee her müsste das mal ein Build-Command sein. Das machen wir dann wie
gesagt im nächsten Stream über GitHub Actions. Aber ich habe das noch nie über Ansible gemacht.
Mal gucken wie das funktioniert. Ich führ das mal aus. Build. Remote User bei Lokalen
Actions, macht das Sinn? Nee. Ehrlich gesagt nicht, hast du recht. Ich weiß nicht, aber
vielleicht braucht man das ja. Ich glaube nämlich man braucht das. Nö, braucht man
nicht. Ok. Dann können wir das alles weglassen. What? Wie jetzt? Aha. Kann ich ja auch Hosts
weglassen vielleicht? Nee. Ok. Ok, jetzt haben wir ein Bild angestoßen. Lokal. Können
wir auch mal ausbreiten ob das funktioniert. Neues Tab auf. Wo sind wir hier? Wir sind
in repos.keqws-service.rm-bin. Wir löschen mal den Output-Folder und lassen noch mal
das Bild laufen und gucken ob das jetzt funktioniert. Bild. Bin. Jawoll. Funktioniert. Ok. Lokales
Bild funktioniert. Jetzt ist unsere Anwendung gebaut. Mehr brauchen wir da wahrscheinlich
an der Stelle gar nicht. Jetzt können wir es deployen. Deploy. Host. All. Wie gesagt
ich weiß dass das nicht die schöne Ansible Art ist das so alles in einer Datei zu machen.
So. Tasks. So wie kriegen wir den Kram jetzt rüber auf den Server? Nicht per SCP auf jeden
Fall. Das wäre zu 3-Head das mit SCP rüber zu kopieren. Am besten wäre so eine Art R-Sync
oder sowas. Id-Clone kann ich nicht machen weil ich es nicht. Achso doch ich habe es
ja im Repo. Aber ich habe es ja nicht im Repo mit. Ne ne das bringt nichts. Ich bilde das
ja lokal. Ich habe ja die Binaries nicht drin. Ich müsste ja dann quasi.NET auf dem Server
noch installieren und dort den Bild machen. Was kontraproduktiv ist weil in Zukunft mache
ich das nächste Mal ja über GitHub Actions wo das gebaut wird. Also ich brauche lokal
kein.NET auf dem Server weil ich quasi eine Self-Contained Application bauen lasse die
auch ohne.NET läuft. Also. Tasks. Deploy. Gut wie macht man einen R-Sync mit Ansible?
Ansible R-Sync. Bam. Possix Synchronize. Das klingt schon mal 24-Head. Hat auch 25.000
Optionen. Was? Source. Dest. Recursive. No. Ok. Copy Paste das jetzt mal. Also Tasks.
Copy. App. Besser Name. Es soll von. Von. Diesem Verzeichnis. Soll er kopieren. Wo
liegt denn das. Moment. Wo liegt denn das. Bin. Mach ich mal nochmal ein Publish. Zeig
den mir doch an wo das wo die Anwendung drin liegt. Hier. Das da. Das will ich kopieren.
Publish. CacW as a Service. So. Offlich ist es jetzt der richtige Pfad. Eins hoch. CacW
as a Service bin Release.NET 5 Publish. Das will ich kopieren. So und zwar Destination
auf dem Server. Soll das jetzt. Wir haben extra. Guck mal wir haben extra einen eigenen User
dafür angelegt. Home App. Normalerweise würde ich das kopieren. Irgendwie unter WWW. WWW.
War WWW oder sowas. Ok. Es gibt auch einen Rapper. Das habe ich doch hier schon. Bam.
Hab ich schon entdeckt. MedV. So Destination. Das ganze nach Home App. CacW as a Service.
Recursive. Yes. Das ist ja ein Ordner. Vermute ich mal. Recursive. Was macht Archive. Symbol
brauchen wir nicht. Delete. Delete Remote. Wenn es was nicht gibt. Ja das ist tatsächlich
nicht verkehrt. Delete. Yes. Er ist immer nur Remote. Also da muss man keine Angst
haben das Lokal was wegfliegt. Ich würde fast sagen dass die Chance besteht dass das
so funktioniert. Schauen wir mal. Mal gucken ob der jetzt deploit. Task Build. Task Deploy
Copy App. Ok. App. Da sind wir schon mal. CacW as a Service. Ok der kopiert noch. Der
kopiert noch. Steht das so im Backlog. Klar ich habe extra ein Kanban Board angelegt davor.
Guck mal hat funktioniert. Er hat die App deploit. Und sogar. Guck mal. Oh das ist nice. Guck
mal der hat die gleich dem richtigen User gegeben. Das schiebe ich jetzt einmal mal
da drauf. Dass sie das hier einprogrammiert haben. Weil ich bin Root. Und er sync das
rüber als Root. Das heißt die haben auf jeden Fall dort irgendwas eingebaut. Das wenn
ich den Heimatverzeichnis rein sync das ist das standardmäßig als der User macht. Vermute
ich jetzt einfach mal. Das ist ziemlich. Ansible braucht nur Python auf dem Remote System.
Das ist das ist das ist ziemlich ziemlich feifert. So. Das war es jetzt. Das ist wirklich
einfach. Guck mal wenn ich jetzt deployen will. Lass ich einfach eine neue Version
bauen. Und lass es auf den Server schieben. Und das kopieren geht auch schnell. Weil es
R-Sync ist. R-Sync macht ja nur den diff. Mal kurz gucken ob das. Mal kurz gucken ob
das. Mit dem Delete auch funktioniert. Er sollte jetzt eigentlich 1 2 3 4 die Datei
löschen. Weil ich sage ja hier sync die Quelle mit dem Ziel und lösche beim Ziel alle Dateien
die nicht in der Quelle vorhanden sind. Mal schauen. Ja funktioniert. Pog easy. Wie Anwendung
durchgehend laufen lassen. Ja jetzt kommt jetzt kommt der Feifert Teil. Aktuell müssten
wir die Anwendung ja noch von Hand immer starten. Also ich müsste jetzt immer sowas machen.
Wir machen jetzt ein Systemd Service draus. Da muss ich aber nachgucken. Asp net core
Systemd. Guck mal hatten wir sogar schon mal offen. Ich brauche ich brauche ein Beispiel
unit unit file. Sowas hier. Ja genau. Ok. Und das kopieren wir da natürlich auch per
Ansible drauf. Also ihr seht schon der Vorteil davon ist wenn ich jetzt neue Services oder
neue App Server brauche dazu. Stellt euch mal vor. Keg WSService wird das nächste Multimillionen
Startup. Und ich hab von 5 Usern heute zu 5000 Usern morgen. 50.000 User in einer Woche
und 500.000 User in einem Monat. Da muss ich ja skalieren. Horizontal vertikal diagonal
da muss skaliert werden. Vorher gehe ich mit KLS noch auf den Mount Everest da sich Bescheid
weiß wie man ordentlich skaliert. So und dafür ist es natürlich wunderbar. Da kann ich easy
jetzt ohne Containerstellen oder sonst wie. Da kommen wir im dritten Stream zu. Einfach
ganz viele Server hochziehen und einen Loadbalancer davor stellen. Das ist eigentlich eine richtig
coole Sache. Ok wir müssen unit file machen. Jetzt wird es kompliziert. Moment was habe
ich denn da gemacht. Jetzt jetzt jetzt wird es Sixhead. Name. Wie machen wir das jetzt
mit unit file. Name. Create. Keg WSService. Unit file. Boah das weiß ich nicht. Ansible.
Inline content file. Line file block file. Is it possible to include file content in
the playbook. Genau. Copy. Ja genau. Genau sowas will ich machen. Also. Das heißt ich
sag jetzt. Copy. Richtig. Content. Wir machen erstmal die destination. Dest. Wo müssen
unit files hin. Etc. System D glaube. Where put custom unit files. Ich sag euch leute wie
im letzten. Googeln ist der wichtigste Skill überhaupt. Ihr müsst wissen wie ihr danach
sucht. I have a custom. Unit file. User lib system D. Was. Nein. Es muss etc sein. Hier.
Place to put system unit files. Etc. System D. System. Alles klar. Also. Etc. System D.
System. Bäm. Da sind sie alle. Wobei da wird das eigentlich nur verlinkt. Scheiß drauf
damals machen wir das hin. Was wird das nächste Video sein. Wahrscheinlich Battlefield. Etc
System D. System. Und jetzt muss ich das Ding. Irgendwie. Irgendwie benennen. Irgendwie
Punkt Service oder so. Ok. Punkt Service. Also. Das heißt das Ding heißt jetzt. Pack
W. Es. Service. Punkt Service. Und jetzt Content. So. Multiline Content. Ich hab vergessen
was es war. Tilde. Nee. Pipe. Content. Pipe. Und jetzt einfach so. Ob das funktioniert
da hab ich da so meine Zweifel. Das funktioniert doch im Leben nicht. Das kommt doch im Leben
so nicht auf dem Server an. Garantiert nicht. Ok. Schauen wir mal. Also. Description. Description
ist natürlich was sonst. Pack W. Es. Service. Working Directory. Es. Home. App. Pack W.
Es. Service. X6 Start. Es. Home. Die Namen wissen. Es. Home. Pack W. Es. Service. Pack
W. Es. Service. Minus. Minus. Wurls. HTTP. Doppelpunkt 80. Der soll ja am Interface
lauschen dass alle drauf zugreifen können. Restart Always ist ok. Restart Sack ist auch
ok. Kill Signal Int. Ach was weiß ich. Syslog wie das im Log auftauchen soll. Pack W.
Es. Service natürlich. User ist App. Environment. Production. Das lass ich einfach mal so stehen.
Ok. Mal gucken ob das funktioniert. Mal gucken. Ich führs mal aus. Wir brauchen noch ein Reload.
Wir brauchen noch ein Reload von Unit Files. Egal. Ich führ jetzt erstmal aus und gucke
ob es funktioniert. Oh. Nein. Sündagsfehler. But why. Muss ich jetzt eins weiter einrücken.
Ah. Yes. Outplayed. Ok. Das hat jetzt. Meint ihr das? Ok. Etc. Systemd. System. Und jetzt
haben wir ein Kek. W. Es. Service. Service. Kek. W. Es. Service. Punkt. Service. Service
File haben wir jetzt. Alles klar. Exquisite. So das ist natürlich die Frage ob das funktioniert.
System. CTL. Status. Kek. W. Es. Service. Oh. Oh. Oh. Der erkennt es. Pass mal auf. Pass
mal auf. Start. Wat. Root. Ach so. Ja natürlich. Das muss man als Root machen. Ist ja logisch.
Ja klar. Ähm. Oh mein sag bloß das funktioniert. Das kann nicht funktionieren Start. Nee. Code.
Oh. Wait a minute. Ich bin verwirrt. Start. Ok ich hab's. Killed. Was habe ich falsch
gemacht? Warum mag er nicht? Disabled. Ok. Läuft er vielleicht noch? Ok. Journal. CTL
minus Xe. Kek. W. Es. Service. Failed. With Result. Signal. Alles klar. Jetzt weiß ich
ja sofort Bescheid. Äh. Warum? Warum? Warum? Warum failed das? Zeig mal her. Ordner stimmt
doch. Kek. W. Es. Service. Home. App. Kek. W. Es. Service. Das ist eine Nähdungsform.
Das ist ein Server bei Hetzner. In der Cloud. So und jetzt mach ich folgendes. Kek. W.
Es. Service. Pools. Ah. Ich mach irgendwas falsch. Mission Denied. Ach das geht auf
Port 80 ja nicht. Ich bin ja kein Root. Äh. Gibt's die Möglichkeit sich zu binden und
dann die Privilege zu droppen irgendwie? Ne wahrscheinlich nicht. Ok da muss ich mir
jetzt was anderes ausdenken. Wir machen jetzt Port 5000 und gucken ob's dann funktioniert.
Status. Start. Ah. Start. Oh. Ich muss reloaden sagt er. Äh. Jaja. Start. Start. Start.
Ah. Jetzt läuft's. Jetzt läuft's. Netstat. 5000. Ja. Jetzt funktioniert's. Da muss ich
in die Firewall. Da muss ich in die Firewall und mal Port 5000 freigeben. Firewall TCP
Port 5000. Und jetzt können wir auch ausprobieren ob's funktioniert. Kek. W. Es. Service. Bäm.
5000. Zack. Das ist sogar ist mir ehrlich gesagt so lieber. Ich will's später auf Localhost
laufen lassen. Mit einem Reverse Proxy für Zertifikate davor und sowas. Ok funktioniert.
Nice. Äh. Ambient Capabilities Cap Net Bin Service. Oh hier kommt der. Der Big Brain.
Äh. Das ist äh. Das ist zum D. Ah. Ja nice. Nice. Das wird's wahrscheinlich sein. Weil
dann macht er das als Root mit dem Binden und danach droppt er Privileges. Mal schauen
ob das so funktioniert jetzt. Reload. Ach so. Ah. Dann muss ich das nochmal deployen.
Reload. Gucken ob das jetzt funktioniert. Wenn man jetzt anfängt die Pläume zu nehmen
einfach Docker anschauen. Komm drauf an was du machen willst. Da gibt's. Es gibt erstmal
nix prinzipiell wo man sagen muss. Ähm. Ist ist immer überlegen. Aber Docker zu kennen
ist ganz. Gut. Heutzutage. Ja. Erstens hilft dir beim entwickeln und zweitens wenn du später
im Server Bereich bisschen Containergekrams. Äh. Gedöns machen willst. Dann sind so die
Docker Basics nicht schlecht. Es muss einem halt klar sein unter der Haube ist das alles
das gleiche. Ja. Egal ob. Also ich rede jetzt vom reinen Containeranteil. Egal ob Spotman,
Kubernetes, Docker. Was auch immer ist. Die verwenden alle die gleichen Sachen für Container
im Kernel. Das User Interface ist anders und natürlich das gesamte Ökosystem und das
das das Skalieren und und die Orchestration Geschichten. Das ist natürlich komplett anders.
Aber die eigentliche Sache die die Kernel Funktionen. Das ist alles das gleiche. Egal
was man verwendet. Das heißt man muss immer sehen sei es Docker, Potman, Kubernetes oder
ein selbst selbst gebasteltes Programm verwenden alle den gleichen Kram unter der Haube. Ok
jetzt machen wir mal System Status Restart. Status. Ob das jetzt funktioniert mit dem
Port. Nee. 5000. Stopp. Reload. Ach ich hab ja da immer noch 5000 drinstehen ich Kacknup.
Meine Güte. Nix. Nix kann man machen lassen. Reload. Und jetzt Start. Restart mein Fing.
Status. Plus. Bam. Nice. Jetzt gehts auf Port 80. Siehste wieder was gelernt. Der System
D Boss war am Start. Können wir wieder wieder Port 5000 aus der Firewall rausschmeißen.
Nice. Siehste wieder was gelernt. Man kann reinschreiben Ambient Capabilities Capnet Bind
Service. Alles klar. Excellent. System D ist ja schon noch so ein bisschen holprig.
Kann man den Port als Variabel in der Ansible-Config angeben? Könntest du machen ja. Könntest
du machen. Letztendlich will ich das später eh nicht so haben sondern es soll Localhost
lauschen mit einem Reverseproxy davor. Aber für jetzt ist das erstmal ok. Ok jetzt fehlen
uns noch ein paar Kleinigkeiten dass das gut funktioniert. Als erstes würde ich sagen
wir müssen noch in unserem. Ja das können wir so lassen. In unserem Deployed Shop sollten
wir noch einbauen Service stoppen und starten. Service. Ja. Also Kack W ist das Service stoppen
und starten. Heißt von der Idee her wird deployen eine neue Version und danach sagen wir stopp.
Kack W ist das Service. Kack W ist das Service stopp. Stoppt muss es sein. Stoppt. Dann sagen
wir noch Enabled. Yes das ist beim Start automatisch hoch fährt. Enabled Yes und Reload wie auch
immer das geht. Ansible Service. Weil es könnte ja sein dass wir ein neues Unit-File
deployet haben. Reload. Reload. Wie Demon. Demon Reload. Ne. Demon Reload. Ne ne nicht
Reload ich will die Unit-Files selber Reload. Reload. Reload. Ah hier. Ah ok jetzt kann ich
es nicht mit dem Service Rapper machen ich muss jetzt direkt sagen System D. Ok verstehe.
Also stopp Kack W ist das Service. Name Kack W ist das Service. State. Stoppt. Stoppt.
Und jetzt muss ich sagen Reload. Demon Reload. Reload. Yes dass der auch die neuen Unit-Files
einliest. So und danach das ganze starten. Start. Start Kack W ist das Service. Einmal
Enable and Start. Weil wir machen hier Enabled gleich Yes. Falls das geht dass das automatisch
neu startet beim Reboot. Gut. So. State. Started. Gut von der Idee her da sollt ihr
jetzt eine neue Version deployen. Stoppen und starten. Das ergibt Sinn. Mal gucken ob
das auch funktioniert. Deploy. Bam. Ich mache erstmal einen Stop. Jetzt hier einen Status.
Ah das ist aus. Enable Kack W ist das Service. Und jetzt Leute das funktioniert. Das ist
ja geil. Guck mal da also viel einfacher kann es jetzt ja nicht mehr gehen. Jetzt kann
ich mal den ganzen Krempel hier wieder einkommentieren. Den wir zwar nur einmalig brauchen aber sei
es drum. Jetzt habe ich mit einem Kommando den kompletten Server auf den aktuellen Stand
gebracht. Ne ich könnte nicht reloaden weil ich will ja explizit hier oder ich weiß nicht
ob das geht. Checkt ihr das mit demen Reload auch wenn ich hier restartet oder so mache.
Müssen wir mal ausprobieren. Bam. Ah sehr nice sehr nice. Ok. Build jetzt baut er lokal
die App. Er stoppt den Service. Ok. Restart. Restart. Restart. Oh mal Restart. Das heißt
wenn ich jetzt Status mache dann ist der Kram auch ab seit 7 Sekunden. Das funktioniert.
Nice. So also 60. 5. Kack W erstes Service ist wieder da Leute. Euer Lieblings Start
Up ist wieder verfügbar. Ja wunderbar. Da haben wir doch richtig richtig was gemacht
jetzt schon cooles. So und das richtig nice daran ist jetzt ich könnte einfach einen
zweiten Server machen und sagen bau mir den Server so auf und dann funktioniert einfach.
Richtig nice oder? Ja ich ich gehe einfach von aus das Unit File wird sich reloaden.
Das ist äußerst nice. Ok. Lass mal kurz überlegen. Müssen wir noch irgendwas machen? Server
erstellen haben wir gemacht. Ansible Kram haben wir auch. Ja gut wir müssen mal testen
ob es überhaupt noch funktioniert. Wir müssen wir müssen mal testen ob es überhaupt noch
funktioniert. Ich mache jetzt mal eine Änderung. Ja ja ich truste alles hier Bam. Alles wird
getrusted. So wir machen jetzt mal eine Änderung und deployen die. Das schauen wir mal ob das
wie gut das funktioniert. Wie kann ich denn jetzt eine Änderung machen die möglichst
offensichtlich ist. Ok. Ich returne nicht File. Ich returne. Ok. Also anstatt einem Bild bekommt
ich jetzt einen Text wo keqw drinne steht. Soweit von der Idee her. So und ich muss nichts
anderes machen außer den Source Code ändern. Lokal ausprobieren habe ich schon gemacht.
Gehe einfach mal von aus das es geht. Und jetzt führe ich meine Ansible Geschichte aus
und er sollte komplett bilden deployen hinschieben restarten. Gucken wir mal. Noch ist es das
alte. Install Packages ja ja bla bla bla. Das könnte man ja auch rausnehmen. Oh. Create
Service File. Ok Bild. Jetzt baut er die neue App. Copy App. Copy App geht schnell
weil er Sync. Commit. Ja Commit mache ich gleich. So und jetzt. Easy Leute. Also einfaches
Update Bild und deploy kannst du nur wirklich nicht machen. Zack und jetzt das ganze wieder
rückgängig. Rückgängig. Mist falsche Version. Neue deployen. Gut diesen Mist könnte man
echt noch raus machen dass man einfach nur sagt One Time wenn der Server neu ist oder
sowas. Kann man. Kennt sich jemand mit Ansible aus könnte ich sagen nur. Nur einmalig oder
sowas gibt sowas. One One Time oder. Weil diesen Mist kann er sich ersparen im Endeffekt
der anderen Seite viel. Lange dauert das ja auch nicht. So und jetzt hat er neu gestartet
schon. Jetzt haben wir wieder Bilder. Ist das nicht nice. Also also also einfacher geht
das mit Bild deploy wirklich jetzt nicht. Außer vielleicht man hat schon einen fertigen
irgendwie Container Cluster wo man einfach direkt geht Push machen kann. Das ist cool.
Ok jetzt machen wir nochmal ein Commit. Dass ihr euch das alle angucken könnt. Im Shit
Hub. Äh ne ich will kein Hetznergedöns hier einbauen weil ich will ja nicht bei jedem
ausführenden neuen Server anlegen. Widerspricht dem Grundgedanken von Ansible was? Warum hast
du die Systemdion nicht als Einzeldatei kopierend wird? Äh dass ich alles in einer Datei stehen
hab. Mach das updaten doch mit Cron. Naja ne will ich nicht. Weil ich will ja wenn ich
den Server neu aufbaue jetzt instant erst mal updaten. Ach so meinst du äh Michi dankeschön
für den Zapp. Du meinst dass man äh was Disabled widerspricht dem mit dem Gedanken. Weiß nicht
sagst du. So also erstmal ein Shit Commit. So und da brauchen wir jetzt erstmal noch
ein Git Ignore File. Git Ignore. Git Ignore. So und da soll rein meine ganzen Binaries
weil die will ich garantiert nicht nicht auf auf Shit Hub packen. So. Object Bin. Noch
irgendwas. Ne. Passt. Oh hab ich das jetzt richtig gemacht. Shit Shit Ignore. So Git
Ignore ist am Start. So passt mehr brauchen wir nicht. Git Status Git Add minus A. So
und jetzt sind wir mal nett. Wir äh wir schmeißen dieses komische Commit hier weg. Git Commit
minus A minus Amendt und sagen nicht LULW sondern äh Ansible ist POC U. Ich hab auch
die ganzen Bilder eingecheckt LUL. Ja gut warum nicht die braucht man ja dafür. Also Server
Name. Hab ich irgendwelche haben ich irgendwelche geheimen Secrets Committed. Lass mich mal
kurz checken. Aber ich glaube nicht ich wüsste nicht wo es da was gibt. So die ganzen Bilder
Index das könnt ich noch löschen. Upsettings Startup Launch Settings. Ne passt passt passt
passt. Ok Git Status. Alles klar. Äh Git. Push. Push. Force Bam. So Shit Hub wird geupdatet.
Git Hub Wubblurts. Ne. Keck W as a Service. Also jeder der schon immer mal sein eigenes
Keck W as a Service laufen lassen wollte kann das jetzt machen. Weil der einzige Source
der Nennenswert irgendwie was drinne steht ist ja die Datei alles andere ist ja Default.
Es ist ja wirklich die einfachste Web Anwendung aller Zeiten die es hier irgendwie gibt. Ja
das ist das ist nice. So und wisst ihr wisst ihr was wirklich richtig richtig cool da dran
ist. Ich zeig ich zeig das jetzt noch mal in Action. Weil ich glaube man hat es immer
noch nicht so genau verstanden was der Vorteil davon jetzt ist gegenüber Hand das von der
Hand zu machen. Stellt euch mal vor ich mache noch einen zweiten Server. Ich leg jetzt noch
einen zweiten Server an hier. Keck W as a Service NG. Leg einen zweiten Server an. Weil
Keck W as a Service ist einfach so krass beliebt dass ich mit einem Server komme ich nicht
hinterher. Der ist zu ausgelassen. Ich brauche ich brauche noch einen zweiten Server. So
zweiten Server angelegt. Ansible ausführen. Ansible ausführen auf den zweiten Server.
Warten bis durch läuft und danach einfach auf den zweiten Server Keck W as a Service aufrufen
der was es noch nicht gibt weil es noch nicht fertig ist. Run once. Oh das ist cool. Manche
Sachen will ich wirklich nur einmal machen. Ach ne ne ne das geht wenn es verschiedene
Hosts sind das ist was anderes. Ist bei der Serveranlage Python direkt drauf? Ja. Firewall
soll ich nicht vergessen. Brauche ich nicht. Weil standardmäßig ist ja keine Firewall
davor. Muss ich nichts anpassen. So neuer Server der geht jetzt da drauf macht Package Updates
und danach bildet er und deployt er die App. Mal gucken jetzt sehen wir auch ob es auf
dem neuen Server reibungslos funktioniert. Auf was für einem Server deploysst du das
mach mal Ausrufezeichen Hetzner im Chat. Ich deploy das bei Hetzner in die Cloud. Wo es
relativ günstig schon virtuelle Linux Kisten gibt. Ganze geht los bei 3 Euro. Ihr könnt
euch übrigens jetzt auch 20 Euro Startguthaben sichern wenn ihr den Link hier im Chat verwendet.
Mit meinem Code kann man bis Ende des Jahres glaube ich einlösen. Und da könnt ihr euch
selbst ein bisschen austoben. So ok Copy App macht er jetzt. Ja die kleinen Server werden
mit IPv4 bald ein ticken teurer weil es immer knapper wird. So Copy App das dauert jetzt
ein bisschen länger weil er irgendwie 100 MB erstmal hoch kopieren muss. So Restarting
KEC WSS Service. Ok jetzt kommt der Moment der Wahrheit. Bäm Leute 2. Server up and
running. Wir mussten nix machen. Wir mussten nix machen. Guck schon haben wir 2 KEC WSS
Services am Start. Ist das nicht nice? Das kann nur noch getoppt werden von irgendeinem
kontainerisierten Deployment mit Loadbalancer davor. Guck mal jetzt haben wir doppelt KEC
WSS Service. Das ist dann quasi KEC QWSS Service. Ne Engine X und Loadbalancer davor
machen wir das nächste Mal. Das machen wir heute nicht mehr. Ich finde das richtig nice.
Ich finde das richtig nice ey. Guck hier neuen Server erstellen. Zack hier die IP reinhauen
bald ist ein neuer Service da. Also viel schneller besser kann das gar nicht mehr funktionieren.
Kokieren neue Server erstellt. Bäm IP rein kopieren. Playbook ausführen. Ok ich war
zu schnell der Server ist noch nicht oben. Also viel einfacher und besser geht das jetzt
nicht mehr. Genau das machen wir also in Stream Nummer 3 machen wir ein bisschen Containerstells.
Ich bin mir nicht sicher ob wir da wirklich irgendwelchen Kubernetes Kram machen. Da bin
ich jetzt nämlich auch nicht der absolute Pro drinnen. Ich meine ich kann Sachen da
deployen stoppen starten und was auch immer. Aber so der Wahnsinnskenner bin ich da jetzt
auch nicht. So eine Wissenschaft für sich. So install Packages. Hey swarm ist deprecated.
Auch wenn der Hersteller sagt es ist nicht deprecated. So gleich ist es durch. Ich meine
guck mal wir haben jetzt innerhalb von 2 Minuten 2 Server hingestellt. Mit lauffähiger Anwendung
drauf. Also so kann man das schon ordentlich skalieren auch ohne Containerkram. So guckt
Bäm Port 80 zack schon haben wir 3 Server. Keqv SSService. Und das tolle an Keqv SSService
deswegen solltet ihr euch jetzt schon mal ein paar Aktienpakete sichern ist dass es
komplett stateless voneinander horizontal vertikal und diagonal skaliert. Habt ihr gesehen
wir haben den Keqv getroffen der der richtig richtig rotiert war. Ist es nicht nice. Doch
das gefällt mir richtig gut. So bei der Gelegenheit jetzt noch mal kurz Server löschen. Das ist
übrigens auch das coole ich kann die Server jetzt löschen dann kosten sie mich nichts
mehr und wenn ich sie wieder brauche innerhalb von 2 Minuten neu aufbauen. Moment Leute eins
ich probiere ich probiere jetzt mal was aus ich will das noch mal ganz ich will das noch
mal schnell verskripten das dauert nur 2 3 Minuten glaubt das natürlich ich lösche
den ganzen Krempel jetzt mal wieder. Keqv SSService ich mach jetzt ich mach jetzt. Äh äh die
Kuppanete slide ne stimmt ja nicht. Das hatte mit Containern nichts zu tun aber ich könnte
doch guckt mal ich leg den neuen Server an dann krieg ich am Ende da raus IPv4. So Moment
Moment Moment Moment Moment jetzt jetzt 5 hat Maut richtiger 5 hat Maut das das muss
ich jetzt ausbrennen. Wir nehmen einfach die letzte Zeile wie ging letzte Zeile tail minus
n 1 das muss ich jetzt mal ausprobieren. Echo minus e 1 2 tail minus n 1 jawoll tail
minus n 1 hat an an doppel an an punkt fällt 2 ok das muss ich jetzt mal ausprobieren ob
das funktioniert jetzt jetzt kommt massive massive 5 hat mal gucken ob das funktioniert
ok ok wobei ich machs glaube ich besser am Leerzeichen ach so ah ja ja ja ich lösche
es ist ja gut ich lösche es ja schon wieder ich lösche es. So das muss ich jetzt das
muss ich jetzt ausprobieren dann scaleen wir das jetzt auf 10 Stück hoch einfach einfach
weil es geht ok wunderbar so jetzt muss ich noch den Namen ändern wieder löschen zack
ok also 4 in 0 bis 10 ich glaube so viel darf ich gar nicht anlegen ich bin mir gar nicht
sicher wie viel ich in einem Projekt anlegen darf machen wir mal machen wir mal 4 machen
wir mal 4 ne ich bekomme keine mails weil ich keys verwende so keck w ss service hier
done so jetzt lege ich server an und jetzt will ich danach das bei ansible über ansible
ausführen also sagen wir jetzt du habe ich vergessen ansible hier ansible playbook ansible
playbook warte mal warte mal ansible playbook hier hier kommt die ip rein also das das da
hier rein so 6 hat time leute ob das jetzt funktioniert so wenn das jetzt stimmt was
ich da gemacht habe dann sleep ja dann sleep sollten wir machen weil der server sonst nicht
hochgefahren ist das stimmt wo mache ich den sleep rein ah 4 in das mit dem sleep funktioniert
jetzt nicht richtig ok moment moment kommando zurück wir machen das anders wir schreiben
das in eine variable rein ip gleich so machen wir das ip gleich sleep 1 oder sleep 5 ip ausgeben
und jetzt kommt der ansible stels ob das jetzt funktioniert leute was ich da zusammen gewürstet
habe das habe ich das habe ich früher täglich gemacht so so bash geschichten hier dollar
ip so ja ergibt das sinn was ich da programmiert habe also 0 bis 3 so ip hetzer cloud anlegen
service benennen mit dem aktuellen schleifendurchlauf du hast das i vergesst ah vor i in tail cut
echo ip sleep 5 und anders playbook laufen also ok von der idee her sollten wir jetzt
gleich vier kqs service am start haben
ah du schauen wir mal das könnte man übrigens parallel machen lassen
der desktop ist i3 ja also halt ohne ohne desktop oh ne ich glaube ich glaube mein sleep reicht
noch nicht mein sleep ist zu kurz mein sleep ist zu kurz mist abbruch abbruch kommando
zurück die kisten sind noch nicht aufgebaut sleep ist zu kurz wir machen das parallel
pass mal auf wir können das noch wir können das aus 6 hat können wir können wir 7 hats
skript machen alter ist gut ich will löschen wir machen das jetzt parallel ok sleep sleep
10 das reicht jetzt aber 15 wie kriege ich das jetzt im hintergrund wie oh fuck das weiß
ich kann ich einfach an der stelle und und dran machen bringt das was ne das ist ansible
an der stelle äh wie kriege ich denn das jetzt irgendwie mit mit mit mit klammern das
muss ich jetzt mal testen vor i in testweise 0 bis 3 3 3 ne das ne einfach und geht nicht
echo 1 dann ok ich will sleep ich will sagen sleep 2 echo 1 so 1 2 bam so und jetzt mal
gucken ob ich das ganze irgendwie hinkriege dass das dass das im hintergrund ah klammern
muss man es klammern muss man es dann funktioniert genau klammern muss man es wobei das ich glaube
das kommt sich in die quere weil ich ip doppelt belege und sowas keine ahnung wir probieren
es einfach mal aus und jetzt und keine ahnung ey guck mal guck mal parallele server zeug
da schon mal ja das das funktioniert schon mal es geht da nein nein fast fast ist handpferde
fast funktioniert ssh connect to host unreachable ist ist das lieb ist das lieb immer noch zu
langsam
ich weiß nicht wie man über die kommando zeile deleted deswegen muss ich immer so machen
bau ein wait for connection ein das ist eine gute idee in netcat oder so jemanden gute
jemand eine gute idee 15 15 ich hab's ich hab's noch auf warum erstell oh terraform das
ist eine gute idee das machen wir in stream nummer 3 das passt nämlich richtig zu container
stellts deployment nächsten stream bauen wir eine kleine api noch ein machen github actions
continuous integration pipeline geschissen bisschen load balancer zertifikat und im dritten
stream dazu machen wir container stellts und terraform das ist eine gute idee max ansible
wait for connection ah woh wohin ansible wait for connection
wie funs das hier examples wait for connection ich teste das jetzt erst mal mit dem sleep
drinnen sleep 20 ob das funktioniert man wenn die streams immer sein sonntags wahrscheinlich
schon ok 3 4 5 6 7 8 9 10 11 12 13 14 15 das könnte fertig sein sind 17 18 19 20
ok zählen kann ich nicht aber fast ok mal gucken ob es jetzt funktioniert das sieht
gut aus das sieht gut aus das hängt schon viel länger
massive scalierung hier angesagt wo ich mir nicht ganz sicher bin das backt doch rum oder
ich meine ich mache hier ip aber wobei das hier könnte shell locals sein die variable
und nicht global und deswegen ist es kein problem wenn ich das parallel mache bash ist
aber da zu 6000 hat für als dass man da noch durchblickt netket aber die idee hier einfach
das einzubauen beim ansible ist wahrscheinlich das beste funktioniert leute es funktioniert
es funktioniert er deploit mir 4 server parallel so und danach sollte keck weheste service funktioniert
ok ha cloud list server list oder auch nicht doch mal gucken wenn er fertig ist wenn er
fertig sollte hier auf auf allen auf allen keck weheste service laufen moment hellsinki
warum habe ich die warum warum sind die in finland die server ok bäm oh was oh nein
oh das geht nicht gibt es doch irgendwelche race race conditions
aber der ist noch gar nicht fertig der ist noch gar nicht fertig
wait a minute der war noch gar nicht da war noch gar nicht durch
jetzt ist keck weheste service da also leute ernsthaft einfacher mal übrigens ihr seht
dass es transparent ist wegen dem hintergrund ich weiß nicht warum das da so ein shit macht
bei chrome wir haben jetzt quadruple usd service keck quadruple usd service ich bin ich bin
echt begeistert wie cool das ist mit mit diesem mit hier in dem fall mit dem ansible playbook
haben wir noch irgendwelche shit commits die wir noch nicht gemacht haben also wer sich
das alles ein bisschen näher angucken will was ich heute fabriziert habe ihr findet
das bei mir alles auf github jetzt hat sein eigener load balancer die probieren beim nächsten
stream aus wer sich das nochmal angucken will kann sich das hier alles anschauen wir machen
noch mal was in die read me streamprojekt
blurz switch und bisschen werbung machen dürftest du das shell script noch mal sehen welches
welches shell script meinst du das ansible ding ich hab hier meine aliasse nicht git
commit minus a minus m 0 w größer keck w read me beste aussage kräftigen commits aller
zeiten ist alles im repo drin jetzt machen wir auch ein bisschen werbung streamprojekt
es ist und wisst ihr was das coole ist es ist doch echt überschaubar es ist jetzt nicht
als wäre das wahnsinnig viel source code ich meine die web anwendung ist lächerlich es
ist jetzt nicht als wäre das wahnsinnig viel source code ich meine die web anwendung ist
lächerlich wenig source code im prinzip ist das alles was da irgendwie die logik macht
jetzt das ansible ding ist jetzt sagt man jetzt bei ernsthaft es ist gut lesbar und
es ist auch nicht viel es sind 78 zeilen da kannst du dich ja echt nicht beschweren
so der richtet den server ein mit unit file allem schon fertig macht ein bild für lokal
von der anwendung und deployt das ganze also ich kann euch schon sagen auch wenn wir das
die nächsten nächsten streams etwas modernisieren werden so ein bisschen eher so das in der
richtung wie das heute gerade angesagt ist einfacher wird es dadurch garantiert nicht
allein schon wenn wir das wenn wir das das das bild über über github action machen
und so was man muss man sich jetzt ernsthaft fragen ich mein für ein stream machen wir
das einfach weil es weil man dann was lernen kann aber wenn ich diesen kram jetzt so betreiben
würde dann würde ich mich allen ernstes fragen macht das sinn bei so was kleinem macht das
sinn reicht es nicht aus wenn ich das auf einem server habe dass ich einfach ein ansible
script ausführe nachdem ich einen commit gemacht habe auch ich irgendwelche container stels
geschichten und sonst was man muss es ja nicht man muss ja mit agilität nicht übertreiben
wenn es das dreimal komplizierter macht auch wenn man dann vielleicht nicht cloud native
big brain blockchain ai ist also ich bin mir geistert sehr gut sehr gut excellent tja
leute noch mal eine runde sellout diesen streams werden möglich gemacht durch meinen partner
hetzner cloud wenn ihr euch das ganze auch mal angucken wollt oder vielleicht auch hier
mal mit dem beispielprojekt aus dem stream rum experimentieren wollt dann könnt ihr
euch jetzt 20 euro startguthaben sichern ausrufe zeichnen hetzner in chat und wenn ihr euch
mit meinem code anmeldet kriegt ihr 20 euro startguthaben und ihr seht für 20 euro kann
man schon ganz ordentlich was machen ihr könnt euch entweder in eine fette kiste holen oder
also fett in anführungsstrichen 3 cpus 4 gigabyte ram das zwei drei monate laufen lassen oder
was kleineres das gute ist dass das ganze stündlich abgerechnet wird das heißt selbst wenn ihr
das habe ich selbst schon verwendet nur als neukunde nur als neukunde ja ich weiß nicht
ob sie was gegen fake accounts haben deswegen sage ich da jetzt nichts zu was ich auch schon
mal benutzt habe ist diese geschichte hier aber glaube ich sogar im stream gemacht diese
geschichte hier also wenn man mal was braucht mit nein jetzt nein jetzt noch ich will lass
mich prising gucken wenn ihr mal anwendungszwecke habt dass ihr was richtig fettes braucht dann
könnt ihr euch auch das hier mieten ich habe beispielsweise mal open street maps preprocessed
das braucht extrem für routing information das braucht extrem viel ram ob die gpu instanzen
haben habe ich noch nicht gesehen ich glaube nicht und habe ich mir so eine kiste hier gemietet das
hat vier stunden prozess und der vorteil war ich habe dann am ende 23 euro bezahlt im monat kostet
es zwar 321 aber ich habe das ja nur vier stunden gebraucht und ich habe diese leistung
einfach nicht lokal ansatzweise gehabt um es damit machen zu können so so sieht es aus
dankeschön für die ganzen subs leute wenn ihr in zukunft auch immer live mit dabei sein wollt
könnt ihr auch bei mir auf youtube und twitch und twitter und wo auch immer vorbeigucken wir hatten
hier alles subscribt jenna am start vier monate huge project ja aber richtig der michi ist auch
am start muniradur hat auch subscribt für drei monate ribbonsch vor einer stunde und der virus
der schnabulator auch danke für die subs leute ja wenn es euch gefällt freue ich mich immer
über jeden sub zumal ich jetzt ja auch noch weniger bekomme weil twitch der meinung ist die
sub in die subpreise umgestellt zu haben heißt ich brauche jetzt mehr subs für weniger geld
was aber nicht schlimm ist also ich habe nicht angefangen zu streamen wegen wegen big stonks
money das wisst ihr ja und ich muss sagen ich bin mal wieder begeistert über den chat es gibt
keinen anderen channel der so non-toxic ist mal chain law außen vor genommen außen vor der so
non-toxic ist und so big brain wieder chat bei mir
loll wein nicht noch js warum nicht cobalt noch besser fort ran
ja es sind sehr boom aber die auf der also noch boomerische boomer als als bei mir auf
der arbeit soll ich gehe jetzt noch mal schnell durch den chat durch aber schauen ob ich
irgendwelche sachen überlesen habe wie gesagt denkt dran entwupplose schreiben sonst übersehe
ich die ganzen comments so haben wir nix wie gesagt weiß ich nicht glaube nicht
da sieht man doch eindeutig toxic hier willst du die domain keck wie services dafür haben ja das
wäre richtig gut keck wie punktservices die nämlich die müssen wir auch nicht transferieren
ich kann dir für dns einfach die ip geben transferieren ist immer dass das das sind
die die law die law end provider zu zu 3 hat für ob und oder liebste serverlinienungs ja
das stimmt genau das ist es es ist natürlich cool wenn du dir dann irgendwie was erzählen
kannst von hyper hyper skaliertem kupa netes jetzt könnte man daraus jetzt machen hyper
skaliertes kupa net cloud native hyperskalierendes cloud native kupa netes continuous deployment
oder sowas ja natürlich das ist cool aber manchmal muss es einfach nicht sein und in
dem fall würde ich echt sagen das ist so simpel das projekten gerade mit ein paar servan warum
da irgendwie eine große als sache noch drumherum bauen schon spät nee spät ist es erst ab 22
uhr nicht okta ju stimmt es ist vier fahrt vierfach wes okta ju keck okta ju was wäre
sieben fach koch sepp sepp da ju was ist neun was ist neun auf lateinisch weiß ich nicht was
ist neun nona das habe ich noch nie gehört
hier schauen wir mal kap kap ja nicht viel hier also wenn ihr was wissen wollt schreibt
die frage ruhig in chat bin jetzt noch halbe stunde da wenn man den namen weglässt ja
ich will ja nicht mehr haben ich will da sehen wozu sie gehören ach so habe ich die server
jetzt eigentlich alle gelöscht oder ist keck ws service immer noch da ok ks service läuft
ja noch vielleicht sollte ich die kisten mal wieder löschen sonst sonst wirds teuer
heute nacht
ich habe glaube ich nix übersehen wenn ich hier so durch scroller hatten wir ja
ne holprig habe ich doch irgendwas anderes mit gemeint naja na gut ich muss dir ehrlich
sagen so ich als boomer linux admin die standard bash skripte für das alte im it hatten auch
schon seine vorteile zum beispiel hätte ich da irgendwie den health check rein hacken
können was bei system der nicht gescheit funktioniert also in health check zum beispiel
der irgendwie in den wege macht alle fünf sekunden also halt wie gesagt wirklich wirklich
nur irgendwie rein rein basteln der hatte eigentlich nix zu suchen ja hier wieder was
gelernt richtig richtig 6 hat wusste nicht dass man das machen kann
er wusste es auch aber im unit file ist natürlich schöner funktioniert über hetsner auch so
was wie proxmox zu hosten ja natürlich ach so du meinst in der cloud da wäre ich mir
nicht so sicher das wäre ja das wäre das wäre ja quasi nested virtualisierung da würde
ich mir wahrscheinlich bei der server aktion lieber einkaufen also ich weiß nicht genau
wie die linux virtualisieren ich vermute mal dass es kvm und nested virtualisierung ist
eines der anwendungszwecke wo ich mir wo ich wirklich genau drauf gucken würde ob es ordentlich
funktioniert also du bist auf windows in vmw in linux der auf einem hetsner server ist
ja korrekt ich bin auf windows hab da meine vm und dort war ich eingeloggt auf dem linux
server genau so siehts aus
habe ich die habe ich eigentlich die sub alerts aus kann das sein
tatsächlich soll ich die auslassen oder anlassen sagt man man hört es aber anstört
ich da lassen wir es an micky van b dankeschön für den zapp
ok ich glaube ich habe nichts übersehen so schauen wir nochmal runter fast
ja proxmox auf den richtigen hardware server ja wundert mich nicht
sag mal blue media ich weiß nicht irgendjemand aus dem chat arbeitet bei hetsner und hat
mein stream an die marketing abteilung weiter geleitet warst du das
jetzt sagt jeder ich ja jetzt sagt jeder ich nee
machst du eigentlich noch irgendwann ausbildungs story video ja klar als nächstes mache ich
die geschichte über den azubi der illegale sachen bei uns im rechenzentrum geostet hat
da muss ich aber echt aufpassen dass ich alles anonymisieren dass ich nicht mal den vornamen
den richtigen nenne
ja wir hatten mal ein azubi der hat bei uns auf den server unten ich habe mich die ganze
zeit immer gefragt was was was macht er mit was macht er mit vmw wir hatten ein azubi
wir hatten ein zubi vmw cluster und er hat die ganze zeit rum genervt ob er den nicht
mal neu machen kann den azubi vmw cluster
er hat gesagt ja ich setze ihn auf neue hardware ich mach das neu das ist doch viel besser
da können wir üben und alles und bis bis also nicht bei mir ich hatte damit nichts zu tun
also der war auch der azubi war auch bei mir aber mit der eigentlichen sache nicht nichts
zu tun bis dann hat irgendwann einer gesagt naja gut dann mach halt den azubi esx cluster
neu und bis dann irgendwann mal jemand dahinter gekommen ist was der macht es ging überhaupt
nicht es ging überhaupt nicht darum dass er den azubi esx cluster neu aufbaut sondern
er wollte den also nicht nicht nicht aus reiner nächsten liebe der wollte den azubi esx cluster
neu aufbauen weil er darauf illegales stream also was ist illegales streaming der hat
ein streaming server also er hat einen streaming dienst gehostet mit film drauf der hat sogar
ein werbevideo auf youtube gemacht für den streaming dienst der hat natürlich keiner
der rechte oder sonst was in der richtung der hat sogar ein werbevideo richtig richtig
schlechtes aber sogar ein werbevideo auf youtube gemacht und das alles liegt bei uns im rechten
zentrum wie lang hat das gedauert das weiß ich tatsächlich nicht weil ich hab wie gesagt
ich war nicht daran beteiligt an an an an der aufdeckung ich vermute mal so zwei drei
wochen also es lief schon ein bisschen das ist auch der erste und ich glaube auch bis
jetzt einzige azubi der nicht übernommen wurde und auch nicht die alibi 30 nicht die
alibi halbes jahr hintendran her endpunkt wurde auch übernommen ein halbes jahr aber
das ist der erste azubi der komplett gekickt wurde danach den hätten sie eigentlich schon
während der ausbildung kicken können wahrscheinlich wollte das keiner an die große klocke hängen
ist der preis gem schon profitabel mit den reflings der preis gem hat nur in amazon refling
und er kommt so selten dran das glaube ich erst einer bisher je was über amazon gekauft
hat lohnt sich überhaupt gar nicht preis gem bezahle ich jeden monat irgendwie 50 euro
für nix bald auf status kw service das finde ich ist eine gute idee was läuft eigentlich
auf kw was läuft eigentlich auf kw punkt service gerade nix aber die domain die die
machen wir dafür das ist das ist richtig gut weil den uns des droben mancharo mit
e3 wm so
der aua wird auch gesponsert ja habe ich gesehen materius ich bin gleich auf 20 minuten noch
wir sind mit dem projekt für heute auch schon durch der typ der typ hat echt gedacht er
ist massive big brain dabei ist es eigentlich eines der lausten aktionen die du machen kannst
hat er wenigstens die vms ich weiß es nicht keine ahnung ich habe den klasse nie in action
gesehen aber nachdem ist der azubi vm klasse aber hat er eh keiner drauf geguckt
ja man wollte es wahrscheinlich an die große glock ja ich würde mit der endpunkt gerne
ein video aufnehmen aber der hat gerade wohl bisschen bisschen was ich probleme jobmäßig
ich weiß nicht genau lange nichts mehr gehört aber er hat gesagt er will auf jeden fall
was aufnehmen ich mache da keine ads drauf
ich sehe nicht was du bestellt hast ich sehe nur was bestellt wurde nicht wer da was bestellt
hat heute was da über meine ref links teilweise bestellt wird ich gucke da aber mittlerweile
ich habe da früher immer mal reingeguckt weil es interessant fand mittlerweile gucke
da rein wie alt bist du eigentlich oder ist das geheim
ich meine es weiß ja eh schon jeder ich bin 36 stimmt nicht stimmt nicht ich bin 37 ich
bin 37 geworden vor nicht allzu langer zeit 37
das war nun ein vorwand gehe ich mal von aus dass er neue hardware bekommt der wollte neue
hardware haben für den neuen azubi esx cluster und wie ist das am ende aufgeflogen das ist
eine gute frage wie gesagt ich war dann ich war da nicht so involviert ich muss ich frage
man nächste woche bei mir das mitgekriegt hat ich kenne ich kenne das youtube werbevideo
von ihm aber ansonsten habe ich da nicht viel mitgekriegt
den triggert immer rechtsklick kopien muss dich nicht triggern das ist muss man so machen
das werbevideo noch online weiß ich nicht
ich weiß gar nicht wie die die hat er ich das ist echt eine gute frage wieder das gemacht
hat irgendwie hat er sich ist nicht immer gucken
er meint er war nicht blöd er hat es halt übertrieben
das ist ein reverse proxy naja so ein bisschen das gegenteil von einem normalen proxy normaler
proxy greift so mit kleins drauf zu der dann stellvertretend für dich ins internet geht
die seite abruften dir zurückschickt reverse proxy ist umgedreht das steht zwischen server
und dem internet du greifst aus dem internet drauf zu wirst weitergeleitet an server und
die antwort kommt zurück zu dir das machst du zum beispiel wenn du irgendeine web anwendung
hast der du nicht so ganz draus unter irgendwas robustes davor haben willst was das internet
faced oder wenn du vielleicht basic aus davor machen willst weil es deine anwendung nicht
kann oder wenn du zertifikatsmanagement handeln lassen willst von irgendwas was es ordentlich
macht und ich irgendwie selbst einbauen willst und so was also ich würde ich würde auch
keck ws service nie ins internet hängen direkt das war heute zum testen da kommt immer da
kommt immer ein reverse proxy davor es geht nicht um entweder oder du kannst einen docker
container laufen lassen und mit einem reverse proxy den ansprechen du kannst auch ein reverse
dem docker container laufen lassen aber ein reverse proxy ersetzt kein docker container
ein docker container kein reverse proxy weil beides zwei komplett unterschiedliche arten
an dingern sind also hat noch nicht mal hat noch nichts mal miteinander was zu tun ja die
server gibt es nicht mehr ja wenn du eine webseite hast also wenn du selbst in web server
laufen hast also eine web anwendung laufen hast dann ist es sinnvoll davon reverse proxy
zu machen und darüber zertifikats handling und solche solche sachen abzufackeln ja aber
das kannst du dir auch downloaden also das ist jetzt nicht so das problem ja der typ
der typ der sieht wahrscheinlich der typ also mr snot die hätte uns jetzt erstmal erzählt
dass reverse proxy benutzer grüne wähler sind oder irgendwie sowas in der richtung
ist die server handling auch in stream beziehungsweise video ich habe vor ein paar wochen so ein
bisschen linux einsteiger server mäßig gemacht aber das war ein bisschen unstrukturiert
da mache ich vielleicht noch mal was zu im prinzip das beste was du machen kannst um
was zu herten keine ports aufmachen was nicht läuft kann ich angegriffen werden fertig
ansonsten sind wenn du wenn du bei hetzena sagt man mal hetzena ubuntu und den server
ist jetzt sind die schon ziemlich sicher vorkonfiguriert da musst du nicht viel machen für komfort
würde ich das über ss h keys machen einfach dass man kein password eintippen muss passwort
was nicht eingetippt werden muss kann auch nirgendswo abgegriffen werden oder die auch
keine über die schultern gucken ja also habe ich jetzt meine ganzen services gelöscht
ja ja es ist exzellent kacke ss service hat richtig richtig startup mäßig eingeschlagen
das ist hundertprozentig jemand aus dem chat
was ist das denn
junge junge ist das bei mir unter video
das bestimmt ist das nordisch zweite korn unter welchem video ist das
wo ist das drunter hast du nicht demnächst geburtstag ich hatte geburtstag jetzt bin
ich m6 90 fps
unter welchen video ist das jörg it junge junge noch nie so viel falsch
aussagen in einem video gesehen wie heute schön ohne plan mit gameplay im hintergrund
was in die welt präsent aber nicht mit fakten hinterlegen dank jetzt weiß ich das ist doch
miss das nordisch zweite korn das ist doch das kann mir doch keiner erzählen
ok ich suche jetzt unter welchem video das bei mir angeblich ist
wahrscheinlich hat das photoshop gefakt oder sowas
ne das ist überhaupt nicht bei mir unter dem video
das hat er das hat er das hat er wahrscheinlich foto photoshop hast du nicht photoshop also
ich habe ich habe in meinen ernsthaft
ich glaube immer noch du tschie beides mich das gucken wir zwar das ist so ein video von
einer telekom ich habe keine in meinen mails gesucht aber nix gibt es nicht das kommandar
das ist jebaited ich sag doch der chain als richtig krasser jebader
jetzt hätte mich gewundert das hätte ich nämlich schon gesehen
ja muss muss so sein
oh das ist big brain na gut
leute ich geh jetzt auf betke betke time ich hoffe euch hat das stream gefallen
wir sehen uns die tage machts gut bis denn
