So, schauen wir mal ob Twitch die Quality Options hin gekriegt hat, in letzter Zeit
klappt das ja erstaunlich oft. In letzter Zeit klappt das ja relativ oft mit Quality Options,
allerdings sehe ich das Stream ist noch nicht richtig live. Also ich sehe die Vorschau schon
und jeder der auf dem Channel ist, sieht die Vorschau auch schon, aber Twitch hat noch
nicht die Benachrichtigung raus geschickt, weil hätte Twitch die Benachrichtigung raus
geschickt, würde ich das in der Viewerliste sehen. Aktuell bin ich das alleine mit dem
Vorschau PC. Deswegen warte ich nochmal bis Twitch das auf die Reihe kriegt. Ah, jetzt
hat es aktualisiert. Jetzt ist es nämlich auf Einschlag 14 und jetzt sind auch die ersten
Leute im Chat. Jetzt ist das Stream wirklich live. Irgendwie lag das immer auf Twitch
so ein bisschen. Das dauert so 2-3 Minuten bis das alles raus geschickt wurde an Benachrichtigung.
Der Flixcoder ist auch wieder am Start. Der Tribolon. Ich muss echt sagen, ich bin begeistert.
Man kennt die Leute mittlerweile schon. Wieso nur 48 FPS? Tja, Ressourcen schonend. Wir
sind immer in Deutschland was das Internet angeht. Da kann man sich schon um 48 FPS
freuen. 60 FPS macht der Internetanschluss von den meisten Leuten nicht mit. Übrigens,
jetzt haben sie offiziell sogar zugegeben, dass die Breitbandziele 2018 verfehlt wurden.
Da habe ich mir so, was? Wer hätte das nur vermutet. Ja, außerdem stimmt der Tribolon
recht. Außerdem kann das Auge eh nur 12 FPS. Das Gerücht mit den 24 liegt daran, weil
es eigentlich 2 Augen sind. Also 2 mal 12. Deswegen sagen die Noobs 24. Allerdings
die Kenner wissen, dass das Auge nur 12 FPS sieht auf jedem Auge. Es lebt unglaublich.
Ich habe jetzt die letzte Woche schon gestreben. Schauen wir mal in der History. 3 Streams
in 4 Tagen oder so jetzt gemacht. Es ist 18 Uhr. Ich denke mal, die meisten Leute sind
jetzt schon daheim. Mussten die heute arbeiten? War so in die Runde gefragt. Ich habe den
Tag genutzt, nichts zu machen. Also den ganzen Tag. Ich habe dieses Jahr eh Glück, weil
ich habe mir gleich mal alle Brückentage und Sachen, die irgendwie günstig sind zum Urlaub
eingetragen, bis auf einen Tag. Habe ich mir so gedacht. Und hat auch funktioniert. Ich
finde es immer toll, mein Copy-and-Paste-Tick, der verwirrt immer Leute, die neu in den Stream
kommen. So, jetzt muss ich erstmal die Zellermusik ausmachen. Mehr als 10 Minuten hat immer das
nicht aus. Machen wir wieder unseren Chill-out an. So, dann erzähle ich mal, was wir heute
machen. Und zwar, die letzten paar Streams haben wir ja rumgebastelt. Außer der allerletzte.
Der allerletzte haben wir die China-Steckdosen-Leiste geflasht. Allerdings, wobei ich kann das
eigentlich auch alles in der Linux-VM zeigen. Es gibt keinen Grund, warum ich jetzt hier
auf Windows wechseln muss. Die Streams davor, vor dem letzten, haben wir ja schon ein bisschen
mit dem ESP32 und Arduino rumgebastelt. Da ging es ja um den Bodenfeuchtigkeitssensor.
Da habe ich jetzt bei mir einen Prototyp von. Ich habe das fertig gemacht. Gerade auf der
Terrasse stehen im Blumenbeet. So, und mal gucken, ob das jetzt alles so funktioniert,
wie ich mir das gedacht habe. Und bevor der dann auf den Friedhof kommt. Und heute machen
wir was, was ich auch schon lange machen wollte. Und zwar, wollte ich meinen Briefkasten 900er
IQ verpassen. Und zwar, wie darf man sich das Ganze vorstellen? Ganz einfach. Ich muss
jetzt keinen Briefkasten suchen. Die meisten Leute wissen wahrscheinlich, wie ein Briefkasten
aussieht, gehe ich mal voraus. Mein Briefkasten sieht ungefähr, der ist ziemlich oldschool,
den hat der Opa damals quasi von Hand zusammengeschweißt irgendwie. Der sieht auch ein bisschen speziell
aus. Also der Briefkasten von mir sieht am ehesten, irgendwie sieht das alles anders
aus als das, was der Opa gebastelt hat. Das hier kommt noch am ehesten hin. Das hier kommt
noch am ehesten hin. Wobei, es hat keine Klappe. Der Briefkasten, den der Opa gebaut hat,
der hat nur einen Schlitz oben und hat unten eine Klappe, wo man dann hinten raus, also
die kann man vorne nicht aufmachen. Also, vielleicht eher sowas hier. Was ist das eigentlich
für ein mega hässlicher Briefkasten? Ja. Oh, das ist der Design Briefkasten. Naja,
zumindest sieht das bei mir ungefähr so aus, bloß ohne Klappe. Ich habe den Rohr für
Magazine, Zeitung, sonst was und halt viel Werbung, was da immer so reinkommt und Briefkasten
oben mit Klappe. Und hier ist halt ein Briefkasten mit so einem kleinen Einschubschlitz und hier
unten ist halt keine Klappe bei mir dran. So, und das Ganze ist am Hoftor dran und ich
habe gedacht, wir machen das jetzt mal so, weil im Laufe der Streams kommen eh immer
die Fragen nach dem Motto, ja, was wird denn heute gemacht? Deswegen werde ich das mal
ein bisschen anders machen diesmal. Bevor wir richtig anfangen, machen wir mal so ungefähr
eine kleine Teile-Liste, was wir haben an Hardware und so ein Draw-IO-Bildchen, was gemacht werden
soll, weil jedes Mal, wenn einer fragt, was wird gemacht, kann ich dann einfach auf das
Bildchen switchen und dann kann ich es zeigen. Ja, irgendwie hat das keiner mit dem Briefkasten
so, wie ich das habe. Das hier ist wahrscheinlich noch am ehesten dran, das ist eigentlich alles
nicht so. Also bei mir ist nämlich, das macht es auch ein bisschen komplizierter, bei mir
ist der Briefkasten nämlich am Hoftor dran, also sprich, wenn ich das, ja so hier, so
ungefähr, so ungefähr, was ist denn das für ein Riesenkasten, aber von der Idee her
ist es bei mir auch so, der Briefkasten ist am Hoftor dran, das macht es natürlich ein
bisschen problematischer, weil das Ding ist nicht statisch, also sprich, das bewegt sich
mit dem Hoftor auf und zu, was heißt, man kann da nicht so einfach jetzt irgendwie Kabel
oder so dran machen. Aber ich glaube, man kann sich das schon so ungefähr ganz gut vorstellen.
Ja, so sieht es so, so hier dann. Das heißt, ich kann jetzt auch nicht einfach ein Kabel
irgendwie so ohne weiteres dran machen von der einen Torsack zur anderen, weil ich meine,
da müssen denn Leute durchlaufen. Das macht das Ganze ein bisschen trickreicher und was
ich in dem Zuge auch noch machen will ist, ja ungefähr so sieht das von hinten, so,
fast genau so sieht das bei mir aus, das ist eigentlich ein ziemlich gutes Bild, auch
von den zwei Häusern her, fast genauso sieht man hof aus, wie hier auf dem Bild, bloß
dass der Briefkasten halt hier dran ist. Das heißt, der Briefkasten, der geht halt mit
der Tür auf und zu. So, und was ich jetzt machen will ist, da kommt ein ESP32 dran,
ein Stromsparender ESP32, kein Developer Board, allerdings heute machen wir es mit einem Developer
Board. Ich habe mir eine Schalter gekauft für hier unten dran, der checkt, ob Tür auf
und zu ist und hier oben an den Briefkasten, der jetzt bei mir da ist, kommt ein Entfernungssensor,
ein Ultraschall-Entfernungssensor kommt da dran und, wobei das stimmt gar nicht, was
ich erzähle, Mist, das ist falsch. Der Ultraschall-Sensor kommt in das Rohr für die Zeitung rein
und der kann dann feststellen, ob was im Rohr drin ist. Das heißt, das Ganze wird dann ungefähr
so aussehen, ob man da jetzt irgendwie Spielchen malen kann, ohne dass man das direkt speichern
muss, also das Ganze wird dann ungefähr so aussehen. Wir machen erstmal eine Teileliste,
was wir brauchen. Ach ja, und ich darf übrigens meine Secrets.h nicht öffnen, wenn ich meine
Secrets.h öffne, ist das ziemlich doof, weil dann sieht jeder mein WLAN-Passwort. Das heißt,
ich sollte da jetzt nicht draufklicken. Was jetzt? Konsole ist weg, Grip. Was passiert,
hast du nicht mal Overwatch gespielt? Ja, das ist richtig, ich habe mal Overwatch gespielt.
Ich muss mal kurz testen, ob nicht irgendwie die Vorschau das anzeigt, als wäre es eh zu
spät gewesen, aber die Vorschau zeigt das glücklicherweise nicht an, was da drin steht.
Alter, was ist mit der Konsole denn jetzt hier? Was ist da los? Gerade keine Lust auf YouTube,
ja, das ist richtig. Nichts, sondern nicht viel. So, und ich dachte, wir machen mal eine
Teileliste, was wir heute brauchen. Nachdem ja, jetzt kommt ja der Witz, das Ganze ist natürlich
wie immer auf den ersten Blick einfach, auf den zweiten dann doch nicht. Die Sache ist
die, das soll natürlich hier ans Hoftor dran, habe ich ja schon gerade gezeigt, das soll
ans Hoftor dran, aber natürlich stromsparend, das bedeutet mit Batterie. Das heißt, man
kann das Ganze jetzt nicht durchgängig laufen lassen. Was, man hat das Passwort in der Debug-Ausgabe
gesehen? Echt? Ah, gut, weil ich wollte gerade sagen, wo? Ja, ich traue der Sache auch nicht
so genau, allerdings, man muss ja sagen, selbst wenn ich das Passwort hier irgendwann mal
zeige, das ist ein extra WLAN, was ich nur für den Streben anhab, wo man auch nirgends
wohin kommt. Also insofern, eigentlich kann man damit nicht wirklich was anfangen. Was
zum Teufel geht mit der Konsole gerade ab? Spack den mir ein bisschen rum. Perfekt abgesehen,
ja ich kann eh nur jedem empfehlen, der bei sich daheim entweder Gäste im WLAN hat oder
halt viele Geräte, die wie Kameras oder irgendwelche anderen Sachen, die vielleicht für Heimautomatisierung
wichtig sind bei ihm, macht verschiedene WLANs auf, die unter der Haube dann auch in verschiedenen
WLANs drin sind, weil dann habt ihr nie das Problem, dass irgendwo mal was aus Versehen
drauf zugreifen kann. Stellt es einfach so ein, dass standardmäßig aus dem Gäste-WLAN
oder aus dem Kamera-WLAN nirgendwo was irgendwohin darf. Das heißt, ihr müsst auch nicht irgendwelche
Firewall-Regeln erstellen, das ist einfach dicht standardmäßig. Und macht Client Isolation
an, dass die Dinger auch nicht miteinander reden können. Ja, also ich sehe das auch ein
bisschen kritisch. Standardmäßig macht so eine Fritzbox glaube ich ein WLAN auf, ich
weiß gar nicht, ob eine Fritzbox mehrere WLANs überhaupt... Kann eine Fritzbox mehrere WLAN
SSIDs oder mehrere WLANs oft machen? In Gasnetz, ok, ja gut, da hat man wahrscheinlich nicht
viel Einfluss drauf, was die macht. Naja, wie dem auch sei, ist eigentlich wurscht. Also
was wir an Teilen brauchen... Teile... Teile... Gasnetz, Krücke, Krücke, so halber, ok. Ja,
also ganz kurz die Sache mit den WLANs abzuschließen. Die ganzen China-Dinger, die es so gibt, und
es gibt ja auch genug China-Dinger, die man nicht flashen kann jetzt mit Custom-Firmware,
wie wir das im letzten Stream mit der Steckdose gemacht haben, die müssen einfach und auch
sowas wie China-Kameras oder generell Sachen, wo man halt nicht so genau an der Sache traut
von dem, was da drauf ist, die müssen einfach in ein extra WLAN, wo nirgendwo was hinkommt.
Und am besten in den WLAN, wo die Geräte noch nicht mal selbst miteinander reden können.
Also aktuell hab ich drei WLANs. Eins mein Streaming hier, WLAN, das ist halt einfach
nur für den Stream an. Dann hab ich das normale WLAN, halt für alle möglichen Sachen wie
Tablets und Smartphones und sowas. Und dann hab ich das China-WLAN, da sind die Kameras
drin und andere China-Geräte, die ich dann flashen kann. Und in dieses WLAN kommt nichts
raus. Es kommt im Prinzip auch rein schon. Von intern darf man eh überall hinzugreifen.
Allerdings, das ist komplett dicht. Die Dinger kommen noch nicht mal ins Internet, noch nicht
mal bei DNS, gar nichts. Die sind komplett von der Außenwelt abgeschritten im China-WLAN.
Und das ist die DHL-Falle. Keine Ahnung, das hab ich mir noch nicht angeguckt. Gut, also
was wir, wie gesagt, damit wir heute das realisieren können, erstmal ne Teile-Liste, was wir brauchen,
was ich mir so im Vorfeld überlegt hab. Also, wir brauchen erstmal einen ESP32-66-Controller,
da hab ich heute einen, werden wir jetzt im Stream zum Testen verwenden, einen Debron-Mini,
dann brauchen wir einen ESP32, da nehm ich heute eine NodeMCU als Controller. Wir brauchen
zwei, nämlich einmal der, der quasi, ähm, mal ich gleich, mal ich gleich auf, dann brauchen
wir einen Schalter fürs Tor, da hab ich hier auf Amazon gekauft, ein, ähm, boah, wie hieß
das Ding? Das ist nicht einfach ein normaler Schalter, der, der, der so klein und wackelig
ist, sondern was richtig, was richtig stabiles. Das ist eigentlich ein Schalter für CNC-Fräsen
irgendwie. Der da, ja, fast, fast genau der da ist, den ich gekauft hab, fast genau. Fast,
fast genau der, den da hab ich, genau. So, der ist unten am Hoftor dran und wenn das
Tor aufgeht, beziehungsweise wenn das Teil zugeht, dann schaltet das. Das ist halt ein
ganz normaler Schalter. Ist halt Wind, Wetter, Regen, sonst war es fest und hält halt ein
bisschen was aus. Darf man ja nicht vergessen, wenn man die Sachen Outdoor ans Hoftor macht,
das muss alles auch ein bisschen, ein bisschen robust sein, ne. So, ähm, genau, sowas haben
wir einmal, einen Schalter, schreiben wir mal hier dabei, Schalter haben wir, dann haben
wir einen Ultraschall-Sensor, dann haben wir einen Ultraschall-Sensor, nämlich so ein Ding
da, weil irgendwie ist gerade das Kabel vom Hatsan-Pegel gar nicht im Keks. Dann hab ich
so einen, einen HCSR04, die Dinger haben immer super griffige Produktnamen. Das ist für
die, äh, wie nennt man sowas, Zeitungsrolle, ne Zeitungsfach. Da kann man gucken, ob was
drin ist. So, und dann brauchen wir noch Kabels, aber Kabels, Kabels muss ich jetzt nicht aufschreiben,
halt Kabel. Am besten Kabel, die nicht unbedingt direkt kaputt gehen, wenn man ein bisschen
länger, wenn es mal ein bisschen länger feucht draußen ist. Äh, warum hab ich hier eigentlich
noch mein Rim-Config-Gedöns auf? So, so, mehr, das war es an Teilen eigentlich, ja,
viel mehr brauchen wir nicht. Schalter, Ultraschall-Sensor, zwei Controller, ja gut, Kabels und vor allem
halt ein paar, äh, so Jumper-Kabel, wo man halt an Pins stöpseln kann. So, und wie gesagt,
so einfach wie das auf den ersten Blick aussieht, ist es jetzt wiederum nicht, denn ich versuch'
das, ich versuch' das mal, ich versuch' das mal hinzumalen. Also, äh, haben die hier,
haben die hier ein Tor? Oh krass, Tor? Ähm, also das ist mein Hoftor. Das stimmt auch
so ziemlich genau, weil das eine schwingt nach da und das andere schwingt nach da. Bloß
das ist, wow, bloß das ist bei mir, kann man das Seitenverhältnis irgendwie, kann man
dem irgendwie sagen, scheiß auf Seitenverhältnis, geht das? Kann man dem, kann man dem irgendwie
sagen hier, ja. Ja, es ist ja mal, ich bin schon wieder zu blöd, irgendwie ein Malprogramm
zu verwenden. Gut, das ist im Prinzip auch wurscht. Ähm, also, wir haben das Hoftor
hier. Äh, Frage nebenbei, was ist das für ein Lied? Das ist ein, das ist Manjaro mit
I3-WM als Win-No-Manager. So, kann man da jetzt was draufschreiben? Hoftor, wow, Riesenschrift,
Text. So, sehr schön. So, Hoftor. So, und da ist der Briefkasten dran. Briefkasten.
Wie, wie ich mach das fertig, dass man den Kram nicht, dass man den nur Seiten, dass
man den nicht einfach anders verschieben kann. Briefkasten. So, save. Kann man noch speichern.
So, da ist der Briefkasten rein und hier geht das Tor auf. Das heißt, da ist der Schalter
dran. Und jetzt sieht man auch gleich, warum das nicht so einfach ist. Ha, nee, so nen
Switch wein ich nicht. Ich mein nen, naja, gut. Ich mein nen, nen Schalter. Machen
wir jetzt einfach mal hier, so. Genau. Sieht zwar total eng geblieben aus. Genau. So, und
hier kommt quasi an das Tor, kommt dann der Schalter dran, der feststellt, ob das Tor
auf und zu geht. Links zwei einzelne Tür nehmen. Könnte man machen, aber ich glaub,
man versteht das so auch schon ganz gut. So, und ähm. Heute noch StarCraft, ach. Natürlich,
was sonst. Ähm. Haben die vielleicht ein Bildchen dafür? Nee. Haben keinen. Haben
kein Bildchen, ne. Ein schönes Hardware Bildchen, ja, genau. So, und hier unter den Briefkasten
an die Tür, da Briefkasten, da Controller, da Schalter. So, so sieht das ungefähr aus
dann. Und, kann mal das komische, komische Pfeil weggehen. Und warum das nicht so einfach
ist, ist folgendermaßen, das Ding läuft an der Batterie. Das Ding hängt an der Batterie
dran. So, ich glaube, jetzt passt das eigentlich ganz gut. Besser so. Scheiße aus. Naja, zumindest
das Ding hängt an der Batterie dran. Und deswegen, das haben wir in einem der letzten Streams
schon gemacht, ist das Ding hauptsächlich im Deep Sleep. Und verbraucht relativ wenig
Strom. Ähm. Das Problem ist, das hier muss ein ESP32 sein, weil ich mehrere Inputs brauche,
wo er aufwachen kann. Das kann ein ESP8266 nicht. Das heißt, das muss auf jeden Fall
ein ESP32 sein, auch noch aus anderen Gründen. Die Sache ist die, dass die ESP32 relativ
langsam zum WLAN connecten. Also sprich, selbst wenn ich bei dem jetzt einstelle, wache auf
bei GPIO15 und danach lockt sich im WLAN ein und schickt das Ganze. Das Problem ist, dass
es über zwei Sekunden dauert, oder plus, minus ein bisschen was, bis ich so ein ESP32, gibt
es übrigens auch auf GitHub ein Ticket. Also das ist bekanntes Problem im Endeffekt. Das
ist ein ESP32, lange braucht es sich zum WLAN zu verbinden. Und für eine Sache, die an
der Batterie läuft, ist das ziemlich doof, wenn was lange braucht, sich zum WLAN zu verbinden.
Weil wir können das ja immer im Batterie Calculator uns mal angucken. Das macht nämlich einen
riesen Unterschied. Wenn wir jetzt mal sagen, ok, irgendjemand macht die Tür auf, das Ding
triggert und möchte die Nachricht raushauen, Tür ist offen. Also es ist erstens schon mal
doof, dass es dann überhaupt mit zwei Sekunden Verzögerung kommt. In der Regel will ich,
Tür geht auf, will ich direkt eine Benachrichtigung haben. In zwei Sekunden ist ja ein Typ schon
fast um die Ecke gelaufen an die Haustür, wenn er schnell ist. Vielleicht möchte ich
nämlich auch dann mit der Kamera, die eben in der Einfahrt hängt, vielleicht ein Bild
schon machen, was auch immer. Kann man ja viel machen mit. Zumindest zwei Sekunden Verzögerung
ist in jedem Fall scheiße. Und das ist vor allem auch scheiße für die Dauer, wie das
Gerät an der Batterie betrieben werden kann. Also wenn wir jetzt zum Beispiel sagen, wir
brauchen nur zwei Sekunden, um das zu verschicken, und da wäre ja alles dabei. Also quasi Wert
auslesen, gucken, verschicken, connecten. So und dann schlafen wir, keine Ahnung, zwei
Minuten, weil das nicht so ganz hinhaut, weil das ja eigentlich nur getriggert wird, wenn
man die Tür aufmacht. Und das Problem ist, WLAN-Übertragung braucht 150mAh, das ist
relativ viel. Und das halt im schlimmsten Fall halt dann zwar nicht über die zwei Sekunden,
aber Laufzeit von zwei Sekunden ist halt problematisch. Man sieht das gleich. Im Deep Sleep braucht
das Ding 11mAh, Batterie haben wir eine 2000mAh-Stunde, das ist 15. Man sieht schon, das Ding würde
standardmäßig jetzt nur, also wenn man es alle zwei Minuten aufwachen lassen würde,
nur 28 Tage laufen. Und 28 Tage Laufzeit ist scheiße. Oder? Da sind wir uns glaube ich
einig. Es will keiner einmal im Monat die Batterie in dem Ding wechseln. Also das ist
ziemlich Mist. Das ist ziemlicher Mist. Außerdem soll das Ding ja nicht nur eine Meldung schicken,
und zwar sofort, wenn einer die Tür aufmacht, ist bei Sleep Mode nicht auf mA eingestellt.
Das niedrigste, wo du so einen ESP32 kriegst, ohne dass du quasi einen externen An-Aus-Schalter
dran hast, ist ungefähr 11mA. Passt doch. Du hast recht. Klar, 11mA. Das ist Absicht.
Das Minimum, was geht mit einem der stromsparendsten ESP32-Module ist 11mA. Und das Board, was
ich hier heute zum entwickeln habe, braucht viel mehr. Das lohnt sich ja überhaupt nicht
als im Batteriebetrieb. Allerdings weniger kriegt man nicht. Und so und so. Ja warum
baue ich wohl nichts unterm Hof durch? Also man sieht, dass es relativ kurz hält. Und
man kann ziemlich einfach die Batterielebenszeit erhöhen, indem man diese Zeit hier, wie lang
das Ding an sein muss, reduziert. Und wir reden jetzt ja von 2 Sekunden, das sind 2.000
Millisekunden. Und 2.000 Millisekunden sind ziemlich lange Zeit. Ja, Flow 690, größere
Akku geht natürlich auch. Allerdings ist das wahrscheinlich, ja, das ist so, wie man
schlecht programmiert ist, auch meistens mit mehr Hardware erschlagen kann, macht es dann
aber trotzdem nicht unbedingt besser. So und das Ding soll ja auch ungefähr alle, sagen
wir mal alle, alle 5 Minuten oder sagen wir mal, bleiben wir in der Rechnung alle 2 Minuten
aufwachen und mit dem Ultraschall-Sensor checken, ob Post da ist. So kommt ja auch noch dabei,
soll er ja auch noch machen. So und dann sieht man schon, das Ganze braucht zu viel Strom,
wenn es das macht. So und das Beste, was man machen kann, ist einfach die Zeit zu verkürzen.
Das schafft er. Also der ESP866 schafft das in ungefähr 300 Millisekunden und der ESP32
braucht da leider 1-2 Sekunden für, nur fürs Aufbauen der WLAN Verbindung. Ja, wir drehen
gleich ein bisschen an den Zahlen rum, wir drehen gleich ein bisschen an den Zahlen rum
und gucken, was dann am Ende rauskommt. Der ESP32 braucht da leider ein bisschen länger
für und ja, Flo96, das ist gar keine schlechte Idee, wir machen nämlich sowas in der Richtung
auch. Da komme ich jetzt aber gleich dazu, wir machen sowas ähnliches auch, wir machen
das nämlich gar nicht mit normalem WLAN. Der Flo hat es schon erkannt, was wir nämlich
machen ist, deswegen brauchen wir auch zwei Controller. Wir benutzen den WLAN-Chip auf
den Controller, nicht als WLAN-Chip, sondern als Funksender oder Empfänger. Also wir scheißen
auf den ganzen WLAN-Krempel drum herum. Zumindest so grob. Und ich habe das schon mal ausprobiert
vor einer Weile. Das so zu übertragen ist verdammt schnell und ich glaube wir kommen
da ungefähr auf fast sogar noch weniger, so ungefähr auf 50 ms pro Zeit. Und da sehen
wir schon, die Code-Execution-Zeit ist unglaublich wichtig, für das wie lange der Scheiß am
Ende läuft. Wenn wir jetzt nämlich von zwei Sekunden auf 50 ms runterkommen, oder selbst
sagen wir mal 100 ms, das läuft halt einfach viel viel länger. So und wenn man jetzt noch
sagt, ok, wir machen die Sleep-Zeit mal hoch auf, keine Ahnung, was sind, 300 oder? Jaja,
300 Sekunden. Guck mal, da sind wir schon mal theoretisch, praktisch gesehen wird das
nicht so lang sein. Ich meine das Ding entlädt sich auch noch selbst, also übern Daumen
gepeilt. Dann, wenn man alle fünf Minuten checken ob Post da ist und eine reine Zeit
von 100 ms haben wie das Ding an ist, dann sind wir ganz schön Stromsparend. Und das
ist noch gar nicht mal großartig optimiert. Wir könnten hier auch mit so Späßen anfangen,
dass wir den Ultra Low Power Prozessor nehmen, der da drauf ist und gucken ob Post da ist
und nur dann aufwachen und das verschicken. Also ich gehe mal davon aus, wenn man das
wirklich richtig gut optimiert, dann kann so ein Ding auch mal gut und gern drei, vier
Jahre an einer 2000 mAh Batterie laufen. Kannst du dem auch sagen, es soll zum Beispiel nachts
nicht prüfen? Das ist ein bisschen schwierig, weil das Ding kennt nicht so wirklich Uhrzeit.
Ja, ich sag ja, selbst wenn du mit 5% Selbstentladung im Jahr rechnest, du kriegst ja die Zeiten
hier und den Stromverbrauch, kriegst du ja noch massig runter, wenn du das wirklich richtig
optimierst. Aber ich glaube so eine Hausnummer ist das ganze, wenn man sagt, das kann mal
gut und gern zwei Jahre laufen. Damit bin ich zufrieden. Dann mache ich das alle zwei
Jahre auf, stöpsel mal eine neue Batterie rein und gut ist. Übrigens das Board mit
dem niedrigsten Stromverbrauch, was ich bisher gesehen habe, also das niedrigste ESP8266
Board ist das hier, das ist von einem, von dem Typ hergestellt. Das kann man sich nur
auf so einer Custom-Dings-Plattform kaufen und der macht das relativ clever. Der hat
hier den ESP8266 dran und einfach einen An- und Ausschalter davor und einen Hardware-Timer,
der das Ding einmal regelmäßig die Stunde aufbäckt. Das ist natürlich auch eine Option.
Allerdings hat man dann keinerlei Möglichkeiten irgendwie etwas andere Sachen zu machen. Das
Ding wacht, hardcoded auf einem GPIO auf und einmal die Stunde. Kannst du nichts dran
ändern und wir haben hier einen voll funktionsfähigen ESP32, wo man alle möglichen Sleep-Options
einstellen kann. Nein, das glaube ich nicht. Die Batterie ist denke ich mal ganz gut. Also
gekauft habe ich die Batterie hier, warte mal. Da habe ich mir jetzt schon ein paar Batterien
gekauft, die haben eigentlich, zumindest machen die einen ganz brauchbaren Eindruck. Ups,
wie da glaube ich ist das. Genau. Schreiben wir hier noch in die Teile-Liste rein. Einen
Akku braucht man natürlich auch. Überlebt das alles im Winter bei minus 15 Grad? Ja,
ist kein Ding. Also ich glaube, ich glaube das Ding wacht bis minus 40. Also die Dinger
sind wirklich ziemlich robust. Ich meine ich würde nicht unbedingt an die Grenze gehen.
Minus 140 plus 125 ist schon nicht so realistisch für Deutschland. Es hält auf jeden Fall aus.
Es gab gerade irgendwie noch eine Heimautomatisierungsfrage im Chat, habe ich gesehen. Genau, der Xo-Ut
sagt, hallo Max, ich möchte bei mir in der Wohnung auch jetzt nach und nach Smart Home
integrieren. Neben der Steuerung über iPhone, iPad möchte ich ein kleines Tablet am Eingang
platzieren, womit ich auch nochmal alles steuern kann. Das ist eine sehr gute Idee, weil ansonsten
braucht man viel länger, bis man ein Tablet gesucht hat, das unlockt hat, Browser aufgemacht
hat und irgendwas gedrückt hat, wie einfach selbst den GENO was drücken. Und sobald das
länger dauert, hat man eigentlich keinen Bock mehr, das zu benutzen. Ich habe absolut keinen
Plan von PCs, also Computer anmachen und ausmachen kann ich. Das war es aber schon. Hast du Tipps
oder sollte ich das Ganze lieber lassen? Es kommt so ein bisschen drauf an, was du vor
hast. Ich meine, wenn du da überhaupt keine Ahnung von hast, wirst du wahrscheinlich auch
nicht anfangen Sachen selber zu programmieren. Also du musst gucken, dass es schon mehr oder
weniger die Sachen gibt, die du haben willst. Kommt drauf an, was du machen willst. Also
was willst du denn machen? Also ganz davon abhängig. Ich verwende hier als Heimautomatisierungszentrale
Home Assistant. Home Assistant ist zwar prinzipiell für jeden zu benutzen, man muss dafür eigentlich
nicht programmieren können. Allerdings ist die Einstellung doch ein bisschen Gewöhnungssache.
Also du kannst das alles über so Konfig-Dateien konfigurieren in Home Assistant, aber man
muss schon sich ein bisschen einarbeiten. Dafür kannst du wirklich schöne Sachen machen
im Endeffekt. Da kannst du den Raumplan anlegen, kannst da quasi sagen, hier Bewegungsmelder,
hier will ich jetzt keine Ahnung, Licht anschalten, wenn da was reinkommt und dann wenn hier einer
draufdrückt will ich dann die Szene für Fernsehgucken starten, was auch immer. Kannst du im Prinzip
alles machen, wie du willst. Und das schöne an so einem offenen Hub wie Home Assistant
oder Open Hub oder so, aber ich würde dir auf jeden Fall Home Assistant empfehlen, weil
das auch für Einsteiger von den ganzen noch, würde ich sagen, mit am besten ja, erinnert
es. So, ich vergesse, was ich sagen wollte. Lull. Ja, aber wie gesagt, ich würde dir
auf jeden Fall Home Assistant ans Herz legen. Aber du musst dich ein bisschen reinarbeiten.
Das ist nicht so hier einfach mal so zick und das ist da. Du kannst da halt wunderbar
alles einrichten, so wie du das willst. Ach ja, was ich sagen wollte, genau. Das Schöne
ist an so Hubs wie Home Assistant eben, dass es mit allen oder mit den meisten anderen
Produkten zusammenarbeitet. Wenn du jetzt zum Beispiel irgendwie von Philips oder so
einen Hub kaufst oder von Ikea oder sowas, dann arbeitet der in der Regel halt nur mit
Ikea-Produkten oder der anderen nur mit Philips-Produkten zusammen. Und wenn du Home Assistant verwendest
oder generell irgendeinen offenen Hub, dann können die in der Regel mit allen möglichen
Geräten zusammenarbeiten. Oder was viel besser ist letztendlich, weil du bist nicht auf den
Hersteller angewiesen und kannst das kaufen, was für die jeweilige Sache am besten ist.
Lichter steuern möchte er machen, Musik in Räumen, Kameras, Staubsauger, Roboter, Startenbänden,
TV-Programme, geht alles. Wie gesagt, Einrichtungen, braucht aber Zeit. Das ist ein Projekt, wo
man sich im Klaren sein muss, also es sei denn, man kauft sich ein Fertigprodukt, das
ist natürlich auch immer eine Option. Wenn man einfach nur das haben möchte, ohne sich
damit zu beschäftigen, kann man sich auch ein Fertigprodukt kaufen, wobei man halt mit
einem Fertigprodukt immer damit leben muss, dass es nie so sein wird, genau wie man es
haben will. Und man immer auf Gedeih und Verderben darauf angewiesen ist, was der Hersteller
macht. Das war für mich zumindest keine Option an der Stelle. Das ist keine Sache, die man
von heute auf morgen macht, das ist eher so ein Projekt, was so nach und nach kommt. Ich
würde mit den Automatisierungen Sachen anfangen, die am meisten bringen, also wo dir halt das,
wenn du es von Hand machen musst, am meisten auf den Keks geht, die würde ich zuerst automatisieren
und dann einfach ein bisschen Erfahrung sammeln und das Ganze nach und nach machen. Und eines
kann ich dir sagen, wenn du damit angefangen hast und dir das halbwegs Spaß macht, du bist
prinzipiell eh nicht fertig, du bist nie fertig. Du wirst nie sagen, jawoll, heute habe ich
die letzte Automatisierung eingerichtet und jetzt bin ich fertig, nie. Wenn du eine Sache
machst, fallen dir fünf neue Sachen ein. Wie ist die Performance von Home Assistant
auf dem Pi? Scheiße. Ich würde Home Assistant nicht auf einem Raspberry Pi betreiben. Habe
ich ganz am Anfang mal probiert, war mir viel zu langsam und jeder Neustart war ätzend
lahm und ich habe es dann auch mal auf dem Pi 3 ausprobiert, war mir zu langsam. Mein
halbautomatisierungszeug läuft zurzeit auf einem, ich glaube da drauf, eines dieser Boards
in der Richtung, ich bin jetzt nicht sicher, ob es genau dieses Board hier ist, aber könnte
es schon hinkommen. Also mein halbautomatisierungszeug läuft zurzeit auf einem Quad Core Atom. Es
ist kein Atom mehr, die Dinger nennen sich jetzt Pentium Silber, weil Intel sich gedacht
hat, nee also Atom klingt einfach zu mickrig, wir nennen das jetzt mal um, aber im Prinzip
sind es Atoms, Pentium Silber, also auf der Plattform läuft gerade mein halbautomatisierungszeug
und ich sag dir, oder sag euch, es sind Welten zwischen einem Raspberry und diesem Ding und
wenn man dazukommt, der Kram kostet auch nicht viel. Oh, das ist aber ganz schön teuer geworden.
Ich hab das doch für 70 oder so gekriegt. Also 70, 80 Euro für das Board, das ist im
Prinzip halt nur das Board mit CPU, muss man klar sein, passiv gekühlt, da muss noch RAM
dazu, da muss noch ein Netzteil dran, da muss noch was auch immer man braucht noch dran.
Also so, sag mal mal, 200 Euro muss man dafür schon rechnen. Hast du Erfahrungen mit Domotex?
Nein, hab ich nix gemacht bisher. Ich hab ein bisschen mit IO Broker rumgespielt in letzter
Zeit, also nebenbei ein bisschen geguckt, das ist aber anders gelagert als Homocystein,
das ist jetzt nicht so ein Hub, wo ich Sachen würde, ja man macht alles auf IO Broker,
inklusive Webinterface und sowas, IO Broker sieht für mich eher so aus wie so eine Bridge,
die ich dazwischen schalten kann, wenn ich halt sage, ok, Homocystein unterstützt vielleicht
die ein oder andere Sache nicht oder die Integration gefällt mir nicht, dann würde ich IO Broker
nehmen zum integrieren mit Geräten und ich würde als Frontend immer noch Homocystein
nehmen, weil von allen Heimautomatisierungslösungen, die es so gibt, ok, ich sag mal, alle die
ich mich mit beschäftigt habe und ein bisschen was gelesen habe, hat Homocystein, und das
kann ich auch bestätigen von meiner eigenen Benutzung, das beste Interface, das Interface
von Homocystein ist wirklich gut, vor allem seitdem sie seit einem halben Jahr oder so
ihre neue Loveless Oberfläche haben, das ist wirklich nice.
Mittlerweile kann man sogar seine Kameras einbinden direkt den Livestream, also unter
der Haube ist das ganz normales HTS Streaming und ich hab mir was gebastelt, ich kann sogar
per WebRTC, kann ich sogar meine Kameras einbinden in einem Iframe, da hast du keine Verzögerung
drin, also das Webinterface von Homocystein ist wirklich gut.
So, ich laber schon wieder ewig rum, wir haben noch nichts gemacht eigentlich, das wird
leider Wahnsinn, außer dass ich wild copypaste.
Kennt ihr Seiten wo man sich gut so was zusammenstellen bzw. durchlesen kann, also was ganz gut
ist, ist das Reddit von Homocystein, kannst du dir angucken, das Homocystein Forum ist
auch ganz gut, wenn es um Homocystein geht, was da besonders interessant ist, ist diese
share your projects Sektion, wo Leute schreiben was sie damit umgesetzt haben, das ist eigentlich
ganz cool, da sieht man dann ok, irgendein Typ hat sich einen LED Schalter oder so für
die Wand gebaut, da kann man dabei gucken was einen interessiert und vor allem immer
ganz interessant wie die es gemacht haben, weil das kann man auch für andere Sachen
gebrauchen.
Home Assistant Reddit, da gibt es noch das allgemeine Smart Home Reddit, das ist immer
ganz praktisch, würde ich mal angucken, da würde ich mir auch noch das Self Hosted Reddit
angucken, wo es darum geht, dass man eben die Sache nicht in der Cloud läuft laufen
lässt, sondern bei sich selbst, ja glaube ich war das Einstieg ganz gut.
Wie teuer ist so ein Ding, wie gesagt 70, 80 Euro, soll einfach auch im Video noch
aktuell, trotz Kappa HD, halbwegs aktuell, weil die große Kiste ist immer noch im Einsatz,
obwohl ich die ja schon längst ablösen wollte.
Ja, das habe ich vor Video über meine Heimautomatisierung zu machen, das Problem ist,
man sieht, so wie ich es jetzt eingestellt habe, sieht man ein bisschen viel Privates
da drin, deswegen muss ich gucken, wie ich das mache, vielleicht benenne ich einfach
für den Stream mal ein paar Sachen um und zeige es dann, dann sieht man beispielsweise
auch die Fernsteuerung vom Staubsauger-Roboter und sowas.
Der Evoli schreibt, ich habe ein Video gesehen, der hat sich ein Gerät gebaut, wo man in
einem bestimmten Rhythmus an die Tür klopfen muss, damit sie aufgeht, ja genau für sowas
sind so kleine Kontrollen richtig gut.
Die Kiste mit der verdrehten Ladenkarte, richtig, also zurück zum Thema, wo ist mein Bildchen,
genau, was habe ich gerade erzählt, genau, es dauert einfach viel zu lang, wenn es 2
Sekunden ausführt, 2 Sekunden an ist und Daten überträgt, das dauert einfach viel
zu lang, also Ziel ist, dass wir runterkommen auf deutlich unter 100 ms, die das ganze so
dauert und an ist und da sieht man auch schon, die Akkulaufzeit geht viel viel höher, so
und die Sache ist die, damit das funktioniert verwenden wir das WLAN Modul, nicht als WLAN
Modul, sondern quasi mehr oder weniger einfach so als Funk Modul, ja und das geht und das
geht mit sowohl mit dem ESP32 als auch mit dem ESP866 relativ einfach, weil der Hersteller
hat schon was eingebaut, das ganze ist ESPNow, das ist ein eigenes Funk Protokoll, was über
den WLAN Chip geht, es ist aber kein WLAN oder zumindest kein komplettes WLAN, wo mit
verschiedene ESP Hardware miteinander kommunizieren kann, man kann damit auch Mesh Netze aufbauen,
theoretisch könnte man ein ganzes Haus mit ESPs bestücken, die dann irgendwie untereinander
miteinander über Kreuz kommunizieren und sowas, aber man wollte es ja nicht übertreiben,
aber das schöne ist, ESPNow ist eben WLAN sehr sehr light, das heißt die ganzen Geschichten
drum herum von WLAN kann man sich sparen und ich habe es mal getestet, das Übertragen,
also das Connecten und das Übertragen mit ESPNow, also es dauert ungefähr zwei Sekunden
sich ins WLAN zu verbinden an einem normalen Access Point und dann nochmal wahrscheinlich
so eine Sekunde um die Sachen per MQTT zu übertragen, wenn man das ganze jetzt über
ESPNow macht, von dem Sensor an der Tür zu einem zweiten Controller, der hier hinten
im Haus drinne ist, also von hier nach hier machen wir mal einen, von da nach da übertragen,
wobei wir machen, gibt es ja WLAN, ja genau, also das wird schon ein bisschen advanced
aber ihr kennt ja die Streams, das ist immer ein bisschen advanced, weil so Easy Mode, Hallo
Welt, das kann ja jeder, was ich allerdings nicht kann, sind Bilder ausrichten, und das
ganze funkt da jetzt bei ESPNow, funkt den ganzen Mist von der Tür zu einem ESP866,
der hier in der Steckdose steckt, soweit die Idee, Rust ist tatsächlich eine schöne Sprache,
aber auch ziemlich nervig, dafür ist es richtig, wenn es kompiliert, meistens, was man in anderen
Sprachen ja nicht so sagen kann, bei Rust schon, ich habe noch nicht so viel in Rust gemacht,
aber die Idee hinter Rust ist wirklich gut, so ungefähr safe, wir speichern das mal,
Wine Browser, ist klar, ich möchte es am besten jetzt direkt im EE öffnen, so ist
ungefähr der Ablauf, das heißt wir brauchen zwei Controller, das hier ist ein ESP32, das
ist ein ESP866, ich glaube jetzt ist relativ klar, was ich vorhabe, ich habe es mal ausprobiert
vor einer Weile, was zu übertragen, per ESPNow, also quasi einfach über den WLAN Chip, ohne
WLAN zu verwenden, dauert so 30 Millisekunden, im Vergleich zu zwei Sekunden mit einem ESP32
über normales WLAN über ein Access Point, das ist natürlich ein riesen Unterschied,
ob wir sagen wir mal insgesamt 100 Millisekunden brauchen, was zu übertragen, oder jedes Mal
zwei Sekunden, zwei Sekunden sind für Batteriebetrieb definitiv viel zu lang, 100 Millisekunden
sieht so mal über Daumen gepeilt, die Batterielebenszeit eigentlich ganz gut aus, wenn wir es richtig
machen, kriegen wir sogar noch viel sparsamer, denn, was man nie vergessen darf, das da,
die 150mA an Strom brauchen wir nur bei WLAN Datenübertragung, das heißt in 99% der Fälle
machen wir ja gar keine WLAN Datenübertragung, weil wir gucken, ob Post da ist, und wenn
keine Post da ist, dann schicken wir auch keine Benachrichtigung, und wenn Post da ist, dann
merken wir uns einfach, dass Post da war, und schicken das nächste Mal auch keine Benachrichtigung,
oder irgendwie so in der Richtung, könnte man das machen, also sprich, nicht jedes Mal,
wenn wir aufwachen alle fünf Minuten, brauchen wir auch diese 150mA für diese Zeit, und
das bewegt sich eher in der Region von 40mA, wenn er eben keine WLAN Übertragung macht.
So, aber ich glaube jetzt ist ungefähr klar, was ich vorhabe, das heißt, als allererstes
müssen wir jetzt den da einrichten hier, den da, der ESP2866, der die Daten vom Briefkasten
und der Tür dann am Ende empfangen soll, muss wirklich alle fünf Minuten gecheckt werden,
kann gecheckt werden, wie du willst, im Prinzip kannst du checken, wie du lustig bist, Scheiß
C++, ja ich bin auch kein großartiger C++ Fan, aber sag mal so mit der Arduino Geschichte
kommt man eigentlich ganz gut klar. Oh, der Eaxe ist auch da, nice. So, das heißt, als
erstes werden wir jetzt anfangen, mal diesen ESP2866, der quasi als, so ein bisschen als
Relay dient, vom Briefkasten ESP32 ins Netzwerk, weil der dann wiederum, der dann wiederum
ins WLAN, ich brauch mal ein Access Point, WLAN, weil der dann wiederum, der geht ja
ins WLAN, der geht ja ins WLAN und der schickt dann auch per MQTT das Ganze an meinen Smart
Home. Ah, also der ESP32 am Briefkasten, der meldet einfach nur, ey, Poster, oder hier
Tür wurde aufgemacht, der empfängt das per ESP Now und schickt es dann selber weiter
per WLAN über MQTT an meine Heimautomatisierung. Wie lange wird der Akku denn umgefallen mit
deinem Plan? Joa, also das hier ist ein bisschen utopisch, ja, das ist ein bisschen, ein bisschen
sehr viel, aber ich denke, wenn man das ordentlich, wenn man das ordentlich optimieren, wahrscheinlich
so 2-3 Jahre oder so. Ja, aber mit einem Jahr könnte ich auch leben, aber ich denke
mal, also 2 Jahre sollten da eigentlich schon drin sein. Äh, Flow 96, das ist ja grad
der Sinn davon, da ist ein Schalter dran und wenn er die Tür aufmacht, dann wacht das
Ding direkt auf, GPIO 15 mache ich den dran, wacht das Ding direkt auf, schickt das hin
und da haben wir eine Verzögerung von, keine Ahnung, 50-60 Millisekunden, wo ich mitkriege,
dass die Tür aufgemacht wurde. Das ist natürlich schon relativ schnell. Okay, also fangen wir
mal an, wir fangen jetzt an mit dem, ähm, mit dem ESP62, ich habe das Projekt ja auch
schon mal ESP, ESP Now Server genannt, also sprich, das Ding ist dafür da, die Sachen
vom Tor zu empfangen, ähm, sich ins WLAN zu connecten und die Sachen per MQTT zu verschicken.
Woher kennst du dich mit diesen ganzen Microcontrollern aus, äh, gelernt für meine Heimautomatisierungsgeschichten?
Die Tür wird mit dem Interrupt, ja, das wird GPIO Wake Up, GPIO 15 Wake Up, das ist einfach
Übung und das, das, Arduino ist ne, also, Arduino ist, das ist ja kein Arduino, das
ist Arduino-kompatibel, das Ding, ähm, aber so ein ESP32 und ein ESP866, hier mit Arduino
als Framework, ist ne super Sache, damit einzusteigen. Okay, also, was brauchen wir jetzt? Das muss
erst mal kurz in mich gehen, weil jetzt müssen wir anfangen, den, den, den Kram zu basteln.
Also, wir brauchen erst mal, ähm, ich mach mal kurz einfach ne stinknormale Debug-Ausgabe,
dass ich grad mal ein bisschen reinkomme, ich hab so lang gelabert. So, Serial, Beginn,
also übrigens heute mal sehen, heute sind wir mal unterwegs, äh, unterwegs. So, Upload
und gucken wir mal. Es sollt jetzt einfach nur Test-Test-Test ausgeben, also absolut
Noob-Style, nicht viel besser als Hallo Welt übertragen, please. Ja, okay, das funktioniert,
ähm, okay, also, was wir auf jeden Fall brauchen, ist die Möglichkeit, das Ding Remote uns die
Ausgabe anzugucken. Ach ja, übrigens, was ich euch auch mal zeigen wollte, vielleicht
interessiert es den ein oder anderen, wie man mit einem ESP32 oder mit einem Mercur-Controller
wie man OTA machen kann, also sprich, Firmware-Update übers WLAN, ohne dass man das Ding immer per
USB anschließen muss. Soll ich euch das mal zeigen, wie das geht, falls das den ein oder
anderen interessiert. Passt nämlich ganz gut, weil das Ding, das hängt ja dann nicht
am Rechner dran, sondern hängt hier irgendwo unten an der Steckdose, ähm, deswegen ist
ziemlich beknackt, dass ich das dann für Firmware-Update immer abmachen müsste. Ich
zeig euch jetzt mal, wie man Firmware-Update macht, das ist total einfach eigentlich,
ähm, und wollte ich hier eh drinne umsetzen, deswegen passt das eigentlich ganz gut. Gibt's
da eine Library für, ja klar, wir verwenden das, selbst machen tue ich das nicht. Obwohl
ich hab's auch schon mal selbst gemacht mit dem eingebauten Web-Server, ist gar nicht
so kompliziert, aber es ist viel einfacher, wenn man das mit einer fertigen Library macht.
Leider gibt es diese Library nicht für Plattformer-O, das heißt, ich muss die selbst, muss die
mal selbst Git clonen. Ich nehme meistens das Ding hier für, das ist ziemlich gut,
das ist auch recht beliebt mit 109 Sternen auf GitHub. Wir klonen uns das jetzt einfach
mal nach Documents-Platform-Io-Projects-Lib-Git-Clone-Git-Cleaner-Git-Clone-Bam. So, und wenn wir jetzt hier gucken,
da ist es. So, da, oh, Include, Web, OTA, zack, alles drin. Und das witzige ist, im Prinzip
war's es jetzt schon, das einzige, was man machen muss, also es ist mit der Library nämlich
super einfach, das einzige, was man machen muss, ist Web-OTA-Handle in seiner Main-Loop
aufrufen. Das ist alles, mehr muss man nicht machen. Und, äh, gut, man muss sich noch
ins WLAN connecten, das machen wir jetzt erstmal. So, Wi-Fi, Begin. So, da musst du die SSID
angeben, die hole ich hier immer aus meiner Secrets-Klasse, weil ich, wie gesagt, immer
noch nicht will, dass irgendjemand mein Passwort und mein WLAN-Zeug sieht. Secrets-Passwort,
zack. Jetzt müssen wir quasi sagen, ey, warte mal, bis, ähm, bis WLAN-Connected ist.
Also, falls ich, Leute, falls ich irgendwas im Chat überlese, schreibts, schreibts einfach
nochmal, kann sein, dass ich da gerade nicht ganz, nicht ganz durchblicke. Naja, zumindest
müssen wir jetzt erstmal sagen, ähm, bis das Ding nicht Connected ist, das WLAN, dann
warten wir so lang. Was machst du, was machst du genau beruflich? Boah, da hatte ich mal,
da haben wir ein Kommando für. Ist das Sebaro oder irgendein Motta, der das Kommando kennt?
Ich hab ein Kommando, da hab ich das nämlich schön, da hab ich das mal schön erklärt.
Ich hab keine Ahnung, ist das vielleicht Ausrufezeichen Beruf? Es könnte Ausrufezeichen
Beruf sein. Ja, genau. Wunderbar. Oder Arbeit. Das ist, Leute, ihr wisst ja, ich finde das
toll, ihr wisst, die Sachen, meine Comments, besser als ich, als ich selbst. So, jetzt
müssen wir erstmal warten, bis das Ding ins WLAN, bis das Ding ins WLAN Connected ist.
Und zwar, kann man das ganz einfach machen, man kann hier einfach fragen, ist Connected?
Und wenn es nicht Connected ist, dann warten wir einfach, bis es Connected ist. So, und
dann geben wir irgendwie mal einen Punkt oder so aus und dann sagen wir Delay, Delay 500
oder so. Und jetzt verbindet er sich zum WLAN, können wir uns jetzt schon mal angucken.
Er verbindet sich jetzt zum WLAN und macht erstmal sonst nichts weiter, aber er verbindet
sich zum WLAN, das ist schon mal, schon mal nicht verkehrt. Damit wir wissen, was das
Ding für eine WLAN Adresse hat, müssen wir das Ganze natürlich ausgeben. Nämlich Dings
Local IP. Jetzt connectet sich das Ding zum WLAN und gibt uns die IP, die er hat. Das
ist ganz praktisch, weil die IP brauchen wir und die MAC brauchen wir auch gleich noch.
Einfach mal so, weil es mir da nach ist. Pull-Request kontrollieren, schnellst nicht mehr. Äh,
mir macht das eigentlich meisten Spaß. So, guck, jetzt gibt es hier schon aus, unter
welcher Adresse man, ja, also würde es, wenn man es richtig schreibt, ausgeben, unter
welcher Adresse man neue Firmware hochladen kann. So, laden wir das nochmal hoch, dass
es uns die IP ausgibt und dann gucken wir mal, dann zeige ich euch, wie man das mit Firmware
Update übers Netzwerk macht, weil das ist eigentlich total simpel. Aber vorher brauchen
wir noch eine weitere Library, nämlich für Debug, beziehungsweise für Status-Ausgabe
über Telnet, weil das Ding hängt ja aktuell hier per USB-Kabel dran. Connected. So, das
ist die IP von dem Ding. So, und wenn ich jetzt mit dem Browser da drauf gehe, Port
8080 ist Default, WebOTA, kann ich hier neue Firmware hochladen. Der Rest handelt diese
Library für mich. Das ist natürlich extrem nice. Ich kann euch das mal zeigen, wir machen
jetzt einfach mal, wir erstellen mal eine neue Firmware und laden die übers Webinterface
hoch. Um welche Hardware geht es gerade? Wir machen, ich hab mich nämlich extra, diesmal
machen wir was besser als die letzten Male. Heute haben wir einen ESP-866 und einen ESP-32.
Aktuell basteln wir gerade an dem da rum. Is connected, bla bla bla. Okay, vielleicht
mache ich jetzt noch etwas Sinnvolles da drinnen. Ja, genau, ich binde noch die Debug-Library
ein. Dann nehme ich meistens die hier dafür. Das Ding muss man einfach installieren und
dann startet es ein Telnet-Server, wo man sich darauf verbinden kann und sieht dann quasi,
wenn das Ding im WLAN hängt, auch die Debug-Ausgaben, ohne dass man es eben per USB-Kabel angehängt
haben muss. Und mit diesen zwei Sachen haben wir eigentlich auch schon alles, was wir brauchen,
um das Ding eben nicht mehr an einem USB-Kabel anschließen zu müssen. Wir können Firmware
hochladen und wir können uns die Debug-Ausgabe angucken per Telnet. Also eigentlich alles,
alles was man, was man so braucht. Ne, das klingt irgendwie anders. Genau. Debug-Beginn,
ein Hostname brauchen wir noch. Okay, machen wir ein Hostname. Wie nennen wir das Ding?
Hostname ESP Now Server. Wir nennen es einfach mal so wie unser Projekt. Wie unser Projekt.
Hostname. Zack. Dann müssen wir ihm noch sagen, dass er auch alle, dass er auch serielle Ausgabe
machen soll, was sonst ein bisschen doof wäre, wenn er das nicht macht. Debug-Beginn können
wir erst machen, nachdem WLAN initialisiert ist. Eigentlich relativ logisch. Und jetzt
in Zukunft verwenden wir einfach Debug anstatt Serial, um Sachen auszugeben. So. Und ich
kann euch auch gerade mal zeigen, dass das funktioniert. Ich kompiliere das jetzt mal
schnell. Dann laden wir die neue Firmware per Web-Interface hoch, dass man auch mal sieht,
wie man eben Firmware-Update machen kann, ohne dass die Kiste direkt per USB dranhängt.
Gut. Neue Firmware ist kompiliert. Ich gehe jetzt hier auf die Webseite von meinem Controller.
Da müssen wir hier browse. So, da muss ich jetzt erst mal Documents, Platformer, Broadcheck,
ESP-NOW. Und die Firmware liegt, glaube ich, hier drunter. Ne. Obwohl lag die kompilierte
Firmware immer drunter. Ich kann mir das jetzt mal nehmen. Ja. Da, oder? Ah, hier. Da liegt
die Firmware drunter. So. Und die können wir jetzt ganz einfach flashen. OTA, also in
dem Fall halt über den Browser auf die Kiste drauf. Update. So. Und danach sollten wir
uns auch per Telnet verbinden können. Und das Ding funktioniert wieder. Soweit. Soweit
die Theorie. Hoffentlich haben die Kiste jetzt neu gestartet. Gucken wir mal, was die Serial-Ausgabe
sagt. Sie sagt nichts. Okay, gucken wir mal, ob das mit dem Telnet funktioniert. Ne, so
ganz scheint das nicht zu funktionieren. Ähm. Okay. Aber Firmware-Update hat, glaube ich,
schon mal funktioniert. Kann es sein, dass Eigenbau Smart Home echt ein Mammutprojekt
ist? Ja, wenn man alles so machen will, wie man, wie man möchte. Klar, ja. Aber da ist
der Weg das Ziel. Das macht man auch nicht, um fertig zu werden. Ah, ich hab noch was
vergessen. Deswegen ging das Scheiß nicht. Ich muss hier noch sagen, Debug, Debug-Handle
muss ich noch sagen. Dann funktioniert das nämlich auch. Okay Leute, wir laden die neue
Firmware noch mal per Web-Interface drauf, dass man sieht, dass der Scheiß auch funktioniert.
Fertig kompiliert. Zack. Firmware-Update. So. Und jetzt sollten wir uns auch per Telnet
verbinden können. Und das sollte funktionieren. Ha, funktioniert. Jetzt haben wir nicht zugeguckt.
Das funktioniert. Also sprich, wir können jetzt per Web-Interface, können wir Firmware
hochladen, neue und wir haben eine Debug-Ausgabe per Telnet. Also quasi alles, was man so braucht,
um das Ding betreiben zu können, ohne dass es per USB am Rechner hängt. Natürlich ist
es, wenn man da jetzt, Debug entwickelt immer noch praktisch, das Ding per USB an den Rechner
zu hängen, aber wenn das fertig ist und man hat es dann irgendwo an der Steckdose hängen,
also am Arsch der Welt, in Zweifel unter dem Dach oder so, dann will man da vielleicht,
wenn man kleine, kleine Firmware-Updates drauf spielen will, will man ja vielleicht nicht
unbedingt jedes Mal per USB dahin. Kannst du mal anzeigen lassen, wie viel RAM frei ist.
Ganze 40, 40.000 Bytes sind frei. So 40 KB oder so. Also richtig viel Massive-Huge-RAM
hier, 40 KB. Oder ist das schon in Kilo Byte oder sind das sogar 4MB? Weiß ich gar nicht
gerade. Wahrscheinlich ist das schon in Byte oder? 4MB wäre viel zu viel. Okay, weiter
im Text. Also wir haben uns jetzt per WLAN verbunden. Machen wir noch mal eine Sache
und zwar, wir gucken mal, was das für eine Geschwindigkeit standardmäßig hat. 74.000,
da stellen wir nämlich jetzt mal unsere Geschwindigkeit für die seriöse Schildstelle ein und sagen
hier Monitor Speed gleich. Und dann uploaden wir den Kram nochmal. Gut, okay, also wir
können weitermachen. Wir haben uns jetzt verbunden zum WLAN. Bisher haben wir nichts
Großartiges gemacht und wir haben unsere WLAN IP ausgegeben. Also alles noch kein
großartig kompliziertes Ding. Schauen wir mal Farben an, Farben sind nie verkehrt. Ach
so, eine Sache, die ich eigentlich sonst immer mache, habe ich hier vergessen. Nämlich
ich sage immer nach jedem Neustart, hey WLAN Disconnect, Access Point Disconnect, nur für
den Fall der Fälle, dass irgendwas hängen geblieben ist und Persistence Falls. Sonst
packt das manchmal rum und versucht sich irgendwo hin zu verbinden, was es eigentlich gar nicht
machen soll oder sowas. So ist das nämlich viel besser. Dann geben wir noch hier mal
eine Zeile aus, so nach dem Motto, jetzt geht's los. Das mache ich auch immer ganz gerne
am Anfang, dann sieht dann die Debug Ausgabe hier unten auch ein bisschen schöner aus.
So, genau, jetzt geht's los. WLAN verbinden, wir wollen jetzt mit dieser Kiste ja sowohl
in ESP Now Gateway aufmachen als auch uns normal ans Klein ins WLAN verbinden. Was bedeutet
Persistence Falls, man kann dem Ding sagen, dass er sich WLAN Daten speichert, also man
kann ihm sagen, dass er beispielsweise die Zugangsdaten aus seinem Flash Speicher speichern
soll, da muss man die hier nicht Hardcoden und man kann ihm beispielsweise auch sagen,
glaube ich zumindest, ich habe das nie überprüft, ob das wirklich so ist, der kann sich auch
seine DHCP Reservierung und sowas per Flash merken, dann ist theoretisch, aber nur theoretisch,
das macht unterm Schrich nicht viel aus, das Connecten schneller. Aber mir ist es lieber,
ich weiß den Stand, was passiert. So, ich mache noch mal einen Delay rein, man weiß
ja nie, das ist ja auch nicht die Kiste, die an der Batterie hängt am Ende. So, also was
wir jetzt noch machen müssen, wir müssen den Modus umstellen von unserem WLAN Controller
auf dem ESP 2866 und zwar müssen wir einstellen, dass der eben weder im Access Point Modus noch
im Station Modus, das ist ein bisschen bescheuert die Bezeichnung für WLAN Modi, Station Modus
ist ein ganz normaler WLAN Client, also das was man mit einem Tablet und einem iPhone
auch macht. Access Point ist, man macht einen Access Point auf dem Controller auf, wo sich
andere dran connecten können oder man macht so eine Mischung, sowohl Access Point als
auch Client Modus und das ist das was wir machen wollen, denn wir wollen den Access
Point aufmachen für unsere ESP Now Kommunikation, wir wollen allerdings auch selbst als WLAN
im WLAN hängen, das heißt wir brauchen in dem Fall beides, wir brauchen Access Point
Modus und Station, das heißt übrigens nicht Static, es heißt Station Modus, ich dachte
früher auch immer das heißt Static. So, dann setzen wir noch mal schnell den Host,
den Hostname, dass ich in meiner DHCP Reservierung auch sehe, was was ist, ja und dann machen
wir unseren Beginn. So, dann warten wir bis WLAN Connected ist, ja das war's eigentlich.
So, jetzt sind wir WLAN mäßig Connected, als nächstes müssen wir unseren ESP Now Gateway
aufmachen, das ist auch relativ einfach, man weiß was man verwenden muss für Funktion,
dass das ganze allerdings funktioniert, ich guck übrigens hier nebenbei ein bisschen
ab, ich hab mir vorher, ihr wisst ja ich bereite das immer so ein bisschen vor, dass ich das
nicht komplett blind mache, ich hab mir schon vorher ein bisschen was raus kopiert, wie
das prinzipiell funktioniert, dauert das ja alles immer so lang. So, dann muss man erstmal
den Header einbinden für ESP Now, ohne eingebundenen Header, kein ESP Now und jetzt kann man beispielsweise
sagen, ähm, mach mir mal einen Access Point auf, für ESP Now, so und jetzt kommt der
Witz da dran, wir wollen gar keinen richtigen Access Point aufmachen, wir wollen so einen
Access Point Lite aufmachen, äh, glaubst du man kann sowas komplett ohne Hardwarekenntnisse
also löten und so machen, ja, jaja, kannst du machen, also du kannst dir einfach zum
üben, früher über kurz oder lang, wirst du dir eine Load Column kaufen, eine Load Station
kaufen und ein bisschen mehr machen, aber auch zum Anfang brauchst du das nicht, du
kaufst den NodeMCO, ich würd eigentlich sagen kauf dir gleich den ESP32, damit kann man
im Endeffekt mehr machen, der ist schon komplett fertig, der kommt mit angelöteten Pins und
alles fertig und USB Anschluss, kannst du einfach an den Rechner anstöpseln, Visual Studio
Code, Platform IO, ähm, drauf als IDE, das war's, dann kannst du, hallo Welt, Delay 1000,
gib ihm, Upload, ähm, und die meisten Sensoren muss man auch nichts löten, die meisten Sensoren
kannst du ganz normal einfach mit, mit Kabels holst du dir bei Amazon hier irgendwie so
ein 40er Pack, ähm, das sind übrigens 3er, du holst dir einfach ein 40er Pack, kost 2,50
oder so, holst dir noch ein 40er Pack Jumperkabel oder DuPornkabel, wie auch immer man das genau
nennt, und dann kannst du Sensoren anschließen, also die meisten Sachen musst du nicht löten,
je nachdem was du dann später machen willst ist es auf jeden Fall aber nicht verkehrt,
ja, aber so zum Anfang ein bisschen zu basteln, also die meisten Sachen, die ich hier habe,
hier ist auch nichts großartig gelötet, das einzige, wo ich öfters löten muss ist, ähm,
wenn ich halt Controller verwende, die keine Pins dran haben, dann musst du ja entweder
die Sensoren und Sachen direkt dran löten oder du lötest halt, du musst die Pins dran
löten, ja, genau, äh, Predboards kannst du auch nehmen zum stecken, also du musst nicht
löten, aber auf der anderen Seite muss man sagen, ich dachte früher auch das ist ein
großer Akt, aber löten ist äh, tatsächlich nix, nix wildes, also, es ist wirklich nichts,
wo man irgendwie bedenken haben müsste, dass man es nicht hinkriegt, wichtig ist nur, dass
man sich ordentliche Lötstation oder Lötkolben kauft, sonst kotzt man, ja, wenn man sich
zum Beispiel, sowas gibt es wirklich, Amazon, wenn man sich zum Beispiel den USB-Lötkolben
kauft, sowas gibt es, ähm, hat auch schon dementsprechend kack Bewertung, der funktioniert
zwar prinzipiell, aber Spaß macht es damit nicht, ich hab mir mal auch Spaß so eingekauft,
ja, weil ich einfach mal wissen wollte, ob das wirklich funktioniert, ähm, aber, ja,
der funktioniert aber, es ist scheiße damit zu arbeiten, mit dem USB-Lötkolben, das ist
wirklich Müll, äh, was richtig gut ist, ähm, ne, nicht Esra, Ersa, genau, die hab ich,
die ist extrem gut, würde ich mir niemals kaufen, einfach so, wenn ich nicht weiß,
dass man es braucht, ja, das ist jetzt nur so eine Sache, wenn man schon weiß, dass man,
dass man eben eine Lötstation haben möchte, dann kann ich das Ding empfehlen, das ist
wirklich gut, das ist die beste Lötstation, die ich je hatte, oder besser gesagt, der
beste Lötkolben, den ich je hatte, äh, ist wirklich super, die hat auch auswechselbare
Spitzen, also das Ding ist richtig gut, das hat nen flexiblen, flexibles Kabel zum Lötkolben,
der Lötkolben ist nicht viel größer als ein dicker Stift, du kannst, du kannst die,
ähm, kannst die Spitzen austauschen, vorne relativ einfach, es heizt sau schnell, machst
er an, 10 Sekunden später, 350 Grad, ähm, es ist alles dabei, also, wenn man wirklich
sagt, ich möchte eine Lötstation haben, ist das Ding wirklich gut, die gibt's auch noch
ein bisschen, ein bisschen, ein bisschen kleiner, gibt's die auch noch, da kostet es dann nur
150 Euro, ähm, aber die ist wirklich gut, ansonsten kann man doch erstmal mit nem USB-Lötkolben
ein bisschen rumfuddeln, ja, oder man kauft sich so nen 20 Euro-Lötkolben, klar geht
auch, ok, also wir müssen jetzt unseren ESP Now Access Point starten, äh, und dazu würde
ich sagen, definen wir mal noch ein paar Sachen, wir müssen dafür nämlich einstellen, ähm,
tja, was müssen wir eigentlich genau einstellen, was das Ding für eine ID hat, was das Ding
für ein Passwort hat, für einen Channel und ob die SSID hidden ist oder nicht, allerdings,
wohlgemerkt, das sieht zwar so aus wie normale Access Point Konfiguration, ist es allerdings
nicht, das ist, das ist kein Access Point, wo später dann irgendwie ein iPhone oder
so drüber joinen könnte, das ist rein ein Access Point, wo ESP Now drüber konfigurieren
kann, da geht nicht so viel mit, also so wie wir es einstellen jetzt, ok, also wir brauchen
hier, was brauchen wir, definen Access Point Name, ähm, wie nennen wir denn das Ding,
Mitch Stremsor, ne, irgendwie, irgendwie hat er es, keine Ahnung, äh, ESP Now, ist
eigentlich vollkommen egal, wie das Ding heißt, so, dann müssen wir noch definen sowas wie
WLAN Channel 1, ähm, ist übrigens egal, man kann 1 nehmen, man kann, man kann alles mögliche
nehmen, ja, aber ich nehme mal, ich nehme mal 1, äh, weil eine Sache muss einem klar
sein, dass das funktioniert, das ist auch das, wo ich am Anfang übelste Probleme mit
hatte, ESP Now und WLAN gleichzeitig zum Laufen zu bekommen, der Channel vom WLAN, was man
hier joint, äh, der Channel vom WLAN, was man hier joint, muss der gleiche Channel sein,
den man auch für ESP Now verwenden.
Ja, also ich würde, ich würde auch empfehlen, weiß auch nicht, was im Chat diskutiert wird,
also ich würde empfehlen bei Lötkolm oder bei der Heißloft Pistole oder sowas, da würde
ich gucken, dass ich mir nicht unbedingt die billigste China-Kacke kaufe, weil man, man
sieht das, man sieht das ganz gut an den Amazon-Bewertungen zum Beispiel, wenn man jetzt mal sucht, Heißloft,
so, ähm, wenn man hier zum Beispiel danach sucht, hier, das ist das billigste Ding, was
es gibt, das ist für 14,99, das ist, hört sich zwar deutsch an, aber es ist wahrscheinlich
innen drinne billigster China-Crap, weil wenn man sich die, die, ähm, Bewertungen durchschließt,
Vorsicht, Achtung, bei dem einen sprüht das Ding Funken, bei dem anderen löst sich, löst
sich auf und fackelt ab, stinkt, brennt, ähm, so, also, wahrscheinlich ist es keine gute
Idee hier 10, 20 Euro zu sparen.
Das ist dann eher so die Premium-Variante.
Von Steinel hab ich auch eine, allerdings eine andere, ich hab eine, wie heißt die,
HL, 19, 20 E, man sieht schon, da sind da einfach mal 30 Euro Preisunterschied dazwischen,
aber von der Qualität her merkt man das, bei der hab ich beispielsweise keinen, die kann
man, die kann man hinten aufstellen, die ist so gemacht, dass quasi hier eine, hier gerade
ist, das heißt, die kann man auch hochkant hinstellen, hier hab ich keine Bedenken, dass
das Ding anfängt zu fackeln, dass das Ding umfällt oder sonst was, das stinkt auch nicht,
ja, das, das kokelt nicht, das funktioniert einfach und ist auch schnell heiß.
Wofür braucht man so ein Ding, meinst du jetzt die Lötstation oder heiß, heiß Dings, äh,
Heißluftpistole, zum Blasen, null alter, null, ja, genau, zum Beispiel für Schrumpfschläuche
oder aber auch, um manche Sachen zu löten, also richtig, im Prinzip benutze ich hauptsächlich
für Schrumpfschläuche, es stimmt und ich hab's früher, ja, ich hab's früher auch
mit einem Feuerzeug gemacht, im Feuerzeug ist es schwierig, die Dinger gleichmäßig
hinzukriegen, außerdem fackelt man mit dem Feuerzeug gerne mal Kabel an, die im Schrumpfschlauch
drin stecken, also es geht mir eine Heißluftpistole deutlich besser als mit dem Feuerzeug, ich
hab's früher auch mit dem Feuerzeug gemacht, du kannst auch sagen, um festgelötete Teile
abzulösen, ist es zum Beispiel auch ganz, ganz praktisch, dann tust du dir, dann brichst
du dir mit dem Lötkolben einen ab, das einzige, wie du das hinkriegst mit dem Lötkolben ist,
ähm, mit ein bisschen Kupfer oder halt mit so einem Sauge-Ding, also das löst hinwegkriegst,
ähm, aber mit so einer, mit so einer Heißluftpistole ist es eigentlich ganz praktisch, dann kannst
du das komplette Ding aufheizen und dann nimmst du die Zange und ziehst es ab oben, zum Teilen
ablöten, oder wenn du SMD-Teile hast, kannst du dich natürlich toll damit ablöten oder
auch anlöten, ja, ja, gut, aber wir wollen jetzt den Access-Point aufmachen, also, oh
Gott, ich lass mich heute wieder übel sidetracken, oder? Wir haben wieder noch fast nichts geschafft,
also, okay, Channel brauchen wir, ähm, okay, lass mal kurz in mich gehen, Access-Point-Name
brauchen wir, Access-Point, ähm, Access-Point-Passwort brauchen wir, ja, brauchen wir leider, aber
wir brauchen es nicht, also wir stellen es nur ein, ohne dass wir es brauchen, klingt
jetzt bescheuert, aber die Funktion möchte ein Passwort haben, auch wenn wir es im Endeffekt
nicht verwenden, also brauchen wir ein tolles Passwort, also haben wir hier sowas hier,
SMD-Debated-Poggers, bestes WLAN-Passwort aller Zeiten, sidetracks or FPS, ja, ist schlimm,
okay, damit können wir den Access-Point starten, also sagen wir, PName, AP-Passwort, ähm, Channel,
wir heiten bei unserer SSID, auch wenn es überhaupt nichts bringt, Max Connections
4 ist okay, so, ähm, wohlgemerkt, wir werden den für ESP-Nau verwenden, der funktioniert
gar nicht als normaler Access-Point, so, ähm, jetzt müssen wir uns noch ausgeben lassen,
ob das Ganze funktioniert hat, also sprich, wenn Result nicht okay ist, dann geben wir
aus, ähm, sowas wie, wie, keine Ahnung, ähm, AP-Failed, ne, was soll das, und, äh, wenn
es okay ist, dann sagen wir, ne, dann sagen wir nix, das juckt mich nicht, wenn es okay,
ich gehe davon aus, wenn es nichts ausgibt, dass es okay ist, glaub, das ist der bessere
Ansatz in dem Fall, so, was wir jetzt auf jeden Fall machen müssen, ist noch, wir müssen
uns die, ähm, Mac vom, äh, vom Access-Point ausgeben lassen, weil die Mac vom Access-Point
ist nicht gleich der Mac von unserer Netzwerkkarte, so, also brauchen wir sowas wie AP-Mac, und
dann, ähm, irgendwo hier gibt es was, Mac-Adress, genau, so, dann gucken wir mal, ob das jetzt
funktioniert, dann solltet ihr den Access-Point aufmachen und uns ne Mac-Adresse raushauen,
so, ich kommentiere das, das OTA mal wieder aus, weil wir machen jetzt eh kein OTA über
den Browser, ob man so einen 8266 als Repeater verwenden kann, gute Frage, wahrscheinlich,
wahrscheinlich, ob's Sinn macht, ist wieder was anderes, im Prinzip machen wir ja sowas,
bloß dass wir auf der einen Seite ESP-NOW sprechen, auf der anderen Seite sprechen wir
halt normales WLAN, gehen müsste es wahrscheinlich, das Ding als Repeater zu verwenden, ja, das
Ding, das ist ja so, so, WLAN-Connection, bla bla bla, bla bla bla bla bla bla, connected,
übrigens, dass die Debug-Ausgabe hier so aussieht, liegt daran, dass wir jetzt Debug
und nicht Serial-Print verwenden und das Farben ausgibt für die Kommandozeile, ok,
sechstes Point Mac, speicher ich mir mal hier gerade, die brauchen wir nämlich gleich noch
für den anderen, für die andere Kiste, so, jetzt müssen wir ESP-NOW initialisieren,
das ist relativ einfach, ESP-NOW init, das war's, das muss man nicht machen, ESP-NOW,
achso, vielleicht sollte ich mal gucken, ist ok, machen wir es anders, machen wir es wieder
wie oben, ist not ok, schreiben wir auf Debug raus, ESP-NOW init failed, ich gehe nicht
davon aus, dass init failed, aber wenn init failed, dann möchten wir es wissen, so, gucken
wir mal, ob das jetzt funktioniert, so, ähm, genau, als nächstes müssen wir unseren callback
registrieren, wenn neue Daten empfangen werden, also im Prinzip ist das so, man übergibt
dieser Funktion eine Funktion, die dann aufgerufen wird, wenn neue Daten empfangen werden, spielst
du das neue Gears 5, wenn's rauskommt, ja auf jeden Fall, alle Gears gespielt, auch wenn
ich das letzte ziemlich langweilig fand, ich fand das 3er schon ziemlich langweilig
und ehrlich gesagt sogar schon das 2er zum Teil, das 1er ist das beste Gears, da nehmen
sie sich vor allem noch nicht so ernst, in allen anderen Gears Teilen machen sie so auf
Story und Emotionen, was halt Gears nie gewesen ist, von am Anfang, ja, deswegen fand ich
den ersten Gears Teil eigentlich am besten, so, jetzt müssen wir der ganzen eine callback
Funktion übergeben, oder aber, wir machen jetzt hier auf krasse C++ Owner und verwenden
mal ein C++ Lambda, da kann ich mir allerdings die Sündachs immer nicht merken, ich glaube,
ich glaube, vom Prinzip her ist die Sündachs relativ simpel so, das ist jetzt halt ein Lehrer,
Lambda, genau, so, das brauche ich natürlich noch Funktion, wie muss denn so eine ESP Now
überhaupt aussehen, ESP Now REC, die haben ja auch wieder tolle, tolle, wo ist denn sowas
aussehen, 12, die backen wir mal, die backen wir mal, ah ja, hier steht es, das brauche
ich, das brauche ich als Parameter, ah ja, U8 MAC Address, U8 Data, U8, ne, warum meine
ich U8, normalerweise verwendet man hier unter Arduino eigentlich eher das da, wahrscheinlich
im Prinzip alles das gleiche unter der Haube, so, funktioniert man Lambda jetzt, hey, funktioniert,
krasser Scheiß, äh, Multiplayer habe ich Gears Over nie großartig gespielt, der Friseur ging
übelst ab, der hat Gears Over Multiplayer bis zum Erbrechen gespielt, ok, so, und was
machen wir in unserem Lambda, in unserer Funktion, wenn wir neue Daten empfangen, geben wir einfach
das, äh, Ahnung, gehen wir da auf, ok, Gott Packet, eh was, mehr machen wir erstmal nicht,
wir wollen ja gucken, ob die Datenübertragung überhaupt funktioniert, so, wir haben ein
Callback, der sagt aktuell einfach nur, ey, ich habe was gekriegt, wenn er was kriegt,
ähm, oder lasse ich den schon was, komm, wir lassen den, wir lassen den, wir lassen
den die Daten ausgeben, wir lassen den die Daten ausgeben, da muss ich jetzt einmal gucken,
dass hier mit meinen C++-Skills nicht an die Grenze kommen, von dem was ich C++-mäßig
auf die Reihe kriege, so, wie mache ich denn jetzt da draus irgendwas, was ich gescheit
ausgeben kann, den fahren wir, klar, der fahren wir, der, der, der, du kannst, geh mal iFrisi
auf Twitch ein, der streamt öfters, also ich müsste da draus jetzt ja eigentlich sowas
wie, wie einen String machen können, mit Länge, geht das, kann ich den String da draus machen
mit Data und Länge, ich meine U8 ist ja im Prinzip, im Prinzip ein Chaar, wir machen
das jetzt mal ganz einfach, ich gebe einfach nur, ähm, ich gebe einfach nur das erste,
das erste Byte aus, sonst nix, boah, was zum Teufel, was hat er jetzt für Probleme, warum
kann ich das nicht printen, muss ich das jetzt erst casten oder was, ähm, liebe C++-Profis,
was hat er jetzt für Schmerzen eigentlich, so, was war, wo war, was will er jetzt, warum
geht das nicht, warum kann ich nicht einfach nen Byte nehmen und zu Chaar casten, ach PrintF,
ich will ja gar nicht, ich will nur Print, haha, richtig, äh, ja, der Chat wusste es
mal wieder, im Prinzip hab ich's richtig gemacht, ich hab die falsche Funktion verwendet, ja,
genau, so wollen wir das haben, dann muss ich das ganze wahrscheinlich auch nicht casten,
sondern das kriegt er wahrscheinlich sogar selbst auf die Reihe, rewrite in Rust, genau,
so, ok, geben wir mal, wir können's aber auch einfach so machen, äh, wir machen einfach
ne Schleife, äh, bis dahin und geben einfach jedes Byte aus, was er bekommt, so, so, das
ist nicht schlecht, ok, ähm, dann sind wir soweit mit dem Sender, äh, mit dem Empfänger
eigentlich fertig, das mit MQTT verschicken machen wir dann danach, würde ich sagen, wenn
das funktioniert, dass der was kriegt, ok, send, äh, nicht send, upload, so, dann stöpsel
ich den ab, dann stöpsel ich den ab und, ähm, mach den eigentlichen ESP32 dran, der
für die Tür und für den Briefkasten drankommt, ich hoffe ich hab nix vergessen, ja, ich mein,
gut, wenn ich was vergessen hab, muss ich dann wieder mal schnell anstöpseln oder über
das W dann hochladen, WebOTA ist aber aus, stimmt, ja dann schließe ich den an, das wird
schon funktionieren, ich hab das ja schonmal, ich hab das schonmal gemacht, das müsste eigentlich,
müsste eigentlich prinzipiell gehen, ok, ähm, ich stöpsel den jetzt mal, ich stehe
jetzt auf und stöpsel den in die Steckdose daneben dran rein, delete, und jetzt gucken
wir mal, ob wir da Remote per Telnet draufkommen, ähm, ha, bam, äh, BeatBroad, ja, ja, auf
jeden Fall, Rust ist ne super Sache, ich, was ich an Rust lustig finde, Rust gibt's
ja auch schon ein paar Jahre, es ist gar nicht so neu, ähm, ich mein, im Vergleich
zu C und C++ ist es natürlich super neu, gibt's aber auch schon seit 4-5 Jahren als
Rust, ähm, was ich bei Rust immer witzig finde, egal wo, auf Reddit oder in irgendwelchen
Foren oder in Kommentarsektionen, ähm, ist die Rust Task Force immer am Start, also
sobald es irgendwie darum geht, ähm, mit anderen Sprachen ist sofort einer dann am
Start und sagt, ja, aber Rust, immer so, an sich ist Rust ne super Sprache, zwar ne
Sprache, in der es irgendwo nervig ist zu programmieren, weil es halt einem vieles verbietet,
allerdings oftmals zurecht, ja, also wenn Rust sagt, es ist nicht sicher, dann liegt
es in der Regel nicht daran, dass Rust zu doof ist, sondern dass man selbst zu doof ist.
Da muss ich ein bisschen an diese ganze Checker-Geschichte gewöhnen, von Rust, dann ist es eigentlich
echt nice.
Kann man mit Artstilungs immer noch punkten, wusste ich gar nicht, okay, ähm, wir haben
den Kram geuploadet, äh, er läuft und jetzt machen wir ein neues Projekt für unseren
ESP32, ich hab schon den Schalter angestöpselt und ich hab auch schon den Ultraschall-Sensor
angestöpselt.
Das heißt, wir können gleich loslegen, wenn ich das USB-Kabel dran krieg, krieg das USB-Kabel
aber nicht dran.
Warum krieg ich das USB-Kabel nicht dran?
Alter, wo ist das Problem?
Ah, jetzt, connect to virtual machine, remember choice, zack, okay, das heißt wir brauchen
jetzt ein neues Projekt, und zwar brauchen wir ein ESP Now Client, nennen wir den jetzt
einfach mal, da haben wir aktuell ein NodeMCU dran, ja, okay, auf gehts.
Die Insiders sind am Start, so, so, ähm, aber hier zu, so, ESP Now.
Als erstes setzen wir mal hier, weil es ein NodeMCU ist, unseren Monitor-Speed auf, ich
kanns mir immer nicht merken, 11500, ne, ah, wie ist das?
Ich kanns mir immer nicht merken, es ist 2, ne, so, oder?
Ja, genau, haha, passt.
Ah, bilden wir das ganze mal, äh, und jetzt machen wir unsere Main auf.
So, was wir hier natürlich auch wieder brauchen ist include ESP Now, sonst funktioniert das
ganze nicht, und wir messen auch gleich mal von Anfang an, also, die, die, die Loop hier
unten werden wir gar nicht brauchen, wir machen das alles in Setup, weil wir gehen ja dann
in Deep Sleep, also, so, ähm, muss ich mal kurz auf meinen Spickzettel gucken, dass ich
hier nix, äh, nix übersehe, was wir machen müssen, so, also wir werden auf jeden Fall
erst mal jetzt messen, wie lange das dauert, weil das ganze hat natürlich nur Sinn, wenn
wir deutlich schneller sind, wie gesagt, wir gucken uns ja noch mal unsere Batterie, äh,
die Calculation an, ähm, wenn wir nicht viel schneller sind, als, äh, normal WLAN an Access
Point zu connecten, dann hat das ganze auch keinen großartigen Sinn, das heißt, wir müssen
auf jeden Fall gucken, äh, wir sind nicht in SieSharp, ähm, wir müssen auf jeden Fall
gucken, wie schnell der ganze Mist ausgeführt wird, das heißt, wir merken uns jetzt mal
die Millisekunden am Start, und äh, ziehen dann die Millisekunden am Ende von ab, und
dann wissen wir, wie lange das ganze gelaufen ist, so, Beginn, äh, übrigens, falls ich
hier ein bisschen zu sehr vor mich hin, äh, schwubbele und mache, und man irgendwas überhaupt
nicht checkt, oder dem man was wissen will, schreibts einfach ganz normal, wie, wie immer,
ja, macht das ja schon, äh, in Chat, ich muss jetzt mal in Chat reingucken, falls ich was
übersehen habe, ähm, ne, hab ich nicht, ok, also weiter im Text, wir nehmen die Zeit
vom Start, jetzt machen wir mal sowas wie, ähm, weil wir jetzt gleich jede Menge Ausgabe
kriegen, machen wir mal hier ein paar New Lines davor, dann machen wir mal wieder unsere
übliche, oder Max, Max Entry Message, so, mach ich eigentlich bei jeder, bei jeder Geschichte,
da seh ich, ok, wenn, wenn hier ne Reihe mit Gleichheitszeichen kommt, dann, dann gehts
los, so, ähm, jetzt müssen wir erst mal ESP Now initialisieren, machen wir uns ne eigene
Funktion dafür, wobei, ne, wir probieren erst mal aus, ob, ob's theoretisch funktioniert,
äh, if SP Now in it, not ok, ja, das ist ein bisschen doof, beim ESP 866 heißt es ok,
beim ESP 32 heißt es ESP ok, weil China, keine Ahnung, was schreibt's nicht, dann macht
er nicht weiter, ne, ähm, ok, also wenn wir das da drinnen haben, ich muss jetzt erst
mal überlegen, in welcher Reihenfolge man das Ganze machen muss, muss ich mal kurz abgucken,
ne, pass schon, mach ich richtig, ESP Now in it, wenn das nicht ist, dann, haha, ne, ne,
wir brauchen, wir brauchen noch ein bisschen mehr, dass hier nämlich richtig sehe, wenn
ich das hier nämlich richtig sehe, brauchen wir noch ein bisschen mehr, wir brauchen nämlich
noch, ähm, wir brauchen nämlich noch ein paar Datensstrukturen, die wir nachher, wobei,
dann warten wir's mal ab, ok, ähm, wenn ESP Now in it failed, dann, print, was ist, ESP
Now failed, return, ach ne, return können wir nicht machen an der Stelle, weil es noch
keine Funktion ist, so, ähm, failed, so, als nächstes, muss man, oder davor besser gesagt,
muss man erst mal komplett, äh, muss man erst mal sagen, wir wollen eigentlich an Wlan
gar nicht großartiges was verwenden, was muss man da vorher einbinden, so irgendwie Wi-Fi,
ja, äh, Mode, diesmal müssen wir sagen, hey, wir wollen das Wlan in Station Mode verwenden,
allerdings, wie gesagt, das ist eh nur fake, das ist ESP Now und unter der Haube hat das
eigentlich mit normalem Wlan überhaupt nichts zu tun, dann sagen wir wieder Persistence
Falls, frag mich nicht warum, weil ich das immer sag, und dann sagen wir wieder Disconnect,
weil ich das jedes Mal so mach, so, ESP Now in it und jetzt gucken wir mal, ob der prinzipiell
funktioniert, schauen wir mal, ha, hallo coin, ja, ich, äh, bin unter anderem namen auf,
auf Twitch, oh, oh, eine, eine, eine Donation, da muss ich jetzt tatsächlich ja mal nachgucken,
wann kommt neue Folger, Team, Dankeschön, äh, Leona Bomber 1997 für 5 Euro, ähm, tja,
so gute Frage, ich kanns dir nicht beantworten, weiß ich nicht, ich hab mir allerdings schon
genug Themen aufgeschrieben, ähm, für, für neue Videos, ich muss aber, ich muss es halt
einfach mal machen, ja, aber ich, ich hab's die letzten Livestreams und so schon gesagt,
ich hab nicht so wahnsinnig viel Bock auf, auf YouTube, als Plattform irgendwie, und
ich mein, sowas, was ich hier mache, ich find's ja eh voll, total abgedreht, irgendwie,
dass mir irgendwie teilweise, sag mal jetzt, 87 sind wir jetzt, manchmal sind wir sogar
über 150, wenn ich irgendwelche abgedrehten Dinger programmier, wo wahrscheinlich die
Hälfte der Leute, oder mehr als die Hälfte der Leute, die zuguckt, so wahrscheinlich
und immer genau checkt, um was es hier überhaupt geht, äh, äh, könntest du eigentlich mal
ein Stream machen, in dem wir ein Hack für irgendein Game programmieren, oh, also erstens
wollt ich dazu sagen, da kenn ich mich nicht so gut aus, ähm, so ein paar Sachen, so ein
paar Basics-Sachen, irgendwie versuchen Ram auszulesen oder sowas, krieg ich schon noch
gebacken, ähm, da müssen wir uns halt auch in ein Spiel raussuchen, wo wir nicht gebannt
werden, also wir könnten mal was machen in der Richtung, dass wir ein Overlay basteln,
der dann irgendwas anzeigt, während man das Spiel auf hat, wir können ja sowas billiges
nehmen wie Solitär oder so, irgendwas, irgendein Mist, der halt nicht über Steam läuft oder
so, da können wir mal gucken, ja, das könnten wir mal machen, das ist eigentlich keine schlechte
Idee, aber da bin ich jetzt nicht so der Pro drinnen, smarten Briefkasten, der hättest
du gerne, ja, vielleicht, vielleicht ist da noch was dabei, es gibt, glaub ich, nix
gescheites Fertiges, ok, also, wir haben jetzt unser ESP Now installisiert, wir testen jetzt
einfach mal, ob wir was schicken können, und dazu müssen wir eine ganz wichtige Geschichte
machen, nämlich, wir müssen sagen, ESP Now, und dazu brauchen wir jetzt die Mac Adresse
von unserem Access Point, und den haben wir ja vorher aufgeschrieben, wir müssen jetzt
nämlich sagen, ESP Now add pair, und daran sieht man auch, das ist kein WLAN, das ist
eigentlich einfach nur Funk auf der WLAN Frequenz, was diese Dinger da machen, deswegen ist es
auch so viel schneller, oh, äh, nicht Secrets anklicken Max, nicht Secrets anklicken, Teile
anklicken, das hier ist die Mac Adresse, die wir brauchen, so, die Mac Adresse, und damit
wir die Mac Adresse verwenden können, müssen wir da erstmal ein Array draus machen, und
quasi ein Element pro byte reinschreiben, also die Mac Adresse, also, wir brauchen jetzt
quasi einen byte Array aus der Mac Adresse, also, hier Konst, uint, remote mac, so, und
da initialisieren wir das Ding jetzt mit 0x3, 0x71, 0xbf, 0x3a, Mac Adressen tippen, ist
ganz, ganz fein, 0x09 und 0xfd, so, jetzt haben wir unsere Mac Adresse hier drin stehen,
dann müssen wir jetzt nämlich sagen, hey, wir möchten mit dieser Mac Adresse kommunizieren,
das machen wir ganz, ganz einfach, so, jetzt machen wir hier einen
über die Leute, die so extrem ausflippen, wie dankbar sie allen sind, wenn sie zugucken und sowas.
Und ich hab ja, ich hab ja damals immer gesagt, alles, alles, alles, alles gelogen, ja.
Aber ich muss sagen, mittlerweile, glaube ich, ist bei manchen wirklich was dran.
Ich glaube, das ist bei vielen wirklich so.
Die übertreiben es natürlich massiv, ja. Und bei manchen und bei den meisten wird es zwar wirklich einfach berechnend sein,
weil die wissen, die Leute hören das gerne.
Aber ich glaube, bei vielen, bei vielen ist es tatsächlich so.
Die freuen sich wirklich.
Und letztendlich, weil ich meine, ich merke es an mir, wenn ich jetzt hier so Dinge mache, die halt jetzt wirklich nicht Mainstream sind, ja.
Ich freue mich da wirklich drüber, wenn jetzt gerade 90 Leute zugucken.
Das ist halt, das ist halt ultra nice, ja.
Und was ich auch immer ganz toll finde, ist halt einfach, wenn im Chat was los ist.
Man muss ja sagen, hier im Chat bei mir ist ja gefühlt mehr los, als bei Leuten, die 500 Zuschauer haben.
Oder 1000 Zuschauer bei einem oder anderen.
Du hast Leute, ich gucke ja immer noch die einen oder anderen Overwatch-Streams zum Beispiel,
da ist total viel los und du hast manche, da ist quasi nichts los, haben aber trotzdem 2000 Zuschauer.
Das ist übelst krass.
Und dafür ist bei mir wirklich enorm viel los für jetzt 86 Zuschauer.
Ja, das stimmt.
Und ich bin eine einzig relativ große, relativ große, ja.
Also mein 680 im Vergleich zu nichts.
Und im Vergleich zu YouTube-Aufrufen ist das Ganze auch nichts.
Aber trotzdem macht es mir irgendwie mehr Spaß.
Schon merkwürdig, ne.
Also ich habe quasi die Wahl, 25.000 am ersten, ja doch, ungefähr,
sagen wir mal 20.000 Aufrufe am ersten Tag auf YouTube oder um die 90 Zuschauer auf Twitch.
Und mir macht es irgendwie mehr Spaß.
Ich finde das ist cool.
So, also jetzt müssen wir uns mal einstellen, an welche Mac-Adresse wir das schicken wollen.
Wir machen jetzt einfach mal unsere Testnachricht.
So, dazu brauchen wir die Mac-Adresse von unserem ESPNOW Partner.
Also der jetzt hier quasi an der Steckdose hängt rechts.
Mac-Adresse ist hier, haben wir ja einge-, kann ich das mal oben löschen.
Mac-Adresse haben wir eingestellt.
So, und damit das Ganze funktioniert, brauchen wir jetzt, weil, weil halt, ne,
das schreibe ich jetzt ab, weil ich keine Ahnung habe, warum das so sein muss,
weil der Hersteller einfach nur sagt, das muss so sein.
Leute, ihr müsst echt nicht donaten.
Ein Euro, Flow 690, danke schön, ich fühle mich nicht genügend, sehr schön.
Das ist ja gut, wenn du dich da nicht dazu genügend fühlst.
Also wir brauchen jetzt ein ESPNOW per Info.
Sagt der Hersteller, also wenn ihr auf der Herstellerseite guckt, das ist Democode,
den ich entweder von GitHub irgendwo kopiert habe oder von der Herstellerseite, eins von beidem.
Ich glaube, der, der Abstand ist aber tatsächlich von der, von der Herstellerseite.
So, ESPNOW per Info.
Ich kann euch das nicht so genau erklären, weil, weil der Hersteller halt sagt,
dass das so sein muss.
So, mehr müssen wir an der Stelle aber auch nicht machen.
Und jetzt können wir sagen, was für ein Pair wir kommunizieren wollen.
Nämlich mit dem da. Und da müssen wir vorher in die Struktur noch ein bisschen was reinschreiben.
Da müssen wir nämlich sagen...
Hab ich verguckt. Ach ja, genau, wir müssen sagen, welchen WLAN-Channel wir verwenden wollen.
Nämlich eins, das ist das, was ich vorhin gesagt habe, dass das WLAN, was wir verwenden
und die ESPNOW-Kommunikation müssen auf dem gleichen Kanal laufen, sonst funktioniert das Ganze nicht.
Und wir wollen das Ganze nicht verschlüsseln. Das können wir irgendwie später mal machen.
Security First ist nicht so angesagt.
Benutzt du für deine persönlichen Projekte Git nur offline-comment oder auch online-push?
Ich benutze es nicht bei allem, weil, sind wir mal ehrlich, wenn man hier irgendwie sagt,
ich skript SH und schwuppelt sich dann hier irgendwas zusammen, scheiß drauf,
das check ich auch nicht ins Git ein, sobald ich im 1, 2, 3, 4 Stunden je nachdem dran sitze an irgendwas
und dann sag, äh, jetzt bist du da schon eine Weile zugange oder wenn so der Punkt ist,
dass ich was umstricken will und aber einen funktionierenden Stand behalten will,
dann mach ich immer Git-init im jeweiligen Ordner. Aber mach ich eigentlich hauptsächlich bei mir lokal
und ich hab ne GitLab, äh, nicht kein GitLab, ich hatte früher ein GitLab.
GitThea heißt Frontend hier am Start, sieht ein bisschen aus wie GitApp in Thean,
aber eigentlich könnte ich das löschen, weil ich push da eh so gut wie nie hin.
Ich werde Git eigentlich zum größten Teil lokal. Ah Leute, jetzt hört aber auf.
What the fuck? Ja, abonnieren geht nicht. Abonnieren geht nicht. Abonnieren ist nicht möglich.
Ähm, so, okay. Wir machen hier gerade richtig Progress, jetzt lenkt mich mal halt ab.
Okay, also wir haben den Kram jetzt geadded, ähm, jetzt müssen wir noch und das sagt auch der Hersteller,
dass das so geht, jetzt müssen wir noch die Mac-Adresse, die wir hier oben haben,
dieses Byte-Array müssen wir jetzt noch da rein kopieren.
Das geht bestimmt, also ich bin mir jetzt gar nicht so sicher, was ich hier eigentlich treibe.
Das ist, das ist Democode vom Hersteller. Also ich vermute mal, dass das Folgendes macht,
das kopiert einfach sechs Elemente aus diesem Remote-Mac, kopiert das eben hier da rein.
Also wahrscheinlich, wahrscheinlich hätten wir hier oben das auch direkt schreiben können, oder?
Ach nee, hier oben geht das natürlich nicht. Warum gibt es kein Progress-Emote,
weil auch keiner ein Progress-Emote gemacht hat? Ganz einfach.
Okay, so, und jetzt sind wir eigentlich bereit mit unserem ESP-NOW-Gateway zu kommunizieren
und mal gucken, ob das Scheiß funktioniert. Ich weiß, nachdem ich mehr oder weniger den Beispiel-Code genommen habe,
sollte das jetzt eigentlich funktionieren, aber schauen wir mal, ob das funktioniert.
Vielleicht habe ich hier irgendwo was vergessen. Also, um was zu sehen, jetzt geht es aber los hier.
Perdition, dass Max Partner wird. Ja, wie gesagt, ich muss noch ein paar Tage streben,
dass ich mich wieder Partnern bewerben kann. Was ist dieses ESP-NOW eigentlich?
Das ist ein ganz, ganz light-white WLAN-Ersatz, wenn man zwischen zwei Microcontrollern kommunizieren will.
Problem ist, ich weiß nicht, ob du am Anfang dabei warst, Problem ist halt das hier.
Ich möchte an meinem Briefkasten einen ESP32 hinhängen, der mir Bescheid sagt, wenn ein Post da ist,
und der mir Bescheid sagt, wenn einer die Hoftür aufmacht.
Das Problem ist, das Ding soll an der Batterie laufen, was heißt, jegliche Zeit, wo das an ist,
und nicht im Sleep, ist zu viel Zeit, weil dann die Batterie schneller leer geht,
und das Verbinden zum WLAN-Access-Point von einem ESP32 dauert ungefähr zwei Sekunden,
und das Versenden der Daten und Verbinden zu MQTT dauert noch mal 1,5 Sekunden.
Wir sind wahrscheinlich zwei bis drei Sekunden an mit relativ hohem Energieverbrauch, weil wir eben WLAN-Pakete verschicken,
und das ist zu lang. Dann macht es das Ding, keine Ahnung, zwei Monate an der Batterie, und dann ist es leer.
Das Ziel ist jetzt, dass wir ESP-NOW verwenden zur Kommunikation von der Kiste zu einem anderen ESP.
Der hängt am Strom, und der nimmt die Daten per ESP-NOW entgegen und schickt sie dann weiter übers WLAN.
Klingt ein bisschen sehr, äh, was machst du, was gegen Witterungseinflüsse, äh, eine Plastikkiste mache ich gegen Witterungseinflüsse, Einflüsse, Flüsse.
Einfach eine Plastikkiste drumherum.
Hier, EP, 65 Box, äh, eine kleine, wenn es geht. Ja, irgendwie sowas hier kommt da drum. Was Kleines, ist viel zu groß, viel zu groß.
Einfach eine Staub, Wind, Wetter, ding, feste, festes Gehäuse. Ich glaube, das habe ich. Ja, das habe ich, glaube ich.
Das habe ich mir mal bestellt, ein Pack von Volvo, ordentliches Gehäuse, kannst du auf AliExpress kaufen, ist noch viel billiger.
Ja, ich würde die Kisten mit dem 3D-Druckersatz austrunken, aber 3D-Drucken, wasserdicht, äh, ist so ein, so ein Ding, ja.
Da kommt der, da kommt der Controller rein, die Batterie rein, ja, das ist die Batterie, Batterie rein, Controller rein, Loch reingebohrt mit dem Kegelbohrer.
Übrigens, eine der Tools, die man unbedingt braucht, hätte ich nie für möglich gehalten, dass man sowas braucht, aber es ist eines der besten Erfindungen ever, Kegelbohrer.
Wenn man, wenn man in Plastik und Holz und sowas schöne Löcher bekommen will, Kegelbohrer, beste.
Kannste nämlich stufenlos vergrößern, da fängst du hier nebenan, machst das kleinste Loch rein, machst, nimmst die nächste Stufe, machst ein Loch rein,
dann machst du es genauso groß, das Loch hier neben an der Box, was du brauchst, um ein Kabel durchzukriegen und ähm, an das Kabel kommt dann der Schalter dran für das Hoftor.
Oder machst halt so, dass genau das Kabel durchpasst, entweder ist es schon dicht, weil es halt so knapp bemessen ist, oder du schmierst noch ein bisschen Kleber drum herum, dann ist es auf jeden Fall dicht.
Ja, oder machst vorne so einen Ring und hinten so einen Ring davor, das wird auf jeden Fall dicht, damit, weil mit so einem Kegelbohrer kannst du wirklich das Loch genauso groß machen, wie es sein muss.
Das braucht man, das ist wirklich sehr enorm praktisch, hätte ich auch nicht für möglich gehalten.
So, also wir senden jetzt was über ESPNOW. Ähm, hab ich noch, hab ich noch irgendwas vergessen, Leute, ich muss mal kurz noch auf meinen Spickzettel gucken.
Ähm, ne, probieren wir mal. ESPNOW send. Ähm, so, hier kann ich, hier kann ich jetzt die Daten angeben.
Da schreiben wir einfach mal 0xFF, also 255, Länge 1. Geht das so?
Das geht natürlich nicht. Kann ja einen Int nicht einfach so konvertieren. Ja, ok, dann, äh, Uint.
Geht's jetzt? Geht auch nicht. Alter, was ist denn jetzt wieder das Problem, ey?
Ach so, ha, ich muss da einen Error draus machen, dass es funktioniert. Ok, also, Uintdings, da war irgendwie was, was ich...
Data 1 gleich das da. Manchmal geht mir C echt auf den Sack. So, ha, jetzt geht's doch.
Jetzt funktioniert's. Ok, ähm, ähm, tja. Wollen wir mal gucken, ob's funktioniert, ha?
Nachher eins habe ich noch vergessen. Wir müssen noch einen Callback registrieren, der uns Bescheid sagt, wenn der Sendeprozess fertig ist.
Das müssen wir noch machen. Sehe ich hier gerade, ähm, das mache ich hier davor.
Diesen Teil können wir noch schöner machen, der gefällt mir irgendwie nicht. Der sieht auch so, so nicht C++ mäßig aus, sondern so, so extrem rotsy.
Wir müssen nämlich noch sagen, registerSendCallback. So, und dann machen wir wieder ein Lambda dran.
So, und der Lambda kriegt, da müssen wir wieder gucken, was der für Optionen kriegt.
Wie not found. Wie soll ich denn nachgucken, was der für Dinger braucht, wenn er nur, ach, da steht's doch.
Und warum kann ich nicht zur Definition springen, wenn es, wenn es doch, wenn es doch da steht?
Okay, das brauchen wir. Hab ich noch was im Chat übersehen?
Was hältst du von Blockchain-Technologie?
Der kann ich jetzt, ich bin auch ehrlich gesagt nicht sonderlich, sonderlich, kenne ich da auch nicht sonderlich, sonderlich gut mit aus.
Ich bin da glaube ich der Falsche für, zumindest ist es keine Lösung einfach überall Blockchain dran zu schreiben, dass man hip ist.
Welche Idee ist das? Das ist Visual Studio Code mit Plattform I.O. für die Arduino-Geschichte.
Ja, man muss dazu sagen, diese Visual Studio, äh, die, die Plattform I.O. Plugin, das gibt's glaube ich auch nur für, für VS Code.
Okay, also, sagen wir jetzt hier Print, Print, dann schreiben wir jetzt einfach nur irgendwie sowas wie, ähm, ähm, Send, okay.
Oder was sagt der Hersteller dazu, wie man das macht? Ich, ich copy paste mir das jetzt einfach.
Ähm, der Hersteller sagt man schreibt da noch den Sendestatus hin und der Sendestatus, achso, der Sendestatus, den hab ich ja da hinten.
Äh, also sag ich hier Print, Send, okay, äh, und Status, Print, achso, Printline, Status.
So, okay, jetzt gucken wir, ob der Scheiß funktioniert. Ich verbind, also, der müsste jetzt hier Pakete senden und da müssten, müssten die Pakete ankommen.
Ich hoffe, das funktioniert. Scheiße, kommt nix an. Fuck.
Okay, es funktioniert schon mal nicht. Aber, geb ich da drüben überhaupt was aus?
Ja, jetzt ist die, jetzt ist die Frage, woran's liegt. Das ist natürlich jetzt ziemlich doof, ja. Send, okay.
Kann ich den hier neu starten über diese Debug-Ausgabe? Nee. Tja.
Woran könnte das jetzt liegen? Das ist eigentlich mehr oder weniger Example Code vom Hersteller.
Hab ich noch irgendwas vergessen?
Wir starten mal neu, sollte das Initialisieren failen.
Ja, also wenn ihr Ideen habt, dann schießt's los. Wie sie sehen, sehen sie nichts.
Also, ich würde jetzt mal sagen, der sendet schon korrekt, das ist okay. Wir sollten noch mal gucken, ob wir die MAC-Adresse richtig haben, glaube ich.
Doch, wir sollten mal gucken, ob die MAC-Adresse richtig ist. Vielleicht, vielleicht habe ich die MAC-Adresse falsch geschrieben.
Gucken wir mal. Ich, ich ziehe mal den anderen wieder rein und raus, dann gucken wir mal, ob das funktioniert.
Gucken, ob ich schnell genug bin und...
Nee, ich war wahrscheinlich nicht schnell genug. Dann muss ich das andere nochmal aufmachen und gucken.
Ja, aber prinzipiell funktioniert es. Guck doch mal. In der Zeit, wo ich es rausgezogen habe, konnte er nicht senden, oder?
Ach nee, keine Ahnung.
Tja, dann stöpseln wir den anderen nochmal an und gucken, wo das Problem ist.
Vielleicht habe ich die MAC-Adresse falsch. Schauen wir mal.
Ja, ich, ich stöpsel es nochmal um.
Warum macht man USB-Kabel immer falsch rum rein?
Ja, connect.
So, also, wo ist jetzt genau das Problem?
Erstmal wieder uploaden.
Wo ist das Problem? Eigentlich hätte ich erwartet, dass da so was wie Package Received kommen.
Hab ich da irgendwas vergessen?
Müssen wir mal, müssen wir mal schauen jetzt. Wahrscheinlich habe ich die MAC-Adresse falsch oder so.
Irgendwas in der Richtung, irgendwas in der Richtung wird schon sein.
Hier, MAC.
Warum geht denn das jetzt?
Oh, ich habe die Debug-Ausgabe falsch gemacht. Das ging die ganze Zeit.
Ich habe, ich lasse über Serial ausgehen und nicht über Telnet. Das hat die ganze Zeit funktioniert.
Na gut, wenn wir gerade dabei sind, da können wir noch die Ausgabe ein bisschen schöner machen.
Package Received 255, ja.
Das hat die ganze Zeit schon funktioniert.
Ach, der Bostick hat es erkannt.
Tja, so ist es. Manchmal hängt es an kleinen Sachen.
Gut, dann kann ich jetzt hier wieder umstöpseln.
Ja genau, der Unterschied bei Debug ist, dass es eigentlich nur Debug heißt.
In Wirklichkeit hier diese Remote-Debug-Klasse verwendet, wo man sich dann bei Telnet verbinden kann.
Und normal Serial ist halt über USB.
Ah, dann stöpsel ich das mal wieder um.
Das ist so facke.
Jetzt können wir nämlich zur eigentlichen Geschichte kommen, nämlich dem ESP für den Briefkasten.
Das ist ja daher. Nachdem wir jetzt wissen, dass die ESP-Now-Kommunikation funktioniert.
Da, da, siehst du, 255. Ich kann euch auch zeigen, dass es funktioniert. Wir senden jetzt mal hier, keine Ahnung, eins.
So, und wenn der jetzt sendet, dann sendet der eins. Wer hat das gedacht? Funktioniert.
So, also wir sehen, dass im Prinzip klappt das.
Okay, wir machen das Ganze jetzt mal ein bisschen schöner. Wir machen uns eine Send-Funktion.
Aber wahrscheinlich brauchen wir das noch ein bisschen öfters hier. Also send data.
Und jetzt nehmen wir mal ein bisschen C++-Gedöns, damit es wahrscheinlich der Patrick vor ist.
Ist er überhaupt da? Wird er sich wahrscheinlich freuen.
Nämlich dann nehmen wir hier mal einen Vektor für data.
Da können wir nämlich ein neues C++-Feature ausprobieren, was ich letztens in irgendeinem Stream gesehen habe.
Ich mache normalerweise relativ wenig in C und C++.
Aber ich habe letztens in Stream geguckt, wo irgendwie einer die neuen 2017er Features vorgestellt hat.
Und eine Sache fand ich da eigentlich ganz cool.
Moment, wo ist jetzt das Problem? Was hat er hier für Schmerzen?
Achso, ja.
Genau, dann nehmen wir einen Vektor für. Wann soll es eigentlich funktionieren?
Ja. Und zwar können wir jetzt sagen.
Genau, send, bla bla. Ich zeige es euch gleich.
Wir packen das nämlich jetzt mal hier rein. Schmeißen das weg.
Data sagen wir hier den Inhalt vom Vektor und als Länge die Size vom Vektor.
Und dann machen wir ein Delay hinten dran. Ein kleines Delay von 5 Millisekunden oder so.
Das sollte eigentlich reichen zum Senden.
So, und jetzt kann man, das ist wohl neu in C++, also zum Beispiel in C Sharp geht das schon ewig.
Jetzt kann man hier sagen send data.
Und dann kann man so ein Listen Initialisierungs-Ding hier übergeben.
Und sagt dann sowas hier wie 0xff, 0x, keine Ahnung, 1.
So, und dann macht er da draus quasi schon für ein, ein Vektor und wandelt das um in Bytes und schickt das.
Das habe ich letztens gesehen in einem Stream.
Das gibt es noch nicht so lange.
Das geht erst seit C++17. Ich bin mir nicht sicher, ob es seit 17 geht.
Aber es ist auf jeden Fall eines der neueren Standards, wo das geht.
Ich bin da nicht so auf dem Laufen, was, wie C++-Twan dabei gekommen ist.
Der Kenpachi sagt, das gibt es seit 11, ja, das kann auch sein.
Es ist zumindest relativ neu für C++-Verhältnisse.
Guckt, und jetzt empfängt er zwei Pakete, einmal mit 255 und einmal mit 1.
Das könnte in Java Code auch mal kommen. Gibt es doch, also in C Sharp kannst du was Ähnliches machen.
Was du in C Sharp machen kannst, was sehr praktisch ist, du kannst sowas hier machen.
Sowas hier in der Richtung.
Das heißt dann, dass du unendlich viele Int-Parameter übergeben kannst.
Da musst du nicht direkt einen Error übergeben.
Und ich könnte wetten, sowas gibt es doch in Java bestimmt auch.
Ach so, ja, das stimmt, das gibt es nicht. Ja, das ist richtig.
Wobei, wobei, das kannst du in C Sharp zumindest auch machen.
Du könntest ein IE-Nummerable-Dings nehmen von Int als Parameter und damit dann deinen Vektor initialisieren.
Aber das stimmt schon, das hat was, das ist eigentlich ganz schick.
Das ist wirklich ganz schick, so direktes Äquivalent gibt es da, glaube ich, nicht.
So, okay, und jetzt müssen wir eigentlich, um mal was Sinnvolles zu machen,
jetzt müssen wir unseren Schalter einrichten, den wir haben.
Ich mache jetzt noch mal eine Funktion aus, ich räume das mal ein bisschen auf.
Boyd-init-esp-now.
Ich kann gerade nicht tippen.
Now, da lagern wir den ganzen Mist hier mal aus.
Da muss ich mir dieses hässliche Zeug hier unten mal angucken.
Init-esp-now.
Format-Document. Boah.
Fuck.
Warum?
Warum fällt das Formaten?
Unused Variable Start. Ach ja, stimmt, die Ausführzeit brauchen wir noch.
Also, wir müssen mal dran denken, es dauert über WLAN ungefähr drei Sekunden,
bis ich mich per WLAN verbunden habe und per MQTT was geschickt habe.
Das müsste mit it-esp-now hier jetzt deutlich, deutlich kürzer sein.
Das probieren wir aber aus, nachdem wir was verschickt haben.
Wir machen mal hier den Kram aus der Loop wieder raus.
Und jetzt machen wir mal das, was wir eigentlich machen wollen für die Haustür.
Nämlich sagen, geh in Deep Sleep, allerdings Wache auf, wenn der Schalter auf GPIO 15 gedrückt wird.
Ja.
Okay, also machen wir hier noch mal einen Define oben hin.
Define, Wake Up Pin ist gleich GPIO 15.
So, GPIO 15 ist Wake Up Pin.
So, das muss man ihm jetzt sagen, dass er aufwachen soll.
Hier machen wir Init, dann sagen wir ESP Sleep.
Genau, Wake Up auf GPIO 15.
Und zwar, wenn der High ist.
Also in dem Fall, ich habe das Ding angeschlossen auf Normally Open.
Guck mal, dass ich meinen Schalter richtig angeschlossen habe.
Ich sehe es jetzt gar nicht, ehrlich gesagt.
Da werden wir gleich sehen, ich glaube, ich habe ihn.
Okay, was auch immer, wir werden gleich sehen, ob es funktioniert.
Wenn nicht, muss ich es auf Low stellen und dann geht es auch.
Würde das auch klappen, wenn du quasi ein normales Array initialisierst und in eine Variable vom Typ Auto steckst?
Ich habe keine Ahnung.
Na gut, der alter Typ ist ja nicht Auto.
Der Typ ist ja der Typ.
Typ ist wie wahr in C Sharp, das ist im Prinzip einfach nur Syntax Form Compile.
Meine Uhr, ja wahrscheinlich, weil die einfach nicht gestellt ist.
Ich stelle mal kurz meine Uhrzeit.
Irgendwann ist dann meine Uhrzeit auch gestellt.
So, meine Uhrzeit ist gestartet, ich warte.
Also, so viel hinten dran war ich jetzt nicht.
Okay, also Sleep, wir wollen aufwachen, wenn GPIO 15 auf High geht.
Und das wollen wir Enter, Enter, Deep Sleep machen.
Sleep, Enter, Alter, Enter, Sleep, die Funktionsnamen.
Sleep, Start, Deep Sleep, Start.
So, jetzt sollte es eigentlich, jetzt sollte er eigentlich einschlafen.
Okay, wir müssen übrigens mal das Delay hier weg machen.
Er sollte jetzt angehen, einschlafen und wenn ich dann den Schalter drücke, sollte er wieder angehen.
Das heißt, dann lassen wir uns jetzt mal hier die Zeit ausgeben, wie lange er an war.
Weil wir wollen ja erreichen, dass er so kurz wie möglich an ist.
Das funktioniert doch nicht.
Da wäre ich, das ist gerade C++GBate, wette ich mit euch, das ist, das ist der Ultra C++GBate, das hier.
Dass das kompiliert, da kommt bestimmt nicht raus, was ich mir denke.
Da kommt bestimmt irgendwie, irgendwie, irgendwas raus.
Da kommt garantiert nicht raus, Exact Time plus die Millisekunden.
100% nicht, da kommt, da kommt, das ist, das ist C++GBate.
Da kommt wahrscheinlich jetzt irgendwie, Exact Time plus das, was an der Speicheradresse steht, wo gerade die Millisekunden hinzeigen oder sowas.
Irgendwie, wollen wir mal gucken, was da rauskommt.
Memory Access Violation, sowas gibt es auf dem ESP32 nicht.
Es gibt Crash oder es geht.
So, mal den Knopf drücken.
Ich sag's euch doch, guck mal, was da rauskommt.
Random irgendwas im Flash wird ausgelesen, ey.
Random irgendwas im Flash.
Gut, tja, keine Ahnung, dann machen wir irgendwie sowas, das geht bestimmt dann.
Oh, oder auch nicht.
Ne, da fehlt jetzt ne Klammer.
Lol.
Das ist wirklich, so Dinger, dass das, ich find's ehrlich gesagt Fail, dass das überhaupt einfach so syntaktisch in Ordnung geht.
Das lädt doch geradezu ein, irgendeinen Scheiß zu machen.
Okay, Accept Time, 68 Millisekunden, das ist natürlich saumäßig schnell, deutlich schneller als 2 Sekunden, die wir eigentlich haben wollten.
Die wir ursprünglich hatten, aber wir versenden hier auch noch nix.
So, also, man sieht schon, er wacht auf, ne.
Er wacht auf immer, wenn ich hier klick, Achtung, klick, Auffahren.
Also ihr seht's, das geht relativ schnell.
Ab und zu schwankt's mal, warum auch immer.
Hatte jemand mal links zum Akkulaufzeitrechner, hier guck, da, da.
Da.
Okay.
Ich hab Hunger, fällt mir grad auf.
Mal was futtern.
Okay, also wir verschinken jetzt, jetzt müssen wir noch gucken, von was wir aufgeweckt werden.
Werden wir aufgeweckt vom Timer oder werden wir aufgeweckt vom Interrupt, GPIO Interrupt?
Also, brauchen wir sowas hier.
Ja, cause gleich wake up, eins muss man den Chinesen in dem Fall so gut halten oder von welchen.
Ne, Koreaner sind's glaube ich sogar, oder?
Sind's Koreaner?
Espresso, wo kommen die, wo kommen die her?
Koreaner?
Achso, der chinesische, der chinesische Firma Espresso, okay.
Wobei, ich bin mal nicht, also ich.
Ich bilde mir irgendwie eine Sendung aus Korea.
Ah, okay, nein, okay, alles klar.
Okay, es ist aus China, ja.
Ja, aber mal davon abgesehen, dass es aus China ist.
Die Funktionsnamen und so.
Und generell dieses ESP-Framework, was sie da haben, das ist ganz gut.
Also, da scheinen schon Leute zu sitzen, die wissen, was sie machen.
Soll's, soll's auch bei chinesischen Herstellern geben.
Heutzutage kommt auch alles aus China, ja, genauso wie Samsung, ne?
Weil Samsung auch so chinesisch ist.
ESP-Koll, ich glaube, das ist ein Laubensauce-Projekt, ja.
Das kann man auf GitHub sogar mitmachen, glaube ich, wenn man will.
Das ist auf jeden Fall auf GitHub.
Okay, ähm, wir gucken jetzt, warum wir aufgewacht sind.
Und, ähm, ach, das kann der nicht autovervollständigen, okay.
Also, uns interessieren eigentlich nur zwei Fälle, weshalb wir aufwachen.
Und zwar einmal, wir wachen auf wegen Timer.
Oder wir wachen auf wegen, ähm, wegen GPIO wird gedrückt.
Das sind eigentlich die zwei, die zwei Sachen, die wir haben.
So, das heißt, wir müssen jetzt den Timer noch setzen.
Wo ich immer nicht merken kann, wie das, wie das, wie das funktioniert.
Sleep, wake, wake up, Timer?
Timer, wake, Timer?
Ah ja, so, ähm, wir wollen aufwachen, alle, alle fünf Sekunden wollen wir mal aufwachen.
Ähm, einfach schon, xr, wir wollen alle fünf Sekunden wollen wir aufwachen und dann gucken wir mal.
Warum rückt der das hier eigentlich nicht ein?
Ähm, Timer, wake up oder aber GPIO?
Gucken wir mal, ob das funktioniert.
Wozu eigentlich der Timer, ähm, zum Nachgucken, ob Post da ist?
Die hat ja keinen Schalter.
Da muss er alle fünf Minuten mit einem Ultraschall-Sensor gucken, ob was im Rohr steckt.
Und den Timer habe ich hier unten ja definiert.
Okay, Timer aufwachen funktioniert.
Und GPIO aufwachen funktioniert auch.
Das ist doch sehr, sehr nice.
So, dann können wir jetzt einstellen, was der ganze Kram verschickt wird.
Also könnten wir jetzt eigentlich sagen, ähm, ja gut, dann müssen wir uns jetzt überlegen, was wir verschicken.
So ein bisschen, wie bauen wir das auf?
Also wir könnten jetzt sagen, ah, ich habe eine Idee.
Was passiert denn, wenn ich den Knopf gedrückt halte?
Ich habe da so eine dofe Vermutung.
Achtung, ich halte mal gedrückt.
Ja, der wacht auf, geht schlafen und wacht direkt wieder auf.
Das ist natürlich dumm.
Das heißt, den müssen wir eigentlich blocken.
Den müssen wir blocken, äh, bis, bis, bis das nächste Mal der Ping low ist.
Oder wir blocken den Wake Up, bis das nächste Mal der Zeitungstimer aufgeht.
Weil innerhalb von fünf, na, wobei innerhalb von fünf Minuten könnte schon einer die Tür aufmachen.
Also ich würde eher sagen, wir machen das anders.
Wir lesen hier einfach ein, welchen, welchen Zustand der Pin gerade hat.
Und ähm, negieren das dann einfach.
Also sprich, wenn der Pin gerade low ist, ist unser, unsere Sache, wir wollen nur bei high aufwachen.
Und wenn es gerade high ist, wollen wir nur bei low aufwachen.
Das klingt doch eigentlich relativ sinnig, oder?
Äh, wie habe ich das Ding genannt, Wake Up Pin?
Das muss ich allerdings vorher noch sagen.
Pin Mode.
Wake Up.
Mode, Input, Pull Up.
Bei einem Schalter ist den Pull Up einzuschalten eh nicht verkehrt.
Da wird man wahrscheinlich der Flow 690 recht geben.
So.
So und jetzt, wenn ich jetzt gedrückt halte.
Siehste, wenn ich jetzt gedrückt halte, wacht er nicht mehr auf.
Weil er liest hier ein, aha, Pin ist eins.
Und wir wachen erst wieder auf, wenn Pin null ist.
Jetzt lasse ich los.
Jetzt löst er nochmal aus.
Gut, wenn ich schnell drücke, dann macht das eh nur einmal.
Das war eigentlich ganz gut.
Der Elektriker kann mir recht geben, dass ich hier den Pull Up Resistor aktiviert habe für meinen Schalter.
Für meinen GPIO Eingang, wo der Schalter dranhängt.
Da weiß ich zumindest auch, dass eins wirklich eins ist.
Und nicht einfach.
Es hat einer zu laut gefurzt auf der Straße.
Ich werde jetzt eins.
Also das ist auf jeden Fall die bessere Idee.
Das denke ich auch.
Okay, also die Ausführzeit ist jetzt schon ziemlich knapp.
Vergiss das Test.
Also ich habe jetzt eigentlich keine großartiges Bouncen vom Schalter gemerkt bisher.
Drück das und gut ist.
Wobei ich das ja damit eigentlich schon fast wieder, naja.
Also wenn ich damit Probleme habe, muss ich da irgendwie noch ein Delay einbauen.
Und mal kurz warten.
Aber erst mal gucken.
Das scheint ja so zu funktionieren.
So, und nun müssen wir die Daten einfach nur noch verschicken, oder?
Und dann gucken wir uns nochmal, oder mal gucken, ob wir das heute machen, uns den Ultraschallsensor nochmal an.
Mit Entfernungsmessungen.
Aber erst mal versenden wir jetzt noch den Kram.
Übrigens, danke für die ganzen Follows.
Ich sehe nur gerade den, irgendwas mit Sebi.
Ich habe es nur noch im Augenwinkel gesehen.
Ja, danke für die ganzen Follows.
Ich bin echt begeistert.
Letzten Streams teilweise 14 Follows aus heiterem Himmel gehabt.
Ja, in den letzten paar Streams.
10, 15, 14 irgendwie total viele Follows.
Also anscheinend gefällt das doch einig.
Ich bin schwer begeistert, ja.
Und vor allem scheint tatsächlich auch Leute zu interessieren.
Also es ist nicht einfach für die Katze irgendwie.
So, und jetzt verschicken wir den Kram nochmal.
Also wenn wir aufmachen vom Timer, dann will ich eigentlich gucken mit dem Ultraschallsensor, ob was drin ist.
Das machen wir jetzt nicht.
Wir verschicken jetzt, wenn der GPIO-Pin gedrückt wird, verschicken wir einfach mal was.
Da kann ich mir jetzt vollkommen frei ausdenken, was ich da verschicke.
Ich würde nämlich vorschlagen, ich verschicke einfach 255.
Wenn 255 ankommt, dann wurde der Schalter gedrückt.
Und wenn 0 ankommt, dann ist der Schalter aus.
Wobei, das kriege ich als Event gar nicht mit.
Also wenn es 255 ankommt, ist eigentlich total simpel, dann wurde der Schalter gedrückt.
Das ist glaube ich so, das kann man nicht mal Protokoll nennen.
Moment, was ist das?
Genau.
So, jetzt gucken wir mal, ob das ankommt.
Klick, ha ha, 255, klick, 255.
Und man sieht schon, das Delay, das Delay ist wirklich klein.
Hör mal, guck mal.
Also hören und gucken.
Also hier ist ein komplettes audiovisuelles Erlebnis hier schon fast.
So, Achtung.
Seht ihr, wie schnell das geht?
Deshalb macht keiner die Tür auf und wieder zu.
Und das ist jetzt wohlgemerkt, das ist ja nicht die Debug-Ausgabe von dem Ding, was am Briefkasten hängt.
Das ist die Debug-Ausgabe der Kiste, die es schon über WLAN empfangen hat.
Also man muss sich ja mal überlegen, was da alles drin steckt in dem Klick.
Der Klick sorgt dafür, dass erstmal der ESP32 aufwacht, sich ESP Now initialisiert.
Dann 255, also ein Byte verschickt.
Danach geht er wieder schlafen, das ist egal.
Der andere das empfängt und in die Debug-Ausgabe packt.
Also...
Ja, aber das ist doch schon sehr nice.
Warum dann Fullscreen Mario Kart Bild durch?
Weil das mein Hintergrund ist.
Außerdem kein Mario Kart Bild, das ist Mario Galaxy Bild.
Das ist mein Hintergrund.
Wenn man Workspaces wechselt, dann lag der manchmal ein bisschen und man sieht den Hintergrund.
Jetzt fehlt nur noch ein Display.
Kann man alles machen, Displays habe ich auch dafür.
So, also das funktioniert schon mal, wir kriegen 255 geschickt.
Wenn, da waren wir doch heute, das müsste man echt jetzt, was sagen wir, im Vergleich zu dem Side-Track,
die letzten Male und heute ja auch, waren wir doch relativ effektiv, oder was wir hier gebaut haben.
Okay, per MQTT haben wir noch nichts verschickt.
Aber das ist jetzt ja im Prinzip nur noch ein weiterer Schritt.
Also, ich habe als Display so ganz kleine...
Die können aber nichts großartig, ne?
Display, ich glaube 80 x 200 oder so, 80 x 120.
Ich glaube, die habe ich.
Wobei das ganz schön teuer ist, ne?
Ja, ich glaube, die sind das.
Man bezahlt ungefähr, ich kaufe eigentlich nichts unter 3er-Pack.
Weil, eine Sache bei diesen ganzen Elektroteilen, bei einer Sache hast du so schnell mal geschrottet.
Ich kaufe eigentlich immer nichts unter 3er-Packs.
Am besten sind eigentlich immer 5er-Packs, da hat man immer genug.
Ja, es ist schon nicht so günstig, ne?
Zahlst du auch irgendwie deine 4€ oder so pro...
Ne, nicht ganz.
Was bezahlst du denn da?
Ah, doch, bisschen mehr.
450 oder so bezahlst du pro Display.
Das ist tatsächlich für einen Teil ziemlich teuer.
Die haben es wirklich verkackt mit ihrem Namen, ne?
Die hätten sich Eats Delivery nennen können, aber haben sich Ats Delivery genannt.
Also Eats Delivery, da wäre ich dabei gewesen.
Aber Ats Delivery ist langweilig.
Das ist nix.
Also, es ist schon relativ teuer.
Wenn du dir überlegst, du kriegst für 15€ fast 3 komplette Controller von Ali Express.
Guck mal, für den gleichen Preis, sogar ein bisschen weniger, kriegst du 3 NodeMCU ESP266.
Was die Displays kosten.
Also, aber ich find sie dran, das Klick, zack, Paket kommt an.
Ja, was machen wir jetzt?
Der Kram funktioniert jetzt ja tatsächlich, ne?
Wir müssen noch...
Ach ja, den wollen wir jetzt noch...
Also Leute, ich sag euch, ich hab übelst Hunger, ne?
Aber wollen wir noch den Ultraschall-Sensor mal schnell ausprobieren?
Zum Abstand messen.
Ja, machen wir.
So, das müssen wir dann hier drinnen machen.
So, den Ultraschall-Sensor, da muss ich mir jetzt mal gucken, wie man den verwendet.
ESP32-SR-H, ach du Scheiße, wer ist das Ding?
HC, ja, so.
HC-SR04.
Nehmen wir mal die englische Seite.
Okay, wo ist der Code?
Der Code, da ist er.
Also, was macht der Typ hier, wie funktioniert der denn?
Ultrasonic-Dric-Pin.
Ultrasonic-Echo-Pin.
Bla, bla, bla, bla, bla.
WLAN, bla, bla, bla.
Pin setzen, okay.
So.
Wo ist denn die Funktion, die den Sensor ausliest?
Ach hier.
Duration-Distance.
Was ist das denn?
Moment, was?
Ach, so ist das.
Ich glaube zumindest ungefähr zu verstehen, was es macht.
Ich vermute mal, dass das Ding so funktioniert, weil auch wenn ich hier drauf gucke, das Ding hat zwei Pins.
Also eigentlich hat es vier, ne?
Crown und VCC lassen wir mal außen vor.
Es hat zwei Pins.
Trigger und Echo.
Ich vermute mal, dass man sagt...
Ah, okay.
Man sagt Trigger-Pin.
Man lässt den quasi irgendwie 10 Mikrosekunden, lässt man den irgendwelche Ultraschallwellen ausschicken.
Da sind auch zwei Dinger vorne dran, die ein bisschen aussehen wie Lautsprecher.
Ich zeige euch jetzt mal, wie das Ding aussieht.
So sieht das Ding aus.
Also ich vermute mal, dass die hier irgendwelche Ultraschallwellen aussenden und hiermit das empfangen.
Und dann zählen sie einfach, wie viel habe ich empfangen in der Zeit.
Und daran kann man ja dann ungefähr ausrechnen, wie weit ein Objekt weg ist.
Das ist quasi Fledermaus-Sensor, Fledermaus-Style.
Irgendwie so in der Richtung wird das sein.
So, allerdings, wir machen jetzt einmal eine riesen Copy-Paste-Aktion.
Weil ich keinen Bock habe, das jetzt nochmal nachzubasteln.
Measure distance.
Wenn wir das Ding...
Ups.
Und da ist mir das reincopy-pastet.
Bam.
Copy-paste-master-race.
Und dann tragen wir das da oben ein, wobei die Pin-Benahmung ein bisschen doof.
Wir machen hier einen Träger-Pin.
Wir wissen, dass das für den Echo-Pin...
So, und ich habe die Dinger dran.
Muss ich jetzt mal gucken.
Ich habe...
Wo ist das Echo?
26 und 27.
26 und 27 sind die Dinger dran.
GPIO 27.
Okay.
Ups, das habe ich jetzt gemacht.
So.
Und das Ding, das...
Wo haben wir denn int draus?
Und das returnen wir jetzt mal.
Int.
Okay.
So.
Das ist auch wieder so ein schönes C-Fallstrick.
Es könnte immer noch sein...
Es könnte immer noch sein, dass ich hier uninitialisierten Crap zurückgebe.
Wahrscheinlich kriegt man da einen Warning.
Wird für solche Embedded-Sachen...
Die meisten haben hier GCC.
Da ist auch ein GCC drunter.
Hier ist ein GCC drunter.
GCC kann ja mittlerweile auch 50 Millionen Plattformen gefühlt.
So.
Get sleep, get wake up.
Blah.
Wir testen jetzt mal kurz, ob der Sensor funktioniert.
Wir testen jetzt mal schnell, ob der Sensor funktioniert.
Ach so, eine Sache habe ich noch vergessen.
Ich muss die Pins in den richtigen Modus stellen.
Zack.
Träger-Pin.
Wie lange bin ich eigentlich schon on?
Ich bin schon eine ganze Weile on, oder?
Uptime.
Na ja, geht doch eigentlich.
Geht doch eigentlich.
70 Leute für Freitagabend, kann man sich nicht beschweren.
Blah, Blah, Blah, Output.
Okay, wir machen jetzt hier einfach mal eine Runde Endlosschleife.
Und gucken, ob das funktioniert.
Ob das Ding jetzt die Distanz measuret.
Komm, machen wir den Abstand mal ein bisschen kleiner.
200 Millisekunden, ja.
Mal gucken, ob es funktioniert.
Ha.
Aha, funktioniert.
Ich mache gerade mal eine Hand davor hin und her.
Also, so ist Entfernung bis zur Decke.
Wahrscheinlich, wobei.
Moment, das ist in Zentimeter.
180 Zentimeter bis zur Decke.
Kommt sogar ungefähr hin.
Gar nicht mal so schlecht.
Krass, ey, der erkennt wirklich ganz gut den Abstand bis zur Decke.
Jetzt habe ich es, jetzt habe ich es schepp.
Ah, cool.
Jetzt hebe ich es gerade hoch.
Also, ungefähr den Abstand bis zur Decke erkennt er.
Und das ist ganz schön weit.
So, jetzt mache ich mal die Hand drüber.
Oh, ich muss es drüber halten.
Abstand ungefähr, ähm, ungefähr 10 Zentimeter.
Es kommt hin.
Hand weiter drüber.
Fünf.
Was passiert denn, wenn ich die Hand drauf lege?
Okay, geht kaputt.
Ähm, jetzt habe ich die Hand eigentlich mehr oder weniger direkt dran.
Vier Zentimeter, fünf Zentimeter.
Jetzt habe ich es aufgelegt.
Jetzt siehst du gleich.
Ja, aber ich meine, das wird wahrscheinlich mit einer Zeitung nicht passieren, oder?
Was haben wir hier?
Machen wir mal hier was drauf.
Okay, wenn was aufliegt auf dem Sensor, ist der Abstand extrem hoch.
Das heißt, den Fall muss ich noch abfangen, wenn wirklich einer die Heizung, äh, die Heizung,
die Zeitung so in das Rohr reinsteckt, ähm, dass es direkt dran ist.
Ich sage einfach, wenn Wert größer 2000 ist, dann ist auch, soll er auch auslösen.
Vielleicht, was, gibt es eigentlich eine Möglichkeit?
Git checkt, ob es Passwörter in einem Commit ist.
Also, ich würde erstmal ein Git-Ignore-File, äh, ich würde erstmal in mein Git-Ignore-File reinschreiben,
dass die Dateien, die Passwörter enthalten, erst gar nicht mit Committed werden.
Sollte es doch mal reinrutschen, kannst du natürlich einen Hook machen,
wenn du ungefähr sagen kannst, wie das Passwort aussieht.
Kannste, da würde ich aber einen Pre-Receive-Hook nehmen, weil nur bei einem Pre-Receive-Hook,
das ist übrigens das, womit ich mein Geld verdiene auf der Arbeit,
ähm, nur mit einem Pre-Receive-Hook kannst du Commits noch ablehnen.
Post-Receive ist zu spät.
Post-Receive kannst du verwenden, wenn du Sachen, äh, beispielsweise von deinem Git-Repo,
nochmal woanders hinschieben willst, oder irgendwie automatischen Pull-Request aufmachen willst,
oder irgendwas, aber Passwort und Filter und ablehnen musst du immer im Pre-Receive machen.
Du kannst übrigens auch einen lokalen Hook nehmen.
Du kannst ein After-Commit-hook nehmen. Also ich habe bei uns im Repo eigentlich nur einen Hook,
nein, zwei. Wir haben einen riesen Pre-Receive-Hook, der so Sachen macht wie Syntax-Check,
ob jemand so fail gewesen ist, Windows-Line-Endings zu verwenden,
Style-Guide-Check
Jammel-Sündags-Check
sowas, macht der Hook
und wenn es nicht stimmt, dann lehnt das einfach ab
mit der passenden Fehlermeldung
achso und wenn der Pranschnabel verkehrt ist
weil
ich hab mal irgendwann
beschlossen
dass man
Branches irgendwie
sinnvoll benennen soll
dass ich im Nachhinein noch checken kann
von wem was ist
und ich hab
natürlich
bis auf die Branches, die ich für
unsere Releases verwende
die heißen halt, so wie man es sich vorstellt
wir haben eine Master-Branche, wir haben quasi
eine Testing-Branche, wir haben eine Live-Branche
und sowas
aber die Feature-Branches
die entwickelt wird, habe ich mal gesagt
die sollen kürzel slash
Feature-Name sein
und wenn einer was versucht zu pushen
was nicht so heißt, dann wird es auch gleich
abgelehnt mit dem Hinweis
Branchname ist fail
das ist ganz praktisch
weil dann sehe ich schon sofort am Kürzel
vom Branch
wer es verbrochen hat
oder ich sehe auch, wer beispielsweise
noch 80 offene Branches hat
ist nicht schlimm, macht geht nicht
wirklich langsamer, aber ist vielleicht
ein Hinweis drauf, dass er irgendwie was vergessen hat
so
also ich bin begeistert
der Ultraschall-Sensor funktioniert
das heißt wir können jetzt sagen
hier, zack, measure distance
send data
measure distance
wobei das ein ganz schöner Fail
ist ehrlich gesagt
darf man sowas hier eigentlich machen?
ne oder?
das geht natürlich nicht, das dynamisch zu initi..
Moment, geht doch
ok
allerdings ist das jetzt ein bisschen Fail
was ich hier mache, weil es könnte in beiden
Fällen 255 übertragen werden
es ist eigentlich nicht so clever, was ich da mache
ehm
na auf der anderen
ohne Scheiß, eigentlich könnte man das so lassen
eigentlich könnte man das
echt so lassen, ich könnte mir 0 und
1, könnte ich mir reservieren
für Hof-Tor auf und zu
also generell kriege ich ja eh nur
die Benachrichtigung Hof-Tor auf, also 1
1 ist Hof-Tor auf
oder ich könnte auch sagen 0 ist Hof-Tor auf
das verwirrt dann noch mehr
und ehm
ne 1, 1 brauche ich
weil hier kann der 0 rauskommen
und ehm 1 kommt bei dem
Distanz-Messen-Eni raus
ja das ist einfach, warum nicht?
ja warum nicht?
gucken wir mal
dann muss ich immer nur 1 Byte übertragen
dann geht es schön schnell, ansonsten müsste ich
noch so einen Mini-Header da dran basteln, was ich gerade
übertrage
ok, Timer-Wake-Up
kann der Timer mal
ein bisschen schneller
ok, also
ich habe die Hand drüber
6, guck
passt, mal gucken
ob der echt so nah
nicht messen kann
eh warum 1 nie
rauskommt, es ist ja unwahrscheinlich
dass 1 rauskommt, weil der
Ultraschall-Sensor das nicht checkt
wenn die Sachen so nah dran sind
also wir können ja mal gucken, was das kleinste ist
was ich hinkriege, jetzt habe ich die Hand mehr oder weniger
direkt drüber, 4
2, ich glaube nicht, dass wir auf 1 runterkommen
4, ne
also auf 1
schaffen wir nicht
0 schafft der eh nicht
deswegen sorgen wir dafür, dass
auch nie 0 übertragen wird
selbst wenn der
Ultraschall-Sensor misst
was ja vorkommt, wenn man misst
dann
ist doch bloß der Fabian
ist mal an
dann sorgen wir nämlich dafür, dass der
einfach jetzt
9999
überträgt
selbst wenn er misst
das heißt wir können ihm sagen
wenn da 0 drinne steht
dann ist es auf jeden
fall Tür auf
wir können sogar so weit gehen und uns Tür auf
und Tür zu können wir 0 und 1 machen
wir machen 1 Tür auf
und 0
das muss ich noch gucken, wie man das mit dem Schalter machen
und 0 ist Tür zu
da kann ich nämlich auch messen
wie lang es dauert, also wie lang die Tür offen war
das war eigentlich ganz nice
ich mein, okay
das ist jetzt nicht die
also rein von der Logik her
die schönste Variante
weil wir könnten immer noch aus Versehen Werte übertragen
und dann was falsches interpretieren
aber ich glaube
die Chance, dass der Ultraschall-Sensor 0 und 1
misst
sind es relativ gering
aber ich finde
ich finde das echt nice, guck mal hier
der Ultraschall-Sensor funktioniert
ich halte ihn jetzt mal auf den Schreibtisch runter
Bäm, 9 cm, da kommt er hin
jetzt mal ganz nah
4
sonst lege ich ihn auf
jetzt wird er wahrscheinlich sonst was ausliefern
38
obwohl er aufliegt
ich mache ihn jetzt nur ein ganz kleines Stückchen
oben drüber
38, noch ein Stückchen höher
5
also kommt man hier hin
genau, Flo69
genau, das könnte ich machen
das ist eine gute Idee
if Distance
kleiner
2
dann
dann 2
oder Distance
ups
wenn man das also richtig macht
jetzt haben wir das auch abgefackelt
also sprich
im Endeffekt
das kleinste
da kann ich hier oben auch wieder
auf 0 initialisen
also es heißt
das kleinste
was unseren Entfernungssensor misst
ist 2
das heißt ich habe 2 Bits
frei für Tür auf und zu
ich bin begeistert
ich bin begeistert
ich bin begeistert
ich bin begeistert
achja und
was wir noch brauchen ist
wenn ich das Ding nämlich komplett abdecke
dann kommt dann irgendwie was über 1000 bei raus
oder auch nicht
eben kam da zumindest was über 1000 bei raus
wenn ich es abdecke
jetzt, jetzt, jetzt nicht
ok
aber man hat es doch eben
hä warum macht er das jetzt nicht mehr
achso ha weil 1000 nicht in den byte reinpasst
ok
ja
dann müssen wir das glaube ich nochmal kurz hier ausgeben
dass ich das hier sehe
Distance
Distance
übrigens ich muss eh gucken
dass es unter 255 ist
weil sonst komme ich mit dem byte da eh nicht hin
Hallo Tante Micha
so jetzt machen wir mal die Hand drauf
Achtung
ja 2000 irgendwas
also haben wir noch ein paar mehr
wenn die Sache kleiner ist als 2
dann wollen wir 2
das wird mir jetzt in dem one liner ein bisschen zu viel
also machen wir so
if
Distance
Deiner 2
Return 2
ähm
as if
Distance
Distance
über 200
Return 200
irgendwie sowas in der Richtung so
so und ansonsten
Return Distance
das scheint mir doch jetzt ganz sinnvoll zu sein
was hatte hier für schmerze
unused variable start
eh doch ganz woanders
ich mein man könnte das inline schreiben
aber das wäre dann glaube ich ein bisschen
bleibt voll immer oh ist sehr langsam warum
es kompiliert fast schneller
die richtigen wie normales
was machst du da ha
das dachte ich mir
weil die frage öfters kommt habe ich das ganze
im vorfeld schon aufgemalt
ich versuche
meinem briefkasten beizubringen
dass der mir schickt wenn
neue post da ist
gleichermaßen soll er mir
sagen wenn er die hoftür aufmacht
das heißt ich habe hier einen controller
der hat einen schalter dran
der erkennt wenn die tür aufgeht
und der hat einen ultraschall sensor
der misst quasi den abstand im briefkasten
das heißt wenn einer den brief einwirft
ist der abstand im briefkasten
natürlich geringer
und
der läuft an einer batterie
deswegen braucht er ein paar
effizienz energiesparmaßnahmen
dass das auch an einer batterie funktioniert
und der wacht nur ganz kurz
auf immer guckt nach
ob da irgendwie
ob da post da ist oder ob er
vom schalter getriggert wurde
dann überträgt er das ganze an einen weiteren controller
das geht ganz schnell 50
millisekunden und dann
legt er sich wieder schlafen
und der andere controller überträgt das ganze dann
per wlan
das ist mit relativ schnell
wenn man hoftor aufgeht
und
wenn post im briefkasten ist
jo
ja
die
ja
ja
also
dass
ja
ja
ja
ja
ja
ja
Also mit einer Waage ist schwierig. Mit einer Waage kannst du es noch ein bisschen weiter spinnen, da kannst du sogar ungefähr sagen, wie viel drin ist.
Das ist noch mal, das ist noch mal, noch mal eine Runde advanceder.
Allerdings stelle ich mir schwierig vor, eine Waage, das mit einer Waage zu machen, allein schon halt einbautechnisch.
So ist es relativ einfach. So brauche ich einfach einen Schalter am Hoftor für das Erkennen von Hoftor auf und zu
und einen Ultraschall-Sensor im Briefkasten. Und der Ultraschall-Sensor ist halt relativ klein.
Den kann ich einfach unten durch die Klappe machen, zack, und er erkennt es.
Eine Waage wäre eine größere, größere Bauaktion.
Dafür wäre damit noch, noch detailliertere Sachen möglich, wobei mir das eigentlich egal ist, also ob ich jetzt weiß, dass es zwei oder drei Briefe sind
oder, dass überhaupt was drin ist, ist mir eigentlich egal.
Mit einer Waage wäre das, stelle ich es mir deutlich komplizierter vor.
Ich habe mir mal Hardware gekauft, wo man eine Waage bauen kann.
Load Cells habe ich mir gekauft und einen Controller dafür.
Habe ich aber noch nicht damit rumgebastelt.
Ich wollte mit den Load Cells ein Bett-Detection-Sensor machen.
Also quasi, wenn man sich ins Bett legt, dass dann, sobald da nach 22 Uhr ist und länger als 5 Minuten Gewicht drauf ist,
dass er dann quasi alles ausschaltet, was ich vergessen habe auszuschalten.
Habe ich aber noch nicht gemacht.
Was ich mir kompliziert vorstelle, ist, wenn man, also, kann ja durchaus sein,
dass das Gewicht im Bett sich teilweise mal bei speziellen, bestimmten Aktionen verteilt anders.
Ja, dann weiß man nicht, was der Sensor macht.
Da geht dann Licht an, Licht aus, Licht an, Licht.
Also das ist vielleicht auch nicht so, so stimmungsvoll.
Ist da wahrscheinlich ein Stimmungskiller, wenn ein Licht an und aus geht.
Aber das könnte man natürlich auch wiederum beheben,
indem man da eine Logik einbaut, die quasi sagt, hey, du machst einfach einen Durchschnitt.
Und wenn du da zu zweit sogar drauf legst, dann ist ja auch das Gewicht doppelt so hoch.
Das heißt, das ist, naja, nicht ganz.
Also ich würde sagen, ich mache trotzdem den größten Teil des Gewichts aus, ja.
Aber das Gewicht ist dann zumindest höher.
Das könnte man dann wahrscheinlich auch wieder rausrechnen,
wenn man ganze abgedrehte Sachen machen will.
Aber man könnte es auch einfach negativ machen, indem man sagt, hey, das Ding wurde getriggert
und dann ist es einfach innerhalb der nächsten fünf Minuten nie so und so lang wieder ohne Gewicht gewesen.
Dann könnte man das auch relativ sicher erkennen, egal was da gerade passiert.
Na ja, gut, also so viel dazu.
Gut, aber man muss sagen, der Scheiß funktioniert, den wir gebaut haben.
Ultraschall-Sensor triggert.
Switch triggert.
Ja, Switch, Switch Ross.
Ich bin damit wirklich ziemlich zufrieden, ehrlich gesagt, jetzt.
Ich sehe nur ein Problem bei der ganzen Geschichte.
Ich habe das jetzt ja an einem ESP32 NodeMCU dran.
Das ist ja nicht das Board, was ich unten an Briefkasten hänge.
Unten an Briefkasten kommt ein deutlich sparsameres Board.
Und ja, das könnte man auch machen, BeatBroad.
Der Ultraschall-Sensor braucht zwingend 5 Volt.
Und der FireBeatle ESP32, das ist ein ziemlich stromsparendes Board,
der hat bloß, wenn man das an Batterie betreibt, hat er nur 3,3 Volt Ausgang.
Was da dazu führt, dass ich den Ultraschall-Sensor nicht verwenden kann.
Fällt da dem Elektriker was dazu ein?
Ich brauche den Spannungswandler dazwischen noch, oder?
Der von 3,3 Volt auf 5 Volt, das...
Naja, mein Board, was ich unten an Briefkasten hänge, das hat bloß 3,3 Volt.
Und der Ultraschall-Sensor braucht 5.
Was, ein LT, oder was? LT1618.
Gibt es nicht zu kaufen.
Grip.
Also ich habe ja welche da, ich zeige dir die mal,
und du kannst mir mal sagen, ob ich die dafür verwenden kann.
Muss ich mal kurz bei Amazon gucken.
Nein, ich möchte keine Mobilfunknummer hinzufügen, Bestellungen.
Ups.
Ach, ich bin im falschen Amazon-Account.
What the fuck, Alter?
Warum mit dem falschen Amazon-Account?
Ah, jetzt. Genau, ich habe den hier am Start.
Hab ich es denn?
Habe es gleich.
Ja.
Jetzt gerade mal gucken, was davon was war.
Ich glaube, der da ist das.
Da habe ich 10 Stück von da.
Amazon, ja, Amazon, da.
Ich muss so viel nachgucken.
Quasi, ich weiß, dass ich mal irgendwo was bestellt habe,
oder ich weiß, dass ich sowas habe, aber ich weiß nicht wo.
Da gucke ich immer bei Amazon nach und stelle dann fest,
aha, das hast du ungefähr dann und dann bestellt,
und dann und dann heißt es ungefähr in diesem Karton,
und dann weiß ich auch ungefähr, wo ich hingestellt habe.
Amazon ist alles in einem, ja.
Also davon habe ich welche da.
Die sind aber ziemlich groß.
Die sind eigentlich viel zu unsinnig groß dafür.
Die sind, die sind so, so, so, bisschen größer wie ein Daumennagel, würde ich sagen.
Da ist eigentlich, da ist eigentlich viel zu overdimensioniert dafür, ne.
Over, was für ein Scheißwort, oder, Alter.
Overdimensioniert ist es.
Das könnte von Fabian sein.
Das kann ich mir richtig gut vorstellen, wie er BDO spielt,
und dann auf einmal, einmal erzählt, dass es over, over, over, ja, was auch immer.
Overdimensioniert, ja.
Das ist aber, ah, das ist doof.
Ich muss gucken, ob es ein anderes Ultraschallmodul gibt.
Weil mir fällt gerade ein, warum das noch doof ist.
Selbst wenn ich das Ultraschallmodul mit so einem Step-Up-Converter anschließe,
von 3,3 Volt auf 5 Volt,
die Pins, also der Ausgang ist ja auch 5 Volt vom Ultraschallmodul,
und die GPIO-Pins sind eigentlich alle 3,3 Volt.
Ich meine, ich gehe nicht davon aus, dass das Board kaputt gehen würde,
aber ich will es auch nicht ausprobieren.
Ja genau, Flo, das sage ich, das meine ich ja gerade.
Das heißt, das ist doof.
Das ist, das ist blöd.
Nee, ich glaube nicht, dass das Board kaputt gehen wird,
weil das Board hat, wenn man es per USB anschließt,
hat es auch einen 5 Volt-Ausgang und die kann man auch an GPIO-Pins stöpseln.
Also das scheint schon entsprechend abgesichert zu sein,
aber ich will es eigentlich nicht ausprobieren,
weil ich weiß nicht, ob es das auch alles aktiv hat,
wenn man es auf Batterie laufen lässt,
weil das ist gerade beim Fire Beetle so die Sache,
die schalten vieles ab, wenn es nicht per USB angeschlossen ist.
Es kann durchaus sein, dass es kaputt geht.
Flo690 habe ich schon ausprobiert, geht nicht.
Also wir können es live im Stream ausprobieren.
Also jetzt ist der Ultraschall-Sensor dran, Hand drüber.
So, was auch immer, Hand drüber.
Und jetzt stöpsel ich das mal um von 5 Volt auf,
Moment, mein Crown ist nicht richtig dran.
Das kann in die Hose gehen.
Jetzt stöpsel ich das mal um von 5 Volt auf 3,3 Volt
und dann werden wir sehen, es funktioniert nicht.
Es liefert immer 2 zurück, weil es kleiner als 2 ist.
Nee, ich glaube, ich bestell mir einfach einen Ultraschall-Sensor mit,
der mit 3,3 Volt funktioniert.
Wird es doch bestimmt, wird es doch bestimmt geben.
Ultrasonic.
Habt ihr, wo ich gerade sagte, Ultrasonic,
habt ihr den Trailer zum Sonic-Film gesehen?
Ich fand das Ding so zum Fremdschämen, ey.
Also als ich das Viech gesehen habe, es sah gerade schlecht aus.
Moment, was macht der da?
Was geht mit dem ab?
Was macht der da?
Der macht Resistor dran zwischen Crown und Echo
und nochmal einen Resistor zwischen Echo und irgendwas von diesem Pin.
Ich hab keine Ahnung, was das tut.
Das könnte tatsächlich ein Spannungsteiler sein.
Wobei müsste der dann, wenn es ein Spannungsteiler ist,
müsste der nicht eigentlich von VCC auf Crown,
also quasi da einen Widerstand, da einen anderen Widerstand.
Also du brauchst es ja quasi,
du musst ja quasi das, was du,
die geteilte Spannung hast ja zwischen den zwei Widerständen.
Oder ist da auch VCC?
Eigentlich müsste der das noch da dran machen.
Stimmt, ja.
Aber wahrscheinlich könnte er es auch einfach da dran machen, oder?
Du hast aufs Gleiche rausgegangen.
Ach nee, das wird dann wahrscheinlich rumspacken, oder?
Stimmt, dann ist immer High.
Jaja, klar, logisch.
Stimmt, du willst ja.
Ja, aber so ein Mod, ich meine, könnte ich machen.
Ich meine, die Dinger sind relativ groß.
Widerstände habe ich auch genug.
Was hat er denn da für welche?
Ich habe ja mal so ein AliExpress Widerstandset gekauft.
Das sind irgendwie, keine Ahnung, 200 Widerstände.
Und insgesamt habe ich jetzt, keine Ahnung, 20 verwendet vielleicht.
Das ist alles wirklich drin.
Was hat er denn?
2,7 Kiloohm und ein 4,7 Kiloohm.
Ja gut, das macht wahrscheinlich, wenn man es ausrechnet,
macht es wahrscheinlich von 5 auf 3,3, oder?
Gehe ich mal stark von aus.
Ja, man, das könnte, ganz ehrlich, das könnte man eigentlich machen.
Das sieht jetzt nicht super kompliziert aus.
Ah, das ist schon, also das da oben dran zu löten, ist verdammt klein.
Das sieht auf dem Bild nicht so wild aus, aber das ist schon ziemlich fummelig.
Aber ich habe ja mal ein 0,2 Millimeter Lötspitze mal irgendwann gekauft,
dann kann ich den übrigens mal verwenden.
Dann mache ich das einfach so.
Da brauche ich keinen neuen Sensor.
Da fällt mir nur noch dazu ein.
Wie weit ist denn der Ultraschall-Sensor vom Empfänger entfernt?
Gar nicht.
Das hier ist der Sender und das hier ist der Empfänger.
Sonst funktioniert es ja nicht.
Das ist so wie eine Fledermaus im Endeffekt.
Hiermit schickt das Ding Schallwellen aus und damit empfängt es die Ultraschallwellen.
Und daraus kannst du dann errechnen, je nachdem, wieviel Pulse du bekommst,
also in welcher Geschwindigkeit die Pulse zurückkommen,
kannst du ausrechnen, wie weit das Objekt davor entfernt ist.
Und aktuell ist es der Meinung, mein Objekt ist,
ach so, Moment, das steckt noch an der falschen Spannungsquelle.
Ich muss erst mal wieder umstecken, schlüpseln auf 5 Volt.
So, aktuell liegt es schräg auf dem Tisch und meint, es ist 16 Zentimeter entfernt.
So, und wenn ich es jetzt auf den Kopf stelle, dass es Richtung Deckel geht,
dann ist er der Meinung, es sind ungefähr, ja, 180 Zentimeter.
Wenn ich jetzt meine Hand drüber mache, dann sagt er 7 Zentimeter.
Hat deine Batterie denn 5 Volt?
Nee, meine Batterie ist, ähm, hat 3,7.
Voll geladen, 4,2.
Und mal da jetzt davon abgesehen, es bringt ja auch nix,
weil für den Mod brauchst du den Sensor immer noch 5 Volt.
Stimmt eigentlich, ja.
Der Mod sorgt ja nur dafür, dass ich quasi 3,3 Volt GPIO ausverwenden kann daran.
Ja gut, aber da kann ich mir so einen Mini-Spannungswandel oder so kaufen,
so ein Stecknadelding, was ganz kleines.
Oder aber ich guck mal, was es für Ultraschallsensoren gibt, die 3,3 Volt brauchen.
Das ist wahrscheinlich die einfachere Variante.
Guck mal hier, da haben wir doch schon einen, RCW001.
Ja.
Das ist der Fake, das ist die Fake-Sache, das ist das China-Fake von dem.
Ah, da könnte man sich so einen holen.
Mal ganz davon abgesehen, der Preis ist ganz schön happig, äh.
Die Dinger kosten normalerweise, ja, und noch billiger,
je nachdem, wenn man die sich in China kauft, kriegst du den 10er-Pack für 5 Euro oder so.
Also da muss ich mal gucken, was es da gibt.
Da bin ich jetzt so noch nicht ganz zufrieden.
Bei 3,35 Volt Ultrasonic-Sensor hat Aliexpress, na zeig ich mal her, was hat denn Aliexpress?
Da sieht man mal wieder, dass Aliexpress ziemlich in Bullshit schreibt teilweise.
Weil genau diesen Sensor hab ich da und der funktioniert mit 3,3 Volt nicht.
Wann zockst du mal wieder?
Ja, On-Stream hab ich kein Game so wirklich für.
Das ist ja die Sache.
Wenn ich ein Game hätte, würde ich auch mehr Gaming stremen.
Das Ding sieht ja abenteuerlich aus, äh.
Ich muss mal gucken, was es für 3,3 Volt Ultrasonic-Sensoren gibt.
Da gibt es bestimmt welche.
Und dann nehm ich einfach den und dann wird nicht rumgebastelt.
So Leute.
Hallo Markus YouTube.
Fuck.
Ja Leute, also ich hab jetzt zwei Probleme.
Ich hab übelst Hunger und ich muss mal übelst aufs Klo.
Und außerdem sind wir heute ziemlich weit gekommen, oder?
Also für meine sonstigen Verhältnisse, wo wir ja immer viel schwätzen und wenig machen,
eigentlich haben wir heute ziemlich viel gemacht.
Ja, das könnte ich auch machen.
Ich könnte mir auch so einen ganz kleinen Spannungs-Dingswandler da holen und
dann ein paar Widerstände dran löten.
Könnte ich auch machen.
Aber an sich fände ich es eigentlich nicht schlecht, wenn ich eine schöne,
keine Ahnung, wenn ich so ein 10er-Pack Ultraschall-Sensoren finde, die 3,3 Volt unterstützen,
dann muss ich dann das nächste Mal nicht modden.
Weil das Problem werde ich ja immer wieder haben.
Weil alles, was ich irgendwie nicht direkt an USB betreibe, die Dinge haben halt nur 3,3 Volt.
Weil halt die ESPs intern auch bloß mit 3,3 laufen.
Ich gucke einfach mal, was es da so gibt.
So, jetzt testen wir nochmal was.
Ich hab jetzt den Ultraschall-Sensor an.
Ich leg den jetzt mal in meine Richtung.
Wenn der jetzt mal liegen bleibt.
Jetzt laufe ich mal hier so ein bisschen hin und her.
Ach so, der misst ja nur alle 5 Sekunden.
Na ja, gut.
Aber so prinzipiell sollte man es erkennen, dass wenn ich hier hin und her laufe,
dass das unterschiedlich, dass da unterschiedliche Sachen bei rauskommen.
Aber ich glaube, da ist es richtig gut, um zu messen, ob Zeitungen drin sind und Briefe drin sind und sowas.
Zeitung, also Briefe oder ob es von mir eine neue CT drin ist.
CT habe ich ja auch schon seit 15 Jahren abonniert.
Und zumindest die letzten 5 Jahre lese ich die eigentlich gar nicht mehr.
Aber ich bloß immer noch abonniert.
Ja.
Und nachdem ich Hunger habe und mal aufs Klo muss, würde ich sagen, wir waren heute relativ produktiv.
Wir machen jetzt Schluss an der Stelle.
Hallo, Quit.
Ich hoffe, euch hat es gefallen.
Macht's gut.
Bis zum nächsten Mal.
Tschüss.
Tschüss.
