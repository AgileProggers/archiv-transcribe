Samsung Galaxy Note 20 Pro
So, da bin ich!
MMO Kreisel-Krein-Sucht gestillt für heute.
Jetzt können wir noch ein bisschen, äh, High-IQ, Five Head Chat, den High-IQ ausspielen lassen.
Seh, Staub!
Schluss mit Klammern und Silvio-Lauten, genau.
Brauchen wir nicht.
Also, ein bisschen kann ich das, ja.
Also, komplett planlos bin ich nicht.
Aber mir fehlt halt so die Übung.
Und ich dachte mir so in letzter Zeit öfters, wäre es nicht praktisch, ein bisschen besser Pies entstellt zu können.
Einfach, wenn Bash zu ätzend wird und sich irgendwie ein.NET GO, was auch immer Programm jetzt nicht gerade anbietet für irgendwie was kleines.
Also, ich glaube, das kann auf jeden Fall nichts schaden.
Also, ich glaube, das kann nichts schaden.
Bei der Gelegenheit, ich mach mal kurz die VM an.
Ich mach einmal Updates, installier Pi.
Wie heißt das Ding?
Community Edition.
PyCharm, jetzt hab ich's.
Kann ich das hier abbrechen, VMWare, please?
Chat, weil ihr seid.
Weil ihr seid, Sekunde.
Tolle Webladung für heute.
Gleich 3.11 Beta.
Ja, wenn du mir sagst, was es für gescheite Package Manager gibt, dass man sich die Preview Version installieren kann.
So, volle Webladung für heute.
Ihr habt 5 Sekunden, ihr habt 10 Sekunden Zeit, also in euch aufzunehmen, weil dann schalten wir wieder weg.
Okay.
Genug, next.
So, also, ich mach erst mal kurz ein Update.
1, 2, 3, 4, 5, 6.
Massive FileFile Passwort.
Oh.
Was ist das denn?
Was ist das denn?
Was ist das denn?
Was ist das denn?
Was ist das denn?
Was ist das denn?
Was ist das denn?
Massive FileFile Passwort.
Also ich...
Hab ich das hier installiert?
Nee.
Package Manager, der ist eigentlich ganz gut zu installieren von so Zeug.
Alle switchen von Piesen auf Go.
Nee, überhaupt nicht.
Das sind 2 Sprachen.
Die haben vielleicht...
Mehr kann ich nicht sagen.
Überschneidungen, weil das stimmt nicht.
Überschneidung in der Fan-Gruppe, also es gibt bestimmt viele Leute die Paisten mögen
die auch go mögen und umgedreht, aber ansonsten ist das wirklich was wo ich sagen würde das
macht sich nicht großartig Konkurrenz?
Ich mein du kannst ja eh prinzipiell alles in allem machen, mehr oder weniger gut.
Du kannst auch theoretisch alles in C++ machen, wenn du es erträgst oder dass du
selbstwortbegehst oder so aber das theoretisch möglich ist das du kannst auch mehr oder
weniger fast alles in Javascript machen oder in Rust oder ansonsten das einzige was sich
manchmal davon abhält ist halt wenn spezielle Libraries nicht gibt oder je nachdem wenn
es halt was ganz Low-Leveliges sein soll also du wirst wahrscheinlich keinen Boot Manager
in Javascript programmieren wobei selbst das theoretisch gehen würde du brauchst in jedem
Fall ein paar Zeilen Assembler, das du auf die richtigen Adresse springen kannst und
wenn du es dann dort schaffst irgendwie einen Javascript Interpreter zu starten oder was
auch immer, theoretisch wird das bestimmt gehen aber ich glaube nicht das man das machen
will.
DrBronoopsXx excellents subscribtion overlieh danke für den Zap parallel downloads ja
Das ist eine gute Idee, aber das ist auch so schnell im Vergleich zu dem ganzen anderen
Krempel.
Was haben wir denn hier noch offen?
Ah, nee kein C++ heute, please Leute, ich muss weg, ich muss los.
Haben wir nicht sogar noch irgendwo den Pruder muss los Typ?
Tatsächlich, das verwende ich nie, total outdated Meme, warum habe ich das hier überhaupt noch
drinne?
Pruder muss los, das ist komplett, das habe ich noch nie verwendet.
Seit, also doch, aber seit 2 Jahren nicht mehr oder so, noch länger.
Weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg, weg,
weg, jawoll, zack, nochmal Update, ich mache jetzt, ich mache jetzt alle mal kurz die Update
und dann starten wir neu und dann können wir uns das Ganze angucken.
Wie?
nichts, nichts beim Updaten, also den Krempel können wir auf jeden Fall alle schon mal entfernen.
ne 3 1 keck wait alter so installieren wir das noch und dann machen wir reboot und dann
gucken wir uns das mal an toolbox updates toolbox hat keine updates hat meine toolbox
für es aktuell update update so pie charm community ich meine ich könnte ja
professionell installieren weil ich habe eine all all desktop license
ja immer schon kanalpunkte ausgeben umschlag umfrage vorgeschlagen minus 5000 beste umfrage
ja also ich glaube die leute voten für dein voten in deinem sinne ja ja war im browser mit
webgl das das klingt mir jetzt irgendwie nach nicht der besten idee desktop app ja du willst
auch einen browser haben denke ich oder oder war das nicht sinn und zweck der sache was
pipe nf die pippen mache ich chat ihr müsst mir ich habe da keine ahnung von was ist was ist
pippen heißen pippen sacred marriage of pippfile pipp und virtual nf das nimmt ja fast schon
auf ausmaße an wie bei irgendwelchen javascript libraries wurde keine ahnung mehr hast was
alles brauchst was ist das development workflow for humans aber das andere nicht oder wie
pipe nf tool aims best of packages und warum genau brauche ich das jetzt also was ist der sinn
ok dass ich behalte ich behalte das mal im hinterkopf aber jetzt aber jetzt rebooten wir
erst mal war er fertig mit installieren ich hoffe mal ich werde erst mal nichts mit pipp
installieren ich werde erst mal standard library machen oder ist es web request zu machen in der
peisen standard library immer noch so pence champ wie früher das geht auch bestimmt mittlerweile
besser das ging im falschen fenster auf request get und auf geht's jawoll ist es standard library
wie gesagt will start library für ein high charm das sind wir du hast wie bei npm logfiles ich
weiß jetzt nicht ob ich das jetzt gut oder schlecht finden soll ehrlich gesagt dass man
npm nachgebaut hat so auf geht's was haben wir denn für eine version installiert version 3 10.5 ok
pleading edge version komm mal hier 26 heute release date heute danke für die ganzen subs
leute ich habe mir die hälfte vergessen maxilbermann mehr selbst subscription hier schon neun monate so was ist neu in version 11 3.11 ok
3.11 ist 6 es ist 10 bis 60 mal schneller denn bei wisst ihr was ich auch nicht verstehe was
ist denn der unterschied zwischen sieb heißen peipai und und was es da nicht alles gibt das ist mir
alles zu als als nichts heißen main ist es mir alles zu 6 hat sieb heißen kompiliert zu 10 ne das
stimmt nicht oder sieb heißen ist die standard in der breiter implementierung in c aber was ist
der unterschied zwischen peipai und sieb ich habe kein schimmer ok exception groups variating
generics moment moment in piste gibt es generics was ist der sinn davon das ding ist dynamisch
da brauchst du keine generics das ist das ist generic per design ok wahrscheinlich bin ich
einfach zu low IQ dafür das zu verstehen typed dick dick ok nach dick dick required self type ok
ich habe keinen platzen schimmer was da überhaupt sich getan hat in drei punkten gibt sogar ein
int wait a minute was ist das seit wann schreibt man in pisen irgendwelche types type dictionary
ist das so was wie javascript u int 8 array oder sowas return self ich sehe schon ich bin
hoffnungslos outdated ich bin hoffnungslos outdated mit meinem pisen game genau aber
komplett data class transforms ich dachte immer ein vorteil davon sollte dass das gut lesbar
sein sein soll kann ich jetzt drüber kann ich jetzt über streiten ob das gut lesbar ist
ok alles klar 6 hat time was ist ein guter pisen verse version manager was ist quasi das
rust ab in pisen oder das oder das rbn von pisen also wie kann ich wie kann ich neue
versionen installieren ohne mir mein system zu zerschießen oder ist das das was eben
jemand gepostet hat das hier was konder ich habe chat ich habe kein nee das was anderes
das was anderes monka es alter ich blicke da überhaupt nicht durch also bei ruby gab
es rbn das der rbn gemacht konnte den ruby interpreter deiner wahl installieren poetry
ich tippe das einfach nur ein weil ihr das sagt nicht dass ich irgendwie ahnung davon
hätte man könnte das mit dem container machen ja das würde würde funktionieren was ist
das packaging dependency manager nee das ist nichts mit ich würde sagen wir bleiben
einfach bei dem der vor installiert ist ich weiß für meine zweck ist das doch eh erst
mal egal erst mal den shell script ausführen ok vias code def container habe ich noch nie
verwendet was ist das developing inside container six hat time also haben wir alles installiert
ja ja ok lelux habe ich habe ich alles installiert ich habe auch dockerberechtigung remote developer
extension pack muss ich installieren aber das ist vias code ich will vias code nicht
verwenden ich habe keine ahnung was ich will ich wollte eigentlich nur die neust die allerneuste
python beta version ausprobieren ich will dann vias code gar nicht verwenden achso ok
das ist tatsächlich easy warte mal das probieren wir jetzt mal kurz aus ich mein jetzt habe
ich das ganze z plus plus zeug hier offener wartet mal ein eigener ordner ja ich truste
komplett so was muss ich installieren ich habe ich habe schon docker extensions installiert
hier remote remote ok was muss ich installieren die jetzt jetzt jetzt finde ich nicht wo steht
was ich installieren muss hier den krempel da remote development muss ich installieren
webpack webpack habe ich immer in großen großen bogen drum gemacht remote development soll
ich installieren alles klar ok so jetzt wird es jetzt wird es jetzt wird es gleich richtig
zum einstieg mal advance hier restart vias code mache ich sofort so mark dann ja ja ja
dann so und wie geht es jetzt weiter quick try development container the easiest way
to get started the containers also sprich einfach einfach container oder was nee ok es
remote containers docker ist installiert was ist das was ist das für ein massive ja ja
habe ich alles moment das ist wieder was anderes habe ich das habe ich das noch nicht installiert
jetzt ich habe alles installiert nee remote content doch doch tatsächlich jetzt schon
bloatet ja wir brauchen erst mal docker dass wir passen soll ich machen können was restart
schon wieder ok was mache ich jetzt sagt es mir chat wie wie funktioniert das hier check
installation open folder in container attach running container was zum hier try a development
container sample ok ok was auch immer try a try a development container example komm
mal da gibt es sogar postchamp der lädt jetzt wahrscheinlich gerade runter oder ja warum
installiert der npm what is happening bloatet erst mal die festplatte voll erst mal festplatte
voll geblutet ja ich warte es auch nur weil der chat das geschrieben hat und wir wissen
ja prinzipiell der chat hat mittlerweile ein IQ level erreicht da kannst du eigentlich
nichts mehr dagegen sagen was macht das ding monka es ok press start es ist eine flask
ich will keine flask app ja
ich hatte ich eigentlich vor aber der chat mein visual studio code developer container
sind massif geil so und nun installen was installiert er da so chat ohne über jeden zweifel haben
natürlich was was ist aber was macht er denn da im hintergrund
er macht dinger guck mal was macht er denn das würde ich auch immer machen was zum was
installiert er mir da alles bloat bloat run any percent allah was ist das ich glaube ich
muss danach mein visual studio ordner erstmal löschen weil die festplatte voll ist sondern
hatte ich eben noch bei 42 gigabyte nie der installiert mir das gar nicht alles der hängt
einfach so leh leh leute das ist mir jetzt zu zu zu six hätt ich das kann ich das mache
ich jetzt nicht warum gibt es nicht ein stink normalen version manager ok lithium dann sag
mir sag mir was ich machen soll ich habe jetzt einen eigenen ordner so eigene ordner guck
mal beste so ich mache jetzt das damit auf da ist nix drinne in dem ordner ich habe
das ups noch nie verwendet wie in github containers ein def container erstellen in dein projekt
machst du def container geisen oder docker fall 3 ne das mache ich jetzt nicht das mache
ich jetzt nicht das muss ich mir irgendwann mal auf stream angucken was hat er mir denn
jetzt alles draufgehauen remote vs l remote edit man visual studio kohl flatter gehst
weg so auf gehts pie entf ja pie entf ist auch das einzige wie ich habe pie entf sogar
noch drauf wait a minute install gibt sowas wie update oder so install kann ich kann ich
sagen 3.1 3.11 beta 3.11 beta 3 ne ah das das kennt er noch nicht die neueste beta version
also richtig outdated jebaited so wir bleiben jetzt wir bleiben jetzt bei dem was ich installiert
habe ich glaube das ist doch ganze ecke einfacher also neues projekt meinung zu commander krieger
kommt jetzt etwas überraschend ja ich habe mir mit mit dem krieger seit 5 jahren nichts
mal großartig zu tun gehabt gibt es irgendwie den anlass hat er irgendwas angestellt oder
einfach nur so kommt jetzt sehr überraschend ja also virtual entf will auch standardmäßig
ok er macht schon standardmäßig virtual entf der existiert ja die klage existiert
auf dem fall manchmal sachen auf dem kopf habe ich gesehen im stream ich lasse jetzt
einfach mal die defaults ich lasse jetzt einfach mal hier alles default ausgewählt
ja wir gehen davon aus pajam weiß was es macht ich will nicht 3.11 b0 ich will 3.11
b3 aber das gibt es hier nicht ok create ok warum ist da ein breakpoint drinne brauchen
wir nicht die fort beste so terminal sind wir hier ok heißen main ok es läuft schon
also print weg jawoll ok das funktioniert also so ist so was hat er hier dran auszusetzen
no new line at end of file da ist aber pingelig ist aber ganz schön pingelig oder ok das
funktioniert schon einmal also jetzt muss ich erst einmal gucken dass ich die schriftgröße
irgendwie ordentlich einstelle weil das ist nix font font nicht jetblades mode hack auf
16 18 bm jawoll das ist doch schon viel besser habt ihr irgendwelche sieben empfehlung ansonsten
würde ich jetzt einfach mal gucken ob es nicht das rider das rider sieben einfach für pajam
gibt hier nicht davon aus dass es gibt die haben das doch teilweise gradin toh was one dark da purple not
es erinnert mich zu sehr an nord vpn material sieben wishel studio co dark plus kein bild was was
ohne bild nehme ich nicht atom 1 rider ui ja ja please da weiß ich wenigstens wie es aussieht
rider ui perfekt install ich also das default ist aber nicht das rider ui das war high contrast
nee nicht heiko rider dark rider dark ist ok wo ist oder wo ist studio da meine augen
oder wo ist studio da ist jetzt mein font wieder weg ich glaube ich glaube ich starte das noch
mal neu das ist das glaube ich etwas abgekackt gerade nein ja ja ich got it always download ich
weiß zwar nicht was aber always download visual studio sieben wishel studio rider rider dark oder
wishel studio rider dark komm rider dark gut fertig alles klar wunderbar schriftgröße passt
hat jetzt meine meine font size eigentlich umgestellt hack 18 alles gut ok auf geht's
jetzt jetzt bin ich mal gespannt also wisst ihr was ich mir überlegt habe was zum üben ja ich
weiß dass es schon tausendfach gibt aber zum üben einen download speed test also ich werde
mir ich habe mir schon eine seite rausgesucht nämlich die hier guck mal wir werden jetzt einfach
mal ganz dreist nicht speed champ kleinzeitig wir werden jetzt einfach mal ganz dreist ich
habe nämlich eine speed test seite von hetzner gefunden und da kann man einfach downloaden
zehn gigabyte datei das sollte zum speed zum speed testen reichen mein ziel ist ja eh dass
ich das abbrechen kann dann nach irgendwie zwei sekunden wenn er gemessen hat wie schnell es
maximal geht man ks musiker ok also dann dann mal der reihe nach lasst mal lasst mal kurz in
mich gehen also im schluss machen wir das multithreaded das letzte mal wo ich mich mit
multithreaded in python beschäftigt habe war vorbei das kann überhaupt nicht funktioniert
gescheit das ist aber auch schon eine ganze weile her stimmt wir machen da keine semi
cola uns hinten dran ja ich bin es einfach so gewöhnt semi cola hinten dran zu machen
aber guckt mal das funktioniert anscheinend was sagt er denn trailing semi cola ok es
funktioniert aber er will das nicht ok also mit was fangen wir an ich würde sagen wir
fangen mit was ganz simplem an nämlich wie mache ich in htp request mit der standard
library leute ich will noch keine packages mit der standard library htp get wie funktioniert
das how to perform a ttp request bis pyson python part 1 standard library alles klar
rom urlip request import url open das sieht relativ easy aus das will ich so will ich das haben
so ach ja wie viele einrückungen macht man eigentlich ein vier oder zwei was ist denn
so der etablierte standard also ich vermute ich glaube genauso ich glaube vier oder halt
vier vier für den tab ein tab ich glaube da macht startmäßig spaces zu tabs ja vier
spaces ist es chat ist sich uneinig der chat hat so einen hohen intelligenzquotient ist
kein gewunder dass die sich uneinig sind da ist jeder fife hättiger als der andere also
normalerweise mag ich ja zwei das kennt ihr von meinen anderen editor einstellungen normalerweise
habe ich ja immer zwei spaces aber wir bleiben jetzt hier mal bei dem bei dem default so also
warum kann ich das hier nicht verschieben weil die settings shortcuts manage shortcuts gibt es gibt
es von jetframes jetframes irgendwie ne ide sync oder so also dass man die die einstellung von
der ein ide in die andere sinken kann oh hier aha ne login mit dem account ja das ist mist das
meine ich nicht share ide settings ne ich dachte dass ich meine rider keybindings da irgendwie
verwenden kann ok line move line move wo ist move line move line ab
add keyboard shortcut bamm ist zu irgendeinem anderen müll gebunden den keiner braucht keyboard
shortcut down comment comment with line comment with block add keyboard shortcut oh ne das
funktioniert so glaube ich nicht wie kann ich multi wie kann ich multi line binden nicht
mulche wie will ich wie kann ich sagen dass ich kontrol c kontrol kontrol k kontrol c
ne ne anscheinend ja dann kann dann muss es erst mal so reichen also so wir wollen nicht
die nasa url ok wie macht man eine function funktion macht man glaube ich immer noch so
oder def und dann irgendwie sowas wie irgendwie measure download speed in mbit url nach quatsch
hängen geblieben aber brauchen keine klammern und wir brauchen kein simpel cola und wer so
und jetzt den kram hier rein schauen wir mal so funktioniert was hat er denn hier für schmerzen
damit eigentlich expected to blank new lines expected to obendrüber obendrüber ok da hat
aber äußerst genaue vorstellungen wie das aussehen ist wie das auszusehen hat ja sharing
your ide settings ist wie man die shared nicht wie man die zwischen eigenen ide shared oder
das hatte ich eben kurz auf aber ich glaube das ist was komplett anderes
between different instances of the same product ne das ist es ja nicht ich will ja quasi
meine rider shortcuts nach pyjam importieren egal das funktioniert schon so was hat er
denn jetzt für probleme mit url was hat er für probleme mit mbit typo in word mbit soll
ich es allen jetzt megabit schreiben oder wie ok so url url name shadows from autos go
ok ja ok verstehe measure download speed nicht dass ich wüsste was ich mache ich habe immer
noch keine ahnung wie ich es denn dann machen will er unten drunter auch zwei haben acht
er will über und unter den funktion immer zwei zwei sachen haben aha gut zu wissen warum
auch immer so open ne url open s response response read ich will aber nicht response
read ich brauche den download callback oder sowas oder oder ne wie lese ich denn ok heißt
denn download will open chunks oder so stream large binary file with urlib urlib das klingt
auch gut ist miss chunker ne response url open ach hier hatte die response ok also response
read und dann die chunk size also 4096 und aber das muss ja nicht zwangsläufig 4096
sein ok endlos schleifend time es ist weil eins oder ist es weil true ne es ist pysons
es ist weil true mit dem großen t glaub ne wie heißt das programm das er nutzt um linux
den windows zustand das hier ist vor immer workstation ich habe es nur im fullscreen
auf dem zweiten desktop also guck ich hab das so du kannst hier unten mit windows 11
geht das auch du kannst mehrere desktops aufmachen unter windows ich habe einen zweiten desktop
da habe ich vor immer workstation im fullscreen fullscreen drauf laufen kam hier ober mich
ausgestellt und es kann ich mit tastatur shortkarte rüber switchen auf windows und rüber switchen
wieder auf die vm ist sehr praktisch weil die meisten sachen sind einfach pains champ
unter windows zu erledigen ok ergibt das sinn was ich hier mache data response read ok print
data ne moment länge sekunde länge len so ne ein bisschen ein bisschen ein bisschen
es kann erinnern kann ich mich ja noch ok zeig mal her ich weiß dass es ne endlos schleife
ist die aber wahrscheinlich jetzt das ganze ding kaputt machen aber ich will wissen was
passiert denn wenn er fertig lesen ist aber das kann ich bei 10 gigabyte bei 10 gigabyte
ja nicht ausprobieren ich glaube die hatten auch 100 mb datei bäm not found ok was 100
mb excellent null ok null also sprich wenn ich null gelesen habe ist der input zu ende
gibt es gibt es auch sowas wie response ok es gibt keinerlei autocomplete leute wie kriege
ich da jetzt ein autocomplete für dass ich weiß was das ist wie kann ich den dazu überreden
das zu autocompleten ich meine neue type annotation habe ich gelesen man kann glaube ich sowas
machen gell oder str oder so das das geht glaube ich das habe ich letztens in dem video
gesehen space before da ist aber äußerst pingelig so und return wert kann man irgendwie
so machen das kenne ich das war der autocomplete response hat nur read ja da gibt es kein das
hat überhaupt kein autocomplete ok heißen response muss man die hilfe gucken
response rttp response
response das jetzt response response objects also read haben wir zu bieten read into get
header message url headers status na gut status ist 400 das gibt es nicht sowas wie end file
end oder so status nee es gibt nur den status code den brauche ich keine ahnung ob das
nach geht das stimmt stimmt ja ja ich könnte ich könnte tatsächlich if data was kann man
if not data geht das auch ist null ist null not gucken wir mal hey 5 header alter ok das
muss das muss man auch wissen if not gibt es gibt es ein paar sie du weil oder sowas
ich glaube nicht ich glaube es gibt bloß vor und weil wenn ich das richtige erinnerung
habe nee gibt es nicht ok also das das würde funktionieren data response read also in 4000
ok wenn wenn response aber wisst ihr was funktioniert passt mal auf 6 hat heim if nee oder
das wäre jetzt so schön wenn das funktioniert python weil running variable oder sowas es
ein variable in while loop condition excellent while line gleich ja genau sowas will ich
mache ah guck mal da doppelpunkt gleich das ist ja fast wie in goal ein bisschen doppelpunkt
gleich so da können wir uns das nämlich sparen drin checken ob das auch funktioniert oder
oder muss ich jetzt noch sowas wie das dahinter machen irgendwie schauen wir mal nee ok das
ist das finde ich schick dass das finde ich ganz nice nice nice so das ist schon kurz
und knackig das gefällt mir ok cool so ich retorne keinen int sagt er mir gut dann retorne
ich jetzt mal testweise einen int du lernst sogar noch was ja siehst du ich ich weiß gar
nicht wie es anders funktioniert das ist ein ganz neues feature siehst du leute ihr pleading
edge hütonisiert alles die nennen sich python programmierer eigentlich die russleute rennen
sich ja ganz ganz furchtbar cringe ich krass krass tachens oder so da muss ich immer auch
mit den augen rollen wenn ich das höre dass das irgendjemand schreibt oder ich höre nicht
dass es jemand schreibt wenn ich es höre dass das irgendjemand sagt beziehungsweise
wenn ich lese dass es irgendjemand schreibt das ist sehr neu enterprise developer enterprise
developer wäre angela und java ok also weiter lass mal lass lass mal fife hatten also leute
das müssen wir unbedingt etablieren anstatt zu sagen lass mal nachdenken lass mal konzentrieren
sagen wir ab jetzt immer lass mal fife hatten das ist auch sichergestellt dass es auf der
welt genau eine handvoll leute versteht kann ich als sap was entwickler bestätigen ist
das so lass mal fife hatten genau so wie kann ich jetzt überprüfen ok lass mal ich muss
mal ich muss mal kurz in mich gehen leute also ich möchte ja so viel downloaden so viel
wie geht und dann will ich abbrechen nach sagen wir drei sekunden oder so also ich muss
mir die size jetzt merken ok also size gleich data länge ne das muss ich hier oben reinschreiben
ne sei es sei es klar ich soße sei es gleich null so ah alter ich bin mal im semi kohle
und man sei es gleich null so funktioniert jetzt wenigstens das hochzählen und im moment
sei es plus plus kann man plus gleich machen ist plus gleich auch neu ich bilde mir ein
früher musste man sei es plus sei es machen wie gesagt meine pausenkenntnisse halten
sich in grenzen ok sei es das sollte doch jetzt funktionieren mit hochzählen oder ja
funktioniert sei es plus plus geht nicht sei es plus plus geht tatsächlich nicht das
das ist nicht pyson style genug anscheinend was macht man was macht man in pyson anstatt
dessen plus gleich eins wahrscheinlich ne was alter boah der ist aber mal super pingelig
der checker hier aber ist gar nicht schlecht eigentlich gar nicht so übel dann sieht das
wenigstens halbwegs ordentlich aus warum ich diese einschreite weil ich das mir bescheuert
weise angewöhnt habe ok also jetzt wissen wir unsere size davon so und von der idee
her kriege ich ja meine download geschwindigkeit relativ einfach raus und zwar wenn ich irgendwie
meine meine sagen wir mal time now ich weiß dass ich das so nicht geht aber nur mal von
der idee her ja von der idee her würde ich sagen time now dann würde ich so was sagen
wie elapsed elapsed oder sowas und dann irgendwie now minus start falls man das start so und
dann würde ich einfach sei es geteilt durch dauer machen und dann hätte ich mein download
geschwindigkeit so ungefähr aber das funktioniert wahrscheinlich nicht date time now date time
now pyson format on safe ja können die bestimmt das ist eine gute idee format gucken wir mal
ob der das ob der das checkt wenn ich das so mache und sag jetzt hier format document
ja das checkter safe format on safe format safe actions on safe reformat code excellent
nao date time now was kommt denn da raus wenn ich date da date time now benutze nein es
ist ein eine raute ok was kommt denn da raus date time not defined ok import muss man importieren
date time from date time da hätte ich auch selbst drauf kommen können ok und das kann
man voneinander abziehen geht das ach so ja natürlich das ist klar dass das nicht funktioniert
das ist das ist klar dass es nicht funktioniert ich muss quasi sowas hier machen start und
dann date time now minus start ja das funktioniert easy ist das der ist das der pyson gedachte
weg sowas so zu machen oder wir machen mal pyson time oder gibt es sowas wie stop stop
watch oder sowas how to create a stopwatch nee dachte vielleicht in der standard library
schon drinne ist es der pysonic way genau elapsed time how to measure elapsed time in
pyson time it import time time another option science pyson 3. might be perfcounter was
aber warum gibt es da 20 varianten warum gibt es date time now time time time perfcounter
time process time da komme ich ja fast wie ein java script von mit sich in deprecated
sachen perf perfcounter klingt so als wäre es super superschnell jetzt gibt es ein beispiel
für import from time import perfcounter ok ich hasse das kann ich einfach sagen from
time import time oder einfach nur import time und dann sagen time perfcounter doch
viel besser so ok also achtung gucken wir mal perfcounter ahja obvious alles klar 2711
das ist meine ab time wtf das ist meine ab time aha ok ok ich habe keine ahnung warum
es da so viele varianten gibt aber ok wir nehmen jetzt den perfcounter das sieht moderner
und und pfeilfertiger aus ach guck mal der kann sogar das eindrücken jetzt selber machen
da gott sei danke ok also now ist dann time perfcounter bla bla bla read und jetzt ist
die elapsed ist time perfcounter minus start und dann die size size durch elapsed ja wo
da vorne war auch schon mal schneller aber das ist jetzt ja insgesamt über den gesamten
download das passt zum das ist viel zu schnell ah moment moment moment lass mal kurz überlegen
das ist jetzt ja auch in megabyte nee es ist nicht in byte das sind bytes in bytes pro
sekunde was kommt denn da überhaupt raus pro sekunde oder was ist das ja pro sekunde
seh ich das richtig also die einheit hier ist jetzt bytes pro sekunde also bytes pro
sekunde also sprich irgendwie 50 mb das kann durchaus sein 400 mbit zu megabyte das sind
irgendwie was um 15 doch gar nicht so schlecht das das kommt schon ungefähr natürlich ist
das so wie ich das messe absolut hirn verbrannt aber von der idee her ist das glaube ich schon
mal gar nicht verkehrt so so und wir messern wir messern da jetzt natürlich nicht das so
sondern wir warten eine sekunde messern das einmal und dann resetten wir das und dann
messern wir dreimal und nehmen dann irgendwie den höchsten wert oder sowas von würde ich
sagen also lass mal überlegen ob das funktioniert was ich mir da so vorstelle also if elapsed
größer gleich eins also eine sekunde dann bin ich das ok und dann resette ich sei es
und resette ich elapsed auf neustart wert aber wir können uns ich habe eine idee was
wir machen wir machen das objekt orientiert ich baue mir ich baue mir eine stoppur klasse
dafür nicht weil sinnvoll ist sondern einfach das ist das miem zu teimet es gibt ein miem
zu teimet was ihr alles gibt du musst schon start resetten das ist richtig muss start
resetten nicht elapsed so Leute das funktioniert relativ gut ich meine der bricht zwischendrin
mal
ja zwischenzeitlich bricht er immer mal ein da hat der hetzer server kein bock mehr ordentlich
zu antworten dann schwankt es schwankt ein bisschen ja muss die 10 gigabyte datei muss
erstmal wieder bei hetzer in cash geladen werden kannst du bei mir einen kurs machen
ja super ich bin als ich bin am besten um den kurs zu machen ja ich habe selbst keine
ahnung wobei es gibt so viele leute die was verkaufen wovon sie keine ahnung haben da
bin ich wäre ich eigentlich in bester gesellschaft stimmt der buffer ist ein bisschen klein vielleicht
gell ja der buffer ist ein bisschen klein komm wir machen einfach mal das zehnfache
ne ne ich war ich habe keine kurse dafür ist es auch viel zu verplant was ich mache da
müsste ich ja auch mal strukturiert irgendwas ne ne sowas gibt es habe ich nicht aber ich
habe gelesen dass twitter glorian wie heißt er irgendwie so algorithmen verstehen dass
der gerade an einem pyson buch schreibt und ich glaube der hat ein plan davon wenn es
was taugt dann ich denke mal das wird empfehlenswert aber ob es dann wirklich was taugt muss man
mal gucken spuky spuky musik sie konnten leute schon mal kurz was zu essen abholen unten
schicken
Das war's für heute.
Bis zum nächsten Mal.
Das war's für heute.
Das war's für heute.
ist ja nirgends win. Also meine download-geschwindigkeit ist ziemlich am schwanken. Guck mal hier,
wie die einbricht zwischendurch. Das könnte natürlich auch daran liegen, dass Vodafone
sonntags abends irgendwie rumspackt. Was die Magic in Zeile 12 macht, das weiß, das hab
ich auch gerade gelernt. Wie gesagt, ich hab keinen großen Plan davon, aber das hab ich
mir auch gerade ergoogelt. Das nimmt die Variable, also das schreibt das hier in die Variable
Data, sodass du Data in der Schleife verwenden kannst. Ansonsten hättest du es vorher deklarieren
müssen und checkt auch gleichzeitig Data auf die Abbruchbedingungen, ob Data true ist.
Das ist fast ein bisschen wie JavaScript, weil eigentlich kann ja ein Int, wobei das
ist ja gar kein Int. Doch, nee, das ist ein Array oder sowas, was da zurückkommt. Eigentlich
kann ein Array nie false sein, aber in Python und JavaScript geht das anscheinend. Das sind
4 Kilobyte mal 10. Musst du nicht die Endzeit, Startzeit messen, bis die Datei fertig geladen
ist? Nee, ich messe eine Sekunde lang. Guck mal, sobald eine Sekunde um ist, messe ich
die Zeit und dann setze ich Startzeit und gemessene Size wieder auf Null und dann mach
ich wieder von vorne. Also, das find ich nice. Also mein Downloadspeed schwankt ganz schön.
Warum das am Anfang so schnell ist, liegt wahrscheinlich daran, weil der Kram irgendwo
im Cache liegt. Entweder bei mir oder auf dem Server, beim Anbieter oder so, keine Ahnung.
Du nimmst 10 Gigabyte an RAM auf? Nee, Quatsch. Also so blöd wird er nicht sein. Der wird
da schon re-usen und garbage collecten zwischendurch. Das wäre ja bescheuert, wenn das mein RAM
voll machen würde. Ich mein, das hier ist nicht mehr, das ist ja nicht mehr referenziert
nach einem Durchlauf. Das wird er schon aufräumen. By the way Leute, wisst ihr, was ich gesehen
hab? Hier auf dieser Hilfeseite vorhin zu response, es gibt doch sowas wie read into. Und jetzt
mal eine blöde Frage, warum gibt es read und gibt es read into? Read into liest das
in einen Buffer, den ich vorher bereitstellen muss. Ist das schneller, weil das hier jedes
Mal dynamisch einen Buffer macht? Also wenn ich jetzt sage read into, also ja. Wie macht
man eigentlich einen Buffer? Wie heißt das? Buffer fixed size. Float a game, Dankeschön
für den Sub. Wie macht man denn Array? Wie macht man denn Array? Array, jawoll. Ich brauche
einen Buffer mit einer festen, wie geht das? Fixed size. Fixed size, ok. Das kann doch
nicht sein. Nee, nee, nee, nee, nee, nee. Wenn die in der Standard Library drinstehen
haben, read into, da brauche ich dazu garantiert keine extra Library, dass es. Aber List gleich
Null kann es ja alles sein. Memory View, what? Ok, Python Array, bytes. Byte, was? Byte Array
message returns, a byte array object. Ich bin einfach nur am googeln, aber so ist das
halt, wenn man was Neues lernt. Byte Array Syntax. Byte Array Source. Ich habe keine
Ahnung, geht das? Buffer? Und was jetzt? Byte Array? Ok, Byte Array. Ja, example please.
Byte Array Objects. Byte Array. Source encoding. Ah, zero filled instance with length 10. Also
Byte Array 4096. Read into. Ich glaube der andere Weg ist schon der bessere, oder? Read
into returns die Länge der gelesenen bytes. Also es ist nicht data, sondern es ist Länge.
Und da muss ich gucken, ob Länge größer Null ist. Ok, Leute das andere ist aber schöner.
Wobei ich dann hier direkt, wobei das muss ich nicht Länge numm, numm heißt das jetzt.
Dann muss ich hier nämlich size. Und ist das jetzt? Nein. Was steht denn in numm drinnen?
Was? Ah, Moment, der schreibt das da jetzt rein. Kann man das klammern? Aha, hey, das
funktioniert. Das ist jetzt aber eher C-Style als Python-Style, oder? Ich glaube nicht,
dass es so gedacht ist, das zu verwenden. Aber das funktioniert. Aber wirklich schneller
ist es auch nicht. Aber das macht keinen Unterschied, guckt mal. Das macht überhaupt keinen Unterschied
in der Geschwindigkeit. Ok, das mache ich wieder rückgängig, das ist ja komplett unsinnig
so. Also es war vorher doch schon schöner. Das Byte Array kommt auch wieder weg. Read,
ja. 4096 muss reichen. Das Internet wird auch... Ja, aber guckt mal, die ersten paar
kommen aus irgendeinem Cache und es geht mega schnell. Und danach geht es wieder runter.
Jetzt bleibt es länger oben. Nee, jetzt geht es wieder runter. Ok, jetzt rechnen wir das
mal um. Jetzt Leute, jetzt rechnen, lass mal Fivehead sein. Also wir rechnen das jetzt
um. Die... Nimm mal raid. Let raid gleich... Was mache ich denn hier, meine Güte. Raid,
klar. Kein Semikolon, kein Let, kein War, nix. Nimm mal raid. Ja, ich bin ja noch zu
hardcoded von anderen Sachen. Size durch elapsed ist die Raid. Ok. Raid... Leute, wir
machen es in Bit, oder? Wir machen es in Megabit. Also es ist die Size mal 8, dann ist es dann
in Bit und dann die Raid durch 1024 Kilobit durch 1024 Megabit. Ergibt das Sinn, was ich
mache? Schauen wir mal. Nicht... Naja. Wobei das kann schon sein. Was ist noch ein Vorstellungsgespräch
für Physiak? Ich dachte, du hast den Vertrag schon unterschrieben. Ja, kommt hin, oder?
Ich meine, es müsste eigentlich 400 MBit sein. Nee, nicht das durch 8. Ich habe das
hier mal 8 gemacht, dass ich es in Bit habe. Ich habe das ja schon in Bit. Dadurch habe
ich das in Bit. Ich sag doch, die suchen Leute. Wie verrückt. Ok, passt, passt. 400 MBit,
maximal. Leute, ich habe eine Idee. Wir traffic-shapen einfach mein Interface runter auf irgendwas
und dann sehen wir, ob... Monkeys. Was ist das? No. Was habe ich gedrückt? Wir traffic-shapen
jetzt mein Interface und dann sehen wir, ob das funktioniert oder nicht. Ich muss aber
noch mal kurz in mich gehen. Also, das hier ist die Raid in MBit. Wir machen das anders.
Wir machen jetzt noch was wie Max Raid. Hier unten returnen wir Max Raid. Problem ist nur,
wenn es 0 ist, Leute. Da gibt es die Weit-durch-Null-Error. Wobei, nee. 0 durchgeht ja. Plus durch
0 geht nicht. Also, Max Raid. Was hat er für Schmerzen jetzt? Expected Type-In, Gott, Float.
Ja, dann stell dich nicht so an, dann Float. Nee, das muss so schon funktionieren. Ich
will da keinen Exception Handling-Krobot machen. Raid. Und jetzt, und jetzt, passt mal auf,
und jetzt machen wir es so. If Max Raid ist kleiner als Raid, nur dann setzen wir Max Raid
auf Raid. Das heißt, so kriegen wir immer das Schnellste, weil was interessiert mich,
wenn der Download zwischenzeitlich mal schwankt. Ich will einfach nur gucken, was das Schnellste
ist, was durchging. Kann man sowas machen? Max Raid gleich Raid if kleiner Raid? Geht
sowas? Nee. Ok, weil in Ruby würde das funktionieren. Aber das geht anscheinend nicht. Ja gut, else
könnte ich hier machen, aber das ist... Ah, das geht tatsächlich, aber das ist nicht
das, was ich haben will. So. Rind. Max Raid. Ja, am Anfang flutscht es mal. Wir brauchen
noch mal einen anderen Server zum Speedtesten. Speedtest10gb. Gibt es da nicht noch irgendwelche...
Hier, genau das gleiche habe ich gesucht im Hinterhalt. Dafür habe ich nämlich diesen
Hetzner Speedtest Server gefunden mit 10gb. Belvispeed. Wunderbar. Das wollte ich auch
machen. Ist doch ok. Mal gucken, wie sehr das runtergeht. Alter, warum bricht denn der
Download immer so krass schnell ein? Guck mal, der Download ist total... Der startet
mega schnell und dann wird es kacke. So als Traffic Shape mich Vodafone übelst runter.
Der Download ist einfach nur halb so schnell, wie er sein könnte. Startet mega schnell,
wahrscheinlich, weil es aus dem Web-Server Cache kommt oder so. Aber das sind ja eh
nur Nullen wahrscheinlich. Guck mal, das ist richtig mies der Download zwischenzeitlich.
Sind die ersten Biles nicht immer mega schnell? Ja, wahrscheinlich, weil sie aus dem Cache
kommen. Ach, das ist random? Ja, trotzdem. Aber trotzdem Müll. Guck mal, wie lahm das
ist. Also müsste ich theoretisch die ersten 10 Sekunden vom Download fast schon wegschmeißen.
Ne, ne. Haben wir noch irgendwie einen schönen Test-Server? Speed X? Test File. Ok, ich
nehm' das. Test File. Test Download. Bandwidth. Test. Vergleiche das mal mit Weget. Doch,
ich könnte Speedtest CLI nehmen. Natürlich könnte ich das. Das ist aber nicht hin und
zweck der Sache. So, ich Wegette das mal. Ja, ja. Guck mal. Also mein Speedtest ist
relativ genau. Das geht einfach runter. Na gut, es ist Sonntagabend und es ist Vodafone.
Aber wisst ihr, was wir machen könnten? Ja, zwischens. Ja, das ist genau das, was ich
auch messe. Aber wisst ihr, was wir machen könnten? Wir könnten einfach einen parallelen
Download machen. Guck mal, sowas hier. Aber machen wir nur 10G. ARIA 2C und dann Minus
X oder so. X20? Ne. Das ist ein Kommandozeilen-Download-Manager, der Multithreaded downloaden kann. Minus X und dann
irgendwie 16. Da flutscht's, wenn ich jetzt einfach 16 Verbindungen aufmache. Guck mal.
Das bleibt am Limit. Leute, ich seh schon, wir müssen heute auch noch lernen, wie man
Multithreading in Python macht, dass ich das nachbauen kann. Ich ahne Schlimmes. Guck,
der bleibt immer auf einem Niveau, weil der eben zig, der macht 16 Verbindungen auf.
Das ist kein Ding. Aber mit einer Verbindung, können wir noch mal ausprobieren, wie das
mit einer Verbindung aussieht. Ja, jetzt ist es noch im cache und sobald es aus dem cache
draußen ist, geht's runter. Guckt. Async ist angenehmer. Ich weiß aber nicht, ob mir Async
was bringt. Ich brauch ja wirklich 10 gleichzeitige Downloads im Endeffekt. Ja, ok. Zumindest wissen
wir schon mal, dass wir wissen schon mal, dass meine Download-Messungen relativ akkurat
sind. Ich mein, exakt das gleiche passiert bei mir auch. Guck, das startet schnell.
Trosselt der Server die Connections? Ganz ehrlich, ich glaube eher sogar, dass das Vodafone ist.
Würde ich jetzt einfach mal vermuten, ja. Weil Sonntag Abend ist. Genau so ist das hier.
So. Alles klar. Ok, Fivehead-Time. Lass mal, lass mal. Also das mit der Max-Rate, das lass
ich mal, das lass ich mal weg. Ich mein, wir könnten auch sowas machen wie Bites to Mega-Bit.
Oh Gott, man. Ich wusste, wer das... Ich hab mir einfach zu sehr Klammern und Simikolon
angehört. Bites to Mega-Bit. So, und da machen wir jetzt einfach Return. Das durch 8 durch
1024 durch 1024. Stimmt das, was ich da mache? Ihr seid sixheadiger als ich. Und wenn ich
jetzt sage, Rate? Mal 8? Oh. Mal 8? Nee, Leute. Aber das muss man, das Klammern?
Hä? Ach, der macht immer noch mal 8. Hier. Lull.
Ja, ja. Das ist aber falsch, was ich mache. Moment. Moment, nicht die Rate, die Size.
Die Size. Wartet mal. Ist zwar doch richtig, was ich gemacht hab am Anfang. Nee. Ah, Moment.
Ich bin, ich bin, ich bin... Also jetzt ist es... Ah, man, Bites, Bit, Umreiche, please.
Das ist jetzt die Rate Bites pro Sekunde. Ah. Okay, das sind jetzt Mega-Bites pro Sekunde.
Und wenn ich das Ganze jetzt mal 8 rechne, dann stimmt's. Okay, gut. Alles klar. Das
ist dann, können wir uns, können wir uns das sparen. Bites. Alles klar. So. Das ist jetzt
vielleicht ein bisschen besser lesbar. Also, wie können wir das jetzt mit mehreren Connections
machen? Multithreading ist einfach. Thread, threading, target, minor, target, arcs. Okay.
Warum threads? Ja, was ist denn die Alternative? Ich lese in Chunks. Ja, aber ich mach nur eine
Verbindung auf. Ich will mehrere Verbindungen haben. Ich will mehr, ich will das hier quasi
mehrfach starten. Also von der Idee her, lasst mal überlegen, vielleicht sollten wir das
hier erstmal ordentlich machen, sodass es gut funktioniert. Also, ich müsste jetzt ja
von der Idee her, das sagen wir mal 10 mal starten und dann in allen Jobs, meine, oh
nee, ach du Scheiße. Wie mach ich denn das jetzt gescheit? Ich müsste den Kram ja auch
noch irgendwie synchronisieren, oder? Boah nee, das ist mir jetzt zu kompliziert. So,
wenn ich einmal insgesamt durchlaufen lassen könnte, wäre das easy. Also, wenn ich einfach
bis zum Ende durchlaufen lassen könnte und dann würde ich die Zeit, nee. Da muss ich
mir jetzt erstmal Gedanken zu machen. Ich glaube, das schieben wir jetzt erstmal auf,
bis ich ein bisschen mehr Basic Sachen gemacht habe. Genau, ich müsste aus allen Threads
die Rate addieren, aber, wobei gleichzeitig ist egal, oder? Nee, wisst ihr was ich bräuchte?
Ich bräuchte eine Liste, wo jeder Thread seine aktuelle Rate reinschreibt und dann
bräuchte ich noch so eine Art Monitoring Thread, der dann die Rate einmal in einer Sekunde
ausliest und zusammenrechnet. So was in der Richtung müsste man. Also quasi, ich schreibe
es nur sinngemäß hin, dass man irgendwie eine Liste hat. So, das ist Rate 1, also keine
Ahnung, das hier ist Thread 0, das hier ist Thread 1, das 2, 3, 4, 5, 7, 8. So, an jeder
Stelle schreibt der Thread seine aktuelle Transferrate hin und dann würde ich noch einen
Thread starten, der einmal in einer Sekunde nachguckt und das ausgibt, was da drin steht.
MonkaS, Alter. Da bin ich mal gespannt, ob wir das gebacken kriegen. Aber von der Idee
her funktioniert ja meine Messmethode so halbwegs. Wir sollten vielleicht nach 3 Sekunden, Leute,
wir brechen, ich meine, das sind 100 GB, die lade ich nicht so schnell runter. Wir brechen
ab, wir brechen ab nach 10 Lesendinger, irgendwie Counter gleich 0. Kann man eigentlich sowas
hier machen? Was? Heißen Multi Initialization. Assign Values. Hä? Ich bin einer, ich will
das gleiche Value haben. So. Okay, das ist doch unlesbar as fuck, oder? Das macht man
doch nicht. Sag mal, Leute, wie würdet ihr das schreiben? So oder untereinander einfach?
Untereinander ist die schönere Variante, oder? So, oder? Ich glaube, so ist doch die bessere,
die bessere Variante. AndiProfis hat Python-Channels wie aus Go oder Rust? Naja. Jede Programmiersprache
hat Channels in diesem Sinn, aber halt nicht Sündagstechnisch in die Sprache integriert
wie Go. Es gibt in jeder x-beliebigen Sprache sowas wie Channels, aber halt nicht mit der
schönen Sündags dazu. Warum überhaupt vor der Schleife Initialisieren? Äh. Naja,
weil ich die Sachen brauche in der Schleife und das Ergebnis nach der Schleife dementsprechend
kann ich es nicht in der Schleife machen, weil dann das Ergebnis nicht nach der Schleife
da ist. Na, wenn ich start in die Schleife pack, funktioniert das Ganze ja nicht mehr.
So, Counter. Machen wir mal hier, Counter. Wie war das jetzt? Plus gleich eins, ne? Genau.
Und jetzt, if, Counter, größer oder, wir machen mal größer, gleich fünf und dann
ausführen. Ja, funktioniert. In dem Fall ist es doch egal, ob das richtig echtes Multiswerding
ist oder irgendwas, was automatisch lockt oder, oder irgendwie das JavaScript-mäßig
Event-Loop queued. Wir warten doch eh hauptsächlich IO hier. Das sollte doch eigentlich keine
großartigen Auswirkungen haben. Wenn ich die Schleife, deine Vorschleife ist in dem Fall
tatsächlich blöd, weil ich mache hier diese Zuweisung drinnen. Ja, aber wahrscheinlich
ist es tatsächlich besser in dem Fall. In dem Fall ist es tatsächlich, ne, ich will
es ja laufen lassen. Fünf Mal oder bis es zu Ende gelesen ist. Das kann ja auch sein.
Letztendlich macht es aber nicht viel Unterschied. Das ist eins, zwei, drei, vier, fünf, sondern
beim sechsten Mal bricht es ab. Guck mal, größer, gleich fünf. Fünf, bumm. So. Wunderbar.
Eine Sekunde. Alter, es ist la... What the fuck? Ja. Okay, funktioniert. Wunderbar. So und
das jetzt Multithreaded. Das wird ja, das wird ja was. Eigentlich setzt man auch alles
unnötige, was nicht im Rift drin ist, außerhalb wie die Variablen. Du meinst, kann ich das
dann da drin gesche... Achso, ja. Meinst du so? Ja, ist auch deutlich sinniger, oder?
Was anderes kann ich nicht, gibt es nicht? Da kommt doch ein Request zurück, oder? Kann
ich nicht so machen? Request? Und dann das hier einfach weglassen? Ne. Warte mal. Einmal
nicht Response. Response. Response. So. Muss auch gehen. Ach, jetzt close da das aber nicht
automatisch, ne? Also müsste da ein Response close. Auf der anderen Seite, wenn es irgendeine
Exception gibt, dann kackt es ab. Dieses Width gibt es doch eh nur für den Fall der
Fälle, dass es dann finally Block drum macht, oder? Das ist schon, das ist ein bisschen
wie wenn ich ein, ein, ein Using in C-Sharp mache, vermute ich jetzt einfach mal. Ne,
dann ist das so schon sinniger. Was, while data gleich und re... Wie das funktioniert?
Und? Range? Was zum? Das geht? Igitt? Was hab ich denn? Was ist das? Monka. S hoch,
hoch 3, Alter. Und wie kann ich jetzt auf Range hier drinnen zugreifen? Ah ne, gar
nicht, muss ich ja nicht. Nein. Funktioniert nicht. Chat. Funktioniert nicht, was ihr gesagt
habt. Nope. No Pass. Das wäre ja aber auch hässlich für die Nacht. Das ist, ja der
macht einen und. And? Ne, das, ich will doch keine logische, ich will doch hier keine logische,
ne, ne, ne, ne. Da kommt jetzt hier als Datatyp True oder so wieder raus. Ne, ne, ne, ne,
das will ich nicht. Hier soll ja, hier soll ja wirklich die, die, die, die Response drinnen
stehen. Ne, ich bleib jetzt mal bei dem, was ich hier gemacht hab, man, das funktioniert
ja ganz gut. So, das mach ich wieder weg. Alter, wie oft hab ich denn die eins bitte
schon copy pasted? Was? Ok, wunderbar, Kunst. Ok, wie kriegt man das Multithreaded? Jetzt
wird's, jetzt, jetzt wird's richtig advanced. Also, ok, Multithreaded. Python. Task. Coroutines
and Tasks. Ok. Creating Tasks. For Range. Async IO. Create Tasks. Background. Oh, jetzt
wird's, jetzt wird's aber pfeifert. Was war das andere, was jemand hier oben geschrieben
hat? Threading Thread. Was ist denn da jetzt schon wieder der Unterschied? Warum gibt es
da verschiedene Dinge? Wann verwende ich was? Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok.
Wann verwende ich was? Ok, ich mach erst mal Threading Thread. Ok. Ok. Das, also, was
machen wir da jetzt? Import? Ne. Threading? Einfach so? Ok, das muss ich jetzt, das muss
ich jetzt mal kurz austest. Also, ich sag jetzt, was? Threading? Thread? Und dann? Hab
ich kein Autocomplete? Das ist schonmal äußerst not Pog? Doch, ich hab Autocomplete. Group?
Target. Alter, wie? Target. Also, Target ist dann Measure. Aber das, das, das braucht
ja ein Argument. Ah, hier. Arcs. Arcs. Und das ist dann was? So? Und jetzt sag ich irgendwie,
was kommt denn da jetzt zurück? Irgendwie ein Thread? Oder so? Und dann sag ich Threading
Join? Ne. Hab ich kein Plan ab, was ich mache? Einfach so Join? Ne. T1 Join? Join? Ah. Run?
Join? Start. Was ist denn da jetzt der Unterschied? Start. Also, muss ich erst jetzt noch sagen
Start? Und dann Join? Oder wie? Oder wo? Ne. Wow, wow, wow. 33 were given? What? Jedes
Character, oder? Wie übergebe ich denn da Arcs? Bei den Arcs musst du ein Komma hinter
die Klammer machen, dass er Eck. Hinter die Klammer? So? Oder so? Alter, 5 Head. Da wär
ich ja nie drauf gekommen. Kann ich nicht, warum kann ich nicht einfach sowas hier machen?
Jetzt mal was anderes. Jetzt mal was bescheuertes. Wie ist denn die Lambda Syntax in Python?
Wie sieht denn das aus? So? Also, kann ich nicht sowas hier machen? Ne. Aber wie? Was?
Das check ich nicht. Das kapier ich nicht. Ach, man muss da einen Doppelpunkt dahinter
machen, oder wie? So, so dachte ich mir das eigentlich jetzt. Ja. Da spar ich mir nämlich
diesen ganzen Arc-Krempel. Ja, ok, nice. So, und jetzt starte ich das mehrfach. Ich copy
paste das mal zum testen. Ja, das ist die T2. Ja. Punkt zioniert. Ok. Also, jetzt machen
wir eine Schleife. Oh, wie sieht eine Vorloop aus? Ich weiß ja nicht mal, wie man eine publische
Vorschleife macht. For range, range, range. Alles klar. Ok. For i in range. Das da. T1.
T1 start. Und jetzt muss ich das in irgendeine Liste schreiben. Keine Ahnung. Threads. Ich
hab keine Ahnung, ob das irgendwie Sinn ergibt. Und der Pythonic Way ist, was ich hier mache.
Threads. Push. Add. Insert. Er pennt. Ja, meine Güte, Alter. Ich hätte fast alles
durch gehabt. Ok. Und gibt es jetzt sowas wie threading weight auf eine Liste oder so?
Threading weight. Python thread join list. Ja, auf die Idee wäre ich jetzt auch gekommen.
Gibt es da nicht so, gibt es da nicht irgendwas fertiges? So alles in dieser Collection warten
wir mal. Concurrent Futures. Was? Submit. Ah, boah, das ist also die Standard Library
ist wirklich Sixhead. Da gibt es für alles 20 Varianten. Das Thread Pool Executor. Ok,
das ist mir gerade zu high IQ. Wir machen jetzt einfach das gleiche noch mal. Aber jetzt
kann ich so hier machen. Vor. In. Threads. Und dann kann ich sagen. E. Oh, guck mal, der
erkennt, dass das ein Thread ist. Sixhead Time. Aha. Guck mal da. Funktioniert. Und
was habt ihr eben gesagt? Soll ich jetzt List Com. Das kenne ich. Warum Threads und nicht
S und I. Oh, weil ich keine Ahnung habe, was davon die Vorzüge sind und was besser und
schlechter ist. Das erst mal ausprobieren muss. List Comprehension. X vor X in fruits,
F, A in X. Massive. So muss das sein. Also sprich anstatt sowas. Wir machen mal die
Kurzvariante von also. Nee Moment. Sagt mal gibt es gibt es nicht sowas wie Link, sowas
wie Each oder so. Each nee sowas gibt es hier nicht. Gibt es. Weißen List. Ich. Das
sowas. Okay, nee, ich glaube, ich lasse das einfach so. Aber das würde ich jetzt machen.
S wie vor I in range 6. Das kann man. Das bringt mir doch hierfür gar nichts. Das bringt
mir doch hierfür gar nichts. Hast du schon mal ein Replet ausprobiert? Weiß nicht,
was das ist. Jetzt habe ich es gelöscht. Ich kann nur. Leute, das bleibt jetzt. Das
bleibt jetzt so. Genug. Das reicht jetzt. Dann brauchst du die for each nicht? Moment,
das geht. Wartet mal. Das geht. T join. T in. Ach ja. Ganz ehrlich Leute, da gefällt
mir das untere aber besser. Da gefällt mir das untere aber besser als das obere. Kann
man sich jetzt drüber streiten? Chat, was sagt ihr? Das da? Okay, wir machen Umfrage.
Das interessiert mich jetzt. A oder B. Das oder das. Das oder das. Ob's, jetzt habe
ich mich vercopy pastet. Okay Leute, das geht nicht. Ich kann. Okay, das hier ist A und
das hier ist B. Also. Was findet ihr besser? A oder B? A oder B? A, B. Eine Minute Abstimmung.
Umfrage beginnen. A oder B? 50, 50 ziemlich genau.
Gleich ist der Paul vorbei. B? Ach so, ja, ja. Ich persönlich finde B auch schöner.
Irgendwie finde ich das griffiger, aber wahrscheinlich ist das die Frage, wie viel Pausen man schon
gemacht hat, ob man das schöner oder weniger schön findet. B. Ich kann aber, ich kann
aber das Pro und Contra, also viel Unterschied gibt es ja nicht, aber ich kann es verstehen,
wenn einer A mehr mag als B. Also, so will man das. Das erste als List-Completion schreiben
ist Pain's Champ, oder? Das will man eher nicht. Also wir starten, okay, wir starten
nur mal vier Threads, das sollte reichen. So. Ich bin mir immer noch unschlüssig, wie
ich das jetzt gescheit mache. Ich muss ja das Ergebnis. Ich mache jetzt mal was ekliges
Chat, weil ich nicht weiß, wie ich es besser machen soll. Ich weiß nicht, wie ich es besser
machen soll. Das hier ist die Nummer und ich mache jetzt eine Liste mit vier, irgendwie
keine Ahnung, Rates. Ihr könnt mir ja sagen, wie es besser geht. So, und das hier ist I.
Fängt es auch bei Null an. So, und die Raid, die Raid, die kommt jetzt einfach in I. Raid.
Warum geht das nicht? Unexpected Float? Hä? Ah, Moment. Hast du shadowed irgendwas? Warum
shadowed das da irgendwas? Welches Outer Scope? Was will er von mir? Hä? Okay, keine Ahnung,
ID. Das heißt jetzt einfach ID. Ah, das ist Build-In. Meine Güte. Keg W. Keg W. So.
Und er sagte mir, es ist ein Float. Na, meinetwegen ist es halt ein Float, wenn es... Nee. Ja,
was denn jetzt? Ach nee, Moment. Doch, hä? Du schreibst in eine externe... Ich weiß,
ich weiß, aber wo ist das Problem? Wo ist denn das Problem? Unexpected Types. Warum?
Moment, ich will ein Int. Int ist doch schon gut. Ich meine, das ist ein Index. Ach, das
hier ist... Moment, das hier ist Unexpected, oder? Das hier ist Unexpected. Muss ich da
F dahinter schreiben für ein Float oder muss ich 0,0 machen, dass das checkt? So? Ah,
so besser. Okay, gut. Jetzt, jetzt, also... So, da schreibt es jetzt... Ich meine, mir
fällt... Das ist wirklich eklig mit der globalen Liste, aber... Mir fällt gerade wirklich
nichts anderes ein. So, und hier unten machen wir das jetzt folgendermaßen. Wir machen
hier vor dem Join, wir machen eine Schleife. Vor E in Range 10, mir vollkommen egal. So,
und jetzt Rind Ranges. Boah, das muss man doch schöner machen können. Wie rechne ich
das jetzt alles zusammen? Gibt es sowas wie Zoom oder so? Ranges? Zoom? Nee. Zoom Ranges?
Nee, geht nicht. Ach, Rates, nicht Ranges. So, und ob das jetzt... Hey! Wait a minute,
wait a minute. Das Print muss weg. Threading? Sleep? Time? Sleep? Sleep? So, okay, und funktioniert
das jetzt theoretisch? Leute, wir haben angeblich mehr Bandbreite, als meine Leitung überhaupt
kann. So wirklich gut funktioniert es nicht, was ich hier gebastelt habe. Wo davon hast
du diesen Trick? Kann es sein, dass du vergessen hast, durch die Anzahl der Threads zu teilen?
Nee, ich will nicht durch die Anzahl der Threads teilen. Die Leitung soll ausgelastet sein.
Die Threads können so viel machen, wie sie wollen. Ich glaube, ich weiß, warum das geht.
Ich weiß, warum das nicht geht. Weil ich hier immer nur pro Sekunde reinschreibe und pro
Sekunde ist halt viel zu lang. Da hat ein Thread mal viel gemacht, ein weniger. Nein,
wo davon lässt er auch nicht kurzzeitig mehr Traffic zu? Das ist einfach miesgemessen,
was ich da mache. Meine Einheiten sind falsch? Nee, meine Einheiten sind nicht falsch. Warum?
Ah, meine Einheiten sind falsch. Weil es Raid ist. Und Raid ist, Moment, Moment, meine
Einheiten sind tatsächlich falsch. Ich muss sowas hier machen. Bites to megabit. Ah,
das ist doch, das ist gar nicht schlecht, Leute. Das ist ziemlich, das ist ziemlich gut. Das
funktioniert. Zwar nicht so, nicht so nice, wie gedacht. Übrigens, das mit dem Join,
das mit dem Join kann ich mir einfach mal komplett schenken. Das brauche ich nicht.
Wir lassen es einfach 10 Sekunden laufen und wir schenken uns auch jeglichen, jeglichen
Counter. Wofür das lieb? Naja, dass ich will nicht 100% CPU-Last verursachen. So. Ja,
Funst. Du musst in der Raids-Liste den Wert wieder auf Null setzen, wenn ein Thread durch
ist. Das ist richtig, aber die Threads sind nicht durch, weil die einen Terabyte runterladen.
Aber du hast recht, das müsste ich. Aber bevor... Oh. Was ist jetzt? Ach so, da ist 10 Mal durchgelaufen.
Okay. Warum beendet der sich nicht, wenn er 10 Mal durchgelaufen ist? Keck. Lass mal 5
Mal durchlaufen. Warum beendet er sich jetzt hier nicht? Weil noch Threads offen sind?
Sollte er das nicht checken? Und einfach sagen hier und Tschüss, Goodbye? Cancel gibt es
nicht, oder? Schalt um auf Demon Threads. Kann ich die abschießen? T1? Wie schießt
man Threads ab? Das sagt man ja eigentlich, dass man Threads nicht abschießt, sondern
eigentlich sagt man Threads sollen sich ordnungsgemäß beenden. Was? List Clear? Nee, das bringt
doch gar nichts. Du meinst Threads Clear, aber davon hören die doch jetzt auch nicht
auf. Ich warte doch gar nicht. Ich warte aktuell. Doch. Nee, warum sollte Threads Clear
irgendwas bewirken? Also wenn das funktioniert, würde mich äußerst wundern. Ich warte doch
überhaupt nicht explizit da drauf. Ich mach nur die Liste leer, die Threads laufen immer
noch. Nee guck, es hängt immer noch, sag ich doch. Aber wenn ich die in Demon Modus
versetze, dann laufen die wahrscheinlich weiter im Hintergrund, selbst wenn mein Python Programm
weg ist. Nee? Machen sie nicht? Oder ich sag, was war das? Kill? Gibt's nicht, oder?
Python Thread Kill. Das ist hochgradig eklig, was ich hier mache, aber... Man kann das nicht
killen. Der Multiprocess Thread, das könnte ich mal, da könnte ich den Prozess abschießen.
Das, das ersitzt... Nee, ich will nicht joinen, ich will, das soll einfach, das soll einfach
abbrechen am Ende. Ich würde es eh nie so machen. Das ist jetzt nur, weil ich gucken
wollte, ob es funktioniert. Aber es funktioniert von der Idee her. BW? BTOP? Nee. Linux Bandwidth
Monitor. Alter, jetzt wird rumgespammt, äh. Nee, nee, nee, nee. Was war das? EFTOP? Nee,
nee, nee, nee. Nload, Nload, Nload war nice. Will einfach mal wissen, ob der das dann auch
richtig beendet. Nload? Alter, wie viel haben wir denn hier jetzt, Mann? Nee, wie hieß der
Kram? Nload? BMON meinte ich. Ah, das haben wir nämlich auch installiert. So, also macht
der denn jetzt hier was? Bandbreite pro Sekunde. Zeig mal her. Ja. Das Funst, 50 MB. Das hier,
ok. Wenn ich es beende, ist es alles weg. Ok, was hat der Chat gesagt? Ich soll heißen
Demon Threads verwenden. Zeig her. Import, Threading, Import, Sternchen. Set Demon, true,
null W, ok. Oh, soll man das nicht mal verwenden? Ist es Set? Attribute? Äh. Äh. Keine Ahnung,
true. Ah, ich hab vorher schon gestartet. So. Ah, jetzt beendet sich alles am Ende.
Aber aus irgendwelchen Gründen ist er jetzt langsamer als vorher. Muss ich T1? Ah, so?
Warum ist er jetzt langsamer als vorher? What the f... Ach, ich starte das gar nicht
mehr. Ah, nee, jetzt passt es. Ok, nach 10 Mal beendet er sich. Ok, nice. So, schön
ist nun wirklich was anderes. Aber es funktioniert. Also, wir lesen das alle 10 Sekunden aus.
So, und jetzt, und jetzt können wir das hier natürlich nochmal ne ganze Ecke, ne ganze
Ecke schöner machen. Und zwar, wir können uns hier drinnen theoretisch sogar das mit
dem Elapsed, Elapsed sparen. Mal gucken, mal gucken wie hoch dann die CPU-Auslastung wird.
Mal gucken. Ach nee, Moment, das mit dem Reset. Warte mal, nee, nee, nee, nee. Wir
aktualisieren das jetzt jede, jede, jede 100 Millisekunden. Wow. Ja, die erste Messung
vielleicht nicht stimmt, kann ich, kann ich verstehen. Jetzt ist es ziemlich am Limit,
ne? Jetzt ist es, jetzt ist die Leitung eigentlich komplett, komplett ausgelastet, wenn ich das
so richtig sehe. Oh ja, bam, 50 MB, 52 MB. Ja, ich mein, das müsste man wahrscheinlich,
wenn man das wirklich genau messen will, schon, man könnte das sicherlich noch deutlich
besser machen. So, aber jetzt gucken wir uns mal was anderes an. Was ist denn jetzt der
Unterschied zwischen, was ist denn jetzt der Unterschied zwischen dem hier? Ok, Python
Threads versus AsyncIO. Jetzt Five-Header-Time, Alter. Wow, das ist mir deutlich zu lang.
Ich brauche Stackoverflow-Antwort für, für Noobs. Alter, was sind das alles für Riesendinger?
Yeah, gut, das ist, das kommt mir jetzt zugute, weil ansonsten hätte ich hier garantiert
irgendwelche Exceptions, weil ich versucht habe, auf das gleiche Objekt gleichermaßen
zuzugreifen. Twitch geht, klar. Download ist jetzt erstmal nicht so wichtig, denke ich.
Ich kriege auch meinen vollen Upload nicht voll, dadurch, dass ich noch, äh, Download
nicht voll, ich uploade. Async allows concurrency within a single thread. This gives you as
much more control of the task switching. Moment. Jetzt blicke ich nicht mehr durch. Es gibt
Python Threads, die ineffizient sind. Dann gibt es quasi so eine Art JavaScript Event
Loop mit, mit Async Await oder sowas. Und dann gibt es Multiprocessing, wo er dann aber
wirklich die komplette Hardware ausnutzen kann. Das heißt, der Fork dann den, das heißt,
der Fork dann den Mainprozess irgendwie achtmal und braucht achtmal so viel Speicher oder
wie oder was, hä? Python Multiprocessing Thread. Ich sehe es schon, das ist Sixheadiger, als
ich das gedacht habe. Was from Multiprocessing Import Pool? Pool 5 SP. What?
Und warum kommt hier eins, vier, neun raus? Ach so, weil er, weil er das irgendwie zusammen
rechnet oder? Ach, keine Ahnung. Was hat's, was hat's hier mit, mit Pool auf sich? Über
den Pool kann deine Mainfunktion, kann deine Funktion den Return Wert an die, an den Mainprozess
zurückliefern. Aha. Lass mal kurz überlegen, wie würde ich da meist mal Threads oder Multiprocess
außen vor, wie würde ich das denn jetzt sagen, sagen wir mal in, in, sagen wir mal in.NET,
wie würde ich das denn jetzt ordentlich machen? Muss ich mal kurz, mal kurz in mich gehen.
Ich meine, so global Ding kann man machen, aber die schönste Variante wäre eigentlich,
wenn ich eine Klasse hätte, die, die ein Threadsafe Property hat, wobei ich mich ja
in Python anscheinend um Threadsafe, Safety nicht kümmern muss und das lese ich dann
aus. Dann bräuchte ich nämlich so global, global Ding hier nicht. Ok, dann fang mal
an, wie macht man denn eine ordentliche Klasse in Python? Gibt's Logs? Ich hab keinen Plassen,
schimmer, ob es Logs gibt. Weil anderweitig oder aber, was auch funktionieren würde ist,
ne, würde nicht, würde nicht funktionieren. Also Klasse, gibt's da kein Makro für? Python
Klasse, Example, Example ist immer gut. Klasse, My Klasse, x gleich fünf. Inlet ist so was
wie ein Constructor, das kenne ich noch. Das kann ich mir noch dran erinnern. Also Public
Klasse, wir nennen das hier jetzt einfach mal Speed Test. Mir fällt grad nichts anderes
ein. Speed Test, wir brauchen global, gibt es sowas wie Public? Nee, Public muss man
nicht. Warte mal Leute, wie war das in Python? Man muss, man macht das hier da vor, wenn
man will, dass es private ist, gell? Aber das ist nur quasi ein Hint, dass es private
ist und nicht wirklich private. Global, ne. Also würde ich jetzt quasi sagen sowas wie
hier Don't Load Raid. Heck, muss ich das weglassen, wenn ich nichts übergebe? Ne. Gibt
es, ach Self, Self muss man da immer über. Aha, Self ist quasi sowas wie This. Ok, gibt
es irgendeine Schreibweise für Public, Public Properties? Sollte man die irgendwie groß
schreiben oder nicht, oder ist das egal? Was heißt denn Public Property? Klein? Private
und Public Attributes. Ach Attributes heißt was da, ok. Das ist eine bescheuerte Seite,
die echt, does not have, ja. Add Property, was zum, ah das ist quasi so eine Getter,
das ist quasi eine Getterfunktion oder sowas, gell? Würde ich jetzt einfach mal raten,
wenn man da Add Property oben dran setzt. Warum sich überhaupt die Mühe machen, wir
machen einfach Public Variable und gut ist. Obei. Warum nicht? Warum nicht? Warum nicht?
Wisst ihr was wir machen? Ich hab ne Idee. Also wir machen sowas wie hier Self, ne. Warum
ist das jetzt undingst Reference? Self sein? Ne. Äh, pff, keine Ahnung. Moment, das kann
ich direkt zuweisen, das nicht. Ach ansonsten ist es statisch. Moment, wenn ich sowas hier
mache bedeutet das, das ist Static, also ich könnte jetzt quasi, ach so, ach so, das will
ich ja gar nicht, ich will das so haben, also irgendwie. Rate. So, Underscore, was ist der
Unterschied zwischen Underscore und Underscore? Underscore, Underscore. So, Self, Rate, Rate.
So, und das wollen wir aber nicht returnen, sondern, da wollen wir jetzt das mitmachen.
Self, Rate, Exzellent, wo ist das Problem jetzt? End of Statement Expected. Ach ne,
ich blick, hä? Was ist denn jetzt das für? Was hat er denn jetzt für Schmerzen? Rate,
Rate. Ne, die Klammern sind doch richtig so. Ne, die Klammer ist zu viel. Kacknub, Alter,
die Klammer ist zu viel. Und jetzt? Rate, Rate. Ne, das schreibe ich gar nicht hier hin
oder was, das würde ich nur hier machen? Ach so, das muss ich gar nicht da oben hinschreiben,
das würde ich einfach hier festlegen oder, aha, MonkaS, Alter, da muss ich jetzt erstmal
drauf kommen. Okay, wir nähern uns, wir nähern uns. So, und jetzt packe ich im Prinzip dieses
ganze Ding da rein. So, die ID brauche ich nimmer, cool, das hier brauche ich nimmer,
das hier brauche ich im Prinzip auch nimmer. Rate. So, Self, Dot, Rate. Was hat er denn
jetzt für Schmerzen? Unresolved Reference Self. Ach, weil ich Self hier davor wieder
übergeben muss oder was, aha. Okay, das ist in der Tat äußerst gewöhnungsbedürftig,
muss ich sagen. Glaubst du, Getter, Syntax ist anders als das? Okay, werden wir jetzt
ja gleich sehen. Comment, aber das kommentieren wir das mal aus. Denken wir mal, ob das funktioniert.
Der kommt nicht so ganz klar hier, oder? Print. So, das sollte doch jetzt soweit funktionieren,
was ich gemacht habe. Der updated jetzt die Rate. Okay, ähm, let, nein nicht let, also
speedtest gleich new speedtest, so? Ne, äh, da sollte ich die URL auch hier übergeben.
Oh, einfach so? Schau mal, NeoWim ausbricht, klar, ich hab früher nur Wim verwendet, ich
hatte irgendwie 800 Zeilen Wimrc und 500 Plugins drin. Einfach so, okay. Speedtest, Rate, da
kann ich das, also jetzt würde ich hier das starten. Das ist nicht so schön, das wäre
deutlich sinnvoller, wenn ich die URL im Konstruktor übergebe, weil dafür ist er ja letztendlich
da. Self. Okay, das ist für mich echt gewöhnungsbedürftig, diese Schreibweise. So, und hier kommt die
URL weg. Kann man, kann man das hier oben auch annotaten irgendwie, dass ich jetzt sage,
self drill? Ey, tatsächlich, cool. Load. Park. URL open. Self? Warum eigentlich self, warum
nicht this? Da könnt ich mich viel einfacher dran gewöhnen. Okay, measure download speed
megabit. Gut, es scheint zu funktionieren, es macht was. Du kannst auch this importieren.
Wirklich? Geht das? This? Kannste das? Echt? Geht das? This? Ey, oder? Wie kann ich das,
aber ich benenne das nicht um. Ach, das hier kann ich nennen, wie ich will. Aber ich nenne
das nicht um, das ist ja dann absolut nicht der Pythonic Way. Ne, ne, ne, das lasse ich
so. So, jetzt haben wir hier eine Klasse. So, und von der Theorie her sollte das jetzt
ja so funktionieren, wenn ich das Ding starte, und wir machen jetzt einfach mal, wo ist meine
Endlosschleife hier unten? Oder meine, nicht wirklich Endlosschleife, meine 100 Sekunden
Schleife. So, und ich könnte jetzt nur mal zum testen, ob das funktioniert. Print. Speed
test. Achso, ich muss erst noch ein Thread starten. Ja, Raid. So. Du, du, du, du, du.
Comment, oh, ups. Comment. Also, jetzt müssen wir den Krempel ja mehrfach, mehrfach starten.
Speed test. Jetzt brauchen wir eine Liste. Threads. Gleich, so. Ne, nicht. Ja, so ungefähr.
So, Speed test. Jetzt kann ich das weglassen, jetzt kann ich theoretisch das direkt so aufrufen
wahrscheinlich, denke ich mal. Hoffe ich, dass das so geht. Start. So, und jetzt. For.
Threads. T, Raid. Und dann Sleep. Na, ob das jetzt funzt? Nope. Nope, was? Warum nicht?
Wo ist das Problem jetzt? Warum funktioniert das jetzt nicht? Ah, ja, natürlich. Threads
append. Speed test. Achso, ich kann das muss weg. Ja, klar. Ok, nice. Ok, also und jetzt
das gleiche Spiel wieder. Also, das will ich ja eigentlich gar nicht so machen. Ich will
ja eigentlich Print. Threads. Ne, Summen, Summen. Das macht mich fertig. Das es so globale
Magic Funktionen gibt. Threads. Ne. Wait a minute. Das kann ich jetzt gar nicht summen.
Wie kann ich ihm denn sagen, was er da jetzt, wie er die Summe genau machen soll? Ja, in
Dotnet würde ich jetzt einfach sagen Select. Sowas wie Select, aber. Ne, aber der weiß
doch gar nicht, der weiß doch gar nicht, dass er das Raid Property nehmen soll, in Summe.
So? Ne, oder? Also, wenn das funktioniert, das kann doch nicht funktionieren. Ne, das
hätte mich auch sehr gewundert, wenn das funktioniert. Threads. Also quasi. Da drinne. Threads. Ok,
das ist wirklich gewöhnungsbedürftig. Ne, funktioniert, ja. Wow, aber viel zu viel zwischzeitlich.
Das geht auch ohne eckige Klammern. Wirklich? Ah, Sixhead Time. Ohne ist Deprecated. Ja,
was denn jetzt? Ich find's auch so im ersten Blick besser. Da muss man sich aber wirklich
erstmal reindenken. Das ist auf jeden Fall ein bisschen gehirnverknoten. Ja, ok, aber
das ist jetzt schon deutlich besser lesbar als der andere Krämpel, den ich vorher gebastelt
hab. Mach mal die Sekunden hoch auf eine Sekunde Messzeit. Was ist jetzt? Ah ja, jetzt. Hat
Vodafone wieder gewodafoned zwischenzeitlich. Guck mal, ob das immer so ist. Es braucht
alles? Nö. Das hat eben einfach nicht gewollt. Ruckelt übrigens das Stream, wenn ich hier
volle Pulle Download mache, weil mein kompletter Download ist fertig. Ja, ist voll leer. Oder
je nachdem, wie man das sieht. Also, die komplette Leitung ist voll. Mein Downloadvolumen ist
leer sozusagen. Wir können ja mal kurz gucken, ob das irgendwie ruckelt. Aha, hier hat er
Frames getroppt. Droppt er Frames? Massive Drop? Aha! Leute, der droppt richtig krass
die Frames, wenn ich das hier anschmeiße. Lull. Guck mal. Die Downloadtests sind keine
so gute Idee. Aber da sieht man, die Leitung ist voll. Jetzt testen wir mal was. Wir trosseln
mal die Bandbreite. Wondershaper oder so hieß das, glaube ich. Ist schon installiert. Wondershaper,
mein Interface. Wondershaper, hallo. Wondershaper minus Interface Download. Das betrifft jetzt
ja nur meine Linux-VM, also keine Sorge, das ist für den Stream jetzt erstmal egal. So,
wir limitieren den Download auf 4000 auf 4 MBit. Gucken, ob das funktioniert. Ja. Ja.
Es kommt schon so ungefähr hin. Ich würde jetzt auch nicht drauf tippen, dass das so
100% exakt ist. Aber im Großen und Ganzen. Ok, und jetzt machen wir mal ein Limit. Ich
glaube, ich muss jetzt erstmal clearen das Ganze wieder, dass es funktioniert. Ne, hier.
Jetzt gehen wir mal auf das Doppelte hoch. Ne, das Zehnfache hoch. Ich hab's geklärt.
Sekunde runter. 40 haben wir jetzt, guck. 33, 37, 35. Also ich würde sagen, das funktioniert
schon ganz ordentlich, ja. Man kann übrigens jetzt nicht so machen, weil man muss immer
erst clearen zwischendurch. Ja. Wollen wir den Buffer größer machen? Wir können
den Buffer auch größer machen. Was ist das? 8, 1, 2, 9? Die nächste größere. Macht
keinen Unterschied. Jetzt aber auch sehr gewundert. Aber zu kleiner Buffer backt, glaube ich,
8. Das sollte das ziemlich, ja. Das, na wobei, geht eigentlich. Aber wenn ich das nochmal
cleare, der geht nicht auf 400mbit hoch mit so einem Mini-Buffer. Ne, guck. Der hängt
hier bei irgendwie sonst was, ja. Ne, ein zu großer Buffer ist jetzt hier in dem Fall
auch nicht so sinnvoll, weil umso seltener aktualisiert der. Ich finde 4096 schon ganz
passend. Aber jetzt haben wir den Multithreaded-Test. Ach ne, Moment. Ich sollte es ja noch mit
threading... Ich wollte ja eigentlich gucken, was denn jetzt der unter... So kann man das
doch lassen, oder? Das ist doch durchaus okay. Würde man das jetzt in eine eigene Datei
verschieben als guter Pytonic-Way? Du kannst runden. Ich will gar nicht runden. Bei der
Länge nicht. Ne. Das finde ich aber so ganz schick. Das kann man jetzt wenigstens ordentlich
lesen. So, ich sollte multiprozess noch ausprobieren. Vorm multiprozess import process. Okay, also
nicht thread, sondern process. Und jetzt sage ich process target. Also im Prinzip exakt
das gleiche, nur anstatt thread, process. Und das war's jetzt? Demon muss ich wahrscheinlich
weglassen. Ha, hast du so gedacht, Keg-Wade. Funktioniert net. Kann es sein, dass es jetzt
nicht funktioniert, daraus etwas auszulesen? Der bekommt nie mit, wenn hier was Neues gesetzt
wird. Guck mal, der macht volle Pulle Download. Aber hier erkennt er nie, dass die Rate sich
geändert hat. Was ist der technische Unterschied? Naja, ich vermute mal, bei dem einen ist es
quasi in einem Prozess mehrere Threads und beim anderen folgt er das und macht mehrere
Threads, was dann mehr RAM braucht. Aber ich kann jetzt aus multiprozess kann ich nicht
mehr die Variablen auslesen, aus meinem Mainprozess von den Child-Prozessen. Das ist wahrscheinlich
auch der Grund, warum es zwei verschiedene Sachen gibt. Genau, deswegen. Das hat schon
sein Sinn, dass es da zwei verschiedene Sachen gibt. In dem Fall muss es tatsächlich das
hier sein. Habe ich hier noch Traffic Shaping on oder so? Nö, es ist einfach langsam.
Ah nee, jetzt geht es wieder hoch. Sollte vielleicht die Eins anstelle Spieltests ins
Liste? Nö. Sollte nicht. Deswegen sollte es nicht Svets heißen, sondern irgendwie Speedtests.
Ein Tupel in die Liste, man braucht ja auch Raid. Ja, Raid habe ich ja hier. Raid habe
ich doch hier drüber. Was aber mit multiprozess nicht funktioniert, was hätte hier für Schmerzen?
Taipo, überhaupt kein Taipo, lügt nicht. Ok, das funzt, ich bin begeistert. Ich muss
aber einen Speed Limit machen, weil ansonsten... Spack da rum. Ja, 40mbit Speed Limit. Ich will
nicht Join Call, nee. Der soll die automatisch beenden am Ende des Programms. Vollkommen
in Ordnung. Scheiß auf Join. Die Dinger werden eh nicht fertig. Die laden einen Terabyte
runter, die werden nicht so schnell fertig. Also nicht innerhalb von 2 Sekunden. So und
von der Idee her ist es jetzt so, ich könnte das 5 Sekunden laufen lassen oder sagen wir
mal, vielleicht nicht mal 5 Sekunden. Kann man 0.5 sleepen? Geht das? Hey. Ja, bringt
ja nichts. Ich muss schon länger laufen lassen, dass das alles Rats überhaupt nennenswert
was machen. Multiprocess Shared Memory. Oh, jetzt wird's. Oh, 5 Head Time. Shared Memory
Size. Ok, das wird jetzt aber richtig Raw, oder? Jetzt wird's aber richtig Raw. Shared
Memory Block. Bäh. Eigentlich fehlt ja noch die Main Methode, das stimmt. Das geht doch
irgendwie in Pyres irgendwie so if Main oder irgendwie so, ne? Also ganz komisches Zeug.
Ah guck mal, die können das schon. Ok, nice. Kann ich das jetzt einfach da drunter kopieren?
Lul. Ah. Sehr schön, sehr schön. Ok, das gefällt mir. So, was kann man jetzt, was
kann man denn sonst noch machen? Also die Speedtest Geschichte Multithreaded kann man
sagen ist in Ordnung. Huf eine Methode Main auf und pack da alles rein. Ist das der Pythonische
Way? So zu ach, oh man, ich krieg die Klammer nicht weg. Ich werde nie Klammern raus bekommen.
Ja. Macht man, machen die coolen Leute das so, ja? Ok.
Die coolen Leute, na das ist in jeder Sprache so, oder? Das erste was entsteht für jede
x beliebige Sprache ist eine Library, die um Sprachen Sachen work aroundet. Überall.
So, also das funktioniert mit dem Download Speed. Ich bin begeistert, wir können mehrere
Threads verwenden. So, die eigentliche Sache, die ich mir jetzt aber noch angucken wollte,
was genau ist hier der Unterschied? Async. Und was ist der Unterschied zwischen Concurrent
Futures und Async.io? Gibt es da überhaupt einen? Ach komm, hier gibt es sogar ein Beispiel.
Ok, das ist richtig Next Level Shit. Das hier ist quasi ein Await, oder? Seh ich das richtig?
Ok, ne, das ist mir, das sieht aber um ein vielfaches komplizierter aus als das andere.
Also, das hier, muss ich ehrlich sagen, das hier macht einen ziemlich einfachen Eindruck.
Das ist jetzt nicht so viel anderes, wie ein Task starten in C Sharp. Wobei ein Task eigentlich
Awaitable ist in C Sharp. Ne, das ist eher wie ein Thread starten direkt. Schreib mal
zwischen den zwei Vorschleifen ein Sleep. Du meinst, dass er am Anfang nicht 0-0 macht?
10 ist vielleicht jetzt ein bisschen viel gewesen. 2. Lass mal weg, wozu? Also was machen hier?
Async, Def, Main, Await, Async.io, Sleep. Task. Ok, Task 1, Async.io, Create Task, After.
Wir probieren das jetzt einfach mal aus. Also, anstatt Threading, Async.io. Und jetzt, was
war das? Async.io, Create Task. So, das heißt im Endeffekt, anstatt den Kram, sage ich ihm,
ne, mach ich nicht. Ach ne, hier füll ich das direkt drin aus? Oder wie, oder was? Ne.
Ah, das muss eine Async Function sein. Ok. Alles klar. Da bin ich jetzt ja mal gespannt,
ob das funzt. So. Jetzt einfach so? Ne. Bam. Was never awaited. Ja, ich will ja auch, dass
du startest. Ich will nicht, dass es Await. Ich will das nicht Awaiten. Der soll das einfach
starten. Das funktioniert glaube ich nicht so, wie ich mir das vorstelle, oder? Ich
muss, ich muss den Krampel irgendwann Awaiten. Was, Async.io Run? Ah. Ne. Ah, ich hab das
jetzt erpennt. Ne, jetzt hab ich das erpennt drinne. Hm. Muss ich hier die Klammern wegmachen?
Ne. Macht das, macht das überhaupt jetzt Async technisch was? Ne, oder? Das hängt
hier jetzt einfach. Ich muss Main auch Async starten? What? Jetzt. So? Und dann? So? Ok,
das ist, das ist sehr feifertig. Ne. Seriously, das ist mir zu doof. Ich will nicht auf alle
warten. Da ist mir, ne. Wisst ihr was? Scheiß drauf. Ich will da nichts Awaiten. Das soll
einfach laufen und dann abgeschossen werden. Wenn es die scharpe hätte ich ihnen den Cancellation
Token mitgegeben, was das abbricht. Und ich hätte gesagt, das Cancellation Token Throat
einfachen Fehler. Ne, aber ich glaube, das ist mir so deutlich lieber. Ne, also, warum
sollte ich kompliziert machen, wenn es noch so funktioniert? Ne, also damit bin ich, damit
bin ich jetzt eigentlich ganz zufrieden. So. Was können wir da jetzt, was können wir da
jetzt noch dran basteln? Also. Wir haben das mit Multithreaded ausprobiert. Ich hab sogar
paar Type Annotations ausprobiert. Also ich würde sagen, heute habe ich einiges, einiges
gelernt, was etwas moderneres Python Zeug angeht. Ich meine, ich hab da nicht wirklich
Ahnung von gehabt. Ich hab die ein oder anderen kleinen Sachen damit schon gemacht, aber immer
sehr unregelmäßig und nie wirklich was Großes. Das ist jetzt ja auch nichts Großes, aber
zumindest mal sowas wie Multithreading habe ich noch nie gemacht. Ich gucke mir heute
Abend den Webcast an. Python Async.io und lasst mir das mal erklären von irgendwie
einem, der Ahnung hat. So. Ich glaube, ich muss jetzt mal was essen. Ich habe übelst
Hunger. Überlegt gerade noch, können wir noch irgendwie. Das mit dem Performance-Counter
ist vollkommen in Ordnung. Du kannst sagen, dass er nichts doppelt printen soll. Der printet
doch nichts doppelt. Der printet, der printet immer nur eine Zeile, aber der printet hier
halt alle 100 Millisekunden. Deswegen ist es besser, wenn ich auf eine Sekunde stelle.
Ach nee, das ist, das ist. Ich weiß, dass es Speedtest-DLI gibt. Das war nicht Sinn
und Zweck der Sache. Das ist, das weiß ich nicht. Könnte ich, easy, Speedtest-DLI. Ich
könnte ja auch einfach einen Webcast machen und die Zeit stoppen oder so. Wobei das nicht
ein Aria-Download-Manager Zeit stoppen oder so. Das wäre deutlich einfacher. Du könntest
eine Que verwenden anstatt eine globale Liste. Wie soll denn das funktionieren? Wie soll
mir eine Que helfen in dem Fall? Ich meine, die Klasse sagt, welche Downloadrate sie aktuell
gemessen hat in ihrem jeweiligen Thread. Und das Ganze lese ich dann hier aus. Da bringt
mir eine Que doch nichts. Weil ich will ja immer wieder die gleichen rauslesen. Ich
will ja nicht etwa einmal auslesen und dann ist wieder gut. Das ist aber schwierig, sowas
mit einer Que zu machen, weil dann hast du beispielsweise in der Que acht Werte stehen
und dann müsstest du wissen, du darfst nur vier maximal auf einmal lesen und müsstest
sie dann zusammenrechnen. Und was ist, wenn eins Thread hängt und der eine dann zweimal
reingeschrieben hat? Ne, ich glaube mit einer Que macht es in dem Fall einfach noch komplizierter.
Zumal, wenn ich es richtig verstanden habe, dadurch, dass wir Python Threads verwenden,
muss ich mich ja überhaupt nicht um Locking oder sonst was kümmern. Das geht einfach.
It just works. Würde Apple wahrscheinlich jetzt sagen. Es hat vielleicht nicht die
mega Performance, wie das woanders wäre, aber für den Fall reicht es, Digga, aus.
Ich finde das eigentlich ganz nice, so muss ich ehrlich sagen. Und es ist für sich genommen
auch wirklich gut lesbar. Also man versteht alles, was passiert. Da kann sich C++ und
sonstige Sachen echt noch eine Scheibe von abschneiden. In C++ hätte ich jetzt hier
schon 50 Klammern mit sonstigen Dingern dazumachen müssen, dass das gültiges C++ ist und dann
kommt eine Fehlermeldung, dass angeblich in Zeile 1 ein Schreibfehler ist, obwohl der
eigentliche Fehler hier unten ist, weil ich falsche Zeichen habe. In C++ habe ich hier
ein Semikolon vergessen und er sagt mir irgendwie, hier oben ist falsch. Das ist aber wirklich
nicht schlecht, das kann man ganz gut lesen. Was ist der Sinn von AddProperty? Dumme Frage,
das kann ich doch einfach wegmachen, das funktioniert immer noch. Warum funktioniert das jetzt nicht?
Ah, dann müsste ich Raid so machen. Das finde ich gut, finde ich nice, dass es geht. Das
finde ich gut. Das ist ein Getter. In C sharp wäre das, was du in einem Getter schreibst.
Das finde ich gut, das ist ein schöner Sonntag, gefällt mir. Die wichtigste Frage ist, wie
gut Cobolinterop funktioniert. Wahrscheinlich, wenn du deine Coboldinger mit C Interfaces
exportieren kannst, funktioniert es wunderbar. Wie gut das in Cobol geht, weiß ich nicht.
Und wenn es nicht geht, dann ist der Interop für ein Arsch. Ich habe aber von niemand
gehört, der Cobol-Python-Interop. War natürlich klar. Ich glaube, Cobolinterop, das wollen
wir uns jetzt an der Stelle eher nicht geben. Ja, zum Üben war das doch ganz nice. Leute,
ich gehe jetzt was essen. Wir sehen uns im nächsten Stream. Macht es gut, bis dann.
CO!
