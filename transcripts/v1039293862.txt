Ah, der Sister facilities.
Nonchalant, ist so 말isch wie vorhin.
...Na, ich bin об das
flavour.
енерialerweise auch die
στα Fantastic Combos,
Das war's für heute.
Vielen Dank für's Zuschauen.
Das war's für heute.
Das war's für heute.
Leute, nicht so Pock!
Meine Hed startsverlängerung ist verknotet.
Not Pock
Ok, jetzt wieder Pock.
jetzt passt alles exzellent exquisite so twitch hat noch nicht gecheckt dass der stream on ist
aber ihr habt schon gesehen das heißt ihr kommt wahrscheinlich höchstwahrscheinlich zumindest
mal aus dem discord stimmts stimmts oder habe ich recht chat ach jetzt hat's twitch kapiert ok
nice tapp immer auf 0 ah dann keck wait ihr müsst jetzt achtung leute hier müssen wir mal hier das
richtige emote verwenden guck mal wir haben jetzt richtig richtig huge emote whoop arrive
whoop arrive leute ja dann bis denn danke für den sub ich habe es gar nicht gesehen wer hat
gesagt hier der captain sie hat gesagt 13 monate hyper subscription huge hyper subscription
p İZL.
wie sie lauert
Ich glaube, ich kann bald die ganzen Mundschutz-Corona-Dinger wieder aus meinen Emotes entfernen.
Das Ende ist nah.
Naja, gut, man weiß ja nicht, aber es wird sich noch ein bisschen hinziehen.
Wegen mir, ohne Scheiß, können die Auswirkungen, also nicht die Krankheit, aber die Auswirkungen
von Corona können gerne für immer da bleiben, nämlich dass man dauer Homeoffice machen kann.
Nee, bin ich noch nicht, mache ich aber sobald es geht.
Was immer das jetzt einem genau sagen soll, aber ich glaube du hast mir einen Sub gegiftet.
Nice, danke schön.
Bin mir nicht so sicher, was Twitch mir damit sagen will.
Jaja, ich lasse mich aber dann sobald ich kann.
Ich habe mich ja angemeldet bei meinem Hausarzt und mein Hausarzt hat mich gefragt, ich glaube
eigentlich, dass man das gar nicht, keine Ahnung ob man das darf oder nicht.
Phoenix, danke schön, neunzehn Monate Alpersubscription, er hat mich gefragt, was ich für einen Impfstoff
haben will.
Und dann habe ich gesagt, wenn er mich so fragt, dann nehme ich Bio, wie spricht man die jetzt
eigentlich aus?
BioNTech, BioNTech, wie auch immer, ich habe nicht so Bock auf Gehirnplutung oder sowas,
auch wenn es nur sehr gering ist, aber wenn ich schon gefragt werde, was ich nehme, dann
nehme ich das.
Ghost, ich hätte mir auch das andere geben lassen.
Ghost 1, danke schön für den Prime Sub, huge subscription.
Der Chebatrain Level 2 läuft, was gibt es denn hier?
Ok, komische Hundeemotes, braucht kein Mensch, Catemotes, ja den brauchen wir, Leute, der
Subtrain muss voll, wir brauchen ganz dringend mehr Katzenemotes, ne das brauchen wir nicht,
das auch nicht.
Das andere, was es da gibt, ja so viele Hundeemotes, ne das brauchen wir nicht, den machen wir,
Leute, den müssen wir nicht voll machen, den müssen wir nicht voll machen, die Emotes
bis auf das Katzenemote, das ist jetzt auch nicht so gut, das gefallen wir nicht.
Dann, ne, das brauchen wir nicht, dann warten wir jetzt bis der Hype Train vorbei ist und
dann könnt ihr alles haben, exzellent, dann kriegt ihr nichts für, aber ich kriege die
Kohle.
Sixhead Time.
So, was wir uns heute angucken, ist folgendes, ups, ne, hat mit Franzosen eigentlich gar
nichts zu tun, falsches Emote, Stonks, richtig stonkige Stonks heute.
Ghost 1, danke schön für den Prime Sub, weiß nicht, ob ich es schon vorgelesen habe,
aber huge.
Kann ich endlich wieder was zu essen kaufen mit den ganzen Prime Subs.
Ich habe jetzt vier Tage nicht gestreamt, ich muss ganz schön hungern ohne Prime Subs.
Ich bin schon, ich sieht mich schon fast gar nicht mehr.
Ich habe jetzt gelesen, in Hanau ist diese Corona-Wert, Inzidenzwert, glaube ich jetzt
unter 50 oder rein, ne, mein Kind sich kreist unter 50, das heißt nächste Woche können
die dann wieder aufmachen alles, kann ich endlich wieder Pepo-Fat-Pizza-Futter gehen.
Es gibt jetzt die erste stabile Version von WinGet, oh, exzellent, das muss ich mir aufschreiben.
Stream-Ideen.
WinGet.
Heute gucken wir uns ein bisschen Hacker-Mans heute an, es hat mich nämlich letztens einer
gefragt, das habe ich schon gesehen, das habe ich schon gesehen, das ist lustig gewesen.
Heute gucken wir uns für die krassen Hacker-Mans unter uns, also heute ist bisschen mehr Hardcore-Technik
angesagt.
Gucken wir uns dort net 6, Preview 4 an, ich brauche noch mal, ich brauche noch Windows,
habe ich einen Windows vor allem am Start, Zack, Zack, Qt4M habe ich am Start, Windows
XP habe ich am Start, warum, warum lösche ich denn immer die Windows-VMS, warum bin ich
denn so bescheuert, warum lasse ich nicht meine Windows-VM da, ich muss jedes Mal, ich muss
jedes Mal wenn wir was unter Windows machen, muss ich erst einmal eine Viertelstunde Windows
installieren.
Richtig hängen geblieben, na dann machen wir das jetzt, Download, Windows ISO, wir wissen
jetzt ja wie das funktioniert, haben wir ja schon oft genug gemacht, zack, zack, zack,
Mobile Ansicht, Refresh, Windows-Auswahl, Windows 10 bestätigen, die Microsoft Seite
übrigens, huge, huge, big, Auswahl, English International bestätigen, 64bit, jawoll, GIF,
ja wir brauchen eine Windows Version, oh, warte, wir brauchen eine Windows Version,
na okay, geht jetzt schon, wir brauchen eine aktuelle Windows, weil wir müssen Visual Studio
2019 preview installieren und das würde ich mir nur ungern auf mein Host-System hauen,
wo ist die Twitch-Notification, ich weiß es nicht, Pause, Pause-Jump, Moment, ja,
ich weiß es nicht, einfach Safari installieren brauchst du das nicht, das heißt, was brauche
ich da nicht, ach die Windows, die Windows Download, oh das ist natürlich eine super
Idee, ich installiere mir Safari nur, dass ich die Windows ISO einfacher downloaden kann,
ah, yes, das ist wichtig, ich kann auch einfach meinen User-Agent ändern, dieser war die
Notification schneller als bei Discord, ja, der Discord-Bot ist in den letzten Tagen ein
bisschen langsam glaube ich, ja, das habe ich heute Morgen auch gelesen, ich dachte
erst, warum ist das eine Meldung wert, bis dann im Laufe des Artikels rauskommt, die
Typen haben den Strom illegal abgegriffen, ansonsten wäre das vollkommen legal gewesen,
tja, Pech gehabt, so, warum ich darauf komme, also was wir uns heute angucken, wie gesagt
heute ein bisschen mehr Hacker, Hacker mein Thema, was ich gesehen habe und was wir uns
auch gleich noch, aber ich skippe da durch, heute machen wir das gar nicht, aber es war
glaube ich noch kein Mod da, der das geändert hat, und zwar der riesige Betrug, das ist
schon ein bisschen, immer ein bisschen sehr dramatisch die Videos, die der macht, so,
was wir uns angucken müssen ist.NET MS Build, da gab es letztens erst einen Talk,
wie Deep Dive oder so, ich vertreibe hier, das da, das gucken wir aber nicht, Leute,
wir gucken das nicht komplett an, wir gucken nur mal so ein bisschen durch, was die unterschiedlichen
Sachen sind, die mich interessieren, weiß ich, hat einer von euch Build Talks geguckt
ein bisschen, Build ist ja so diese Microsoft Developer Conference, übrigens, was mich
bei Build total irritiert hat wieder, also mal gucken, MS Build Day 1, das muss ich euch
mal zeigen und ich, vielleicht versteht jemand, was da abgeht, vielleicht bin ich auch, ich
weiß, ein kritisches Thema, vielleicht bin ich auch nicht, wie gesagt, so vogue genug
das zu verstehen, aber das habe ich nicht kapiert, weil, okay Moment, das muss ich euch, das
muss ich euch jetzt mal zeigen, warte mal, warte mal, also, wo geht dann, wo geht dann
die Pre-Show los, wo geht die Pre-Show, hier geht die Pre-Show los, so, pass auf, jetzt
wird es ein bisschen, jetzt wird es ein bisschen, bisschen cringe, also, okay, jetzt geht die
Pre-Show los, also mir geht es gar nicht um den Inhalt, ich verstehe die Vorstellung
nicht so genau, wartet mal, okay, ja, okay, irgendwann am Anfang kommt es jetzt gleich,
ja, okay, ach, für, jetzt, Alter, ich habe nicht richtig zugehört, das ist für Leute,
die, die sehr behindert sind, jetzt habe ich das verstanden, ich habe schon gedacht, was
geht da ab, ich habe mir nämlich schon gedacht, warum erzählt der Typ, dass er ein 40-jähriger
alter weißer Mann ist, ich meine, hallo, ich sehe das, das ist für Leute, die sehr behindert
sind, jetzt, okay, jetzt ergibt das auch Sinn, ich wollte gerade sagen, jetzt treiben sie
es aber ein bisschen zu weit, jetzt treiben sie es ein bisschen zu weit, okay, jetzt habe
ich es verstanden, das haben die aber auch nur einmal gesagt, später kommt da noch eine,
die erzählt, ich bin, ich bin eine, was weiß ich, 30-jährige Frau und Stamme vom Indianerstamm
XY ab, habe ich gedacht, okay, ist ja gut, wir müssen es zwar nicht übertreiben, aber
das ist für Leute, die sehr behindert sind, die quasi mit Audiodescription, mit Vorlesen
zu hören, okay, dann verstehe ich es, alles klar, dann habe ich es verstanden, dann ist
es doch nicht so cringe, wie ich gedacht habe, sonst habe ich mir gedacht, was ist da los,
wen interessiert das, ja, Leute, die mit Audiodescription zuhören und wissen wollen, wer vor ihnen
steht, wo auch immer, ich bin mir auch nicht so ganz sicher, warum das bei einer Technikkonferenz
so wichtig ist, aber das ist halt der, soll man sagen, so der aktuelle Zeitgeist, ja,
es gibt Schlimmeres, ja, sollen sie machen, es taunt wieder an, aber jetzt habe ich das
wenigstens kapiert, dass es für Leute, die nicht richtig was sehen können, okay, dann
ergibt das Sinn, so, ich weiß jetzt mal die Windows-Installation an, ja, Chandler, ich
weiß es auch nicht so genau, das kann ich dir nicht erklären, das müssen die anderen
erklären, ich verstehe es nicht so genau, aber es ergibt zumindest halbwegs Sinn, wenn
es für Leute, wenn es an Leute gerichtet ist, die es nicht sehen können, als sonst, als
ich das erste Mal nebenbei geguckt habe, habe ich gedacht, was, warum erzählt der mir das,
ich sehe, dass das ein Kerl ist mit Cowboy-Hut auf, wobei, okay, okay, man weiß in der heutigen
Zeit ja eh nicht so genau, ich meine, er kann ja auch nur aussehen wie ein weißer Kerl
mit Cowboy-Hut und in Wirklichkeit, frag mich nicht, identifiziert er sich als, ähm, wie,
was weiß ich, egal, was ich sage, was ich sage ist falsch, kann gegen mich verwendet
werden, ich sage dazu gar nichts, so, Windows-Installer-Disc, Windows 64 detected, äh, ne, ne, ne,
ne, ne, ne, das ist natürlich auch geil, habt ihr das gerade gelesen, Windows detected,
vorgeschlagenes Guest Operating System DOS, natürlich, natürlich, klar, okay, wir müssen
es aber nicht hier machen, wir müssen es auf D, auf, äh, ach, da ist es, oh Gott, Windows,
Alter, warum steht hier unten einmal E und hier steht, ich blick's, ich blick's wieder,
es ist mir wieder zu hoch, okay, Windows, so, äh, number of processors, einer, vier
cores, soll ja auch flutschen, viertausend sechs, ach komm, acht, acht, g, RAM, wir haben
genug, natt, weiter, weiter, ich mach jetzt nur den Installer an, keine Sorge, ihr müsst
mir nicht zum hunderttausenden mal gucken, wie ich den Installer von Windows durchklicke,
äh, in der Zwischenzeit können wir das Video anschauen aus den Teilen, wo es interessiert,
finish, oh, bam, best, no, ach so, ich muss erstmal die CD einlegen, no, ah, nervt nicht
rum, Settings, ISO Image, Windows, jawoll, jetzt aber, connect, Neustart, ich bin nicht
in der Lage, gerade den Kram richtig zu bedienen, okay, CD, Windows, install, alles gut, also,
ähm, wer es nicht mitbekommen hat, moin Michael, 50 Billiarden, mach einen Snapshot, wenn du
die vor MNC lässt, das ist eine sehr gute Idee, das vergesse ich eh, das ist aber eine
gute Idee, also, äh, wer es nicht mitbekommen hat, es war die letzte Woche MSBuild 2021,
das ist so die größte Microsoft Entwicklerkonferenz und was mich wieder, was mich wieder richtig
geschockt hat ist, wie unübersicht, genau, da sieht man auch schon die Seite, wie unübersichtlich
mal wieder die, die, und aber ist das standardmäßig, ach, das ist standardmäßig schwarz, mein
Gott, ist die Seite hässlich, die Seite ist so krass hässlich, das ist der Wahnsinn,
ähm, ich mein, was, welcher Webdesigner war denn hier bei Microsoft wieder am Start,
was die Emote soll ich machen, ok, Vogue und Bedge, kann man machen, das kann man für
Boomer schlafen verwenden, ich hab's geadded, so, und, was findest du an, äh, was, wo,
was, wo, hab ich irgendwelche Questions übersehen, äh, wen aus VM, genau, was, wie, also, das
hab ich natürlich jetzt nicht gesehen, aber du kannst ja auch VM-Workstation kaufen, ich
würd' da definitiv VM-Workstation kaufen, weil da kannst du Snapshots machen, Snapshots
ist eines der wichtigsten Sachen überhaupt, wenn man VMs verwendet, ähm, Keys kannst
du dir kaufen für 20€ das Stück bei irgendwelchen Keyshops, du musst keine illegalen Dinger
machen dafür, ähm, so, und das ist wie gesagt die größte Microsoft Entwicklerkonferenz
des Jahres, und die Seite ist so unglaublich unübersichtlich, ich hab geguckt, am irgendwie
25.24 wollte ich gucken, hey, wo gibt es denn, kann man hier irgendwie gucken, was.net ist,
man kann hier nach.net suchen, dann findet man aber irgendwie wieder viel zu viel und
es ist, es ist wir, also ich find die Seite nicht gut, die sie hier designt haben für
ehrlich gesagt, und was ich auch nicht verstehe ist, warum kann man den Kram nicht einfach
auf Twitch und YouTube streamen, also auf YouTube haben sie's gestreamt mit deaktiviertem Chat,
warum haben sie's nicht einfach auf Twitch gestreamt, da hätte man sich auch so austauschen
können, also, das hat man, also, gerade das hier ist so der Inbegriff von kak Windows
App Design jetzt auch im Browser, versteh ich nicht, was sie sich dabei gedacht haben
bei der Seite, zumindest mittlerweile sind viele, warum sie die Kommentare ausschalten
weiß ich nicht, gerade bei so neuen Sachen interessiert es mich ehrlich gesagt was die
Leute in die Kommentare schreiben, was auch immer, man weiß es nicht, genau und das lief
jetzt die letzten drei Tage oder vorletzten, vorletzten, am Donnerstag war es vorbei, also
Dienstag, Mittwoch, Donnerstag und da gibt es immer Talks zu allem möglichen Zeug von
Microsoft und ich hab mir die Keynote angeguckt, die Opening Ceremony oder was auch immer,
die Keynote, hat jemand von euch die Keynote zur aktuellen Build gesehen, also ich muss
sagen ich hab selten was langweiliges gesehen von Microsoft, ich fand das total, nicht
dot net was mach ich denn, Build Keynote, also ich hab selten was langweiliges gesehen,
das ist total pepega gewesen, wobei ich dem, wie spricht man eigentlich aus, Satya Nadella,
ich hör dem immer ganz gern zu, wenn er was erzählt, ich find das ist irgendwie so recht,
so meditative Art zu sprechen, keine Ahnung, aber das ist mega langweilig gewesen, huge
langweilig, es gab nix, es gab wirklich nix interessantes außer das Microsoft mal wieder
von ihrer komischen Virtual Reality Visionen gefaselt hat, die es nicht gibt, Microsoft
labert, ich weiß nicht ob euch das mal aufgefallen ist, Microsoft labert die letzten drei Jahre
die ganze Zeit schon über irgendwelche komischen Virtual Reality Workspaces, Virtual Reality
Innovations und sonst wie was und davon, das juckt einfach in der realen Welt kaum ein,
es gibt sicherlich Bereiche, da ist das anders, aber das meiste ist denen vollkommen egal,
ja also mir zumindest, und ich hab jetzt noch nirgendswo den Kram jetzt so in the wild gespottet
was Microsoft da macht, aber wenn Microsoft sagt hier VR augmented ganz toll, dann wird
es wohl so sein, zumindest war das echt langweilig die Keynote, richtig, richtig resident sleeper,
GitHub Codespaces aus dem Edge heraus, das hab ich noch nicht gesehen, wie gesagt das
einzige was mich interessiert ist, wo ich ja schon ein bisschen was von geguckt hab, ist
der.NET 6 Deep Dive, ich muss das mal kurz erklären, ich weiß dass wir viele krasse
Hackermans hier haben, aber da ich auf YouTube zum größten halt anderen Content mach, weiß
ich auch dass jetzt vielleicht hier nur die ein oder anderen interessierten Leute da sind,
die sich damit aber nicht so sehr auskennen, deswegen erzähl ich jetzt mal ganz schnell
was zu.NET und warum Microsoft auch da richtige, richtige Pepegas wieder sind, hallo ich bin
German, warum stellst du das um da unten, alter Microsoft wenn sie mitdenken wollen, Microsoft
mitdenken will dann ist vorbei, ok off Setup, komm an, nein ich hab, man muss ja Windows
mittlerweile nicht mehr registrieren, kenn noch einer diese Windows 8 90 Keys, die fckw
im Key hatten, das waren die ganzen hacked Keys, fckw also hat nichts mit diesem komischen,
nichts mit Chemie zu tun oder so, Windows 8 90 Key, fckw sonst was, fckwk waren diese
ganzen leaked Keys von Windows 8 90, ich weiß Boomer Clap Talk wieder ne.
So gut jetzt installiert, alles klar, Windows 30 Tage nach Registrierung stimmt, die hatten
ja mit Windows XP kannst du ja zumindest schon Demo Modus starten, also jetzt mal kurz,
mal kurz eine Erklärung,.NET Download, also nochmal so die Unterschiede, um was es jetzt
um was es geht, also wir gucken uns jetzt, was wir uns heute angucken sind in dem Video
von Microsoft neue Features,.NET 6 und was wir uns dann angucken werden ist das Preview
davon in das vierte Vorversion quasi und ich muss jetzt nochmal kurz erklären was
das mit der ganzen Sache auf sich hat, weil ich weiß dass das Leute verwirrt und Microsoft
hat es mit der Benamung auch schon mal wieder richtig verkackt, das sind wir von Microsoft
gewohnt, Microsoft kann einfach nichts benamen, guckt euch die neue Xbox an, wo ich mir bis
heute nicht merken kann wie die heißt, guckt euch Windows 10 an wo sie eine Version übersprungen
haben und sicherlich noch zig andere Sachen wo mir gerade nichts einfällt, aber benamen
ist nicht, oder wo sie Projekt Natal durch Kinect ersetzt haben und sowas, also Microsoft
hat es nicht mit Benamen und schon gar nicht mit Versionsnummern, so wer installiert das
bitte auf Linux, das ist total verbreitet und ohne Scheiß ich programmiere die letzten
drei Jahre exklusiv unter Linux nur noch.NET, das hat nichts mit Windows Only mehr zu tun,
das funktioniert mittlerweile würde ich fast sagen besser unter Linux als unter Windows,
es sei denn man will Desktop Anwendungen programmieren, dann ist es was anderes, aber gerade Web Anwendungen
ist mega, gerade mit Rider ist es super unter Linux, es gibt kaum was besseres, ich mache
fast alles unter Linux mit.NET 5 mittlerweile und Rider, also kann man echt nichts sagen,
zumindest folgendes, Microsoft hat es mit der Benamung nicht so, ja Mono hat ja auch ein
bisschen gesackt, Mono braucht man ja auch nicht mehr, man kann jetzt ja auch.NET richtig
sehen, also was ich sagen wollte, es gibt zwei Sachen die man wissen muss, also C-Sharp
ist die Programmiersprache,.NET ist die Plattform, die Runtime unten drunter, also sprich wenn
man.NET installiert, bekommt man ganz viele Sachen unter anderem den C-Sharp-Compiler,
formal gesehen hat C-Sharp mit.NET nichts zu tun, praktisch gesehen, also formal gesehen
ist C-Sharp die Programmiersprache und.NET die Runtime, aber in der Praxis hat es doch
viel miteinander zu tun, weil Microsoft da eng miteinander zusammenarbeitet, also sprich
C-Sharp benutzt neue Features aus.NET und umgedreht und auch die Releases sind synchronisiert,
also im Prinzip ist das eine die Programmiersprache, das andere die Runtime, aber es ist trotzdem
ziemlich eng gebundelt, also wenn wir von C-Sharp reden meint man meistens C-Sharp auf Basis
von.NET, so und der größte Fail den Microsoft geschafft hat was die Benamung angeht, ist
die Benamung von.NET selbst, weil ihr kennt doch bestimmt noch alle das.NET Framework
4.8, das ist das, das muss man unter Windows ab und zu installieren oder wird manchmal
in Steam noch automatisch installiert, wenn man ältere Games installiert, da poppt dann
nebenbei ein Installer auf und erzählt.NET Framework 4.8 wird installiert oder sowas,
da hat's Microsoft mega verschissen, Hände hoch im Chat wer glaubt, dass.NET 5.6, äh
.NET 6 quasi zwei Versionen weiter ist als.NET Framework 4, ok Hände hoch kann man
jetzt schlecht machen im Chat, aber ihr wisst was ich mein, rein rhetorische Frage und wenn
ich so doof frage, kennt ihr wahrscheinlich auch die Antwort schon, denn es hat nichts
miteinander zu tun, wer hätte das gedacht, es hat nichts miteinander zu tun, also folgendermaßen
Microsoft hat die Benamung komplett verschissen, ursprünglich gab es mal.NET Framework,
das war das einzige was es gab, also paar Kleinigkeiten außen vor, das einzige was
es gab ursprünglich war.NET Framework und das ging bis Version 4.8, das war Windows
Only, irgendwann hat sich Microsoft dann gedacht ach nee, das gefällt uns nicht mehr, wir
schmeißen das weg und dann hat Microsoft.NET Core entwickelt,.NET Core kam dann raus,
Cross Platform diesmal, nicht Windows Only, Mac, Linux, Windows, kam raus 1, 2, 2.1, 3.0
und 3.1 glaube ich, also das letzte.NET Core war 3.1, so und mit 3.1,.NET Core 3.1 hat
sich Microsoft dann gedacht, Moment, KegWade, die Leute haben sich jetzt zu sehr an den
Namen gewöhnt, wir benennen das wieder um und jetzt haben sie quasi das Nachfolger Release
von.NET Core 3.1, was wiederum wohlgemerkt nichts mit.NET Framework 4.8 zu tun hatte,
unbenannt in.NET 5, also.NET 5 ist eigentlich der Nachfolger von.NET Core 3.1 und nicht
etwa von.NET Framework 4.8, ich hoffe man hat das jetzt verstanden, so und dementsprechend
ist.NET 6 der Nachfolger von.NET 5, also die Benahmung ist komplett pepega, was Microsoft
sich da ausgedacht hat, das ist komplett wir, um die Sache jetzt noch besser zu machen,
Set Pudding, Dankeschön für den Sub, um die Sache jetzt noch ein bisschen verrückter
zu machen ist, das Web Framework,.NET Core gibt es nicht mehr,.NET 5 und.NET 6 ist
jetzt das Richtige, das ist der Nachfolger von.NET Core 3.1,.NET Core gibt es nicht
mehr, es gibt nur noch.NET, jetzt 5 und dann 6, so und um die Sache jetzt noch ein bisschen
kaputt, noch ein bisschen verwirrender zu machen ist, in.NET sind viele Sachen mit
dabei, zum Beispiel C-Sharp, F-Sharp, Visual Basic als Programmiersprache, wen es auch
interessiert, unter anderem für Desktop Anwendung ist es ein Web Framework dabei, so und jetzt
wird es noch verwirrender Leute, jetzt wird es noch verwirrender, das Web Framework in
.NET 6, was wohlgemerkt der Nachfolger von.NET Core ist, heißt jetzt nicht mehr ASP.NET
6, sondern ASP.NET Core, da haben sie das Core behalten, aber das Core in.NET haben
sie rausgeschmissen, um die Sache weiter verwirrender zu machen, so und jetzt setzt Microsoft der
ganzen Sache noch die Krone auf, jetzt gibt es.NET 6 mit dem Web Framework ASP.NET Core
6, die man allerdings nicht verwechseln darf mit ASP.NET 6, ASP.NET 6 ist 10 Jahre alt,
das ist die letzte, also ASP.NET ist die letzte Version für.NET Framework, also das versteht
wirklich keiner mehr, das versteht wirklich keiner mehr, was Microsoft da macht, am besten
ist, man ignoriert einfach alles und merkt sich,.NET 5 ist das aktuelle und.NET 6 ist
das, was jetzt rauskommt demnächst. Logik, muss man nicht verstehen. Sollte eigentlich
funktionieren jetzt. So, ich kann mir auch nicht merken, wie die neue Xbox heißt. Set
Pudelinerische für den Sub, ja Microsoft bonnet Sachen, was ist.NET? Wie gesagt,.NET
ist eine Plattform von Microsoft, die mehrere Sachen beinhaltet, zum Beispiel einen C-Sharp
Compiler, einen F-Sharp Compiler, einen Visual Basic Compiler, wenn das noch einer braucht,
Runtimes, ein Web Framework, Frameworks für Desktop Applications und sonst was..NET
ist quasi eine gesamte Plattform und eine Runtime, für die man Software entwickeln
kann und die die Sachen dann ausführt und Funktionen bereitstellt, mit denen man einfacher
Software entwickeln kann. Ich weiß, gibt es noch jemand von euch, der Visual Basic verwendet?
Das braucht man für C-Sharp Programme, genau. Das einfachste, wenn du C-Sharp programmieren
willst, ist, du lädst den Installer runter für.NET und installierst den fertig, da
ist nämlich C-Sharp schon mit dabei. Da ist ein C-Sharp Compiler dabei. Du brauchst da
nur noch einen ordentlichen Editor. So, und unter Windows, und unter Windows würde ich
empfehlen, wer mit.NET anfangen will, lädt sich hier die Community Version, die Community
Edition runter. Wohlgemerkt, von Wishill Studio, nicht von Wishill Studio Code und die ist
auch kostenlos. Könnt ihr damit basteln dann. Wishill Studio Code ist auch kostenlos, ist
jetzt aber für C-Sharp-Entwicklung nicht unbedingt das Geilste. Das ist eher etwas
für JavaScript und solche Geschichten, aber man kann damit auch C-Sharp machen, aber das
ist ein deutscher Wishill Studio besser oder eben Rider, wenn es Cross-Plattform sein
soll. Genau, so viel zum Thema.NET. So, während Windows jetzt installiert. Yes. Gucken wir
uns mal an, was Microsoft sagt, was die neuesten Funktionen sind. Is this the right keyboard
layout? Kann mir jemand mal erklären, was der Sinn davon ist, dass ich am Anfang des
Installers auswähle, ich habe ein German Keyboard Layout und dass Microsoft das Keyboard Layout
dann auf United Kingdom setzt. Was hältst du von Swift? Was ich bisher gesehen hab, echt
cool, ich hab damit aber noch nichts gemacht. Ich hab eh, was Mac-Anwendung angeht, so gut
wie nichts gemacht. Ich wollt noch eine andere Sache beantworten, aber ich find's jetzt grad
nicht. Irgendwann hat was von Rider gefragt. Also hier der Stefan hat gefragt, welche Vorteile
hat Rider gegenüber Wishill Studio? Der größte Vorteil von, das ist die beste Erklärung dafür,
Rider ist geiler. Reicht als Begründung, oder? Swift ist iOS. Swift ist so Allzweckwaffe
für Mac- und iOS-Anwendungen, ja. Der größte Vorteil gegenüber Wishill Studio ist, dass
es Cross-Plattform ist und unter Windows, Mac und Linux läuft. Das heißt, wenn du
unter Linux.net entwickeln willst, kommst du eigentlich gar nicht daran vorbei, Rider
zu verwenden, wenn du dich nicht mit Wishill Studio Code rumschlagen willst. Und ansonsten
ist das Handling einfach ein bisschen anders. Ich würd sagen, es nimmt sich jetzt nicht
so viel. Ich find Rider mittlerweile angenehmer. Wishill Studio hat aber auch ein paar Vorteile.
Zum Beispiel, wenn du Test-Versionen ausprobieren willst, da kannst du davon ausgehen, Rider
hat, deswegen installieren wir jetzt auch eine Windows-VM, da kannst du davon ausgehen,
Rider hat die neuen Funktionen noch nicht drin. Also Rider hat keine Test-Version für
Vorschau-Versionen von Microsoft drin. Wieso sollte man eigentlich.net unter Linux entwickeln?
Weil das super läuft unter Linux. Oh nee, ich hab mich verklickt. Das läuft mittlerweile
richtig geil unter Linux. Ich programmiere drei Jahre, drei, vier Jahre schon exklusiv
nur unter Linux. Und nachdem dort net halt auch lange schon nicht mehr nur für Windows-Anwendungen
gedacht ist, für grafische Windows-Anwendungen ist eh alles verloren, da gibt es eh nix
Scheiß. Offline-Account muss ich machen, genau. Und gerade was Cloud-Sachen angeht oder auch
irgendwelche Web-Anwendungen oder so, das läuft eh zu 90% unter Linux. Jetzt mal ernsthaft,
niemand lässt seine Anwendung unter nem IES laufen oder? Hat jemand von euch die... Nein,
ich will das nicht, mich einloggen, Alter. Hat jemand die Ehre, IES-Anwendungen betreiben
zu dürfen? Oh. Vertippt. Ihr habt noch IES für ältere Sachen. Oh, ich hab was gelernt,
man soll das einfach leer lassen, dann wird man auch nicht gefragt. Ja, perfekt. EGIT-IES.
Muss ja wieder den ganzen Crap anhaken. Ihr betreibt auch Cloud-Anwendungen auf Azure
in Windows. Ja, so lustige Sachen machen wir auch. Not now. Aber die meisten Web-Anwendungen,
also ich sag mal so, wenn was Windows braucht, dann kann man es ja unter Windows laufen lassen,
oder wenn das irgendwas ist, was AD-Geschichten oder so macht, alles klar. Aber niemand, der
die Auswahl hat, zumindest kenne ich keinen und ich wüsste auch nicht warum. Niemand,
der die Auswahl hat, wenn er neue Anwendungen programmiert und hat die Auswahl, ich kann
die easy unter Linux laufen lassen oder unter Windows, lässt die unter Windows laufen. Ja,
wenn es eine Web-Anwendung ist. Warum sollte ich eine Web-Anwendung unter Windows laufen
lassen, wenn sie nicht Windows-spezifische Funktionen braucht? Gibt überhaupt keinen
Sinn. So, this may take several minutes. Wie gesagt, größte Vorteil von Rider ist,
dass es cross-Plattform läuft und ansonsten nimmt sich das nicht allzu viel. Was ist das
für ein Twitch-Standard-Emote? Hab ich noch nie gesehen. Keine Ahnung, was das ist. So.
Was wäre so eine Windows-spezifische Funktion in der Web-Anwendung? Ja, vielleicht irgendwelche
AD-Authentifizierung für User-Anmeldungen oder sowas. Keine Ahnung. Mir fällt als der
ehrlich gesagt auch nicht so viel ein. Vielleicht irgendwelche Active Directory Geschichten
oder so. Also mal angenommen, ich baue eine Web-Anwendung, die, wobei, älter abfragen
kannst du auch unter Linux machen. Keine Ahnung. Will ich mir auch keine Gedanken darüber
machen. Ich bin froh, dass ich das nicht machen muss. Gibt es bestimmt, gibt es bestimmt
irgendwas. Aber mir fällt jetzt auch nichts Gutes ein, warum man das machen will. Also
bei uns ist es so, wir sind ja auch gerade in der Firma, wo ich arbeite, sind ja auch
ganz hart dabei, alles mögliche in die Cloud umzuziehen. Viele Sachen, was Cloud-Umzug
ist, verstehen die auch darunter. Wir erstellen uns in Azure eine VM und kopieren einfach
alles vom Rechenzentrum in die VM und dann sind wir in der Cloud. Das ist halt eigentlich
genau der Weg, es nicht zu machen. Und wisst ihr eigentlich, wie teuer der Scheiß ist?
Wisst ihr, wie teuer der Kram ist? Passt mal auf. Azure Calculator. Passt mal auf. Wir
haben letztens, wir haben letztens mal, wir mussten letztens größere Sachen umziehen.
Virtuelle Computer. Der hat jetzt ein bisschen Paintschamp die Anwendung, ja ja, anzeigen.
Also, jetzt passt mal auf. So, West, wir machen mal Europe. Central Germany, gibt es auch
da irgendwo, genau. So, Central Germany, Betriebssystem Linux, Ubuntu, ja, vollkommen okay. Ubuntu
Advantage, was ist denn da der Unterschied? Kein Mensch. Standard, Kategorie. Oh fuck,
keine Ahnung, was wir da haben. Instance. So, wir haben was richtig Fettes genommen.
Richtig Fettes, irgendwie sowas hier. Moment, can't wait. Also 5 Euro die Stunde. Das ist
deutsches Komma, also 5,2. Also wir haben was Fettes genommen. So, dann läuft das, dann
läuft das einen ganzen Monat. Einen ganzen Monat. Und so, und jetzt kommt der Hit. Also
Esser Steep. Moment, hab ich den, ich hab den Calculator kaputt gemacht jetzt. Ich hab
nichts anderes mehr auswählen. Wait, wait a minute. Dann nehmen wir West, West Europe,
West Europe. Warte mal, wo war's denn jetzt? West Europe. Okay, ich glaube wir haben sogar
nur Esser Steep Standard genommen. So, und jetzt kommt der Hit. Also. Und wir brauchen
eigentlich zwei Stück von, wir brauchen eigentlich zwei Stück von. Also, als Erklärung warum
wir das machen müssen, folgendes. Ich muss nur gucken, dass ich das immer ein bisschen
anonymisiere, dass man nicht weiß von welcher Bank ich rede. Also, folgendermaßen, warum
will man so einen Scheiß überhaupt machen? Erst mal gesagt, eigentlich will man sowas
nicht machen, gleich mal angemerkt. Es gibt deutlich bessere Sachen in Azure Speicherplatz
zu kaufen, als eine VM mit 2x32T SSD. Es gibt Azure Files, das ist billiger, da kann
man dann über eine Windows Freigabe, über einen Samba Share oder über NFS drauf zugreifen,
ist alles besser. Man kann, wenn es lahm sein darf, Blob Storage verwenden, das ist alles
billiger als das. So, jetzt kommt der Hit. Jetzt kommt der Hit. Also, um was es geht bei
dem Umzug ist folgendes. Wir haben bei uns auf der Arbeit riesige, also wir sind ja verpflichtet,
also man ist ja verpflichtet, ich weiß nicht, ob das nur für Banken gilt oder sonst wo,
man muss ja den Verkehr, den E-Mailverkehr und sowas, den muss man ja rechtssicher irgendwie
archivieren und dementsprechend haben wir ganz, ganz viele Mails von, frag mich nicht, den
letzten 10 Jahren oder so. Also wir haben richtig viele Mails und irgendjemand kam auf die großartige
Idee, ich nehme diese Mails, schmeiß die alle zusammen auf einen Server und installiere
ein IMAP drauf. Also sprich, da liegen jetzt Mails von 10 Jahren in, ich glaube, Maledear
Format rum und davor ist ein IMAP, also sprich, man kann ganz normal über IMAP darauf zugreifen.
Das ist ja eigentlich ganz gut und offline ist das auch kein Problem, aber das sind bestimmt,
ich weiß es gar nicht genau, der letzte Upload war 50TB groß, aber das reicht nicht. Ich
sag mal, das sind 100TB oder so, Mails und Zeug und das sind aber auch nicht mal 10 Jahre,
in Wirklichkeit sind es noch viel mehr. Also ich sag mal, 100TB, da reicht das hier auch
gar nicht, Kegwaid, Moment. Ah ja, okay, wird immer besser. So irgendwie 100TB, an Mails
und teilweise auch mit Mails anhängen und sowas. Also 100TB, so und wir wollten das
eigentlich, also wir haben das nach Azure hochgeladen, das hat schonmal alles gecrashed
auf dem Weg, ja unser Proxy ist abgeschmiert und alles bei dem Upload. Zumindest ist jetzt
das Problem. Die ursprüngliche Idee, die wir hatten ist, hey, weißt du was, wir machen
einfach eine VM in Azure, installieren da einen IMAP Server drauf und hängen halt über
Azure Files den Storage dran. Das muss ja auch nicht so ultra schnell sein. So und jetzt
kommt das Problem, jetzt kommt Big Brain, huge, huge Problem. Dofkort ist ein IMAP Server
und wisst ihr was das Standard Trendzeichen ist, was Dofkort für, also das Standard Trendzeichen
was Dofkort für Ordnerstrukturen in IMAP verwendet? Ich kann es euch sagen, es ist ein Doppelpunkt.
Und wisst ihr was Microsoft nicht erlaubt als Sonderzeichen in der Teilnahme auf Azure
Files? Ratet mal. Genau so sieht es aus. So, wir haben uns überlegt, wir können es
umbenennen, wir können es umbenennen, wir können das umbenennen, ist gar kein Problem.
Aber Dofkort, der IMAP Server, da musst du den Source Code patchen, dass er ein anderes
Trendzeichen verwendet. Und das heißt, wir müssten bei jedem Dofkort Update eine Custom
Dofkort Version bilden und mit Security Patches versorgen, dass sie ein extra Trendzeichen
verwenden können. Das will im Prinzip auch keiner haben. So, jetzt sind wir, ich erzähle
euch aber auch gleich meine Big Brain Idee, um das zu umgehen. Also, vielleicht hat aber
auch einer von euch, vielleicht hat aber auch einer von euch Ideen, ich weiß es nicht.
Wieso nicht Dofkort direkt anfragen? Ja, das ist eigentlich, fragt mich nicht. Zumindest
ist jetzt das nächste. Auf die Idee, um diese gekommen sind, hey, wir nehmen einfach eine
Azure-VM, hängen ja 100TB SSDs dran und lassen die laufen. Ich meine, es ist nicht so, dass
wir pleite gehen davon. Das ist ein Multimillionen-Milliarden-Bank-Ding. Es geht davon, ich pleite. Aber ja, genau,
ich programmiere mal nebenbei einen Patch für konfigurierbare Zeichen. Ach ja, übrigens,
das Ganze muss natürlich bis Ende nächsten Monats umgezogen sein, ist ja klar. Ist jetzt
nicht so, als hätten wir da Zeit für oder so. Das muss ja schnell gehen. So, und zumindest
hatten sie jetzt die Idee, wir nehmen eine fette VM und hängen da einfach 100TB dran.
Ihr seht, monatliche Kosten, 10.000€ ist ja richtiger Schnapper, würde ich sagen. Kann
man mal machen. Kann man sich mal gönnen. Aber, jetzt, ich hatte Massive Big Brain Idee
letzte Woche. Und zwar, was würden die Server denn kosten, wenn ihr sie selber kauft? Ich
glaube, ein Server kostet uns um die 35.000-40.000€. Also, aber den haben wir ja schon. Naja, ich
habe im Felix auch mal ein Video aus unserem AZ aufgenommen, wo wir uns so ein paar Kisten
zeigen, aber ich habe bis jetzt irgendwie noch kein Video von gemacht. Zumindest, ich
hatte jetzt eine Idee. Und zwar, wisst ihr, was man machen kann? Ich mach mal kurz meine
Dreaming-VM an. Oder noch mal eine Idee, vielleicht kommt ja einer von euch auch auf die Idee.
Also, wie gesagt, Doppelpunkt in Dateinamen sind das Problem. Vielleicht hat ja von euch
auch einer eine gute Idee. Ich zeige euch gleich, was ich für eine Idee hatte. Vertrauliche
Mails in der Cloud. Egal, wir vertrauen Microsoft. Vertraust du nicht Microsoft, also. Spars fallen
da ein anderes Dateisystem drauf. Die Idee ist gar nicht schlecht. Das ist so die Vorstufe
von der Idee, die ich hatte. Ja, ja, finde ich, ist eine gute Idee. Hätte auch den Vorteil,
dass man ein Dateisystem nehmen könnte, was quasi langsam wächst und man nicht so viel
auf einmal bezahlen müsste. Nee, was ich mir jetzt überlegt habe, ist folgendes. Ich nehme
einfach eCryptFS dazwischen. Das ist ein File-System, so ein Overlay-File-System unter Linux. Das
kann Dateinamen verschlüsseln. Wir wollen zwar nicht wirklich, dass Dateinamen verschlüsselt
werden, aber wir wollen, dass Dateinamen rauskommen, die keine Doppelpunkte enthalten. Also mache
ich da einfach einen eCryptFS dazwischen und dann hast du auf der einen Seite einen Ordner
unter Linux, wo Doppelpunkte erlaubt sind und auf der anderen Seite die, die auf dem Azure
Files Backend liegt, die hat zwar verschlüsselte Dateinamen, aber diese verschlüsselten Dateinamen
enthalten keine Doppelpunkte. Einziges Problem ist, wir müssen 100TB nochmal umkopieren.
Also wir müssen ja ein eCryptFS anlegen und dann muss ich quasi von die 100TB dort rein
kopieren, dass die einmal encryptet werden. Leider, leider kann man in eCryptFS Encryption
nicht ausschalten. Also was halt richtig geil wäre, vielleicht kennt da jemand von euch
aus, was halt richtig geil wäre, wenn es die Möglichkeit hätte nur die Dateinamen zu Opfos
scaten und den Inhalt gleichzulassen. Wie lange dauert das Rumkopieren bei euch? Ich
glaube eine Woche oder so hat das kopiert. Azure to Azure Copy, naja Azure to Azure Copy
ist ja glaube ich nur, wenn du von einem Azure Service auf einen anderen Azure Service kopieren
willst. Also korrigiere mich, wenn ich falsch liege, aber wir wollen ja quasi von einem
Azure Storage in eine VM dort in ein gemountetes Filesystem und auf der anderen Seite in Azure
wieder raus. Doch doch, wir haben die Datei, doch in Azure Blob Storage kannst du Doppelpunkte
hochladen, das ist kein Problem. Du kannst nur nicht in Azure Files einen Windows oder
Linux Share anlegen und auf Dateien mit Doppelpunkt zugreifen. Das geht nicht. Die liegen schon
in Azure. Aber ihr seht, es gibt teilweise Probleme, von denen man gar nicht denkt, dass
die existieren. So, das probieren wir dann nächste Woche mal aus. Übrigens, es gibt
noch was, um das noch teurer zu machen und hier habe ich den Calculator schon zugemacht,
ist es noch da? Ist es noch da? Ja, exzellent. Es gibt nämlich noch die Möglichkeit, pass
mal auf, es gibt, Moment, warum gibt es hier keine Ultra? Es gibt nämlich noch mehr, es
gibt Azure, SSD, SSD Ultra gibt es da noch. Und die sind noch teurer. Wir würden es bestimmt
schaffen, dass ich irgendwie auf 50k im Monat komme für einen Server. Disk Storage Ultra,
ich glaube, da stehen die Preise gar nicht drauf. Und wer glaubt, dass es sonderlich
schnell ist in Azure alles, der täuscht sich. Also wir haben, das hier stimmt übrigens
hinten und vorne nicht, ne? Das stimmt hinten und vorne nicht. Also wir haben eine SSD dran
gemacht zum testen mit 500G und dort haben wir maximal 140 MB durchbekommen. Also jede
Samsung SSD, jede SATA Samsung SSD ist schneller als die Azure SSDs. Ja, guck, hier steht es
25 MB, 150 MB die Sekunde maximal. Man muss schon die Fette nehmen, dass man überhaupt
sequenziell noch viel durchkriegt. Ist nicht ohne, ist nicht ohne. Aber ich finde meine
Idee mit dem E-Crypt FS ehrlich gesagt ganz nice. Deswegen probieren wir das nächste
Woche mal aus. Bin ich mal gespannt. Ja, aber was ich eine gute Idee finde, der Chat hat
gerade vorgeschlagen, man könnte ja mal bei Dovecord anfragen, ob die das einem rein
programmieren, Custom Separator. Das ist keine schlechte Idee, ist aber bis zu Ende,
dass der Zeitplan ist nicht umsetzbar. Aber die Idee finde ich tatsächlich nicht schlecht.
Da soll unsere Sales, was auch immer, Stonks Abteilung das einfach mal probieren. Und man
kann sich da bestimmt support auch... Warum ist da das Zertifikat abgelaufen? Naja. Oder
alternativ, man könnte doch einfach mal gucken, ob man nicht den anderen iMap nimmt, wo das
konfigurierbar ist. Aber wäre auch noch eine Möglichkeit. So, aber nachdem Windows jetzt
installiert ist... Moment, wo ist es? Jetzt können wir uns erstmal den Neuigkeiten von
.NET 6 widmen. Mal schnell mal die Vmware Tools hier draufkloppen. Vmware Tools, install,
maybe later. Zum Edge kann ich jetzt an der Stelle bloß nochmal sagen. Nimmt Exchange.
Wir haben in Microsoft Asher, wie heißen die? MVP? Oder so? Hatten wir mal in irgendeiner
Schulung, den haben wir gefragt, was er machen würde. Und er hat gesagt, Scheiß auf Linux
und iMap nehmen Exchange. Ist kein Witz. Natürlich, was erwartest du von einem Microsoft MVP?
Wahrscheinlich ist die Idee gar nicht so schlecht, wenn man es in Asher hosten will. Ernsthaft,
ja? Aber das macht man halt nicht bis Ende des Monats. Bisschen fail. So, fullscreen,
jawoll, passt. Okay, dann schauen wir uns mal ganz... Wie gesagt, wir gucken uns nicht das
komplette Video an. Ich skippe bloß durch, wo die interessanten Parts sind. Schauen wir
uns mal die neuesten Features an von.NET 6 und C Sharp 10 ist es, glaube ich. Und was
die sonst noch so haben. Ihr kennt mich, ich muss zwischendrin immer Stopp machen, um ein
paar Sachen loszuwerden, was ich dazu zu sagen habe. Einmal mal gucken, was es Neues gibt.
Ich vermute mal, wenn die Präsentation so läuft wie immer, ich habe ja in Anfang schon
geguckt, ist erstmal Intro zu.NET vom.NET... Wie heißt der Typ? Projektmanager, Direktor,
was auch immer. Keine Timestamps, ja, richtig fail. Und danach kommt C Sharp Language Features
und länger gucken wir nicht. Und wir gucken auch eh nicht alles. Also, schieß los. Er
ist Direktor of Program Management, aber ein gescheiter Mikrofon hat er nicht.
Okay, so, das überspringe mal schon mal alles, weil ich glaube, das müssen wir uns jetzt
nicht angucken, dass Microsoft.NET anpreist. Okay, das finde ich tatsächlich immer ganz
interessant, wenn sie solche Statistiken zeigen. Natürlich pickt sich Microsoft an der Stelle,
ich mach mal ein bisschen, ich lass mal ein bisschen Hintergrundmusik laufen. Natürlich
pickt sich Microsoft da Statistiken raus, die sie geil finden, ist ja klar. Aber das
wird nicht, ich glaube nicht, dass das gelogen ist. Wie die allerdings auf Most Loved Framework
kommen, verstehe ich nicht. Das ist eine Stack-Aufwaffelumfrage, ich habe diese Stack-Aufwaffelumfrage aber
nie gefunden, wo das Most Loved Framework ist. Ich kenne die Umfragen, was ist eure Lieblingsprogrammiersprache,
mit welcher Programmiersprache würdet ihr mehr arbeiten. Zumindest ist mir das noch nie
so wissentlich aufgefallen, dass die Most Loved Framework sind. Sie sind aber mittlerweile
Top 5 Languages auf GitHub, das stimmt. Man darf nicht vergessen, wovon Microsoft kommt.
Echt, da steht das drin, das haben wir uns sogar hier im Stream angeguckt, da ist mir
das nicht drin aufgefallen. Aber ich glaube es ihm, wie gesagt, ich glaube ja nicht, dass
es fake ist. Wir können ja mal gucken. GitHub, Most Loved, Reddit, Survey, Survey, ich sprühe
das aus, Survey, Survey..NET Core. Wo sind die Most Loved Framework? Ach hier! Ach ASP.NET
Core ist Most Loved Framework. Ach nee, hier auch, ok. Ich glaube soweit runter habe ich
da nie gescrollt, deswegen ist mir das nicht aufgefallen. Aber das passt schon. Ich muss
euch ehrlich sagen, ich bin ja auch.NET Fan. Also ich mache alles in C-Sharp, wenn es
keinen guten Grund dagegen gibt. Ok, dann passt das. Sagt ob ich die Musik ausmachen
soll, laufen lassen soll, ansonsten vielleicht ein bisschen langweilig. Das hier finde ich
auch wirklich beachtlich, weil Microsoft, also man muss sich ja überlegen von wo Microsoft
kommt..NET Core Release war ja glaube ich vor 5 Jahren oder so. Und davor war.NET eine
mehr oder weniger Windows Only Sache, bis in Unity vielleicht, boah ich weiß ja gar
nicht ob es so lang, doch gibt es schon länger. Und die haben auf einen Schlag Top 5 Language
auf GitHub. Bissle mono, genau. Aber was auch dazu kommt und das spricht jetzt wieder gegen
Microsoft, dass das halt doch nicht so geil ist die Aussage. Microsoft hat halt selbst
sehr viel Open Source auf GitHub und die haben halt Millionen Code Zeilen Open Source. Das
heißt, wenn jemand hingeht und Open Source einfach Millionen von Code Zeilen, bist du
halt instant in den Top 10 Languages. Das geht halt gar nicht anders. Aber trotzdem,
nicht dass du trotzdem sagst, ich bin.NET Fan, ich mache alles in.NET, sofern nicht
was dagegen spricht oder in einer anderen Sprache sich das einfacher umsetzen lässt.
Ich bin der Meinung, Javascript ist zwar die beste Einsteiger-Programmiersprache aktuell,
weil du an Frontend Sachen eh nicht vorbei kommst, aber.NET fürs Backend ist eine super
Geschichte und gibt ja noch mehr. Sowohl Go als auch Python sind auch super zum Einsteigen
oder C für Microcontroller kommst ja auch nicht vorbei. Alternativ kann man natürlich
auch ABAP machen, wenn man auf SAP steht. Oder Cobol, Cobol geht immer, ja. Ok. Ok,
das müssen wir uns nicht angucken. Äh, sechs Monate Downloads, ja gut, das hat auch nichts
zu sagen. Also, why.NET 5? Flexible Deployment Unparalleled Performance. Das ist im Prinzip
jetzt aber auch nichts Neues. Reduced Infrastructure, Hosting Cost, Modern Info, ok, bla, bla, bla,
bla, bla, bla. Das können wir alles überspringen. Sagt doch, so ein 10 Minuten, so ein Stundenvideo
geht schnell rum. Upgrade Assistant juckt mich auch nicht. So, 1.NET 6, ja, genau, die größte
Neuerung in.NET 6 ist, dass sie jetzt ein Cross-Platform GUI-Framework machen. Aber
meine Prediction ist, Microsoft macht viele Sachen gut. UI-Frameworks macht Microsoft
nicht gut. Oder selten, selten gut. Wann hat Microsoft mal UI-Frameworks gut gemacht?
Gibt's da was? Windows Forms war für seine Zeit ganz ok für Einsteiger, ähm, weil's
deutlich einfacher war als Windows API-Geschichten direkt zu machen. WPF ist halt irgendwie dead
und kann moderne Sachen nicht. Was gab's denn an WPF auszusetzen? Also, das erste was es
an WPF auszusetzen gab, bis heute ist das Font-Rendering, was sagt, dass du moderne
Sachen wie, sagen wir mal, jetzt mal ein ganz plakatives Emoji-Support nicht hast, weil
der Kram halt so alt ist, und dass du in WPF, ich sag nicht, ich sag nicht, dass es gar
nicht geht, aber nur ganz schön schwer 3D-beschleunigte Sachen reinrendern kannst. Also, render dann
mal DirectX oder Direct3D direkt in WPF. Das geht so nicht. Du musst dich erst um quasi
so eine Interop-Schicht mit WPF kümmern und dann bist du auch gecapped bei 60 FPS. Also,
WPF ist cool, wie es ist, aber es ist auch nicht so absolut top-notch, wie man das gerne
hätte. Ist WPF selbst nicht DirectX-beschleunigt? Doch. Aber dadurch, dass WPF quasi da oben
drauf aufsetzt und eine ganz genaue Vorstellung hat, wann, wie, wo was gerendert wird, und
glaube ich auch capped bei 60 FPS, kannst du nicht einfach hergehen und sagen, hey,
ich render jetzt was in das WPF-Fenster. Das geht nicht. Na, bei Windows-Form ging das
ja schon. Bei WPF und bei OVP, bei OVP ist es ja genauso, da musst du Umwege machen
über, ich rendere offscreen und kopiere das dann irgendwie rein und sünke das mit dem
Vsync von WPF und OVP und das ist scheiße. Ja gut, Rotina, du hast gefragt, was die Nachteile
von WPF sind. Ich meine, dass es dafür nicht verwendet wird, ist klar, weil es sich dafür
auch nicht eignet, aber man sieht halt, WPF ist auch nicht dabei, das ist der Schluss,
OVP ist auch ziemlich verkackt, man kann bis heute beispielsweise in OVP keine Screen-Captures
richtig machen und ihre große Chance, das mit WinUI 3 so zu bauen, dass man OVP für
alles verwenden kann, also nein, das stimmt nicht, dass man die UI-Technologie von OVP
für alles verwenden kann, haben sie auch nicht geschafft, weil sie gesagt haben, wen interessieren
native Windows Anwendungen. Also sprich, auch mit WinUI 3 brauchst du immer noch ein Codesigning-Zertifikat
für 150 Euro im Jahr, dass du überhaupt dich erreisten darfst, Windows Anwendungen
zu programmieren. Deswegen krebsen so viele Leute heutzutage noch mit Windows Forms rum
oder nehmen gleich so Sachen wie Qt oder direkt Electron. Das meine ich, warum es so viele
Electron-Anwendungen gibt unter Windows, weil Microsoft es verschissen hat mit UI unter
Windows. Von Linux gar nicht zu reden, da ist das nicht wirklich besser, die einzigen,
die das ein bisschen besser machen, ist tatsächlich Apple in dem Fall, meiner Ansicht nach. Flutter
wird auch nochmal ein großes Ding, habe ich euch auch schon ein paarmal erzählt, bin ich
der Meinung, UI-Technisch ist Flutter richtig nice, was ich bisher gesehen habe und Flutter
hat auch den richtigen Ansatz, sie malen die Steuerelemente in ihren UIs selbst mit der
jeweils besten Technologie auf der Plattform. Das ist das einzige Wahre, meiner Ansicht
nach und das machen die jetzt halt nicht, um jetzt mal wieder den Bogen zu.net zu bekommen.
Die größte Neuerung ist, dass sie einen Cross-Plattform-UI anbieten wollen. Der ist aber schon der
erste Punkt. Cross-Plattform-UI heißt bei Microsoft nicht wirklich Cross-Plattform-UI.
Wenn man sich das hier zum Beispiel mal anguckt. Linux wollen sie nicht supporten. Natürlich,
ich kenne die Argumente, dass die Leute sagen, hey, ist doch egal, wer braucht das schon
und das ist wahrscheinlich auch das, was sich Microsoft gedacht hat und es ist sicherlich
auch nicht einfach, gerade UI-Sachen Linux zu supporten, weil was die Jungs da unter
Linux fabrizieren, geht ja auch, wie sagt man schon, auf keine Kuhhaut mehr. X ist direkt
aus der Hölle, Wayland aus etwas kühleren Regionen der Hölle und dann hast du das Problem,
dass Grafik-Tankentreiber teilweise übelst vernachlässigt werden unter Linux, dass GTK
laufend kaputt geht, weil Gnome sich gedacht hat, haben wir keinen Bock mehr, haben wir
jetzt kaputt. Also, UI unter Linux zu supporten ist sicherlich nicht ohne, das will man eigentlich
auch nicht wirklich. Aber ich finde, man kann nicht sagen, man hat einen Cross-Plattform-UI-Framework,
wenn Linux nicht unterstützt wird. Es gab ja hier auch richtig viele Diskussionen
drüber und Microsoft möchte Linux anscheinend nicht supporten. Was ich persönlich ein bisschen
doof finde, weil für mich ist wichtig, wenn ich mal wirklich Cross-Plattform-GUI-Sachen
machen würde, dann wäre das halt irgendwelche Technik-Grams oder irgendwelche Admin-Tools
oder was auch immer und da wäre für mich Linux-Support wichtig, neben Windows-Support.
Auf den Mac-Support kann ich scheißen, den brauche ich in dem Fall nicht. Das wäre natürlich
nicht schlecht. Das heißt, was bleibt, irgendwann mal Flutter und Dart, Qt oder halt allseits
beliebt Electron für 500 MB pro Fenster. Aber so ist es halt. Gibt richtig lange Diskussionen
und die Leute flippen wieder richtig aus hier drinnen. Leute, ihr müsst euch mal manche
Diskussionen auf GitHub durchlesen. Das sind teilweise übelste Spasten am Start. Ich weiß
gar nicht, was mit den Leuten los ist. Ihr müsst hier mal den Kram durchlesen, wie die
teilweise hier abgehen. Es ist der Witz. Der Typ wird dann auch irgendwann gebannt. Ja,
den Typ haben sie gebannt zwischendurch, weil er so am Eskalieren ist. Also eigentlich
eine richtig coole Geschichte von Microsoft in den UI-Framework jetzt einbauen zu wollen
in.NET. Aber ich fürchte, dass das wieder komplett nach hinten losgehen wird. Desktop-Apps
sind dead. Desktop-Apps sind meiner Meinung nach hauptsächlich dead, weil es Microsoft
10 Jahre lang verkackt hat, UI-Entwicklung auf Windows angenehm und zeitgemäß zu machen.
Ansonsten ist Windows halt die Plattform, die du unterstützen musst. Deswegen krebsen
da ja auch so viel mit eigenen Lösungen rum, weil es Microsoft letzten 10 Jahren nicht
hinbekommen hat. WPF war das letzte Benutzbare, was Microsoft produziert hat und das ist auch
schon uralt. UWP lassen wir mal außen vor. So, also das finde ich ist eine geile Idee,
aber solange Linux-Support fehlt, ist das für mich keine Cross-Plattform-Native-UI.
Cross-Plattform-Web-UI, da meinen die glaube ich Blazor damit. Da bin ich auch skeptisch,
ob Blazor sich jetzt so wahnsinnig durchsetzen wird. Ich finde es von der Idee her cool,
aber ansonsten, naja. Ich muss es ein bisschen leiser machen. Es geht auf einmal viel lauter.
Nein, nein, nein, das erzählt ihr schon seit.NET 5 und es funktioniert nicht. Das ist
nicht gut. Das wird wieder nicht funktionieren, ich sage es euch. Die haben es mit.NET 5
und WinUI probiert und du kannst immer noch keine neuen Windows-Anwendungen machen, die
kein Codesigning-Zertifikat verwenden, es sei denn du greifst auf WPF oder Windows Forms
zurück, was halt bescheuert ist. Wer möchte sich ein Codesigning-Zertifikat kaufen, wenn
er privat mal irgendwelche Dinge programmiert? Und viele nützliche Tools, die es so gibt,
sind halt nun mal nicht von Leuten, die bei irgendeiner Million-Company arbeiten, sondern
so welche wie ich oder der Chat. Und wir kaufen uns kein 150 Euro Codesigning-Zertifikat
im Jahr und ich sehe es auch überhaupt nicht ein. Die sollen gefällig dafür sorgen, dass
ich normale Windows-Anwendungen entwickeln kann. Aber das kriegen sie nicht richtig gebacken.
Auch das Integrieren. Jaja, du, Qualen der Chain-Lore-Assistin, das komme ich an hier
gerade. Was wollte ich jetzt sagen? Auch das Integrieren in Windows Forms und WPF klappt
ja auch nicht richtig mit dem UWP-Zeug. Es gibt da zwar Möglichkeiten, aber es ist alles
nicht schön. Also das glaube ich erst, wenn ich sehe, dass da wirklich alles integriert
ist. Ihr habt's gehört, Linux fehlt. Und so Single ist die Codebase gar nicht. Ich hab
eine Demo-Anwendung gesehen. Das erste, was ich gesehen habe in der Demo-Anwendung ist
if-platform-gleich-daven. Das erste, was ich gesehen habe. If-define-platform-gleich-daven.
Das machen die auch immer gut. Das muss man ihnen echt mal zugutehalten. Also wie gesagt,
ich bin ja.NET-Fan, aber ich glaube nicht, jeden Scheiß den Microsoft erzählt. Das machen
sie aber wirklich gut, wenn man sich die Performance-Entwicklung anguckt, sowohl von der Runtime an sich, als
auch gerade von ASP.NET Core für Web-Anwendung. Das hat sich die letzten 3-4 Versionen wirklich
brutal geändert. Also die sind in Standard-Workloads. Also wenn du einfach nur guckst, dass du viele
kleine Request-Diesekunden und sowas durchkriegst, das sind die mittlerweile meilenweit vor Node.js,
sogar vor Java. Und die sind da, ich glaube teilweise auch vor Go. Die sind da wirklich
ganz oben mit dabei. Es ist wirklich hart. Also Performance-Optimierung können sie gut.
Okay. Ist laut genug, oder soll ich den wieder ein Stückchen lauter machen? Ja, es reicht
glaube ich. Ja, das will ich mir jetzt angucken. Ich weiß, dass sie eine Demo zeigen,
von C-Sharp 10 Features. Da bin ich echt mal gespannt drauf. Außer Linux? Außer Linux?
Habe ich mal eine Zweifel, was das so bringt? Minimal Web APIs for Cloud-Native-Apps. Okay,
da kann ich mir jetzt nicht allzu viel drunter vorstellen, wenn ich ehrlich bin. Was soll
das heißen? Ah, das ist gut. Müssen sie ja auch. Windows Forms und WPF auf ARM64,
aber nur auf ARM64, wo Windows läuft, ne? Ich kann mir nicht vorstellen, dass Windows
Forms auf einmal auf der Linux funktioniert oder auf dem Raspberry Pi. Dass die die neuen
Apple, dass sie die neue Apple-CPU unterstützen, ist wirklich pork. Aber die sind ja auch,
was Cross-Platform angeht, sind die wirklich gut dabei. Halt, der Linux-Support lässt
was Grafik, was GUI angeht, zu wünschen übrig, aber naja. Okay. Man sieht hier übrigens
das Entity-Framework, haben sie noch das Core hintendran, obwohl sie.NET Core in.NET
6 umbenannt haben. Programmierst du eigentlich immer in deiner Linux-VM zu 90%, ja? Pff,
was auch immer. Okay, das heißt Datenbank-Stellz geht schneller? Ah, das ist gut. Okay,
hast du mal Linux mit Windows 10 KVM probiert? Mit was? Was? Linux? Hast du mal Linux mit
Windows 10 KVM probiert? Ah, ob ich mal Windows 10 in KVM unter Linux probiert hab. Äh ja,
ja, hab ich probiert. Ist nicht so geil. Also man virtualisiert deutlich besser Linux unter
Windows als Windows unter Linux. Okay. Was ist das?
Was zum?
Hä? Also, INIT, das gab's ja schon mit C Sharp 9. INIT ist quasi das, was man früher
in einem Constructor gemacht hat zum Zuweisen von einem Feld, kann man jetzt komplett ohne
Constructor machen. Also sprich, ich kann, wenn ich jetzt hier Person anlege, kann ich
einmalig das hier setzen, Name setzen und danach nie wieder. Dafür wird INIT verwendet.
Es gibt GET, SET, INIT. GET ist Wert abrufen, SET ist Wert setzen. Und wenn ich GET und INIT
nehme heißt das, ich kann den Wert immer abrufen, aber ich kann den Wert nur einmalig
setzen. Und das hier ist so eine Art Lambda für, ah, FIELD ist ein neues Schlüsselwort
dann. Das heißt, initial weise ich einmal Value drin. Wo kommt denn Value her? Ach,
der Value, der gesetzt wird. Okay. Das heißt, ich kann einmalig den Value, den ich setze
modifizieren und dann nie wieder. Okay, das ist eigentlich ganz nice. Geht das Team heute
bis 22 Uhr? Weiß ich doch jetzt noch nicht. Warum? Warum? Oh, das ist cool. Das ist cool.
Fällt mir jetzt erst auf. Namespace Model. Es erinnert mich ein bisschen an Pains Champion
C++ Dinger, aber normalerweise muss man Namespace hier immer noch drumherum schreiben. Normalerweise
hast du gesagt Namespace Model und dann musstest du Klammer aufmachen, Klammer zu, sodass du
im Endeffekt mit Namespace deinen kompletten Code alles einmal eingerückt hast, komplett
sinnloserweise. Das ist cool. Okay, wir gucken uns gleich den C-Sharp-Teil an. Das ist nice,
das ist cool. Also, das muss man dem wirklich, also, das muss man dem, dem, äh, wie heißt
er, Mets, Mets Torxon oder so, der C-Sharp Lead Designer, das muss man den C-Sharp-Leuten
echt lassen. Die sind, die schaffen das immer wieder, obwohl die Sprache jetzt im Kern her
auch jetzt nicht die jüngste ist, immer wieder wirklich sinnvolle, brauchbare und gut integrierte
Features abzuliefern. Also, genau das Gegenteil von dem, was C++ macht. Also, C++ ist exakt
das Negativbeispiel davon. C++ führt viel Scheiße ein, die unglaublich wir integriert
ist und jeder macht was anderes und die C-Sharp-Team macht sinnvolle Sachen. Was macht Global Using?
Ich, ich rate mal, ich rate mal, das ist neu. Ich vermute mal, dass du Using nur noch in
einer Datei schreiben musst und nicht mehr in jeder. Chandler sagt, du Fanboy, wie hieß
das in diesem einen, in diesem einen Video, zieh erstmal deinen Rucksack ab. Gab's da
nicht mal, es gab doch mal irgend so ein Video, wo irgendwie einer auch was erzählt hat von
Fanboy und dann kam dann einer an, zieh erstmal den Rucksack ab. Was war das denn? Das ist
auch schon ein paar Jahre her, ich krieg's immer richtig zusammen. Zieh den Rucksack
aus oder irgendwie sowas. Ach, keine Ahnung. Irgendwelche uralte Memes, an die ich eh keiner
mehr erinnern kann. War das nicht ein Song? Kann auch sein. Zieh mal den Rucksack, ich
weiß nicht mal. Zieh den Rucksack aus, wenn du mit mir redest, genau. Was mit Farid Bang?
Ja, das kann sein. Ich hör kein Deutschrap, deswegen hab ich mir das wahrscheinlich nicht
gemerkt. Was denn das? Public Records Struct? Das heißt, es gibt jetzt nicht nur Classes,
sondern Structs, aber Structs sind ja eigentlich schon... Wir warten mal den C-Sharp-Teil ab.
Mads, den mein ich. Mads Torgerson, den mein ich, den Typ. Das ist der C-Sharp-Lead-Chef-Architekt.
Okay, jetzt kriegen wir die C-Sharp-Demo. Im Prinzip das, worauf ich das gewartet habe.
Das ist Dustin Mads, um euch die neuen C-Sharp-Features in Aktion zu zeigen. Hey, wieder. Hallo.
Wieder einmal, ich bin hier mit dir, Dustin. Ja, ich bin hier mit dir, Mads. Und ein anderes
Set von C-Sharp-Features. Heute schauen wir uns an den C-Sharp 10 an. Wild-Theme, Leute,
das ist aber nicht der Hacker-Man-Mode, der hier aktiviert ist. Und wir beginnen von
wo wir losgegangen sind. Warte, die Katze verdeckt es. Soll ich den Chat raus machen? Na, man sieht doch überhaupt nicht. Wollt ihr die Typen sehen?
Okay, gucken wir so.
Der ist jetzt viel leiser. Nee, geht eigentlich.
Also von der Haareanzahl stimmt es tatsächlich. Also, naja, ein bisschen mehr Haare habe ich
schon noch, aber es geht in die Richtung. Man muss sagen, ich sehe wirklich ziemlich
ähnlich aus wie Dan's Gaming. Also gerade auch seitdem er weniger Haare hat.
Das haben sie ja mit C-Sharp 9 schon eingeführt. Ich muss euch ehrlich sagen, ich habe das
noch nie verwendet. Ich finde es cool, ich habe es noch nie verwendet. Jemand von euch
schon mal dieses Feature benutzt? Ich finde es cool, aber ich hatte noch keinen Anwendungszweck
für... Guck, hier sieht man es. Hier sieht man das, was ich vorhin gemeint habe. Also,
die haben hier eine Klasse, das ist ja eine Klasse, Rekord ist ja eine Klasse. Die haben
hier eine Klasse, die zwei Properties hat, hier FirstName, LastName und man kann das
immer auslesen, aber man kann es nur einmalig setzen, also sprich, nachdem er hier Scott
und Hunter gesetzt hat, kann er es danach nicht wieder ändern. Wenn er es ändern will,
dann muss er eine neue Instanz erzeugen mit dieser Syntax. Also, kann man jetzt quasi
diese Person nehmen und einmalig sagen, okay, LastName ändern, aber dann kommt eine neue
Person nochmal raus. Also, das hier ist nicht gleich, gleich das hier. Init ist wie Private
Static Zeugs, nee. Private Static Zeugs ist ja quasi komplett über alle Instanzen dann
Static und das ist es ja hier nicht. Das ist im Prinzip einfach nur Read-Only. Ach ja und
der Unterschied hier, warum man Rekord nimmt anstatt Klasse, wie gesagt, ich kenne das
Feature, ich habe es selbst noch nicht verwendet, ich hatte da noch keinen Anwendungszweck für,
der Vorteil anstatt Rekord zu nehmen anstatt Klasse ist, dass du das quasi benutzen kannst,
wie Werte, obwohl es eine Klasse ist. Also sprich, wenn du jetzt sagst, Person gleich
gleich Other Person, dann guckt er nicht, es ist die gleiche Instanz im Speicher, also
zeigt es auf den gleichen Speicheradresse, so wie es bei einer Klasse ist, sondern er
guckt sind die Werte gleich, also Person gleich gleich Other Person wäre nur true, wenn halt
auch die Felder stimmen. Genau. Bei Rekord ist es auch so, dass die Qualität des Rekords
auch wertgemäß ist. Genau. Wann fangen wir an dort net zu testen? Wir haben ja indirekt
schon, wir gucken uns an, was Neues gibt. Ja, das ist nichts Neues. Das geht ja alles
jetzt schon. Ja, und diese funktionieren, weil Person und Original Person die gleiche
Instanz haben. Sie haben beide diese zwei Werte, weil wir Original Person und Other Person
gebrauchen und die Name zurück verändern. Also diese werden tatsächlich True, um sie auf
der Klasse zu verbreiten. Differente Objekte, gleiche Instanz. Ja. Du hast die Idee, aber
wir wollen noch mehr mit Rekord machen, also der erste und vielleicht wichtigste Feature,
das wir in C-Sharp 10 hinbekommen haben, ist, dass du jetzt Rekord Class Person bekommst.
Und was das bedeutet, ist... Hä? Das ist doch genau das gleiche, wie vorher. Rekords waren
doch schon immer Classes. Genau das gleiche wie vorher. Ah, okay, okay. Ich wollte gerade
sagen, das ist doch genau das gleiche, er sagt es aber auch. Das bietet nichts mehr. Es
bietet nichts mehr, als was du in C-Sharp expressionen kannst. Also der Punkt, den du erlauben
kannst, ist wirklich, dass du natürlich etwas anderes anstatt Klasse verwendest. Du kannst
jetzt sagen, dass ein Rekord Struckt ist. Bei Default wird es eine Klasse, aber wenn du
Struckt verwendest, bekommst du ein Rekord Struckt. Warum? Ich meine, ich kann auch so ein Struckt
verwenden, das ist doch schon mehr oder weniger genau das Kla... Hä? Warum, warum? Und das
bedeutet, dass all das genau das gleiche wie vorher funktioniert, aber jetzt ist es nicht
Heap Allocated. Hä? Und eine Sache, die sehr interessant ist, ist, dass viele der Dinge,
die du mit einem Rekord machst, sind wertgemäß, aber so auch Struckte generell. Ja, genau.
Und also... Warum brauche ich das? Struckte haben keinen Equality Operator. Echt nicht?
Aber alle Struckte sind wertgemäß. Moment. Haben sie nicht? Kann man nicht Struck, Blag,
Gleich, Gleich, Anderes Struckt schreiben? Geht das wirklich nicht? Ihh, was ist hier
los? Warum hängt das? Ah, jetzt. Kann man das? Kann man das nicht? Wirklich nicht? Moment.
Das muss ich jetzt ausprobieren. Das ist mir noch nie aufgefallen. Das muss ich ausprobieren.
Geht das echt nicht? Das... Moment, Moment. Das muss ich jetzt testen. Ehh, Console App,
ja perfekt. Genau die brauchen wir. Diese Console App und nicht irgendeine andere. Genau
diese. Was auch immer das für eine ist. Ihh, was ist das für eine Schriftart? Monka! What
was habe ich denn hier? Was hat man da gemacht? Victor Mono. Okay, ist mal weg. Ahh, yes.
Gleich, gleich viel besser so. Was hat man hier? Alles Crap. Alles, alles weg. Brauchen
wir mal alles weg. Alles weg. Alles weg. So, also was geht jetzt angeblich nicht? Guck
mal mal, Strucked. Stopp, Stopp, Stopp, Stop... Was, hallo, please? Was macht der da? Ich
Was macht der da?
Ist der irgendwie pepo slow kann das sein?
Was macht der denn da?
Okay, ich weiß ich glaube ich habe irgendwas kaputt gemacht
Kein Quaid
Da
Was
Ich habe keine Ahnung was der für Schmerzen hat. Reboot
Ich weiß nicht was der für Schmerzen hatte, aber welche die mir nicht gefallen
Okay
Da ist dort nicht installiert. Ah, na gut länger brauchen wir es eh nicht
Sag mal habe ich irgendwas kaputt gemacht mit dem update
Habe ich mit dem update irgendwas kaputt gemacht?
Ah, es ist ein aktuelles Turnett alles gut
Das habe ich noch nie gehabt. Wo ist das Problem jetzt?
Wo ist das Problem? Was ist das hier? Ist das jetzt Crashed oder?
Ich kann ja auch den bestehenden nicht öffnen irgendwas ist da kaputt
Okay, kill all, kill all rider gibt es ja nicht. Oh da muss ich jetzt dieses
Chatbrains Zeugs ist, wobei wir können es anders machen. X kill, bam, schreckt
Okay, was hat der für Schmerzen gerade? Mal configure, settings
Ihh, Snap, das liegt bestimmt am f***ing Snap, alter
Snap, wer will denn sowas haben? User share.net viel besser save und jetzt kann
ich es bestimmt aufmachen. Ah, siehste, Snap, Snapshit, alter, okay
Strucked, Strucked, Qt, Chat, kann ich schreiben, Drop, String, egal hier, Name
So, und das soll jetzt nicht gehen. Chat, Chat1, Qt, Chat
If, Chat1, gleich, gleich, Chat2. Das ist mir noch nie aufgefallen
Das ist mir noch nie aufgefallen, dass man das nicht machen kann. Was ja aber
eigentlich logisch ist, weil wenn standardmäßig gleich, gleich, Reference
überprüft, also wenn Reference equals ist, dann ergibt es keinen Sinn bei
Strucked, weil Strucked kannst du nicht per Reference comparen, sondern nur per
Value. Das heißt, du musst dann sowas machen.
Und nachdem du wahrscheinlich keine Operator gescheit überladen kannst, für Strucked,
weiß ich gar nicht, wenn ich ehrlich bin, kannst du Operator überladen in Strucked?
Dann geht das. Interessant, siehste, wusste ich net. Man lernt ihn ja aus.
Okay, das Einzige, was also quasi ein RecordStrucked macht, ist
EqualsOperator überschreiben. Ist okay, kann man, kann man machen. Wie war mein Tag, was
hast du gemacht? Ich habe Videos aufgenommen. Morgen gibt es ein Video wahrscheinlich.
Collaboration, mit Algorithmen verstehen. Und ich weiß, dass es wahrscheinlich jetzt
nicht wirklich alle ansprechen wird zum Thema, aber für die Hackermans ist das bestimmt
so. Ja, Tieranzeigen kommt danach. Ja, aufkommt mal zu Punkt, Jungs.
Also, die hätten auch eine bessere Demo machen können, oder? Die Demo ist nicht sonderlich
bestrukturiert irgendwie. Ja, okay. Das stimmt, wenn ich das weglasse, ist FirstName
null und ich kann es danach nicht mehr setzen.
Okay. So lasst mich mal überlegen, was halte ich, was halte ich nicht, was halte ich nicht.
So lasst mich mal überlegen, was halte ich denn von sowas. Eigentlich eine coole Idee,
was ich nicht genau verstehe ist, warum kann ich nicht einfach einen Constructor machen,
wo ich erfordere, dass das muss übergeben sein. Also, ist nicht genau dafür ein Constructor
eigentlich da, dass ich so Sachen dann Pflicht machen kann. Aber gut, warum nicht? Also,
es schadet auf jeden Fall nicht sowas. Das ist jetzt sicherlich nicht das Feature, wo
die Welt drauf gewartet hat, aber das ist in Ordnung, ja.
Es geht um Millimeter, ja. Ja, wahrscheinlich. Ja, ChooseMyName hat Recht. In C++ hätten
sie das garantiert nicht in Required genannt. In C++ hätten sie wahrscheinlich irgendwie
template syntax erweitert, dass man sowas machen kann, dass es möglichst obstrus und
kompliziert ist, sowas zu verwenden. Es hätte aber auch sein können, was sie bei C++ natürlich
auch mögen, ist Spitzeklammer auf, zu oder halt größer, kleiner Zeichen, je nachdem
wie man es jetzt nennen mag. Also, es hätte mir vorstellen können, dass C++ dann sowas
macht wie public, Spitzeklammer auf, Spitzeklammer zu, dass das quasi dann sowas wie Required
bedeutet. Das wäre typischer C++ Style gewesen. Möglichst kompliziert alles machen.
Chain-Lore, Standard-Skin. Diamond-Operator, sowas. Ernsthaft? Du meinst das hier?
Äh, das heißt Diamond-Operator? Ja, das wäre typisch C++. Ach so. Aber, aber, aber
ich glaube C++ wird es eher so machen, weil das sonst nirgendwo verwendet wird. So, jetzt
kommt das, was er vorher geteased hat. Das ist aber ziemlich magic. Das ist aber ziemlich
magic. So field ist quasi so ne Art neues Schlüsselwort. Value gibt's ja schon immer.
Value ist quasi immer der magic wert. Das, was man der Property zuweist im Setter. Das
gibt's schon die ganze Zeit, aber field ist dann neu an der Stelle. Das heißt field ist
quasi so ne, so ne, so ne, so ne, so ne Keyword für die Referenz auf das Feld, was der Compiler
dann eigentlich für dich anlegt. Ich find das gut. Ich find das auch gut. Das hat was.
Es ist ziemlich magic, aber es ist auf jeden Fall praktisch. Ich hasse das auch, wenn man
nicht Auto-Property nehmen kann, sondern den Cramster reinwürsten muss. Ne, ich mag das.
Ja, ich kann's verstehen, wenn du sagst, hier magic, aber das ist ja ne relativ gut definierte
magic und du weißt eigentlich genau, was passiert. Jetzt nicht irgendwie so wie C++ Templates
oder so. Was würde jetzt eigentlich passieren, wenn ich da jetzt noch set reinschreibe? Da
wird er wahrscheinlich sagen, geht nicht, oder? Ich kann bestimmt nicht get, init und set.
Warum schreibe ich eigentlich required dahin und nicht required for das init? Wäre es sich
nicht so ne Taktik schöner, wenn required init dastehen würde oder init oder noch besser
init required? Das wär noch cool, oder? Aber die haben sich das sicherlich überlegt,
weil es so wahrscheinlich einfacher zu implementieren ist. Cool, es ist besser zu lesen, das stimmt,
dann steht das überall an der gleichen Stelle. Das stimmt, ja.
Find ich jetzt ne gute Sache. Würdet ihr hier ne newline dazwischen machen oder nicht?
Also würdet ihr get auf ne Zeile schreiben und init auf ne Zeile schreiben oder würdet
ihr alles in eine Zeile machen? Also ich glaube, ich würde bei der Länge alles auf eine Zeile
machen. Wenn sie bisschen länger ist, wahrscheinlich zwei. Du hast deine Physi Prüfung bestanden,
74 Punkte, excellent, oops, falsches, excellent, sehr gut. Massive big brain. Dazu kann man
nur sagen, wo auch immer mein Emote ist. Wo ist mein big brain Emote? Genau. Hast du
schon deine Präsentation gemacht?
Ja, okay, das macht man öfters, ja. Also was er jetzt meint ist, wenn man diese Funktion
so programmiert, muss man eigentlich immer checken, ob File Pass Null ist. Das stimmt,
das ist nervig. Wisst ihr, was ich mache? Ich lasse den Check einfach weg, wenn ich
es nur intern verwende. Wozu? Ich werde ja meinen eigenen Code schon nicht verkehrt aufrufen,
oder? Wer macht denn sowas? KegWade.
Umut, Präsentation ist easy, wenn du weißt, wovon du redest. Oh, jetzt kommt's. Postchamp.
Das ist cool, das ist richtig gut. Ja, Evoli, ich hab da wahrscheinlich auch so meine Schmerzen
mir das zu merken, aber nachdem er das fünfmal verwendet hat, weiß man das. Das ist nice,
das ist wirklich cool. Also, so wie ich das jetzt verstanden hab, was das hier macht ist,
das macht Magic quasi noch einen If-Null-Check. Also im Prinzip ist das hier erst nach dem
If-Null-Check ausgeführt. Warum macht man nicht auch Required davor? Warum benutzen
die jetzt nicht das Required-Keyword hierfür? Das wäre doch eigentlich viel cooler, oder?
Warum nennt man nicht Required? Das hat aber alles seinen Sinn. Also bei C++ würde ich
jetzt sagen, ja, weil es C++ ist und sich keiner Gedanken gemacht hat, aber, ja. Weil
sie Sharp haben, die sich Gedanken gemacht. Stimmt, stimmt, ich weiß warum. Ich weiß warum.
Ich kann Null hier übergeben, das ist vollkommen okay, der wirft dann einfach Runtime-Exception.
Required würde ja, wobei Null ist bei Required ja auch in Ordnung, ne? Genau, dementsprechend
würde das in dem Fall nicht passen. Ja, okay, das ergibt Sinn. Stimmt, Stimmt. Stimmt,
Null als Null wäre valider Wert für Required, ja, würde ich auch sagen. Bloß, dass das
hier halt checkt, während das, ja, das stimmt schon, chat, während der Compile-Time-Check,
ob alle Felder zu was zugewiesen sind. Da könnte man mit Required quasi auch nur checken, ruf
ich das hier auf. Der weiß ja zur Compile-Zeit gar nicht, ob das Null ist. Null ist ja auch
okay, ist damit aufzurufen. Aber man kann nicht sagen, Required ist einmal ein Compile-Time-Check,
ob alles überhaupt was zugewiesen bekommt, ob es initialisiert wird und dann es zu einem
Runtime-Null-Check umfunktioniert. Das ist ja okay, das ergibt Sinn. Also, ja, das,
kann man machen. Stimmt, Ausrufezeichen heißt ja, ich will, ich erlaube Null, oder? Nee,
oder? Nee, nee, Ausrufezeichen heißt, es darf kein Null sein. Oder was war das nochmal?
Nee, Ausrufezeichen heißt, es darf Null sein. Beziehungsweise, es darf ja auch so immer
Null sein, aber es gibt da eine Warning. Und Ausrufezeichen, Ausrufezeichen heißt, es
wird gecheckt, ob es Null ist. Joa. Okay, okay, passt. Also, ich glaube, das ist ein
Null. Ich finde es halt immer blöd, wenn man für ein einzelnes Feature quasi neuen Operator
oder wie auch immer man das jetzt denn mag einführt. Ob man da nicht irgendwas wie Required
noch verwenden könnte oder so. Aber es passt schon. Ich finde es auf jeden Fall eine coole
Geschichte. Und daran sieht man, die bei Microsoft machen sich, wenn es um C-Sharp-Erweiterungen
geht, wirklich Gedanken. Ist das zur Compile-Zeit? Nein, das ist nicht zur Compile-Zeit. Das
ist Runtime. Das ist im Prinzip nichts anderes, wie if FilePass gleich Null, Throw New Argument
Null Exceptions. Fick dich. So. Ist das Gleiche. Oder das Coolste ist ja, man schreibt ja nicht
so böse Sachen wie Fick dich in seine Exceptions rein. Man würde dann glaube ich reinschreiben,
wenn die richtige Exception-Code wäre. Name of FilePass cannot be null oder sowas. Ja,
Compile-Time Null-Checks gehen in C-Sharp nicht. Das ist mal tatsächlich was, wo C++ besser
ist. Aber auch ganz wilde Syntax. Stimmt. Das ist auch neu in C-Sharp. Wer das noch nicht
gesehen hat, man kann mittlerweile seine Main-Methode komplett schreiben ohne Main. Weiß nicht,
ob euch das aufgefallen ist. Also hier musste ich ja sowas hier machen. Class Program Static
Main als Einstiegspunkt in das Programm. Das braucht man seit C-Sharp 9 nicht mehr.
Guck mal, ich kann das alles wegschmeißen. Kein Problem. Ich kann einfach, Moment, das
sollte ich vielleicht da lassen. Ich kann einfach sowas hier machen. Das ist jetzt valid
seit C-Sharp 9, was eigentlich ganz cool ist. Geht inzwischen Async Main, ja. Das macht
er hier übrigens auch automatisch. Das sieht dann ein bisschen, ein bisschen, Python, JavaScripten
mäßiger aus oder so. Funktioniert aber unter der Haube, by the way, ist das genau das Gleiche
wie vorher. Der macht einfach nur eine Main-Methode drumherum. Deswegen kann man auch nicht zwei
Dateien anlegen, die sowas enthalten, weil er dann nicht weiß, was er als Main verwenden
soll. Ist aber eine coole Geschichte und das geht schon seit C-Sharp 9. Das ist das, was
ich hier nochmal zeige.
Muss ich euch mal fragen, macht ihr auch One Type per File? Also ich mach auch prinzipiell
One Type per File, aber es gibt eine Sache, wo ich dagegen verstoße. Das ist, wenn ich
beispielsweise irgendeinen Type hab, der einen Enum als Property-Typ hat. Keine Ahnung. Ich
hab ne Klasse Recording und ich hab da drin einen Enum, Manual Recording, Motion Detection
Recording oder Timer Recording. Dann mach ich das in die gleiche Datei rein. Aber ansonsten
mach ich auch One Class per File. Ja gut, wenn das ein Enum ist mit 200 Einträgen,
dann nicht. Aber meine Erinnerungen haben 5 oder so. Viel mehr kommt da meistens nicht
zusammen. Ok, ich sehe der Chat ist sich da zum größten Teil Big Brain technisch wieder
einer Meinung. Ups, falsch ist die Mode. Was auch immer das jetzt damit zu tun hat.
Hat er dem grad das Shortcut von Visual Studio gesagt? Hab ich das richtig gehört? Ach
nee, Good Choice hat er gesagt. Ich hab gedacht, er hat ihm den Shortcut gesagt, so nach dem
Motto, du Kacknoob, drück den Shortcut, um das anzulegen. Nee, hat er nicht. Ja, das
ist nervig. Jetzt stimmen die Imports nicht. Oder die Usings, wir sind jetzt nicht scharf.
Ok, jetzt machen sie aber ganz schön viel Intro dafür. Wir wissen doch jetzt alle schon
was passiert. Die schreiben Global davor. In Rider geht das übrigens einfacher, in Rider
kann ich hier drauf gehen und Visual Studio btw auch. Nee, Rider macht das nicht automatisch,
vielleicht kann man das einstellen. Aber man kann draufklicken, man kann draufklicken
mit Alt Enter und dann macht das Rider oder Visual Studio das automatisch. Es ist aber
trotzdem ein bisschen nervig und die Dateien werden auf jeden Fall kürzer, wenn ich das
Global importen kann. Also sie werden uns jetzt Global Imports zeigen, weil das stand schon
im Beispiel vorher drin. Nee, manchmal will ich Usings auslassen, wenn sich das widerspricht.
Je nachdem was für Kacklibraries ich verwenden muss, gibt es dort Typen drin, die eben den
gleichen Namen haben. Gerade Direct3D ist da ganz schlimm, was weiß ich wie viele Surfaces
und Hassen nicht gesehenes da gibt, das überschneidet sich da teilweise. Ich hab nicht viel in DirectX
gemacht bisher muss ich sagen, aber es hat mir schon gereicht. Oder ich verwende irgendeine
Library, die nen Typ drin hat, irgendwie HTTP Header oder so und das ist auch 5 mal definiert.
Also es gibt denke ich schon Punkte wo es sinnvoll ist nicht Global Usings zu machen. Aber kann
man ja dann. Boah, huge Multiple Cursor. Das ist cool, ich finde es ist eine gute Idee.
Geht jetzt, du bringst es noch nicht. Das ist auf jeden Fall ein ganz neues C-Shop 10 Feature,
ist doch nicht. Ist aber eine coole Geschichte, magisch. Das gefällt mir. Zu doppelt im Portemonnaie,
ja. Das finde ich cool. Ich würde aber kein extra File machen, ganz ehrlich, ich würde
kein extra File machen. Ich würde mein Main, ich würde mein Main, kann man eigentlich
Multiple Cursors in Rider machen? Geht das? Hab ich, ah so genau, so ging das, ja so ging
das. Ah hier unten hab ich schon. Das wäre cool, das würde ich einfach als Main benutzen,
dort kommt alles rein, da kommt dann irgendwie so ein bisschen Startup Kram und das war's.
Das ist eigentlich eine echt coole Geschichte, das gefällt mir. Das ist nice, guck mal wie
kurz und knackig das ist. Guck mal wie kurz und knackig das ist, das finde ich cool, das
hat was. Das ist übrigens so ein Unding, was ich auch schon in vielen C-Shop Trainingsvideos
gesehen hab, dass die Ride Line, alias ein global, dass du nicht mehr Console Ride Line
schreiben musst. Das finde ich total unintuitiv, weil ich hab mich mittlerweile so sehr an Console
Ride Line gewöhnt und außerdem, wer keinen Bock hat Console Ride Line zu schreiben, der
kann auch einfach CW schreiben und Tab drücken, das ist in Visual Studio auch so drin. Und
ich find's lesbarer Console Ride Line als nur Ride Line. Guck hier, hier hat er das Included.
Er hat hier Global Using Static System Console, das heißt, dass der quasi die Methoden von
System Console verwenden kann, ohne Console. Das ist mein Fall ist es nicht. System Output
prindeln, das sieht sehr nach Java aus. Gibt es eigentlich auch System Out Print Füllen,
mit Äffeln. Das ist aber echt ein cooles Feature, das mag ich auch an das C-Shop Entwicklung,
die machen sinnvolle Sachen einfach da rein. Manche Sachen sind vielleicht bisschen Nische,
dieses ganze Pattern Matching Zeug ist schon cool, aber die ganz abgedrehte Pattern Matching
Sachen wurde dann irgendwie dreimal Pattern Nested oder so, verwendet glaube ich kaum
einer regelmäßig, aber die machen schon coole Sachen. Im Vergleich zu C++ kann man
sich oft genug flamen. Echt hast du Pattern Matching schon so viel verwendet? Also ich
verwendet die Light Form davon. Also was ich beispielsweise ganz oft verwende ist, dass
du in einem If dann direkt checkst, ob das ein gewisser Typ ist und gleich die Variabel
dafür anlegst und sowas. Aber jetzt irgendwelche Cases mit zig geschachtelten Wens drinne,
habe ich selten. Mario XTB, Dankeschön für den Sub.
Oh, das ist auch cool, das ist wirklich praktisch, da sparst du dir einmal Eindrückungstiefe.
Ricky OMFG hat auch gesagt, habe ich nicht gesehen, Dankeschön für den Huge Massive
Subscription hier. Ist ne coole Sache. Hat was, hat was. Ich mein, das sind jetzt sicherlich
keine bahnbrechenden Dinge, aber die sind halt einfach angenehm. Das mag ich auch an
der C-Sharp Entwicklung. Die machen da nicht auf Teufel, kommen raus jetzt irgendwie sonstige
Dinge. Die machen auch vieles, was einfach angenehm ist. Also das kannst du dich echt
nicht beschweren. Und wisst ihr eigentlich, was wirklich mein Lieblingsfeature an C-Sharp
ist? Der Kram funktioniert einfach zum größten Teil so, wie man es erwartet. Das ist für
mich echt ein Punkt. Da ist wenig, da ist wenig Verwirrendes dran. Die meisten Sachen
heißen so wie das, was sie machen. Die meisten Sachen haben einen ordentlichen Dock dazu,
dass du gucken kannst, Parameter in, out beschrieben. Das ist einfach nur angenehm zu benutzen,
weil das halt das macht, was du erwartest. Ich mein, mein Lieblingsbeispiel ist ja folgendes,
das muss ich euch jetzt mal zeigen. Alter Rider, come on. Puh, nerv nicht. So, ich zeige euch
jetzt mal den besten Vergleich, warum C-Sharp einfach nur angenehm ist und C++ nervig ist.
Also, wenn man in C++, oder wir machen erstmal den C-Sharp-Teil, weil da weiß ich, wie er
aussieht. So, also, wir haben eine Liste. Keine Ahnung. Liste, new, list. Darf man das mittlerweile
machen ohne was dahinter zu schreiben? Ich glaube nicht, oder? 1, 2, 3, 4, 5, 5, 5,
5, 7, 8, 9. Nee, ich glaube das geht nicht. Okay, int. So, wir haben eine Liste mit diesen
Zahlen drin. Mal angenommen, ich möchte diese Liste jetzt filtern, dass alle Fünfer, alle
Fünfer rauswerfen. Dann mache ich in C-Sharp sowas, list, list, remove all, gleich 5. Fertig.
Und was jetzt passiert ist, der geht durch die Liste durch und droppt alles, was 5 ist.
Also, das ist, finde ich, easy as fuck zu lesen. Liste, remove, also entferne alle Elemente,
die gleich 5 sind. Total einfach. So, und jetzt passt mal auf, wie das in C++ aussehen
würde. In C++ müsste ich machen, list, remove, remove, standard, remove, nee, Moment, Moment,
remove, list, begin, list, end, ich glaube irgendwie so, 5, list, end, irgendwie so wäre
die Sündachs das gleiche zu machen in C++. Ich meine, was hat das Gremium geraucht davor,
als die sich sowas ausgedacht haben? Was ist denn das? Das ist hässlich wie die Nacht,
warum? Warum C++? Guck mal, es kann so einfach sein. Es kann so einfach sein. Aber die haben
sich gedacht, nope, remove all ist kein Ding. Nee, es ist nicht. Remove all ist Methode
aus list oder aus I-List oder fragt mir nicht. Aber ich meine, was ist einfacher zu lesen?
Jetzt mal ernsthaft. Das oder das? Ich bin mir übrigens bei der Sündachs nicht ganz
sicher, aber mehr oder weniger so sieht das in C++ aus. Ja, mein Beileid, mein Beileid.
Na gut, in Link ist das auch relativ einfach. In Link könnte ich sagen, select, aber da
kriege ich halt eine neue Liste. Ich könnte sagen, select alles, was nicht 5 ist, könnte
ich zum Beispiel machen. Sowas könnte ich machen mit Link. Buhl? Wait a minute, bin
ich jetzt... Ach nee, where? Where? Nicht select. Cack wait. Ja. Genau, ich meine, das
könnte ich auch machen. Wobei, dass das cooler ist, weil das direkt auf der Liste operated,
die ich hier habe. Aber es ist auf jeden Fall alles und es ist alles mal besser als das.
Moin. QP, Face Ante QP. Excellent. Oh, Massive, Massive eigene Emotes hier. So, guck mal
den Kram mal weiter. Okay, Demo ist fertig. Ich glaube, wir können den Rest... Alter,
jetzt macht er einen Krach. HC++, eigentlich sowas wie Yield. Ja, aber...
Okay, ich erkläre beides. Also, erstmal dazu was gesagt. C++ hat mittlerweile sowas. C
Sharp hat zwei Sachen. C Sharp hat Yield und Async und das Asynchron, beides. Und C++
hat ein ganz krudes Iterator Pattern, was ich bis heute nicht gecheckt habe. Aber, jetzt
kommt der Hit. C++20 hat Coroutines mit Yield. Aber, aber, jetzt kommt der Hit. Keiner der
eingebauten Sachen im Standard Framework hat das. Also, es ist total wir. Also, die haben
quasi was eingebaut, was du gar nicht direkt verwenden kannst. Es ist C++. So. Was programmierst
du? Wir gucken uns die neuen Sachen von.NET 6 an. Ich meine, guckt euch diese hässliche
Geschichte hier schon mal an. Und... Genau. Der Witz ist, dass es ist nichts implementiert
in der Standard Library von C++, was das kann. Also, es ist einfach wieder C++. Man muss
es nicht verstehen. Oh, was kommt denn da jetzt? Was ist das hier? Was ist das? Das
sieht cool aus. Oh, das probieren wir aus. Das probieren wir gleich aus. Muss man aufschreiben.
Minimal Web API. Das ist cool. Wisst ihr wofür das cool ist? Wenn ich einfach eine Web...
Mal genommen, ich habe eine Konsolenanwendung gemacht. Oder irgendwas und will einfach
nur... Keine Ahnung. Trigger meine Anwendung über irgendwie einen Webrequest. Das heißt,
ich brauche kein komplettes ASP.NET Core Projekt, sondern kann das einfach überall
reinhauen. Das probieren wir gleich aus. Da bin ich gespannt. Und das ist ein bisschen
so wie... Ja, genau. So ein bisschen wie Flask oder Express oder ich würde sagen Sinatra
so als alter Ruby Fan. Kannst du bei dem Parameter angeben... Das hängt davon ab, wie MapGet
definiert ist. Übrigens, ich wollte noch eine andere Sache beantworten. Habe ich ja
ganz vergessen. Ich habe gesagt, ich beantworte beides. Und zwar wollte ich noch beantworten,
was macht Yield? Okay, das ist ein bisschen schwieriger zu erklären. Yield ist eine
Möglichkeit, einen Iterator zu programmieren. Also mal angenommen... Oh fuck, wie erkläre
ich das jetzt? Wie erkläre ich das? Also mal angenommen, du hast eine Methode, die unendlich
viele Zeichen generiert. Also zum Beispiel... Wir machen das jetzt einfach mal. Void Generate.
Jo, immer. Also wir haben eine Methode, die unendlich viele Inns generiert. Und das macht
die folgendermaßen... Oder was heißt unendlich? Okay, wir nehmen es wörtlich. Wir haben eine
Methode, die unendlich viele Inns generiert. Return... Keine Ahnung, hier. Count gleich
null. Return count plus plus. So. Jetzt... Ach so, ja, Moment, das funktioniert ja noch
nicht. Ja, klar. Aber worauf ich raus will. Also du hast eine Methode, die unendlich viele
Inns zurückgibt. Jetzt hast du das Problem, wenn du die aufrufst, wäre das ja eine Endlosschleife.
Und du willst zwar potenziell unendlich viele Inns haben, aber die willst du ja nicht auf
einmal. Du willst immer ein Int, ein Int auf einmal haben. So und dann sagst du einfach
Yield Return. Und dann machts das. Yield Return ist, du rufst Generate auf. Du runnst bis
zum ersten Return und machst weiter. So und wer mir jetzt nicht glaubt, dass das funktioniert,
ich zeig's euch. Ja, Generate. Wo ist mein Terminal? Terminal? Die Terminal ist off.
Dann mach ich halt so ein Terminal auf. Rider. Wie heißt das Ding? Console App. Console
App zwei. Console App zwei. Dot net run. So. Genau. So. I. Okay, das ist jetzt ein doofes
Beispiel. Aber Moment, ich zeig dir, ich zeig dir, dass es funktioniert. Wir machen das
ganz, wir machen das ganz einfach. Return Count oder Print Count. So. Moment, hab ich
was falsch gemacht, Leute? Hab ich was falsch gemacht? Du returns in der Schleife, das ist
okay. Hab ich was falsch gemacht? Moment. Nein, nein, nein, ich muss nicht Yield, ich
muss Yield Return machen. Ah. Muss ich das so machen? Nee, oder? So muss ich das machen,
oder? Ah, ja, ja, okay, jetzt kommen wir da schon näher. Okay. Okay, das, das, das, so
würde das, so würde das funktionieren. Ähm, ja. Äh, wie gesagt, man sieht, ich verwende
das nicht allzu oft. Aber ich könnte wahrscheinlich sowas hier machen. Und jetzt Value oder sowas,
Current. Nee, Toolist kann ich nicht machen, wenn ich Toolist machen würde, wäre ja eine
Endlosschleife. So, guck, und du siehst jetzt, ich ruf das hier drei, viermal auf. Und da,
ne, das funktioniert so nicht. Okay, Leute, ich bin lost. Ach, Quatsch, natürlich, ich
bin richtig lost. Ist ja Schwachsinn, was ich machen würde. Ich muss mir den Iterator speichern.
Mega lost. E, Current, Saw, und jetzt muss ich immer sagen Next dazwischen. Ja, genau.
Ja, wenn ich das so richtig schreiben könnte. So. Jetzt funktioniert's. Okay, alles klar.
Also sprich, ähm, Moment. Ach so, ja, gut. Oder eine For Each. Ja, mit For Each hatte
ich's ja eben schon. Aber ich wollte halt auch zeigen, dass es einzeln funktioniert.
Also sprich, du hast ja eigentlich eine Endlosschleife, aber du kannst trotzdem reingehen, laufen
lassen bis zum ersten Yield-Return und dann weitermachen mit deinem normalen Programm.
So, aber, wohlgemerkt, das ist alles synchron. Ähm, wenn du hier drin asynchronen Kram machen
willst, wird's ein bisschen schwieriger, aber mittlerweile, und dann, wie sieht man
wir über ein Thema, die.NET-Leute machen sinnvolle Sachen. Es gibt ein I async enumerable
int. So, dann kann ich das async machen. Oder auch nicht. Moment, async muss vorne hin.
Dann kann ich das async machen und es funktioniert trotzdem. So, jetzt funktioniert es natürlich
nicht mehr auf die synchrone Art und Weise. Jetzt kann ich ne Vorschleife machen da drüber
und sage, ähm, what, das machen wir weg. Generate. Äh, und jetzt muss ich Await sagen. Await.
Ne, Moment, oh, wie war das jetzt nochmal? Äh, Await hier vor? Ne. Ach ne, Await muss
vorne hin, ne? Ah, so muss das. So war das. Ja, das, ähm, genau. Und jetzt kann man das
asynchronen machen. Wenn ich hier drin jetzt asynchronen irgendwas aufrufen will, dann
funktioniert das. Also mal angenommen, ich mach hier ne HTTP-Request drinnen und dann
mach ich ne Yield-Return. Dann würde das jetzt folgendermaßen funktionieren. Der geht hier
rein, macht ne, macht, fängt mit an mit der Schleife zu laufen, dann macht er den Web-Request,
das ist asynchronen, dann springt er wieder raus, wartet, bis der, also macht im aufrufenden
Thread weiter, ähm, wartet, bis der HTTP-Request fertig ist, dann returnt er das und dann läuft
die Schleife einmal durch. Das ist richtig big brain, ja. Also ich könnte genau, sowas
hier könnte ich machen hier. Genau. Await, Task, Delay, eine Sekunde. Sowas könnte ich
machen. So. Und jetzt ist das komplett asynchron, was heißt, ähm, hätte ich da jetzt ne GUI
so in dem das läuft, dann würde das GUI auch nicht blocken. Das ist richtig cool. So und
sowas in C++ zu machen ist cancer pur und macht keiner freiwillig. So, das ist, das
ist, was Yield macht. Chat, heute ist richtig, müsst ihr zugeben, heute ist richtig educational
Content, oder? Aber asynch wird immer noch alles auf einem Thread ausgeführt. Ne, nicht
unbedingt. Das entscheidet sich, das kann sein, dass ich da jetzt falsch liege, aber
ich glaube, das stimmt, was ich sag. Äh, das entscheidet sich an dieser Stelle, was
passiert. Also, das asynch hier oben sagt ja nur erstmal, dass ich so Sachen wie Await
hier drin verwenden darf. So. Und hier an der Stelle wird entschieden, ob das ein extra
Thread gibt oder ob das AsyncIO was auch immer macht. Da müsste ich mir jetzt mal ein bisschen
tiefgreifender Gedanken machen, aber letztendlich der auf, der Code, der hier aufgerufen wird,
entscheidet, wie es das Asynchrone umsetzt. Das kann ein extra Thread sein. Das kann wahrscheinlich
irgendwie ein Value-Task sein. Fragt mich nicht. Es ist nicht so, das ist nicht so easy
an der Stelle. Es entscheidet sich aber zumindest hier, was das ist. Und ich geh mal davon aus,
dass Task Delay wahrscheinlich ein eigener Thread ist, im Threadpool, der dann einfach
dort wartet. Ich hab keine Ahnung. Ich hab keine Ahnung, ehrlich gesagt. Es gibt ja
auch, man kann ja auch noch hier auswählen, das kommt ja auch noch dazu, man kann ihm
sagen, an der Stelle, ob man, Moment. Nee, das will ich gar nicht machen. Man kann ihm
auch sagen, ähm, sprich, ob man sich merken will, aus welchem Thread man aufruft, aufgerufen
wird oder nicht. Und das ist wirklich, das ist dann richtig Big Brain Geschichte. Das
Gute ist, und das ist auch wieder ein Vorteil, wie sie das gemacht haben in.NET, meistens
braucht man diesen ganzen Krempel, nicht? Und es ist alles relativ selbst erklären,
aber wenn man was einstellen muss, dann kann man's machen. Also, Configure Await brauchst
du zum Beispiel, wenn du in der GUI-Anwendung bist und vermeiden willst, dass du dich irgendwie
in manchen Edge-Cases deadlockst selber, dann manchmal braucht man das. Aber wisst ihr,
wann ich das verwende? Ich verwende das immer dann, wenn ich danach gegoogelt hab, weil
ich ein Problem hab und Stack Overflow sagt, ich soll das verwenden. Ganz einfach, so wie
es jeder macht. Wenn Stack Overflow sagt, das ist richtig, dann muss das stimmen. So,
no repeat, mein. Okay, die Demo will ich mir noch angucken, das sieht wirklich nice aus,
das probieren wir auch gleich aus. Das ist wirklich cool, das gefällt mir, das ist das
erste, was wir gleich ausprobieren. By the way, werden wir das wieder gucken, ich installier
hier schon mal, ich installier hier schon mal die Visual Studio, test was. Wait a minute,
wo ist meine VM? Wie hier? Sign in, jawoll, okay. Download Visual Studio, geh weg Microsoft,
geh weg. Download Visual Studio Preview, Snapshot der Windows VM. Ja, excellent, big brain chat.
Das ist auch noch Bing standardmäßig, ja. Download.NET 6 Preview, das geht schnell,
aber Visual Studio Preview muss ich jetzt anschmeißen, das dauert immer lang. Bringen
den Chat back, wir sind nicht fertig mit Videokucken. Was? Ja, continue. Download.NET 6, Visual
Studio. Ach guck mal, man kann, wait a minute, man kann 16. Warte mal, ich kann das, ich
brauch gar kein Visual Studio Preview. Visual Studio, download, ich kann die normale 6.11,
16.11 verwenden. Guck mal da. Wait a minute, wo ist es denn? Ermächtigen, ermächtigen?
Wer ermächtigt denn da irgendjemand? Sag mal, warum findet fucking Bing nicht mal Visual
Studio Download selbst? 16.9, okay, ja. Doch, ich muss doch Preview runterladen. Ja, was
denn jetzt? Ist es jetzt Preview oder nicht? Check's nicht. 16.11 Preview, okay, dann habe
ich doch richtig gemacht. Also doch den hier. Yes, yes. Brauchst du nicht einfach nur das
neue SDK? Das brauche ich auch, aber ich brauche erstmal Visual Studio, was das neue Zeug
kann. Äh, ja, ja, macht hier mal. Äh, wo ist hier Desktop Development C Sharp? 9G,
ich wollte mich veräppeln. Moment, wo war denn der Kram jetzt hier nochmal? Oder ist
nicht denn hier den, na komm, machen wir den.NET Desktop Workload. Äh, ich mach den da,
ja. Ist, meinst du, es ist standardmäßig drin? Individual Components. Man muss kein
.NET Workload mehr installieren. Schau mal, wie lange ich den Kram schon immer installiert
habe. Ne, standardmäßig ist da glaube ich auch gar nicht, gar nix drin. Weißt du was,
ich installiere jetzt einfach das hier und gut, da ist, da ist auf jeden Fall alles dabei.
So, es geht schnell. Da können wir jetzt nämlich noch den Kram, ja, guck mal, das interessiert
mich wirklich, was da passiert. Das erinnert mich wirklich an Sinatra
aus Ruby. Das probiere ich mal gleich aus. 24 MB in die Sekunde, das flutscht Leute, das
flutscht. Steffen, nicht Steven, Steffen. Okay, das ist, ah, hier geht's los.
Warum ist das so klein? Whyte theme, whyte theme, Leute, warum whyte theme, Alter? Warum
haben die alle light theme? Warum, warum? Ich sehe nix. Flashbang. Okay, das ist echt
cool. Das finde ich nice. So, was hat denn der jetzt da installiert? Was mich jetzt interessieren
würde, ist das ein Webprojekt oder kann es auch eine Konsolenanwendung sein?
Weil, wenn es schon eine Webanwendung sein muss, dann ist es fail. Ich glaube, das ist,
ich glaube, das ist eine Webanwendung. Okay, hier können wir durchskippen, das müssen
wir uns dann angucken. Oh nein, das hat noch nie jemand programmiert. Das ist JavaScript
jetzt, oder? Ah, das ist jetzt JavaScript. Warum? Kegwayt, was hat es damit zu tun? Ach,
ich glaube, der will einfach nur zeigen, wie ähnlich das zu JavaScript aussieht. Ach,
der hat, guck, der hat es jetzt nachprogrammiert. Okay, okay, das ist jetzt die.NET-Variante
davon. Also, das heißt, das ist, das ist, glaube ich, ein Webprojekt. Das ist fail,
weil man das nicht einfach in einer Konsolenanwendung machen kann. Okay, das sieht irgendwie hässlich
aus. Ich kann mir da nicht helfen, aber irgendwie sieht das Paynes-Champ aus. Gerade so was
hier. Wir probieren das gleich mal aus. Azure haben sie es deployed. Okay, das interessiert
mich nicht. Das ist für mich keine Großplattform, wenn er Linux fehlt. Das interessiert mich
nicht. Hey, krasser Dude, der hat mal ein gescheites Setup. Guckt euch, okay, er hat
Light-Theme, ja, das ist schon mal fail. Aber guckt euch mal an, der hat ein gescheites
Mikro. Der macht Livestreams, Leute. Wenn der Typ macht Livestreams normalerweise, wir
gucken mal, wie der heißt. David Ortinau, okay. Ortinau. Ist der das? Twitter, YouTube,
ah, okay, er macht Livestreams vielleicht. Ich habe jetzt eigentlich gedacht, dass der
auch auf Twitch ist. Sag ich doch, der Dude Livestreamt, bei dem Setup. Ich sag doch,
der Typ Livestreamt, das sieht man sofort. Ja, das erkennst du sofort am Setup, ob der
Typ Livestreams macht oder nicht. So, das interessiert mich aber trotzdem nicht. Der
hat ein gutes Setup, aber ja, das interessiert mich nicht. Ja, Mobile Apps, Stellskram. So,
was haben wir jetzt? Blazer Features jucken mich auch nicht. Das ist auch Blazer, juckt
mich null. Warum machen die immer Wetter-Apps? Das ist immer noch Blazer. So, Paints-Champ.
Fluent Tree-Item. Meine Güte. Nee, nee, nee, nee. Was ist so schlimm an JavaScript im Frontend?
Ich weiß es nicht. Okay, jetzt kriegen wir Minimal APIs nochmal gezeigt, das haben wir
ja gerade schon gesehen. Was hat der hier? Oh, jetzt macht er Huge Benchmarks. Jetzt
zeigt er uns seine krassen Benchmarks. Anzeige ist raus. Die Hälfte. Also, wäre schon immer
mal nur ein 5-Euro-Server wollte bei 10.000 Web-Socket-Verbindungen. Easy.net 6. Blazer?
Leute, ist irgendjemand von euch besonders scharf auf Blazer? Ich fand's am Anfang mal geil,
die Idee, sie scharf im Browser programmieren zu können, aber als ich das mal ausprobiert
habe, die Web-Assembly-Variante, ist mir aufgefallen, du brauchst eh nach wie vor JavaScript. Spätestens
wenn du Sachen machen willst, die halt so Interaktionen brauchen von Hand irgendwie Dom-Geschichten
und ganz ehrlich, so schlimm finde ich JavaScript gar nicht. Also vor allem mit Vue.js oder
sowas zusammen ist es schon in Ordnung. Ich kann Rider das nicht? Developer Productivity,
ok, Build-Time-Performance ist immer gut. Blazer-Server juckt mich so gar nicht. Was zeigt der uns
jetzt? Hot-Reload juckt mich auch nicht. Was ist eigentlich aus dem Samarin-Monotyp geworden,
dem Spanier? Ist der nicht mal bei Microsoft? Die haben den eingekauft und haben dann gesagt,
hau ab. So, ml.net, ja gut. Gut, sind wir durch. Interessant, also das mit der Web-App hier
war eine coole Sache, das gucken wir uns jetzt gleich an. No account, nein ich hab kein Account,
maybe later. Color Scheme, natürlich Dark. Start, starte das verdammte Spiel. Wieso der
Blazer-Server, hey du gar nicht. Ich verstehe den Vorteil bloß nicht. Doch ich verstehe
den Vorteil, insofern wenn man viel sharen will zwischen Backend und Frontend an die Sharp-Klassen
oder so. Aber ansonsten, weiß nicht. Du mein, du musst jegliche Frontend-Änderung über
irgendeine Websocket-Verbindung schicken, das ist allein schon vom Design her irgendwie
weiß nicht fragwürdig. So, also, ach wir müssen das.net-Framework noch installieren.
Noch mal zumachen. Funktioniert vor allem auf Fullscreen auch mit mehreren Monitoren,
da das funktioniert. Was dann bloß ganz gut ist, wenn man Exclusive-Mode anmacht, dass
man hier nicht irgendwelche GUI-Einblendungen bekommt. Also, Windows-Installer x86 x64.
Let's go. Warum startet Microsoft eigentlich immer mit Punkt 100 hinten? Das ist ja laut
Versionen quasi die Hotfix-Nummer. Die werden ja wohl kaum bei 100 Hotfixes sein schon.
So, Installer, Windows, ja. Gut, jetzt können wir Visual Studio aufmachen, denke ich. Jeder
kommt eine neue Version, ne, glaube ich nicht. Dann wäre 100 ziemlich glatt, das wird dann
eher so aussehen hier. Auf installieren. Meinung zu WinGet 1.0, ich hab's noch nicht
ausprobiert. Ich habe aber meine Zweifel, dass es was taugt, weil es wohl Software nur
unter gewissen Umständen deinstallieren kann. Also, wenn es das passende Package-Format
irgendwie hat. Naja. Ich werde es mir aber auf jeden Fall anschauen in den nächsten
Streams. So, also, continue without code. Ich will create new project machen. So, jetzt
geht's mir. Jetzt müssen wir mal schauen, ob Minimal API, ob das da irgendwie drin steht.
Mini? Nein. Visual Basic Console Application. Nein, nein, nein, nein, nein, nein. Machen
wir nicht, wir haben eine Console Application. Warum steht da überhaupt noch.NET Core
drin? Da müsste da nicht einfach nur.NET drinstehen. Die sind selbst inkonsequent bei
ihrer Benahmung. Console Applications. Next. Target Framework 6.0 Preview. Ach, muss man
das über die Kommandozeile erstellen? Ja, Moment, ich würde das aber gerne, ich würde
das aber gerne über unserer Console Anwendung raus erstellen. Also. Download Chrome. Das
muss jetzt mal sein. Ich kriege Anfälle, wenn ich umso länger den Müll hier verwenden
muss. Ich, dass ich Chrome jetzt irgendwie super hypen will, aber Edge ist einfach Paintschamp,
Alter. Eigentlich muss ich Firefox installieren. Naja, egal. Ich muss jetzt nicht ranten über
Firefox. Ich verwende ja Firefox immer noch als Main Browser. Aber sie sorgen schon hart
dafür, dass ich das nicht mehr machen will. Die letzten Versionen, die letzten zwei Jahre.
Installing. Ja, mach. Was stört sich an Firefox denn zum Beispiel, dass das UI so nach Tablet
Bedienung aussieht mittlerweile? Was war an diesen Menüs so schlimm? Also Google. Naja,
Stimme zu. Dotnet 6 Minimal API. Das da? Block. Na, jetzt habe ich den lau gemacht. Wartet
mal, ich habe mir doch irgendwo einen Block Beitrag kopiert für Minimal API. Ja. Also
Introducing Minimal API. To try out create a Minimal API. Aber muss das wohl damit machen?
Aber Moment, kann ich das nicht einfach so so inkluden? Weil das wenn ich was das für
eine Minischrift wenn ich das natürlich extra. In der Web Anwendung machen wusste, da kann
ich auch gleich eine Minimal Web Web API Asp.net Core Applikation machen. Web Applikation.
Nee, gibt's nicht. Ja, das ist ja dumm. Das ist ja dumm. Okay, dann probieren wir das jetzt
noch mal aus. Dotnet. New. Web. Ja, das ist ja dumm. Dann ist es schon dann ist es schon
noch mal halb so geil. In die API. So, noch mal öffnen wir das mal. Ja, wir gucken gleich
mal. Also das müsste also wenn das nicht in der Console Applikation läuft, ist es dumm,
weil du fängst meistens mit einer Console Applikation an und sagst, na okay, lass es
doch einfach mal Endlosschleife laufen und triggern über ein Web Request oder sowas.
Bescheuers. Ich fange ja bestimmt nicht standardmäßig mit einem Mini API Projekt an. Okay, Open
Open Solution. X to Solution. Wo habe ich das jetzt erstellt da? Mini App. Genau, man
muss nämlich dann das ASP.NET SDK im Projekt file erweitern. Genau, was ich doof finde,
das nervt mich eh schon, dass es unterschiedliche Projekte sind. Typen. So, was haben wir denn
hier? Alter, die Preview-Version ist laggy as fuck. Geht das hier schon? What the f...
Okay. Wow. Restart. Kacken und waiten. Genau. Okay, nochmal. Okay, ich bin jetzt schon mal
da. Nochmal. Erstmal direkt ragen auf GitHub. Ist Visual Studio immer so laggy? Nee. Erstens
ist das eine VM und zweitens ist das eine Preview-Version. Ich finde Visual Studio läuft durchaus
in Ordnung. Aber ich muss dir auch ehrlich sagen, großen Unterschied zu JetBrains erkenne
ich nicht. JetBrains ist auch laggy. Geht das jetzt? Warum markiert er das? Warum ist
das grün? Ah, okay. Okay, es ist wieder kaputt, RIP. Ich fürchte, mit angucken wird es so nichts,
aber es ist wieder kaputt. Ja gut, Eclipse ist ja kein Vergleich. Eclipse ist ja... Es
ist halt Eclipse. Ich habe Eclipse zuletzt verwendet in meiner Ausbildung 2007. Kein
Witz, danach hat es das nie wieder auf. Will ich auch gar nicht. Echt, ich habe da überhaupt
keinen Bedarf für. Ja, was mache ich denn jetzt, wenn Visual Studio crashet? Haben
die deswegen Light-Theme? Ist das Dark-Theme kaputt? Moment, das müssen wir jetzt überprüfen.
Wartet mal, wir stellen mal um auf Light-Theme. Continue without code, okay. Wo stellt man
das um? Ah, hier. Light, Achtung Leute, Augen zu. Okay, es ist... Hast du in Visual Studio
auch das Web-Entwicklungs-Dings installiert? Nee, ich habe den Desktop-Workload installiert,
aber das ist jetzt dafür egal. Was macht das da? Warum highlightet es das da immer?
Kann ich das jetzt ausführen? Jaja, machen wir... Ja, wir trusten alles, gar kein Thema.
Okay, das scheint jetzt zu funktionieren mit Light-Theme. Mal gucken, ob ich auch im Editor
etwas anklicken kann. Wäre es denn, dass es wieder abkackt, wenn ich hier reinklicke
und das zu mache? Ja, es ist wieder abgekackt. Forever next, danke schön für die Zeit.
Leute, wir können es nicht angucken, es ist kaputt, es ist broken. Super, perfekt. Tja,
das war jetzt natürlich nicht so dolle. Ryder? Nein, Ryder kann ich wohl noch schlechter
verwenden. Ryder hat ja gar keinen Support für experimentelles Zeug. Ich muss aber mal
was gucken. Meinetwegen mit Notepad ist mir egal. SDK? Guck, es muss Microsoft-Net SDK-Web
sein. Das ist ziemlich dumm. Da kann ich nicht einfach mit einer Konsolenanwendung starten
und Minimal-API machen. Auf der anderen Seite, was spricht dagegen, eine Minimal-API mit
Konsole zu machen? Eigentlich auch nichts. Echt? Aber Ryder sollte doch überhaupt keine
experimentellen Funktionen davon drin haben. Okay, wir downloaden Ryder, gibt's ja. Testversion,
runterladen. Kann man das auch auf Englisch machen? Englisch blitz? Ja? Ah nee, continue
muss ich machen. Download. Mach. Es hat manchmal doch seinen Vorteil, halbwegs schnelle Leitung
zu haben. Ich agree zu allem JetBrains, ist gut. Detekte der D6er Preview-Version? Müssen
wir mal schauen. Also installieren wir Ryder, probieren das damit aus, ob es besser funktioniert.
Next. Next. 466 Bitlauncher? Keine Ahnung. Ja? Nein? Ich weiß es nicht, ich lasse alles.
Was ist denn der JetBrains EET-EETW-Service? Updates? Oder was ist das? Was ist EETW?
Advanced Excellent Technology. Keine Ahnung, was EETW ist. Massive Speed. Residenz Leaper.
Ach, wie schön es ist, das Unterwindhaus auf Installer zu warten. Düdü. So viele Java
Sachen, die man entpacken muss für eine.NET Entwicklungsumgebung. Schneller als Azure
SSDs, ja, das ist auch keine Kunst. Vor allem bei vielen kleinen Dateien. Naja, es ist in
der VM, aber ich meine, das ist auf einer SSD, ne? Also das ist jetzt nicht so, dass
es IO-technisch irgendwie super schlecht Performance hätte. Die VM ist auch gut ausgestattet. Guckt
euch das mal an, ich meine, die ist... Die hat 8G RAM und 4 CPU Kerne, das sollte reichen.
Run JetBrains Rider. Dann reiten wir mal los. So, startet es jetzt? Oder hat es keinen...
Hat sich doch gedacht, kein Bock. Ah, jetzt. Nonsent. Dark, Nexts, Virtual Studio Dark,
Nexts, Nexts. Ach guck mal, er erkennt es tatsächlich cool. Nexts, Nexts, Nexts. Ja,
das ist äußerst nice. Da kann man nur sagen, dass er das automatisch erkennt. Da ist hier
Hut ab. Hätte ich nicht gedacht. Ansonsten sind sie immer was Preview-Versionen und vor
allem Preview- also Language-Features angeht, sind, wobei die haben wir jetzt ja hier nicht,
sind sie immer relativ zurückhaltend. So. Wisst ihr, was mich auch immer richtig triggert
bei Windows? Dass mein Heimatverzeichnis nicht in Quick Access drin ist. Jaja, ich
truste Microsoft natürlich. Ihr nicht? So, mal schauen, ob es in Rider funktioniert.
PauseChamp. PauseChamp. Mal groß machen. Okay, Rider funktioniert. Schonmal geil.
Windows Defender, Windows Defender, fuck mich schnell ab, Alter. Jaja, mach mal. Der Elevator,
der fährt uns jetzt hoch. Ihr müsst euch mal vorstellen, wie viele Hex die da einbauen
müssen. Hex für Windows, Hex für Linux, Hex für Mac. So, das ist wohl anscheinend
jetzt die Standardgeschichte. Das heißt, wenn ich das jetzt runne,.net run, dann läuft
hier auf Local Host Port 5000 ein Hello World. Okay, nice. Das ist schon cool, wie kurz und
knackig das ist. Da kann man sich wirklich nicht beschweren. Was mich jetzt natürlich
noch interessieren würde, ist... Also, es spricht doch eigentlich überhaupt nichts
dagegen, meine nächste Konsolenanwendung einfach, anstatt eine Console-Application, einfach
eine Minimal-AP-Application zu machen. Oh nein, IP-Leak. Can I also jetzt hier auch
sagen, App, use RTTPS Redirection? Nee, macht er ja schon. Wollte das eigentlich disablen?
Weiß gar nicht, wie das geht. Ach, hier hat man diesen Kram. App-Settings, Launch-Settings.
Ja, nice. Aber das heißt, ich kann theoretisch den Kram hier nehmen. Das hier ist mein Main.
Warte mal, await, up. Moment, wenn ich jetzt parallel dazu was machen will, dann kann ich
das jetzt nicht einfach starten. Wenn ich hier was mach, dann führte das ja nie aus. Weil
da wartet ja hier, bis das beendet ist. Geht das gleiche auch auf Linux? Ja, ja. Das müssen
wir nicht aufbauen, dass das geht. Das geht, auf jeden Fall. Das heißt, wenn ich jetzt
mal angenommen, ich hab jetzt eine Konsolenanwendung oder noch, machen wir es doch mal umgedreht.
Machen wir es doch mal umgedreht. Ich nehme dieses ganze Ding hier. Das müsste doch eigentlich
funktionieren. Also das hier ist mein Main. Wir machen jetzt mal eine extra Datei. Probieren
wir das mal aus. Add New File, Server, CS. So, dann kopieren wir den ganzen Crap hier
rein. Äh, ja gut, das machen wir vielleicht nicht hier. Keine Ahnung, machen wir hier
mal. Public Async Task Run. Wo kommen denn die Arcs her? Wo kommt denn das her? Ach,
das ist Standard, das ist Main. Ah, ja, ja. Äh, Arcs ist ein String Array, glaubt ne?
Ok, das heißt, wir können jetzt im Endeffekt sowas hier machen. Task Run. Hallo? Task?
Task Run? Äh, ups. Nein, was mach ich denn da? Server? Irgendwie sowas, machen wir Static.
Run? Arcs. So. Sowas hier in die Richtung muss ich schon machen. So, und jetzt könnte
ich hier mal eine Konsolenanwendung programmieren. Wenn ich das so richtig sehe, ne? Dann würde
ich einfach hier den Server starten. Async. Und hier unten könnte ich jetzt meine Konsolenanwendung
machen. Ah, ja gut, ne. Ich muss hier unten dann warten drauf. Aber von der Idee her funktioniert
das, ja. Von der Idee her funktioniert das. Vielleicht will ich da auch gar nicht drauf
warten und will das bloß so lange laufen haben, bis meine Konsolenanwendung fertig
ist. Ne, ansonsten müsste ich halt irgendwie sowas hier sagen. Konnte man nicht irgendwie...
Ach ne, Moment, das war Using. Ne, jetzt wieder was anderes. Kann man, kann man ein Task Using
machen? Ernsthaft? Ne, oder? Das hätte mich jetzt auch schon, das hätte mich jetzt stark
gewundert, Alter, wenn das so funktioniert. Wobei doch, das funktioniert. Aber der wollte
den ich disposen, weil der noch runnt. Ja, sowas müsste ich jetzt hier machen, quasi.
Genau. Das ist tatsächlich äußerst nice, muss ich sagen. Jetzt kann ich hier meinen
Konsolen-Shit machen. Was auch immer ich da machen will. Und nebenbei habe ich einen Web-Server
laufen, wo ich dann beispielsweise irgendwelche Requests draus bekommen kann. Ich finde das,
ich finde das cool. Vor allem ist das halt wirklich übersichtlich, ne? Im Vergleich
zu einem kompletten ASP.NET Core Projekt ist das hier halt nix. Und ihr müsst zugeben,
das hier sieht ziemlich nach irgendeiner Express.js oder irgendwie Sinatra, Flask, was auch immer,
so ein minimalen Web-Server-Ding aus. Der ist schon nice. Das gefällt mir, das hat was.
So, und jetzt kann ich hier meinen Konsolen-Anwendung-Shit machen. Und selbst wenn ich einen Endlosschleifer
fabriziere in meiner Konsolen-Anwendung, so richtig mit blocken, nicht mit Asyncrate,
also richtig blocken, sekundenweise sollte eigentlich doch mein Web-Server immer noch
weiterlaufen, weil er in einem separaten Thread läuft. Guck, funktioniert. Ist cool, ist cool.
Ich progge es, gefällt mir. Leute, ich muss mal kurz Licht anschalten, muss ich mal kurz
in meine Heimautomatisierung gehen auf den zweiten Bildschirm. Fenster, Decke, ja Licht
an. Ja, nice, also das finde ich cool. Das soll uns auf jeden Fall da lassen. Licht an, Flashbang.
Wie könnte man das jetzt cancelen? Ach nee, Moment, ich muss die Schleife hier cancelen,
das ist ja woran, wo es wirklich hängt. Sehr gut, gefällt mir, nice. Jetzt nicht unbedingt
zu das Killer-Feature, wo ich gesagt habe, das hätte ich schon immer gebraucht, aber
das finde ich cool, weil es kommt doch total oft vor, dass man sagt, hey ich probiere mal
was aus, da machst du eine Konsolen-Anwendung mit irgendwie zwanzig Zeilen, das funktioniert
und dann, keine Ahnung, guckst du ob du die Daten nicht irgendwie abgerufen kriegst, irgendwas,
es ist auf jeden Fall nice, dass man easy eine Web-AP adden kann. Ja, Moment, könnte ich
das jetzt auch, Moment, könnte ich das jetzt auch aus einer Windows-Forms-Anwendung machen?
Geht das Ganze auf Linux via.NET Core? Ja. Mal angenommen, ich möchte jetzt eine Web-Anwendung,
eine Windows-Forms-Anwendung machen, die einen Web-Server laufen hat. Das geht nicht, ne?
Kann ich eine Forms adden hier? Ich glaube nicht. Ich weiß nicht wie. Kann man mit Rider
eine Windows-Forms-Anwendung machen? Könnte nur gehen, wenn Pandora... Hat sogar Designer
Poggers. Warum empty solution? Er singt, was auch immer er sich singt. Könnte ich jetzt
hier sowas sagen? Wie geht denn das mit Windows-Forms, Alter? Application? Ne, da muss ich erstmal
die Referenz hinzufügen. Fuck, wie geht denn das jetzt? Ich hab keine Ahnung. Forms? Wie
funktioniert das? Was brauche ich für Packages für Windows-Forms? Das SDK muss das Richtige
sein. Ja, aber das ist dumm, wenn ich das SDK umstellen muss. Ich brauche ja das Web-SDK,
das die Minimal-API machen kann. Okay, wir machen eine neue Windows-Forms..NET,.NET,
was gibt's denn da? New? WinForms. WinForms-O. Forms. Excellent. Forms. Alter, wir sind ja
unter Windows. Open. Forms. Trust. New Window. So, jetzt mach hinne. Oh, die haben echt einen
Designer in Rider? Ich muss euch ehrlich sagen, ich hab Rider unter Windows noch nie verwendet
und schon gar nicht für Windows-Forms gedönnt. Form 1. Ne, die haben keinen Designer. Ach
doch, Open Designer. Guckt euch das mal. Exclude directory ist alles weg. Project Reference
are missing. Okay, ich glaube, das funktioniert nicht so ganz, wie man sich das vorstellt.
Oder? Pausierungs-Champ. Guckt da. Sogar mit Windows-Forms-Designer. Windows-Forms in all
seine Hässlichkeit. Okay, was muss man hier alles für Usings einbinden und Packages? Das
probiere ich jetzt aus. Using System Windows-Forms. Exquisite. Das brauchen wir jetzt. Probieren
wir jetzt, das andere einzubinden. Windows-Forms gibt's nicht. No. Wie, wie, wie, wie? Ja,
da muss ich echt das SDK umstellen. Aber wenn ich das SDK umstelle, dann gibt's Windows-Forms
nicht mehr. Wenn Windows-Forms trotzdem läuft, muss ich das aber im Nachhinein hinkriegen.
Wartet mal. Unload? Unload? Wie editiere ich hier edit? Ah, hier. Microsoft.net SDK. Brauche
Windows-Forms-True. Kann ich das beim anderen auch einfach reinschreiben? Hack-Wait. Moment.
Kann ich das beim anderen auch einfach reinschreiben? Jetzt wird's, jetzt wird's echt Hack-Hack-Hack-Hacker-Mans.
Unload? Geht das? Using by including Windows? Target Platform must be set to Windows. Was?
Oh. Jetzt hab ich's, jetzt hab ich's ge, ge, ge, gebraked, Alter. Jetzt hab ich's gebraked.
Okay, dann unloaden wir das jetzt nochmal. Wo ist denn dieser Unload-Knopf? Das ist so
klein hier. Und machen einfach das da in das andere rein und gucken dann, ob's funktioniert.
So. Reload. Okay, das funktioniert jetzt noch. Okay, warum auch immer. So, das heißt, ich
kann jetzt einfach den Kram rüber kopieren. What the fuck? Jaja, ich bin noch wach, warum
nicht? Das heißt, ich kann den ganzen Mist hier einfach rüber kopieren. Das sollte jetzt
funktionieren, oder wie? Da bin ich jetzt mal gespannt. Ah, HTML, wait. Ja, anscheinend
funktioniert das tatsächlich. Anscheinend geht das. Na gut, jetzt hab ich ja halt mein
Main, aber ist doch egal. Anscheinend funktioniert das wirklich. Ja, anscheinend geht das echt.
Ach so, Moment, wenn ich jetzt Wild True mache, starten natürlich das Windows nicht, das ist
ja logisch. Lul. Ähm, also klar. Das klappt echt? Das klappt? Ich hab ne Windows Forms-Anwendung
mit dem Webseuer laufen im Hintergrund. Ja, das ist cool. Ja, das ist wirklich nice. Das
ist wirklich nice. Wisst ihr, was man da jetzt machen kann? Wisst ihr, was man da jetzt machen
kann? Das probier ich jetzt. Das probieren wir jetzt mal aus, ob das funktioniert. Das
heißt, ich könnte jetzt zum Beispiel über den Web-AP-Aufruf triggern, dass der, keine
Ahnung, dass der Hintergrund ändert oder irgendwas, ja. Warum soll das nicht klappen? Weil das
früher ziemlich kompliziert war, ASP.NET und Windows Forms in einem Projekt zu verwenden.
Das ist, das ist cool. So, wie kriege ich, Moment, wie kriege ich das jetzt verbunden?
Ähm, komm, wir machen das. Wir machen jetzt einfach einen Event, was der aufruft. Ähm,
public event, keine Ahnung, clicked, nee, keine Ahnung, on request, ich auch immer.
So, äh, und das rufen wir jetzt hier drinnen auf. Wir müssen das ein bisschen größer
machen übrigens, ein bisschen, bisschen klein, das Ganze. Komm mal, das mag ich übrigens
an Ryder auch, dass der den Kram hier so schön klammert, obwohl ich nur eine Klammer gemacht
hab und sowas. Invoke. Was hat er für Schmerzen? Was mag er, was mag er nicht? Cannot access,
ja, das ist klar. Public static event, das ist zwar nicht so die schöne englische Art,
das zu machen. Sagt man das überhaupt? Nein. Ähm, okay, jetzt, jetzt kriege ich quasi
dieses Event gefeuert für jedes, für jede Seite, für jedes Mal, wenn ich die Seite
hier aufrufe. Und jetzt kann ich in meinen Windows Forms gehen, wenn das, wenn das so
alles klappt, wie ich mir das vorstelle. Dann machen wir diesen hässlichen Designer
auf. Und, äh, wie macht man da jetzt überhaupt Buttons und so rein? Sieht, sieht ja noch
aus wie Windows XP. Wie mache ich da jetzt einen Button rein? Hier, das ist der Windows
Forms Button. Button. Oh. Huge, massive Button kommt da hin. Oh. Und wie kann man hier die
einstellen? Sag mal, ist das nicht komplett falsch rum wie in Visual Studio? In Visual
Studio ist das rechts, links und das hier links, rechts. Hm. So. Button Text, was ist
Button Standard Text? Button Standard Text ist Null. So. Jetzt gehen wir da rein und
subscriben das. Äh. Open Code. So. Form 1 Initialize. So. Und da gehen wir jetzt hin.
Mein Mauszeiger ist weg. Mein Mauszeiger ist weg. Mein Mauszeiger ist weg. Und ich kann
nicht schreiben da drin. Mach ich das verkehrt? Hat jemand eine Ahnung, warum ich da nicht
editieren kann drin? Es ist, es ist RIP, oder? Okay, müssen wir neu starten. Open. Forms.
Jawoll. New Window. Okay, das Ding hier können wir schließen. Brauchen wir nicht mehr. So.
Mal gucken, mal gucken, ob ich jetzt noch editieren darf. Ah, jetzt darf ich wieder editieren.
Okay, alles klar. Also gehen wir da mal rein. Oh. Ey. Ah, jetzt, jetzt darf ich auch editieren.
So. Und jetzt sagen wir hier Server. What the fuck? Ah, jetzt hat er es. Server. On Request.
Oh. Und jetzt zählen wir für jeden Request eins hoch. This invoke. Äh. Oh. Wie, wie?
Och, fuck, das habe ich schon so lange nicht mal verwendet. Wie ging das jetzt so? Invoke.
Button. Text. Gleich. Jetzt brauchen wir einen, einen, einen Counter oder so. Private. Int.
Das ist natürlich wahnsinnig, wahnsinnig multithread safe und alles, ne? Counter plus plus.
Achso, da kann man kein insetzen. Äh. Warte mal. Nee, das, das funktioniert. Aber was
ist das hier für, für, für ein Ding? Warum kann er das Invoke nicht machen? Ja, genau,
Counter to String. So, so. Richtig. Äh, was hat er für Schmerzen mit dem, mit dem Invoke?
When forms this invoke. Äh. Warum geht das nicht? New Action. Alles klar. So. Ah, yes.
Excellent. Big brain tactics, ja. So. Also, wenn ich das jetzt starte und die Seite mehrfach
aufrufe, sollte ich, also passiert gar nichts und wenn ich die Seite aufrufe, zählt der
Button hoch. Nein. Doch. Oh, ist das big brain, Alter. Guckt euch das mal an hier. When
aus Forms mit Web API Server. Das ist richtig nice. Stimmt. Counter plus plus Counter hast
du recht. Das ist cool. Ich mein nicht, dass ich jetzt schon immer mal Windows Forms Button
haben wollte, den ich per Web Request hochzählen kann. Hey, ne coole Sache ist es auf jeden
Fall. Nicht, wie gesagt, nicht, dass man es groß brauchen würde oder so, aber es ist
nice. Das gefällt mir. Es hörte übrigens auch nie auf. Deswegen sollte ich vielleicht
hier mal dieses await task einfach schlicht und ergreifend sein lassen, dass es sich beendet.
Das kann ich weglassen. Ja, wirklich sehr, sehr nice. Nein, nein, nein, nicht erwarten,
Alter. Auf jeden Fall eine äußerst coole Geschichte. Mehr können wir jetzt nicht machen.
Ging das vorher nicht auch schon? Es war vorher gar nicht so einfach, einen Web Server in
eine Windows Forms Anwendung zu bekommen. Und dann musstest du ja irgendwie gucken,
dass du dein Routing hinbekommst, also sprich, dass unter Slash die Route gemapt wird und
sowas. Jaja, das ging alles irgendwie früher auch schon, aber nicht so. Es ist nice, das
finde ich cool. Ja, also das Testen hat sich echt gelohnt. Was ist eine Windows Forms Anwendung,
was so alt ist, das musst du eigentlich gar nicht kennen. Das ist so das Oldschool Windows
UI, das hier. Das, was man von Windows XP noch kennt und Windows 2000. Das, was man
quasi so seit Windows 2000 kennt und teilweise 1998 noch. So richtig Oldschool Windows GUI.
Das ist cool. Das gefällt mir. Das gefällt mir echt, das hat was. Easy Web API auch in
einer GUI Anwendung. Hätte Microsoft jetzt nur noch eine gescheite GUI Anwendung, ist
Windows Forms DPI aware? Windows Forms ist quasi von nix aware. Windows Forms kann nicht
mal Emojis in einem Text Control, das was sonst alle können. Deswegen kann man ja auch,
was ein Unding ist in der heutigen Zeit, deswegen kann ich mir jetzt ja auch hier mal ein paar
Emojis kopieren und gehe in Node Patternstelle fest, es gibt keine farbigen Emojis und ich
gehe in Word Patternstelle fest, es gibt keine farbigen Emojis und ich gehe in irgendein
x-beliebiges anderes Programm, was in Windows dabei ist und es gibt keine farbigen Emojis.
Es gibt nur farbige Emojis in neueren Programmen, die eben den Kram unterstützen mit dem neuen
Windows Font Renderer und da sind die Windows eigenen Programme schlicht und ergreifend
einfach zu schlecht für. Ich habe übrigens keine Ahnung, kann Word das? Wie sieht das
mit Word aus? Wir installieren uns jetzt Word aus dem Store, ich sag's euch. Word, irgendeine
Trial Version gibt's das? For one person. Lul. Jaja, ist klar. Ob das das originale
Word ist? Ich bezweifel's ja. Ach nee. Mein Gott, der Store ist so dermaßen crap. Okay,
gut, also Word und Steadiness nicht. Hat Windows irgendein? Moment, das ist, das ist. Hab ich
gerade den Windows Store aufgemacht auf meinem Host? Moment, ich wollte natürlich den Windows
Store nicht auf meinem Host aufmachen, ich wollte den Windows Store natürlich. Ich hätte
mir fast auf meinem Host Office installiert, Alter. Probier mal den Visual Studio Editor,
der kann das auch nicht. Aber was es kann ist via Scout. Visual Studio Code kann das.
Warum? Weil's auf Chrome basiert. Lul. Ich weiß gar nicht, ob Visual Studio Emoji variablen
kann. Ich glaube nicht. Die tun sich doch mit Unicode Zeichen schwer in variablen Namen.
Ich hab übrigens einen 20-Euro-Gutschein im Microsoft Store gewonnen, weil ich gefragt
habe, wann sie Emoji Support in C Sharp einbauen. Letztes Jahr schon oder so. Ich hab irgendwie
eine richtig dumme Frage gestellt, weil ich wollte, dass sie das drannehmen. Da hab ich
auf Twitter gefragt, so, when will Emoji Support edit to C Sharp, irgendwie sowas in
der Richtung. Und da haben sie das dran genommen und haben kurz drüber gelacht und danach hat
mich irgendeine Supportfrau von Microsoft angeschrieben, die übrigens Singleton hieß,
lustigerweise. Passt ja. Dass ich einen Microsoft Store Gutschein gewonnen hab. Guck, Visual
Studio Code kann das. Visual Studio Code kann das. Was? OneNote kann das auch? OneNote?
Warum findet man OneNote nicht, wenn man nach Notes sucht? Warum ist Windows so scheiße
in manchen Belangen? Warum finde ich, wenn ich nach Notes suche, nicht OneNote? Warum
muss ich OneNote eingeben, dass es das startet? Kann ich das offline verwenden? Ist das möglich?
Es geht nicht. Ich kann das nicht offline verwenden, ne? Mein Gott, diese Anwendungen
sind so beschissen, Alter. Das Login-Feld kann das. So kacke. Ich mein, die Suche kann
wenigstens Color Emojis, ja? Windows ist so Paints-Champ in manchen Sachen. Das heißt
nicht, dass andere wirklich viel besser sind, aber es ist halt nur mal das, was ich jetzt
verwende. Iiih, warum ist da... Fuck. Moment, was macht der da? Installiert der gerade
Xing nach, weil ich da das erste Mal drauf geklickt hab? Warum ist das so schlecht? Und
warum ist da Word drauf? Ha! Wie sie einen verarschen wollen, Alter! Chebated! Warum
Xing? Ja... Was ist das denn? Das kann sie ja nur mal installieren hier. Oh! Oh! Es
ist wirklich lächerlich, ne? Wirklich lächerlich, ja. Office. Welcome! Sign in! Warum kann ich
eigentlich mein PC nicht einfach benutzen, ohne 30.000 Sachen nachinstallieren zu müssen,
wofür ich irgendwelche Online-Zugänge und Cloud-Sachen brauche? Einfach nur verwenden.
Microsoft To Do geht auch nicht. Öffnet sich eigentlich standardmäßig irgendwas? Trading
Account? What? Ich kann auch kein Emoji-Support. Kein Emoji-Support, alles kein Emoji-Support.
Ah, das hat jetzt... Guck mal, da siehst du das nur UWP-Anwendung. Das hat Emoji-Support.
Moment, ich kann nicht mal To Do's machen offline. Ich will To Do's anlegen auf meinem
Rechner. Das geht nur mit Account. Warum ist das alles so schlecht? Warum ist das so unglaublich
schlecht unter Windows? Krasser Scheiß, ey. Das kannst du jetzt sein. Feedback Hub. Guck
mal, ob wenigstens der Feedback Hub Emojis kann. Jawoll. Report. Summarize your Feedback,
keqwe, next. Ja, scheiß drauf. Oh, leaked. Leaked. Kennst du To Do-Txt? Ja, das habe
ich vor 10 Jahren mal verwendet. Mal gucken ob Paint 3D. Paint 3D sollte doch Emojis können.
Das ist doch Bleeding Edge Shit. Endlich mal was, was Emoji-Support hat. Aber guck mal,
das ist so der krasse Rückschritt in den neueren Anwendungen. Das ist so der krasse
Rückschritt. Ich kann nicht einfach die Schriftgröße auswählen, die ich haben will. Nein, ich muss
die vorgefertigte Schriftgröße von Microsoft verwenden. Früher konnte ich immer in diese
Felder reinklicken und eine Zahl einstellen. Aber nein, das geht jetzt nicht. Willst du
nicht mit dieser scheiß Tablet-Bedienung vorgefertigten Größen leben, dann verwende andere Software.
Das ist so kaputt. Nicht auszuschließen, dass es nicht doch irgendwie funktioniert.
Hast du das neue Firefox UI gesehen? Nope. Zeig mal her. Wahrscheinlich wird gepaintschämt
gleich, wenn ich das sehe. Testen Sie die Zukunft. Okay Leute, wir testen jetzt die Zukunft.
Wie sieht es eigentlich mit Paint aus und Emoji-Support? Das sollte eigentlich nicht
gehen. Das muss irgendwie Copy-Paste, sonst mag er das nicht. Das geht nicht. Text. Nein,
natürlich nicht. Das ist doch noch Oldschool-Windows-Shit. In OBS geht es auch nicht. OBS ist cute. Ich
glaube, die haben einfach eine ältere zu alte Version. Ich habe es ja schon mal in einem
Video erzählt. Emoji-Rendering ist komplizierter, als man denkt. Man muss erst mal gucken,
welchen Emoji-Standard man verwendet. Dann, dass man einen Emoji-Font hat. Dann, welcher
zugrundeliegenden Betriebssystem man ist, welchen Fond-Renderer man verwendet. Das ist
nicht so einfach, farbige Emojis auf den Bildschirm zu bekommen. Es gibt ja alleine vier Standards
für farbige Emojis. Es gibt den Apple-Standard, den Microsoft-Standard, den Adobe- und, ich
glaube, den Google-Standard. Alles unterschiedliche Dinge. Die einen speichern transparente PLGs,
die anderen speichern direkt Farbwerte, die anderen machen auch... Was auch immer. Total
bescheuert. Die Zukunft ist hier, Firefox. Passt auf. Wir sehen jetzt die Zukunft. Jetzt
kommt die Zukunft hier. Ich bin in der VM, ja. Sonst würde ich den ganzen Mist installieren.
Okay, schon mal hoch agil hier mit dem... Was ist das für ein Werkzeug? Ist das Edge
oder Firefox? Das ist Firefox. Flex. Ja. Warum genau hat man das jetzt gebraucht?
Das Geld ist weg. Guter Titel, oder? Vor sieben Stunden und jetzt erst. Habe ich nicht so
viele Kommentare geschrieben heute. Boah, da finden... Okay, okay. Das ist vom Kontrast
der Panes-Champ. Da weißt du ja gar nicht, wo du hin sollst. Okay, wo hier Einstellungen?
Okay. Alles noch das Gleiche. Das ist doch im Prinzip genau das Alte, nur dass es jetzt
schwarz auf weiß ist anstatt schwarz auf grau, oder? Mach mal Dark. Wo geht denn das? Hier.
Oh. Es ist in Ordnung. Ich meine, es ist ja kaum ein Unterschied zum aktuellen Firefox.
Es ist halt das gleiche nervige UI. Du hast hier beispielsweise immer noch, dass du immer
die Sachen antippen musst und so was. Was soll denn dieser Kack hier? Wozu brauche ich
diese dumme Tablet-Bedienung hier drauf? Das ist so ein Krampf, das hier aufzumachen
mittlerweile. Das ist der Wahnsinn. Aber ansonsten ist es doch eigentlich kein Unterschied zu
vorher. Außer, dass es ein bisschen anders hier oben in der Bar aussieht. Ich sehe da
jetzt keinen großen Unterschied, wenn ich ehrlich bin. Ah, man kann keine Shortcuts
mehr verwenden. Okay, das ist dumm. Es ist noch ein bisschen mehr Touch. Na ja, ist eigentlich...
Mich nervt ehrlich gesagt diese Vertouchifisierung von Desktop-Anwendungen. Das siehst du ja
zum Beispiel schon. Ich kann es jetzt nicht aufmachen, weil ich keinen Account habe. Das
siehst du ja allein schon hier. Das Ding kann weniger als zu seiner Zeit noch Outlook Express
und das war auch schon Mist. Aber ansonsten ist da ja kaum ein Unterschied. Auch die Adress-Liste
und so sieht alles noch mehr oder weniger genauso aus. Sehe ich jetzt ehrlich gesagt
kein Problem drin. Ich werde Firefox weiter verwenden. Übrigens, das hier machen wir
mal was anderes. Da mache ich jetzt nicht Standby. Hallo? Hat sich das jetzt aufgehängt?
Da mache ich jetzt nicht Standby, sondern ich mache aus, sobald ich mal ausmachen kann.
Leute, wen hosten wir denn? Zeig mal her, ist irgendjemand on? MontanaBlack, ja der hat
das bestimmt nötig, dass wir ihn hosten. Vermisst du das alte UI des Firefox? Nicht
unbedingt. Ich vermisse Desktop-Anwendungen, die sich wie Desktop-Anwendungen anfühlen.
Ich glaube ich keine on gerade. Äh Moment, den können wir nicht hosten. Ist der nicht
der TempleOS Typ? Den können wir nicht hosten. Der ist live? Hä, ist der nicht gestorben?
Wie kann der live sein? Ah, schief. Voll krass, wie kann der? Meine Güte. Okay Leute, wir
sehen uns, bis dann, machts gut, see you.
