WEBVTT

00:30.000 --> 00:47.800
So Leute wir müssen jetzt schauen ob ich noch 5 header genug bin um 18.58 irgendwas sinnvolles

00:47.800 --> 00:48.800
zu machen.

00:48.800 --> 00:51.040
Kann sein das es nicht funktioniert sag ich euch gleich schonmal.

00:51.040 --> 01:07.600
Ateno Pock so siehts aus Pock Massive Subscriptions hier wieder 6 Monate ist er am Start ne 7 Monate

01:07.600 --> 01:19.840
Massive Subscriptions Sariks Moin Der Meister zieht zu Aua am Start ich war grad

01:19.840 --> 01:36.280
schon Der Chat lag critical information Österreich Du meinst Australia

01:36.280 --> 01:56.320
Aus Irland jetzt kommen sie aber aus allen Ecken und Enden der Welt

01:56.320 --> 02:09.840
So mal gucken ob ich heute noch genug 5 Head im Hirn übrig habe dass wir heute noch ein

02:09.840 --> 02:17.880
bisschen was basteln können mit GitHub Actions und vor allem automatisches Bild für ne Anwendung

02:17.880 --> 02:25.080
ich zeig euch das ich erklär euch das gleich ja ich bin mir nicht ganz sicher ob das überhaupt

02:25.080 --> 02:32.360
ne gute Idee ist und ob das funktioniert aber ja besser als jetzt muss man das irgendwie

02:32.360 --> 02:46.560
machen ist GitHub Actions arg anders als GitLab ich hab ehrlich gesagt diese GitLab CI Geschichte

02:46.560 --> 02:53.880
nur sehr rudimentär verwendet also die Definition im Jaml sind auf jeden Fall ein bisschen anders

02:53.880 --> 03:03.320
so viel kann ich dir sagen aber so Einzelheiten habe ich keine Ahnung die Auswahl an GitHub

03:03.320 --> 03:08.040
Actions ist wahrscheinlich größer wobei ich ganz ehrlich nicht ganz verstehe was manche

03:08.040 --> 03:12.680
Leute da treiben ich sehe da teilweise GitHub Actions die sind irgendwie 50 Seiten lang

03:12.680 --> 03:19.040
und bestehen nur aus Jaml und einzig und allein aus dem Grund weil sie für jeden Schritt

03:19.040 --> 03:23.120
eine eigene Action wollen anstatt einfach mal zwei 2 Zeilen Shellscript hintereinander

03:23.120 --> 03:32.360
zu schreiben also manche übertreiben es dann ein bisschen ich zeige euch mal was wir probieren

03:32.360 --> 03:40.520
der 4er Champ ist am Start ja mit dem machen wir heute nichts ich zeige euch aber mal was

03:40.520 --> 03:53.080
der Stein des Anstoßes war Moment erstmal kurz Hacker Time aktivieren exellent so jetzt

03:53.080 --> 04:05.000
geht es jetzt was das ist von den Raspberry Pi keine Ahnung ach wir machen mal kurz während

04:05.000 --> 04:15.320
ich erzähle mache ich mal kurz Update bei ist Dankeschön für den Sub machen wir mal

04:15.320 --> 04:26.560
Update schad nix was will replace werden at SPI 2 ATK alles klar jaja mach mal was auch

04:26.560 --> 04:32.440
immer er da replaced warum habe ich eigentlich immer noch nicht auf diese FM Multi Multiple

04:32.440 --> 04:37.280
Downloads angemacht chat kann ich mir das sagen warum mache ich keine Multiple ich weiß

04:37.280 --> 04:42.080
warum ich keine Multiple Downloads habe weil der Stream geleckt hat mit Multiple Downloads

04:42.080 --> 04:51.560
es hat keinen tieferen Sinn du kannst beliebig oft den Kram hinten dran schreiben kannst

04:51.560 --> 05:00.360
auch u u u u u machen während die vm startet chat Sekunde Sekunde ich ich muss ich muss

05:00.360 --> 05:14.280
mir die volle Weeber Ladung geben Sekunde das geht gerade nicht anders Weep Overload

05:14.280 --> 05:34.520
alles klar so 10 Sekunden 10 Sekunden so ok vorbei cute genug gewesen warum kein Dark Mode

05:34.520 --> 05:44.840
ist doch Dark Mode was denn ach so du meinst hier keine Ahnung ich habe das eh immer auf

05:44.840 --> 05:54.400
Fullscreen ich habe Multiple Downloads an guck mal da macht auch Multiple Downloads

05:54.400 --> 05:58.840
dann weiß ich auch nicht warum am Anfang nicht Multiple Downloads hat was ist das für

05:58.840 --> 06:03.160
eine Distro Arch by the way selbstverständlich wobei man das gar nicht mehr sagen darf man

06:03.160 --> 06:08.000
Jaro ist ja offiziell gar kein Arch Linux also doch ist es ist ein Arch Linux aber es

06:08.000 --> 06:14.480
ist kein offizielles Arch Linux und es ist nicht blässt vom Arch Linux von den Päpsten

06:14.480 --> 06:25.040
des des Arch Linux Blessens das ist das Noob Arch Linux sozusagen ich will schon lange

06:25.040 --> 06:28.680
umsteigen auf ein richtiges Arch Linux aber ich hatte bis jetzt noch keinen Bock die vm

06:28.680 --> 06:37.000
fertig einzurichten ganz ehrlich eigentlich ist überhaupt kein Ding das ist mittlerweile

06:37.000 --> 06:43.480
fast genauso schnell eingerichtet wie Ubuntu letztendlich ist ja das was was bisschen Aufwand

06:43.480 --> 06:49.960
macht es sind deine individuelle Konfig ja ok vorbei nicht ganz ich mein du musst schon

06:49.960 --> 06:54.960
noch die Packages installieren soll standardmäßig kein X dabei wenn du es im Minimal install

06:54.960 --> 06:59.480
machst ja ein bisschen mehr musst du schon machen aber es hält sich wirklich in Grenzen

06:59.480 --> 07:02.520
jaja mit dem install script ist gar kein Ding aber da hast halt immer noch nichts drauf

07:02.520 --> 07:06.960
also du musst jetzt immer so du musst du musst X installieren du musst vor immer Tools

07:06.960 --> 07:10.360
in meinem Fall installieren und dann musst du gucken dass ein paar Sachen automatisch

07:10.360 --> 07:18.920
startest aber großer Akt ist es nicht wir haben da sogar mal hier Archive wo Blorts

07:18.920 --> 07:26.480
wir haben sogar mal vor nicht allzu langer Zeit ein Arch Linux Arch by the way Einrichtungs

07:26.480 --> 07:35.280
Stream gemacht 5 sag mal war das der längste Stream den ich je gemacht habe oder was 5

07:35.280 --> 07:38.240
Stunden 16 ist da mit mir los gewesen

07:38.240 --> 07:59.320
und das audio war es ein so es ist so jetzt haben wir geupdatet gab es einen Köln wir

07:59.320 --> 08:05.120
kommen kurz aufs ein kernel update gab ein update haben wir denn hier das ist ja ach

08:05.120 --> 08:12.320
LTS ok der LTS können wir drauf bleiben ok exellent so also ich erzähle euch jetzt mal

08:12.320 --> 08:16.960
was was ich mir überlegt habe und zwar es geht heute überhaupt nicht um dieses Pro

08:16.960 --> 08:46.120
ekt im Detail sondern mir ist eine Sache dabei aufgefallen also wenn ich weiß was es ist

08:46.120 --> 08:51.240
ich sag es ganz kurz das ist ein Addon für Home Assistant wo man aus seinem aktuellen

08:51.240 --> 08:56.480
Fiat Werte auslesen kann und und in seine Heimautomatisierung bringen da sieht man dann

08:56.480 --> 08:59.840
sowas in seinem Dashboard aber da geht es überhaupt nicht rum da ist mir was aufgefallen

08:59.840 --> 09:04.640
und zwar die ganze Zeit also das geht das wird über Docker gebaut und läuft dann als

09:04.640 --> 09:10.600
Home Assistant Addon das ist so ein Standard wie agil ist die Agile Poggers Organisation

09:10.600 --> 09:18.280
die ist so agil dass da nicht jeder reinkommt die ist close source sozusagen weiß gar nicht

09:18.280 --> 09:28.040
wer das Ding angelegt hat der Poggers war das glaube ich oder ich weiß gar nicht irgendjemand

09:28.040 --> 09:35.040
hat das mal angelegt gut logisch wer soll das sonst angelegt haben irgendjemand muss

09:35.040 --> 09:41.160
es angelegt haben also ob wir es nie hatte hat er eigentlich auf den Issue geantwortet

09:41.160 --> 09:48.400
jetzt also holen am arsten das ist ein Home Assistant Addon das wird über Docker gebaut

09:48.400 --> 09:53.600
so da gibt es ein Dockerfile da muss jetzt mal kurz zurückgehen dass ich euch war dass

09:53.600 --> 09:58.320
ich euch das erklären kann was wir jetzt eigentlich vor ich gehe mal hier irgendwo dahin zurück

09:58.320 --> 10:06.560
so browse files Dockerfile von diesem Comment so vor paar Tagen sah das Dockerfile noch

10:06.560 --> 10:12.840
sehr übersichtlich aus das sieht immer noch übersichtlich aus und das hat folgendes gemacht

10:12.840 --> 10:19.960
das hat das Standard Bild Image für Home Assistant runtergezogen hat das Runscript

10:19.960 --> 10:24.960
hinkopiert hat die Anwendung hinkopiert hat irgendwie paar Dependencies installiert hat

10:24.960 --> 10:33.840
dort net installiert und das wars so und wenn du das angeklickt hast dann wurde das immer

10:33.840 --> 10:39.840
also wenn du das Addon installiert hast dann wurde das Addon immer auf dem Client System

10:39.840 --> 10:43.960
gebaut also sprich irgendjemand hat in seinem Home Assistant angeklickt ich will das Addon

10:43.960 --> 10:50.240
installieren und dann hat er das runtergeladen und hat dort ein Docker Bild gemacht das war

10:50.240 --> 10:57.080
praktisch weil da musste man sich keine Gedanken machen ist es ist es AMD ist es Arm oder also

10:57.080 --> 11:03.840
ist es x86 64 ist es 32 Spit Arm ist es 64 Spit Arm oder was auch immer ist egal weil

11:03.840 --> 11:09.480
es wurde auf der Ziel Plattform gebildet so jetzt gab es nur ein kleines Problem das

11:09.480 --> 11:16.320
zeige ich euch mal in dem Issue da gab es nur ein kleines Problem achja und in dem Run

11:16.320 --> 11:24.200
SH steht auch nix großartiges drin der setzt Passwort und Username für das Login und am

11:24.200 --> 11:30.800
Ende sagt er hier.net run oder eben wenn es Debug ist oder er sagt.net run release

11:30.800 --> 11:35.200
das war von der Idee her tatsächlich ziemlich praktisch erstens konnte man ein bisschen

11:35.200 --> 11:39.240
Debug Ausgaben einbauen mit so einem Frontend Switch man hat nämlich wenn man das anklickt

11:39.240 --> 11:48.480
wenn man das hier in den Addon Settings anklickt dann kann man hier Debug an und aus machen

11:48.480 --> 11:52.120
und wenn man Debug an und aus gemacht hat dann gab es also wenn man Debug angemacht

11:52.120 --> 11:56.280
hat da gab es ein bisschen mehr Meldung falls das Ding mal kaputt gegangen ist dass ich

11:56.280 --> 12:05.520
besser nachvollziehen kann was kaputt gegangen ist so das Problem war nur ich zeige euch

12:05.520 --> 12:12.800
mal das Issue das Problem war nur dass irgendwelche Leute reported haben das Bild ist kaputt

12:12.800 --> 12:18.760
das Bild funktioniert nicht so und da habe ich ihn gefragt kann es sein dass es am Raspberry

12:18.760 --> 12:28.440
Pi liegt da habe ich ihn erstmal gefragt kann es sein dass es am Raspberry Pi liegt

12:28.440 --> 12:33.920
aber ich hätte mir damals schon denken können dass es an der RAM Auslastung liegt weil

12:33.920 --> 12:38.040
das Ding ist einfach gecrashed ohne irgendwelche Meldungen das kann durchaus mal passieren

12:38.040 --> 12:44.000
wenn der RAM komplett weg ist dann macht einfach den Container aus bzw. schießt da drinnen

12:44.000 --> 12:48.400
wahrscheinlich irgendwas ab deswegen merkt man das nicht also der hat reported hier guck

12:48.400 --> 12:53.120
mal Container geht nicht habe ich ihn gefragt liegt es daran dass es am Raspberry Pi läuft

12:53.120 --> 12:56.120
vielleicht weil ich habe es am Raspberry Pi zum damaligen Zeitpunkt auch gar nicht richtig

12:56.120 --> 13:04.040
getestet so dann geht das weiter bla bla bla bla bla so und ein paar Tage später kam er

13:04.040 --> 13:11.240
nochmal und kam er hier auch noch und meinte bei ihm crash das ganze auch und dann meinte

13:11.240 --> 13:19.440
er es scheint ihm dass das addon etwas viel RAM benutzt und dann dachte ich erst die Amazon

13:19.440 --> 13:25.640
Library braucht viel RAM das Problem ist nur dass das addon nach dem Start über 600

13:25.640 --> 13:31.920
ist noch wenig das ging teilweise auf 750 MB hoch überlegt euch mal einen addon was

13:31.920 --> 13:44.160
nichts anderes macht als ein paar HTTP Request zu schicken 700 bis 750 MB RAM Auslastung

13:44.160 --> 13:49.000
also das ist das Video habe ich noch nicht aufgenommen aber das das wird höchstwahrscheinlich

13:49.000 --> 13:52.600
wieder fail mit Ansage werden also ich kann euch auch in die Kurzfassung sagen ich gehe

13:52.600 --> 13:59.520
davon aus dass der breite also Gigabit Ausbau ist es ja dass der Gigabit Ausbau in Deutschland

13:59.520 --> 14:03.920
ganz gut vorankommt die nächsten Jahre über weil die nächsten Jahre über ist das Ziel

14:03.920 --> 14:08.400
ja auch bloß 60% das schaffen die da gehe ich mal von aus sie werden wahrscheinlich

14:08.400 --> 14:12.960
das nicht einhalten exakt bis zum stich der aber das schaffen die weil 60% ist gar kein

14:12.960 --> 14:19.680
Problem 60% kannst du 60% Haushalte anschließen wo sich's lohnt problematisch sind die letzten

14:19.680 --> 14:24.720
40% oder eigentlich gesagt die letzten 10% sind eigentlich eher das Problem da wo sich

14:24.720 --> 14:32.360
nämlich eigentlich nicht wirklich lohnen würde und dann hast du noch die Opas die

14:32.360 --> 14:36.360
sagen warum soll ich in mein Haus warum soll ich den Gehweg vom Haus aufbuddeln lassen

14:36.360 --> 14:45.200
für Glasfaserkabel und sonst was ich glaube die 60% schaffen sie und den Rest wird so

14:45.200 --> 14:49.760
wie bisher nicht funktionieren weil man muss auch mal sagen wir haben noch nie zumindest

14:49.760 --> 14:56.440
ist mir keine bekannt wir haben noch nie unsere selbstgemachten Breitband Vorgaben eingehalten

14:56.440 --> 15:02.680
noch nie ich lasse mich gerne eines besseren belehren alles was ich bisher gesehen habe

15:02.680 --> 15:07.280
alles was ich bisher nachgeguckt euch verfolgt das Thema schon lange wir haben es nie eingehalten

15:07.280 --> 15:14.920
nie nicht einmal und es gibt Vorgaben schon seit fragt mich nicht 1997 oder so die machen

15:14.920 --> 15:19.160
wir uns ja auch selbst das Problem ist nur dass wir immer so diese Vorgaben eigentlich

15:19.160 --> 15:23.320
nie vor haben umzusetzen sondern das immer so als Marketing Material verwenden so nach

15:23.320 --> 15:30.960
dem Motto bis Ende 2015 haben alle mindestens das und das und dann bis dahin Gigabit und

15:30.960 --> 15:34.880
bis dahin dass wir haben eigentlich nie wirklich geschafft und nie wirklich vor gehabt das

15:34.880 --> 15:39.480
zu machen jetzt sagen sie es mal wieder und ich gehe davon aus dass wir es wieder nicht

15:39.480 --> 15:47.560
einhalten werden weil bis 2025 alle anzuschließen 60 prozent anschließen das gehe ich davon

15:47.560 --> 15:56.560
aus das kriegen wir hin aber der Rest ist halt das Problem also ich meine ich muss ehrlich

15:56.560 --> 16:01.080
sagen ich kann jetzt erstmal damit leben ich habe seit einer ganzen Weile 400 MBit runter

16:01.080 --> 16:08.200
40 MBit hoch das reicht sogar mir für YouTube Videos in 2k hochladen würde auch für 4k

16:08.200 --> 16:13.480
reichen das ist kein Ding funktioniert wunderbar also ich bin damit erstmal glücklich vielleicht

16:13.480 --> 16:20.560
ich kann mein Vodafone Kabel noch upgraden auf Gigabit wenn ich irgendwann mal wieder

16:20.560 --> 16:27.720
Bock habe mit Vodafone zu diskutieren und das war es ja das ist ja auch ein Problem

16:27.720 --> 16:33.560
sie sagen überall Glasfaser Glasfaser soll überall hin am Ende und ich bin mir gar nicht

16:33.560 --> 16:39.000
sicher ob das wirklich eins zu eins drin steht dass es Glasfaser sein muss aber am Ende

16:39.000 --> 16:42.680
wird es eh darauf rauslaufen dass Gigabit wieder ein äußerst dehnbarer Begriff sein

16:42.680 --> 16:49.200
wird so nach dem Motto wir haben eine Shared-Leitung die Gigabit kann das ist doch Gigabit oder

16:49.200 --> 16:53.320
wir haben da ein Funkmast wo man theoretisch Gigabit drüber funken könnte und solche

16:53.320 --> 17:01.040
Geschichten also da bin ich da bin ich echt mal gespannt hast du Dual-Stack bei ja habe

17:01.040 --> 17:09.760
ich echt ein Dual-Stack IPv4 und IPv6 aber ihr kennt ja meine Meinung zu IPv6 ich gehe

17:09.760 --> 17:17.000
nicht davon aus dass ich IPv6 wirklich jemals komplett durchsetzen wird bevor das passiert

17:17.000 --> 17:21.000
macht Google was eigenes und ich weiß dass es mit dem heutigen Stand so ohne weiteres

17:21.000 --> 17:25.320
nicht möglich ist weil alle Web-Services beziehungsweise so gut wie alles basiert halt

17:25.320 --> 17:36.640
darauf dass es oberhalb von IP ist aber wenn die alle an einem Strang ziehen dann lässt

17:36.640 --> 17:44.480
sich da auch etwas weiter unten im Stack was basteln wenn Google dabei ist Microsoft dabei

17:44.480 --> 17:50.600
ist und die üblichen Verdächtigen wenn es wirklich wenn der Schuh drückt dann schütteln

17:50.600 --> 17:57.880
die sich da irgendwas aus dem Ärmel warum nicht ich kann mir das richtig gut vorstellen

17:57.880 --> 18:05.960
die haben das besser ob das besser ist sei mal dahingestellt da habe ich so besser wird

18:05.960 --> 18:11.480
das wahrscheinlich nicht sein es wird wahrscheinlich angenehmer für Google und Microsoft sein

18:11.480 --> 18:15.920
in der Umsetzung ich meine ist es nicht so dass sogar Amazon immer noch nicht über IPv6

18:15.920 --> 18:25.880
erreichbar ist also ich ich vermute mal ich vermute mal es wird folgendermaßen laufen

18:25.880 --> 18:35.440
bevor sich IPv6 durchsetzt drückt der Schuh so stark dass sich die üblichen Verdächtigen

18:35.440 --> 18:42.640
zusammensetzen und irgendwas wie auch immer geartetes abartiges konstruieren was rückwärts

18:42.640 --> 18:55.960
kompatibel zu IPv4 ist irgendwas wo dann in aktuell noch reservierte Netzplöcke irgendwie

18:55.960 --> 19:03.640
mit irgendeinem Encoding mehr rein encoded werden kann als vorher ganz wirres Zeug wird

19:03.640 --> 19:10.360
das werden ich bin mal gespannt ich bin ich bin echt mal gespannt ich ich kann mir das

19:10.360 --> 19:19.560
bildlich vorstellen noch mal irgendwas irgendwas so nach dem Motto wenn das das nimmt dann

19:19.560 --> 19:26.520
das nimmt auch ganz merkwürdige Ausmaße ran an das wird dann so was werden wie wenn

19:26.520 --> 19:38.640
die letzten zwei bits auf eins sind von jedem achter block dann guckt der neue Netzwerkstack

19:38.640 --> 19:45.160
nach ob es nicht noch ein weiteres byte hinten dran gibt und so was ganz ganz abartig wird

19:45.160 --> 19:53.040
das werden ihr das macht doch nichts wenn die richtigen Hersteller am zusammensitzen

19:53.040 --> 20:03.880
dann dann können es das halt dann kann es das halt ich kann mir das gut vorstellen

20:03.880 --> 20:07.080
ich kann mir nicht vorstellen wie sie es genau machen wollen weil wirklich passende

20:07.080 --> 20:21.120
hast schon recht wirklich rein passen tut das nicht was er vielleicht IPv6 vielleicht

20:21.120 --> 20:28.400
vielleicht nicht aber ich kann es einfach gut vorstellen dass das sowas kommt dass

20:28.400 --> 20:33.440
sie sich da irgendwas aushecken wer dass das natürlich keiner wirklich haben will außer

20:33.440 --> 20:38.120
denen beziehungsweise dass man einfach sagen will ja wäre schon gut wenn sich IPv6 endlich

20:38.120 --> 20:47.200
mal komplett durchsetzt ja ja schon klar aber das ist einfach so ein Szenario das wird

20:47.200 --> 21:03.680
zu gut passen ja keine ahnung was da wieder los ist ja vielleicht denken sie sich auch

21:03.680 --> 21:11.320
noch irgendwelche erweiterungen aus dass du dann quasi keine ahnung ich habe keine ahnung

21:11.320 --> 21:17.160
was es genau sein könnte ich weiß nur wenn sowas kommt also ich kann mir dieses Szenario

21:17.160 --> 21:22.120
einfach gut ausmalen im kopf und wenn es was kommt dann wird es was komplett abartiges

21:22.120 --> 21:28.920
sein wie gesagt sowas in der richtung wie letzten zwei bitt gesetzt so ein bisschen

21:28.920 --> 21:37.200
nach dem motto wie utf acht feststellt ob das zeichen noch weiter geht da ist es ja

21:37.200 --> 21:46.040
auch so gerade dabei sind da ist es ja auch so ähnlich ich sage nicht genauso ja dass

21:46.040 --> 21:50.480
wir machen mit dem home assistant add-on weiter also wir nehmen wir bauen dafür heute ein

21:50.480 --> 22:00.640
paar bill scripts also in utf acht ist es ja auch so das kann er theoretisch glaube

22:00.640 --> 22:05.680
sogar dass es theoretisch mehr könnte wenn das letzte ist egal zumindest utf acht ist

22:05.680 --> 22:16.000
auch so ein ding utf acht ist rückwärts kompatibel zu aski so und wie machen sie das

22:16.000 --> 22:21.040
folgendermaßen also diese zeichen hier sind aski technisch belegt die machen das jetzt

22:21.040 --> 22:27.920
so wenn das letzte wenn die nicht dass ich jetzt wenn die letzte hälfte des ich bin

22:27.920 --> 22:31.920
mir gar nicht sicher kann sein dass ich euch misst erzählen aber so ungefähr ungefähr

22:31.920 --> 22:41.160
ist es wenn die letzte hälfte des bytes auf eins steht dann bedeutet das das nächste

22:41.160 --> 22:48.920
byte gehört noch zu diesem zeichen dazu was meint ihr wie man emojis encoded in utf acht

22:48.920 --> 22:56.280
das sind vier bytes wovon das erste byte signalisiert es geht weiter das zweite byte signalisiert

22:56.280 --> 23:02.680
es geht weiter bis man halt beim vierten byte ist das hangelt sich auch da lang also es

23:02.680 --> 23:09.400
gibt ein ein ein ein flag in utf acht woran man erkennt ob das zeichen weiter geht was

23:09.400 --> 23:15.040
ja auch wichtig ist was ja so nur nicht funktionieren würde weil utf acht ist halt variabel utf

23:15.040 --> 23:19.080
acht ist standardmäßig erst mal nur ein byte einfach dass es rückwärts kompatibel

23:19.080 --> 23:28.160
zu aski ist und wenn das wenn das ich selbst dieses geht weiter bit gesetztes dann ist

23:28.160 --> 23:34.160
das nächste dann ist quasi utf dann ist es quasi utf 16 ist es nicht wirklich utf 16

23:34.160 --> 23:47.480
es ist zwei bytes ist es so und ja guck hier da sieht man es doch da sieht man es da sieht

23:47.480 --> 23:56.560
man es doch hier also die jetzt das erste byte geht von in diesem bereich 128 entspricht

23:56.560 --> 24:02.920
acht bit entspricht utf acht genau dem aski code das höchste bit ist null die restliche

24:02.920 --> 24:07.280
sieben sieben kommen jetzt das aski zeichen so wenn das eins ist dann geht es mit dem

24:07.280 --> 24:11.360
nächsten zeichen weiter so würde ich das jetzt nochmal interpretieren es ist ganz

24:11.360 --> 24:16.080
mir so und in dieser richtung kann ich mir genau ist das höchste bit des ersten bytes

24:16.080 --> 24:23.080
null handelt sich um aski zeichen so blablabla so ist das höchste bit des ersten bytes

24:23.080 --> 24:28.680
eins handelt es sich um ein mehr byte zeichen also ein unicode zeichen mit einer zeichnummer

24:28.680 --> 24:34.760
größer als 127 das heißt ist das letzte bit eins dann musst du das zweite bit noch

24:34.760 --> 24:39.560
einlesen weil es zum zeichen dazu gehört emojis by the way sind in der regel vier

24:39.560 --> 24:45.920
byte das heißt das ist dann dargesetzt dargesetzt dargesetzt dargesetzt so und genau so was

24:45.920 --> 24:54.960
in der richtung könnte ich mir vorstellen als ip 4,5 oder sowas ja wollte ich also richtig

24:54.960 --> 25:00.840
habe ich auch gerade was zugesagt ich habe gerade die kurzfassung dazu erzählt und sowas

25:00.840 --> 25:06.760
könnte ich mir auch vorstellen als quasi ipv5 oder sowas dass die irgendwie in nicht

25:06.760 --> 25:13.360
benutzte blöcke was rein encode und wenn man dann nachguckt dann kommen noch zwei bytes

25:13.360 --> 25:18.800
hinten dran aber normalerweise nicht und deswegen kann man irgendwas in der richtung glaubst

25:18.800 --> 25:23.760
mir es wird was ekliges wenn die sowas machen wenn die sowas machen dann wird es was ekliges

25:23.760 --> 25:32.760
ich habe auf auf watch immer noch nicht runtergeladen ehrlich gesagt was will der chainlord denn

25:32.760 --> 25:40.080
was hat er gefragt zu overwatch 2 näher zu overwatch 2 habe ich schon nichts gesagt

25:40.080 --> 25:46.040
weil ich auf overwatch 2 noch nicht gespielt habe und zu stadia habe ich schon oft genug

25:46.040 --> 25:54.560
gesagt und dass die jetzt den laden dicht machen das war ja nur eine frage in der zeit

25:54.560 --> 25:58.120
mich hat es gewundert dass es so lang gedauert hat wahrscheinlich hat google irgendwie so

25:58.120 --> 26:04.040
eine interne policy dass man vor drei jahren kein projekt schließt erinnern euch noch

26:04.040 --> 26:08.280
dran mit welchem tamtam stadia gestartet ist ich habe mir damals schon gedacht wer zum

26:08.280 --> 26:12.480
teufel wer soll das wirklich ansprechen am ende hat es halt keiner angesprochen genauso

26:12.480 --> 26:17.000
wie dieser komische logitech hand hält wo ich mir auch gedacht habe warum freuen die

26:17.000 --> 26:23.800
sich auf twitter alle so das ding ist komplett unsinnig vor allem weil ich mich halt so denke

26:23.800 --> 26:30.400
was willst du da wer wer ist die wer will das wer will das haben niemand will cloud gaming

26:30.400 --> 26:37.240
haben die kaknubs die wollen kein cloud die kaknubs für die theoretisch cloud gaming

26:37.240 --> 26:42.240
eine alternative wäre so um irgendwie ihr single player zeug zu spielen und einen desktop

26:42.240 --> 26:46.440
zu brauchen oder konsole haben keine ahnung von cloud gaming und wissen nicht mal was

26:46.440 --> 26:51.640
das ist wisst ihr was die übelsten kaknubs haben wollen die übelsten kaknubs die übelst

26:51.640 --> 26:58.040
die ultra casuals die zwar mobile games konsumieren aber ab und zu auch mal ein ordentliches single

26:58.040 --> 27:02.560
player spiel spielen wollen wisst ihr was die haben wollen die wollen playstation oder

27:02.560 --> 27:08.200
nintendo daheim haben die haben keine ahnung von von was die wissen noch nicht mal dass

27:08.200 --> 27:12.360
das ding switch heißt die wissen nicht mal dass das ding xbox heißt die wissen nur ich

27:12.360 --> 27:21.640
will playstation und nintendo und dann kaufen die sich playstation und nintendo die haben

27:21.640 --> 27:25.520
für die wäre vielleicht cloud gaming eventuell eine alternative aber die haben keine ahnung

27:25.520 --> 27:33.320
die checken es nicht und die wollen es auch nicht checken so und deswegen wird es halt

27:33.320 --> 27:39.000
nix für wen soll dann cloud gaming sein für unterwegs schon mal gar nicht weil internet

27:39.000 --> 27:48.360
verbindung taugt nix für wen soll das sein also ich verstehe es nicht cloud gaming ist

27:48.360 --> 27:57.880
irgendwie wie ich verstehe es nicht für wen das was sein soll so und mobiles gaming jetzt

27:57.880 --> 28:04.760
mal unabhängig von der switch oder mobile games das kann ich mir durchaus vorstellen

28:04.760 --> 28:09.280
dass es da für leute gibt ich meine das steam deck das verkauft sich ja wohl ganz gut bin

28:09.280 --> 28:15.560
immer noch nicht so ganz sicher was ich damit jetzt machen würde weil ich meine ich fahre

28:15.560 --> 28:19.480
zwar mit dem zug aber nicht so lange dass ich dann steam deck aber ja ich also ich kann

28:19.480 --> 28:24.440
es mir zumindest vorstellen wer das gebrauchen könnte ich wüsste jetzt für mich nicht wozu

28:24.440 --> 28:31.000
so richtig aber hey ok was sage ich mit dem highlight videos geworden mit was denn für

28:31.000 --> 28:37.720
mein video so da müsste ich jetzt mir erst mal gedanken machen was mit so einem steam

28:37.720 --> 28:41.400
deck machen soll aber ich verstehe warum man ein steam deck hat und steam deck an sich

28:41.400 --> 28:46.920
finde ich ist auch eine sinnvolle geschichte weil es halt pc spiele spielen kann und das

28:46.920 --> 28:55.920
gar kein so schlechter pc ist ich meine das ist kein guter desktop pc aber das ist für

28:55.920 --> 29:03.400
so ein mobiles ist das schon ok also das verstehe ich das hat durchaus zukunft ich könnte

29:03.400 --> 29:07.280
mir vorstellen wenn andere hersteller was bauen in der richtung könnte das könnte das auch

29:07.280 --> 29:13.880
funktionieren aber an sich cloud gaming als alternative nee das muss lokal auf dem gerät

29:13.880 --> 29:19.920
laufen wenn ich im zug sitze will ich mein spiel spielen und ich ruckeln weil lte nicht

29:19.920 --> 29:24.480
funktioniert das kommt ja noch dabei ich habe ein video geguckt das wusste ich gar nicht

29:24.480 --> 29:30.320
dieses logitech ding hat noch nicht mal ne sim karte du kannst doch nicht mal mobil spielen

29:30.320 --> 29:34.840
also den sinn verstehe ich überhaupt nicht reiter ross dankeschön für den 12 monaten

29:34.840 --> 29:45.880
messer piper subscriptions negativ latent sie hatten sie aber das ja bastard ja so viel

29:45.880 --> 29:54.320
bullshit erzählt wahnsinn rüber wollte man die cd auch lokal im audiosystem haben ja

29:54.320 --> 29:57.560
wenn du kackverbindung hast es ist immer noch sinnvoll lokal die musik auf dem handy zu

29:57.560 --> 30:03.640
haben selbst heute noch wobei es meistens funktioniert weil dein gerät buffert was

30:03.640 --> 30:08.680
bei einem singleplayer spiel ziemlich schwierig ist versucht man als singleplayer spiel 15

30:08.680 --> 30:13.080
sekunden zu buffern willst du den input lag von 15 sekunden haben bis der buffer durch

30:13.080 --> 30:19.040
ist oder was nee also beziehungsweise bis nee du hast kein input bis die andere seite

30:19.040 --> 30:23.640
darauf reagieren kann das funktioniert bei musik zum teil und auch schon richtig aber

30:23.640 --> 30:43.520
bei latency abhängigen sachen kannst du komplett vergessen

30:43.520 --> 30:50.240
nee ich werde es mir angucken sollte mich wirklich der overwatch wahnsinn wieder packen

30:50.240 --> 30:56.960
dann vielleicht aber sieht nicht so aus haben wir schon haben wir vor einer weile haben

30:56.960 --> 31:04.280
wir tatsächlich pvz wieder ein bisschen gespielt für starcraft leute heißt pvz übrigens

31:04.280 --> 31:13.920
was ganz was anderes als plants vs zombies wie sinnvoll ist es pearl zu lernen da gibt

31:13.920 --> 31:20.920
es nein gar nicht sinnvoll wie kommst du auf pearl ja die letzten fünf minuten bevor du

31:20.920 --> 31:26.280
reingekommen bist habe ich über das logitech handheld geredet und das ist jetzt kein schiebe

31:26.280 --> 31:36.040
das war wirklich so wie wie wie kommst du auf pearl zur kahn an ich kann wie kommst

31:36.040 --> 31:45.320
du auf wie kommst du auf pearl also weshalb was hat dich dazu gebracht dass du dir da

31:45.320 --> 31:51.480
gedanken zu machst das wird mich interessieren was sagst du zu deinem elektroauto nach paar

31:51.480 --> 32:03.920
wochen ich finde es immer noch nice ich habe auch letztens schon bei ikea kostenlos geladen

32:03.920 --> 32:10.240
ohne was zu kaufen aber das ist zeitlich beschränkt mittlerweile aber ich war wenigstens im ikea

32:10.240 --> 32:16.040
drin leute ich habe nicht einfach nur da gesessen ja weiß gar nicht ob das überhaupt noch

32:16.040 --> 32:22.720
geht naja doch theoretisch müsste das funktionieren egal es ist beschränkt auf ich glaube 90

32:22.720 --> 32:27.240
minuten mittlerweile also du kannst gar nicht dein auto vollladen aber ich war im ikea

32:27.240 --> 32:37.640
und habe erst mal umsonst geladen off-topic die frage ist nicht off-topic also ich finde

32:37.640 --> 32:43.080
es tatsächlich gut wenn man frag ruhig also meiner meinung nach ist pearl zu lernen heutzutage

32:43.080 --> 32:48.360
relativ sinnlos es gibt sie gut so gut wie nix was aktuell noch in pearl entwickelt wird

32:48.360 --> 32:54.000
das einzige was mir spontan einfällt das ist sicherlich nicht das größte pearl projekt

32:54.000 --> 33:00.000
was es so gibt aber das einzige was mir spontan einfällt ist wie heißt dieses heim automatisierung

33:00.000 --> 33:12.080
sie fem manche benutzen das ja noch dass es in pearl programmiert es sieht auch dementsprechend

33:12.080 --> 33:29.240
aus kackel allah guckt euch an man war nagios in pearl nie nagios nicht in pearl nagios

33:29.240 --> 33:35.840
ist in c du konntest du konntest nagios checks in pearl machen aber das konntest du in ziemlich

33:35.840 --> 33:46.400
jeder sprache machen in den nagios war in c so ansonsten mir fällt nichts in pearl ein

33:46.400 --> 33:50.760
und auch ganz ehrlich pearl ist eine sprache die ist nicht schön die macht aus meiner

33:50.760 --> 33:56.640
sich kein bock zu programmieren die macht auch kein bock zu lernen also es gibt 2022

33:56.640 --> 34:01.760
ich also ich sehe zumindest keinen gibt es keinen grund mehr pearl zu lernen und wenn

34:01.760 --> 34:06.480
man nur pearl kann sollte man dringend mal gucken ob man nicht ein paar andere sachen

34:06.480 --> 34:16.000
sich anschaut ne so viele grills wie beim agila gibt es natürlich nicht mit dem e auto

34:16.000 --> 34:28.400
das stimmt schon ja eins vom insie modus leute ich weiß nicht ob ich es euch gezeigt habe

34:28.400 --> 34:34.680
aber ich hab letztens vom finanzamt eine mahnung gekriegt guckt euch das mal an hier eins eins

34:34.680 --> 34:45.600
eins vor insie modus übrigens es sind nicht es sind nicht 45.500 es sind 455 da kann man

34:45.600 --> 34:49.100
erst mal bisschen geschockt sein wenn man das so sieht und nicht nicht den header sich

34:49.100 --> 35:01.080
anschaut da kann man erst mal lesen 55.000 aber es sind 455 ich hab schlicht ergreifen

35:01.080 --> 35:12.320
vergessen dass ich das überweisen muss ich wusste ich hab schlicht ergreifen vergessen

35:12.320 --> 35:16.520
ich hab instant überwiesen danach weil die sind nervig wenn du nicht überweicht hab

35:16.520 --> 35:33.280
instant überwiesen

35:33.280 --> 35:37.680
auf der arbeit habe ich eine ducky one skyline die ist nice und die gibt es vielleicht auch

35:37.680 --> 35:57.240
in plus switches was das ist richtig lost das ist das ist richtig lost alter ich meine

35:57.240 --> 36:03.120
ich kann verstehen dass man pies nicht mag es gibt immer irgendwas was du in allem aussetzen

36:03.120 --> 36:08.760
kannst es gibt auch sachen die ich an pies nicht mag aber trotzdem ich finde es an sich

36:08.760 --> 36:12.640
eigentlich ganz nice aber ich kann verstehen dass jemand sagt ich kann es nicht ab aber

36:12.640 --> 36:17.160
im gleichen atemzug dann pearl zu mögen das ist ja das eigentliche problem dass man pies

36:17.160 --> 36:22.000
und kacke findet meinetwegen ok aber dass man dann im gleichen atemzug pearl gut finde

36:22.000 --> 36:50.760
das ist wirklich lost

36:50.760 --> 37:00.880
wie twitter client der nicht nervt mit login wie twitter das ist twitter plus ohne login

37:00.880 --> 37:08.440
nerv kram so ok wo sind wir stehen geblieben leute also ich muss eigentlich nochmal von

37:08.440 --> 37:15.120
vorne anfangen zu erzählen glaube ich was ich jetzt vorhabe also weil als ich angefangen

37:15.120 --> 37:18.920
hab zu erzählen waren 100 leute da und das stream hat gerade angefangen das war vor 30

37:18.920 --> 37:22.480
minuten jetzt habe ich alles mögliche erzählt und jetzt weiß keiner mehr wo wir eigentlich

37:22.480 --> 37:26.680
stehen geblieben sind oder weiß noch jemand wo wir stehen geblieben sind ich ich fürchte

37:26.680 --> 37:35.960
nicht ich auch nicht mehr mein mein mein gedächtnis sagt hier keck bei memory leak memory leak

37:35.960 --> 37:39.880
genau tatsächlich sowohl im hirn als auch wir sind tatsächlich beim memory leak stehen

37:39.880 --> 37:44.280
geblieben wobei es gar kein wirkliches memory leak gewesen ist zwar beim ram bedarf also

37:44.280 --> 37:54.760
ich hatte euch die docker files gezeigt und das eigentliche problem war dass wobei jetzt

37:54.760 --> 37:57.920
weiß ich wo ich war also jetzt weiß ich wo ich war also die leute haben sich beschwert

37:57.920 --> 38:03.520
dass das addon nicht funktioniert ja der hat sich beschwert der hat sich beschwert und dann

38:03.520 --> 38:09.400
kam raus ok das benutzt wohl einiges an ram und ich hab festgestellt mein addon und wie

38:09.400 --> 38:14.240
gesagt das addon macht ein paar http requests das sendet ein paar http requests das addon

38:14.240 --> 38:22.000
braucht 700 bis zu 750 mb ram 750 mb das läuft natürlich auch im kleinen raspberry

38:22.000 --> 38:26.320
peinlich wenn dann auch ein bisschen mehr läuft und ich dachte erst mal ich hatte erst

38:26.320 --> 38:31.560
mal im verdacht frage machen wir gleich ich hatte erst mal im verdacht dass es die amazon

38:31.560 --> 38:37.640
library ist weil ich hatte da schon mal dass die dinger teilweise übelst ram fressen und

38:37.640 --> 38:44.920
wenn man mal guckt nach dotnet aws libraries und und memory usage da gibt es viele reports

38:44.920 --> 38:50.720
dass die dotnet libraries von amazon sehr großzügig sind was ram genehmigung angeht

38:50.720 --> 38:55.200
ja war es aber gar nicht war es gar nicht wisst ihr was es gewesen ist wisst ihr was

38:55.200 --> 39:04.040
die hohe ram auslastung verursacht hat das hier ich kann es euch zeigen das hier das

39:04.040 --> 39:09.160
hier hat die hohe ram auslastung verursacht dass ich nämlich jedes mal ein komplettes

39:09.160 --> 39:17.160
bild gemacht habe von diesem programm also sprich um das zu um das addon zu starten wurde

39:17.160 --> 39:23.960
jemals jedes mal ein dotnet run gemacht der hat ein bild gestartet hat das ding gestattet

39:23.960 --> 39:28.920
und hat bei dem bild ungefähr 600 mb gebraucht ich habe keine ahnung warum das so unglaublich

39:28.920 --> 39:36.600
viel ram braucht aber es ist so das braucht wahrscheinlich gar nicht so viel ram aber

39:36.600 --> 39:42.400
ich vermute mal dass ich das zum bilden einfach ordentlich viel ram genehmigt dass es nicht

39:42.400 --> 39:48.760
so viel memory allocations machen muss beziehungsweise nicht so viel neue neue betriebssystem gibt

39:48.760 --> 39:56.200
mir speicher während dem kompilieren beziehungsweise während dem bauen vom vom vom programm also

39:56.200 --> 40:02.160
das ging rauf bis auf 750 mb ram usage und das hat das ging dann mit der zeit auch wieder

40:02.160 --> 40:06.160
runter ja also wenn man das wenn man das addon eine weile hat laufen lassen ich habe sogar

40:06.160 --> 40:10.480
mal garbage collector reingemacht in in der main loop dass es auf jeden fall immer aufgeräumt

40:10.480 --> 40:17.880
wird da ging das immer weiter runter so bis auf bis auf 200 noch epis oder so also das

40:17.880 --> 40:23.640
das das ging dann schon das problem war nur dass die leute hier aus diesem ticket halt

40:23.640 --> 40:28.360
in raspberry pie haben mit 2 gigabyte und home assistant braucht schon 1,3 gigabyte

40:28.360 --> 40:32.480
und die haben einfach nicht genug ram das war einfach out of memory also was musste

40:32.480 --> 40:40.240
ich machen vielleicht gibt es ein parameter eventuell aber ich musste eh schon mal vor

40:40.240 --> 40:45.480
längerer zeit hätte ich das eigentlich schon machen sollen also was habe ich gemacht wir

40:45.480 --> 40:51.560
bauen jetzt das image nicht mehr bei den leuten auf ihrem home assistant sondern wir bauen

40:51.560 --> 40:57.440
das image vorher und pushen es bei mir in die docker registry in die in die container

40:57.440 --> 41:04.160
registry und wenn man sich das hier jetzt anguckt es gibt jetzt offizielle packages

41:04.160 --> 41:11.040
offizielle container images für das addon die ich selbst gebaut habe und das einzige

41:11.040 --> 41:15.960
was jetzt noch passiert wenn irgendjemand dieses addon installiert ist der macht einen pull

41:15.960 --> 41:21.720
auf dieses container image je nach architektur und kann das starten und am endeffekt sind

41:21.720 --> 41:33.440
es jetzt pass mal auf hier waren wir bei hier waren wir bei 6 bis 750 mb ram und mittlerweile

41:33.440 --> 41:44.040
sind wir bei 115 mb ram also wir sind von 750 runter auf 115 auf x86 und auf 25 auf

41:44.040 --> 41:51.400
arm also wir sind von 700 mb ram usage runter auf 25 oder eben auf 114 je nachdem auf welcher

41:51.400 --> 41:59.720
platform und es mit der 114 könnte auch sein dass dotnet einfach nur etwas großzügiger

41:59.720 --> 42:05.880
ist auf kisten mit mehr ram also ich müsste das mal ausprobieren wenn ich die x86 kiste

42:05.880 --> 42:12.960
nehme mal eine vm oder so oder irgendein container den man den man beschränkt auf auf 2 gigabyte

42:12.960 --> 42:18.480
ram können es durchaus sein dass die x86 variante auch weniger ram frisst ich denke

42:18.480 --> 42:24.640
mal dotnet pre allocated einfach ein bisschen was dass es nachher schneller ist also wir

42:24.640 --> 42:30.560
sind runter von 600 mb auf was sinnvolles so und seitdem siehe da funktioniert das addon

42:30.560 --> 42:36.800
auch bei den leuten guck da hier it works ja funktioniert gut jetzt hat er irgendwelche

42:36.800 --> 42:40.600
schmerzen mit seinen automations da wollte ich ihm noch helfen aber das ist nicht eigentlich

42:40.600 --> 42:44.120
nicht das problem von dem addon ja irgendein anderer hat nämlich auch noch geschrieben

42:44.120 --> 42:49.520
hier update fail nach dem addon ja nach dem update kann ich verstehen weil das lokale bild

42:49.520 --> 42:54.720
umgestellt wurde auf prebuilt images so soweit so gut und jetzt kommen wir zu dem was wir

42:54.720 --> 43:01.680
heute machen bzw was man soll mal angucken wie erstellt man dann dieses image hier aktuell

43:01.680 --> 43:08.380
habe ich das einfach auf die naheliegendste art und weise gemacht dieses image zu erstellen

43:08.380 --> 43:15.480
das ist aber nicht sonderlich schön und auch nicht automatisch da muss man an viele sachen

43:15.480 --> 43:22.720
denken ich muss denken dass das die versionsnummer hoch zu zählen in der in dem jammel feil

43:22.720 --> 43:30.000
hier drinnen ich hier drinnen ich muss da denken die versionsnummer hier hoch zu zählen

43:30.000 --> 43:37.960
ich muss daran denken die richtige architektur anzugeben beim image und ich muss das bauen

43:37.960 --> 43:42.680
so folgendermaßen funktioniert es aktuell diese images zu erstellen das funktioniert

43:42.680 --> 43:46.560
nicht reproduzierbar das ist das erste problem also ich zeige euch mal das bildscript ist

43:46.560 --> 43:50.040
ganz furchtbar billig wie gesagt das ist auch nicht schön das ist einfach nur dass es

43:50.040 --> 43:55.880
funktioniert dass ich das memory usage fixen konnte also der baut erst mal das programm

43:55.880 --> 44:00.760
lokal bei mir auf dem rechner also sprich es kommt immer was anderes raus je nach dem

44:00.760 --> 44:04.720
welche dotnet version ich gerade installiert habe und das ist ja das was du bei irgendwelchen

44:04.720 --> 44:10.160
builds als letztes haben willst dass es abhängig ist von dem was du bei dir lokal gerade zufälliger

44:10.160 --> 44:15.960
weise auf dem rechner installiert hast weil vielleicht mache ich ein upgrade auf dotnet

44:15.960 --> 44:25.040
8 wenn es rauskommt oder auf beta von dotnet 8 und dann klappt irgendwas nicht und ja keine

44:25.040 --> 44:28.920
ahnung das ist auf jeden fall nicht schön also der baut das programm einmal einmal

44:28.920 --> 44:40.040
für x86 und einmal für arm und danach das mit koemo kann man sich kann man sich sparen

44:40.040 --> 44:44.000
und danach startet er den offiziellen home assistant docker bilder den man eigentlich

44:44.000 --> 44:49.160
gar nicht braucht wenn man es mal genau nimmt und der baut dann da draus in container und

44:49.160 --> 44:55.040
upload das hier in die registry ne noch keine github actions wie gesagt ich habe das gemacht

44:55.040 --> 44:59.800
dass es einfach schnell geht das also zu dem zeit also nicht schnell in der durchführung

44:59.800 --> 45:04.040
sondern schnell im erstellen also dass ich den kram schnell uploaden konnte dass ihnen

45:04.040 --> 45:13.520
dass das das memory usage gefixt wurde und dann gibt es halt diese images so und was

45:13.520 --> 45:20.840
ich mir jetzt überlegt habe ist wir könnten das ganze in github actions machen das hat

45:20.840 --> 45:24.320
dann auch den vorteil dass man das irgendwie reproduzierbar machen könnte ich weil man

45:24.320 --> 45:30.600
könnte das auch lokal reproduzierbar machen also das einfachste was mir so einfallen würde

45:30.600 --> 45:36.880
wäre folgendes das hier dieses wir bilden das mit dem lokalen dotnet würde ich ersetzen

45:36.880 --> 45:45.080
durch irgendeinen dotnet container mit einem tag wird das bilden und dann halt die anwendung

45:45.080 --> 45:49.240
in irgendeinem verzeichnis zwischenspeichern und dann das hier bauen lassen das würde

45:49.240 --> 46:02.400
wahrscheinlich auch funktionieren aber schön ist was anderes so jetzt muss ich euch noch

46:02.400 --> 46:14.680
das run script zeigen das ist nämlich auch ein bisschen unschön naja geht eigentlich

46:14.680 --> 46:23.800
warum funktioniert das sekunde ich habe glaube ich misst erzählen im dockerfall genau also

46:23.800 --> 46:32.800
das dockerfall muss noch an muss er noch angepasst werden dass er das erkennt dass diese images

46:32.800 --> 46:40.160
für dieses repo sind ja genau nach dem bild muss er halt gucken dass für die jeweilige

46:40.160 --> 46:47.840
architektur das bild rauskopiert wird in das image das ist alles nicht so schön ja multidokker

46:47.840 --> 46:56.520
falls eines der sache wie man das lösen kann bzw in dem fall nicht so ganz weil das funktioniert

46:56.520 --> 47:09.200
an der stelle alleine nicht weil moment lass mal überlegen was war das hier das funktioniert

47:09.200 --> 47:14.880
an der stelle nicht weil diese home assistant add-on bilder nicht mit multistage docker

47:14.880 --> 47:24.240
falls klarkommt aber multistage bild ist das sinnigste was du machen kannst ja da hast

47:24.240 --> 47:33.060
du recht am besten der bild x zu verwenden weil dann könnte ich automatisch x86 und

47:33.060 --> 47:40.760
arm images raushauen das wäre tatsächlich am besten es gibt leider ein paar probleme

47:40.760 --> 47:48.880
weshalb alles nicht so richtig funktioniert so und ich überlege gerade ob ich euch so

47:48.880 --> 47:52.240
mal ein paar highlights ich habe ja im vorfeld schon ein bisschen nachgeforscht erzähle

47:52.240 --> 47:56.920
oder ob wir einfach anfangen und ich tu dann so als wüsste ich es nicht und dann fällt

47:56.920 --> 48:04.400
das auf während dem stream ich erzähle euch mal was noch ein paar sachen dazu die man

48:04.400 --> 48:10.080
machen kann die aber mehr oder weniger naja nicht richtig funktionieren soll ich muss

48:10.080 --> 48:31.720
euch eine frage beantworten was war hier doch wo denn hier also ich habe doch letztens gesagt

48:31.720 --> 48:36.840
dass der server so langsam reagiert mein kollege an 105 repair gestartet aber ja das erklärt

48:36.840 --> 48:48.360
natürlich oder das wird natürlich erklärt warum das so langsam gewesen ist während dem

48:48.360 --> 48:53.520
repair das rate 5 noch besonders zu belasten ist eh keine gute idee weil rate 5 ist eh

48:53.520 --> 48:59.760
schon immer so ein bisschen jolo rate es ist nicht ganz so krass wie rate 0 in der beziehung

48:59.760 --> 49:06.600
ja aber rate 5 ist je nachdem wie groß die platten sind und wie viele platten das nächste

49:06.600 --> 49:11.640
an jolo rate was du machen kannst wenn du nicht rate 0 machen willst weil bei einem

49:11.640 --> 49:18.920
rate 5 chat die fachinformatiker abschlussprüfung rate 5 wie viel platten sind mindestens notwendig

49:18.920 --> 49:33.480
dafür und wie viel platten dürfen kaputt gehen 3 das ist richtig so sieht es aus genau

49:33.480 --> 49:39.760
also man braucht mindestens drei platten und eine darf kaputt gehen die sache ist jetzt

49:39.760 --> 49:45.960
die man braucht meistens macht man nur mit drei platten das heißt aber nicht dass man

49:45.960 --> 49:51.960
das nur mit drei platten machen kann man braucht mindestens drei platten das heißt im endeffekt

49:51.960 --> 50:00.960
auch wenn man jetzt rate 5 nimmt und macht das mit fünf oder sechs platten oder auch

50:00.960 --> 50:05.880
schon mit vier platten und wenn das große platten sind und wenn das dann vielleicht

50:05.880 --> 50:12.200
auch nicht die allerdolsten platten sind dann ist die chance dass das rate bei einem rebuild

50:12.200 --> 50:19.320
kaputt geht relativ hoch und zwar deshalb weil du normalerweise gar nichts von merkst

50:19.320 --> 50:26.480
wenn irgendwo was kaputt ist an den platten aber bei dem rebuild musst du von beiden platten

50:26.480 --> 50:35.520
komplett die parity informationen lesen also sprich wenn irgendwie auch nur eine der anderen

50:35.520 --> 50:43.680
platten einen kleinen knackzweck hat dann fällt das rebuild und im schlimmen fall im

50:43.680 --> 50:49.880
blöden fall ist dein rate komplett im arsch also rate 5 ist meiner meinung nach mindestens

50:49.880 --> 50:55.040
drei platten und sollten auch höchstens meinetwegen vielleicht vier aber ganz ehrlich mehr

50:55.040 --> 51:05.560
als drei platten würde ich nicht nehmen es gibt sogar tatsächlich ein jetzt habe ich

51:05.560 --> 51:14.280
chat gelesen habe vergessen was ich sagen wollte lull was habe ich gerade gesagt so

51:14.280 --> 51:18.640
rate 5 drei platten genau man sollte es mit höchstens mit höchstens höchstens drei

51:18.640 --> 51:22.600
platten machen es gibt sogar genau zweit wieder es gibt sogar ein ganz nice ist recht recht

51:22.600 --> 51:32.760
ein tool ich weiß nicht ob ich das jetzt finde rate calculator oder sowas war das das hier

51:32.760 --> 51:42.200
ne alter was das für eine seite monka es das ist nicht das meine ich nicht error error

51:42.200 --> 51:49.960
calculator ja sowas sowas was soll der hintergrund kann man hinter konnte ich einfach weglassen

51:49.960 --> 51:58.400
da kann man zum beispiel sagen mit 5 machen trieb sei es 10 terabyte namen wir auf trieb

51:58.400 --> 52:18.480
6 so oder man kann sagen hier drei guck mal moment das kann jetzt sein das erscheint

52:18.480 --> 52:22.080
mir dann doch moment den müssen wir glaube ich noch ein bisschen hoch machen ich glaube

52:22.080 --> 52:25.880
so beschissen sind die meisten platten gar nicht mehr dass es 10 hoch 14 sind was haben

52:25.880 --> 52:34.880
die normalerweise nehmen wir mal so eine 10 terabyte sie geht ein wolf oder ist es sowas

52:34.880 --> 52:46.840
hatten die fehler rate error wir haben wir heißen der krempel noch mal stats data sheet

52:46.840 --> 53:03.360
genau error 10 hoch seht ihr irgendwas hier 10 hoch 10 auf 15 10 auf 15 ok schon besser

53:03.360 --> 53:11.040
schon besser also guck mal also das passt ganz gut also wir haben ein 5 mit 10 terabyte

53:11.040 --> 53:18.480
platten mit an record an recoverable read error rate von 10 auf 15 mit drei platten

53:18.480 --> 53:24.240
oder sind wir nur bei 85 ganz ehrlich das kommt mir tatsächlich auch ein bisschen bisschen

53:24.240 --> 53:30.840
niedrig vor aber sag mal du hast 15 prozent mit so diesen 08 15 platten ja du hast schon

53:30.840 --> 53:37.160
eine chance von 15 prozent dass das ding nicht ordentlich dass dein rate quasi verreckt

53:37.160 --> 53:47.040
so und jetzt pass mal auf machen wir auf vier platten oder macht man gar auf sechs platten

53:47.040 --> 53:50.920
also bei sechs platten hast du schon eine chance von einem drittel dass dein rate nicht

53:50.920 --> 53:58.120
mehr ordentlich rebuilden kann und wenn du pech hast steigt dir dann die platte von der

53:58.120 --> 54:03.040
du rebuilden willst auch geradeaus weil sie der meinung ist oh je wir haben jetzt aber

54:03.040 --> 54:08.480
ganz schön viele read errors gehabt also rate 5 ist wirklich nicht ohne rate 6 ist

54:08.480 --> 54:16.560
viel viel besser also weil es sind zwei platten rate 6 ist was das angeht deutlich deutlich

54:16.560 --> 54:26.960
besser wobei es bei dieser größe auch einfach so mit drei und vier platten kann man damit

54:26.960 --> 54:33.360
leben aber drei platten rate 6 funktioniert überhaupt nicht richtig lull rate 6 musste

54:33.360 --> 54:40.280
eigentlich mit fünf mal also sinnigerweise mit fünf drei platten zum benutzen rate 6

54:40.280 --> 54:48.480
ist genau das gleiche wie rate 5 nur dass du zwei parity platten verwendest es ist exakt

54:48.480 --> 54:52.240
das gleiche wie rate 5 nur dass du die parity halt doppelt speichert und dementsprechend

54:52.240 --> 54:58.280
brauchst du halt also zwei platten die kaputt gehen können so rum du speichert die parities

54:58.280 --> 55:02.760
doppelt das heißt du brauchst natürlich auch mehr speicher dafür das heißt du verlierst

55:02.760 --> 55:12.960
bei rate 6 zwei platten für parity versus eine bei rate 5 ja also eigentlich musst

55:12.960 --> 55:17.440
es mit fünf platten machen sonst ist es relativ sinnlos deswegen sind wir nochmal dabei dass

55:17.440 --> 55:23.120
rate nichts taugt für backup der einzige sinn von rate ist das kann man nicht oft genug

55:23.120 --> 55:26.480
sagen ich bin mir nicht sicher ob wir heute noch zu github actions kommen bei dem tempo

55:26.480 --> 55:31.360
wie ich bin fast eine stunde online und nichts gemacht aber gut es ist ja auch irgendwo devops

55:31.360 --> 55:41.880
tv deswegen brauchen wir einen backup der einzige sinn von rate ist eigentlich verfügbarkeit

55:41.880 --> 55:47.840
nicht datensicherheit oder wie nennt man es jetzt sicherheit das hört sich jetzt so

55:47.840 --> 55:56.400
nach security zeug an nee also verfügbarkeit versus halt verlust verlust ja also rate 6

55:56.400 --> 56:01.480
also rate ist nicht versus datenverlust ist nicht gut für daten also gegen datenverlust

56:01.480 --> 56:10.240
sondern gut für verfügbarkeit man kann sich das im endeffekt so vorstellen in rate 6

56:10.240 --> 56:17.600
ist ungefähr das was man auch erreichen will wenn man ein zweites netzteil einbaut du willst

56:17.600 --> 56:23.040
das ding verfügbar halten du hast ein zweites netzteil oder hast du einen zweiten stromanschluss

56:23.040 --> 56:28.280
an der kiste einfach aus dem grund wenn du mal eine seite verreckt so hast du es bei

56:28.280 --> 56:34.040
einem rate 6 auch wenn du mal eine platte verreckt kannst du rebuilden und gut ist wohin

56:34.040 --> 56:43.840
gegen dich rate nicht schützt ist datenverlust datenverlust kann ja auftreten nicht nur

56:43.840 --> 56:52.480
beim kaputt gehen einer platte sondern auch weil man blödsinn macht zum beispiel klassisches

56:52.480 --> 56:57.040
beispiel was total oft vorkommt wo wahrscheinlich jeder schon mal früher oder später wo jeder

56:57.040 --> 57:03.800
wahrscheinlich die probleme hatte oder sie früher oder später haben wird wenn ihr beispielsweise

57:03.800 --> 57:10.280
dropbox verwendet oder nex cloud verwendet oder irgendeinen zynk verwendet und ihr löscht

57:10.280 --> 57:15.560
beispielsweise daten auf der einen seite nein zfs schützt dich in dem fall absolut

57:15.560 --> 57:22.360
auch gar nicht vor datenverlust zfs schützt dich vor datenverlust wenn du kaputtes sektor

57:22.360 --> 57:27.720
oder sowas auf der festplatte hast und dann auch so dass du es merkst zfs kann er nicht

57:27.720 --> 57:37.520
auf magische art und weise die platte reparieren du merkst das so aber wo es dich nicht davor

57:37.520 --> 57:43.680
schützt ist wenn du zum beispiel da wenn du snapshots natürlich wenn du snapshots machst

57:43.680 --> 57:47.320
dann ist es wieder was anderes aber einen snapshots geht ja auch schon eher in richtung

57:47.320 --> 57:53.440
back up also ich meine einen snapshots ist quasi die high iq variante von ersynch auf

57:53.440 --> 57:59.080
eine zweite platte aber jeder hat es wahrscheinlich schon mal gehabt wenn ihr irgendwie nen zynk

57:59.080 --> 58:05.360
habt zwischen zwei rechnern und er löscht auf der einen seite aus versehen was dann

58:05.360 --> 58:09.320
zynkt sich quasi das gelöschte auf den anderen rüber und auf beiden seiten ist der ordner

58:09.320 --> 58:14.720
weg so ähnlich kann euch das bei rate natürlich auch passieren also ihr geht auf euren auf

58:14.720 --> 58:24.000
euren samba share oder auf euren wie heißt das ding auf deutsch ne wie heißt das ding

58:24.000 --> 58:35.800
auf eurer windows datei freigabe netzwerk ordner freigabe oder so ähnlich also ihr

58:35.800 --> 58:40.600
geht auf euren samba share und löscht aus versehen das falsche verzeichnis und habt den

58:40.600 --> 58:48.080
papier kommt nicht an dann ist es weg egal ob rate oder nicht also dagegen bringt rate

58:48.080 --> 58:52.120
nix das einzige was euch dann rettet ist ihr habt einen back up oder ihr habt einen snapshots

58:52.120 --> 58:56.360
gemacht aber das läuft ja aufs gleiche raus also es ist nicht die rate funktionalität

58:56.360 --> 59:05.760
die euch schützt davor und das schützt einen auch zfs nicht davor ich mein was soll zfs

59:05.760 --> 59:14.120
dagegen machen das ist ja ein ist aber absichtlich ausgelöster vorgang löschen löscht den

59:14.120 --> 59:22.040
ordner ja dann ist er fort wenn du einen snapshot hast dann ist es was anderes ja und rate

59:22.040 --> 59:27.320
ist nur dafür gedacht dass es verfügbar verfügbar bleibt bei plattenausfall und wenn ihr nämlich

59:27.320 --> 59:30.640
aus versehen den falschen ordner löscht dann ist das rate ja weiterhin verfügbar aber

59:30.640 --> 59:40.000
die daten sind trotzdem weg oder genau ja genau wenn du zum beispiel irgendwelche verschlüsselungsgeschichten

59:40.000 --> 59:43.960
dir eingefangen hast weil es weder irgendeiner nicht lassen konnte auf sein email anhand

59:43.960 --> 01:00:10.360
zu klicken dann hast du auch gelippen da bringt ja auch nur ein back up was bzw snapshots

01:00:10.360 --> 01:00:20.720
die daten sind also immer gleich auf den anderen platten ja aber wenn ich sie lösche ich meine

01:00:20.720 --> 01:00:24.840
der kann ja schlecht der kann ja schlecht einfach mal auf gut glück ein paar daten

01:00:24.840 --> 01:00:28.120
dalassen oder wie meinst du das ich meine wenn ich sage ich will die daten löschen

01:00:28.120 --> 01:00:37.200
dann sind die weg außer halt ich habe snapshot gemacht zfs kann ja schlecht sagen ah vielleicht

01:00:37.200 --> 01:00:43.320
lösche ich mal ein paar nicht also da wäre ja so die platten untereinander inkonsistent

01:00:43.320 --> 01:00:53.040
wenn auf der einen noch was da wäre und auf der anderen nicht also das ist wirklich ding

01:00:53.040 --> 01:00:59.840
was viele verkehrt machen die denken sich ja wir machen in rate 5 und sind für alles

01:00:59.840 --> 01:01:04.320
gewappnet und da sieht man nein ist man nicht erstens in rate 5 geht relativ schnell kaputt

01:01:04.320 --> 01:01:08.840
bei einem rebuild bzw rebuild funktioniert nicht mehr richtig oder aber ups ich habe

01:01:08.840 --> 01:01:13.160
mich verklickt und was gelöscht und dagegen hilft dir halt kein rate dagegen hilft dir

01:01:13.160 --> 01:01:18.960
nur brain oder backups bzw snapshots machen jetzt müssen wir aber mal langsam weitermachen

01:01:18.960 --> 01:01:38.840
sonst wird das heute echt nichts mehr der last rewrite das werde ich nie machen

01:01:38.840 --> 01:01:42.360
ja gut electron devs interessiert das nicht da ist es ja ein feature dass das ding 700

01:01:42.360 --> 01:01:48.040
mb ram verbraucht überlegt euch mal eine elektron an wenn ihr nicht 700 mb ram verbraucht da

01:01:48.040 --> 01:01:52.480
wird ja jeder denken die ist kaputt und wer will anwendungen verteilen von denen man denkt

01:01:52.480 --> 01:02:15.960
sie sind kaputt

01:02:15.960 --> 01:02:27.160
kann man machen wir können auch github actions verwenden ok so falls ihr irgendwelche fragen

01:02:27.160 --> 01:02:33.760
überlesen habt schreibt einfach noch mal in chat so was so doch das ist das ist der

01:02:33.760 --> 01:02:38.560
typische frage die in der abschlussprüfung kommen kann leute ich muss ich muss ich muss

01:02:38.560 --> 01:02:46.120
ich muss ich mal kurz was anders erzählen einfach dass ihr seht was was für ein ein

01:02:46.120 --> 01:02:53.160
netter kerl ich bin ja und zwar mich hat fast auf verwandtschaftsverhältnisse um um drei

01:02:53.160 --> 01:03:03.360
ecken wieder er mich hat eine freundin von meiner mutter angerufen dass der lebensgefährte

01:03:03.360 --> 01:03:07.880
von ihrer tochter habe ich auch gedacht alter was interessieren mich diese leute geht mir

01:03:07.880 --> 01:03:13.760
nicht auf den sack gerade eine umschulung zum fachinformatiker macht und dennoch eine

01:03:13.760 --> 01:03:18.960
praktikum stelle sucht ob ich nicht was kennen würde und ich habe mir eigentlich so gedacht

01:03:18.960 --> 01:03:25.200
alter leute lasst mich in ruhe geht mir nicht auf den keks mann aber was habe ich gemacht

01:03:25.200 --> 01:03:29.720
ich habe bei uns gefragt wie es aussieht mit praktikumsplätzen und wahrscheinlich kriegt

01:03:29.720 --> 01:03:34.720
kann er bei uns ein praktikumsplatz kriegen eigentlich habe ich überhaupt keinen bock

01:03:34.720 --> 01:03:40.360
drauf gehabt ich habe das trotzdem gemacht würdest du im öffentlichen dienst aber die

01:03:40.360 --> 01:03:48.260
kohle stimmt und die arbeitsbedingungen ist mir das ja warum nicht wenn du musst wenn

01:03:48.260 --> 01:03:53.560
du da macht eine umschulung zum fachinformatiker das ist quasi bevor du abschlussprüfung machen

01:03:53.560 --> 01:03:56.840
kannst wenn ich das richtig verstanden habe von ihm da musst du irgendwie ein praktikum

01:03:56.840 --> 01:04:02.080
machen und oder vielleicht vor der zwischendurch keine ahnung und muss du praktikum machen

01:04:02.080 --> 01:04:08.120
ich glaube von acht monaten und nur dann kannst du die irgendwie erfolgreich abschließen

01:04:08.120 --> 01:04:14.640
irgendwie so ist das ja der macht eine umschulung zum fisi wusste bis dahin gar nicht dass

01:04:14.640 --> 01:04:24.640
sowas gibt was macht denn der hr docker bilder lässt sich das nicht umgehen jemand normal

01:04:24.640 --> 01:04:36.840
multistage bild macht das als base push ja das könnte vielleicht funktionieren normalerweise

01:04:36.840 --> 01:04:40.160
möchte er doch das könnte wahrscheinlich doch du hast recht es könnte wahrscheinlich

01:04:40.160 --> 01:04:44.960
funktionieren normalerweise schreibt man gar kein image rein in den ha in den home assistant

01:04:44.960 --> 01:04:50.800
bilder sondern der nimmt automatisch das richtige image passend zur architektur das musst du

01:04:50.800 --> 01:04:55.240
dann nicht selbst machen das macht das sucht er für dich raus und search and replace das

01:04:55.240 --> 01:04:58.880
schon so dass man es nicht machen muss das ist halt dafür gemacht dass die einstiegshürde

01:04:58.880 --> 01:05:02.920
um addons zu erstellen einfacher ist dass du den leuten sagen kannst hier copy paste

01:05:02.920 --> 01:05:09.600
das in dein terminal upload das addon und fertig ist doch das müsste wahrscheinlich gehen was

01:05:09.600 --> 01:05:18.320
du sagst dass man zuerst in bildstab macht und das base image dann verwendet irgendwie

01:05:18.320 --> 01:05:27.960
wahrscheinlich geht das wahrscheinlich geht das moin hast du ideen fürs automatische

01:05:27.960 --> 01:05:35.960
patchen von apps das automatische patchen patchen von willst du irgendwie die serien

01:05:35.960 --> 01:05:44.080
serial ab seriennummer abfrage umgehen oder oder was wird was für tos tos geschichten

01:05:44.080 --> 01:05:54.200
sollen das wieder werden hier ach ich sollte weiterlesen du meinst updaten du meinst updaten

01:05:54.200 --> 01:05:57.800
jetzt habe ich es gecheckt ich hätte ich hätte in zweit die zweite hälfte des satzes

01:05:57.800 --> 01:06:04.360
mal lesen sollen ich habe an patchen gedacht du willst automatisch ich dachte du willst

01:06:04.360 --> 01:06:11.560
die neueste version haben und immer automatisch in den crack installieren oder so so nach dem

01:06:11.560 --> 01:06:16.080
motto sobald ich neues paket runter lade soll es gekrackt werden oder sowas in der

01:06:16.080 --> 01:06:22.720
richtung ok ja win get gibt's win get ist tatsächlich für windows die beste die beste

01:06:22.720 --> 01:06:28.320
lösung wenn man sowas halbwegs offizielles haben will was ich persönlich gerne benutze

01:06:28.320 --> 01:06:35.280
ist das hier scoop allerdings ist das eher für entwicklungs für entwickler tools hier

01:06:35.280 --> 01:06:42.860
guck das das das finde ich persönlich ganz nice da hab da habe ich dann so zeug drüber

01:06:42.860 --> 01:06:55.320
installiert wie youtube downloads vlc package manager und kram ja ich persönlich mag für

01:06:55.320 --> 01:06:58.400
entwickler tools scoop lieber einfach als kommando zeilen tool ist was sich ordentlich

01:06:58.400 --> 01:07:03.280
bedienen lässt im vergleich zu win get ich denke über kurz oder lang wird es die bessere

01:07:03.280 --> 01:07:13.000
auswahl in win get geben schokolade hier das habe ich mal verwendet vor zig zig jahren

01:07:13.000 --> 01:07:20.640
und da musste man für alles noch admin berechtigung immer eintippen das war doof ich denke mal

01:07:20.640 --> 01:07:24.080
über kurz oder lang mit win get das werden mit den größten größten aber win get ist

01:07:24.080 --> 01:07:29.880
ziemlich ja müll also die meisten dieser tools sind unter windows relativ müllig relativ

01:07:29.880 --> 01:07:35.280
relativ kacke weil es unter windows einfach so einen unglaublichen wildwuchs an installern

01:07:35.280 --> 01:07:40.280
gibt du hast ja bis heute noch installer oder sachen die win get nur installieren kann aber

01:07:40.280 --> 01:07:44.000
nicht mehr ordentlich deinstallieren und solche geschichten das ist ganz ganz eklig sachen

01:07:44.000 --> 01:07:47.640
die win get nicht installieren kann ohne dass du doch noch ein paar mal im installer klicken

01:07:47.640 --> 01:07:57.640
musst also es ist halt einfach 30 jahre wildwuchs unter windows was das angeht wir hatten einen

01:07:57.640 --> 01:08:02.560
kunde dem ist das rate 6 gecrasht ja das wir haben es ja gerade ausgerechnet das kann schon

01:08:02.560 --> 01:08:08.160
mal passieren dann hat er das auf ein 18 terabyte hd platte retten lassen und darauf weiter

01:08:08.160 --> 01:08:14.240
gearbeitet er gut er wartet halt bis die 18 terabyte platte dann auch krascht wobei ganz

01:08:14.240 --> 01:08:18.600
ehrlich die idee war schnell noch so schnell wie es irgendwie geht noch mal einen dampf

01:08:18.600 --> 01:08:23.800
ziehen ist wahrscheinlich gar nicht so verkehrt solange das noch irgendwie funktioniert

01:08:23.800 --> 01:08:39.640
ja wobei ich ehrlich sagen muss so richtig so richtig halte ich mich da auch nicht dran

01:08:39.640 --> 01:08:44.680
wahrscheinlich hält sich keiner so richtig dran chat wer weiß was die 321 regel ist

01:08:44.680 --> 01:08:50.120
also da geht es unter anderem um kopien von datalen und backups und locations wo das gespeichert

01:08:50.120 --> 01:09:02.480
ist und sowas also damit ist folgendes damit ist folgendes gemeint du solltest dreimal

01:09:02.480 --> 01:09:10.240
die datei haben du solltest streber ja genau du solltest dreimal die datei lokal haben

01:09:10.240 --> 01:09:18.040
liegen haben du solltest zwei warte mal jetzt krieg ich es auch gar nicht mehr zusammen

01:09:18.040 --> 01:09:23.400
du solltest zumindest ein oft seit backup haben die war das dreimal die datei liegen

01:09:23.400 --> 01:09:31.240
haben zwei backups haben und ein oft seit backup haben irgendwie so ich krieg es auch

01:09:31.240 --> 01:09:40.640
gar nicht mehr richtig zusammen 2321 regel backups gucken wir mal drei kopien sollst

01:09:40.640 --> 01:09:45.680
du haben die kopien auf zwei verschiedene speichermedien gesparte kopien an einem extra

01:09:45.680 --> 01:09:51.760
standort ja gut stimmt ja ungefähr was ich gesagt habe oft seit backup ist so ein ding

01:09:51.760 --> 01:09:58.680
das vernachlässige ich ein bisschen und die datei dreimal kopieren ist auch ein bisschen

01:09:58.680 --> 01:10:09.160
overkill oder dreimal quasi speicherplatz dafür verschwenden da muss es ja nicht übertreiben

01:10:09.160 --> 01:10:19.000
also man kann da auch 211 oder so draus machen beziehungsweise 211 geht nicht 221 oder 220

01:10:19.000 --> 01:10:22.120
es ist alles alle mal besser als einfach nur ein raid zu haben und hoffen dass nie was

01:10:22.120 --> 01:10:32.080
passiert oder 210 es ist alles besser als eine als eine platte zu haben die dann verreckt

01:10:32.080 --> 01:10:45.440
und alles ist weg so sieht es aus endlich mal wenn immer die frage kommt max was kannst

01:10:45.440 --> 01:11:06.320
du besonders gut nix machen und schwätzen sieht man hier im stream immer wieder

01:11:06.320 --> 01:11:11.000
wie liest ihr eure software in der firma kommt drauf an welche wir haben einen ganz ganz

01:11:11.000 --> 01:11:21.080
riesen wild wuchs an software gehen wir mal von unserer von unserem java kram aus ja also

01:11:21.080 --> 01:11:26.560
wie gesagt wir haben ganz ganz viel unterschiedliches zeug auf ganz ganz unterschiedlich vielen

01:11:26.560 --> 01:11:32.520
plattformen wir haben software die wird komplett erstes service in der cloud gehostet wir haben

01:11:32.520 --> 01:11:39.000
software die ist in dem azure kubernetes cluster wir haben azure vms wo sachen drauf sind

01:11:39.000 --> 01:11:42.440
wir haben ganz viel eingekaufte software wir haben selbst programmierte java software selbst

01:11:42.440 --> 01:11:47.120
programmierte kobold software wir haben selbst programmiertes node js gedöns also es ist

01:11:47.120 --> 01:11:51.880
wirklich ganz ganz unterschiedlich gehen wir mal von unserem also gehen wir mal von

01:11:51.880 --> 01:11:57.080
den wichtigsten sachen aus das ist in der regel java software und die ist dafür da

01:11:57.080 --> 01:12:04.320
dass der außendienst also falls ihr mal von irgendeiner bank ein von euch zu euch heim

01:12:04.320 --> 01:12:08.840
bestellt und er euch beraten soll zu irgendwas was ihr wahrscheinlich nicht braucht dann

01:12:08.840 --> 01:12:13.960
benutzt er in ordentliche software benutzen dafür für vertragsabwicklung und und solche

01:12:13.960 --> 01:12:21.680
geschichten und das ist so quasi mit das wichtigste was es gibt neben ist aber mal neben

01:12:21.680 --> 01:12:26.360
der ganzen kobold berechnungsgeschichte da darf natürlich gar nichts stimmt gar nichts

01:12:26.360 --> 01:12:31.720
schiefgehen so und das java zeug das ist muss man sagen tatsächlich sehr oldschool mäßig

01:12:31.720 --> 01:12:42.760
noch es gibt paar mal im monat um genau zu sein einmal im monat pro entf wie nennt man

01:12:42.760 --> 01:12:53.400
das pro pro entwicklung status pro entwicklung stage gibt es dann quasi einen also gibt dann

01:12:53.400 --> 01:12:57.640
beispielsweise einen termin wo es neue versionen gibt für testumgebung gibt beispielsweise

01:12:57.640 --> 01:13:02.760
einen termin wo es neue versionen gibt dann für die für die live system das passiert

01:13:02.760 --> 01:13:10.960
einmal im monat nachts um 23 ne das stimmt gerade nachts um ein uhr bis sechs uhr morgens

01:13:10.960 --> 01:13:17.200
einmal im monat und das ist ganz klassisch da gibt es irgendwo einen server wo wie heißt

01:13:17.200 --> 01:13:22.240
das wie heißt das bei java wo man bild bilds drauf speichert maven ist das maven kann

01:13:22.240 --> 01:13:31.360
das sein oder nexus nexus oder maven ich kenne mich ich kenne mich kenne mich mit mit java

01:13:31.360 --> 01:13:39.000
zeug nicht aus also es gibt irgendwo so einen java repo wo deine ganzen gebildeten files

01:13:39.000 --> 01:13:52.440
und gedöns und zeug rumliegen und dann wird das hin scp einmal im monat das zeug ist halt

01:13:52.440 --> 01:14:01.360
auch schon irgendwann ursprünglich mal entstanden 1995 oder so und da hat sich nie was dran geändert

01:14:01.360 --> 01:14:06.360
der rest ist tatsächlich deutlich moderner aber so diese klassische java ist old school

01:14:06.360 --> 01:14:16.720
as fuck das wird das wird dann einmal im monat um ein uhr nachts hin scp wobei das hin scp

01:14:16.720 --> 01:14:23.920
tatsächlich mit irgendeinem automatisierungsverfahren funktioniert also vielleicht klickt dann

01:14:23.920 --> 01:14:28.520
einer noch in irgendeinem jankins oder so auf auf deploy ich keine ahnung ich hab das

01:14:28.520 --> 01:14:34.920
noch nie gesehen zumindest habe ich gesehen wo ich auch schon mal kecken musste bei einem

01:14:34.920 --> 01:14:41.000
entwickler habe ich das gesehen bei uns damit die wissen auf welchen server sie was schieben

01:14:41.000 --> 01:14:49.200
müssen haben die irgendwie ein xml feil ein xml feil wo irgendwie ich krieg sie mir so

01:14:49.200 --> 01:14:57.000
genau zusammen die haben ein xml feil wo irgendwie gemapt ist ihre application namen zu server

01:14:57.000 --> 01:15:03.440
namen und wenn sie dann sagen sie wollen jetzt keine ahnung hier base application xy deployen

01:15:03.440 --> 01:15:07.400
dann haben sie irgendwie den deploy tool was wahrscheinlich klicken sie im jankins auf

01:15:07.400 --> 01:15:12.400
ein knöpfchen oder so und er guckt dann im xml nach wo muss denn das hin und dann ganz

01:15:12.400 --> 01:15:17.160
wirres zeug ganz wirres zeug cofax dankeschön für den für 13 monat subscription ganz wirres

01:15:17.160 --> 01:15:21.640
zeug also das ist wirklich da kommst du dir vor wie in der steinzeit wenn du dir anguckst

01:15:21.640 --> 01:15:27.880
wie unser java zeug deployt wird aber sie sind auf einem guten weg weil an vielen stellen

01:15:27.880 --> 01:15:37.840
ist schon die sachen umgestellt auf etwas modernere infrastruktur und sei es nur dass

01:15:37.840 --> 01:15:44.680
das nicht mal alles von hand gemacht wird und vieles und gerade und gerade vieles neue

01:15:44.680 --> 01:15:49.840
also irgendwelche neuen berechnungs sachen und sowas das läuft tatsächlich alles kontinuerisiert

01:15:49.840 --> 01:15:56.480
mittlerweile und das alte zeug gestaltet sich halt ein bisschen schwierig zum umziehen das

01:15:56.480 --> 01:15:59.880
ist dann so wir hatten das programmiert achtertüp der ist schon seit fünf jahren nicht mehr

01:15:59.880 --> 01:16:04.840
in der firma oder der ist schon gestorben vor zwei jahren oder so wir hatten letztens

01:16:04.840 --> 01:16:19.880
allen herz kein kein kein witz ich überlege gerade was da kaputt war ich kriege irgendwas

01:16:19.880 --> 01:16:29.440
IBM großrechner technisches und irgendwas wurde nicht richtig verarbeitet ich kann es

01:16:29.440 --> 01:16:33.720
euch nicht genau sagen ich krieg es nicht mal zusammen was es war zumindest irgendwas

01:16:33.720 --> 01:16:40.200
was noch auf einem IBM mainframe läuft so und da war ich in so einem entstörungsmeeting

01:16:40.200 --> 01:16:43.080
und da haben die allen ernstes jetzt haltet euch vielleicht da haben die allen ernstes

01:16:43.080 --> 01:16:50.040
geguckt ok wir hatten davon ahnung wer könnte wer könnte uns denn was dazu sagen sondern

01:16:50.040 --> 01:16:53.280
haben sie dann her ich denke mir jetzt mal ein name aus ja da haben sie an herr müller

01:16:53.280 --> 01:16:59.280
gefunden naja herr müller hat es mal irgendwie gemacht vor sieben jahren oder so ja kriegen

01:16:59.280 --> 01:17:04.400
wir den kriegen wir den irgendwie noch ist er noch da ne der ist nicht mehr da ja wo

01:17:04.400 --> 01:17:10.720
ist er denn jetzt und da kam dann raus der typ ist halt in rente der typ ist in rente

01:17:10.720 --> 01:17:16.040
und dann haben die ungelogen leute die haben dann jemand gesucht der noch raus kriegen

01:17:16.040 --> 01:17:22.160
kann wie man herr müller erreicht und die haben den angerufen in der rente also daheim

01:17:22.160 --> 01:17:27.840
irgend so ein opa der mal kobold zeug programmiert hat der seit sieben jahren oder so in rente

01:17:27.840 --> 01:17:37.800
ist oder oder oder seit fünf das hat funktioniert das hat ein bisschen gedauert bis sie das

01:17:37.800 --> 01:17:43.120
raus gekriegt haben und ich weiß gar nicht ob der sich das überhaupt hat bezahlen lassen

01:17:43.120 --> 01:17:46.800
wahrscheinlich nicht die haben das aber auch geschickt gemacht die haben das auch wirklich

01:17:46.800 --> 01:17:51.880
die haben das wirklich big brain gemacht die hatten nämlich noch einen der kannte den

01:17:51.880 --> 01:17:56.220
und den haben die dann quasi anrufen lassen so nach dem motto hallo karl wie gehts lange

01:17:56.220 --> 01:18:00.840
nicht gehört sag mal du hast doch damals dieses verarbeitungs ding auf dem großrechner programmiert

01:18:00.840 --> 01:18:13.360
kannst du dich daran erinnern als wir damals lochkarten gestanzt haben so und das hat funktioniert

01:18:13.360 --> 01:18:30.840
der war dann auf einmal im call drin oder hat was zu erklärt

01:18:30.840 --> 01:18:47.960
was ist denn das ibb keine ahnung wie groß ist unsere IT abteilung

01:18:47.960 --> 01:18:51.720
das kann ich dir aus dem stehgreif gar nicht also es ist so viel dass ich dir nicht aus

01:18:51.720 --> 01:19:00.280
dem stehgreif sagen kann es gibt ja mehrere IT abteilungen es gibt ja gar nicht nur eine

01:19:00.280 --> 01:19:07.480
es gibt mindestens drei es gibt infrastruktur und es gibt anwendungsentwicklung ich hab

01:19:07.480 --> 01:19:13.040
das organigramm jetzt nicht im kopf aber ich glaube es gibt drei es kann nee leute

01:19:13.040 --> 01:19:19.840
es gibt vier mittlerweile es gibt sogar vier IT abteilungen bei uns es gibt frag mich nicht

01:19:19.840 --> 01:19:29.520
cloud services und outsourcing gedöns es gibt anwendungsentwicklung es gibt so infrastruktur

01:19:29.520 --> 01:19:40.800
administration und es gibt es gibt es noch support natürlich hab ich ganz vergessen

01:19:40.800 --> 01:19:53.240
support gibt auch noch es gibt vier IT abteilungen und wie viele leute da sind ich kann es dir

01:19:53.240 --> 01:20:04.400
wirklich nicht sagen also wenn ich jetzt raten müsste keine ahnung 600 oder so das ist

01:20:04.400 --> 01:20:11.440
jetzt aber einfach nur mal so ins blaue ich hab keine ahnung es ist auf jeden fall nicht

01:20:11.440 --> 01:20:16.560
wenig es ist nicht riesen riesen riesen groß wie jetzt jetzt irgendwie nicht nicht microsoft

01:20:16.560 --> 01:20:26.440
oder sap oder sonst was es ist aber relativ groß habt ihr noch einen mainframe ja wir

01:20:26.440 --> 01:20:34.440
haben wir haben nicht nur einen mainframe wir haben zwei mainframes und ich habe auch gelernt

01:20:34.440 --> 01:20:38.720
dass du den mainframe also ich zeige euch mal wie sowas aussieht weil die es noch nicht

01:20:38.720 --> 01:20:44.400
gesehen haben sowas ja genau sowas da in der richtung ist das dass du den bei dir im rechenzentrum

01:20:44.400 --> 01:20:51.880
stehen hast du den bezahlen darfst du den aber nicht benutzen darfst wie du willst das

01:20:51.880 --> 01:20:58.600
ding gehört immer noch IBM und du musst die rechenzeit darauf bezahlen muss man sich

01:20:58.600 --> 01:21:07.280
mal vorstellen was du hast du hast das ding gekauft für 300.000 euro oder so du betreibst

01:21:07.280 --> 01:21:20.840
das bei dir im rechenzentrum aber wenn du was drauf berechnen willst koste dich das

01:21:20.840 --> 01:21:42.840
du hast visualcobalt.net

01:21:42.840 --> 01:21:47.660
haben die da irgendwie was was was den rechner abends abschaltet oder was oder geht geht

01:21:47.660 --> 01:21:59.480
das licht aus um 22 uhr und der rechner mit

01:21:59.480 --> 01:22:12.440
nächstes ist das aha siehst du mal da lernt man noch was über java

01:22:12.440 --> 01:22:16.280
ja cobalt entwickler werden tatsächlich immer noch gesucht im im gegensatz zu pearl

01:22:16.280 --> 01:22:24.520
also cobalt hat pearl überlebt und wird es auch weiterhin ne ne nix mit os 2 ich glaube

01:22:24.520 --> 01:22:35.160
unser mainframe läuft aktuell tatsächlich sogar mit linux

01:22:35.160 --> 01:22:40.240
ich bin mir nicht sicher es gibt ja irgendwie dieses dieses dieses offizielle zos und linux

01:22:40.240 --> 01:22:44.360
kannst du mittlerweile drauf laufen lassen auch ich glaube das meiste läuft mittlerweile

01:22:44.360 --> 01:22:56.960
mit linux auf dem mainframe ja das das problem haben sie alle

01:22:56.960 --> 01:23:06.640
das wird das bei mir heißt das java genauso wie es gif heißt und und und jason heißt

01:23:06.640 --> 01:23:17.640
jason und nicht jason oder wie der typ das letztes erzählt hat

01:23:17.640 --> 01:23:22.480
das einzige wo ich mich nicht entscheiden kann ist ob china oder china ist deswegen sind

01:23:22.480 --> 01:23:23.480
das die china chinesen

01:23:23.480 --> 01:23:38.120
ja das erzählen die bei uns auch laufen das das ding wird nie weg sein ich glaube nicht

01:23:38.120 --> 01:23:40.560
dass ich das noch erleben werde dass der mainframe weg ist

01:23:40.560 --> 01:23:49.600
ok also nehmen wir mal einen neuen anlauf ich habe euch jetzt ja alles erzählt was das

01:23:49.600 --> 01:23:53.680
problem war wir hatten hohe ramauslastung und deswegen habe ich das gefixt und habe

01:23:53.680 --> 01:23:59.520
es als eigenes image gemacht so und jetzt bin ich dabei wie man das image am besten

01:23:59.520 --> 01:24:06.600
bilden kann und in die container registry pushen ich habe mir folgendes überlegt was

01:24:06.600 --> 01:24:11.760
ich mal ausprobieren wollte das hat nämlich nur am rande was mit diesem addon zu tun und

01:24:11.760 --> 01:24:21.200
zwar ich habe mir folgendes ich habe mir folgendes überlegt wäre es nicht nice wenn man also

01:24:21.200 --> 01:24:29.200
wenn der chat funktionieren würde vielleicht wäre auch gut wäre es nicht nice wenn man

01:24:29.200 --> 01:24:35.840
auf seinem desktop ein package bauen könnte für den raspberry pi das geht ja prinzipiell

01:24:35.840 --> 01:24:41.000
du kannst ja also gibt ja verschiedene varianten wie man das machen kann wenn es ein c programm

01:24:41.000 --> 01:24:46.360
ist kannst du es cross compile zu haben das ist relativ einfach aber man kann auch mit

01:24:46.360 --> 01:24:57.560
qemo arm auf x86 emulieren so wenn man docker bild x verwendet dann macht das das standardmäßig

01:24:57.560 --> 01:25:02.480
schon also ich zeige ich zeige euch das mal ich mache mal so ein mini mini docker feil

01:25:02.480 --> 01:25:09.680
haben hier mk dir kecke beste ordner da weiß ich immer wieder genau was sache ist wenn

01:25:09.680 --> 01:25:21.240
ich mir das angucke irgendwie hier machen wir auf ja wir trusten u feil docker feil lehn

01:25:21.240 --> 01:25:29.560
ich weiß immer richtig schreibt docker feil from debian keine ahnung debian bull bulls

01:25:29.560 --> 01:25:39.760
eye das ist aktuelle glaube schon ja was was was wollen wir da irgendwas drinne machen

01:25:39.760 --> 01:25:45.440
es reicht eigentlich schon mehr müssen wir nicht mal minimal docker feil ja mit minimal

01:25:45.440 --> 01:25:49.400
stocker feil so und jetzt und jetzt kann man eigentlich oder brauche ich noch ein run

01:25:49.400 --> 01:25:53.200
nicht brauche kein run ich glaube das bildet auch so können wir mal ausbilden docker bild

01:25:53.200 --> 01:26:02.520
als pullt er erstmal das debian image funktioniert wunderbar so was man jetzt machen kann ist

01:26:02.520 --> 01:26:19.920
docker bild x kann man sagen docker bild bild x ach scheiße man docker bild x bild was

01:26:19.920 --> 01:26:24.680
meine güte genau so ja das kannst du machen so und was da standardmäßig macht ist der

01:26:24.680 --> 01:26:30.240
baut jetzt dieses image für mehrere plattformen man kann sagen baumal eins ich zeige euch dann

01:26:30.240 --> 01:26:34.600
auch wie das funktioniert baumal im image ihr seht es nämlich gleich wenn ich hier

01:26:34.600 --> 01:26:40.680
wenn ich hier top anschmeiße baumal für plattform auf wie war diese wie war diese schreibweise

01:26:40.680 --> 01:26:59.800
arm 7 v 2 ne arm 7 arm 32 7 ah meine güte docker bild x ne ich will nicht verarmen serious

01:26:59.800 --> 01:27:09.080
marks der hat's wieder der weiß es der weiß linux arm v7 genau so und was der jetzt macht

01:27:09.080 --> 01:27:15.640
ist folgendes der kann jetzt ausarbeit dort net da funktioniert nicht so viel spoiler ich

01:27:15.640 --> 01:27:25.920
schon mal der kann jetzt eine arm cpu also eine arm cpu emulieren und das image dafür

01:27:25.920 --> 01:27:44.240
bauen meine güte alter wer kann sich das alles aus dem kopf merken hier plattform es ist

01:27:44.240 --> 01:28:06.640
relativ sicher plattform plattform multi plattform images minus minus plattform ja was und was

01:28:06.640 --> 01:28:20.720
ist da jetzt so viel anders zu dem was ich gemacht habe

01:28:20.720 --> 01:28:36.120
ne das ist egal was ach es ist einfach so es ist ohne das gleich so rum es ist ok so und

01:28:36.120 --> 01:28:39.960
jetzt seht ihr werdet gleich sehen was der meine fresse warum geht das nicht warum ist

01:28:39.960 --> 01:28:54.960
was wo ist der letztes problem schon wieder

01:28:54.960 --> 01:29:10.080
den falschen ordner das geht ich hab ich hab das letztes das ist eigentlich mein docker

01:29:10.080 --> 01:29:22.000
zu alt das creating muss man nicht machen hat normalerweise im default default docker

01:29:22.000 --> 01:29:31.880
bild x ls mein docker bild x ist not

01:29:31.880 --> 01:29:53.320
was ist das aktuelle docker release

01:29:53.320 --> 01:30:19.200
ich frage wie die wikipedia wissen das ich habe das aktuellste ich hab das vor zwei tagen

01:30:19.200 --> 01:30:39.600
oder so erst gemacht

01:30:39.600 --> 01:30:54.920
muss man das vielleicht vorher machen

01:30:54.920 --> 01:31:12.240
das sein dass mein docker ziemlich kaputt ist ich bin noch in der dockergruppe drinne

01:31:12.240 --> 01:31:16.720
das muss man normalerweise nicht als root machen wenn man eine dockergruppe drin ist ist es

01:31:16.720 --> 01:31:22.520
so gut wie root ok das funktioniert schon mal richtig richtig nice alles ja aber mit

01:31:22.520 --> 01:31:35.400
judo ist das ist mein was zum

01:31:35.400 --> 01:32:02.080
ok bild x installing excellent ok installing

01:32:02.080 --> 01:32:15.400
nein ich will es nicht inside eines docker files machen ich will es auf meinem host haben

01:32:15.400 --> 01:32:27.480
oder manual down manual down ich hab ich hab das vor zwei tagen erst gemacht mit was

01:32:27.480 --> 01:32:36.920
andere da muss ich doch nichts da oder bin ich jetzt total wird anscheinend

01:32:36.920 --> 01:32:40.960
der monster wirklich das plug in habe ich das vielleicht automatisch gemacht ohne dass

01:32:40.960 --> 01:32:50.280
ich das realisiert habe

01:32:50.280 --> 01:32:59.280
vielleicht hatte ich schon mal irgendwann installiert ok plattform so jetzt aber bäm

01:32:59.280 --> 01:33:01.400
also ihr seht was denn auch was der jetzt macht gleich

01:33:01.400 --> 01:33:11.200
der macht ja nichts ich ok ich muss ich muss in dockerfile erstmal irgendwas machen einfach

01:33:11.200 --> 01:33:22.080
nur das image ziehen bringt mir nichts

01:33:22.080 --> 01:33:31.520
wir können jetzt das install

01:33:31.520 --> 01:33:38.400
ich will einfach dass irgendwas passiert

01:33:38.400 --> 01:33:42.520
wie gesagt wir brauchen das nicht weil es gibt ein fertiges image für das dotnet zeug

01:33:42.520 --> 01:33:56.360
wie ging das köln minus z ja da köln geben excellent genau das brauchen wir

01:33:56.360 --> 01:34:01.080
erstmal schön köln rein copy pasten

01:34:01.080 --> 01:34:25.080
plus c 7.2 so run

01:34:25.080 --> 01:34:33.320
ich weiß woran es liegt leute ich weiß woran es liegt ich habe doch ein köln update gemacht

01:34:33.320 --> 01:34:37.960
ich muss erst mal rebooten wenn du köln update gemacht das ist doch

01:34:37.960 --> 01:34:46.120
immer kaputt du musst das mal rebooten

01:34:46.120 --> 01:34:58.360
was ist es deswegen geht das nicht das ist das jahres linux des tops

01:34:58.360 --> 01:34:59.360
so jetzt aber

01:34:59.360 --> 01:35:09.640
wo war man jetzt in welchem or tem temp keckel sind wir gefaßt tem keckel alles klar so

01:35:09.640 --> 01:35:13.640
bild ok und jetzt jetzt kann ich endlich zeigen was

01:35:13.640 --> 01:35:16.840
ich euch zeigen wollte wenn ich jetzt bilden lasse nein auch nicht sudo wir brauchen eigentlich

01:35:16.840 --> 01:35:28.240
wir müssen es gar nicht als sudo machen

01:35:28.240 --> 01:35:30.640
sollte er nicht standardmäßig jetzt rüber switchen auf

01:35:30.640 --> 01:35:35.440
ach nee jetzt jetzt muss ich ja noch die ganzen anderen sachen setzen dass es funktioniert

01:35:35.440 --> 01:35:40.480
zumindest worauf ich eigentlich raus will ist es hat keinen sinn weil es funktioniert

01:35:40.480 --> 01:35:47.880
eh nicht worauf ich raus will ist man kann mit qemo ein arm cpu emulieren dass der das

01:35:47.880 --> 01:35:57.520
container image bauen kann installiert doch einfach zsh und dann was genau soll das bringen

01:35:57.520 --> 01:35:58.680
bei diesem problem jetzt

01:35:58.680 --> 01:36:15.360
so wo sind wir jetzt hier bei multi multiplatform builds gewesen genau

01:36:15.360 --> 01:36:19.560
docker bild xls kann man irgendwie machen dann sieht man die bilder ja das ist

01:36:19.560 --> 01:36:31.440
ach da ist gar kein gar keiner installiert für

01:36:31.440 --> 01:36:38.160
ich hab kein qemo drauf kann das sein

01:36:38.160 --> 01:36:46.800
ich hab gar kein qemo drauf dann kann das auch dann funktionieren

01:36:46.800 --> 01:36:53.480
ohne qemo tut sich da nix

01:36:53.480 --> 01:37:00.880
ich könnte qemo installieren in einem docker container der dann den docker container baut

01:37:00.880 --> 01:37:23.640
ist das würde funktionieren was bei checking f ist immer was zum

01:37:23.640 --> 01:37:33.200
ok also das da muss ich installieren alles klar so was haben wir jetzt arm 64 arm v7

01:37:33.200 --> 01:37:37.040
ja das sieht besser aus ok alles klar

01:37:37.040 --> 01:37:54.600
ok so und jetzt bild

01:37:54.600 --> 01:38:07.880
das kann überhaupt nicht fertig sein

01:38:07.880 --> 01:38:14.080
genau das sollte er jetzt dort nicht extrahieren jetzt

01:38:14.080 --> 01:38:15.480
genau das sollte der jetzt da machen

01:38:15.480 --> 01:38:28.040
ne ne er muss was ausführen was

01:38:28.040 --> 01:38:29.480
warum macht er das jetzt denn denn ich

01:38:29.480 --> 01:38:31.600
ach cashed run

01:38:31.600 --> 01:38:34.560
ne ne du sollst da nix cashen

01:38:34.560 --> 01:38:41.920
aber selbst dann ok da wir machen einfach dass der run nicht mehr gecasht werden kann

01:38:41.920 --> 01:38:48.280
echo 1 2 3 so

01:38:48.280 --> 01:38:49.280
das geht viel zu schnell

01:38:49.280 --> 01:38:57.640
da ist bestimmt kein ok update das dauert ein bisschen wenigstens

01:38:57.640 --> 01:39:04.920
so jetzt sieht man es hier guck

01:39:04.920 --> 01:39:16.880
der führt qemo aus und das braucht ordentlich an cpu last also der emuliert quasi eine

01:39:16.880 --> 01:39:19.200
arm cpu um diesen kram ausführen zu können

01:39:19.200 --> 01:39:36.040
bringt zwar nicht aber ich brauche ein bisschen brauche ein bisschen rechenleistung guck hier

01:39:36.040 --> 01:39:51.320
zu leisten genau

01:39:51.320 --> 01:39:56.560
wir können übrigens das offizielle dotnet image verwenden dafür das wir brauchen hier

01:39:56.560 --> 01:39:58.200
gar keinen gar kein zu installieren

01:39:58.200 --> 01:40:03.280
Not found ja ich weiß weil du es gar nicht installierst

01:40:03.280 --> 01:40:10.320
Wir brauchen ab install karl weil das ist standardmäßig gar nicht dabei

01:40:10.320 --> 01:40:31.640
guckt seht ihr die emulierte cpu das wow wow wow wow monkaS also worauf ich raus will ist man

01:40:31.640 --> 01:40:39.800
kann eine armen cpu auf einem x86 emulieren und das braucht halt wahnsinnig viel cpu last

01:40:39.800 --> 01:40:49.640
weil der halt das übersetzen muss dass es aussieht wie am cpu so und theoretisch kann

01:40:49.640 --> 01:40:58.480
man so images bauen auf seinem desktop die x86 unterstützt und am unterstützen das problem

01:40:58.480 --> 01:41:02.320
ist nur dort nett hat ein back und das ist das worauf ich eigentlich raus will das zeige

01:41:02.320 --> 01:41:08.160
ich euch jetzt wir machen das hiermit ich zeige euch dass es hiermit ein back hat und

01:41:08.160 --> 01:41:15.080
dass es auch mit dem offiziellen dort nett docker image im back hat da gibt es ein kleines

01:41:15.080 --> 01:41:19.680
problem was mich davon abhält das so zu machen wie ich mir das hier vorstelle

01:41:19.680 --> 01:41:29.720
guck jetzt lädt er sich das dort nett runtime runter und führt das aus es gibt

01:41:29.720 --> 01:41:35.320
unter dort nett die möglichkeit die sachen direkt für abend zu kompilieren von x86 rechner

01:41:35.320 --> 01:41:40.280
aus aber wir können nicht alles auf einmal machen ich zeige erstmal was ich mir gedacht

01:41:40.280 --> 01:41:46.840
habe hat github actions keine arm 64 runner ich glaube nicht in der free version du kannst

01:41:46.840 --> 01:41:58.480
deinen eigenen machen kannst du raspberry pi nehmen dafür github actions arm runner

01:41:58.480 --> 01:42:13.720
du kannst deinen eigenen nehmen guck der macht es auch mit qmo ja man auch qmo die machen

01:42:13.720 --> 01:42:22.320
alle die machen alle qmo das es geht auch ohne scheiß qmo ist relativ schnell also für

01:42:22.320 --> 01:42:27.600
so ein einfaches bild reicht das das problem ist nur dass dort netten back hat und sich

01:42:27.600 --> 01:42:33.720
nicht in qmo bauen lässt was an sich kein problem ist weil du weil dort netter selbst

01:42:33.720 --> 01:42:38.240
unterstützt für abend architektur zu kompilieren ohne dass du die ganze container geschichte

01:42:38.240 --> 01:42:45.200
machen musst es sei denn oder komme zum knackpunkt es sei denn man benutzt native interop also

01:42:45.200 --> 01:42:52.800
sprich man muss irgendwelche sachen aufrufen von c libraries oder so dann sieht das ganze

01:42:52.800 --> 01:42:58.040
schon wieder ein bisschen anders aus dann funktioniert das funktioniert das theoretisch auch aber

01:42:58.040 --> 01:43:02.520
die c libraries und sachen die muss man natürlich dann auf einem echten armen container kompilieren

01:43:02.520 --> 01:43:15.640
oder aber cross compilen und sonst wie muss man kurz schauen run mk dir slash ab man könnte

01:43:15.640 --> 01:43:23.880
auch wirklich nehmen dort net new console schon ob das jetzt funktioniert soweit ich

01:43:23.880 --> 01:43:34.080
will euch zeigen dass es von ks ok das muss den krempel noch installieren lip eq 70 immer

01:43:34.080 --> 01:43:41.600
gar nicht sicher was es für eine version ist so und dann werdet ihr sehen es krascht gleich

01:43:41.600 --> 01:43:57.160
nein nicht da lip alter wie heißt das aktuelle package bei debian was ich ok wisst ihr wisst

01:43:57.160 --> 01:44:01.600
ihr was wir machen wir sind jetzt wir sind jetzt ganz ganz trickreich wir starten das

01:44:01.600 --> 01:44:15.240
jetzt einfach und ich gucke da drin nach docker run oder bin bash gehen wir weg wir starten

01:44:15.240 --> 01:44:22.360
jetzt einfach den container und ich gucke mal wie das package heißt search update lip

01:44:22.360 --> 01:44:31.160
eco 67 meine güte hast du jetzt nachgeguckt oder weißt du das lip eco da das brauche

01:44:31.160 --> 01:44:35.280
das ist voraussetzung für dort net es ist so ziemlich die einzige abhängigkeit die

01:44:35.280 --> 01:44:42.600
man damit hat man hat die abhängigkeit allerdings auch nicht hardcoded sondern nur wenn man

01:44:42.600 --> 01:44:48.480
so internationalisierungs sachen verwendet wie zum beispiel euro als währung und zeitzonen

01:44:48.480 --> 01:44:54.880
und solche geschichten ja wenn man standard glücklich ist mit der standard englischen

01:44:54.880 --> 01:45:03.200
schreibweise und so dann braucht man das alles nicht und jetzt sollte er new console machen

01:45:03.200 --> 01:45:08.440
und abkacken oder oder beim bild spätestens wird er abkacken man sieht er emuliert wieder

01:45:08.440 --> 01:45:27.120
hier in der armen cpu drunter und das ganze zieht ordentlich cpu last also den container

01:45:27.120 --> 01:45:34.560
auf meinem haus baute in fünf sekunden und hier braucht er jetzt schon 30 weil halt emulation

01:45:34.560 --> 01:45:41.000
nicht das schnellste ist ihr könnt euch vorstellen wenn ein desktop rechner schon probleme hat

01:45:41.000 --> 01:45:45.320
ein raspberry pie schnell zu emulieren was es eigentlich für eine big brain geschichte

01:45:45.320 --> 01:45:59.040
ist so was wie in den gamecube zu emulieren so jetzt install der dotnet und dann sollte

01:45:59.040 --> 01:46:14.320
er hoffentlich beim erstellen der anwendung abkacken du wusstest wusstest du das wirklich

01:46:14.320 --> 01:46:28.200
aus dem kopf richtig six hat leute massive high IQ dazu kann man nur sagen wo habe ich

01:46:28.200 --> 01:46:40.000
mein big brain sound leute hat so dämlich an was hältst du von open media volt abstand

01:46:40.000 --> 01:46:57.680
mag ich nicht wie das hat funktioniert wait a minute moment self contained wenn das funktioniert

01:46:57.680 --> 01:47:03.560
wäre massive dann kann ich die container ordentlich bauen ja das ist das wäre richtig

01:47:03.560 --> 01:47:07.080
gut aber wie gesagt es würde mich wundern weil dort netter ein back das funktioniert

01:47:07.080 --> 01:47:13.280
nicht kann man weglassen self content publik gutes lasen wir mal alles weg output bild

01:47:13.280 --> 01:47:24.800
das funktioniert das wird mich ganz stark wundern wenn das funktioniert ok ms bild ja

01:47:24.800 --> 01:47:33.160
jetzt kackt er ab jetzt kackt er ab richtig so muss das sein und zwar das ding emuliert

01:47:33.160 --> 01:47:40.160
zwar eine armen cpu aber irgendwie haben sie es geschafft dass dort net verbackt ist

01:47:40.160 --> 01:47:56.720
im emulator du kannst kein dort net zeug im emulator für 32 bit arm 47 packagen und

01:47:56.720 --> 01:48:02.600
kompilieren das geht nicht da gibt es auch ein back zu den habe ich gefunden der back

01:48:02.600 --> 01:48:06.920
ist ihr dürft mal raten wie alt er ist bevor ich ihn aufmache ratet mal wie alt er ist

01:48:06.920 --> 01:48:13.280
ratet mal wann dieser back reported wurde und wie viele sich dafür interessieren 2016

01:48:13.280 --> 01:48:30.240
jahre ich glaube das kommt ganz gut hin was 2020 wie wirklich das ist ja noch gar nicht

01:48:30.240 --> 01:48:39.000
so alt das ist ja nur zweieinhalb jahre alt jetzt na guck mal nur zwei jahre alt ist nix

01:48:39.000 --> 01:48:47.720
so das ist kaputt seit q emo release 1 e3 konfig da hat sich doch gar nichts großartig

01:48:47.720 --> 01:48:56.200
geändert also seit q emo release 4.2 es ist kaputt mit q emo release 4.1 und 4.11 hat

01:48:56.200 --> 01:49:03.040
es noch funktioniert ja das ist eine komische library die merkwürdige dinger macht wisst

01:49:03.040 --> 01:49:10.200
ihr was sein kann dass der das sogar nur zu gitlab umgezogen hat dass die comments also

01:49:10.200 --> 01:49:15.440
dass die eigentlichen sachen noch noch älter sind guck mal das kommt noch von launchpad

01:49:15.440 --> 01:49:21.800
das ubuntu gedöns ja und es hat sich nichts getan also der back ist immer noch drin und

01:49:21.800 --> 01:49:29.600
man kann dort net nicht in einem armen container bilden also in einem armen emulierten auf

01:49:29.600 --> 01:49:34.960
einer emulierten armen cpu das ist das verbuckt so was man jetzt eventuell machen könnte

01:49:34.960 --> 01:49:44.200
ist q emo 4.1 verwenden aktuell sind wir übrigens bei q emo 7 also man könnte irgendwie eine

01:49:44.200 --> 01:49:51.080
frag mich nicht achtjahre alte q emo version verwenden oder so das ist aber nicht sinn

01:49:51.080 --> 01:49:56.160
und zweck der sache ja ok man könnte eine drei jahre alte q emo version verwenden und

01:49:56.160 --> 01:50:01.400
hoffen dass es damit funktioniert kontributen kann ich das nicht mehr das kriegen das kriege

01:50:01.400 --> 01:50:06.560
ich nicht hin aber es funktioniert nicht das ist kaputt oder man muss sich irgendwas anderes

01:50:06.560 --> 01:50:13.400
überlegen die offizielle variante von was microsoft empfiehlt ist folgendes die empfehlen

01:50:13.400 --> 01:50:23.680
nämlich ein multistage bild microsoft empfiehlt dass man so sachen wie bild x und sowas gar

01:50:23.680 --> 01:50:30.840
nicht erst verwendet sondern dass man ein package macht dass man das dass man das packaged

01:50:30.840 --> 01:50:48.760
s bild oder so oder s bild s heckel bild und dann ein zweites images nimmt v7 slash debian

01:50:48.760 --> 01:50:57.920
oder sowas und das dann da rein kopiert also microsoft empfiehlt bau das auf x86 rechner

01:50:57.920 --> 01:51:08.240
und dann kopier es in den arm 32 image das ist ok das geht aber schön ist es nicht vor

01:51:08.240 --> 01:51:17.560
allem wenn man noch native libraries bilden möchte dann ist das nicht so dolle da müsste

01:51:17.560 --> 01:51:24.400
man quasi das ja aber gut dass das funktioniert dann kann man nämlich hier sagen copy from

01:51:24.400 --> 01:51:33.720
hat sogar auto verfolgt kann man sagen hier copy from von diesem einen container kopieren

01:51:33.720 --> 01:51:39.000
den anderen container rein und zwar kopiere aus diesem bild jetzt mal alles von slash

01:51:39.000 --> 01:51:49.880
ab nach slash ab zum beispiel oder von slash ab bild kopier das rüber in den container

01:51:49.880 --> 01:51:58.040
das geht das ist die empfohlene variante von microsoft das zu machen das kann man natürlich

01:51:58.040 --> 01:52:03.040
nicht bild x verwenden sondern man braucht zwei unterschiedliche bild files für amd

01:52:03.040 --> 01:52:11.240
64 und und und arm weil der bild für amd 64 würde anders aussehen er würde ein anderes

01:52:11.240 --> 01:52:22.000
image verwenden und auch diesen bildschritt hier oben nicht das ist halt doof mal gucken

01:52:22.000 --> 01:52:29.720
ob das jetzt funktioniert mit was ich da gemacht habe so der macht jetzt nämlich folgendes

01:52:29.720 --> 01:52:36.760
der macht hier ein container baut das programm da drinnen das funktioniert jetzt nicht ich

01:52:36.760 --> 01:52:43.560
muss es sogar hier noch abhängig machen ich muss hier noch sagen linux linux arm sollte

01:52:43.560 --> 01:52:48.280
er bilden so und dann nach das kopierte das fertig kompilierte hier in diesen container

01:52:48.280 --> 01:52:54.000
rein den ich dann starten könnte beispielsweise auf dem raspberry pi das ist halt echt weiß

01:52:54.000 --> 01:53:01.460
ich das ist irgendwie eklig das gefällt mir nicht schöner wäre es und deutlich einheitlicher

01:53:01.460 --> 01:53:07.880
zu bauen wäre es würde das hier funktioniert einfach auf jeder plattform als mit mit bild

01:53:07.880 --> 01:53:16.520
x ja dass der dann einen armen emulator nimmt das baut und übrigens ich mache das gleich

01:53:16.520 --> 01:53:20.560
noch mal rückgängig ich muss euch auch noch was zeigen es ist nämlich nicht alles verbackt

01:53:20.560 --> 01:53:30.960
es ist nur amd 32 amd v7 verbackt amd 864 bitt funktioniert aber nicht jeder hat einen

01:53:30.960 --> 01:53:46.280
raspberry pi 4 oder raspberry pi 3 mit 64 bitt betriebssystem drauf auf machinne ich

01:53:46.280 --> 01:53:51.600
glaube die meisten sind noch auf dem 32 bitt raspberry pi oder wie sieht es bei euch aus

01:53:51.600 --> 01:54:05.920
werden raspberry pi hat chat wir machen mal eine umfrage wir machen mal eine umfrage

01:54:05.920 --> 01:54:28.040
32 bitt 64 bitt umfrage

01:54:28.040 --> 01:54:39.600
ich muss gar nicht so vor immer ein virtual box haben glaube ich gar keine armen emulationen

01:54:39.600 --> 01:54:49.400
oder vor immer relativ sicher hat sowas sowas nicht außerdem kann man vor immer nicht in

01:54:49.400 --> 01:55:01.280
github actions laufen lassen vor immer workstation haben die armen emulationen oder

01:55:01.280 --> 01:55:10.680
also die meisten haben es tatsächlich auf vielen sechst mit laufen ok hätte ich nicht

01:55:10.680 --> 01:55:15.160
gedacht aber trotzdem immerhin die hälfte sagen wir die hälfte die hälfte die hälfte

01:55:15.160 --> 01:55:19.880
sagen wir jetzt mal ja ok das heißt die hier könnten alle das nicht ausführen wenn es

01:55:19.880 --> 01:55:39.840
vielen sechst mit gebildet ist was genau baut er denn da bitte schön so lang

01:55:39.840 --> 01:55:52.800
was macht er da ich meine das ist eine konsolenanwendung hallo keck weight was bildest du da drei stunden

01:55:52.800 --> 01:56:12.040
rum man das dauert 15 sekunden normalerweise hat er sich aufgehängt guck mal 38 38 40

01:56:12.040 --> 01:56:25.120
das ist übelst am abscheißen gerade der macht da einfach gar nix richtig boomersoft

01:56:25.120 --> 01:56:37.640
ja der braucht einfach zehn gigabyte ram für was für was zumindest ich zeige euch

01:56:37.640 --> 01:56:54.320
jetzt mal dass es auch funktionieren kann das war so wenn man das ganze nämlich bildet

01:56:54.320 --> 01:57:24.280
mit arm 64 8 8 eine güde platform multiplatform bilds hier nein nein nein das stimmt so nicht

01:57:24.280 --> 01:57:39.680
linux arm 64 ist es passt wenn man das nämlich damit macht dann auf magische art und weise

01:57:39.680 --> 01:57:49.360
funktioniert es einfach also dieser bug trifft nur 32 bit arm v7 cpus es ist so es ist so

01:57:49.360 --> 01:57:54.240
hängen geblieben das könnte mit abstand das einfachste sein ja das ist alles was ich

01:57:54.240 --> 01:58:00.520
bräuchte um ein add-on zu packagen also theoretisch noch einfacher ich nehme nämlich einfach

01:58:00.520 --> 01:58:09.320
das microsoft image weil die haben nämlich fertige fertige docker images da könnte man

01:58:09.320 --> 01:58:23.720
nämlich jetzt zum beispiel das dann eben sdk sdk 7.0 hier nehmen wir einfach das da die

01:58:23.720 --> 01:58:31.480
versionsnummer hinten dran und fertig zeige ich euch mal schnell dass man dass das funktioniert

01:58:31.480 --> 01:58:42.640
wir nehmen einfach ups man muss schon das richtige richtige image kopieren so einfach das dahinten

01:58:42.640 --> 01:58:46.200
dran dann kann ich das da wegschmeißen das da wegschmeißen das da wegschmeißen braucht

01:58:46.200 --> 01:58:52.320
wirklich nur noch den bildstep und ihr seht ihr werdet gleich sehen mit arm 64 kein problem

01:58:52.320 --> 01:59:00.320
funktioniert ich sollte mal meine images gleich wieder wegschmeißen ich habe nicht so viel

01:59:00.320 --> 01:59:13.480
Platz also das ist ja falsch ist ja schon vor installiert dotnet rc-1 ist nicht stabil

01:59:13.480 --> 01:59:22.720
ne aber es funktioniert besser mit dotnet 6 funktioniert noch überhaupt nicht das ist

01:59:22.720 --> 01:59:26.560
alles was ich theoretisch bräuchte um die app zu bauen also ich anstatt eine neue konsolen

01:59:26.560 --> 01:59:32.440
anwendung würde ich dann halt meine app rüber kopieren jaja mit das ist egal also egal ob

01:59:32.440 --> 01:59:47.280
ubuntu elpein oder sonst wie was wir können auch mal hier alpine aber auch nehmen gleich

01:59:47.280 --> 01:59:56.800
guckt man sieht ja das tut wunderbar coemu emulierten arm cpu und es kackt nicht ab es

01:59:56.800 --> 02:00:11.360
geht einfach was halt echt kacke ist das heißt ich muss mir jetzt irgendein workaround überlegen

02:00:11.360 --> 02:00:18.960
und zwar so dass das image beziehungsweise das dockerfile nicht also ich will nicht zwei

02:00:18.960 --> 02:00:26.960
dockerfiles und builds machen und da bin ich gerade ein bisschen ein bisschen unschlüssig

02:00:26.960 --> 02:00:31.280
wie man das machen könnte gescheit und wenn man das hat dann kann man das ja auch in der

02:00:31.280 --> 02:00:38.440
github action bauen also ihr seht schon es ist trotzdem relativ langsam es ist singel

02:00:38.440 --> 02:00:45.800
weil halt emulierte cpu ich glaube multithreading emulieren die nicht so und braucht halt ein

02:00:45.800 --> 02:00:50.680
bisschen irgendwann fällt ein fertiges bild raus und da liegt dann die anwendung rum so

02:00:50.680 --> 02:00:55.880
was ich mir sonst noch überlegt habe was man machen könnte ist wie gesagt bild x funktioniert

02:00:55.880 --> 02:01:05.480
nicht man könnte docker in docker machen oder aber tatsächlich ein komplettes komplettes

02:01:05.480 --> 02:01:11.000
coemu starten mit eigenem image gucken ob es da dann drin funktioniert aber ich glaube

02:01:11.000 --> 02:01:14.560
das kann man sich sparen das wird wahrscheinlich auch nicht funktionieren wenn es irgendein

02:01:14.560 --> 02:01:30.360
bug in der coemu emulation ist tja man könnte eine uralt coemu variante nehmen und hoffen

02:01:30.360 --> 02:01:35.480
dass es damit funktioniert was aber auch doof ist weil wenn es dann irgendwelche anderen

02:01:35.480 --> 02:01:41.800
bugs gibt ist halt müll also ich gehe davon aus es wird darauf rauslaufen dass man die

02:01:41.800 --> 02:01:58.120
doch net anwendung auf also das ist aber alles gerade sehr sehr langsam also so extrem langsam

02:01:58.120 --> 02:02:13.920
sollte es nicht sein meine hängt hier zwar ist doch ist das irgendwie kaputt das frisst

02:02:13.920 --> 02:02:28.240
einfach das frisst einfach irgendwie 60 irgendwie irgendwie 6 gigabyte ram oder so

02:02:28.240 --> 02:02:42.240
bisschen broken oder bis bis bisschen bisschen broken und woran stört er sich jetzt ich

02:02:42.240 --> 02:02:50.840
meine viel kann er da nicht kaputt gehen mit der alten coemo version da müssen wir

02:02:50.840 --> 02:02:56.360
erst mal gucken wo man eine alte coemo version überhaupt herkriegt dieses wie ist dieses

02:02:56.360 --> 02:03:05.560
image was ich da installiert habe bin ja tons ist bütz bütz gebück wenn man den ausspricht

02:03:05.560 --> 02:03:14.160
mal gucken ob der überhaupt eine alte coemo version hat ist das new console interactive

02:03:14.160 --> 02:03:29.440
null console app was successfully created restoring was macht der denn da so lang was

02:03:29.440 --> 02:03:39.680
ist das was ist das ist so kaputt es ist mir sogar eben schon auf maus abgekackt also

02:03:39.680 --> 02:03:59.640
normalerweise nur mal so normalerweise sagste dort net new console und dann ist fertig das

02:03:59.640 --> 02:04:11.720
was also das sollte das sollte auch selbst bei emulierter cpu nicht so lange dauern

02:04:11.720 --> 02:04:20.800
wie es hier dauert also da ist auch da ist noch was anderes im arsch gachi bass so was

02:04:20.800 --> 02:04:38.760
ist die älteste coemo version die dieser typ hier hat kurma tags coemo das kein kvm

02:04:38.760 --> 02:04:51.200
ne ne das ist alles in software coemo v ne doch v6 hat er v5 hat er v4 hat er nicht scheiße

02:04:51.200 --> 02:05:02.840
wir brauchen 4.1 das fällt schon mal flach es ist auf jeden fall nicht normal dass er

02:05:02.840 --> 02:05:08.840
so viel ram frisst und wisst ihr was mir allgemein bisschen bisschen bedenken bedenken macht

02:05:08.840 --> 02:05:17.920
ist dass wenn ich wir machen einfach nur docker bild ja ob das wenigstens funktioniert weil

02:05:17.920 --> 02:05:22.960
normales docker bild müsste quasi instant durchlaufen auf x86 hardware ich glaube der

02:05:22.960 --> 02:05:40.880
hat halt irgendwelche anderen schmerzen bei mir mein docker ist kaputt der hängt immer

02:05:40.880 --> 02:05:50.080
selbst selbst auf x86 das dauert fünf sekunden normalerweise der ist broken gerade was sagst

02:05:50.080 --> 02:05:57.680
du zu overwatch 2 ich habe es noch nicht gespielt warte mein docker zeug ist kaputt das macht

02:05:57.680 --> 02:06:04.640
einfach gar nichts mehr selbst normales bild geht nicht mehr ich muss mal ich muss mal

02:06:04.640 --> 02:06:17.120
kurz neu starten ich glaube ich glaube und prunen müssen wir ja und war das coemo zeug

02:06:17.120 --> 02:06:33.400
hier installieren prune docker was ist denn system prunen aha das will remove all stop

02:06:33.400 --> 02:06:45.800
containers all networks not used by at least one container all dangling images yes bam

02:06:45.800 --> 02:07:09.040
docker hat er das auch gemacht post jam muss man auch minus a machen so docker warum hat

02:07:09.040 --> 02:07:26.800
er das bei images warum hat das system nicht gemacht was minus minus all ne force will

02:07:26.800 --> 02:07:36.680
ich nicht gibt es system minus minus all ok also er hat zumindest ein bisschen was wieder

02:07:36.680 --> 02:07:46.200
freigeben ich leute ich reboote mal ich weiß nicht was der für schmerzen hat gerade wir

02:07:46.200 --> 02:07:51.440
rebooten mal rebooten hilft immer dankeschön leute für die ganzen follows und subs massive

02:07:51.440 --> 02:07:57.000
subscriptions hier wieder muss man kurz sicherstellen dass die musik wieder von vorne los geht ja

02:07:57.000 --> 02:08:03.520
mal macht so jetzt schauen wir mal wenn es wieder wenn es wieder hoch kommt der hinten

02:08:03.520 --> 02:08:09.240
ist übrigens nicht mein hintergrund das ist bing image of the day wir gehen in den besten

02:08:09.240 --> 02:08:16.680
ordner überhaupt moment temp keck wie gibt ach du scheiße meine verzeichnisse wieder

02:08:16.680 --> 02:08:30.200
man das findet es finde ich doch wieder alles nicht massive namen ja so docker bild punkt

02:08:30.200 --> 02:08:36.520
auf geht's also das sollte instant durchlaufen wenn nicht hat mein docker irgendeinen schlag

02:08:36.520 --> 02:08:43.240
weg also ich habe euch gezeigt wie schnell das lokal ist das dauert fünf sekunden hier

02:08:43.240 --> 02:09:05.200
normalerweise

02:09:05.200 --> 02:09:20.000
mein docker ist kaputt

02:09:20.000 --> 02:09:32.080
der ist broken der ist einfach nur langsam macht gar nichts und und hängt das ist nicht

02:09:32.080 --> 02:09:47.640
weil rc1 6.0 das ist nicht das ist nicht weil rc1 das ist irgendwas anderes zeit für

02:09:47.640 --> 02:10:05.120
die neue vm kann sein auf

02:10:05.120 --> 02:10:23.680
der hängt und hat unendlich viel ram verbrauch aber ich meine hat ja schon mal funktioniert

02:10:23.680 --> 02:10:38.040
aber kann man diesen mist wieder deinstallieren

02:10:38.040 --> 02:10:43.480
das ist eh nur im container installiert gewesen also irgendwie ist mein docker jetzt voll

02:10:43.480 --> 02:11:04.120
im arsch macht gar nichts mehr ist natürlich auch geil jetzt kann man kann ich bild ok

02:11:04.120 --> 02:11:08.760
das ist gar nicht das ist gar nicht drinne ja das ist auch nicht so dass der versucht

02:11:08.760 --> 02:11:17.960
jetzt amd 64 auf amd 64 zu emulieren oder so es ist einfach procken installiert deinstalliert

02:11:17.960 --> 02:11:31.800
es einfach bild ex docker bild punkt ok leute ich habe ernsthaft keinen plan warum das ding

02:11:31.800 --> 02:11:51.760
kaputt ist warum das gar nicht mal funktioniert macht das macht das irgendwas noch

02:11:51.760 --> 02:12:05.080
liegt vielleicht am cd ne warum ich kann auch nur dass da reinschreiben es wird trotzdem

02:12:05.080 --> 02:12:13.840
nicht funktionieren also irgendwie ich habe keine ahnung warum irgendwie haben jetzt mein

02:12:13.840 --> 02:12:18.880
docker zeug kaputt gemacht also mein dotnet im docker haben wir irgendwie irgendwie zerstört

02:12:18.880 --> 02:12:24.440
hat das internet zugriff ja bestimmt aber brauchst brauchst nicht wirklich wir machen

02:12:24.440 --> 02:12:40.960
jetzt mal trick 17 wir starten jetzt mal ein ubuntu und gucken ob wenn ich interaktiv starte

02:12:40.960 --> 02:12:54.840
dass da funktioniert ab update weil nicht upgrade install install karl lip iq 70 ist

02:12:54.840 --> 02:13:03.880
es bei denen glaube jawoll prinzipiell läuft ja noch aber dort net ist gerade einfach einfach

02:13:03.880 --> 02:13:17.920
procken ja macht gar nichts mehr und warum man weiß es nicht genau und ich habe die

02:13:17.920 --> 02:13:34.200
vm schon rebooted das läuft ja heute wieder wie am schlürchen mk dir ab dotnet dotnet new console das

02:13:34.200 --> 02:13:55.240
funktioniert moment leute moment warum funktioniert das und das offizielle image verreckt das ist das

02:13:55.240 --> 02:14:10.840
ist komisch moment vom ubuntu da machen wir das doch jetzt mal so 22 ne slash ne doppelpunkt 22

02:14:10.840 --> 02:14:18.640
0 22 10 genau dann machen wir da jetzt nicht den kram jetzt noch mal von hunter drauf also run

02:14:18.640 --> 02:14:31.760
ab update und und ab install minus y karl ist das ist das image von denen irgendwie kaputt

02:14:31.760 --> 02:14:37.400
gerade ist da irgendwas drinne was nicht drin sein sollte oder warum ist das warum ist das so

02:14:37.400 --> 02:14:44.280
so procken ist 22 punkt 10 schon raus aber kann nicht mehr lange dauern ob das kommt

02:14:44.280 --> 02:14:53.480
endlich bekommen 22 ist auch egal 22 04 auch ok so und jetzt machen wir so so das müsste jetzt

02:14:53.480 --> 02:15:02.640
müsste doch jetzt eigentlich funktionieren dass er dann so karl run installen dort net und dann

02:15:02.640 --> 02:15:23.560
machen wir jetzt wieder das übliche run mk dir slash ab cd nach ab console new hier das da dotnet console new so bild gib ihm gib ihm bin ich mal gespannt

02:15:23.560 --> 02:15:39.400
was ja so 70 leb ego 70 was schauen ob es jetzt geht dann ist vielleicht das offizielle image

02:15:39.400 --> 02:15:46.960
irgendwie marsch was aber nix daran ändert dass es verbackt ist dass es nicht funktioniert warum

02:15:46.960 --> 02:16:01.840
nicht direkt die runtime warst du vor 30 sekunden da das funktioniert na geil dann ist das offizielle

02:16:01.840 --> 02:16:07.760
image kaputt wir hatten die runtime gerade dies das das geht nicht das offizielle image

02:16:07.760 --> 02:16:26.640
geht nicht selbstgemachtes funktioniert aus irgendwelchen gründen alles klar easy das muss

02:16:26.640 --> 02:16:36.720
ich jetzt aber nicht verstehen das muss ich echt nicht verstehen jetzt mein meinetwegen

02:16:36.720 --> 02:16:41.800
ist soll mir auch recht recht sein dann verifizieren wir nochmal das ist dass das wirklich kaputt

02:16:41.800 --> 02:17:07.480
ist das bild ja dort net ist gut was hat jetzt verschmerzten ok was ist ich also

02:17:07.480 --> 02:17:27.080
haben wir irgendwo verschrieben leute item group wat warning was was willst du von mir

02:17:27.080 --> 02:17:50.880
moment das funktioniert oder das kack gar nicht ab das funktioniert jetzt hängt es

02:17:50.880 --> 02:18:06.640
wieder was zum also heute ist es irgendwie voll im arsch oder jetzt hängt jetzt hängt

02:18:06.640 --> 02:18:21.400
es einfach wieder komplett also irgendwas ist da ist da ist da hinüber lebt ja nicht

02:18:21.400 --> 02:18:31.240
70 ist weil es aktuell obuntu ist das debian hat hat 67 gebraucht was ist es aber ist haben

02:18:31.240 --> 02:18:36.880
die irgendwas gepusht was was brauchen ist oder glaube ich net das wird das wird an mir

02:18:36.880 --> 02:18:51.960
liegen aber jetzt hängt wieder versteht irgendjemand was das für was was meine container für

02:18:51.960 --> 02:19:03.000
schmerzen haben gerade mit diesem microsoft krempe

02:19:03.000 --> 02:19:07.480
also ich verstehe es gar nicht es leuchtet überhaupt nicht ein warum das manchmal hängt

02:19:07.480 --> 02:19:18.200
und manchmal nicht hängt liegt an microsoft im zweifelsfall muss es an microsoft liegen

02:19:18.200 --> 02:19:26.720
aber es kann nicht an microsoft liegen leute weil 6.0 funktioniert auch nicht und 6.0 ist

02:19:26.720 --> 02:19:48.400
stabil das muss gehen ich habe dort net schon öfters im container verwenden das geht eigentlich

02:19:48.400 --> 02:20:03.800
guck mal da was das jedes andere jetzt auch also da kann man doch gar nicht so viel verkehrt

02:20:03.800 --> 02:20:22.640
machen könntest du den echo step setzen ja wobei er hat er gerade neu installiert weil

02:20:22.640 --> 02:20:32.240
ich weil ich umgestellt habe auf 6 also das ist irgendwie das das blick ich jetzt nicht

02:20:32.240 --> 02:20:37.240
was der für schmerzen hat der lädt es runter der legt die konsolen anwenden der kann aber

02:20:37.240 --> 02:20:54.120
kein publish machen noch mal prunen habe ich doch erst ich habe sogar restarted

02:20:54.120 --> 02:21:03.920
auch konsolen anwenden aber jetzt hat es funktioniert ne ach runtime identifier muss ich machen

02:21:03.920 --> 02:21:11.400
ja ok das ist klar weil es dort net 6 ist da muss ich sagen minus r linux in linux x64

02:21:11.400 --> 02:21:25.800
ist es linux x64 linux 64 what the fuck also irgendwas ist mit meinem docker zeug kaputt

02:21:25.800 --> 02:21:33.000
da hängt da hängt das das hängt zu 90 prozent und ich habe keine ahnung warum ich mache

02:21:33.000 --> 02:21:45.000
wirklich noch mal alle alle images weg und ich restarted docker klein noch mal irgendwas

02:21:45.000 --> 02:22:04.160
ist da richtig im arsch wir müssen in die qt vm die qt vm ist ubuntu 1804 oder sowas

02:22:04.160 --> 02:22:11.240
aber nee guck du mal das das hängt einfach komplett also jetzt blick ich nicht mal was

02:22:11.240 --> 02:22:20.680
der verschmerz was die für schmerzen haben also das habe ich schon so oft gemacht entweder

02:22:20.680 --> 02:22:25.000
mit dem offiziellen image oder selbst runter das geht eigentlich immer warum sollte das

02:22:25.000 --> 02:22:30.920
nicht funktionieren richtig hängen geblieben ja auch dass der hier rummeckert von irgendwelchen

02:22:30.920 --> 02:22:37.560
warnings was man gerade aus dem das ist auch ganz merkwürdig ich war ein wecker über

02:22:37.560 --> 02:22:43.960
irgendwelche warnings ich lege das mit dem offiziellen template an auf auf shithub bauen

02:22:43.960 --> 02:22:48.840
ja das geht wahrscheinlich aber warum ist mein lokal ist so wie restart noch mal kurz docker

02:22:48.840 --> 02:23:16.240
lokal sollte eigentlich nix sein es ist volume so und jetzt noch mal restarten

02:23:16.240 --> 02:23:26.880
hätte er nicht

02:23:26.880 --> 02:23:50.720
und ich habe keinen plan warum das hängt da ist irgendwas grundsätzlich gerade total

02:23:50.720 --> 02:23:56.200
im arsch an meiner docker ins oder von was auch immer es scheint ja nur dort netzzeug

02:23:56.200 --> 02:24:05.200
zu sein was hängt beim bild publish ja x64 ich habe es auch richtig ich habe es auch

02:24:05.200 --> 02:24:15.480
richtig geschrieben ja jetzt weiß ich wirklich nicht weiter der trotzdem noch was aus dem

02:24:15.480 --> 02:24:22.360
cash benutzt aber das wird es nicht sein ich meine ich kann sogar mal Ubuntu 20 04 nehmen

02:24:22.360 --> 02:24:38.400
irgendwas was ich noch gar nicht installiert hatte es muss funktionieren ich habe morgen

02:24:38.400 --> 02:24:43.240
noch was gebaut sogar mit 7 7 funktioniert auch das ist irgendwas was an mir das liegt

02:24:43.240 --> 02:24:52.760
tatsächlich ist man ist schnell bei Microsoft aber das liegt nicht an Microsoft ich meine

02:24:52.760 --> 02:24:56.880
das der einzige unterschied ist ich habe vorhin ein komplettes system update gemacht ich meine

02:24:56.880 --> 02:25:11.080
vielleicht wirklich irgendwas drin was kaputt gemacht hat bill weiß ja nicht kann man irgendwie

02:25:11.080 --> 02:25:18.680
sein docker komplett resetten oder so ich meine man kann sein dings sein die hier löschen

02:25:18.680 --> 02:25:27.000
aber das bringt ja nix das kann man doch verzeihen ist löschen aber das jetzt nicht wirklich

02:25:27.000 --> 02:25:43.400
wirklich bringen das habe ich schon das bringt anscheinend nix ok mal was noch mal bild haben

02:25:43.400 --> 02:26:11.240
wir alles können wir rückgängig machen und das offizielle image dem no bild cash ja gut

02:26:11.240 --> 02:26:22.400
jetzt haben wir alles gelöscht jetzt kann er nichts mehr cashen der scheiß hängt einfach

02:26:22.400 --> 02:26:35.840
ok das kann also das kann kurz dauern aber wie gesagt in self contain bild von der konsolen

02:26:35.840 --> 02:26:59.640
anwendung dauert normalerweise dauert normalerweise 5 sekunden oder so so fertig so lang dauert

02:26:59.640 --> 02:27:07.040
das normalerweise so so schnell müsste das im container auch gehen was mich ein stark

02:27:07.040 --> 02:27:19.760
verwirrt ist am anfang lief das ja schon mal durch das ist der was wir jetzt machen man

02:27:19.760 --> 02:27:34.320
das trick 17 das ist das neue was wir installiert haben ne das ist ganz alte ups ne ach quatsch

02:27:34.320 --> 02:27:48.880
nicht reset power off arch by the way wir probieren mal eine andere file maus das andere fällt

02:27:48.880 --> 02:27:56.160
mir gerade nicht ein warum es nicht funktionieren sollte ist überhaupt schon soweit eingerichtet

02:27:56.160 --> 02:28:05.520
dass es funktionieren kann ok da hinten fest schon mal da excellent schon mal halbe miete

02:28:05.520 --> 02:28:20.520
firefox auch alles da wunderbar wunderbar sogar schon installiert nahe natürlich noch

02:28:20.520 --> 02:28:36.600
nicht meine farben gehen auch nicht richtig oder terminal farben sind auch brocken alles

02:28:36.600 --> 02:28:51.480
klar wird probieren was probieren was mal hier drin code ist auch nicht installiert

02:28:51.480 --> 02:29:01.760
ist nichts installiert ich muss das man update machen fällt mir gerade ein das ist ja ne

02:29:01.760 --> 02:29:14.920
ne ne ne warte mal warte mal pack man pack man minus things irgendwie so so ne so alter

02:29:14.920 --> 02:29:24.320
jetzt ist f so das geht ja relativ schnell wir haben ja multiple downloads an aber warum

02:29:24.320 --> 02:29:32.600
ist mein container so also warum ist mein docker so im arsch das dort net da drin immer

02:29:32.600 --> 02:29:39.440
gibt sagen die muss ich nicht verstehen das ganz schön langsam was ist mit dem mir los

02:29:39.440 --> 02:29:47.040
guckt euch das mal an ne wobei ist er nicht er hat total immerhin noch ein paar ist bloß

02:29:47.040 --> 02:29:55.560
das große zeug am anfang guck mal das relativ relativ schnell und der ganze shit weil so

02:29:55.560 --> 02:30:01.640
schnell ist er nicht hier schaut mal das ein paar ne da ist ziemlich langsam sogar mir

02:30:01.640 --> 02:30:24.440
aus eine güde da ist der ist nicht schnell

02:30:24.440 --> 02:30:33.400
also bunte image hat vieles net was standard ist und weiter ja es liegt bestimmt am battlefield

02:30:33.400 --> 02:30:44.400
muss ich den cupanates cluster erst deployen dass es wieder geht aber aber nicht nicht

02:30:44.400 --> 02:30:51.320
lokal also mindestens mal bei drei verschiedenen cloud provider dann ist es da sind die container

02:30:51.320 --> 02:31:00.040
vielleicht zufriedengestellt dann geht dann geht mein docker auch wieder aber das hatte

02:31:00.040 --> 02:31:03.880
ich auch noch nicht dass es so kaputt ist das muss das kann ja im endeffekt nur was

02:31:03.880 --> 02:31:11.880
damit zu ja ja importieren das kann im endeffekt nur was damit zu tun haben dass ich irgendwelche

02:31:11.880 --> 02:31:24.880
q emo sachen installiert habe was haben eigentlich für eine kernel version drauf also ich habe

02:31:24.880 --> 02:31:35.400
ja kein man da rum aber art offizielles arch beide jetzt du du du du du du du du du du

02:31:35.400 --> 02:31:56.960
du du du du so und jetzt schauen wir gleich ob es funktioniert auf ja gibt uns viel muss

02:31:56.960 --> 02:32:04.920
mal schief gucken haben wir so also installiert jetzt aber

02:32:04.920 --> 02:32:24.120
wischl studio code brauchen wir auch noch ähm wie heißt denn der krämpel ja ob ob elektron 9

02:32:24.120 --> 02:32:40.600
geh weg so mk dir tem das wenigstens gleich dumme verzeichnisse bei beidem machen dass

02:32:40.600 --> 02:32:52.400
ich miss merken kann fast doch auf einmal muss ich noch neu starten wegen köln update so ich

02:32:52.400 --> 02:32:57.800
habe noch gar keine wischl studio code kommt ist das ist das comic sans was das für eine

02:32:57.800 --> 02:33:14.640
standardschrift sieht aber abartig schlecht aus und ne settings stellt man das überhaupt ein

02:33:14.640 --> 02:33:39.520
fond hack hack ist der beste font beste hack 20 oder sara schon näher 28 wie groß 24 ja

02:33:39.520 --> 02:33:46.920
es ist aber nicht der font ist auch nicht hackers hack

02:33:46.920 --> 02:33:54.320
habe ich das nicht installiert

02:33:54.320 --> 02:34:08.360
kein hack font wie ging das font config font cache font cache oder so

02:34:08.360 --> 02:34:23.000
fc font cache oder list hack ist doch drauf da hack font oder muss ich hack regular nennen

02:34:23.000 --> 02:34:28.560
das was er kennt habe ich eigentlich für ein dreckiges terminal chat was habt ihr mir da für

02:34:28.560 --> 02:34:35.920
terminal i was das kann man nicht mal rechts klingen was habe ich da installiert was habt

02:34:35.920 --> 02:34:44.080
ihr mir da empfohlen

02:34:44.080 --> 02:34:49.560
ja aber auch nicht besser aus ich weiß nicht mal wie ich meine schrift hat

02:34:49.560 --> 02:35:00.960
meine schrift hat funktioniert richtig ekliges terminal ok reboot

02:35:00.960 --> 02:35:09.000
moment es ist pc speaker ist auch noch alles wird ja immer schlimmer wie soll man diese

02:35:09.000 --> 02:35:10.400
form für irgendwas verwenden

02:35:10.400 --> 02:35:21.440
was mit was für unfertigen sachen müssen wir uns in hier rumschlagen ist das way das ist i3

02:35:21.440 --> 02:35:28.080
weil weyland und sway nicht in vm war funktioniert gescheit so viel zu

02:35:28.080 --> 02:35:40.320
weyland wird x ersetzt also ok das stimmt nicht ganz was ich gesagt habe weyland funktioniert

02:35:40.320 --> 02:35:46.680
in vmw wenn man nichts möchte also wenn es einem nichts ausmacht dass ein screen nicht

02:35:46.680 --> 02:35:52.440
refreshed also wenn ihr mit null fps leben könnt wie sich euer desktop aufbaut dann geht

02:35:52.440 --> 02:36:10.560
weyland auch und ich meine wirklich null fps der screen refreshed nicht

02:36:10.560 --> 02:36:15.120
es ist nicht ein frame es sind wirklich null frames der bildschirm baut sich nicht auf

02:36:15.120 --> 02:36:18.840
es gibt ein workaround mit environment variablen aber dann stellt man fest dass copy paste

02:36:18.840 --> 02:36:28.960
nicht funktioniert es ist komplett für arsch unbenutzbar docker bild

02:36:28.960 --> 02:36:41.640
oje system ctl restart docker ach ich bin ich in der docker group sag das doch gleich

02:36:41.640 --> 02:36:53.160
muss in die docker group user mod chat wer hat es im kopf wer ist so six headache docker

02:36:53.160 --> 02:37:06.440
max so war das richtig ja tatsächlich muss man muss man irgendwie x neu starten dass

02:37:06.440 --> 02:37:33.760
das funktioniert kommen die docker group das läuft überhaupt net enable docker permission

02:37:33.760 --> 02:37:42.160
denied so aber als root sollte es gehen und ich bin jetzt in der in der group drinne wahrscheinlich

02:37:42.160 --> 02:38:02.560
wahrscheinlich muss ich mich noch mal ausfragen es sei es genau so können wir jetzt anfangen

02:38:02.560 --> 02:38:24.280
please ich bin ja docker group wie kann ich wie kann ich permission denied haben ok wisst

02:38:24.280 --> 02:38:40.640
ihr was ist mir egal

02:38:40.640 --> 02:39:05.720
war war run docker ach arminus g was ist nur minus g passt doch was ist der unterschied

02:39:05.720 --> 02:39:17.040
zu minus g und arminus g so du minus logins skript zu starten ich bin doch in der docker

02:39:17.040 --> 02:39:40.960
group ist append na ja mein große unterschied sollte es eigentlich machen oder nur g ist

02:39:40.960 --> 02:39:51.920
taubgruppe habe ich meinen user jetzt irgendwie kaputt gemacht oder ich frage ist jetzt viel

02:39:51.920 --> 02:40:13.040
eher ist viel eher warum geht der scheiß net es gehört der dockergruppe und ich bin

02:40:13.040 --> 02:40:18.840
in der dockergruppe ich habe schon gelockt ich kann rebooten war keck aber das willst

02:40:18.840 --> 02:40:27.440
nicht bringen ich habe schon gelockt aller pc speaker ich habe schon gelockt man das

02:40:27.440 --> 02:40:33.720
irgendwie machen wir ja wir gucken gerade mit genau du hast recht wir gucken ob das funktioniert

02:40:33.720 --> 02:40:58.680
easy easy einfach einfach rebooten einfach rebooten kein ding kein thema easy so mal

02:40:58.680 --> 02:41:19.960
gucken ob unser dotnet bild jetzt funktioniert docker bild punkt hart hopp schauen wir mal

02:41:19.960 --> 02:41:35.240
er flutscht schon deutlich schneller

02:41:35.240 --> 02:41:58.560
ja gib ihm gib ihm das kann doch nicht sein dass das hängt

02:41:58.560 --> 02:42:10.200
es ist aber ist die docker version verpackt oder was ich habe hunderte container gebaut

02:42:10.200 --> 02:42:18.880
mit dort net drinnen und die haben nie die hängen nicht warum warum hängt das das ist

02:42:18.880 --> 02:42:28.840
eine neue v was jetzt das ist eine neue vm das ding frisst endloschleife speicher und

02:42:28.840 --> 02:42:35.920
alles ok das verstehe das ist irgendwie vielleicht ist irgendwas mit der dockerversion downgrade

02:42:35.920 --> 02:43:02.960
aber das so da war es downgrade ich glaube es war downgrade downgrade docker ja ja so

02:43:02.960 --> 02:43:10.280
was nennt man da jetzt die da vor die da

02:43:32.960 --> 02:43:47.880
hängt wieder also jetzt blicke ich dann mal durch das ist mir jetzt zu hoch docker bild

02:43:47.880 --> 02:43:52.480
ist einfach ist pro geht nicht mehr also dort net wohlgemerkt nur dort net docker bild geht

02:43:52.480 --> 02:44:11.880
nicht mehr ist kaputt und frisst meinen kompletten ram restore das das leht irgendwelche das

02:44:11.880 --> 02:44:16.160
das leht irgendwelche abhängigkeiten oder so aber das egal es hängt nicht nur beim

02:44:16.160 --> 02:44:30.280
restore wobei warte mal hat microsoft bei nuke hat probleme was in zeite 13 steht dort

02:44:30.280 --> 02:44:47.360
net publish die ms images die gehen auch nicht daraufhin habe ich erstmal ein eigenes gemacht

02:44:47.360 --> 02:44:53.280
also ich meine wir können ausschließen wir können ausschließen dass es irgendwie an

02:44:53.280 --> 02:45:02.800
microsoft liegt weil wenn ich es lokal bei mir installier geht alles das ist die neue

02:45:02.800 --> 02:45:12.880
vm es geht nirgendswo und ich habe keine ahnung warum guck ich kann es mal lokal machen

02:45:12.880 --> 02:45:35.840
jetzt

02:45:35.840 --> 02:46:04.240
ist aber aber hyper hyper advanced easy geht einfach leute das verzeichnis ist doch vollkommen

02:46:04.240 --> 02:46:10.920
egal der darf nicht hängen der muss einfach abkacken oder durchlaufen in ein paar sekunden

02:46:10.920 --> 02:46:18.040
oder macht nichts davon er hängt was glaube ich unsinnig ist ich weiß nicht warum der

02:46:18.040 --> 02:46:23.480
hängt also ich habe wirklich keine keine keine wirklich absolut keine sinnvolle erklärung

02:46:23.480 --> 02:46:34.840
dafür gerade zumal er manchmal ja wohl auch durchläuft also bei microsoft ist alles gut

02:46:34.840 --> 02:46:40.720
sonst wird das nicht funktionieren wir machen noch mal was anderes gehen wir mit also da

02:46:40.720 --> 02:46:53.600
vor ihm liegt schon mal net darf sich mal wieder verabschieden wir machen was anderes also

02:46:53.600 --> 02:47:05.320
wir starten den krempel noch mal interaktiv das hat das letzte mal funktioniert das ist

02:47:05.320 --> 02:47:09.160
doch überhaupt nicht das eigentlich wollte ich was ganz anderes machen aber dazu brauche

02:47:09.160 --> 02:47:15.080
wir funktionieren aus docker über irgendwas zum container bauen und ja geht ab action

02:47:15.080 --> 02:47:20.480
wird garantiert funktionieren weil bei mir lokal funktioniert auch im container funktioniert

02:47:20.480 --> 02:47:42.000
es nicht der gibt doch keinen sinn rewrite in rust genau so an docker selbst liegt auch

02:47:42.000 --> 02:47:49.640
nicht es liegt an docker bild wenn ich in bild mache klappt es nicht wenn ich es interaktiv

02:47:49.640 --> 02:47:58.640
ausführe klappt es wo ist denn da jetzt der sinn was soll was soll denn das für einen

02:47:58.640 --> 02:48:10.400
fehler bitteschön sein in zwei vms unabhängig voneinander geht es nicht aber interaktiv

02:48:10.400 --> 02:48:24.280
gehts das leuchtet mir nicht ein wozu denn wirkt ihr mann leute wenn ihr backseat macht

02:48:24.280 --> 02:48:45.840
bewegt mal ein bisschen gedanken auch diese fehler sind sehr merkwürdig ergibt überhaupt

02:48:45.840 --> 02:48:54.560
ist doch irgendwie habe ich da irgendwie den sinn irgendwo den schreibfehler ok wisst

02:48:54.560 --> 02:49:05.280
ihr was wir machen das wisst ihr was wir machen mann komplett neues docker fall das

02:49:05.280 --> 02:49:21.360
legt ein neues dotnet projekt an so wir nehmen das wir nehmen das das microsoft image wieder

02:49:21.360 --> 02:49:25.640
wir legen komplett neues docker fall an vielleicht sind da irgendwelche sonderzeichen drin oder

02:49:25.640 --> 02:49:36.680
so keine ahnung mittlerweile muss man ja muss man ja echt wirklich an alles an alles denken

02:49:36.680 --> 02:49:46.000
mann alpin bild auch gut wunderbar ok dotnet new console run soll mal gucken ob das wenigstens

02:49:46.000 --> 02:49:56.720
funktioniert docker bild wir machen ok wir machen wir machen zumindest slash blub benutzte

02:49:56.720 --> 02:50:12.640
jetzt wirklich anders so dass zumindest bis zu dem schritt sollte es ja funktionieren

02:50:12.640 --> 02:50:31.560
bei public hat er ja auch schmerzen gehabt das hängt schon zu lange

02:50:31.560 --> 02:50:55.960
das ist äußerst sus leute dass es interaktiv funktioniert aber hier drinnen nett und dass

02:50:55.960 --> 02:51:06.280
er da einfach komplett hängt was damit na ja minus das kommt aufs gleiche raus minus

02:51:06.280 --> 02:51:12.720
o ist einfach nur wie das heißt beziehungsweise glaubt welches verzeichnis das ist es darf

02:51:12.720 --> 02:51:24.800
auf jeden fall nicht in einer endlosschleife hängen was könnte das denn sein also ich

02:51:24.800 --> 02:51:36.320
hab wirklich gar keine ahnung was macht minus n keine ahnung wahrscheinlich wie die wahrscheinlich

02:51:36.320 --> 02:51:46.960
wie das der name space heißt oder so viel minimalistischer geht es doch nicht mehr das

02:51:46.960 --> 02:52:07.880
muss irgendwie das muss irgendwas am rechner sein jetzt hier gerade wirklich kein plan

02:52:07.880 --> 02:52:29.480
das mit wirkt ihr läuft das ist von 2021 das kann ich sein dass es da dran liegt ich

02:52:29.480 --> 02:52:34.680
meine wir können wirkt ihr angeben aber das wie gesagt er hängt ja er hat ja keine fehler

02:52:34.680 --> 02:52:42.000
er hängt was im endeffekt heißt dass es kein irgendwie falsch konfiguriert sondern

02:52:42.000 --> 02:52:46.840
er versucht was zu machen aber es geht nicht was schreibt der typ hier im issue zeigt

02:52:46.840 --> 02:52:54.040
mal her ist auch nur ansatzweise mal gucken wie gut gebackseated wird jetzt docker bild

02:52:54.040 --> 02:53:01.400
stack und dort net restore also ich habe das auf die an und weise wie ich das hier schon

02:53:01.400 --> 02:53:06.800
gemacht hat 100 mal gemacht das funktioniert das sind zwei zeilen also sie kriege ich schon

02:53:06.800 --> 02:53:17.080
noch hin

02:53:17.080 --> 02:53:30.120
nochmal kurz testen ob das jetzt ob es funktioniert und am anfang des streams hat es auch noch

02:53:30.120 --> 02:53:37.600
funktioniert dass ja das geile anfang des streams hat es noch geklappt leute genau so

02:53:37.600 --> 02:54:06.760
übrigens es hat ja auf einmal aufgehört zu funktionieren setzten wir mal wirkt ihr

02:54:06.760 --> 02:54:34.320
das kann aber nicht die lösung sein

02:54:34.320 --> 02:54:46.400
es hat am anfang des streams funktioniert ich kann es euch wenn sie das geile ist ich

02:54:46.400 --> 02:55:07.920
habe es ja sogar im wort so ich habe ich habe später erst angefangen hier so so irgendwo

02:55:07.920 --> 02:55:23.720
da ok guckt da haben wir noch was vergessen zu installieren

02:55:23.720 --> 02:55:44.440
wort seating

02:55:44.440 --> 02:55:50.120
ich gebe da nie wirkt ihr an ich habe den kram schon öfters ich habe das erst heute

02:55:50.120 --> 02:56:04.040
morgen gemacht ohne wirkt ihr

02:56:04.040 --> 02:56:17.720
anderes grund image ich weiß es nicht was es war das war das war auch das war ein debian

02:56:17.720 --> 02:56:37.200
bullseye heute morgen

02:56:37.200 --> 02:57:02.400
normalerweise funktioniert das auch

02:57:02.400 --> 02:57:11.160
guckt da hat es funktioniert

02:57:11.160 --> 02:57:18.280
konsole restoring das hat funktioniert das das ging dann weiter irgendwann so nach fünf

02:57:18.280 --> 02:57:25.840
minuten oder so war es dann fertig aber ja guck guck das lief das ging vor der stunde ging

02:57:25.840 --> 02:57:37.040
das image noch das dockerfile genau das gleiche das ging vor der stunde noch ich habe es

02:57:37.040 --> 02:57:59.200
auf wort ich habe es auf wort wo habe ich das wort auf gehabt ja ich habe es ich habe

02:57:59.200 --> 02:58:10.960
es auf wort dass es ging

02:58:10.960 --> 02:58:35.600
da gibt es nicht viel zu scan ich verstehe ich habe das guck mal selbst selbst mein image

02:58:35.600 --> 02:58:56.120
selbst mein image für mein home assistant addon hat das so gemacht

02:58:56.120 --> 02:59:00.680
hier guckt mal selbst mein image für home assistant hat es exakt so gemacht mit dem

02:59:00.680 --> 02:59:15.840
install und dann in dem im run file das ausgeführt sehr sehr sehr weird weird champig alles und

02:59:15.840 --> 02:59:40.240
wirkt die app es gibt noch nicht mal eine app

02:59:40.240 --> 03:00:07.280
äh wat achso jaja weird champ wat achso ah äh ähm run apt update install curl wie ist

03:00:07.280 --> 03:00:13.040
der krempel da jetzt irgendjemand wusste es doch noch oder äh achten achten neunzig

03:00:13.040 --> 03:00:19.320
achten sieben siebenundsechzig siebzig ne ne bei bullseye war es nicht ich kann noch

03:00:19.320 --> 03:00:42.040
im stem gucken hier siebenundsechzig siebenundsechzig alles klar kann weg bei sieben ich habe den

03:00:42.040 --> 03:00:52.920
beweis auf wie es hat funktioniert äh gut das ist jetzt die arm geschichte und mein

03:00:52.920 --> 03:01:09.800
image hat ja auch funktioniert auf exakt die die was verstehe ich nicht es hängt wieder

03:01:09.800 --> 03:01:18.160
das gleiche was vor einer stunde noch funktioniert hat ist jetzt kaputt geil oder wahnsinn

03:01:39.800 --> 03:01:52.200
mal ganz davon abgesehen viel zu durchsuchen gibt es ja bei dem image noch nicht mal das

03:01:52.200 --> 03:01:57.840
ist das ist was an guck mal der kram der frisst einfach unendlich viel ram das ist irgendeine

03:01:57.840 --> 03:02:04.200
endloschleife mit memory leak wo das ding drinne hängt was merkwürdig ist tatsächlich dass

03:02:04.200 --> 03:02:11.320
ich das durch ein werk dir und selbst wenn es das nicht gibt anscheinend fixen lässt

03:02:11.320 --> 03:02:26.360
oder am ist ich jetzt nach dem install machen sollen naja und noch was anderes wenn man

03:02:26.360 --> 03:02:38.760
das offizielle image verwendet geht das mit wirkt ihr scheint anscheinend so wirklich

03:02:38.760 --> 03:02:45.880
zu funktionieren aber es ging vorher doch auch ich jetzt also ich ich verstehe es wirklich

03:02:45.880 --> 03:02:51.880
ich hab es ich setze nie wirkt das wirkt ihr dafür das klappt normalerweise immer es hat

03:02:51.880 --> 03:03:05.520
im stream vorher funktioniert

03:03:05.520 --> 03:03:30.000
das auch immer ist doch kabel also das ist alles sehr merkwürdig

03:03:30.000 --> 03:03:47.960
das ist alles sehr merkwürdig

03:03:47.960 --> 03:04:01.400
keine ahnung also

03:04:01.400 --> 03:04:07.560
ne ich mach jetzt nix mit github actions das verstehe ich absolut nicht

03:04:07.560 --> 03:04:20.120
wenn ich es ja nicht die letzte woche fast täglich benutzt hätte ohne wirkt ihr ich

03:04:20.120 --> 03:04:26.280
habe die letzten zwei wochen an diesem addon hier rum gebastelt und das dockerfile hatte

03:04:26.280 --> 03:04:43.320
kein wirkt ihr und hat funktioniert

03:04:43.320 --> 03:04:57.320
gut das ist ein alpin aber im stream hat sie auch funktioniert

03:04:57.320 --> 03:05:05.320
es hängt ja aber was für ein bug ich meine in was ich habe doch auch nichts anderes großartig

03:05:05.320 --> 03:05:21.240
weißte was so blablabla bild from wir brauchen ihn alpin können wir einfach mal alpin so das

03:05:21.240 --> 03:05:37.360
brauchen wir nicht das brauchen wir auch nicht das brauchen wir auch nicht so so einem alpin

03:05:37.360 --> 03:05:53.720
hat

03:05:53.720 --> 03:06:17.280
Ach da fehlt, da fehlt jetzt die, na geil Weiß was ich, was die da für ein Base

03:06:17.280 --> 03:06:36.760
Image für nehme, na geht. Ich hätte doch schon in das Problem reinlaufen müssen,

03:06:36.760 --> 03:06:47.160
dass ich das nicht läuft. Was, was ist das? Guckt mal, das ist das gleiche Image wie

03:06:47.160 --> 03:07:09.600
mein Erron verwendet hat und das geht. Also das verstehe ich. Also jetzt ist so die Zeit

03:07:09.600 --> 03:07:15.720
für Verschwörungstheorien. So gibt es nicht so eine Verschwörungstheorie, dass die Welt

03:07:15.720 --> 03:07:23.960
sich permanent ändert und keiner, ach nee Moment, die Welt ändert sich permanent, also

03:07:23.960 --> 03:07:30.520
auch geografisch und so und von ihren Eigenschaften, aber alle Aufzeichnungen darüber ändern sich

03:07:30.520 --> 03:07:35.520
mit und das einzige was übrig bleibt ist die Erinnerung der Leute an das wie es vorher

03:07:35.520 --> 03:07:54.240
war und niemand anderes kann sich dran erinnern. So ist es. Das würde jetzt echt dazu passen.

03:07:54.240 --> 03:08:12.420
So.

03:08:24.240 --> 03:08:29.840
Wait a minute, wenn man Minus O angibt, dann geht das auch?

03:08:29.840 --> 03:08:36.400
Ja gut, das kann sein, dass ich normal Minus O...

03:08:36.400 --> 03:08:38.640
Das ist doch irgendein komischer Bug, oder?

03:08:38.640 --> 03:08:43.040
Da haben wir kein Work-Deal mehr angegeben.

03:08:43.040 --> 03:08:55.640
Was?

03:08:55.640 --> 03:09:01.760
Wenn ich Minus O mache, ist was?

03:09:01.760 --> 03:09:04.320
Ist da heiß in die Solution Minus?

03:09:04.320 --> 03:09:16.480
Was macht Minus O?

03:09:16.480 --> 03:09:18.840
Ich dachte, das ist das Outpot-Verzeichnis.

03:09:18.840 --> 03:09:21.600
Da sind wir doch.

03:09:21.600 --> 03:09:34.960
Ah, richtig, so.

03:09:34.960 --> 03:10:00.120
Hey, da ist der Tool!

03:10:30.120 --> 03:10:32.120
Wait a minute.

03:10:32.120 --> 03:10:34.120
Habe ich das überhaupt so gemacht?

03:10:38.120 --> 03:10:40.120
Wartet mal, das kann sein.

03:10:48.120 --> 03:10:50.120
Ich glaub...

03:10:50.120 --> 03:11:02.120
Ich glaub, das ist es.

03:11:02.120 --> 03:11:06.120
Wartet mal, ich glaube...

03:11:06.120 --> 03:11:08.120
Ich hab das normalerweise so gemacht.

03:11:08.120 --> 03:11:26.120
Aber dann muss man doch irgendwie anders.

03:11:26.120 --> 03:11:28.120
Ich glaub, das ist es.

03:11:28.120 --> 03:11:30.120
Wobei, aber dann sollte es doch nicht hängen.

03:11:30.120 --> 03:11:34.120
Nee, das ist das Problem, warum das Publish nicht geht.

03:11:34.120 --> 03:11:36.120
Aber jetzt mal ernsthaft.

03:11:36.120 --> 03:11:42.120
Ja doch, das kann sein.

03:11:42.120 --> 03:11:44.120
Ich glaube, ich hab das tatsächlich nie exakt so gemacht.

03:11:44.120 --> 03:11:50.120
Weil normalerweise kopierst du ja was rein, was schon da ist.

03:11:50.120 --> 03:11:52.120
Und machst da drin keine neue Anwendung.

03:11:52.120 --> 03:11:54.120
So.

03:11:54.120 --> 03:12:00.120
Und wenn das CD nicht funktioniert,

03:12:00.120 --> 03:12:08.120
dann legt der das hier in Slash an.

03:12:08.120 --> 03:12:10.120
So.

03:12:10.120 --> 03:12:12.120
Und das führt dazu, dass er hängt?

03:12:12.120 --> 03:12:16.120
Ja.

03:12:16.120 --> 03:12:20.120
Genau.

03:12:20.120 --> 03:12:24.120
Wenn du...

03:12:24.120 --> 03:12:26.120
Ach so.

03:12:26.120 --> 03:12:28.120
Deswegen fix das, das wirkt dir auch.

03:12:28.120 --> 03:12:36.120
Ja, okay, das ergibt Sinn.

03:12:36.120 --> 03:12:40.120
Weil normalerweise kopier ich den Kram ja da rein.

03:12:40.120 --> 03:12:42.120
Und leg da nichts an.

03:12:42.120 --> 03:12:44.120
Das hab ich jetzt...

03:12:44.120 --> 03:12:46.120
Ich mein, wer macht so was?

03:12:46.120 --> 03:12:48.120
Das ist halt unsinnig.

03:12:48.120 --> 03:12:50.120
Das war jetzt nur zum Testen.

03:12:50.120 --> 03:12:52.120
Das hab ich normalerweise nicht im Dockerfall drinstehen.

03:12:52.120 --> 03:12:54.120
Okay, das hängt an der Stelle.

03:12:54.120 --> 03:12:58.120
Aber ich hab's im Watt, wo es funktioniert hat vorhin.

03:12:58.120 --> 03:13:04.120
Das ist ja noch besser.

03:13:04.120 --> 03:13:06.120
Es hat ja vorhin schon funktioniert.

03:13:06.120 --> 03:13:08.120
Das versteh ich nicht.

03:13:08.120 --> 03:13:10.120
Aber okay, jetzt leuchtet es mir zumindest einfach, warum das hängt.

03:13:10.120 --> 03:13:14.120
So, wenn ich in Output angebe, hier irgendwie Slash App,

03:13:14.120 --> 03:13:20.120
was man glaube ich an der Stelle gar nicht mehr braucht.

03:13:20.120 --> 03:13:22.120
Dann funs das, genau.

03:13:22.120 --> 03:13:24.120
So.

03:13:24.120 --> 03:13:26.120
Und jetzt funktioniert das nämlich auch mit dem offiziellen Image.

03:13:26.120 --> 03:13:30.120
Wahrscheinlich wieder.

03:13:30.120 --> 03:13:32.120
Aber das dann einfach in irgendeine...

03:13:32.120 --> 03:13:36.120
Warum hängt denn der überhaupt?

03:13:36.120 --> 03:13:38.120
Und sagt nicht irgendwie Fehler beim Stellen oder sowas?

03:13:38.120 --> 03:13:44.120
Warum hängt das Ding einfach und frisst und endlich viel Speicher?

03:13:44.120 --> 03:13:52.120
So hundertprozentig verstanden hab ich es aber immer noch nicht.

03:13:52.120 --> 03:13:56.120
Gut, das sieht jetzt natürlich eher aus wie das, was ich sonst drinstehen hab.

03:13:56.120 --> 03:13:58.120
Unter anderem hier auch bei diesem Addon.

03:13:58.120 --> 03:14:02.120
Warum ich es hier aber einmal hatte, wo es funktioniert hat, verstehe ich nicht.

03:14:02.120 --> 03:14:04.120
Okay, was auch immer.

03:14:04.120 --> 03:14:08.120
So eigentlich war ja das Ziel, wir wollten einen Armcontainer bauen.

03:14:08.120 --> 03:14:12.120
Und das da drin ausführen.

03:14:12.120 --> 03:14:16.120
Okay, dann machen wir jetzt SDK.

03:14:16.120 --> 03:14:18.120
Hier, From.

03:14:18.120 --> 03:14:20.120
Da können wir uns nämlich den ganzen Crampel sparen.

03:14:20.120 --> 03:14:22.120
SDK.

03:14:22.120 --> 03:14:26.120
Machen wir wieder ein Alpine Container, da ist er immer schön klein.

03:14:26.120 --> 03:14:30.120
Da können wir uns diesen ganzen Crampel sparen.

03:14:30.120 --> 03:14:32.120
So.

03:14:32.120 --> 03:14:34.120
.net.

03:14:34.120 --> 03:14:36.120
.net.

03:14:36.120 --> 03:14:44.120
Das sieht besser aus, ja.

03:14:44.120 --> 03:14:50.120
Okay, es funzt, es funzt, es funzt, es funzt, okay, okay.

03:14:50.120 --> 03:14:52.120
Okay, so.

03:14:52.120 --> 03:14:58.120
Mein Bild X wird immer noch nicht funktionieren, weil nach wie vor.

03:14:58.120 --> 03:15:08.120
.net verbackt es auf ARMv7.

03:15:08.120 --> 03:15:10.120
So, auf ARM64 wird es funktionieren.

03:15:10.120 --> 03:15:15.120
Ach nee, Moment, wir haben den Crampel immer noch nicht installiert für Armcontainer zu bilden.

03:15:15.120 --> 03:15:19.120
Ja, machen wir gleich, machen wir gleich.

03:15:19.120 --> 03:15:27.120
Da, der ist mal runter.

03:15:27.120 --> 03:15:29.120
Ja, voll das, wie heißt das?

03:15:29.120 --> 03:15:31.120
FMT Install All.

03:15:31.120 --> 03:15:35.120
Alles klar, Obvious.

03:15:35.120 --> 03:15:38.120
Tony, welcher Tony ist es?

03:15:38.120 --> 03:15:45.120
Tony Stigge.

03:15:45.120 --> 03:15:59.120
So, ARM64 sollte tun.

03:15:59.120 --> 03:16:03.120
Ah.

03:16:03.120 --> 03:16:04.120
Genau, hier.

03:16:04.120 --> 03:16:06.120
QEMU, bla bla bla.

03:16:06.120 --> 03:16:12.120
So einfach könnte der Build sein übrigens, wenn.net nicht verbackt wäre unter ARMv7.

03:16:12.120 --> 03:16:19.120
Mein, es ist jetzt langsam, aber das ist okay.

03:16:19.120 --> 03:16:22.120
Guck hier.

03:16:22.120 --> 03:16:23.120
Funzt.

03:16:23.120 --> 03:16:30.120
Jetzt haben wir ein ARM64-Spitbild.

03:16:30.120 --> 03:16:33.120
Und jetzt, oh, oh, da haben wir nicht.

03:16:33.120 --> 03:16:37.120
MonkaS.

03:16:37.120 --> 03:16:41.120
Ja, okay, also auch unter ARM64 ist es verbackt.

03:16:41.120 --> 03:16:43.120
Nice.

03:16:43.120 --> 03:16:45.120
Sehr schön.

03:16:45.120 --> 03:16:50.120
Perfekt.

03:16:50.120 --> 03:16:58.120
Die Katze, das ist meine.

03:16:58.120 --> 03:17:02.120
Linux slash ARMv7.

03:17:02.120 --> 03:17:18.120
Also, sowohl der Build unter ARM64-Spit, ARMv8, als auch der Build unter ARM32v7 ist verbackt.

03:17:18.120 --> 03:17:21.120
Das ist natürlich ganz besonders toll.

03:17:21.120 --> 03:17:27.120
Also wohlgemerkt im Emulator, ja.

03:17:27.120 --> 03:17:29.120
Direkt auf der Hardware funktioniert das.

03:17:29.120 --> 03:17:32.120
Wenn ihr jetzt auf dem Raspberry Pi seid und das ausführt, ist gar kein Ding.

03:17:32.120 --> 03:17:37.120
Das funktioniert.

03:17:37.120 --> 03:17:50.120
Aber im Emulator ist broken AF.

03:17:50.120 --> 03:17:54.120
Guck hier.

03:17:54.120 --> 03:18:11.120
Normale QEMO mag nicht.

03:18:11.120 --> 03:18:25.120
Genau.

03:18:25.120 --> 03:18:30.120
Also es war unter ARM64-Spit verbackt.

03:18:30.120 --> 03:18:32.120
Dementsprechend unser 2-3-Spit auch verbackt.

03:18:32.120 --> 03:18:36.120
Braucht aber wahrscheinlich einfach bloß länger für, guck mal, 60-60.

03:18:36.120 --> 03:18:42.120
Normalerweise ist es 5 Sekunden, hier dauert es 75.

03:18:42.120 --> 03:18:46.120
Ach ja, und was ich festgestellt habe, ist, im Emulator crasht er manchmal.

03:18:46.120 --> 03:18:53.120
Also nicht crashen, da hängt er manchmal wirklich unendlich lang mit 100% CPU-Lass.

03:18:53.120 --> 03:18:54.120
Das habe ich schon mal gesehen.

03:18:54.120 --> 03:19:00.120
Deswegen im Emulator, also unter QEMO-Builden ist es halt crap mit.NET.

03:19:00.120 --> 03:19:06.120
Ich weiß nicht warum, so ziemlich alles andere bildet, aber.NET hat kein Bock.

03:19:06.120 --> 03:19:08.120
Zu wirklich brauchen tut man es ja auch nicht.

03:19:08.120 --> 03:19:11.120
Es wäre halt cool, wenn man ein Docker-File hat für alle Plattformen.

03:19:11.120 --> 03:19:19.120
Ansonsten bräuchte man halt für jede eins, weil es nicht ordentlich funktioniert.

03:19:19.120 --> 03:19:28.120
Chat, soll ich mal abbrechen?

03:19:28.120 --> 03:19:33.120
Ich habe das blöde Gefühl, das tut nicht mehr.

03:19:33.120 --> 03:19:37.120
Wie kriegen wir da jetzt ein altes QEMO drauf?

03:19:37.120 --> 03:19:43.120
Angeblich geht das ja mit...

03:19:43.120 --> 03:19:45.120
Wie heißt der Kram? Bin?

03:19:45.120 --> 03:19:52.120
Okay, das da will ich haben mit QEMO 4.

03:19:52.120 --> 03:19:56.120
4.1.

03:19:56.120 --> 03:20:02.120
Das gibt es aber nicht mit QEMO 4.1.

03:20:02.120 --> 03:20:04.120
Ey, das ist broken, das ist kaputt.

03:20:04.120 --> 03:20:12.120
Das hängt.

03:20:12.120 --> 03:20:13.120
Können wir was anderes ausprobieren?

03:20:13.120 --> 03:20:16.120
Das habe ich auch schon mir vorhin rausgesucht.

03:20:16.120 --> 03:20:25.120
Es gibt noch ein anderes Projekt, das heißt Multiarch QEMO.

03:20:25.120 --> 03:20:32.120
Da kann man auch irgendwie Arm-CPU auf AMD 64 emulieren.

03:20:32.120 --> 03:20:37.120
Und dann gucken wir mal.

03:20:37.120 --> 03:20:44.120
Vielleicht hat das ja QEMO 4.

03:20:44.120 --> 03:20:46.120
Tags.

03:20:46.120 --> 03:20:49.120
Was haben wir denn hier? Minus 4?

03:20:49.120 --> 03:20:52.120
Nee, nee, nee, wir brauchen 4.1.

03:20:52.120 --> 03:20:56.120
Hey, QEMO 4.1 am Start.

03:20:56.120 --> 03:20:58.120
Das wollen wir haben.

03:20:58.120 --> 03:21:03.120
Also was? Multiarch QEMO, wie verwendet man den Krempel überhaupt?

03:21:03.120 --> 03:21:06.120
Das tut nicht hier.

03:21:06.120 --> 03:21:12.120
Wie verwendet man das überhaupt?

03:21:12.120 --> 03:21:14.120
Aha.

03:21:14.120 --> 03:21:16.120
Sollen wir abbrechen kurz?

03:21:16.120 --> 03:21:20.120
Ich hoffe, der Kram kommt sich jetzt nicht in die Quere.

03:21:20.120 --> 03:21:22.120
Dieses eine...

03:21:22.120 --> 03:21:24.120
Binary FMT und...

03:21:24.120 --> 03:21:28.120
Nee, anscheinend nicht.

03:21:28.120 --> 03:21:29.120
Und was kann man jetzt machen?

03:21:29.120 --> 03:21:45.120
Arm 64 und bunte. Okay, dann funktioniert es.

03:21:45.120 --> 03:21:46.120
So, jetzt haben wir das neueste.

03:21:46.120 --> 03:21:55.120
Das wird jetzt natürlich dann hier jetzt auch nicht funktionieren.

03:21:55.120 --> 03:22:03.120
Wenn KVM verwendet wird...

03:22:03.120 --> 03:22:09.120
KVM ist eigentlich...

03:22:09.120 --> 03:22:16.120
Nur dafür da... Also es ist für VMs auf der gleichen Architektur da.

03:22:16.120 --> 03:22:20.120
Also du kannst KVM, du kannst eine VM erstellen für...

03:22:20.120 --> 03:22:25.120
Du kannst eine x86 VM mit einer x86 CPU erstellen und sowas.

03:22:25.120 --> 03:22:30.120
Aber du kannst mit KVM glaube ich keine...

03:22:30.120 --> 03:22:38.120
Keine Arm CPU.

03:22:38.120 --> 03:22:46.120
Genau, das geht nämlich.

03:22:46.120 --> 03:22:48.120
Genau, das hat mit KVM nichts zu tun.

03:22:48.120 --> 03:23:01.120
Das ist dann das ist das Standard QEMO Zeug.

03:23:01.120 --> 03:23:11.120
Okay, das scheint unendlich lang zu hängen an der Stelle wieder.

03:23:11.120 --> 03:23:14.120
Nur kurz checken, dass das Docker Build an sich immer noch funktioniert.

03:23:14.120 --> 03:23:15.120
Ja, okay.

03:23:15.120 --> 03:23:17.120
Plattform...

03:23:17.120 --> 03:23:19.120
AMD 64.

03:23:19.120 --> 03:23:21.120
Das sollte jetzt auch durchlaufen.

03:23:21.120 --> 03:23:25.120
Ja, easy.

03:23:25.120 --> 03:23:30.120
Funktioniert noch alles, gut.

03:23:30.120 --> 03:23:31.120
So ARMv7.

03:23:31.120 --> 03:23:35.120
So, okay, dann machen wir mal das gleiche jetzt mit...

03:23:35.120 --> 03:23:36.120
Welcher Version?

03:23:36.120 --> 03:23:39.120
Haben wir 4 Punkt?

03:23:39.120 --> 03:23:46.120
Nee, oh Mist, jetzt hab ich's.

03:23:46.120 --> 03:23:50.120
Hab ich den Docker noch irgendwo auf?

03:23:50.120 --> 03:23:54.120
Multi.

03:23:54.120 --> 03:23:55.120
Ja, so, jetzt schauen wir mal.

03:23:55.120 --> 03:24:01.120
Mal gucken, ob das funktioniert mit 4.1.

03:24:01.120 --> 03:24:06.120
4.1.1, na alles klar.

03:24:06.120 --> 03:24:17.120
Einfach so hier als Tag hinten dran.

03:24:17.120 --> 03:24:20.120
Machen wir mal run.net restore.

03:24:20.120 --> 03:24:23.120
Das reicht ja wahrscheinlich schon.

03:24:23.120 --> 03:24:25.120
.net.

03:24:25.120 --> 03:24:26.120
Komm, wisst ihr was?

03:24:26.120 --> 03:24:27.120
Wisst ihr was?

03:24:27.120 --> 03:24:28.120
Wir machen einfach.net run.

03:24:28.120 --> 03:24:36.120
Dann sehen wir wenigstens, dass da schön Hello World hinten dran steht.

03:24:36.120 --> 03:24:39.120
CD slash App.

03:24:39.120 --> 03:24:48.120
Und und.net run.

03:24:48.120 --> 03:24:50.120
Da soll jetzt Hello World stehen, wenn es funktioniert.

03:24:50.120 --> 03:24:55.120
Hey!

03:24:55.120 --> 03:24:58.120
Okay, nochmal mit dem normalen.

03:24:58.120 --> 03:25:01.120
Ohne irgendwelche spezielle QEMO-Versionen.

03:25:01.120 --> 03:25:04.120
Bild X.

03:25:04.120 --> 03:25:07.120
X.

03:25:07.120 --> 03:25:11.120
Mal gucken.

03:25:11.120 --> 03:25:19.120
Oder hing das schon beim Console, beim Create?

03:25:19.120 --> 03:25:25.120
Nee, wir hängen jetzt an anderer Stelle.

03:25:25.120 --> 03:25:44.120
Wir hängen ja, wir hängen an anderer Stelle.

03:25:44.120 --> 03:25:52.120
Allein schon das Console anlegen dauert viel zu lang, trotz Emulation.

03:25:52.120 --> 03:25:56.120
Okay, ich mache jetzt die andere QEMO-Version und hoffe, dass es funktioniert.

03:25:56.120 --> 03:26:01.120
Was haben die hier nochmal an diesem Bugreport gesagt?

03:26:01.120 --> 03:26:02.120
Arm-V7-KVM.

03:26:02.120 --> 03:26:07.120
Ja, das ist wenn du es auf dem Raspberry Pi laufen lässt.

03:26:07.120 --> 03:26:08.120
Ja, das ist klar.

03:26:08.120 --> 03:26:16.120
Wenn du es in einer KVM-VM, also quasi eine Arm-VM auf einer Arm-Hardware laufen lässt,

03:26:16.120 --> 03:26:17.120
dann funktioniert es.

03:26:17.120 --> 03:26:18.120
Das ist klar.

03:26:18.120 --> 03:26:22.120
Habt ihr schon das?

03:26:22.120 --> 03:26:23.120
Nee, habe ich nicht.

03:26:23.120 --> 03:26:27.120
Guck mal, habe ich irgendwelche Questions übersehen?

03:26:27.120 --> 03:26:32.120
Wenn ich Leute, wenn ihr irgendwas wissen wollt oder irgendwelche anderen Themen habt,

03:26:32.120 --> 03:26:34.120
haust einfach mal in den Chat.

03:26:34.120 --> 03:26:39.120
Ich habe jetzt noch eine halbe Stunde, also bin ich vielleicht noch da.

03:26:39.120 --> 03:26:42.120
Ich habe jetzt auch langsam echt die Nase voll von Containerkrempel.

03:26:42.120 --> 03:26:44.120
Okay, das funktioniert auf jeden Fall nicht.

03:26:44.120 --> 03:26:54.120
So, wir machen jetzt Yes und das Ganze mit QEMO 4.1.1 und mal gucken, ob das jetzt funktioniert.

03:26:54.120 --> 03:26:59.120
Pass mal auf, jetzt haben wir die alte QEMO-Version, mit der es ja angeblich noch funktioniert.

03:26:59.120 --> 03:27:00.120
Wie lang?

03:27:00.120 --> 03:27:05.120
Gut, ich meinte so ziemlich alle Themen außer sowas, ja.

03:27:05.120 --> 03:27:09.120
Lang genug für Gatschi-Buzz.

03:27:09.120 --> 03:27:19.120
Aber jetzt hängt, da wobei man weiß nicht wirklich, ob es hängt, ja.

03:27:19.120 --> 03:27:21.120
Es ist halt einfach lahm.

03:27:21.120 --> 03:27:25.120
Vielleicht ist es auch ein Alpine-Gedöns.

03:27:25.120 --> 03:27:28.120
Wir machen das einfach mal nicht.

03:27:28.120 --> 03:27:30.120
Leute, ich glaube, ich habe eine Idee.

03:27:30.120 --> 03:27:31.120
Yes.

03:27:31.120 --> 03:27:36.120
Nur mal für den Fall der Fell, dass es jetzt irgendeine Alpine-Geschichte ist, dass es hängt.

03:27:36.120 --> 03:27:44.120
Machen wir jetzt Bullseye daraus, falls der Tag genauso ist.

03:27:44.120 --> 03:27:55.120
Ne.

03:27:55.120 --> 03:27:59.120
Bitte Google das mal.

03:27:59.120 --> 03:28:00.120
Was hat er?

03:28:00.120 --> 03:28:03.120
Kann man danach googeln oder Gatschi-Buzz?

03:28:03.120 --> 03:28:04.120
Ne.

03:28:04.120 --> 03:28:05.120
Gut.

03:28:05.120 --> 03:28:07.120
Was hat er denn getrieben?

03:28:07.120 --> 03:28:29.120
Moment.

03:28:29.120 --> 03:28:30.120
Bullseye Slim.

03:28:30.120 --> 03:28:38.120
Mein Gott, wie soll man auf so eine Slim?

03:28:38.120 --> 03:28:42.120
Jetzt.

03:28:42.120 --> 03:28:45.120
Vielleicht ist es ja mit Alpine-Linux verpackt.

03:28:45.120 --> 03:28:48.120
Wie haben wir heute so viel kaputtendes Zeug gehabt, man?

03:28:48.120 --> 03:28:52.120
Das ist doch alles nicht mehr normal, ey.

03:28:52.120 --> 03:28:54.120
Okay, also was ist da passiert?

03:28:54.120 --> 03:28:57.120
Zeig her.

03:28:57.120 --> 03:28:58.120
Okay.

03:28:58.120 --> 03:29:07.120
Zusammenfassung, TLDR.

03:29:07.120 --> 03:29:08.120
Das liegt...

03:29:08.120 --> 03:29:09.120
Okay.

03:29:09.120 --> 03:29:13.120
In der Show, in die von...

03:29:13.120 --> 03:29:18.120
... wurden die Verbindungen des BSI-Präsidenten zu einem obskuren Verein offengelegt, der mutmaßlich

03:29:18.120 --> 03:29:21.120
auch Kontakte zu russischen Geheimdiensten hat.

03:29:21.120 --> 03:29:26.120
Gründer und Präsident des Vereins war zwar bis 2016 der heutige BSI-Präsident.

03:29:26.120 --> 03:29:31.120
Der Verein nennt sich Cyber-Sicherheitsrat Deutschland e.V.

03:29:31.120 --> 03:29:33.120
Also e.V. klingt irgendwie schon so...

03:29:33.120 --> 03:29:36.120
Na gut, das heißt ja eigentlich nur eingetragener Verein, glaube.

03:29:36.120 --> 03:29:41.120
Aber klingt ja irgendwie schon so ein bisschen, als hätte da mal einer ein Auge drauf.

03:29:41.120 --> 03:29:45.120
So gerät mit seinem Namen Nähe zu offiziellen deutschen Regierungskreisen, hat aber nichts

03:29:45.120 --> 03:29:48.120
mit einem Cyber-Sicherheitsrat zu tun, der im Verteidigungsministerium angesiedelt ist.

03:29:48.120 --> 03:29:49.120
Na toll.

03:29:49.120 --> 03:29:51.120
Das ist ja auch geil.

03:29:51.120 --> 03:29:52.120
Denkst du dir beide...

03:29:52.120 --> 03:29:53.120
Oh.

03:29:53.120 --> 03:29:54.120
Crash.

03:29:54.120 --> 03:29:55.120
Gut.

03:29:55.120 --> 03:29:58.120
Also, das ist erwartet.

03:29:58.120 --> 03:30:04.120
.NET tut nicht mit dieser QEMO-Version.

03:30:04.120 --> 03:30:11.120
Dann nehmen wir doch mal die alte QEMO-Version und gucken, ob's mit der funktioniert.

03:30:11.120 --> 03:30:15.120
Chat, was meint ihr, alte QEMO-Versionen gehen oder geht nicht?

03:30:15.120 --> 03:30:19.120
Also ich persönlich tippe auf geht nicht, weil es ging die ganze Zeit auch schon nicht.

03:30:19.120 --> 03:30:25.120
Wait a minute.

03:30:25.120 --> 03:30:28.120
Soweit war mal vorher net.

03:30:28.120 --> 03:30:29.120
Oder?

03:30:29.120 --> 03:30:33.120
Nach drei Seiten Exceptions?

03:30:33.120 --> 03:30:45.120
Soweit war mal vorher net.

03:30:45.120 --> 03:30:50.120
Nice.

03:30:50.120 --> 03:30:58.120
Okay, haben wir noch eine ältere QEMO-Version?

03:30:58.120 --> 03:31:01.120
4.1, was haben wir noch?

03:31:01.120 --> 03:31:03.120
4.1.0 vielleicht?

03:31:03.120 --> 03:31:05.120
Hey, 4.1.0.

03:31:05.120 --> 03:31:09.120
Wir machen jetzt einfach so alt die QEMO-Versionen, bis es funktioniert.

03:31:09.120 --> 03:31:10.120
Pfeifert.

03:31:10.120 --> 03:31:16.120
Irgendwann sind wir bei 0.5 und dann geht's.

03:31:16.120 --> 03:31:19.120
Das ist quasi Reverse Versioning.

03:31:19.120 --> 03:31:22.120
Wir ziehen einfach solange Versionen ab, bis es geht.

03:31:22.120 --> 03:31:28.120
So, mal gucken, was jetzt passiert.

03:31:28.120 --> 03:31:29.120
Okay, lesen wir mal kurz weiter.

03:31:29.120 --> 03:31:30.120
Was haben wir denn sonst?

03:31:30.120 --> 03:31:34.120
Also sie haben nichts damit zu tun.

03:31:34.120 --> 03:31:41.120
Es hat aber nichts mit den Mitgliedern.

03:31:41.120 --> 03:31:45.120
Es ist laut Angaben auf der Webseite unter anderem viele Unternehmen aus dem Finanzenergie-

03:31:45.120 --> 03:31:49.120
und Sicherheitsbereich genannt werden, aber auch das Bundesgesundheitsministerium.

03:31:49.120 --> 03:31:52.120
Die Polizeigewerkschaft, die deutsche...

03:31:52.120 --> 03:31:53.120
Okay, bla.

03:31:53.120 --> 03:31:55.120
Ebenfalls nicht die Protelion GmbH.

03:31:55.120 --> 03:32:08.120
Sie ist laut Selbstdarstellung...

03:32:08.120 --> 03:32:09.120
Okay.

03:32:09.120 --> 03:32:13.120
Die Protelion GmbH ist aus dem russischen Unternehmen Infotex hervorgegangen, das mit

03:32:13.120 --> 03:32:16.120
dem russischen Geheimdienst FSB zusammenarbeitet.

03:32:16.120 --> 03:32:24.120
Wie viele Geheimdienste haben die eigentlich?

03:32:24.120 --> 03:32:49.120
Die haben auf jeden Fall mehr als einen Geheimdienst.

03:32:49.120 --> 03:32:52.120
Die haben wahrscheinlich alle Buchstabenabkürzungen durch.

03:32:52.120 --> 03:32:59.120
Warum hat der BS...

03:32:59.120 --> 03:33:15.120
Okay, ältere QEMO Version hat auch nichts gebracht, Leute.

03:33:15.120 --> 03:33:40.120
Haben wir noch eine ältere QEMO Version?

03:33:40.120 --> 03:33:48.120
Haben wir vielleicht 4.0?

03:33:48.120 --> 03:33:51.120
Aha!

03:33:51.120 --> 03:34:08.120
Und Leute, was meint ihr?

03:34:08.120 --> 03:34:16.120
Fault!

03:34:16.120 --> 03:34:21.120
Ich glaube auch, Sack Fault.

03:34:21.120 --> 03:34:23.120
Ich glaube, was noch älteres gibt es nicht.

03:34:23.120 --> 03:34:25.120
Was haben wir dann als nächstes?

03:34:25.120 --> 03:34:26.120
3?

03:34:26.120 --> 03:34:27.120
3.1?

03:34:27.120 --> 03:34:28.120
3.2?

03:34:28.120 --> 03:34:39.120
Das gibt es nicht, 3.1 hätte man dann bloß noch zu bieten.

03:34:39.120 --> 03:34:42.120
Cack Fault.

03:34:42.120 --> 03:34:55.120
Massive Cack Fault.

03:34:55.120 --> 03:34:59.120
Moment.

03:34:59.120 --> 03:35:04.120
Funktioniert hat es aber nicht.

03:35:04.120 --> 03:35:07.120
Funktioniert hat es nicht.

03:35:07.120 --> 03:35:10.120
Es hat...

03:35:10.120 --> 03:35:13.120
Warte mal.

03:35:13.120 --> 03:35:17.120
Hat es jetzt...

03:35:17.120 --> 03:35:25.120
Die Ausgabe sieht man da drin hier anscheinend nicht, oder?

03:35:25.120 --> 03:35:27.120
AMD.

03:35:27.120 --> 03:35:32.120
Steht da da Hello World, wenn man das mit...

03:35:32.120 --> 03:35:42.120
Also da müsste ja die Ausgabe drin stehen, wenn er das ausführt.

03:35:42.120 --> 03:35:54.120
Die trosseln mich bestimmt schon bei Docker Hub und bei Microsoft.

03:35:54.120 --> 03:36:03.120
Moment, man sieht das gar nicht, oder?

03:36:03.120 --> 03:36:07.120
Oder, Moment, der wirft das irgendwie weg.

03:36:07.120 --> 03:36:10.120
Wir machen noch mal einen Sleep drunter.

03:36:10.120 --> 03:36:15.120
Sleep 5?

03:36:15.120 --> 03:36:19.120
Ach nee, hier oben ist noch ein...

03:36:19.120 --> 03:36:26.120
Echo drüber machen.

03:36:26.120 --> 03:36:27.120
Nee, also...

03:36:27.120 --> 03:36:29.120
Das ist ja doof, man.

03:36:29.120 --> 03:36:35.120
Da sieht man überhaupt kein Standard Out.

03:36:35.120 --> 03:36:37.120
Wo ist Wanker hin?

03:36:37.120 --> 03:36:39.120
Oh, das Emote gibt es nicht mehr.

03:36:39.120 --> 03:36:43.120
Ich habe es nicht gelöscht.

03:36:43.120 --> 03:36:45.120
Ich habe es nicht gelöscht.

03:36:45.120 --> 03:36:47.120
So, jetzt haben wir hier einen Image.

03:36:47.120 --> 03:37:02.120
Kann man mit diesem Image jetzt was starten, oder ist das?

03:37:02.120 --> 03:37:05.120
Ja.

03:37:05.120 --> 03:37:13.120
Ich wiege ja das It.

03:37:13.120 --> 03:37:16.120
App.

03:37:16.120 --> 03:37:29.120
.NET Run.

03:37:29.120 --> 03:37:35.120
Wollen wir doch nicht ernsthaft erzählen, dass das mit dieser uralt QEMO Version geht

03:37:35.120 --> 03:37:39.120
und das in viereinhalb Jahren niemand gefixt hat.

03:37:39.120 --> 03:37:43.120
Es ist ja nicht so, als ist jetzt.NET so irgendwie...

03:37:43.120 --> 03:37:47.120
Also bilden den Container und das der Scheiß funktioniert, Alter.

03:37:47.120 --> 03:37:50.120
Gibt Cross Compiling Images mit.NET Build Tools.

03:37:50.120 --> 03:37:51.120
Ja, ja, ja.

03:37:51.120 --> 03:37:58.120
Aber für Arm 32 V7 ist das verbackt.

03:37:58.120 --> 03:37:59.120
Docker Build was?

03:37:59.120 --> 03:38:04.120
Minus Minus Progress Plane.

03:38:04.120 --> 03:38:13.120
So.

03:38:13.120 --> 03:38:24.120
Massive.

03:38:24.120 --> 03:38:29.120
Das funktioniert.

03:38:29.120 --> 03:38:32.120
Aus zum Teufel.

03:38:32.120 --> 03:38:38.120
Ok, jetzt ist natürlich noch die Frage, ob mein.NET Publish funktioniert.

03:38:38.120 --> 03:38:39.120
Chat, was meint ihr?

03:38:39.120 --> 03:38:49.120
Ich meine, wenn.NET Run funktioniert, sollte.NET Publish eigentlich auch funktionieren.

03:38:49.120 --> 03:38:55.120
Es lebt dann in 5,4.

03:38:55.120 --> 03:38:59.120
Output können wir wegmachen.

03:38:59.120 --> 03:39:02.120
Moment, das ist Arm die 64.

03:39:02.120 --> 03:39:05.120
Moment, Arm die 64 brauchen wir nicht.

03:39:05.120 --> 03:39:17.120
Wir brauchen Arm.

03:39:17.120 --> 03:39:30.120
Sieht schon mal gut aus, sieht schon mal gut aus.

03:39:30.120 --> 03:39:33.120
Also Alpine ist aber komplett verbackt.

03:39:33.120 --> 03:39:37.120
Alpine hängt immer.

03:39:37.120 --> 03:39:42.120
Aber die Debian Based Images funktionieren.

03:39:42.120 --> 03:39:46.120
Ok, ok, ok, es sieht schon mal ganz gut aus.

03:39:46.120 --> 03:39:55.120
Preview Version, Preview Version.

03:39:55.120 --> 03:39:57.120
Base Debian.

03:39:57.120 --> 03:40:05.120
Was mein Ziel ist, ich habe einen, ich möchte meinen Arm Container auf meinem Host bauen.

03:40:05.120 --> 03:40:11.120
Mit einem, mit Coemo als Arm Emulator.

03:40:11.120 --> 03:40:16.120
Es funkt, Leute.

03:40:16.120 --> 03:40:19.120
Es geht, es geht.

03:40:19.120 --> 03:40:24.120
Wir brauchen einfach nur die uralt Coemo Version, dann funktioniert es.

03:40:24.120 --> 03:40:31.120
Wir brauchen eine vier Jahre alte Coemo Version, dann funktioniert es.

03:40:31.120 --> 03:40:34.120
Bin.

03:40:34.120 --> 03:40:37.120
Release.

03:40:37.120 --> 03:40:43.120
Dotnet 7, ja, komm, Linux, Arm.

03:40:43.120 --> 03:40:45.120
Wie habe ich es denn jetzt genannt?

03:40:45.120 --> 03:40:46.120
Console?

03:40:46.120 --> 03:40:54.120
Ne.

03:40:54.120 --> 03:40:56.120
Wie heißt, wie heißt die, das Executable?

03:40:56.120 --> 03:41:00.120
Ab, App, einfach nur App.

03:41:00.120 --> 03:41:04.120
Hello World, da sind wir.

03:41:04.120 --> 03:41:07.120
Krass, es funkt.

03:41:07.120 --> 03:41:11.120
Ok, Moment, mit welcher Coemo Version hat es jetzt funktioniert?

03:41:11.120 --> 03:41:15.120
4.0.0 minus 4, mit was anderem funktioniert es nicht, ne?

03:41:15.120 --> 03:41:27.120
Also 4.1 war broken.

03:41:27.120 --> 03:41:31.120
Nur mal, um das Ganze jetzt so zu verifizieren.

03:41:31.120 --> 03:41:36.120
Ok, 4.1 ist broken.

03:41:36.120 --> 03:41:49.120
4.0?

03:41:49.120 --> 03:41:54.120
4.0 scheint zu funktionieren.

03:41:54.120 --> 03:41:59.120
Alter, ich glaube, die lecken critical information bei Coemo.

03:41:59.120 --> 03:42:05.120
Wie kann das sein, dass man vier Jahre so zurückgehen muss in die Version?

03:42:05.120 --> 03:42:13.120
Na gut, es ist ja nur das Arm 32, also nur das 32-Bit-Arm-V7-Build.

03:42:13.120 --> 03:42:20.120
Der Rest ist kaputt.

03:42:20.120 --> 03:42:25.120
Was uralt Coemo oder Ubuntu 16.04, was?

03:42:25.120 --> 03:42:28.120
Was ist mit Ubuntu 16.04?

03:42:28.120 --> 03:42:34.120
Da habe ich jetzt nicht aufgepasst im Chat.

03:42:34.120 --> 03:42:37.120
Was hat er denn geschrieben?

03:42:37.120 --> 03:42:45.120
Schau mal hier, Building Instructions.

03:42:45.120 --> 03:42:48.120
Ne, das will ich nicht machen.

03:42:48.120 --> 03:42:51.120
Warum soll ich mein eigenes.NET bilden wollen?

03:42:51.120 --> 03:42:54.120
Ich will doch nicht mein.NET bilden.

03:42:54.120 --> 03:42:57.120
Warum soll ich denn.NET bilden wollen?

03:42:57.120 --> 03:43:08.120
Ich will mein Programm bilden.

03:43:08.120 --> 03:43:10.120
Leute, das funktioniert.

03:43:10.120 --> 03:43:14.120
Das geht einfach.

03:43:14.120 --> 03:43:15.120
Geil.

03:43:15.120 --> 03:43:19.120
Ok, run slash app.

03:43:19.120 --> 03:43:21.120
Wo schreibt man das hin?

03:43:21.120 --> 03:43:30.120
slash app, build, release, app.

03:43:30.120 --> 03:43:33.120
Wo publish?

03:43:33.120 --> 03:43:35.120
Kann ich mir jetzt wieder net merken.

03:43:35.120 --> 03:43:39.120
Publish und dann app zum Ausführen.

03:43:39.120 --> 03:43:41.120
Hello World, Leute.

03:43:41.120 --> 03:43:48.120
Zack, easy.

03:43:48.120 --> 03:43:51.120
Uralt Coemo-Version, Leute.

03:43:51.120 --> 03:43:54.120
So sieht es aus.

03:43:54.120 --> 03:43:57.120
Massive 600 Jahre alte Coemo-Version.

03:43:57.120 --> 03:43:59.120
Damit funktioniert es.

03:43:59.120 --> 03:44:00.120
Easy.

03:44:00.120 --> 03:44:02.120
Wie lange sind wir?

03:44:02.120 --> 03:44:08.120
Leute, guckt mal.

03:44:08.120 --> 03:44:09.120
Hä?

03:44:09.120 --> 03:44:16.120
Warum zeigt es nicht an, wie lange ich online bin?

03:44:16.120 --> 03:44:18.120
Das ist ein FFZ-Ding.

03:44:18.120 --> 03:44:33.120
Ist der Online-Timer irgendein FFZ-Ding?

03:44:33.120 --> 03:44:36.120
Leute.

03:44:36.120 --> 03:44:38.120
Easy.

03:44:38.120 --> 03:44:47.120
2 Stunden 44.

03:44:47.120 --> 03:44:50.120
Ach, das ist das andere Wort.

03:44:50.120 --> 03:44:52.120
Easy.

03:44:52.120 --> 03:44:58.120
So, wir müssen jetzt so eine Sache testen, ob man damit überhaupt...

03:44:58.120 --> 03:45:03.120
Was?

03:45:03.120 --> 03:45:12.120
Was bin ich sehend?

03:45:12.120 --> 03:45:20.120
Ich will nicht arm 64, ich brauch...

03:45:20.120 --> 03:45:24.120
Nee, nee, Leute, das ist gedacht, wenn man.NET...

03:45:24.120 --> 03:45:29.120
Das ist, wenn man.NET cross-compilen will.

03:45:29.120 --> 03:45:32.120
Nicht mit.NET was cross-compilen.

03:45:32.120 --> 03:45:40.120
Nicht mit.NET was bilden in einer emulierten Umgebung.

03:45:40.120 --> 03:45:43.120
Okay, wir müssen jetzt noch mal eine Sache checken.

03:45:43.120 --> 03:45:45.120
So, der 4-Champ.

03:45:45.120 --> 03:45:49.120
Mal kurz klonen.

03:45:49.120 --> 03:45:55.120
Kann ich sinnvollerweise das hier überhaupt drin kompilieren?

03:45:55.120 --> 03:45:59.120
Also das ist jetzt ja mal eine bisschen größere Anwendung.

03:45:59.120 --> 03:46:01.120
Git, clone.

03:46:01.120 --> 03:46:03.120
So.

03:46:03.120 --> 03:46:08.120
Der 4-Champ.

03:46:08.120 --> 03:46:10.120
So, copy.

03:46:10.120 --> 03:46:11.120
Wo sind wir denn hier?

03:46:11.120 --> 03:46:12.120
Hier.

03:46:12.120 --> 03:46:13.120
4-Champ.

03:46:13.120 --> 03:46:14.120
4-Champ.

03:46:14.120 --> 03:46:17.120
Geile Ordnerstruktur, Mann.

03:46:17.120 --> 03:46:19.120
So, also copy.

03:46:19.120 --> 03:46:20.120
Copy.

03:46:20.120 --> 03:46:22.120
Das da.

03:46:22.120 --> 03:46:25.120
Nach slash...

03:46:25.120 --> 03:46:26.120
App.

03:46:26.120 --> 03:46:28.120
Warum sollte ich es irgendwie anders machen?

03:46:28.120 --> 03:46:31.120
Das New können wir uns sparen.

03:46:31.120 --> 03:46:45.120
Okay, mal gucken, ob der mal einen Addon bilden kann.

03:46:45.120 --> 03:46:48.120
Ach so, slash App ist es ja nicht.

03:46:48.120 --> 03:46:55.120
Es ist slash 4-Champ müsste das dann sein.

03:46:55.120 --> 03:46:58.120
Aber sehen wir gleich.

03:46:58.120 --> 03:47:04.120
Und vor allem, wie lange wird es dauern?

03:47:04.120 --> 03:47:05.120
Hat jemand einen Blick auf...

03:47:05.120 --> 03:47:06.120
Moment, die Uhr.

03:47:06.120 --> 03:47:07.120
Ich habe gar keine...

03:47:07.120 --> 03:47:08.120
Warum habe ich noch nicht mal eine Uhr?

03:47:08.120 --> 03:47:09.120
Hier.

03:47:09.120 --> 03:47:10.120
Da.

03:47:10.120 --> 03:47:11.120
44.

03:47:11.120 --> 03:47:12.120
44.

03:47:12.120 --> 03:47:13.120
45.

03:47:13.120 --> 03:47:22.120
Das ist jetzt zum ersten Mal kein Hello World, was wir hier übersetzen.

03:47:22.120 --> 03:47:38.120
Mach doch mit Time, aber dazu muss ich es wieder stoppen.

03:47:38.120 --> 03:47:41.120
Ach, da unten.

03:47:41.120 --> 03:47:46.120
Aber ohne Sekunden.

03:47:46.120 --> 03:47:56.120
Na, das bildet wohl ein bisschen länger.

03:47:56.120 --> 03:48:11.120
Aber es bildet immerhin, ohne dass es irgendwelche Fehler gibt.

03:48:11.120 --> 03:48:17.120
Ja, das kann man natürlich als Parameter sogar...

03:48:17.120 --> 03:48:21.120
Nee, das kann man schon als Variable machen.

03:48:21.120 --> 03:48:22.120
Wäre sogar sinnig.

03:48:22.120 --> 03:48:25.120
Jetzt bin ich mal gespannt, wie lange das bildet.

03:48:25.120 --> 03:48:27.120
Also ich meine, ich bin 14 Minuten noch on.

03:48:27.120 --> 03:48:29.120
So, bis 23 Uhr.

03:48:29.120 --> 03:48:31.120
Entweder ist bis dahin fertig gebildet oder nicht.

03:48:31.120 --> 03:48:45.120
Aber das Hello World Programm hat, glaube ich, 70 Sekunden gebraucht.

03:48:45.120 --> 03:48:51.120
Dann wird eine komplette Anwendung mit dem ganzen Krempel drum herum, das wird bestimmt

03:48:51.120 --> 03:48:53.120
5-6 Minuten bilden.

03:48:53.120 --> 03:49:01.120
Ich meine, wir sind in einer komplett emulierten Umgebung, in einer VM, wobei das...

03:49:01.120 --> 03:49:13.120
Also das ist eine VM, es macht nicht so viel aus.

03:49:13.120 --> 03:49:19.120
Das ist nicht Nested Virtualisierung, das ist Nested Emulation.

03:49:19.120 --> 03:49:24.120
Ich weiß gar nicht, ob es diesen Begriff überhaupt schon gibt.

03:49:24.120 --> 03:49:27.120
Nested Emulation.

03:49:27.120 --> 03:49:33.120
Und als nächstes dann Docker in Docker-Bild.

03:49:33.120 --> 03:49:36.120
Nested Emulation in VM.

03:49:36.120 --> 03:49:41.120
Was ja bescheuerterweise in GitHub Actions so wäre.

03:49:41.120 --> 03:49:48.120
GitHub Actions ist eine VM, worin ich dann den Docker starte.

03:49:48.120 --> 03:49:55.120
Den Docker starte, der dann bildet für mich.

03:49:55.120 --> 03:50:00.120
Also dafür gibt es kein Wort.

03:50:00.120 --> 03:50:03.120
Wäre GitHub Actions Performanta?

03:50:03.120 --> 03:50:16.120
Nee, bestimmt nicht.

03:50:16.120 --> 03:50:22.120
Du hast mal ein KVM in VSL gemacht.

03:50:22.120 --> 03:50:28.120
Muss man da nicht Nested Virtualisierung erst noch einschalten?

03:50:28.120 --> 03:50:33.120
Wunder mich, dass es standardmäßig überhaupt geht.

03:50:33.120 --> 03:50:43.120
Ja, muss man.

03:50:43.120 --> 03:51:09.120
Na, ob das noch was wird hier?

03:51:09.120 --> 03:51:12.120
KVM kann auch rein in Software arbeiten.

03:51:12.120 --> 03:51:19.120
Wenn du noch so eine alte CPU hast, dass die noch keine

03:51:19.120 --> 03:51:23.120
Hardware, also noch keine Virtualisierungsfunktion in der CPU hat.

03:51:23.120 --> 03:51:26.120
Ja klar, das geht, aber halt nur auf der gleichen Plattform.

03:51:26.120 --> 03:51:28.120
Das ist ja das, was VMWare früher auch gemacht hat.

03:51:28.120 --> 03:51:33.120
Die haben halt irgendwelche Assembly, Umschreiben, Magic gemacht.

03:51:33.120 --> 03:51:36.120
Das war aber auch damals schon relativ performant.

03:51:36.120 --> 03:51:44.120
Auch ohne CPU-seitige Virtualisierungsunterstützung.

03:51:44.120 --> 03:51:48.120
Es ist halt im Vergleich zu dem, was ich hier mache, ist es halt

03:51:48.120 --> 03:51:55.120
der immer noch VM auf einem x86 für eine x86 VM und nicht eine

03:51:55.120 --> 03:52:00.120
Arm-CPU in einer x86 VM.

03:52:00.120 --> 03:52:03.120
Das ist ganz normales Gnome-Terminal, was ja wohl nicht

03:52:03.120 --> 03:52:09.120
mal unterstützt wird, habe ich jetzt gelesen.

03:52:09.120 --> 03:52:13.120
Okay Leute, ich fürchte, das wird mit dem Kompilieren heute nichts mehr, oder?

03:52:13.120 --> 03:52:25.120
Der ist doch schon fünf Minuten jetzt dabei.

03:52:25.120 --> 03:52:31.120
Warum eigentlich Gnome-Terminal in einem Window-Manager-Setup?

03:52:31.120 --> 03:52:35.120
Weil ich Gnome-Terminal von der Bedienung ganz gut finde, bzw.

03:52:35.120 --> 03:52:39.120
gut fand und ich das schon jahrelang verwende.

03:52:39.120 --> 03:52:41.120
Und es ein Menü hat, wo man rechts klicken kann.

03:52:41.120 --> 03:52:45.120
Die ganzen coolen neuen Terminals haben alle kein Rechtsklick-Menü.

03:52:45.120 --> 03:52:52.120
Und ihr wisst, wie gerne ich rechts klicke und Einsen kopiere.

03:52:52.120 --> 03:52:56.120
Wodurch wird es ersetzt, weiß ich nicht.

03:52:56.120 --> 03:53:04.120
Wir müssen mal gucken.

03:53:04.120 --> 03:53:11.120
Gnome-Terminal ist deprecated oder outdated oder sowas.

03:53:11.120 --> 03:53:16.120
Tja.

03:53:16.120 --> 03:53:20.120
Durch was wird es ersetzt?

03:53:20.120 --> 03:53:27.120
Ich frage mich auch, Gnome-Konsole?

03:53:27.120 --> 03:53:36.120
Nee, oder?

03:53:36.120 --> 03:53:51.120
Ich hab letztens irgendwo gesehen, dass das deprecated ist.

03:53:51.120 --> 03:53:52.120
Tja.

03:53:52.120 --> 03:53:53.120
Vielleicht auch nicht.

03:53:53.120 --> 03:54:00.120
Man soll mir recht sein.

03:54:00.120 --> 03:54:09.120
Ja, Konsole is aimed to replace.

03:54:09.120 --> 03:54:16.120
Ja, swap Terminal in favor of Konsole.

03:54:16.120 --> 03:54:21.120
Ja.

03:54:21.120 --> 03:54:24.120
Terminal.

03:54:24.120 --> 03:54:32.120
New applications, Konsole will replace Gnome-Terminal on G-Edit.

03:54:32.120 --> 03:54:46.120
Okay.

03:54:46.120 --> 03:54:54.120
Ja, ganz ehrlich, Gnome ist eh komplett lost mit dem, was sie da zusammenbauen.

03:54:54.120 --> 03:55:02.120
Jetzt ist halt die Frage, hängt das Ding oder braucht es einfach nur ewig zum Kompilieren?

03:55:02.120 --> 03:55:05.120
Generell ist Desktop-Unterlinux komplett lost.

03:55:05.120 --> 03:55:07.120
Das meint ihr, warum ich E3 verwende.

03:55:07.120 --> 03:55:13.120
Einfach, weil ich nichts andere sinnvoll verwenden kann, weil alles suckt.

03:55:13.120 --> 03:55:17.120
Und E3 hat halt nichts großartig zum Sacken.

03:55:17.120 --> 03:55:19.120
Das hat ja nicht mal Fenster.

03:55:19.120 --> 03:55:22.120
Na okay, in gewisser Weise hast du schon Fenster.

03:55:22.120 --> 03:55:28.120
Du kannst ja immerhin sowas hier machen.

03:55:28.120 --> 03:55:43.120
Aber, ja.

03:55:43.120 --> 03:55:49.120
Leute, ich glaube, so schön das jetzt ist, dass wir eine Coemo-Version gefunden haben,

03:55:49.120 --> 03:56:10.120
die potenziell funktionieren würde, eine ordentliche Anwendung kann man damit nicht übersetzen.

03:56:10.120 --> 03:56:19.120
Wolltest du wirklich, ernst zu, bist du dir sicher, ich mag Suze überhaupt nicht.

03:56:19.120 --> 03:56:29.120
Also, dann verwende ich lieber ein Ubuntu oder einen Mint oder irgendwas, aber kein Suze.

03:56:29.120 --> 03:56:32.120
Suze mag ich überhaupt nicht.

03:56:32.120 --> 03:56:34.120
Also, Arch, btw., sind wir uns ja einig, das ist eh das Beste.

03:56:34.120 --> 03:56:37.120
Ja klar, aber wenn es was anderes sein muss.

03:56:37.120 --> 03:56:42.320
sein muss. Ne, ich würd's sein lassen. Also Suze hab ich immer nur ganz eklige Sachen von

03:56:43.320 --> 03:56:46.080
erlebt. Wir haben es ja auch ein paar mal im stream angeguckt.

03:56:47.280 --> 03:56:49.280
Ne.

03:56:49.440 --> 03:56:56.800
Warum? Ich willst unbedingt was RPM basiertes haben. Also wenn du was RPM basiertes haben willst, dann nimm lieber Fedora als Open Suze.

03:56:57.760 --> 03:57:00.720
Open Suze finde ich ganz eklig und abfuck.

03:57:00.720 --> 03:57:05.360
Abfuck. Aber ganz im Ernst Arch, by the way. Beste.

03:57:06.080 --> 03:57:12.720
Auf dem Desktop wohlgemerkt. Server sieht das ganz anders aus. Auf dem Server wisst ihr, dass ich Ubuntu Fanboy bin, aber Debian ist auch okay.

03:57:14.960 --> 03:57:18.640
Bei uns auf der Arbeit ist es zum größten Teil Red Hat beziehungsweise

03:57:19.840 --> 03:57:24.320
CentOS, wobei es ja CentOS ab 8 in der Variante nicht mehr gibt.

03:57:24.320 --> 03:57:28.880
Hannah Montana Linux ist doch auch irgendein Ubuntu mit einfach einem ausgetauschten Hintergrund.

03:57:35.760 --> 03:57:40.160
By the way Arch, ja. Naja, man muss Prioritäten setzen.

03:57:40.160 --> 03:57:50.320
Endeavor auf Desktop und Debian Server. Ja, das ist eine gute Kombination.

03:57:57.760 --> 03:58:03.120
Der Package Manager nervt echt. Ich finde das ist eines mit der besten Sachen da dran.

03:58:03.120 --> 03:58:13.600
Package Manager und User Repos. Ja, also ich würde sagen, Arch größer Fedora beziehungsweise Ubuntu Debian, alles und ganz am Ende kommt dann irgendwann Open Suze.

03:58:14.800 --> 03:58:19.600
Da würde ich ja lieber noch irgendein Slackware oder so nehmen, bevor ich Open Suze nehme.

03:58:19.600 --> 03:58:31.360
Das ist jetzt eine gemeine Frage, ja. Ich habe jetzt ganz oft, ich habe jetzt richtig abgelästert über Suze, jetzt muss ich mich wirklich noch dran erinnern, was da dran mich abgefuckt hat.

03:58:32.080 --> 03:58:36.720
Könnt ihr mir das nicht einfach glauben und sagen, das ist so. Jetzt muss ich mir da auch noch mal was abfügen.

03:58:36.720 --> 03:58:47.200
Ich hab's gestreamt, also kannst du dir mal schiefgucken. Was war dann eklig unter Open Suze? Lass mal überlegen. Mal gucken, ob ich da hingehe.

03:58:47.200 --> 03:58:51.760
Also Zwipper fand ich abartig, das weiß ich noch, aber das ist bestimmt Gewöhnungssache.

03:58:51.760 --> 03:59:06.160
Yast oder wie das Ding hieß, war weirdchamp, so irgendwie teilweise gehts, teilweise nicht. Software weiß ich gar nicht, ob das halbwegs aktuell ist oder nicht.

03:59:06.160 --> 03:59:22.160
Aber Tumbleweed ist ja quasi so das Unstable von denen, ja.

03:59:22.160 --> 03:59:38.160
Haben wir das noch im Archiv? Ich fand's eklig. Suze. Hier, Open Suze, 20 Jahre später. Ich kann mich nur noch dran erinnern, dass ich alles ziemlich, ziemlich eklig fand.

03:59:38.160 --> 03:59:53.360
Ey, immerhin. Echt, kann man? Na, dann kann ich auch gleich Arch, by the way. Leute, das war's für heute. Bis zum nächsten Mal, tschüss.

04:00:08.160 --> 04:00:23.360
Wie sieht denn das mit dem Bild? Wird doch nix mehr. Das hat sich entweder aufgehängt oder es ist kaputt oder es braucht einfach noch 30 Minuten.

04:00:23.360 --> 04:00:40.160
Er hat ja immerhin angefangen offiziell. Hier, guck da. Wie sieht denn ein Bild aus, was funktioniert hat? Ach, cached.

04:00:40.160 --> 04:00:54.160
Project zu Restore, Restored müsste eigentlich, Moment, der hat noch nicht mal richtig angefangen zu kompilieren. Der ist, der hat auch noch nicht mal angefangen zu Restore.

04:00:54.160 --> 04:01:14.160
Okay, das ist, das ist pepega. Das wird, das wird nicht funktionieren, Leute. Grip. Gucken, vielleicht bringt's ja was, wenn ich neustelle.

04:01:14.160 --> 04:01:30.160
Ich glaub, das ist, ich glaub, das ist prokken. Keine Chance. Nee, ernsthafte Projekte damit kompilieren kannst du nicht.

04:01:30.160 --> 04:01:58.160
Illegal Instruction. Geht Cross-Compile nicht einfacher ohne, doch, doch, du kannst in.NET, ähm, mit ner, mit ner Option direkt ARM und, äh, also ARMv7 und ARMv8, äh, ja, ARM64 32-Spit-Reiß raushauen.

04:01:58.160 --> 04:02:10.160
Das Schöne wäre, wenn das mit QEMU geht, das hier wäre mein komplettes Bild-File für alle Plattformen, für alle Images. Mehr bräuchte ich net. Sleep bräuchte mir gerade mal.

04:02:10.160 --> 04:02:30.160
Mehr bräuchte ich net. Das wär, das war's. Wenn ich, wenn ich das anderweitig machen muss, dann müsste ich erst mal nen Container starten, also, äh, so Multistage-Build machen, ähm, erst mal nen Container starten für Build.

04:02:30.160 --> 04:02:42.160
Also, äh, ein ARMv4, ein X6-Nachtcontainer starten, dem ich dann meine Anwendung baue und dann müsste ich noch für die Zielplattformen jeweils einzelne Container erstellen, wo ich das dann reinkopiere, ja.

04:02:42.160 --> 04:02:55.160
Mit QEMU wär's halt einfach nice. Das wird einfach gehen. Bei GitHub Actions kann man auch die Zielplattform hochziehen. Nee, was meinste denn, wie die das machen?

04:02:55.160 --> 04:03:11.160
Also, es kann sein, dass es irgendwelche Paid-Runner gibt, die auf ner Native-Arm-Kiste laufen, aber das meiste, was es gibt, ist, das ist QEMU unter der, unter der Haube.

04:03:11.160 --> 04:03:30.160
Man kann den eigenen Raspberry Pi als, als Runner verwenden. Oh. Mit Matrix gibst du, glaub ich, an, was du für ne Betriebssystemversion verwenden willst.

04:03:30.160 --> 04:03:49.160
Ja, genau. Ich sag ja, vielleicht gibt's was Paid. Vielleicht gibt es Paid irgendwas. Also, wenn du's, wenn du's mit den kostenlosen Actions machen willst, dann bleibt dir eigentlich nur QEMU übrig.

04:03:49.160 --> 04:04:06.160
Und auch die ganzen Actions, die du findest, die machen im Prinzip nix anderes. Ja, wenn man zum Beispiel sucht, GitHub Actions. Ähm, ah, das erste, was du findest, ist dann sowas hier. Und das ist unter der Haube.

04:04:06.160 --> 04:04:33.160
Das ist unter der Haube QEMU. Ja, using QEMU. Hier sogar mal ne offizielle Frage in der GitHub Community.

04:04:33.160 --> 04:04:47.160
All x8664 architecture. Self-hosted runner.

04:04:47.160 --> 04:05:03.160
Echt, es gibt welche Beta. GitHub Runner Arm Beta. Wäre natürlich praktisch. Ja, macOS kannst du, kannst du machen, aber das bringt dir nix.

04:05:03.160 --> 04:05:23.160
In dem Fall. 64 Bit, 64 Bit Arm krieg ich anderweitig auch hin. Self-hosted runners. Ja, das ist klar.

04:05:23.160 --> 04:05:33.160
Deswegen, es wäre halt praktisch gewesen. Anderweitig ist auch kein Problem. Wie gesagt, ich kann die.NET Anwendungen bilden und dann in die einzelnen Container verschieben. Das geht schon.

04:05:33.160 --> 04:05:53.160
Aber so wäre es halt echt cool gewesen, wenn er das zweimal baut. Einmal für x86 und einmal für Arm. 32, gleiches Dockerfile, zack.

04:05:53.160 --> 04:06:09.160
Warum ist Cross-Compiling eigentlich so schwierig? Es ist ja nicht Cross-Compiling. Es ist in einem Emulator kompilieren und in irgendeiner Art und Weise ist.NET verbackt oder QEMU verbackt.

04:06:09.160 --> 04:06:29.160
Man weiß das nicht. Ach so, ich hab ein Browser. Man weiß es nicht so genau. Also entweder ist es ein QEMU Bug oder es ist ein.NET Bug. Aber es interessiert sich keiner dafür.

04:06:29.160 --> 04:06:57.160
Da machst du nichts. Was 4.1 ging nicht.

04:06:57.160 --> 04:07:17.160
Wie lernt man das eigentlich alles rumbasteln? Das andere bleibt dir da nicht übrig.

04:07:17.160 --> 04:07:31.160
Ja gut, Paket sieht anders aus. Das ist eher so was, was wenn man sich da nicht hauptsächlich mit beschäftigt, lernt man das so nebenbei.

04:07:31.160 --> 04:07:51.160
Ich hab damit angefangen 2012, 2011 oder so. Da war das noch relativ neu. Aber es war schon abzusehen, dass das der neueste Shit wird. Wir hatten damals unsere ganzen Server-Config-Management-Geschichten hatten wir noch in dem SVN liegen.

04:07:51.160 --> 04:08:03.160
Und als ich das damals übernommen hab, hab ich gesagt komm wir machen das in Git. Da war das noch relativ neu. Und da musste ich mich monatelang mit Git beschäftigen und seitdem blick ich halbwegs durch.

04:08:03.160 --> 04:08:21.160
Und ein paar neue Sachen gehen manchmal ein bisschen an mir vorbei. Wie zum Beispiel, dass du jetzt mittlerweile automatisch beim Rebase die Comments zusammenfassen kannst. Das wusste ich nicht. Hat mir sogar einer im Stream erzählt.

04:08:21.160 --> 04:08:37.160
Ja guck mal das ist eh was komplett eigenes. Also das ist mit Abstand auch das größte Thema wenn man durchblicken will. Weil das zieht tausend Sachen nach sich.

04:08:37.160 --> 04:09:03.160
Wenn du dann Cluster hast, dann kommen die ersten Ansagen. Ja wie siehts mit Updates aus? Ja wie siehts mit Loadbalancer aus? Ja wie siehts mit Dashboards aus? Ja wie siehts mit Metrics aus? Ja wie siehts mit Monitoring aus? Ja wie siehts mit Eingang aus? Ah wie siehts mit Ausgang aus? Sobald man damit anfängt ist vorbei.

04:09:03.160 --> 04:09:17.160
Tja anscheinend ist es wirklich kaputt und es geht nur mit dieser einen QEMO Version. Und mit dieser einen QEMO Version lässt sich aber mein Projekt nicht bilden weil es kaputt ist. So. Nice.

04:09:17.160 --> 04:09:38.160
Sehr schön. Also wir haben gelernt..NET Arm32 mit QEMO bauen ist nicht.

04:09:38.160 --> 04:09:54.160
Das ist auch was. Das verwende ich auch nicht. Ich mache in meinem Kopf immer noch ins Dash und switche die Ordner. Und hier kannst du ganz mehrere Working Trees haben.

04:09:54.160 --> 04:10:06.160
Das gab es damals noch nicht. Weiß gar nicht wann das eingeführt wurde.

04:10:06.160 --> 04:10:14.160
Ja 2017. Da habe ich das so eine ganze Weile hinter mir gehabt. Gitbasics.

04:10:14.160 --> 04:10:20.160
Welches Programm benutzt du für deine Linux-VM vor allem bei Workstation?

04:10:20.160 --> 04:10:23.160
Guck.

04:10:23.160 --> 04:10:37.160
Ja dann läuft es doch auf eine Multistage. Multidinks bums Bild raus und einzelne Dockerfiles beziehungsweise einzelne Configs für die Container.

04:10:37.160 --> 04:11:00.160
Was solls. Ist halt. Ist halt dann so. Was willst du machen.

04:11:00.160 --> 04:11:10.160
Oder ich mache irgendwie so ein kleines Skript was den Container startet das rauskopiert. Wir machen einfach gar kein Multistage Bild.

04:11:10.160 --> 04:11:19.160
Das kompiliert das Ding kramisch legts irgendwo hin.

04:11:19.160 --> 04:11:26.160
Dann macht es den Ziel Container. Mit Bild X.

04:11:26.160 --> 04:11:31.160
Nee das geht ja nicht. Da kann ich ja zwischendurch nichts ausführen. Ach keine Ahnung.

04:11:31.160 --> 04:11:36.160
Das bringt mir nichts. Multistage. Diese Home Assistant Addon Bilder kann kein Multistage.

04:11:36.160 --> 04:11:41.160
Dann müsste ich beispielsweise auch. Da müsste ich dann selbst gucken.

04:11:41.160 --> 04:11:51.160
Da müsste ich selbst in die Registry pushen den Container. Gucken dass das Namenschema stimmt. Sodass das Home Assistant Addon das checkt.

04:11:51.160 --> 04:12:03.160
Da wäre es mir lieber ich könnte den fertigen Bilder von denen nehmen. Aber anscheinend. Mal gucken. Mal gucken.

04:12:03.160 --> 04:12:07.160
Leute das war heute echt anstrengend. Es hat nix funktioniert.

04:12:07.160 --> 04:12:13.160
Muss ich mal was gucken. Wisst ihr was ich mir immer gerne angucke.

04:12:13.160 --> 04:12:20.160
Was die Leute geklippt haben. Mal gucken was heute geklippt wurde.

04:12:20.160 --> 04:12:24.160
Stimmt wo irgendwas nicht geht. Ich meine heute gab es nicht so wirklich viel tolles Zeug zum klippen.

04:12:24.160 --> 04:12:30.160
Ja doch ein Clip Poggers.

04:12:30.160 --> 04:12:32.160
Wenn ich es interaktiere.

04:12:32.160 --> 04:12:56.160
Ok da ist einer aus Versehen aus Versehen auf die Clip Taste gekommen. Da ist ja gar nichts gewesen.

04:12:56.160 --> 04:13:05.160
Was ist denn ein NPN was? Azure NPN Subscription. Also ich kenne diese einmalig 100 Euro gratis von Azure.

04:13:05.160 --> 04:13:11.160
Und dann habe ich mal immer noch irgendwie 30 Tage was gekriegt.

04:13:11.160 --> 04:13:17.160
So nach dieser Einschulung. Die übrigens übelst kacke war kann ich keinem empfehlen diese Azure Schulung.

04:13:17.160 --> 04:13:21.160
Außer ihr wollt die Prüfung machen. Und auch nur weil ihr die dafür gemacht haben müsst.

04:13:21.160 --> 04:13:32.160
Sag mal wie viele. Warum haben wir eigentlich so ziemlich alle Kacke Emotes die es gibt auf der Welt.

04:13:32.160 --> 04:13:38.160
Oder ist das ein eigenes von dir.

04:13:38.160 --> 04:13:43.160
Das ist was von dir ok. Nee das ist ein Twitch Emote. Das ist gar kein Bella Twitch TV Emote.

04:13:43.160 --> 04:13:47.160
Das ist ein offizielles Twitch Emote. Ach so.

04:13:47.160 --> 04:13:53.160
Ich dachte weil wenn man hier mal guckt wir haben nur wirklich alles alles an Kacke zu bieten was es gibt.

04:13:53.160 --> 04:14:00.160
Und das auch.

04:14:00.160 --> 04:14:08.160
Das ist eine Lizenz für die Firma ach so ok.

04:14:08.160 --> 04:14:14.160
Geht das denn. Ich dachte du musst diese du musst die Schulung vorher gemacht haben dass du Prüfung machen kannst.

04:14:14.160 --> 04:14:18.160
Also die Microsoft Schulungen sind wirklich richtig mies.

04:14:18.160 --> 04:14:21.160
Es wäre tatsächlich gut wenn das geht die Prüfung zu machen ohne Schulung.

04:14:21.160 --> 04:14:27.160
Weil die Schulungen sind dann holst du dir besser ein paar Vorbereitungsdinger.

04:14:27.160 --> 04:14:33.160
Ganz im Ernst das ist so abartig langweilig.

04:14:33.160 --> 04:14:39.160
Und der Dozent oder wie auch immer man den nennen mag der klickt auch nur PowerPoint Präsentationen durch.

04:14:39.160 --> 04:14:44.160
Und der eine meinte halt das muss so sein weil Microsoft will dass die Schulungen einheitlich sind.

04:14:44.160 --> 04:14:47.160
Da sind sie halt einheitlich scheiße.

04:14:47.160 --> 04:14:55.160
Ein älteres Battlefield.

04:14:55.160 --> 04:15:03.160
Ja warum nicht.

04:15:03.160 --> 04:15:05.160
Leute ich geh ins Bett.

04:15:05.160 --> 04:15:11.160
Wir sehen uns nämlich morgen früh schon wieder in ein paar Stunden.

04:15:11.160 --> 04:15:17.160
Ja Escher Katze die Oberfläche ist auch abartig.

04:15:17.160 --> 04:15:22.160
Wir sehen uns bald wieder Leute. Morgen früh gehts weiter. Bis denn. Machts gut.

04:15:22.160 --> 04:15:36.160
See you.

