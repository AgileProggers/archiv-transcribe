Das war's für heute, bis zum nächsten Mal, bis zum nächsten Mal, bis zum nächsten Mal, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das war's für heute, bis zum nächsten Mal.
Das Problem ist nur, dass die Sub-Batches in kleinskaliert kacke aussehen.
Die sehen wirklich nicht gut aus.
Die sehen viel zu kleinteilig aus.
Das ist aber nicht schlimm, weil die Designerin hat das schon angepasst.
Also die ist gerade dabei, das anzupassen.
Wir machen einfach den Ausschnitt größer und machen hier das Gesicht ein bisschen anders.
Dass dann quasi weniger Details auf so eine kleine Fläche kommen.
Ich dürfte nicht vergessen, ich glaube, die kleinen Emotes sind 16 mal 16 oder so.
Der goldene Kick sieht böse high aus.
Ja.
Stimmt.
Vape Nation.
Leute, soll ich auch sagen, mein Halsbeer ist besser.
Und es ist immer noch kein Corona.
Zum Glück.
Es hat sich jetzt ja so angehört, als warte ich endlich drauf.
So nach dem Motto, fuck, es ist immer noch kein Corona, Alter.
Aber es wird eh schwierig mit Corona bei mir.
Ich bin jetzt doppelt geimpft seit einem Monat.
Oder zwei Monate, eine Weile schon.
Die Antenne am Arm ist immer noch da.
Und ich habe einen Test gemacht, der war negativ.
Das heißt also, dass das Corona ist, ist deutlich. Es ist wirklich sehr unwahrscheinlich.
Kann ich gleich mal zu sagen, ich muss hier vorher nochmal nochmal was was wir heute machen.
Also ihr seht ja, es wird langsam kühl.
Und ich muss jetzt mal meine Heizung, meine Heizung steuern können.
Und ich hatte Big Brain Idee, was ich machen könnte.
Wenn die Steuerung von meiner Heizung funktioniert über mein Home Assistant,
dann kann ich übrigens mal anschalten nebenbei.
Das ist jetzt, dass der ganze Krempel mal hochfährt.
Hier Home Assistant vm.
Nein, nicht die Cute vm, die Home Assistant vm.
Cute vm brauchen wir jetzt nicht.
Und die Stream vm.
Mein Ace, Dankeschön für den Sub.
So, und ich habe mir folgendes überlegt.
Ich könnte eigentlich, nachdem ich überall Temperatursensoren habe,
könnte ich eigentlich die Heizung komplett automatisch machen.
Ich könnte nämlich einfach sagen, hey, sagen wir mal, wenn es im Flur unter 18 Grad wird
und es nicht Sommer ist, dann mach einfach die Heizung an.
Und wenn du die Heizung eingeschaltet hast, dann schalte die, dann schalte den Status für einen weiteren Tag nicht um.
Weil man muss da immer so eine kleine Security Feature,
der Security Feature ist ein doofes Begriff.
Man muss da immer so eine kleine Sperre einbauen,
dass es nicht im Zweifelsfall sich fünfmal pro Sekunde an- und ausschaltet.
So ein Cooldown, ja, genau.
Global Cooldown.
Aber auf offene Fenster achten.
Ja, das Schöne ist, ich habe ja auch Fenstersensoren.
Ich weiß auch, ob die Fenster auf sind.
Aber das ist kein Problem, weil er das eh nicht macht.
Da gibt es bestimmt eine coole Variante für, wie man das machen kann.
Ja, und ihr seht, es wird kalt.
Deswegen muss jetzt wirklich endlich mal die Heizungssteuerung gebaut werden.
Und ich habe mir jetzt überlegt, wir machen es gleich richtig advanced, richtig advanced.
Home, Assistant, Thermostat.
Wir machen es richtig advanced, Leute.
Wir machen nicht einfach mit Button zum Heizung an- und ausschalten.
Wir machen sowas.
Habt ihr kein Bild?
Okay, Demo, Home Assistant.
Guck mal, ob da was drin ist.
Wir machen es gleich richtig advanced.
Wir machen sowas hier, guck mal.
Wobei das nicht das Richtige ist, was wir machen.
Sowas in der Richtung.
Guck, wir machen sowas hier.
Wobei das das das Fail ist.
Das mache ich nicht so.
Ich mache einfach nur Heating und an- und aus.
Wir machen so ein richtiges Thermostat, wo ich einstellen kann.
Ich bin gespannt, wie man das dem beibringen kann, dass er das automatisch anlegen soll.
Tja, aber kommen wir mal hier zum Chat, mal schnell.
Hey Max, wie ist deine Meinung zu SAP?
Glaubst du, das ist wirklich ein Top-Arbeitgeber oder mehr Scheinheit?
Das kann ich nicht einschätzen bei SAP, aber man darf nicht vergessen,
SAP schafft es seit bestimmt 15 Jahren oder so.
Softwaretechnisch weltweit vorne mitzumischen, also so schlecht können die nicht sein.
Schau dir mal ein simple Thermostat an.
Wobei, großer Laden an sich natürlich auch kein Garant ist.
Amazon hat nur auch nicht den besten Huf und Amazon, da flutscht eigentlich normalerweise alles.
Was soll ich mal angucken?
Home Assistant, simple HA.
Nee, nicht simple.
Was?
Simple Thermostat.
Das da?
Das hier auf GitHub?
ABAP-Stream, sowas werde ich nicht machen.
ABAP-Streamer.
Kommt als nächstes Fortran oder?
Nee, ich weiß, was wir als nächstes machen.
Als nächstes, wir haben letztes, wir haben letzten Weihnachten Kobold gemacht.
Kobold, wir haben letzten Weihnachten Kobold gemacht.
Wir machen dieses Mal Kobold in JavaScript.
Es gibt, es gibt Kobold, habe ich letztes gesehen, es gibt einen Kobold zu JavaScript-Compiler,
dass du Kobold im Browser verwenden kannst.
Nein, das stimmt nicht, nicht Kobold.
Einen Kobold zu JavaScript-Transpiler oder sowas.
Da kannst du quasi Kobold, deine Webseite in Kobold programmieren.
Rust, ja Rust müssen wir echt mal machen.
Ohne Mist.
Ich habe Rust, ich habe Rust ganz am Anfang verwendet, als es noch keine und nicht mal eine stable Version hatte.
Ähnlich, eigentlich lustigerweise, wie bei TypeScript.
Ich habe die meisten Hype-Sachen gemacht, bevor sie Hype waren, dann habe ich sie irgendwie sein lassen.
Und wir machen echt mal wieder Rust.
Ich habe ganz lange nichts mehr in Rust gemacht.
Es hat mich damals aber schon teilweise echt nerven gekostet,
weil Rust hat so eine Syntax, so eine Syntax, die ich wirklich äußerst Big Brain finde.
Rust, muss ich euch mal zeigen, Rust Lifetime Syntax.
Die ist echt...
Gib mir mal ein schönes Beispiel.
Ja, sowas hier zum Beispiel.
Also die Rust, die Syntax ist echt Big Brain.
Guckt euch das...
Also die Rust Syntax ist wirklich Massive Sixhead.
Das hier zum Beispiel, guck.
Sowas hier, das ist echt Next Level Shit.
Noch schlimmer wird es mit Return Types, die dann so...
Genau, sowas hier, sowas meine ich.
Also ich weiß nicht, ob sich die Rust Affinder mit so komischen Dingern dann gefallen getan haben.
Auf der anderen Seite muss man sagen, das was ich bisher von Rust gesehen habe ist,
das ist schon relativ konsistent, muss man sagen.
Also wie gesagt, ich habe das relativ am Anfang verwendet.
Da ist bestimmt ganz viel Neues mittlerweile dabei.
Vieles Alte macht man so gar nicht mehr.
Das ist schon ziemlich konsistent gewesen,
wenn aber auch nicht so eingängig von der Syntax.
Was ist da ein guter Package Manager?
Ja, da sieht man, was man machen kann, wenn man sich was ordentliches überlegt.
Nicht so wie bei C++.
Ja, wie gesagt, mehr kann ich...
Also was ich eben schon gesagt habe, mehr kann ich zuerst am Peer nicht sagen.
Also muss ja schon einen Grund haben, warum die sich so lang vorne halten
und warum ihr Kram immer noch in so vielen Unternehmen exklusiv eingesetzt wird.
Wie es da ist, kann ich dir nicht sagen, keine Ahnung.
In der Regel kann man aber sagen, das Gras ist auf der anderen Seite immer grüner,
wie es so schön heißt.
Also ich kenne das von vielen Leuten bei uns
und mir geht es auch manchmal so, dass denkt man sich so,
ah, bei uns läuft das kacke und bei XY läuft das bestimmt viel besser.
Aber alles, was ich dann immer von Leuten höre, die woanders arbeiten,
ist, dass es da auch nicht besser läuft.
Also das Gras ist auf der anderen Seite immer grüner,
denkst du immer toller, wie es ist?
Und wenn wir Services den ganzen Tag verwenden, wenn wir YouTube verwenden,
wenn wir Twitch oder Google oder sonst was verwenden,
ihr könnt davon ausgehen, dass das im Backend, im Hintergrund,
was da alles läuft, auch nicht alles rosig ist.
Da kriegen wir bloß nichts von mit.
Deswegen darf man auch nicht den Fehler machen zu denken,
die machen das alle besser.
Die machen das alle nicht besser.
Du weißt nur nicht, was sie schlecht machen.
Deswegen denkst du, ja, ja, das passt schon, das kann nicht passieren.
Wenn man dann aber teilweise sieht, wenn dann mal irgendwelche Sicherheitslücken rauskommen
und man dann sieht, dass irgendwelche Hersteller eins, zwei, drei, vier, fünf, sechs
als Datenbank Passport haben und sowas in der Richtung,
da sieht man wieder, das ist im Prinzip stimmt, was ich sage,
dass die auch alle nur mit Wasser kochen im Endeffekt.
Man weiß es bloß normalerweise nicht.
Und natürlich sagen die immer in ihrem, also alle in ihrem Marketingmaterial
und wenn sie dann irgendwie Werbung machen, so ja, bei uns Sicherheit,
das höchste Ziel und bla und hier und da.
Aber im Endeffekt ist das alles der gleiche Scheiß.
So.
Dein Arm ist nicht explodiert, das soll doch am 10.9.
Warum sollte mein Arm am 10.9. explodieren?
Ach du, ach du, du meinst, weil, äh, Dingsda, der, der, ne, ne, ne,
nicht Xavier, nein, du, Attila Hildmann, das bei sich auf Telegram geschrieben hat.
Ja gut, das ist klar, ja.
Wenn der das schreibt, dann muss das ja eigentlich auch,
ach, der Wendler war, ach, der Wendler war es, ach ja,
hab ich jetzt durcheinander gebracht.
Das, sorry Leute, das hab ich, das hab ich,
wie kann man, wie kann man das auch nur durcheinander bringen, ja.
Wenn der das schreibt, dann ist natürlich schon ganz, ganz bedenklich,
dass das nicht, wenn das nicht eingetreten ist, kann eigentlich gar nicht sein.
Ich mein, ist schon jemals, ist schon jemals,
was, was jemand von den Erzählern nicht eingetreten,
kann eigentlich gar nicht sein.
Also, äh, wenn dein, ist nix, guter Witz,
von dem Typ hab ich nix mal gelesen bis jetzt.
So, was Meinung zu Lasten heften, ja, BWL, Stonks, Oldschool Software, Projekte Style,
hab ich nix zu sagen, findest du das, Meinung zu Lasten heften, was soll ich sagen?
Das ist wie, wenn, wie, wenn, wenn mich einer fragt,
Meinung zu Wasser heen, so, kommt dann Wasser raus.
Und weil ich hab wahrscheinlich zu Wasser heen noch mehr Meinung als zu Lasten heften.
MinAce, oder MineA, ja, MinAce, doch richtig.
141, oh, das ein, ein Oldschool Call of Duty Fan,
bilde ich mir ein aus diesem Username rauszulesen.
Kann aber auch Zufall sein, danke schön für den Prime Sub.
Ach ja, Security By Design, ich muss euch was Lustiges von der Arbeit erzählen gleich, wartet mal.
Vielleicht könnte das für euch auch relevant sein, falls ich es noch nicht mitgekriegt hab,
weil morgen, morgen, morgen, wisst ihr was morgen?
Chat, Frage an die Big Brain IT Spezialisten hier.
Was ist morgen 16.01?
Was relativ wichtiges für das weltweite Internet.
Feierabend, nein.
Was ist morgen 16.01?
Wenn ihr es nicht wisst, habt ihr es vielleicht noch nicht mitgekriegt
und vielleicht solltet ihr es besser mitkriegen.
ByteStrike, das ist schon mal fast, fast richtig zu 99%.
Let's Encrypt, richtig.
Richtig.
Der Chat weiß es.
Da muss ich nämlich gleich was zu erzählen.
Also ich guck noch mal kurz den Chat durch.
Ach ja, Simple Thermostat sollten wir anschauen.
Boah, meine Augen, Alter.
Ah, jetzt.
Was ist an dem besser?
Was ist an dem Thermostat besser als an dem?
Ja, gut, das gedreht.
Das hier ist kacke zu bedienen per Touch.
Das stimmt schon irgendwo.
Können wir nachher mal ausprobieren, wenn ich das Thermostat da drin hab.
Machen wir dann gleich.
So, noch mal kurz den Chat durchgehen.
Ihh.
Ihh.
Wenn ich Dialog lese, ich hab was richtig Cooles auf dem
C Sharp Subreddit gefunden.
Und zwar, oh, Alter.
Meine Augen, ey.
Button.
Ich weiß gar nicht, wo es ist.
Warte mal, ich guck mal, wenn ich das jetzt nicht finde innerhalb der ersten.
Warum ist Reddits, warum ist das so sackig?
Warum kann das nicht einfach mal die ordentliche Ansicht haben?
Button, Button, Button, Button.
Nope.
Endless Scroll.
Shit.
Button.
Hier, guck mal.
Ich zeig's dir einfach auf GitHub.
Ihh.
Es hat einer, Windows Only, aber Windows Only.
Es hat einer eine Library programmiert, wo man.
Super, jetzt hat er nicht mal ein Bild.
The fuck.
Wo man in der Windows Konsole Buttons erzeugen kann, die man klicken kann.
Das ist, das ist, das ist irgendein, das ist irgendein MonkaS Windows Shit.
Guckt euch das mal an.
Terminal aufmachen.
Guck mal, Windows Terminal.
Windows Terminal mit Buttons zum Anklicken.
Es ist Windows Only, ich hab keine Ahnung, wie es funktioniert.
Das ist bestimmt Legacy NT 3.1 Zeug, ja kann sein.
Aber ich find's irgendwie cool.
Ich werd wahrscheinlich aber sonst keiner benutzen.
Amazing111, Dankeschön ins Sub.
Warum sollte man sich das antun, falls sich das auf Rust bezogen hat?
Weil Rust ein ziemlich cooles Konzept hat, als Programmiersprache.
Rust hat nämlich keinen Runtime-Overhead für Sicherheitschecks,
aber hat einen ziemlich cleveren Compiler,
der zu Compile-Zeit schon, sag mal, 99% der üblichen Fehler,
die man sich so einfängt, abfängt.
Zum Beispiel, wenn du eine Variable anlegst und die out of scope geht
und du danach drauf zugreifst und solche Sachen.
Das lässt Rust gar nicht erst kompilieren.
Das ist abfuck hoch 10, weil du es nicht gewöhnt bist,
dass der Compiler dich wegen jedem Scheiß anmeckert.
Aber in der Regel kann man sagen,
also das hab ich damals auch als ich ein bisschen Rust programmiert hab gemerkt,
in der Regel kann man mehr als bei jeder anderen Programmiersprache sagen,
dass wenn es in Rust kompiliert, dass es funktioniert.
Das kann dich natürlich nicht davor schützen,
dass du selbst Logikfehler gemacht hast, das ist klar.
Das kann ja Rust nicht wissen.
Aber unabhängig von deinen Logikfehlern funktioniert das.
Also es macht exakt das, was da steht.
Und das Ganze ohne irgendwelche runtime checks.
Dementsprechend ist es quasi so schnell wie C,
was es auch in Benchmarks wirklich ist.
Das ist nicht nur Gelaber wie bei anderen Sprachen,
das ist wirklich super Rust.
Und ist aber nicht anfällig für die Probleme, die du teilweise mit C hast.
Dafür hast du eine Syntax, die wirklich nur für 150 IQ plus geeignet ist.
Memory Leaks in Rust produzieren sind sicherlich möglich.
Du kannst bestimmt Sachen anlegen und irgendwie trickreich.
Du kannst eine Liste machen und immer nur Sachen reinschreiben
und nie wieder was löschen.
Ja klar, das kannst du fabrizieren.
Das ist aber kein Fehler in dem Sinn.
So, gucken wir mal kurz weiter.
Vielleicht werden das noch emerged noch.
Das kann doch richtig sein.
Hat noch. Danke schön für den ή.
Warum ist das Deleted? Kann man das anklicken, ohne dass man...
Was kommt denn da? Ich traue mich das jetzt an.
Magst du... Das ist auch noch so was Belangloses, Alter.
Das ist auch so ein Jep-Cock-Message.
Das ist schön zu hören, dass es auch noch andere so sehen.
Jaja, stimmt, stimmt, sollte auch sein.
Man macht so ein bisschen was in Go, können wir tatsächlich auch machen.
Ich hasse Go nicht, das stimmt überhaupt nicht.
Ich bin nicht der riesen Fan von einigen Sonntagsentscheidungen und Sprachentscheidungen,
die Go Designer getroffen haben, aber ich finde Go schon in Ordnung.
Go ist jetzt vielleicht nicht meine Lieblingssprache,
aber wenn ich mich entscheiden müsste, zwischen was in Go oder in C++ zu programmieren,
dann wisst ihr genau, was ich nehmen würde.
C-Sharp. Nee, dann würde ich 1.0 in Go nehmen.
Aber nicht wieder die Windows Defender auf Linux Story.
Wenn doch, was müsste man dann schreiben?
Chat, ihr wisst genau, Recycle Story.
Da muss der Chain-Lore erstmal da sein für Feierabend.
Genau, jetzt sind wir beim eigentlichen Thema.
Jetzt Encrypt. Morgen.
Ich glaube, Heise hatte da einen ganz guten Artikel zu.
Encrypt. Die ist ja schon wieder weg.
News Tigger. Wo ist der News Tigger?
Was ist mit dem Führerschein?
Digital. Moment, das muss ich mir jetzt mal angucken.
Das habe ich natürlich gar nicht gelesen.
Ja, das da.
Also, morgen.
Der Rüpel, Dankeschön für eine 18 Monate Hyper-Subscription.
Morgen um 30. September um 16.01.
Wenn ich das richtige Erinnerung habe.
Also 14.14.GMT.
16.
Heißt Heise irgendwie auch mal die Uhrzeit?
Äh, nein.
Ja, genau.
14.01.GMT. Das ist glaube ich 16.01. bei uns.
Läuft das RU-Zertifikat von Netz Encrypt aus?
Das sollte man sich vielleicht mal überlegen,
ob das Auswirkungen auf einen hat.
Diesmal ist es aber witzigerweise umgedreht.
Es sind die Server-Anbieter,
die Service-Anbieter gar nicht so sehr betroffen,
sondern die Clients.
Also, ich muss das jetzt mal ein bisschen erklären.
Also, Netz Encrypt ist eine Zertifizierungsstelle,
wo man sich kostenlos Zertifikate ausstellen kann.
Zertifikate sind sowas, was man hier braucht,
dass die Seite über HTTPS ordentlich funktioniert,
dass man hier so ein Häkchen kriegt.
Man braucht Zertifikate auch noch für vieles andere,
aber das ist wohl das meistverwendete.
Früher war das so, man muss Geld ausgeben,
man musste zu Komodo gehen.
Ich sage jetzt absichtlich die,
die es auch schon richtig verschissen haben in der Vergangenheit.
Zu Komodo oder was ist noch in Symantec
oder was ist noch alles an Geo Trusts,
was ist noch alles gibt an Zertifizierungsstellen.
Musste da hingehen,
musste ein Zertifizierungsprozess durchlaufen
und hat eine Zertifikate gekriegt.
Das ist glücklicherweise mittlerweile kostenlos möglich
mit Netz Encrypt.
Bei Netz Encrypt musst du nur noch belegen,
dass dir die Domain gehört.
Das geht über ein automatisches Verfahren.
Und dann kriegst du kostenlos Zertifikate.
Zertifikate, und das ist das Wichtige,
die von jedem Browser trusted sind.
Also jeder Browser vertraut Netz Encrypt.
Dementsprechend, wenn ihr Netz Encrypt Zertifikat habt,
kriegt ihr auch im Browser hier das Häkchen oben
oder das Schloss oben und sagt,
euer Connection ist secure.
Wenn ihr zum Beispiel auf meine Seite hier geht,
auf Dark Theme und guckt da hin, dann werdet ihr sehen,
Aha, Zertifikat Connection ist secure.
Valid, und zwar mein Netz Encrypt Zertifikat
ist valid vom...
Ah nee, ist Cloudflare.
Fuck, ich hab nix gesagt.
Das ist ja hinter Cloudflare.
Aber da würde normalerweise Netz Encrypt stehen,
wenn ich es über Netz Encrypt machen würde.
So, es lohnt, die kann ich gleich mal zu sagen,
aber ich muss das jetzt erstmal fertig machen.
So, und was morgen passiert ist,
das alte Root Zertifikat von Netz Encrypt läuft ab.
Das ist für Serverbetreiber überhaupt nicht schlimm,
weil euer Zertifikat bleibt weiterhin gültig.
Die haben Big Brain Move gemacht bei Netz Encrypt.
Ich glaube, hier sieht man es auch irgendwie.
Die haben ein bisschen mehr Zertifikat.
Die haben ein bisschen mehr Zertifikat.
Die haben ein bisschen mehr Zertifikat.
Ich habe es persönlich selbst nicht hundertprozentig verstanden,
aber die haben es irgendwie so gemacht,
die haben ihr neues Root Zertifikat
irgendwie abgeleitet vom alten Root Zertifikat,
als es noch gültig war.
Und die neuen Intermedia Zertifikate,
wogegen dann quasi auch die Zertifikat für euch ausgestellt werden,
die funktionieren weiterhin.
Also als Serverbetreiber ist das kein Problem.
Ich hoffe, ich habe jetzt kein Mist erzählt.
Es ist nicht so einfach, dieses Thema.
Die bleiben weiterhin gültig.
Das ist überhaupt nicht das Problem.
Das funktioniert.
Also das ist hier wirklich Big Brain, was die gemacht haben.
Die haben auch hier ein sonderes Workaround für Android gebaut.
Also das ist wirklich nicht schlecht.
Also das alte, das hier, das Root Zertifikat.
Warum hinter Cloudflare Angst vor DDoS beim Preischamp?
Was heißt das?
Ich habe Angst vor DDoS.
Das Erste, was passiert ist,
dass irgendwelche Leute den Preischamp GDDoS haben.
Es ist nicht so, dass ich mir das einrede oder so.
Das ist das Erste, das ist das Erste,
was noch während dem Programmieren des Preischamps passiert ist.
Also.
So.
Das hier ist das alte Root Zertifikat, was ausläuft.
Eure Zertifikate gehen im Endeffekt hier gegen die Chain.
Das ist kein Ding.
So.
Also das für Serverbetreiber kein Problem.
Aber so wie hier es steht,
alte Clients können die Verbindung verlieren.
Das heißt.
Wenn ihr z.B.
Euren Chrome 5 Jahre nicht geupdatet habt und auf einen Web Server zugreift
versus mit dem letzten Crypt Zertifikat,
dann ist es auf einmal nicht mehr gültig.
Das ist aber nicht das Problem.
Keiner hat einen 3, 4, 5 Jahre alt.
Was? Ich fand das da reingekommen.
Ich sage jetzt einfach irgendwas.
Alte Chrome.
Das ist nicht das Problem.
Aber und jetzt kommt das eigentliche Problem,
weshalb ihr vielleicht, wenn ihr so IT-mäßig irgendwo arbeitet,
auch mal überlegen solltet,
ob das nicht auch ein Problem ist.
As Serious Max, du musst mal wirklich gucken,
ob der Issuer das ist.
Das ist eigentlich nicht schlimm.
Das kann sein, dass das nur angezeigt wird bei dir,
weil das allerletzte Client in der Trust Chain
noch dieses DST-Root ist.
Ich würde wetten, du nimmst schon das Aktuelle mit dem Zertifikat,
weil die stellen, glaube ich, gar keine mehr aus,
wo das hier nicht drin ist.
So, aber jetzt kommt der eigentliche Knackpunkt,
warum es Probleme geben könnte
und sich jeder mal Gedanken machen sollte.
Es geht in dem Fall nicht um Server-Anbieter,
wo die Zertifikate nicht mehr gültig sind,
sondern es geht um Clients.
Und was können Clients sein?
Naja, zum Beispiel, wenn ihr den Linux-Server habt,
mit CentOS, zum Beispiel CentOS 7.
CentOS 7 ist das letzte so richtige CentOS,
was es geben wird in dieser Linie.
Und CentOS 7 ist ziemlich alt.
Und wenn ihr das nicht auf dem aktuellen Stand habt
und dort auf irgendwelche Dienste zugreift,
dann wird das am Morgen nicht mal richtig funktionieren.
So, und jetzt komme ich zu der Story von mir auf der Arbeit.
Wir haben nämlich auch CentOS 7.
So, und wir greifen zum Beispiel auf jede Menge
Let's Encrypt-Zertifikate zu.
Unsere ganzen Cloud-Services haben Let's Encrypt-Zertifikate.
Und wir dachten eigentlich die ganze Zeit...
Also was heißt wir dachten?
Wir dachten eigentlich gar nichts.
Es hat im Prinzip gar keiner mitbekommen.
Ich habe es am Dienstag zufälligerweise mitbekommen
und noch ein Kollege hat es mitbekommen.
Ich bin draufgekommen, weil ich einen Heiser-Artikel gelesen habe.
Und dann habe ich in einer Wartungsarbeitenrunde gehört,
dass da was ist.
Und da habe ich mich wieder dran erinnert.
Da ist doch was.
So, und jetzt kommt der Hit bei CentOS 7.
Also, die haben schon lange vor, fragt mich nicht,
zwei Jahren oder so,
haben die das neue Zertifikat verteilt von Let's Encrypt
in den Trust Store.
Also ich zeige euch mal, wie das aussieht.
Jede Linux-Distribution hat hier sowas.
Ich hoffe unter Arch Linux ist es auch da.
Ich bin mir gar nicht so sicher.
Hier, da, guckt.
Hier, das ist quasi der Trust Store.
Das bedeutet, dort liegen die Zertifikate drin
von den Stellen, die weitere Zertifikate ausstellen.
Also sprich, alle Zertifikate,
die von einem dieser Stellen hier ausgestellt wurden,
vertraut euer System.
So, da sind dann zum Beispiel auch so Sachen drin,
wie CREP X3.
So, das ist das alte Root-Zertifikat von Let's Encrypt.
Und das neue, boah, wie ist das?
IS, ISGR, nee, ISRG, ist da auch drinne.
Also, in meinem lokalen Trust Store ist alles drin.
Das funktioniert wunderbar, ist kein Problem.
Aber genau das haben die unter CentOS 7 auch gemacht,
mit einem Patch ausgeliefert.
Es gibt plus ein Problem.
Und das versuche ich euch jetzt mal zu zeigen.
Also sprich, wenn ihr Server administriert mit CentOS 7
und nicht innerhalb der letzten paar Tage Patches eingespielt habt,
dann habt ihr wahrscheinlich am Morgen ein Problem,
wenn ihr auf Let's Encrypt-Services zugreift.
Das wird dann einfach nicht mehr gescheit funktionieren.
Denn die haben zwar das Zertifikat verteilt
bei CentOS 7, also das neue.
Aber die haben eine verbackte OpenSSL-Version unter CentOS 7.
Und das wusste ich bis gestern Mittag auch nicht.
So, CentOS 7, Let's Encrypt, OpenSSL.
Ich muss hier mal kurz suchen.
Ich weiß nicht, ob ich das jetzt direkt finde.
Ob hier irgendwas steht.
Genau.
OpenSSL-Version auf CentOS 7 hat nämlich noch OpenSSL 1.0.2.
Und OpenSSL 1.0.2 hat einen Bug.
Wenn im Trust Store, also hier,
wenn unter CentOS 7 im Trust Store das neue Zertifikat
und das alte Zertifikat liegen,
dann gibt es bei OpenSSL einen Bug,
dass wenn er quasi zwei Zertifikate für die Trust-Chain findet
und eins davon ist ungültig, dann ist es immer ungültig.
Das ist ein Bug.
Oder weiß ich, ob es ein Bug ist oder ein Feature zu damaligen Zeiten.
Zumindest CentOS 7 ist das OpenSSL verbackt.
Und das OpenSSL ist 1.0.2.
Es gibt keine neuere Version als 1.0.2 für CentOS 7.
Das heißt, wenn ihr CentOS 7 habt
und wollt ab morgen Mittag 16.02 auf Let's Encrypt Surfaces zugreifen,
gibt es den Fehler, dass die Verbindung nicht mehr secure ist.
Es sei denn, ihr habt den neuesten Patch eingespielt.
Der kam aber auch erst vor ein paar Tagen.
Äh...
RPM.
Genau.
Diesen Package muss man aktualisieren,
nur mit dem Unterschied, dass die irgendwie...
Hä?
Da gab es vor zwei Tagen einen...
Ach so, ist es vielleicht hier eins davon.
What the fuck, wo bin ich denn hier gelandet überhaupt?
Ja, hier das da.
Guckt, es gab am 14.09. einen Patch.
Sieg ist ein bisschen laut.
Es gab einen Patch vor einer Woche,
die den Bug folgendermaßen löst,
indem sie einfach das alte Gut-Zertifikat rausschmeißt.
Das heißt, wenn ihr diesen Patch nicht eingespielt habt,
dann wird ab morgen eure Verbindung von CentOS 7-Systemen nicht funktionieren.
Nur mal so, nebenbei angemerkt.
Hi, haben Dankeschön für den Sub.
Ah nee, Timeout, Massive.
Ja, danke für den Sub.
Hat noch. Moin, Wedges.
Vinny, danke für den Sub. Sechs Monate hier, Massive.
Vinny, danke Prime Sub, heute geht es hier Schlag auf Schlag.
So, gehst du eigentlich in New World rein?
Habt deine Meinung dazu nicht mehr richtig in Ungen?
Nee, erst mal nicht.
Garantiert werde ich nicht spielen.
Ja, bei uns ist das witzig.
Bei uns hat man sich überlegt, also wir haben CentOS 7.
Und bei uns hat man sich überlegt,
ach, bis der CentOS 7-Support ausläuft,
haben wir eh alles in der Cloud.
Ich postchampe da jedes Mal bei dieser Aussage.
Bin mir da nicht so sicher, ob das wirklich der Fall sein wird.
Welche Thermostate benutzt du?
Ich benutze, du meinst an den Heizkörpern,
an den Heizkörpern habe ich tatsächlich
die Fritz Deck Thermostate mittlerweile.
Ich habe ein paar ausprobiert, auch Zigbee Thermostate.
Insgesamt muss ich ehrlich sagen,
das ist das Einzige, was ich Fritz Deck habe,
aber die Dinger funktionieren von allen Dinger,
also von allen Thermostaten, die ich ausprobiert habe am besten.
Die machen auch einen robusten, ordentlichen Eindruck,
ohne dass die gleich auseinanderfallen,
wie manche Zigbee, China, Chinesen Zeug.
Kein Ding.
Also das Einzige, was ich da im Einsatz habe,
Fritz Deck Home Automation,
aber die Dinger sind tatsächlich gar nicht schlecht.
Und die gibt es manchmal auch im Angebot,
da sind die Zweier Pack gar nicht mal so teuer.
Dafür würde ich das auch nicht kaufen.
Manchmal gibt es Angebote,
wo es dann irgendwie Zweier, Dreier, Vierer Pack oder so gibt.
Das lohnt sich aktuell nicht, also 45 Euro für einen Thermostate.
Vielleicht beim nächsten Prime Day, Black Friday,
Black Friday Week, Prime Week, September Special Week,
was auch immer es da bei Amazon alles gibt,
hat man vielleicht Glück.
Aber die finde ich wirklich nicht verkehrt.
So was genau ist denn jetzt schon wieder der digitale Führerschein?
Was soll das denn jetzt eigentlich schon wieder sein?
Chano, du hast deinen Einsatz schon verpasst.
Recycle Story.
Und du warst nicht da.
So was, die Bundesregierung hat den Start eines weiteren E-Government-Projekts.
Wer hätte das gedacht?
Also komm, das kann ja nicht sein.
Das kann nicht sein.
Also als wäre schon jemals,
als wäre schon jemals irgendein IT-Projekt unserer Regierung gescheitert.
Das können wir mir noch nicht erzählen.
Es ist noch nie was in die Hose gegangen.
Das glaube ich nicht, dass das in die Hose geht.
Noch nie.
Wir haben auch 50 MBit für jeden bis 2018.
Alles hat alles geklappt.
D-Mail.
Riesen Erfolg, Alter.
Jetzt erzähl doch mal nix.
Ich kenne sogar einen, der für D-Mail...
Nee, D-Mail oder was?
Wie ist das andere?
E-Post?
Nee.
Wie hießen die Konkurrenz zu D-Mail?
Ich bin mir jetzt nicht sicher, ob der für D-Mail oder die Konkurrenz gearbeitet hat.
E-Post-Brief.
Da war es doch E-Post-Brief.
Ich glaube E-Post-Brief.
Was wollen die?
Was die offizielle App der Bunde für den digitalen Führerschein ist eine Woche lang.
Was war denn überhaupt das?
Wenn ich den Kerl schon sehe, Alter.
Was war denn überhaupt das Sinn davon?
Digital Enabling GmbH.
Okay, Moment.
Die muss ich jetzt mal googeln.
Wer ist das?
Die Webseite sieht ja schon wirklich absurpleding edge aus.
Wie sie hier geschickt umschreiben, dass es verkackt haben.
Okay, Moment.
Ihr müsst stark sein.
Wie sieht denn die Webseite im Original aus?
Na ja.
Das geht aber schöner.
Das sind doch Stock-Fotos, oder?
Das ist doch so ein...
Moment, das kenne ich doch.
Das ist doch so ein Bilderset.
Das kenne ich.
Das habe ich schon gesehen.
Das ist doch so ein fertig designtes Bilderset.
Also wenn es das nicht ist, haben sie was gemacht, was der jetzt noch nicht hat.
Das ist doch so ein fertig designtes Bilderset.
Also wenn es das nicht ist, haben sie was gemacht, was der jetzt noch nicht hat.
Also wenn es das nicht ist, haben sie was gemacht, was der jetzt noch nicht hat.
Das ist doch so ein fertig designtes Bilderset.
Das ist doch so ein fertig designtes Bilderset.
Was auch immer.
Die ID-Wallet.
Die Brieftasche für digitale Identitäten.
mein Corona Zeug in der Corona App einscannen, da einscannen, dann gibt es ja noch ganz
verrückte Leute, die die Luca App am Start haben oder was auch immer, wobei, da muss
man ja nichts einscannen.
So, also zeig mal kurz her, was war denn das Problem?
AppStore nicht entfernen, man geht nun Sicherheitshinweise nach und legt das System auf höhere Nutzlasten
aus.
Wir hätten auch damit rechnen können, das ist ja fast wie bei Blizzard, wir hätten
nun damit rechnen können, dass die Leute es auch benutzen wollen, wenn es live geschaltet
wird.
Mal ganz davon abgesehen, wissen wir alle, in der heutigen Zeit ist das einfach Schwachsinn
und architekturtechnisch nicht richtig gemacht.
Wir haben schon bei KLS gelernt, dass man einzig das wichtigste ist, dass man skaliert.
Und die haben nicht richtig skaliert, das war das eigentliche Problem.
Hätten die nämlich richtig skaliert, dann hätten die ihre Services skalieren können,
das meine ich jetzt tatsächlich ernst, blöder Spruch zum Einstieg, aber das meine ich jetzt
ernst.
Also gerade so einen Service, denke ich, kann man super skalieren.
Selbst gehostet haben die das garantiert eh nicht, sowas kann man mit Sicherheit, wenn
es von der Architektur unten drunter gut gemacht ist, super, ähm, scalen.
In einer, ok, was ist denn das Problem sicherheitstechnisch eigentlich gewesen?
Da wurde nicht diagonal ins Endgame skaliert, so siehts aus, ja.
Außerdem haben die kein Blockchain gemacht, ohne Blockchain, und also die hatten kein AI
und kein Blockchain, ohne das müssen wir ja, gehts eh schon aktuell nicht mehr.
Und bis, bis SAC DEF OBS Leute, brauchen die auch, Pull Stack, Pull Stack bis DEF SAC OBS,
mit Blockchain.
Hier die Stockfotos, Shane, ich bin mir nicht so sicher, ob ich das aufmachen soll.
Ah ja, tatsächlich, genau, das sind die Stockfotos, die ich meine, ja, genau das, was der Chainlord
gepostet hat.
Ja, ich wusste doch, dass mir die Stockfotos bekannt vorkommen.
Ok, also was gibt es denn sonst noch, Alter was ist das denn für Spooky Spoda Musik?
Wo sind wir denn stehen geblieben, hier, zeig mal, das ist passend zum Thema, das stimmt.
Also, die ersten technischen Probleme mit der App traten bald nach dem Start am 23.
September auf, viele Nutzer konnten kein digitalen Wettbewerb, blablabla, ich will, was sind,
das waren dann die Security Bedenken.
Ok, was sagt der CCC, in den folgenden Tagen kritisieren auch Sicherheitsexperten die Anwendung,
man habe Grund zur Annahme, dass die Infrastruktur hinter der App und die zugrundlegende Block-
Ich habe nichts gesagt, Blockchain ist natürlich mit am Start, was sonst, natürlich, warum
auch immer man für so eine App irgendwas mit Blockchain braucht, will man da irgendwelche,
will da irgendwie einer Transaktion machen von seinem Ausweis zu einer anderen Person
oder was?
Schau da einen Twitter-Link an, welchen Moment, Twitter-Link, hier, Sekunde, ok, ok, ok,
ok, ok, gut.
Ich zähle 9 Blockchains, wat, was bin ich hier sehend, haben die da irgendwelche Testing
Sachen nicht entfernt oder was?
Ist das für Personalausweis-Dealer oder was, dass du die Transaktionen dann besser absichern
kannst oder wie?
Ja, wahrscheinlich hat irgendjemand von den Typen, die das beauftragt haben, gesagt,
aber, aber Leute, hier, mach das mit Blockchain, aber lass mal, lass mal weiterlesen.
Und ich so, okay, beim Einsatz der ID-Ballet-App dient eine Blockchain beziehungsweise ein
dezentrales Netzwerk, Distributed Ledger, als Vertrauensanker die Aussteller von Nachweisen
wie im Fall des Führerscheins, was sollen in dem Netzwerk Prüfdaten hinterlegen, Prüfer
zum Beispiel, oder, sollen die Daten einsetzen, steht aber immer noch nicht genau, wozu man
da jetzt eine Blockchain braucht.
Sind für sowas nicht genau Zertifikate erfunden worden?
Ist das nicht genau das, wofür beispielsweise eine, also wir hatten es doch gerade von CAs,
ja.
Ich kann auch nachvollziehen, ob eine Zertifizierungsstelle, eine gültige Zertifizierung, egal, vielleicht
muss man das im Detail kennen, sich wozu man eine Blockchain braucht.
Personsbeziehungen sollen ausschließlich auf dem Smartphone des Benutzers geben, weshalb
die Bundesländer auch selbst, das kann ja nicht einmal aussprechen, nicht für Polizeikontrollen,
als offizieller Nachweis da, Fahrerlaubnis zum Beispiel, Polizei kann, achso, achja gut,
der ist so krass geil durch Blockchain geschützt, dass er schon mal für offizielle Zwecken nicht
gültig ist.
Na geil.
Ja, wer hätte auch damit rechnen können, dass ein IT-Projekt von unserer Regierung
in die Hose geht?
Also ich, ich bin wieder zutiefst überrascht, also mich wunderts jedes, also es ist ja noch
nie passiert.
Wie hätte man damit nur rechnen können?
Wer hat das angeschossener Scheuer, keine Ahnung, lässt sich aber anscheinend gerne
mitfotografieren.
Sekunde Leute, ich muss mal kurz meine Lizenz eingeben.
Oh nee, wo habe ich denn meine Lizenz?
Ach da, da ist ja meine Lizenz, hab sie gefunden, alles klar, ja, passt, kann ich das starten?
Zwar ohne Scheißleute, ich hab wirklich eine Lizenz, kann ich euch sogar beweisen, dass
ich eine Lizenz hab?
Guckt.
Ich hab wirklich eine Lizenz, wer hat's erzählt hier, ich würde irgendwelche Pirate-Sachen
verwenden oder so?
Nachnamen-Leak, Bup, Leak, Eats-Twitch-Money-Regel, ja was hat denn das gekostet, ich glaub 100,
das war das 149 Euro im Jahr oder so, ich hab das komplette Desktop-Package, also ich
hab das JetBrains Desktop-Package, ich weiß gar nicht wie das heißt, All-Product-Package,
genau, 189 Euro oder so, kaufen, nee nee, nee nee das hab ich nicht, hä, ich bin jetzt
komplett hängen geblieben, das hab ich doch nicht gekauft, ach für persönliche Nutzung,
ah, ja, ja, ja, ja, genau, hier, das hab ich, genau, ich wollt grad sagen, so viel hab
ich noch nicht bezahlt, 249 Euro, genau, und dann wird's bisschen billiger jedes Jahr,
das Package hab ich mir geholt, da ist alles von denen drinne, also ich finde die kann
man wirklich unterstützen und die machen auch gute Sachen, nachdem ich von denen im Prinzip
Rider verwende, Golan verwende und das die CEDE manchmal oder die CEC++EDE manchmal
verwende, dachte ich mir so, ey, warum nicht, ja, die Preise sind echt gut, ja, ist echt,
ist wirklich so, kannst du dich, da kannst du dich wirklich nicht beschweren, hä, also
die zwei verwende ich regelmäßig, C-Line verwende ich auch öfters, hab ich jetzt hier
nicht installiert, wozu, haben wir ja kaum was, äh, die anderen Sachen verwende ich
ehrlich gesagt nicht, PyCharm hab ich installiert, für alle Schaltjahre mal ein bisschen was
machen in der Richtung, aber eigentlich, eigentlich so gut wie nie, Webstorm bin ich bis jetzt
nicht richtig warm geworden mit und das andere brauch ich, Rubymine brauch ich zum Glück
auch nicht mehr, IntelliJ und so kannst du ja alles kostenlos verwenden, so, ähm, würd
sagen, wir fangen jetzt mal an, wir machen jetzt mal was, komm jetzt nochmal kurz in
den Chat, ich dachte ich irgendwas übersehen hab, da, ich, also ganz ehrlich, du kannst
.NET programmieren mit Wishlist Studio Code, ich hab das auch ne Weile gemacht unter Linux
mit Wishlist Studio Code, also ich fand's viel hakelicher als mit Rider, allein schon
die ganzen Refactorings in Rider, mehr Hilfen, wenn du was hast, das automatische Importieren,
was besser funktioniert als in Wishlist Studio und in Wishlist Studio Code, ähm, die Anzeige
von Parametern und, also insgesamt, insgesamt ist das eine viel rundere Experience, Poetologe,
langische für den Primes Up, aber man kann natürlich damit anfangen, das ist kein Ding,
ja, besser als MonoDevelop oder sowas, ich weiß nicht, ob jemand von euch mal MonoDevelop
verwendet hat, muss ich mich früher mit rumschlagen, das sollte sich aber mittlerweile wegen LSP
verwendet haben, naja, Rider macht eigenes Zeug, Wishlist Studio kann höchstens so gut
werden mit LSP wie, sag mal mal, Wishlist Studio selbst, was die verwenden, die Budget
Plans haben ja für alles noch eigeneres Tooling dabei, also beispielsweise auch wenn du, wenn
man Go Land verwendet, die verwenden ja auch nicht die offiziellen und nicht nur die offiziellen
Go Tools, die machen ja auch viele Analysen selbst, das heißt, Go Land ist viel besser
in Go was Autocomplete und solche Sachen angeht als, sagen wir mal, Go mit Wishlist Studio
Code, so, mal gucken, ob ich irgendwas übersehen habe, Mist, leaked, du hast keine Blockchain
für Rider, ich glaube, ich mache mal einen Feature Request auf bei JetBrains, das ist
übrigens auch eine geile Aussage gewesen, wir haben einen Anbieter bei uns auf der Arbeit,
der E-Mails-Spam-Filter macht für uns und was bei uns etwas merkwürdiges Verfahren
ist, aber das ist Absicht, wir filtern unsere eigenen Mails, also normalerweise würde man
ja sagen, wir haben einen Spam-Anbieter, der eingehende Mails filtert, aber wir filtern
auch ausgehende Mails, also Mails, die quasi unsere Außendienstmitarbeiter schreiben,
die werden gefiltert durch den Spam-Filter, warum, weil schlicht und ergreifend Leute
Spam verschicken von denen und weil unsere Reputation schon öfters mal, also zwischen
E-Mails-Server, schon öfters mal ziemlich gelitten hat wegen irgendwelchen Rumspammern,
wir hatten sogar Leute, die haben irgendwelche raubkopierten Isos mal verschickt und sowas,
als E-Mail-Anhang, 600 MB und die haben dann sogar bei der Hotline angerufen und sich beschwert,
warum kann ich meine E-Mail nicht verschicken, ja weil du gerade versucht hast eine Iso zu
verschicken über ihren offiziellen E-Mail-Account, naja gut und dieser Anbieter, der blockt natürlich
auch ab und zu mal falsche Mails und ich habe was programmiert, was diese falschen Mails,
ich habe was programmiert, was automatisch die E-Mails frei gibt, die im Spam-Ordner
landen, die ausgehend sind, das ist relativ simpel, ich nehme einfach einen Chrome und
mache mit Papetier Fernsteuerung, ich klicke quasi das, was man von Hand im Web-Interface
macht durch automatisch im Hintergrund und das funktioniert eigentlich auch ganz gut,
aber bevor ich das gemacht habe, haben wir den Anbieter, unseren Spam-Filter-Anbieter
angefragt und haben gesagt, sag mal, habt ihr nicht irgendwie eine API für E-Mails frei
zu geben?
Ich meine, das ist im Jahr 2021, warum geht das nur über ein komisches uraltes Web-Interface,
warum kann man nicht einfach sagen, hier wir authentifizieren uns mit einem API-Talk und
geben dem Kram eine API frei und da haben die geschrieben, nee, API gibt es nicht, gibt
es nicht, aber sie haben dazu schon einen internen Feature-Request eröffnet.
Ich habe auch gedacht, wow, das ist ja toll, da habe ich jetzt richtig viel von, da bin
ich ja froh, dass ihr einen internen Feature-Request eröffnet habt, natürlich gibt es das bis
heute nicht, so Leute, falls ihr irgendwas übersehen habt, schreibt es nochmal in den
Chat, glaube ich habe ein paar Dinge vorhin übersehen, haben wir doch gemacht, das war
legit der letzte Hetzner Server-Stream, wo wir sowas gemacht haben, skalierbare Server-Anwendung,
das war der letzte Hetzner-Sponsor-Stream, wo wir sowas gemacht haben, das ist zwei Wochen
her oder so, da haben wir die manuelle Variante gemacht, mit Loadbalancer davor, gibt es
ein Wort?
Ja, gibt es bestimmt noch ein Wort, ok, Wort, wo bloß, TV, Archiv, hier geht es zur Übersicht,
Google Drive 2021, ja, du musst jetzt den Titel erstmal raussuchen, den Titel findest du,
hier Loadbalancer, das ist es doch, Loadbalancer, GitHub, GitHub Actions, Hetzner, CACW as
a microservice, ja, die Vorschau ist gerade broken bei mir im Browser, weiß ich nicht,
du kannst ja runterladen, das funktioniert, da haben wir das gemacht im Stream, ja, guck,
jetzt bin ich wieder am Start, ich bin wieder am Start, oh, huge quality, hier sehe ich
schon gerade, tja, das Archiv ist ein bisschen, bisschen viel Traffic auf Google vielleicht,
von einem User, also für ein User-Account, übrigens meine YouTube-Empfehlungen sind
kaputt, seht ihr das, normalerweise kriegen wir immer noch halbwegs sinnvolle Sachen empfohlen,
heute ist einfach komplett random, komplett random resettet, als wäre ich nie eingeloggt
gewesen bei YouTube, nicht eingeloggt, also als hätte ich nie, hätte ich das nie verwendet,
ich habe meinen Cash nicht gelehrt, ne, ne, ist alles noch da, ist alles noch da, ich
weiß, dass ich nicht eingeloggt bin, ich meine ja auch nicht eingeloggt, ne, ich habe keine
Cookies gelöscht, das geht, das ist wahrscheinlich gerade broken, wie viel Cloud Storage, ein
paar Terabyte ist das, ist das schon, so.
Also, dann fangen wir mal an, basteln wir heute mal ein bisschen was.
Also, ich sag euch jetzt mal wie es ist, Realtalk Leute, die beste Variante Git zu verwenden
oder auch Shit ist über die Kommandozeile, jeder der Git nicht über die Kommandozeile
bedient ist ein Kacknoob, so, jetzt ist es raus, hey Max, was hältst du von Net, was
für einem Ding, Network Optics IP NX, Professional Video Management, kein Schimmer, kannst du
mal Git Share Replic erklären, ja, da bräuchte ich ein Beispiel für, du nimmst halt ein
Comet und schiebst es woanders hin, beziehungsweise stimmt nicht, stimmt nicht, das ist falsch,
das ist eigentlich komplett falsch, was ich gerade gesagt habe, Git Share Replic, guckt
sich das Diff an, von dem Comet, was du angibst, applied das Diff dort wo du gerade bist in
dem Branch und mach dann ein neues Comet oben drauf, mit dem gleichen Inhalt, was Outdoor
sonst was angeht vom Original Comet, jetzt habe ich desktop, ne ne, Leute ich mach seit,
ich weiß das ist jetzt nicht wirklich ein gutes Argument, aber da sieht man, dass es
auf jeden Fall funktioniert, ich mach seit ein paar Jahren, wirklich zum größten Teil
lese ich Comets und Pull und Merchrequests von anderen Leuten und kümmere mich darum,
dass das rechtzeitig reinkommt, also ich würde sagen, mal locker 50% von meinem täglichen
To Do auf der Arbeit sind irgendwelche Git, Repo, Release Management Geschichten und ich
habe noch nie, jetzt ernsthaft, kein Witz, ich habe noch nie ein anderes Tool als die
Git Kommando Zeile verwendet, außer für Diffs, beziehungsweise Merch Konflikt Diffs, das
ist das einzige wozu ich ab und zu mal ein externes Tool verwende, wenn man keinen Bock
hat in Wim komische Zeilen zu suchen, die anfangen mit so und so und so, nutzt ihr ein
eigenes Git Lab, wir hatten Git Lab, das habe ich damals eingeführt, hatten sie aber keinen
Bock mehr drauf und haben jetzt Bitbucket für alle, seitdem funktionieren meine Git
Talks nicht mehr, richtig, das ist richtig, dafür kann ich es verstehen, wenn Leute das
verwenden, also wenn man, ich habe vergessen wie das heißt, wenn man einzelne Zeilen nur
edit anstatt ganze Dateien und sowas, dann kann ich es verstehen, wenn man Hilfstools
verwendet, aber das mache ich eigentlich nie, Gangstate, genau, korrekt, ja so heißt das,
ja, ich weiß, man kann glaube ich sogar mittlerweile Interactive adden und sowas, aber das brauche
ich nicht, ich mache Changes, auch wenn es drei Dateien sind, sage ich dann Bam, neues
Git, das kriegt dann eh die besten Comet Messages aller Zeiten immer, so temp und blub und sonst
was und am Ende mache ich dann meistens ein Comet raus und fasse das zusammen, das wird
heute nichts, doch wir fangen jetzt an, wir fangen jetzt an, ihr verwendet intern SVN
und kein JIT, das ist aber ziemlich fail, ich sage nichts über Wim, der einzige wahre
Konsolen Editor, kommt mir keiner mit Nano oder Emacs oder sowas jetzt an, also Merch
Konflikte lösen mit Wim auf der Konsole je nach Umfang, es gibt übersichtlichere Sachen,
es ist alles bloated, wir machen nur noch Seed, ich mache immer init, ich mache init,
obwohl ich irgendwann habe ich 30 init Messages, was keinen Sinn ergibt, oder temp oder egal,
doch das kenne ich, das ist ein SVN Klein für Windows, kenne ich, das habe ich ganz
ganz früh auch mal verwendet, so also auf gehts, wir machen jetzt mal was sinnvolles,
wo sind wir denn stehen geblieben, also, ich habe meine Home Assistant Test Installation
hier irgendwie, ich mache den Kram hier mal zu, was haben wir hier alles auf, ich habe
meine Home Assistant Test Installation hier irgendwo, da guck mal, hier, das ist meine
Home Assistant Test Installation, so einen Knopf für die Heizung haben wir auch schon,
das haben wir das letzte Mal gemacht, da kann ich mich dran erinnern, die kann man sogar
drücken, aber dann passiert nichts, weil irgendwas kaputt ist, und hier haben wir ein Device,
nämlich den Heizchamp, der einen Button hat, der einen Switch hat für an und aus, ok,
da kann ich mich dran erinnern, genau das haben wir das letzte Mal gemacht, da sind
wir stehen geblieben, so, und heute ist mein Ziel, dass ich nicht einfach einen Switch
kriege, sondern einen Thermostat in meinem Home Assistant für die Heizung, irgendjemand
schreibt mir was auf dem Handy, warte mal kurz, jetzt kriege ich Nachrichten aus irgendeiner
Teams Gruppe, wo Leute schreiben, Pause bis 21 Uhr, ich bin seit 16 Uhr weg, mir ist
das jetzt ehrlich gesagt ziemlich wurscht, ob die Leute Pause bis 21 Uhr machen oder
nicht, warum kriege ich denn jetzt noch Benachrichtigungen, na gut, so, und so soll das dann am Ende aussehen,
ich will so einen Thermostat machen, das heißt, ich muss jetzt irgendwie gucken, wie ich
über die MQTT Schnittstelle, so wie wir den Kram hier auch reingekriegt haben, einen Thermostat
anlegen kann, so, wie haben wir denn hier aufgehört, blub, was ist das hier alles, Crap, den wir
nicht brauchen, achso, Moment, das war das, was wir hier getestet haben, ich muss das
nochmal kurz auskommandieren, wo sind wir denn stehen, was haben wir denn hier gebaut,
ok, das hier war noch überhaupt nicht funktionsfähig, das hat überhaupt nicht funktioniert, was
wir da gemacht haben, ich kommentiere den Kram mal kurz wieder ein und gucke, ob das
noch funktioniert, was ich da gebaut habe, also, wow, nö, warum funktioniert das jetzt
nicht, ok, ich habe ehrlich gesagt keine Ahnung, wo wir stehen geblieben sind, deswegen ignore
ich das jetzt einfach mal und wir versuchen einen Thermostat zu bauen, dazu muss ich erstmal
wissen, wie ich einen Thermostat anlege, deswegen suchen wir mal Home Assistant MQTT, da haben
die nämlich Discovery, da habe ich nämlich ein schönes Beispiel für, wo die Hälfte
nicht drin steht, das haben wir auch schon festgestellt, genau, hier haben sie ein Beispiel
für einen Thermostat, also, wenn ich möchte, dass Home Assistant mein Gerät als Thermostat
erkennt, muss ich eine MQTT Message mit diesem JSON Payload schicken, wenn ich das richtig
sehe, was mir hier erstmal auffällt ist, dass sie unglaublich auf Abkürzungen stehen, ich
meine, guckt euch das mal an, kur-temp-tüppel oder temp-stet-ti, das soll wahrscheinlich
Topic heißen, wo das drauf lauscht oder so, welche Idee, das ist Ryder, ja, ja, warum
ist MQTT so Paynes-Champ, ist das gar nicht, das ist, das ist die JSON, das ist das JSON
Payload, der Paynes-Champ ist, ok, dann probieren wir das doch mal anzulegen, wir legen jetzt
mal ein Thermostat in Home Assistant an, das probieren wir mal aus, so, bevor ich da irgendwie
eine eigene Klasse oder sonst was zu bau, wir machen das mal wirklich, wir machen das
mal so wie das letzte Mal, wir legen dieses JSON Ding mal von Hand an und gucken, ob das
dann funktioniert, so, hier Publish, Subscribe, das brauchen wir nicht, ja, mal Debug-Ausgabe,
was wir da haben ist vielleicht nicht verkehrt, so, jetzt mal schauen, also was brauchen wir
denn hier, Name, Name wird auf jeden Fall, Name wird auf jeden Fall, aber Heizung, ist
doch egal, wie ich das nenne, so, Device-Info, wo wir das haben, Device-Info ist bei Home
Assistant, das ist eine richtig coole Sache, die sie sich hier ausgedacht haben und zwar,
Leute, ich hab keinen Bock da so geplägt, ok, hier funktioniert der Darkreader nicht
so wirklich gut, aber ich glaube, die haben einen Darkseal mittlerweile, lass mal kurz
gucken, ja, gleich viel besser, so, was ganz cool ist, man kann bei Home Assistant, also
Geräte können sich automatisch dort eintragen lassen, man muss nicht mehr alle Geräte in
die Config eintragen, das geht aber nur, wenn das Gerät quasi weiß, dass man Home
Assistant verwendet bzw. eine Option hat, es in einem Home Assistant-kompatiblen Format
zu annoucen, so, und da kann man jetzt sagen, man legt ein Gerät an, das ist dann das hier
in dem Fall, kann man sagen, hier, ich bin ein Raspberry Pi, hergestellt vom Twitch-Chat,
Hostname ist der hier und Version-Number ist der hier, ziemlich bescheute Version-Number,
by the way, und da legt er das hier so als Device an und alle Sensoren, die man jetzt
anlegt, unten drunter, ja, von Schaltern bis Temperatursensoren und sonst was, die kommen
als Einträge unter diesem Device, das heißt, man hat jetzt nicht 20 unabhängig voneinander
angelegte Sensoren, sondern alle Sensoren gehören zu einem Gerät, so, und jetzt versuche
ich mal einen Thermostat anzulegen, da muss ich jetzt mal gucken, wie wir das machen,
also, State-Topic, wir müssen das mal zusammenbauen, ich copy-paste mir mal das Beispiel, also
das da müssen wir jetzt, das müssen wir jetzt anlegen und gucken, ob da dann ein Thermostat
im Web-Interface bei rauskommt, ich hab da so meine Zweifel, dass das auf Anhieb funktioniert,
aber, aber, schauen wir mal, schauen wir mal, also, State-Topic ist dann, bauen wir das
mal, bauen wir das mal so zusammen, zack, äh, Name, wie heißt das, Heizung, ich hab,
hier ist Heiz-Champ, Heizung, so, Sensor, Name, so, ID, braucht irgendwas, irgendwas
random meistes, aber ist jetzt zum Testen eigentlich egal, was, wie ist eigentlich das
Auferlay von Home Assistant, also bezüglich auf dem Tablet und zum Steuern, ja, das ist
alles das gleiche, das ist immer das hier, guck, das ist ziemlich, das ist ziemlich,
wie sagt man, responsive, das Web-Interface von denen, das kannst du ohne Probleme auf
dem Tablet verwenden, huge responsiveness hier, das haben die wirklich gut gemacht,
das Web-Interface, du kannst das ohne Probleme gut, gut scale, also du kannst das auf dem
Tablet, du kannst genau das gleiche Interface auf dem Tablet verwenden, wenn wir jetzt hier
unsere Test-Home Assistant-Installation nehmen, du kannst ja hier oben verschiedene Tabs,
also wenn du beispielsweise ne, ne, ne Ansicht haben willst, wo die nur die fünf wichtigsten
Sachen drauf sind, kannst du dir das als Tab machen und das hier dann als Bookmark speichern
oder so, das geht, aber du verwendest das gleiche Interface wie auf dem Desktop, ja,
die App ist ja im Prinzip das Web-Interface als App gepackt, das ist ja quasi nen Browser
mit, mit native Funktionen für das jeweilige Device dabei, ja, aber das Web-Interface ist
jetzt quasi so ne Web-View, so, Name, Name, Name, so, ID, wir brauchen mal ne ID, irgendeine
random ID, ich würd sagen, die ID ist random genug, oder, bam, huge ID, alles klar, Command
Topic, also was muss ich denn jetzt anlegen, damit ich einen Thermostat im Home Assistant
bekomme, Name, Name haben wir schon, Mode Command, also ich werf mal alles raus, was aus meiner
Sicht nicht sinnvoll aussieht, Templates, brauchen wir nicht, Online, Offline, ist immer
online, brauchen wir nicht, Templates rauswerfen, also, meine Heizung kann nur an und ausgeschaltet
beziehungsweise, ne, das stimmt nicht, meine Heizung, also das Thermostat, was der anlegt,
kann die Heizung nur aus oder auf Heizen schalten, was sinnvoll ist, was anderes kann meine Heizung
eh nicht, Temperature Steps 0,5 machen wir nicht, Temperature Steps 1, Minimal Temperatur
ist, keine Ahnung, 5 Maximal Temperatur ist 35, reicht, ok, Current Temp Topic, das heißt
doch bestimmt Topic, oder, soll ich irgendeine Abkürzung für, ach doch, hier, guck mal,
ok, anstatt Current Temp T kann ich auch Current Temperature Topic schreiben, ist halt die Frage,
will ich das ausschreiben, will ich das abkürzen, ach das ist mir egal, all die wolltest du auf
die Mac Adresse setzen, ja will ich auch, haben wir auch hier schon programmiert, aber ich
will jetzt erstmal ein leeres Thermostat anlegen im Home Assistant Web Interface, um zu gucken,
ob das überhaupt funktioniert, was ich hier mache, dann kann man da ja auch was sinnvolles
reinschreiben, kann die Heizung nicht aus warm Wasser, warm Wasser und Heizung doch,
aber das ist nicht, was ich in so einem Thermostat einstellen will, in dem Thermostat will ich
nur Temperatur einstellen und Heizung an und aus, das warm Wasser würde ich gar nicht
in dieses Thermostat reinpacken, das würde ich als extra Button machen, deswegen wir
brauchen als Sensoren, wir brauchen als Sensoren, also sprich als Geräte, die in Home Assistant
auftauchen brauchen wir am Ende, wir brauchen hier ein Thermostat Sensor, wir brauchen
einen Switch, zum Beispiel warm Wasser umschalten und so was in der Richtung und wir brauchen
sicherlich noch ein paar Sensors für irgendwelche Infos, von Inventarnummer bis Brennertemperatur
und sonstige Geschichten, also die drei Sachen müssen wir dann anlegen, sodass Home Assistant
das versteht.
Ich will jetzt erstmal ein Thermostat anlegen und gucken, ob das funktioniert, also Name
State Topic, Command Topic, okay fangen wir mal oben an, Mode, CMD, Topic, WTF, okay,
wir machen das jetzt, wir Copy Pasten das jetzt einfach mal sinnlos und gucken, ob dann irgendwas
rauskommt, was aussieht wie ein Thermostat im Web Interface, also Command Topic brauchen
wir nicht, wir ersetzen das jetzt einfach mal zu irgendwas Sinnvollem, dass es dem entspricht,
was da oben drin steht, also wir brauchen einen Command Topic und das ist in dem Fall Home
Assistant, ach Climate, guck mal ich hab hier noch Switch drinstehen, das kann ja gar nicht
funktionieren, so, Home Assistant, Climate, ID, Name, State, okay, das ist aber falsch,
ich will Thermostat Mode CMD haben, ich vermute mal, dass es irgendeinen Magic Eintrag, dass
das nur so funktioniert, welche Distro verwendet das, das ist Manjaro mit I3WM, ja korrekt,
das was der Bot auch schon geschrieben hat, so also Thermostat, Mode Stat, State, wunderbar,
State lassen wir einfach so, Aff, Aff, Aff, was für ein Ding, Afti T, Afti, was, was
für ein Ding, Availability Topic, wer hat denn das abgekürzt, es gibt doch die I3Config
auf GitHub, das stimmt, ich hab mal irgendwann so eine Minimalversion von meinen Config Files
auf GitHub hochgeladen, das ist nicht so wirklich, was, warum, warum schreib ich da.NET in.Files,
alter, ja, so eine Minimalconfig von meinem Kram hochgeladen, das ist nicht wirklich alles
und das ist auch nicht so wahnsinnig aktuell, das ist schon 2 Jahre her, aber für das meiste
reicht es, ja da kannst du zum Beispiel, dass du dich von der Wim-Config bis, hier ist nicht
viel drin, bis zur I3-Config von mir das Zeug angucken, Wim oder Neo-Wim, ach das was dir
am liebsten ist, ich glaube ich hab, was hab ich denn, ich glaube ich hab normalen Wim,
kein N-Wim, was denn, Neo-Wim, ne ich hab, Aff, also das was, ich verwende das ja nur
auf der Kommandozeile um Sachen schnell zu editieren, ich, also mir ist das ziemlich
egal, ich hab, ich hab auch mal eine Weile Neo-Wim verwendet, das war so, als ich auf
dem Trip war, ich will mein Wim zu einer IDE umbauen, ich hab damals sogar, ich hab damals
sogar ein eigenes Wim Autocomplete, äh, nicht Autocomplete, stimmt nicht, File Search Plugin
gebastelt, mit Ruby zu C-Bindings, ganz abgedrehter Shit, toller Müll eigentlich im Nachhinein
betrachtet, aber das war, das was es gab, war mir damals zu langsam und als ich festgestellt
hab, ich muss anfangen, das war so der Anfang vom Ende, wo ich versucht hab mein Wim zu,
umzubauen zu als, zur alsback Waffe, aber als ich festgestellt hab, ich muss eigene
Sachen programmieren, dass ich so basic Sachen, äh, wie File Search schnell genug hin bekomme,
ich weiß, da gibt's mittlerweile bestimmt bessere Sachen, hab ich mir gedacht, warum
willst du eigentlich dein Wim umbauen in was, was du für alles verwenden kannst, und
dann hab ich angefangen einfach die passenden Tools für den passenden Einsatzzweck zu verwenden,
ja, sei es Visual Studio unter Windows, Visual Studio Code für, ähm, für Frontend, Arduino
Zeug, also für Frontend Zeug, für Arduino Zeug, für irgendwelchen Kram, Rider für
.NET unter Linux, Go Land für Go, äh, ich hab einfach, ich nehm jetzt einfach die passenden
Tools dafür, und ich hab lang genug an meiner Wim-Konfig rumgeschraubt, und versucht das
zu einer alsback Waffe zu machen, ich hab alles weggeschmissen mittlerweile, hab basic
Wim-Settings und fertig, ja, ok, machen wir mal weiter, also Thermostat-CMD, Visual Studio
Code ist ziemlich nice, also gerade Platform I.O. für, äh, für Arduino-kompatibles Zeug
ist wirklich nice, und auch was an Plugins gibt, also man kann eigentlich über Visual
Studio Code kaum was schlechtes sagen, vielleicht dass es ein JavaScript-Programm ist, aber
ansonsten ist Visual Studio Code doch echt nicht schlecht.
Was sagt ihr Leute? WebStorm, WebStorm oder Visual Studio Code für Frontend Zeug? Ich
hab WebStorm nie richtig verwendet, wird mich mal interessieren, falls einer von euch beides
ausprobiert hat. WebStorm oder Visual Studio Code? Ich mein, Visual Studio Code hat eindeutig
die Plugin-Welt auf seiner Seite. Deswegen kann man gar nicht sagen, dass es, ich hab
zwar gerade gesagt, das ist ein Nachteil für mich, dass es ein JavaScript-Programm ist,
aber mal ganz ehrlich, Visual Studio Code ist nur so erfolgreich, weil es ein JavaScript-Programm
ist. Sonst gibt's da gar nicht so viel Zeug für. So, also, äh, Mode-CMD-Topic, bla bla
bla, haben wir gemacht. Mode-Stat, okay, lassen wir das so. Valiability brauchen wir nicht.
Jetzt haben wir was? Temp-CMD-T, meine Güte, was haben die sich denn da wieder ausgedacht?
Temp-CMD-T, das kriegt Target Temp-CMD. Ich copypaste das jetzt einfach nur. So, dann
haben wir als nächstes wieder irgendein Stat-Topic, das kriegt das gleiche wie oben. So, dann haben
wir Current Temp-Topic, das ist anscheinend auch das gleiche wie oben. So, dann brauchen
wir Min-Temp. Gut, Min-Temp habe ich halt 5. Ups, gleich, sehr richtig. Was? Hast du
Vim-Control? Nein, habe ich nicht. Äh, habe ich nicht. Ich stehe total auf diese Vim-Bedien-Language,
ja. Also, ich finde das nice, wenn du mit F und T irgendwie hinspringen kannst, mit
N hoch und runter suchen, äh, äh, großes D ab da, Zeile löschen, äh, X drunter
schreibe. Ich finde die Vim-Language an sich zum Ende richtig geil, aber ich komme damit
im Kopf nicht klar, wenn ich nicht in der Konsole und nicht in Vim bin, Vim-Keys zu
verwenden. Sobald ich irgendwie so einen Editor wie hier habe, dann bin ich in meinem Kopf
in Maus-Bedienung. Ich kann das nicht erklären. Wenn ich das hier jetzt aufmache, gar kein
Problem, da bin ich in Tastatur-Bedienung. Da muss ich überhaupt nachdenken, aber sobald
ich sowas hier vor mir habe, da bin ich in meinem Kopf in Maus-Bedienung. Ich meine,
ich benutze ein paar Sachen, ja. Hier sowas wie zum Beispiel Zeilen verschieben, was aus
irgendwelchen Gründen nicht geht. Also manche Shortcuts verwende ich hier drin auch, aber
ich bin hier im Maus-Bedienungsmodus, ich komme damit nicht klar. CMD-T ist wahrscheinlich
ein Shortcut für CMD-Topic. Ja, jaja, mit Sicherheit. Command-Topic ausgeschrieben
wahrscheinlich sogar. Wahrscheinlich, wie gesagt, wahrscheinlich ist die volle Schreibweise
so. Mode-Command-Topic. So, Maximal-Temperatur. So, Steps, Steps lassen wir weg. Steps ist
standardmäßig bestimmt 1. So, Mode. Ah ja, Modes. Ok, da, oh, wir gucken, ob das jetzt
serialisiert kriegt, so eine Pring-Array. Gleich new JSON. Ah, da kann das. Ah ja, nice.
Kann der sowas hier machen? Hey, cool. Off. By the way, das was ihr hier seht ist übrigens
nicht newtonsoftjson.net oder sowas. Das ist die neue.NET 6 JSON API, die sie oben drauf
gebaut haben auf, wie heißt es, System Text JSON. Die haben doch vor einer Weile newtonsoftjson
rausgeschmissen aus asp.net.com und haben ihr eigenen Krempel drauf gemacht. So, darauf
hin haben die Leute gesagt, Microsoft seid ihr bescheuert, euer neuen Kram der Markt
zwar schnell sein, aber KaiSau kann den bedienen. Und jetzt hat Microsoft gesagt, ah ja gut,
dann machen wir halt mit.NET 6 da noch was oben drauf, was man besser bedienen kann.
So, und das ist das. Und soweit ich weiß, arbeitet daran auch der ehemalige Entwickler
federführend vor newtonsoftjson.net. Also sprich, Microsoft hat den Typ quasi eingekauft,
der die bekannteste JSON Library für.NET hergestellt hat. Naja, ich persönlich verwende
eigentlich immer noch am liebsten newtonsoftjson.net, einfach weil ich mich dran gewöhnt habe. Und
dieser, was weiß ich, wahnsinnige Performance Overhead bisher bei mir noch nie Probleme
gemacht hat, aber ich kann mir vorstellen, dass man wirklich Probleme bekommt, wenn man
da Millionen Requests hat. Ja, aber das haben meine Anwendungen in der Regel nicht. Ist
newtonsoftjson.net das gleiche wie newtonsoftjson.net? Ja, ja, das ist das gleiche. Das ist so Object
Initializer Sonntags. Das ist das gleiche. Guck, der sagt ja auch hier, du kannst das
weglassen. Das finde ich übrigens auch cool an Rider, ne, by the way, so Dinger. Dass
die dir das anzeigen, ist eigentlich nicht erforderlich. Teilweise machen sie das im
Ritual Studio aber mittlerweile auch schon. So, und jetzt gucken wir mal, ob der jetzt
einen Thermostat anlegt. Also ich würde mir ja echt den Arsch weisen, wenn das jetzt
einfach funktioniert. Mode of on. Publish, nee nee, Publish ist schonmal falsch. Wir
wollen auch auf climate publishen. Config, richtig, json message. Gut, schauen wir mal,
was der ausgibt. String, schauen wir mal, was der ausgibt, ob da irgendwas Sinnvolles
bei rumkommt. Run. Wo war es denn jetzt schon wieder? Moment, das hatten wir doch schonmal.
Export. Ah, jetzt gehts. Das ist weil ich dort net 6 Preview Versionen entzielt habe.
Ok, also das kommt hier serialisiert raus bei am Ende. Das macht er aus diesem Objekt,
was ich angelegen habe. Name, Unique ID, das Device, mouse CMD. Das sieht jetzt erstmal
ganz gut aus. Mal gucken, was da im Home Assistant rausgekommen ist jetzt. Nichts. Ja, das ist
schonmal gut. Das hat schonmal net funktioniert. Das ist schonmal nice. Hat einfach gar nichts
gemacht. Ich lösche das noch mal. Gucken, ob da irgendwas anliegt. Hat einfach nicht
funktioniert. Na gut. Console, Readline. Ich bin mir nicht ganz sicher, ob der schon alles
fertig abgeschickt hat. Sollte er eigentlich. Deswegen mach ich einen await davor, man weiß
ja nie. Nope, da liegt nichts an. Ok, RIP. Was mache ich falsch? Was mache ich falsch
hier? Modes off. Sieht gut aus. Sieht gut aus. Sieht gut aus. Unique ID. Sieht eigentlich
alles relativ nice aus. Warum das jetzt nicht funktioniert, verstehe ich nicht. Jetzt ist
der Big Brain Chat gefragt. Ja Chat, sag mir, woran es liegt. Wir gucken mal in das Log.
Wir gucken mal in das Log rein, ob der irgendwelche Probleme hat beim Serialisieren. Ohje, ohje.
Was? Wow. Error. Was? Async Discovery. Ja genau, das will ich verwenden. Und was ist
jetzt die Fehlermeldung genau? Multiple invalid extra keys not allowed. Hä? Habe ich irgendwas
falsch gemacht? Habe ich irgendwo? Ich habe doch bestimmt irgendwo was ganz offensichtlich
ist falsch geschrieben. Moment, der schreibt das groß. Könnte das das Problem sein, weil
das groß geschrieben ist? Könnte das wirklich drin sein, ist das Problem? Wäre er natürlich
bescheuert, aber ich mache das jetzt einfach so. Äh, Moment, wie sage ich ihm das denn
jetzt, dass er das bitte schön anders serialisieren soll? Wobei ich glaube, das hatten wir schon
mal, das hat das hat doch das hat doch funktioniert. Ich meine, ich kann jetzt da was Jason Property
oder so drüber schreiben und ihm sagen, das soll gefällig Manufakturer heißen und dann
sollte er das kleinschreiben. Das ist natürlich die ekliche Variante. Aber das funktioniert.
Man kann dem serialisieren garantiert sagen, bitte serialisieren. Alles klein, Jason Note
Options. Ja, das geht bestimmt. Wir kann ihm bestimmt sagen, der soll mal. Gucke mal, da
ist es doch direkt. Also ich muss echt mal sagen, das mag ich an am ganzen Dotnet Framework,
das ist logisch aufgebaut. Das ergibt meist meistens Sinn, was die sich da überlegt haben,
wo da was steht. Nicht immer, aber meistens. Deswegen findet man den Kram auch so schnell.
Mal gucken, ob das jetzt funktioniert. Dazu kann ich nur sagen. Also anscheinend funktioniert
das nicht, obwohl ich die Property Options angegeben habe. Ich habe gesagt Property Name
Case Insensitive. True. Und es juckt dir nicht. Was ist denn? Was ist denn die Fault? Irgendwie
was die Fault ist. Was passiert denn, wenn ich Fault sage? Ist mir egal. Okay, das funktioniert
nicht so, wie ich mir das gedacht habe. Ist das ein Bug vielleicht? Microsoft Hilfe Seiten
sind mal wieder richtiger Paints Champ wahrscheinlich. Alter Deutsch, please, warte mal auf Englisch.
Null. Moment, to compare Property Names? Ach Moment, das hat mit Serialisieren überhaupt
nichts zu tun oder was? Ja geil. Das ist ja überhaupt nicht missverständlich wofür das
da ist. Na gut, komm, dann schreibe ich das jetzt hier einfach oben drüber. Jason Property
Name. Einfach mal nur, um zu gucken, ob der Kram wirklich an Case Sensitive oder nicht
liegt. So das, das, das. Da haben wir hier Name. Name. Model. Version. Line. Line. Line.
Und jetzt brauchen wir noch Identifiers. Aber das glaubt nicht, dass das da dran liegt.
Das wäre richtig hängen geblieben, wenn der Kram Case Sensitive wäre. Das kann ich mir
eigentlich nicht vorstellen. So. Jetzt macht er alles klein. Jetzt schauen wir mal, wie
es hier ausschaut. Ne, Grip. Extra Key Not Allowed. Device Version. Tja, das ist aber
richtig. Irgendwas ist hier anerweilig kaputt. Das ist richtig. Ich weiß, dass das richtig
ist, weil es hat genau eins zu eins das letzte Mal funktioniert. Das ist aber ein neuer Fehler.
Ja, jetzt ist es Version. Ja. Aber im Prinzip ist es das gleiche. Was hat er denn für Schmerzen?
Plus, dann ist das Problem. So, ich mach mal kurz, ich mach jetzt die Vice einfach mal
weg. Was eigentlich keinen Unterschied machen sollte, dann legt das halt ohne an. Äh, hat
wieder nicht funktioniert, ne? Ne, doch. Identifiers. Moment, hat das jetzt funktioniert? Schauen
wir mal. Wo ist das? Developer Tools. Climate. Heizung. Das hat jetzt funktioniert? Was hat
er denn für ein Problem mit dem Device? Was hat er denn damit für ein Problem? Nimm SW
Version. Ja, natürlich. Das Problem hatten wir doch das letzte Mal schon. Es ist SW Version,
nicht Version. Das Problem hatten wir doch das letzte Mal schon. Und das hatte ich hier
auch gefixt, aber ich hab das nicht hier drinnen angepasst, als wir da ne extra Klasse draus
gemacht haben. Ja, es ist SW Version. Genau, das gleiche Problem hatten wir doch das letzte
Mal schon. Okay. Wie krieg ich denn das jetzt gelöscht? Configuration. Ne. Oh ne. Devices.
Devices. Entities. Wo ist die Heizung? Da. Delete. Geht ne. Ich muss das über MQTT wieder
löschen. Derselbe vielleicht, aber der Chat merkt es erst jetzt. Da brauchen wir eindeutig
mehr Prime-Subs, dass der Chat mehr IQ-Punkte kriegt und das früher merkt. Okay, dann machen
wir jetzt Hub. Click. Ja, Config. Den Kram löschen wieder. Config. Man musste einfach
ne leere Config-Message, glaub ich, schicken. Dann löscht das wieder. So, und zwar auf
Climate. Auf wo müssen wir hin? Home Assistant Climate. Config. Ich hoffe, der löscht das
wieder. Config. Oh, Mist. Was jetzt? Ah, ein Quot zu viel. Sack. Ah, und weg ist es.
Weg ist es. So, und jetzt können wir gucken, ob er das richtig anlegt wieder. So, Device
gleich Jason Device und jetzt haben wir ihm gesagt, er soll es serialisieren als SW-Version.
Okay, aber die Fehlermeldung konnte wirklich ein bisschen besser sein. SW-Version. Ob das
jetzt funktioniert hat. Integrations Device. Da ist es, der Heizchamp. Bäm, Heizung. Jawoll.
GGEats. Sollen jetzt mal gucken, ob wir das als Thermostat anlegen können. Ah ja, not
available ist gut. So. Schmeißen wir das mal weg. Delete Card und sagen jetzt, wir
wollen ein Thermostat haben. Thermostat. Ja, da ist es. Nur, dass irgendwie nichts stimmt.
Dass da nichts an Werten drin steht. Na gut, aber wir haben zumindest schon mal einen Thermostat,
was äußerst useless ist gerade. Aber er hat es angelegt als Climate Komponente, dass
ich einen Thermostat machen kann. Das ist doch schon mal was. So, Developer Tools. Gucken
wir mal, was der hier sagt. Climate Heizung ist Ministemperatur 5, Max Temperatur 35 Tage,
Temperature Step. Ah, okay. Current Temperature und Temperature sind nicht gesetzt. Das müssen
wir jetzt noch machen. So. Genau, ich habe nämlich noch gar nichts gesetzt. Ich habe
nämlich noch gar nichts gesetzt. So, dann müssen wir in die Hilfe gucken, wie das weitergeht.
Thermostat. Da. Also, man legt das an, so wie ich das angelegt habe. Und dann braucht
man ein State Payload, wo man Sachen reinschreibt, was gerade Sache ist. Okay. Dann machen wir
das doch jetzt. Hier legt er an. Jetzt setzen wir einen State Payload. Also brauchen wir
wieder das Topic. Okay, also MQTT Client Publish auf dieses Topic. So, da müssen wir jetzt
ein Objekt für anlegen. Mal gucken, wie das mit dem... Lass mal ein Thermostat anhand
des Devices anzeigen. Was meinste? Du meinst, wenn ich hier drauf klicke, dann passiert...
Ja. Thermostat. Operation Heat On Off. Guck mal, das hat er auch gecheckt. Und Target Temperature
kennt er nicht. Aber man sieht, dass er das genommen hat, weil ich sage ihm ja explizit,
das kann nur heizen oder ausgeschalten. Also, es kann nur Prinzip an- oder ausgeschaltet
werden. Ja, das funktioniert. Was ist das eigentlich für ein Symbol? Das sieht aus
wie ein durchgestrichener User. Aber das war... Sieht das... Sieht dieses Symbol irgendwie
nach Klimaanlage aus? Ach nee, das ist so ein Tacho hier. Jetzt erkenne ich das. Finden
die nicht auch, dass das aussieht wie ein durchgestrichener User? Das hier ist der User
hier unten. Und das ist ein durchgestrichener User. Ja, ich weiß, das ist ein Thermostat.
Aber sag doch mal, das sieht aus wie ein durchgestrichener User. Das sieht aus wie ein User-Symbol. Guck,
das hier ist der Kopf. Das hier ist so der... Das ist der Körper vom User. Und der hat quasi
so was im Kopf stecken. Ich hab da ein User erkannt. Durchgestrichener User. Das sieht
auch wirklich so aus. Jetzt erzählt mir nix. Finden die nicht, dass das so aussieht? Na,
was willst du da machen? Du siehst es auch. Ja, hab ich schon mal Glück gehabt. Ok, never
state message gleich. Kann der was anonymes serialisieren? Das probieren wir jetzt gleich
mal aus, ob der irgendwelche anonymen Typen serialisieren kann. Mode gleich off. Target
temp gleich... Was ist denn das hier? 21,5. Current temp gleich 23,60. Ah nee, Moment,
Punkt. Kona-Style. So, und jetzt sagen wir hier, wie serialisiert man hier nochmal was?
Moment, wie serialisiert man hier überhaupt ein einzelnes Objekt? Ah doch, serialize.
State message. Das klappt? Nee, das wird nicht funktionieren. Ich geb das mal kurz
noch serialisiert oben drüber aus. Mal gucken, was da rauskommt. Naja doch, das sieht eigentlich
ganz gut aus. Das ist ne ordentliche JSON-Message. Ok, was ist da jetzt rausgekommen bei? Da
ist rausgekommen, dass es nicht funktioniert hat, weil keine Temperature gesetzt. Da kann's
bestimmt nicht parsen. Wieso parsst du den Float als String? Weil das Beispiel bei Home
Assistant mir das so sagt, dass das so geht. Guck. Warum? Weiß ich nicht. Weil, weil. Wie
überzeugt bist du von C-Sharp? Beste Sprache. Ohne Scheiß, meine mit Abstand Lieblingsprogrammiersprache.
Das ist, C-Sharp ist ne Programmiersprache, um alltägliche Probleme zu lösen, ohne einem
Kurs in die Quere zu kommen. Mit richtig guter Standard-Library alles dabei, ganz gute Paketauswahl,
Cross-Plattform für alles, was man so braucht. Kannst du zwei positive Eigenschaften von
C++ sagen? Naja, es ist schnell und es wird mit den neuen Versionen in manchen Punkten
weniger Scheiße, aber insgesamt kommt eigentlich immer nur mehr Mist obendrauf. Was hältst du
von Rust? Aber das hatten wir vorhin schon relativ ausführlich. Ich finde Rust ist richtig
poggers. Leider ist Rust richtig Massive Brain mit solcher Sündtags. Also mit dieser krassen
Rust-Lifetime-Sündtags. Also da brauchst du wirklich mindestens 20 Prime-Subs, dass du
das verstehst. Vorher ist dein Kopf einfach nicht groß genug und es erweitert ja jeder
Prime-Sub bekanntlichermassen den Intelligenzquotient. Aber ich finde Rust richtig nice. Ich habe
Rust benutzt, als es noch Beta war, als es ganz frisch war. Habe ich richtig viel damit
gemacht, so zum ausprobieren. Ich fand das richtig nice und ich finde Rust auch immer
noch richtig nice. Aber es ist, finde ich, keine Sprache, die man startet, um mal schnell
was auszuprobieren. Da ist es auf jeden Fall nicht das Richtige. Wie findest du die Ruby
Sündtags? Top. Ich persönlich muss sagen, es war ja lange Zeit so ein bisschen so bei,
so ein bisschen unter Linux, so ein bisschen Sprachenkrieg zwischen Ruby und Python. Ja,
die einen haben gesagt, ah ja, hier Ruby, gerade auch als Ruby on Rails so voll angesagt
war. Nekorock, 25 Monate, huge subscription, jetzt geht es aber richtig los hier. Chillfreak
auch, 5 Monate, massive subscriptions hier, alle beide. Und dabei war so ein bisschen
Sprachenkrieg angesagt, so Python, Ruby, sonst was. Aber heute kann man eindeutig sagen,
Ruby on Rails ist nicht mehr von Bedeutung. Auf jeden Fall nicht für neue Projekte und
insgesamt auch eigentlich kaum noch von Bedeutung. Und Python hat einfach gewonnen, was das angeht.
Gerade durch die ganze Machine Learning AI Geschichte ist, das ist einfach ganz weit
vorne. Auch zurecht, aber ich muss sagen, mir persönlich gefällt die Ruby Sündtags
besser. Das heißt nicht, dass ich Python hässlich finde. Das kann man auch wunderbar lesen und
jedes Mal, wenn ich damit was mache, was nicht so oft ist, aber jedes Mal, wenn ich damit
was mache, bin ich begeistert von, wie einfach man die meisten Sachen machen kann, gerade
weil die Python Standard Library mittlerweile richtig cool ist. Von CSV-Parser bis IP-Calculator
ist alles in der Python Standard Library drin. Und mal ehrlich, die wenigsten Standard Libraries
haben einen CSV-Parser mit drin. Ich glaube, Go hat einen, aber viel mehr fallen mir da
jetzt nicht ein. Ich glaube, Go hat einen CSV-Parser. PHP, ja gut, PHP wundert mich
nichts mehr. Aber die meisten Programmiersprachen werden in ihrer Standard Library keinen CSV-Parser
haben und Python hat einen. Ich muss sagen, das finde ich nice, dass da so viel drin ist
und auch die Sündtags ist schon cool. Und jedes Mal, wenn ich damit was mache, bin ich
immer begeistert, wie gut das funktioniert, ja.
Java ist nicht mein Fall. Was habt ihr gegen PHP? Nix Wirksames. Doch, PHP ist gerade mit
Laravel oder sowas gar nicht so verkehrt. Ich finde es geht. PHP, ich habe es schon öfters
im Stream gesagt, PHP ist eigentlich besser als ein Ruf. PHP ist keine scheiß Sprache
mehr so wie früher mit dem richtigen Framework. Also, PHP geht. Also, wenn ich die Auswahl
hätte, eine Web-Anwendung mit C++ machen zu müssen oder PHP, ja, im Backend, da weiß
ich auf jeden Fall, was ich verwenden würde. Ja. So, was? Weil der Frage, würde hier eine
Art Kartenspiel, was Domain Triffen? Ach nee, Dungeons and Dragons. Okay. Zu viele Abkürzungen.
In Python mit Klassen oder mit? Hä? Das eine hat mit dem andere noch überhaupt nichts
zu tun. Das sind zwei komplett, das sind doch zwei komplett unterschiedliche Paar Schuhe.
Deine Karten musst du als Klassen anlegen, wenn du es objektorientiert machen willst.
Ja, dann hast du irgendeine Base-Kart-Klasse und erbst dann da irgendwas von, wie auch immer,
gibt es da zig Varianten, wie man das machen kann. Aber vergess den, die Singleton-Management,
Singleton-Management-Factory-Repository-Pattern nicht. Ohne das kannst du garantiert kein
Kommando-Zeilen-Spiel programmieren. So, würde zumindest der Java-Programmierer sagen.
Aber, also du legst die Karten als Klassen an und dann hast du halt am Ende eventuell
für jeden Spieler eine Dictionary mit Karten, die sie haben. Was du auch machen kannst,
weil die Karten können ja nicht doppelt vorkommen. Oder kannst du sogar ein Dictionary nehmen,
mit irgendwie Name von der Karte vorne drin oder was auch immer. Ich verstehe nur Bahnhof,
ich talke nur Netzwerk, Lel. Dann, ne, das machen wir das nächste Mal. Ich wollte jetzt
wieder ein bisschen über Leute ranten, die auf YouTube was erzählen, dass Layer-3-Switch-Router
sind und umgedreht und sowas. Aber, lass ich bleiben. Ich hab wieder dumme Comments gelesen
in YouTube und hab mich aufgeregt. Also wenn du was wissen willst, frag, aber wenn
das natürlich überhaupt nicht deine Welt ist, ist es schwierig mit fragen. Ich würde
es tatsächlich auch nicht übertreiben. Karten ist ein sehr beliebtes Beispiel, um Objektorientierung
quasi zu üben, auch in Schulen und sowas. Man muss es nicht übertreiben. Also mit Karten
kann man es wirklich krass übertreiben, mit 85 Milliarden Klassen. Man muss es aber nicht.
Ich würde es auch nicht zu sehr übertreiben. Ja, das stimmt, Dungeons & Dragons ist kein
Kartenspiel. Es gibt noch nicht mal Karten. Es gibt Character-Sheets, aber das sind ja
keine Karten. Du könntest aber dann früher oder später in das Rechteck-Quadrat-Problem
laufen, je nachdem, wie du deine Klassenhierarchie machst. Kennt ihr das Rechteck-Quadrat-Problem
bzw. das Ellipse-Kreis-Problem bei Objektorientierung? Ich hoffe, ich krieg das jetzt aus dem Kopf
noch richtig hin, was das ist. Also, wie würdet ihr eine Klassenhierarchie aufbauen? Mal ein
Beispiel hier. MyClass. Würdet ihr sagen, also mal angenommen, ihr wollt eine Klasse
abbilden, Rectangle, schreibt man das so, und ihr wollt eine Klasse abbilden, irgendwie
Square. Das ist der Deadly Diamond. Wer erbt von was? Ist Rectangle die Base-Klasse von
Square oder ist Square die Base-Klasse von Rectangle? Oder machen wir es mit Kreis. Machen
wir hier was, was ich. Also, instinktiv würde man ja eigentlich sagen, so, ne? Ja, instinktiv
würde man dann eigentlich sagen, so. Aber man bekommt dann Probleme, wenn man da jetzt
irgendwelche, irgendwelche Properties anlegen will. Weil, zum Beispiel bei Rectangle kannst
du sagen, x und x und y oder so. Und das ergibt ja bei Square jetzt gar nicht so viel Sinn,
weil da ist alles gleich. Ich mein, klar, kannst du in dem Fall auch machen. Ich muss
mir mal ein Beispiel dazu angucken, was? Ich weiß gar nicht mehr genau, nicht dass ich
jetzt Mist erzähle. Kreis-Elypse-Problem, genau. So. Haben wir ein gescheites Beispiel
für... Naja, gibt's da nicht, gibt's da nicht irgendeinen... Alter, ich übertreib's mal.
Ist das Lisp? Oder was ist das? MonkaS? Kreis-Elypse war was anderes wie Square-Rectangle. Ja, du
hast recht. Du hast, du hast, du hast recht. Man muss das mit Kreis-Elypse machen. Ich
glaub, dann versteht man's besser. What the hell? Was zum... Ja, also, machen wir's mal
so. Also normalerweise würd's jetzt sagen, was weiß ich, was heißt denn Elypse? So,
hier, machen wir so. Elypse? Du machst das doch auf Deutsch, Alter. Kreis, Kreis. So.
Normalerweise, oder wie können das, sag mal so, wie könnten das auch, wie könnten das,
wie könnten das auch mit Square-Elypse machen? Jetzt hast du halt das Problem, dass du beim
Kreis jetzt quasi... Ach, ich krieg nicht mal, ich krieg's nicht mal zusammen, wie das jetzt
genau war. Es ergibt zumindest keinen Sinn, weil du bei dem einen was brauchst, was beim
anderen drin ist und umgedreht auch nicht. Bei wem ist das noch nicht so lange her? Wer
weiß das noch? Kreis ist ein Spezialfall der Elypse. Ja, mathematisch gesehen, schon programmiertechnisch
funktioniert das nicht. Einerseits ist ein Kreis eindeutig eine Elypse, genau. Was dafür
sprich, dass es wiederum ein Subtyp der Elypse handelt, genau. Das funktioniert aber nicht,
das funktioniert aber nicht. Andererseits führt die Unterstützung einer nachträglichen
unabhängigen Veränderung der Länge, die für die Elypse sind, genau, genau. Das ist deswegen,
das kann man durchaus auch mit Square-Rectangle machen. So, hier hast du jetzt das Problem,
dass du in der Base-Klasse erlaubst X und Y zu setzen. Genau, jetzt ist es mir wieder
eingefallen. Das Problem ist jetzt, dass du damit den Square kaputt machst. So, deswegen
funktioniert das nicht. Also sprich, ich habe jetzt den Kram angelegt und wenn ich jetzt
den Square anlege, wenn ich jetzt den Square anlege, dann kann ich jetzt immer noch X und
Y setzen, was keinen Sinn ergibt. Weil ich könnte sagen, X ist 4 und Y ist 2, dann ist
das aber kein Square mehr. Ja, ja, dann kann man natürlich drum herumwursten. Du kannst
zum Beispiel sagen, ok, das hier ist Abstract oder irgendwie sowas oder Virtual, da muss
man es überschreiben, aber man kriegt es immer noch nicht weg. Man kriegt es immer
noch nicht weg. Also es ist auf jeden Fall da. Also du kannst das heiden vielleicht irgendwie.
Aber ich glaube, man sieht schon halbwegs das Problem. Ne, das funktioniert nie. Wir
können es mal anders machen. Wir müssen es nicht mit Properties machen. Wir können auch
sagen, ok, wir haben jetzt irgendwie einen Rectangle und da kannst du jetzt sagen, keine
Ahnung, void set X, oh, irgendwie void set Y. So, das ist jetzt da drin. Und das erbt
jetzt Square automatisch, ergibt aber keinen Sinn. Ich meine, was ich machen könnte ist
natürlich, ich könnte sagen, ok, die Dinger sind Virtual. Also was man zum Beispiel, also
eine Lösung, was man machen könnte, ich könnte sagen, die Dinger sind Virtual, zum Beispiel,
bin ich jetzt total verwirrt? Ach so, cannot be private, ja, ja. Also ich könnte zum Beispiel
irgendwie Virtual, dann kann ich sagen, dass ich die überschreibe, aber dann habe ich erstens
immer noch sinnlose Benamungen drinne bei einem Square, set X, set Y. So, und die Frage,
wie verwende ich das jetzt? Set X ergibt keinen Sinn, set Y ergibt eigentlich auch keinen
Sinn. Also müsste ich theoretisch dann sowas hier machen. Ich setze jetzt einfach nur public
set X, keine Ahnung. Also ich müsste quasi eine neue Set Methode machen für Square,
was beides setzt und dann müsste ich den anderen Kram überschreiben und darin eine
Exception werfen oder sowas, was auch bescheuert ist. Ja, also was man daran nur sieht ist,
nur weil die Sache logisch ist von der Vererbung her, heißt das nicht, dass es auch praktisch
gesehen Sinn ergibt. Es gibt noch ein Problem, mit C++ dank der Mehrfachverärmung. Ja,
das hast du auch. So, übrigens, es gibt da ein paar Ansätze für, wie man das lösen
könnte, dieses Problem. Allerdings nicht so, nicht mit dieser klassischen, wir machen
so eine Vererbungshierarchie. Umgekehrt, genau, lustigerweise umgekehrt würde das funktionieren
in dem Fall. Ja, du hast recht, umgekehrt würde es funktionieren, aber dann hast du
das Problem, dass du da eine Vererbungshierarchie hast, wo Rectangle, wo quasi ein Rechteck
von einem Quadrat erbt, was rein logisch gesehen irgendwie nicht intuitiv ist. Das würde in
dem Fall tatsächlich funktionieren. Du müsstest sagen, Square ist die Base-Klasse und Rectangle
ist quasi das abgeleitet davon. Das ergibt auch so keinen Sinn. Das ist das Problem.
Das hier mag vielleicht mathematisch richtig sein, ist aber objektorientierungstechnisch
Schwachsinn und umgedreht ergibt das ganze logisch keinen Sinn. Also, man könnte versuchen,
sowas hier zu lösen, zum Beispiel, wenn man jetzt sagt, Glass-Rectangle und ich bastel
jetzt mal beispielshaft was zusammen, das muss jetzt keinen großen Sinn ergeben, da
kann man nicht, man könnte es zum Beispiel mit Interfaces machen. Man könnte zum Beispiel
sagen, was weiß ich, musst du erstmal ein gescheites Beispiel dazu einfangen, benutzt
du eigentlich Wim? Ja, oft. Man könnte zum Beispiel sowas machen wie ein Interface,
wie, ich fände jetzt echt nichts Sinnvolles ein. Zumindest würde man diese Methoden in
das Interface auslagern und dann würde man halt noch ein Interface machen und dann könnte
man das quasi zusammenstücken aus Interfaces, was man haben will. Also, quasi mehr Composition
als Vererbung. Ja, sowas Dummes habe ich auch gedacht, Alter. Eirektangle, Apple oder so
ein Style ist aber nicht. Das könnte man sicherlich irgendwie zusammen basteln. Also,
in dem Fall würde ich sagen, ist es eindeutig, also anstatt sowas hier zu machen, sowas kann
man besser machen, da müsste ich mir im Vorfeld ein paar sinnvolle Beispiele für überlegen.
In dem Fall wäre es besser, tatsächlich, man macht hier nichts großartig mit Vererbung,
man könnte zum Beispiel eine Base-Klasse machen, Shape oder sowas, wo man dann zum Beispiel
sowas macht wie Public, Void, Draw oder sowas drin hat, was für alle Shapes gilt, aber
dass man die eigentlichen Eigenschaften dann irgendwie über Interfaces macht. Kann man
sich unterschiedliche Sachen mitmachen, also dass man mehr Composition macht als Vererbung,
aber das ist Big-Brain-Fragen. Shape würde ich wahrscheinlich Abstract machen. Das stimmt,
das stimmt, das ist jetzt wirklich zu Big-Brain. Kannst du die Funktion nicht privat machen
bei der ärmenden Klasse? Nein, das geht nicht. Das zeige ich jetzt noch ganz kurz, dann mache
ich noch mal schnell weiter, wir haben hier schon ein, zwei, drei, vier, das zeige ich
noch mal kurz. Das eigentliche Problem ist, dass du nicht was wegwerfen kannst, was in
der Base-Klasse drin ist. Ich müsste eigentlich sagen, Rectangle hat diese Methoden, aber
ich möchte nur eine der beiden haben in Square. Was leider nicht funktioniert ist, Override
Y und dann zu sagen Private. Das geht nicht, weil die Base-Klasse ja explizit sagt Public.
Es ist aber auch ganz logisch, dass das nicht funktioniert. Also wenn das in irgendwelchen
Programmiersprachen funktioniert, ergibt das logisch gesehen keinen Sinn, weil du kannst
den hier immer zur Base-Klasse casten und hättest dann wieder Zugriff drauf. Also wenn
das in irgendeine Programmiersprache erlaubt, ergibt es keinen Sinn. Selbst wenn das hier
Private erlaubt werde, würde ich Square, würde ich zu Rectangle casten, wäre es wieder Public.
Gibt keinen Sinn. Warum nicht die Verarbeitung umdreht? Ja, das ist in dem Fall tatsächlich
die Lösung, die ergibt aber aus mathematischer Sicht keinen Sinn. Dann würdest du nämlich
sagen, quasi ein Rechteck ist ein Quadrat, aber ein Rechteck ist kein Quadrat. Ja, man
kann den C++ tatsächlich noch ein bisschen tricksen. Ich könnte jetzt zum Beispiel sagen,
wie das jetzt funktioniert, New? Genau, ich könnte sagen Public Newvoid, dann würde es
das alte Heiben, das heißt aber nicht, dass es dann weg ist. Und sobald ich zur Base-Klasse
caste, ist es auch wieder weg. Vergesst es einfach Leute, vollkommen, vollkommen egal
für die Uhrzeit. Ihr habt recht, das ist für die Uhrzeit zu big brain time. Ja, das
würde auch Probleme sachen. Aber ich glaube, man hat es jetzt halbwegs verstanden. Wie
ich jetzt da drauf gekommen bin, ist eine gute Frage. Ich glaube, weil irgendjemand
gefragt hat, genau, es hat jemand gefragt, ob er, wie er ein Kartenspiel mit Klassen
implementieren würde. Und da kannst du, denke ich mal, relativ schnell in solche Probleme
laufen. Wir definieren das einfach um. Welches Tool zum Dokumentieren von Code würdest du
empfehlen? Gar keins. Guter Code dokumentiert sich selbst. Brauchen wir nicht. Overrated,
debated, outdated. Komplett useless. Und Tests kann man auch gleich weglassen. Api-Dokumentation
braucht auch keiner. Einfach richtig programmieren, ohne Fehler und schon ist das Problem gelöst.
Aber ernsthaft, alles immutable, genau. Nee, aber ernsthaft, das ist eine Frage, die ich
mir auch stelle, was da ein guter Mittelweg ist. Für viele Sachen, die wir auf der Arbeit
machen, haben wir einen Confluence, wo so Sachen drinstehen, wie zum Beispiel, warum
welche Technologie ausgewählt wurde oder sowas in der Richtung. Das ist aber auch nicht
der Weisheitsletzter Schluss, weil das quasi schon ab dem Abspeicher in der Seite veraltet
ist. Ich habe da keine gute Empfehlung. Das finde ich übrigens eine gute Taktik. Einfach
alles immutable. Leute, das ist so ein typischer Ausdruck. Ich würde mich nicht wundern, wenn
in ein, zwei Jahren das der neue Trend ist, dass das irgendwelche Super Big Brain Consultants
dann den Leuten verkaufen würden. Das heißt natürlich dann nicht einfach immutable machen,
das heißt dann entweder immutable design oder das ist eigentlich auch schon zu low level,
das braucht einen richtig, richtig Big Brain Name. Und dann kommen in ein, zwei Jahren
die ganzen Hyper Consultants und Conference Talker und sagen einfach alles immutable machen
und machen da ganze große Wissenschaft drum herum auf. Ja, das ist richtig, das ist richtig,
aber das ist ja damit nicht gemeint. Immutable by design, da müsste es, da müsste es, da
braucht es ein richtig gutes Passwort für, dass das funktioniert. Irgendwie mein Cloud,
sowas in Richtung Cloud Native, nur für immutable by design. Oder eine gute Abkürzung. Ja,
aber immutable by design ist zu immutable blockchain technology, was weiß ich, oder es
muss ja auch mit blockchain auch nichts zu tun haben, also kann der blockchain einfach
im Namen haben. Native immutability. Und dann müssen wir noch irgendeine Zertifizierung
uns dafür ausdenken. Ich weiß, Max riecht die Stonks, ja. Also wir schreiben erstmal
jetzt ein Manifest. Das Native, ich kann das nicht mal aussprechen. Das Native Immutability
Manifesto. Manifest brauchen wir jetzt. Und dann verkaufen wir das an irgendwelche Stonks,
Leute. Und dann machen wir, dann machen wir irgendwelche, irgendwelche YouTube, YouTube
Videos für, dann machen wir da so ein Titel, warum ich programmiere Hassen für Immutability
oder sowas. Jaja, jaja, nein, nein, es ging ja darum, es ging ja darum, fehlerfreie Software
zu programmieren. Und wenn man alles immutable macht, also quasi, ich weiß es, Leute, hard
coded by design quasi. Also man programmiert jede nur erdenkliche Situation, die auftreten
könnte, schon hart in sein Programm ein. Das heißt, das ganze Programm besteht dann
einfach nur noch aus ganz vielen Ifs. Ohne Input, nur Output. Und dann kann man endlich
sagen, wir haben fehlerfreie Programme. Die sind dann halt petabyte groß, weil jeder Fall
drin sein muss. Aber das ist, das wäre echt, das wäre so ein typischer, so ein typischer
IT-Buzzword, ähm, Trend, den ich mir wirklich gut vorstellen könnte in, in, in 1, 2 Jahren,
ja. Oh, hör mal auf, ich hab da mal ein Video zur Source Code von dem Zeug geguckt, ja.
Oh fuck, wir haben 21.50, Leute. Kann das sein, dass wir 2, 2 Stunden 15 lang nicht
mehr programmiert haben als ein JSON-Objekt? Ist das, ist das möglich, ja? Ich glaube,
wir haben wirklich nicht mehr gemacht, als ein JSON-Objekt anzulegen in 2,5 Stunden.
Das ist aber ganz schön schlecht, oder? Ich wäre nie fertig. Ich muss erfrieren über
morgen, Leute. Ich muss, ich, ich erfriere überhaupt über morgen, weil ich meine Heizung
nicht einschalten kann. Wir haben doch noch 10 Minuten aufgehend, it's huge productivity.
Immutable Design-Philosophie jetzt hier. Also, warum, warum ging das denn jetzt nicht? Ich
wollte nachgucken, warum das denn nicht funktioniert hat. Also, System Logs. Guck mal, jeder mag
nicht, weil could not pass temperature from. Warum? Ich hab das genau nach eurem Beispiel
gemacht. Ich hab's genau nach eurem kack Beispiel gemacht. Es funktioniert nicht. Wir setzen
einfach die Templates. Wie sind die Templates? Wir setzen die Templates. Mode, Template,
was machen wir jetzt? Easy, easy. Wir kriegen das hin, Leute. Wir kriegen das hin bis 22.
Ich sag's euch. Wollen wir, komm, wir machen, Paul meint ihr, ich krieg's bis 22 schon
hin. Also, dass das Thermostat da ist mit sinnvollen, äh, mit, ich mach mal jetzt den Paul auf,
mit sinnvollen, mit sinnvollen Defaultwerten. Geht's bis 22 Uhr. Ja, nein. Dauerabstimmung
eine Minute. Speedrun. Also, das brauchen wir. Dann brauchen wir Current Template. Also,
was brauchen wir sonst noch? Mode, Template, Template, Template, Template, Template, meine
Güte, wer hat's, wer hat's die Benamung wieder? Wer hat's die Benamung wieder ausgedacht?
Template. So, was muss denn in dieses Template jetzt rein? Äh, MQTT, Home Assistant, Value
Template. Braucht ihr irgendein Exempel für? Ja, predict, ich hab jetzt keine Zeit, ich
muss mich jetzt konzentrieren. Äh, wie geht denn das? Wie geht denn das? Exempel, ich
brauch Exempel, Exempel, please. Value, Value Jason, jawoll, Exempel, da ist es. Chaps, da,
Value Jason, Mode. Äh, Mode. Äh, äh, was ist das? Temp, Temp TPL, Temp TPL ist was?
Target Temp, Current Temp. Ach, was weiß ich? Äh, Stat, nee, Current Temp, Target Temp.
Warum sind die Dinge auch so kacke benannt? Nein, oh, der Chat ist jetzt halt hier großes
Vertrauen in mich. So, äh, okay. Bam, wer hat gesagt, dass es nicht funktioniert bis
22 Uhr? Wer hat gesagt, dass es nicht geht? Ich guck jetzt nach, wer abgestimmt hat. Instant
Warnung. Wer, wer hat, wer hat nicht beliebt hier? Funktioniert. Funktioniert, guckt. Zack.
Zwei Minuten hat's gedauert. Geht das leider? Ah ja. Ah, wir setzen, Moment, wir setzen
Mode, Sekunde, wir setzen Mode noch auf Heat. Noch besser. Komm mal da. Kann man sogar ausschalten
und anschalten. Also, die Commands funktionieren nicht, aber man sieht, dass das Setzen schon
mal klappt. Wie ihre 23,6 aufgerundet hat auf 24, was auch in Ordnung ist für die Anzeige.
Was soll er sonst hinschreiben? Ich mein, Funktionalität ist immer noch nicht gegeben.
Ich mein, es überträgt Daten, die einfach fake sind. Okay, okay, das nächste Mal müssen
wir uns dann aber wirklich. Publisht er schon die neuen Temps, die eingestellt werden?
Das gucken wir jetzt noch. Das gucken wir jetzt noch. Das gucken wir jetzt noch. Das
gucken wir jetzt noch, ob das funktioniert. Also, MQTT Client, kann er mal schreihen.
Sub, nee Filter, Filter, Filter. Zwar Filtern auf das Mode, Mode Command. Subscribe, Message.
So, also von der Idee her sollte er jetzt hier unten ausspucken, wenn ich den Modus umschalte.
Gucken wir mal, ob das funktioniert. Modus umschalten. Zack, zack. Bäm, auf Feed. Der
subscribt schon, wenn einer was klickt im Webinterface. Klar kannst du blöde Fragen
stellen, immer. Welche PC Hardware hast du? Ganz einfach. Da gibt es ein Video zu. Meine
PC Hardware ist vier Jahre alt und immer noch wunderbar. Top aktuell, auch für Spiele,
weil sich da nichts mehr tut. Korrekt, ich muss dir das Video nicht verlinken, aber
wenn du dir dummes Gelaber von mir ansehen willst zum Rechner. Da sind die Teile. Massive
Kameraarbeit fällt mir da grad wieder auf. Ja, ich hab bloß mehr RAM drinne. Ich hab
2x60, 32G drinne. Aber hier ist das alles. Also Frage, Chat, was war? Was heißt war?
Das kommt ganz entscheidend auf die Programmiersprache an. Was die damit meint. Also war in JavaScript
ist was ganz anderes als war in C Sharp. Und noch was anderes wie in Go. Also das hängt
von der Programmiersprache ab. Ja war ist die Abkürzung für Variable meistens. Das
hängt von der Programmiersprache ab was das ist. Also in JavaScript ist es die oldschooligste
Variablen Zuweisung oder Variablen Deklaration überhaupt. War war glaube ich das erste was
es gab in JavaScript oder so. Das verwendet glaube ich keiner mehr. Heute wenn man cool
ist verwendet man glaube ich let in JavaScript und const. Kein war mehr, aber war kann man
verwenden in JavaScript. Aber JavaScript ist nicht so konsistent. In C Sharp ist es eine
Abkürzung. Und zwar das kann ich dir zeigen. In C Sharp kannst du zum Beispiel sowas schreiben.
War wir machen das jetzt mal richtig deutscher YouTube Programmier Tutorial. Zahl gleich
eins. Kannst du in C Sharp machen. Die Sache ist jetzt die, dass dieses war eigentlich
so tut als wäre das irgendein Typ wo man alles reinschreiben kann. Wenn man das von
JavaScript kennt. Man kann da aber nicht alles reinschreiben. Wenn ich jetzt zum Beispiel
versuche in Zahl irgendeinen Text reinzuschreiben dann sagt er ne ne ne ne ne. Das geht nicht
weil du kannst nicht einfach den Text in eine Zahl umwandeln. Das heißt in C Sharp ist das
nach wie vor alles typisiert. Und wenn ich jetzt zum Beispiel hier mal drüber gehe
und gucke was ist denn das eigentlich. Dann sagt er mir ja klar. Zahl. Sag mir das ist
ein Int. Also im Prinzip ist war in C Sharp eigentlich nur eine Abkürzung dafür, dass
ich mir es erspare den Datentyp hinzuschreiben. Ich mein bei Int macht es jetzt vielleicht
nicht so viel Sinn. Ist genauso lang. Aber ich könnte halt zum Beispiel auch sowas hier
machen. Text reinschreiben. Da könnte ich auch war davor schreiben. Wenn ich jetzt gucke
jetzt ist es ein Text. Also es ist es ist in C Sharp ist es eigentlich bloß eine. Syntaktische.
Syntaktischer Zucker. Dass ich meine Datentypen nicht hinschreiben muss. Ja um die ganze Sache
aber jetzt nochmal. Noch ein bisschen weiter auszuführen schnell. Es gibt in C Sharp seit
der letzten C Sharp Version gibt es den umgedrehten Fall. Das hier kennt ja jeder.
Sagen wir mal. War. New. List. Int. 1 2 3 4. Was das hier jetzt ist. Liste. Was das hier
jetzt ist, ist eine Liste mit den Zahlen 1 2 3 4. Das kennt glaube ich jeder. Wisst
ihr auch, dass das umgedreht geht. Wisst ihr auch, dass ihr sagen könnt. Das geht aber
erst seit einem der letzten C Sharp Versionen. Wisst ihr, dass ihr sagen könnt. Also wir
lassen jetzt mal das Initialisieren weg. Also das hier ist jetzt quasi eine Liste mit Zahlen.
Also eine Liste mit Ints, in die ich beliebig viele Zahlen reinschreiben kann. Liste. Add.
2. So. Das geht das geht auch umgedreht. Ich kann auch sagen. Liste. Int. Liste. Und
dann sage ich einfach nur noch New. Dass es das umgedrehte war. Der erkennt anhand der
linken. An der linken Seite, dass das eine Liste ist aus Int. Und macht daraus im Endeffekt
das da. Also es reicht, wenn ich jetzt nur noch New schreibe, weil er weiß, dass das
eine Liste ist. Was natürlich nicht funktioniert, ist die Kombination von beiden. Dann sagt
er ja gut. Ja was denn jetzt. Also das kann ja logischerweise nicht funktionieren. Ich
kann nicht links quasi das per, wie soll man sagen, per Ableitung zuweisen lassen und
rechts auch. Das geht natürlich nicht. Na klar geht das in.NET Core. Das ist.NET Core
hier. Das geht in.NET Core natürlich. Achso. Ja du hast recht. In.NET Core geht das nicht,
weil es heißt jetzt ja.NET. Es heißt jetzt ja.NET. Es heißt ja nicht mehr.NET Core.
Übrigens, wer sich jetzt fragt wofür man das braucht. In dem Fall ist es natürlich
ziemlich bescheuert. In dem Fall ist es ziemlich bescheuert. Aber zum Beispiel, wenn ihr eine
Klasse habt, ja, Public Class Twitch Chat und da drinne habt, sagt ihr dann zum Beispiel
Private Read Only Liste, Int oder hier String String. Ich kann ja schreiben ja. User, dann
könnt ihr das jetzt so machen. Das ist natürlich schon nice, weil wahr ist in dem Kontext nicht
erlaubt in sich haben. Hier ist es ganz praktisch. Früher musste man immer hier sowas hinschreiben.
Das braucht man jetzt nicht mehr. Es reicht jetzt einfach New. Das ist das tatsächlich
ganz nice. Das geht übrigens auch bei Funktionen. Also wenn ihr jetzt sowas habt wie Void. Bloop.
Und die Funktion erwartet hier eine Liste. Und ihr wollt es jetzt übergeben. Ihr wollt
da was Neues anlegen. Das ist jetzt bedacktes Beispiel, aber es funktioniert. Ach nee, das
ist ja anders herumschreiben. So und jetzt sage ich T. Jetzt sage ich T Bloop. Dann kann
ich einfach nur hier sagen New. Ist zwar so ziemlich die hässlichste Variante, aber das
funktioniert auch an anderen Stellen. Ja, C++ ist eine richtige Scheißsprache. Hast du gut
erkannt. Ja, das funktioniert damit. Und auch wenn das hier, also warum das ein richtig cooles
Feature ist, auch wenn das hier jetzt noch relativ kurz aussieht. Es gibt manchmal Dinge,
die werden ein bisschen länger, mal vielleicht ein bisschen übertriebenes Beispiel, was
auch nur halbwegs neu ist wie Sharp Features verwendet. Meinung wir wollen das ganze Multithreaded
machen. Deswegen nehmen wir jetzt hier ein Concurrent Dictionary. Mit einem Key von String,
allerdings einem Value aus einem Tupel von Int und Int. Und wir geben denen sogar noch
einen Namen. Int ist was weiß ich. Start und End. So jetzt wirds schon ein bisschen viel,
oder? User. Normalerweise müsste ich jetzt sowas hier machen. Im alten C Sharp. Müsste
ich jetzt sowas hier schreiben. Das kann keine Sau mehr lesen, oder? Also das ist das wirklich
vorbei. Also bei dieser Zeile ist jetzt wirklich Ende. So, jetzt kann ich einfach so, wowowowowowow.
Jetzt kann ich einfach so schreiben. Und jetzt ist das natürlich schon deutlich besser lesbar.
Wie machst du das, dass da Topic oder Item steht? Ey, das ist, das macht Rider standardmäßig
so hier, die IDE. Aber das ist natürlich recht praktisch jetzt an der Stelle. Weil das mag
jetzt vielleicht ein bisschen konstruiert sein hier. Aber ganz so abwegig ist das nicht,
sowas hier zu haben. Das kann ich mir sogar, das würde sagen, kann ich mir gut vorstellen,
dass es so oder so ähnlich recht oft vorkommt. Wann ist das dazu gekommen? Ich glaube beim
letzten, ich glaube bei.NET 5, bei C Sharp, was ist das? Acht? Oder neun? Seine 3-Configur auf Github aktuell fast. Also das ist wirklich nice. Und die haben, die haben wirklich, das muss ich ja mal den Leuten bei C Sharp, bzw. den C Sharp Language Designern wirklich mal zu gut halten. Die schaffen das,
seit 20 Jahren Sprache zu designen, die aktuell bleibt, auch mit aktuellen Gedanken und aktuellen
Features. Also C Sharp wird ja, hat sich ja deutlich in eine mehr funktionale Richtung
entwickelt als früher. Früher war C Sharp rein objektorientiert. Mittlerweile hast
du ziemlich viel funktionale Anleihen. Wusstet ihr zum Beispiel, dass man Folgendes schreiben
kann? Muss ich jetzt noch zeigen. Also mal angenommen, ihr habt hier jetzt, nehmen wir
mal hier. Oder machen wir es mal, machen wir es mal. Wir nehmen hier unsere Twitch Chat
Klasse. So, da gibt es jetzt ne Funktion drinne. Public void add user. Und ihr wollt hier ein
String user. User oder Name oder so. Das kann ja durchaus mal vorkommen. So jetzt müsstet
ihr ja normalerweise gucken, hey, if name ist das 0, also vielleicht übergibt hier irgendjemand
was mit 0, dann sagen wir throw new argument exception lag nicht. Das müsste man die ganze
Zeit machen. Und ich zeige jetzt nicht nullable reference types oder sonst was, sondern eine
Sache, wo man sieht, dass sich C Sharp ein bisschen in die funktionale Richtung entwickelt.
Anstatt name gleich gleich 0 zu schreiben, kann ich auch schreiben, name is not 0. Das
ist auch neu. Funktioniert jetzt. Jaja, ich mach Heiler. Das liegt aber daran, nicht,
dass die irgendwie die Sprache aufgebohrt haben. Das hier ist jetzt die Sharp Pattern
Matching. Das heißt, die bessere Variante wäre, sowas zu prüfen wie Name is String.
Ja, sowas, sowas könntest du zum Beispiel prüfen oder du könntest sogar daraus eine
eigene Variable machen, wenn ich jetzt nicht ganz falsch liege, wo du dann in dem If drauf
zugreifen kannst. Also das ist in vielen Stellen haben die da viel Funktionales eingebaut.
Geht die Schreibweise New auch mit non-primitive Types? Ich meine, eine Liste ist kein Primitive
Type. Geht in Richtung Python? Naja, ein bisschen vielleicht. Ich meine, guck mal,
das hier ist mein Main-File. Ich brauche nun nicht mal meine Main-Methode in C Sharp jetzt.
Das ist auch glaube ich seit Version 9. Gab es mit JetPrint Annotation nicht sogar ein
Not-Null? Kann sein, was man jetzt allgemein in C Sharp machen kann, ist die Geschichte,
aber das ist ein komplett eigenes Thema. Also da kann man wirklich einiges machen und
die haben es halt geschafft, deswegen müsste ich immer echt mal einen Hut ziehen. Von den
C Sharp-Language-Designern, die haben das wirklich geschafft, über 20 Jahre hin, mit ein paar
kleinen Pausen zwischendurch, wo Microsoft nicht so genau wusste, was sie machen sollten.
Aber spätestens seitdem sie es Open Source gemacht haben, kann man wirklich nur den Hut
vor den C Sharp-Language-Designern ziehen. Willst du dich einfach ausgehen, VM? Die haben
es wirklich geschafft, die Sprache aktuell zu halten und neue Features einzubauen. Ich
meine, Async Await kommt aus der C Sharp-Ecke. Wo ist denn das Problem, VM? Ah, jetzt. Async
Await kommt aus der C Sharp-Ecke, das ist mittlerweile in Java drin, ich glaube in Rust
mittlerweile auch. Java Script, meine ich, ist es drin. In Rust mittlerweile auch, in
Java, weiß ich es nicht. Also da hat sie schon einiges getan, die letzten Jahre über.
Weiß ich nicht, gute Frage. Das letzte Mal hat es noch rumgebackt bei mir. Die beste
Unterstützung für Async Await hat immer noch C++. Und wisst ihr auch warum? Die haben Async
Await Unterstützung eingeführt, aber nichts in der Standard Library hat Async Await implementiert.
Typische C++ Scheiße, Alter. Ist echt so. Typische C++ Kacke. Die haben einfach kein
Async Await. Wie gesagt, wir denken uns was aus, wie man Async Await in C++ machen könnte,
aber einbauen tun wir es nicht. Und einbauen brauchst du jetzt irgendwelche komischen Third
Party Libraries und es funktioniert. Es ist wirklich. Also C++, ganz im Ernst. Ich will
jetzt nicht von Anfang an, sonst sitze ich um 23 Uhr immer noch da. Aber es ist wirklich
der Wahnsinn. Nein, nein, nein, nein. Das eine hat mit Microsoft überhaupt nichts zu tun.
C Sharp ist von Microsoft C++, wird von einem Gremium standardisiert, weil sie nicht weiß,
was es eigentlich macht. Nichts gescheites auf jeden Fall. C++ ist nicht von Microsoft.
Microsoft hat einen C++ Compiler. Einer von vielen. Ich muss das Video mit der Endpunkt
hochladen. Ich muss das aber noch fertig schneiden. Ich hatte heute keine Zeit für. Nein, nein,
C++ ist nicht von Microsoft. Auch C ist nicht von Microsoft. Also so an Programmiersprachen,
die Microsoft verbrochen hat, fällt mir als erstes die C Sharp ein und danach Visual Basic
und alle seine Abkömmlinge. Gibt es noch C++ Compiler neben GZ, CLVM und Microsoft? Ja,
es gibt für ganz viele abgedrehte Plattformen C Compiler. Aber das dürften die verbreitetsten
sein. Mit ihren Abwandlungen. Also beispielsweise der ESP32 für diese extensa Plattform, was
auch immer, verwenden GCC. Mit Custom Zeug für ihren Gram und Rust verwenden LLVM. Und
das sind so mit den verbreiteten Sachen. LLVM ist ja eher so eine Compiler Architektur, wo
man seine eigenen Sachen drauf basteln kann..NET ist auch Microsoft, das ist richtig.
.NET ist die Runtime, wo unter anderem C Sharp drauf läuft. Aber das hat mit der Sprache
nichts zu tun. F Sharp, genau, ja, hast recht. Ich sag Ruby on Rails, muss ich zum Glück
nicht mehr machen. Ruby, finde ich, ist eines der besten Sprachen, die es gibt. Ruby on
Rails bin ich ganz happy, dass ich damit nichts mehr machen muss. Ihr wisst ja, ich verwende
den Swagstack. Der Swagstack ist SQLite, Vue.js, ASP.NET Core und CraftQL. Das Swagstack.
So Leute, ich geh jetzt ins Bett. Wir sehen uns. Schön, dass so viele mit dabei gewesen
sind. Bis die Tage. CU, machts gut.
