WEBVTT

00:00.000 --> 00:16.000
Almost heaven, older Twitch chat, all these emotes, wondering how to spell that.

00:16.000 --> 00:26.000
Now we're older, everyone's moved on, but I remember Twitch chat from those days that are gone.

00:26.000 --> 00:37.000
Twitch emotes from long ago made you feel you're not alone.

00:37.000 --> 00:49.000
Cappapogjam, keep a forehead, bible thumb. Twitch emotes.

00:49.000 --> 00:57.000
Excellent. Oh Mist, mein Herz hat jetzt wieder total... Warum verknotet sich das immer von selbst?

00:57.000 --> 01:06.000
Gab's da nicht sogar letztens eine Studie zu, dass umso länger man wartet, umso mehr Kabel von alleine verknoten.

01:06.000 --> 01:25.000
Spamming all the time, TOS was nowhere, so everyone's feeling fine. Twitch emotes from long ago made you feel you're not alone.

01:25.000 --> 01:41.000
Wir werden noch ein bisschen rumbasteln. People forehead, bible thumb, twitch emotes.

01:41.000 --> 01:55.000
Alter, der FrankiaZ mag Sings, bloß nicht. Ich muss mal meine Vorallemaren machen.

01:55.000 --> 02:07.000
From yesterday. Twitch Sings werde ich nie spielen. Das mit so Monarch S.

02:07.000 --> 02:16.000
Das ist auch so was. Das ist mir zu Monarch S. Überlegt euch das mal.

02:16.000 --> 02:29.000
Hier sitzt ein 33-jähriger Typ vorm Rechner abends um 19.30 Uhr und sagt, das ist mir zu Monarch S. Alles klar.

02:29.000 --> 02:38.000
Alles klar, oder? Durchgespielt.

02:38.000 --> 02:59.000
Hör mal, ist da drei Monate. Dankeschön für die Subscription.

02:59.000 --> 03:08.000
Ein bisschen gedudel im Hintergrund machen, damit es nicht zu laut wird.

03:08.000 --> 03:32.000
Nintendo gedudel im Hintergrund ist das Beste und ich glaube, die streiken auch keinen.

03:32.000 --> 03:40.000
Das war tatsächlich zu Monarch S gestern. Mal gucken, ob der jetzt geupdatet hat oder ob ich mal neu starten muss.

03:40.000 --> 03:47.000
Alter, wie oft kommen da noch Updates? Wollen die mich rollen oder was?

03:47.000 --> 03:57.000
Ich hör nicht mehr auf. Übrigens. Jetzt wird es kritisch hier.

03:57.000 --> 04:02.000
Ich habe einen Weihnachtsbaum gekauft seit sieben Jahren oder noch länger.

04:02.000 --> 04:07.000
Das erste Mal wieder Weihnachtsbaum. Im Bauhaus.

04:07.000 --> 04:13.000
Für 18 Euro oder so. Also keinen sonderlich großen.

04:13.000 --> 04:19.000
Schau mal kurz. Update. Ja, muss man alles update. Exzellent, exzellent, exzellent. Alles update.

04:19.000 --> 04:25.000
Exquisite Updates. Hyper Update. Update S brauchen wir noch.

04:25.000 --> 04:31.000
Update Update S wäre eigentlich wirklich ein gutes E-Mode, weil Updates gehen ja öfters auch mal in die Hose.

04:31.000 --> 04:41.000
Das ist nicht groß, das Ding. Der ist 20 25.

04:41.000 --> 04:48.000
So ein ganz kleiner Furzbaum. Der passt. Guck mal, der ist ungefähr so groß wie mein alter Baum.

04:48.000 --> 05:01.000
Dieses Teil. Baum. LED.

05:01.000 --> 05:09.000
Ich kenne meinen eigenen Tweet nicht mehr. Ich habe mal ein Bild von Weihnachtsbaum gemacht.

05:09.000 --> 05:16.000
Der ist wirklich klein gewesen. Mini Baum ist das. Was hat er denn hier für Schmerzen? Was will der von mir?

05:16.000 --> 05:22.000
Go Pass? Was hat er denn hier für Schmerzen? Was ist das für eine Ausgabe?

05:22.000 --> 05:29.000
Das sind irgendwelche Go Geschichten. Warum habe ich Permission Denied in meinem eigenen Home?

05:29.000 --> 05:36.000
Kann mir das mal irgendjemand erklären? Ich finde es nicht gut, dass ich in meinem eigenen Home Permission Denied habe.

05:36.000 --> 05:49.000
Vor allem warum? Cash.

05:49.000 --> 06:00.000
Warum habe ich Permission Denied? Was soll das? Anzeige ist raus.

06:00.000 --> 06:07.000
Es gibt keinen Sinn, dass ich Permission Denied habe. Weißt du was? Das benutze ich eh nicht.

06:07.000 --> 06:14.000
0W. Piss dich, Alter. Das hat es jetzt davon.

06:14.000 --> 06:19.000
Alles andere hat es schon abgedatet oder was?

06:19.000 --> 06:27.000
Oh, E3 Status. Gibt es kein Package mehr? Warum nicht?

06:27.000 --> 06:35.000
Alles andere hat es geupdatet oder? Was sind das für Fehlermeldungen?

06:35.000 --> 06:44.000
Alles andere hat er geupdatet.

06:44.000 --> 06:51.000
Warum ist meine Statusleiste weg? E3 Status.

06:51.000 --> 06:58.000
Da ist es doch noch. Ah, das ist jetzt in Base drinne. Okay.

06:58.000 --> 07:08.000
Sonst mache ich irgendwas kaputt. Wir wollen heute etwas anderes machen im Stream.

07:08.000 --> 07:13.000
Was ist CraftQL? Ist das vergleichbar mit Dealungsein? Das hat damit überhaupt nichts zu tun.

07:13.000 --> 07:21.000
Guck mal, haben die einen offiziellen Playground? Ich zeige es dir mal. Was richtig nice ist.

07:21.000 --> 07:32.000
Haben die online eine Demo?

07:32.000 --> 07:37.000
Wenn nicht, wir machen eh gleich das Projekt auf zum Ausprobieren.

07:37.000 --> 07:43.000
Ah, ich habe Firefox geupdatet. Okay, sehr gut.

07:43.000 --> 07:48.000
CraftQL ist ein Verfahren, wie man Sachen abfragen kann von einer API.

07:48.000 --> 07:54.000
Aber ich muss da ein bisschen anders anfangen. Ich habe damit auch noch nicht allzu viel gemacht.

07:54.000 --> 07:59.000
Ich habe ein bisschen damit rumgebaut und ich habe mal auch mit einem Kollegen zusammen ein Projekt gemacht,

07:59.000 --> 08:07.000
wo CraftQL verwendet wurde. Aber so großartig schlau bin ich da nicht, was das angeht.

08:07.000 --> 08:12.000
Und das Ganze sieht ungefähr so aus. Gucken wir mal. Github API. CraftQL Github App.

08:12.000 --> 08:15.000
Vielleicht haben wir ein schönes Beispiel für. Nee, natürlich nicht.

08:15.000 --> 08:21.000
Wir machen jetzt einfach das Projekt, dann siehst du es. Du kannst damit relativ gut Daten abfragen über eine API,

08:21.000 --> 08:29.000
aber detaillierter als mit REST. REST musst du erstmal deine API modellen nach den Ressourcen,

08:29.000 --> 08:38.000
die du hast. Sei es jetzt irgendwie nach User, nach Leuten, nach Büchern, nach Autoren, nach Kameras, nach sonst was.

08:38.000 --> 08:43.000
Und dann kannst du Sachen hinzufügen, abrufen, editieren und so und sonstige Geschichten.

08:43.000 --> 08:53.000
Aber es gibt halt viele Sachen, die passen nicht so richtig in REST rein und Suche und Sortieren und Filtern und so

08:53.000 --> 08:57.000
ist mit REST auch nicht wirklich schön. So und ich habe schon mal vor einer Weile ein bisschen,

08:57.000 --> 09:00.000
wie gesagt, ich habe mit einem Kollegen ein Projekt gemacht, ein bisschen CraftQL verwendet.

09:00.000 --> 09:10.000
Das ist wirklich extrem nice. Aber, achso, ja, hast recht. Ah, yes. Viel besser, klar. Viel besser.

09:10.000 --> 09:21.000
Ähm, ja. Aber, ähm, in letzter Zeit, also insgesamt viel gemacht habe ich noch nicht

09:21.000 --> 09:26.000
und auch so kenne ich mich da nicht wirklich, wirklich gut aus.

09:26.000 --> 09:29.000
Deswegen wollte ich mal ein bisschen rumspielen und gucken, was man damit machen kann.

09:29.000 --> 09:35.000
So, aber als erstes legen wir mal ein neues Projekt an mit ein paar Fake-Daten drin und dann können wir das Ganze abfragen.

09:35.000 --> 09:52.000
Habe ich denn.NET 5 hier schon drauf? Ich glaube schon. By the way, kann ich was im Chat übersehen?

09:52.000 --> 10:03.000
Max, kannst du mal dein krasses Feature zeigen? Hä? Welches? Welches davon? What?

10:03.000 --> 10:12.000
Ich habe keine Ahnung, was du meinst.

10:12.000 --> 10:16.000
Meine Mental Health ist vollkommen in Ordnung. So.

10:16.000 --> 10:21.000
Hero Master. Habe ich die schon? Ich glaube, ich habe die schon. Trotzdem danke schön für den Sub.

10:21.000 --> 10:28.000
So, ähm, also gibt es eigentlich.NET mittlerweile die Fünfer schon über den Package Manager?

10:28.000 --> 10:34.000
Nein, gibt es nicht. Äh, ich hatte doch ein Snap installiert mit.NET 5, oder?

10:34.000 --> 10:43.000
Snap, hier 5. Snap Update.NET SDK. Ach, das ist ja wieder Ubuntu.

10:43.000 --> 10:49.000
Wisst ihr, eine Sache, ich lobe ja Ubuntu immer. Ich sage so quasi auf dem Server, wenn ich es mir aussuchen kann,

10:49.000 --> 10:54.000
installiere ich immer Ubuntu Server und am liebsten verwende ich Ubuntu Server und sonst was. Sorry.

10:54.000 --> 11:04.000
Ubuntu. Eine Sache, die mir bei den Ubuntu Sachen wirklich auf den Keks geht, ist, dass sie für alles eigene Dinge machen.

11:04.000 --> 11:12.000
Warum, warum bitte schön nicht Snap Update? Jeder, jeder verwendet Update, aber bei Snap ist es Refresh.

11:12.000 --> 11:16.000
Wer ist auf diese beknackte Idee gekommen, Alter?

11:16.000 --> 11:27.000
No Updates Available. Okay, es gibt keine Patches oder sonst was. Dann mal IDE. Ah nee, Moment, falsche, falsche. Ich brauche die Early Access IDE.

11:27.000 --> 11:43.000
Oh. Was mache ich denn jetzt? Da muss ich ja kaufen jetzt.

11:43.000 --> 11:50.000
Ja, Snap sackt. Gehe ich dir voll ganz recht. Ich mag das auch nicht. Also Snap ist überhaupt nicht meins.

11:50.000 --> 11:54.000
Aber was gibt es für Alternative so wirklich, wo halt auch die Sachen drin sind, haben wir jetzt.

11:54.000 --> 12:02.000
Es gibt Flatpak, aber ich glaube Flatpak hat kein.NET Core.

12:02.000 --> 12:14.000
.NET Core ist am easyesten zu installieren über Snap, wenn es nicht aus dem Package Manager kommt.

12:14.000 --> 12:16.000
Das offizielle Installer-Skript geht auch.

12:16.000 --> 12:22.000
Wir legen jetzt mal kurz ein Projekt an, da kann ich euch zeigen, was wir machen.

12:22.000 --> 12:35.000
Lass mal probieren zu machen. Also New Solution. Was brauchen wir denn? Wir brauchen eine Web Application.

12:35.000 --> 12:44.000
Passt alles, alles gut. Alles exellent. Moin Rusty.

12:44.000 --> 12:50.000
Ja, das ist wirklich merkwürdig. Snap sind ja auch Container, aber Container, genau wie du sagst, Container, die so tun, als sind sie ein lokalen,

12:50.000 --> 12:55.000
so wie dieses Programm, aber doch nicht so richtig. Das Snap ist so ein komischer Hybrid.

12:55.000 --> 13:03.000
LXD finde ich dafür eigentlich ganz nice, weil es quasi das noch am nächsten an der VM-mäßige Container-Dings ist.

13:03.000 --> 13:09.000
So, Rider-Projects, haben wir auf, zack.

13:09.000 --> 13:19.000
So, und übrigens ein Big-Brain-Command, was ich euch nicht oft genug als Herz legen kann, ist.NET Run-Watch.

13:19.000 --> 13:29.000
So, und was das macht, ist folgendes, das ist, ach so, ja, ich muss die richtige.NET Run-Time verwenden, das funktioniert jetzt auch.

13:29.000 --> 13:39.000
Das ist ein richtiges Big-Brain-Tool bzw. Build-in-Tool, und zwar normalerweise bei Web-Anwendungen hat man sich ja mittlerweile auch darauf eingeschossen,

13:39.000 --> 13:48.000
dass immer F5 drücken zum Refreshen nervig ist. So, da gibt es jetzt mittlerweile schon Tools für Web-Anwendungen, die automatisch die Seite refreshen.

13:48.000 --> 13:57.000
.NET Run-Watch macht das gleiche. Also, zum Beispiel, ich gehe jetzt hier rein, das ist nur das Standard-Projekt, da gibt es jetzt nichts Tolles zu sehen.

13:57.000 --> 14:02.000
Gehe jetzt hier rein und ich ändere jetzt hier irgendwas, ich sage jetzt mal hier irgendwie Konsole-Write-Line 1, 2, 3.

14:02.000 --> 14:10.000
Normalerweise müsste ich jetzt ja meine Anwendung neu laden, dass sie das frisst, aber muss ich nicht, wenn ich.NET Run-Watch mache.

14:10.000 --> 14:24.000
Ich speicher jetzt einfach, Achtung, Steuerung S und BÄM. Sollte nicht eigentlich neu starten jetzt.

14:24.000 --> 14:49.000
Hä, warum geht das denn nicht? Normalerweise würde das jetzt für mich neu starten.

14:49.000 --> 15:02.000
Hä?.NET? Ist es Watch-Run? Nein, es ist Run-Watch. Ah, ok, MonkaS, ich habe nichts gesagt.

15:02.000 --> 15:11.000
Es ist.NET Watch-Run und nicht.NET Run-Watch. Ich habe gerade versucht, Run, ich habe gerade meine aktuelle Anwendung und als erstes Argument Watch übergeben.

15:11.000 --> 15:20.000
Ich muss sagen, derjenige, der KeckLeo als Emote vorgeschlagen hat, beste, ich finde das übelst nice.

15:20.000 --> 15:25.000
Wir haben auch sonst wenige Channels, aber KeckLeo, übelst nice.

15:25.000 --> 15:33.000
So, jetzt zeige ich das Ganze nochmal. Also ich habe jetzt hier irgendwie Mist drin stehen, löscht das und müsste eigentlich meine Anwendung neu starten.

15:33.000 --> 15:38.000
Also was mache ich? Einfach nur speichern und zack, er startet das für mich neu.

15:38.000 --> 15:43.000
Also finde ich relativ praktisch, gerade bei Web-Anwendungssachen.

15:43.000 --> 15:49.000
Moment, was ist denn das für ein komisches neues Template? What the fuck?

15:49.000 --> 15:55.000
Das ist neu. Das ist ein neues Template seit.NET 5. Was ist denn hier los?

15:55.000 --> 16:00.000
Swagger, ich will kein Swagger haben. Wollen wir Swagger haben, Leute?

16:00.000 --> 16:10.000
Chat an den Freien würde mich mal interessieren. Wie viele von euch wissen überhaupt oder haben schon mal was gehört, von was Swagger überhaupt ist?

16:10.000 --> 16:17.000
Ich meine, auch wenn es ganz nett ist, aber die Großteilprojekte brauchen es nicht und die meisten wissen nicht, was es ist.

16:17.000 --> 16:24.000
Swagger ist eigentlich was ganz Cooles, aber braucht man normalerweise nicht.

16:24.000 --> 16:31.000
Swagger ist ein automatischer API-Dokumentationstool. Ist eigentlich ganz cool.

16:31.000 --> 16:40.000
Wir können uns das jetzt mal kurz angucken. Also localhost, was ist.NET Standard 5000?

16:40.000 --> 16:45.000
Wartet mal kurz, ich muss mal eine Sache fixen. Ich will gar nicht mit SSL starten.

16:45.000 --> 16:50.000
Wo ist das hier nochmal drin? Ah, das ist immer, das suche ich immer.

16:50.000 --> 16:54.000
Die haben das ja auch wieder super versteckt bei Microsoft alles, wie man startet.

16:54.000 --> 17:00.000
Also wir wollen nicht starten. Also wir wollen schon gar nicht mal mit dem IES starten.

17:00.000 --> 17:07.000
Sondern wir wollen auch nicht harte DPS starten. Wir wollen einfach nur localhost auf allen IPs lauschen.

17:07.000 --> 17:12.000
Excellent. So und jetzt nochmal neu starten. Jetzt ist es auch da.

17:12.000 --> 17:19.000
So, ich zeige euch jetzt mal, was Swagger ist. Ich bin mir aber gar nicht sicher, was ich für eine Uhrlauf machen muss. Die hier wahrscheinlich.

17:19.000 --> 17:22.000
Ich habe das noch nie in.NET verwendet. Keine Ahnung.

17:22.000 --> 17:37.000
So, wahrscheinlich reicht es nicht, wenn man das einfach aufmacht. Also 5000 ist der Standardport. Okay, da ist einfach mal.

17:37.000 --> 17:44.000
Das sollte nicht so sein, oder? Das sollte normalerweise jetzt was kommen, oder?

17:44.000 --> 17:52.000
Ah, nee. Ich muss Weatherforecast oder irgendwie sowas machen, das was kommt. Ja, okay, alles klar.

17:52.000 --> 17:57.000
Also ich kriege jetzt irgendwelche komischen Fake-Wetter-Daten. So und jetzt kann man irgendwie Swagger aufmachen.

17:57.000 --> 18:02.000
Wie macht man Swagger in.NET hier den Fault-APN-Punkt auf?

18:02.000 --> 18:18.000
Swagger einfach so. Ah, genau. Das ist ein automatisches AP. Ja, IES gibt es immer noch.

18:18.000 --> 18:26.000
Das ist ein automatisches AP-Dokumentationstool. Und man kann auch gleich die AP ausprobieren.

18:26.000 --> 18:36.000
Es ist eine richtig coole Sache, wenn man irgendwelche öffentliche APs anbietet. Ich muss euch aber ehrlich sagen, ich benutze das äußerst selten.

18:36.000 --> 18:45.000
Dafür haben diese Sachen nicht die nötige Komplexität. Und für die eigenen Sachen, so richtig so klassische Rest-End-Punkte habe ich eh nur noch selten.

18:45.000 --> 18:57.000
Ein paar vielleicht. Aber egal, ich zeige euch mal was es ist. Also sprich, das hier ist jetzt die Beispielanwendung. Was will das hier überhaupt von mir?

18:57.000 --> 19:04.000
Also das ist jetzt die Standardanwendung, das Standard-Template, wenn man ASP.NET Core-Anwendung anlegt hier mit.NET 5.

19:04.000 --> 19:20.000
Und das Einzige, was hier als AP-Endpunkt drinne ist, ist halt dieser Wetter-Vorschau. Und das Einzige, was der anbietet ist einmal GET.

19:20.000 --> 19:30.000
Also sprich, das Einzige, was man machen kann ist auf Anwendung slash Weather-Vorcast gehen und man bekommt einen aktuellen Wetter-Vorhersage.

19:30.000 --> 19:43.000
Also aktuell Fake-Daten. Und Zegrot, ja ich bin mal gespannt, ob das funktioniert. Und das generiert halt so eine AP-Dokumentation automatisch.

19:43.000 --> 19:50.000
Also sprich, ich gehe jetzt auf die Seite drauf, da sagt ihr mir, ok, was wird als APs angeboten? Es gibt einfach nur ein GET, einfach nur ein GET Weather-Vorcast.

19:50.000 --> 19:56.000
Und man kann irgendwo auch jetzt die Sache direkt ausprobieren. Normalerweise schon.

19:56.000 --> 20:07.000
Kann man das nicht eingestellt? Kann man nicht das Zeug? Oder muss man das erst einschalten? Normalerweise gibt es da unten drunter nämlich noch so ein Button, dass man das direkt ausprobieren kann.

20:07.000 --> 20:14.000
Aber anscheinend hier nicht. Das muss man bestimmt erst einschalten.

20:14.000 --> 20:31.000
Ah, hier. Genau. Und man kann dann auch direkt ausprobieren. Ich meine, die AP-Abfrage ist ein bisschen, naja, low-brain im Endeffekt, weil das soll da rauskommen.

20:31.000 --> 20:39.000
Das gibt keine Parameter und nichts. Aber wenn man eine AP neu verwenden muss und nicht weiß, wie die geht und die den Swagger Endpunkt haben, ist das eine super, wirklich tolle Geschichte.

20:39.000 --> 20:46.000
Um sich da ein bisschen ran zu tasten, was die können. Vor allem, weil die auch Example-Curl-Aufrufe dabei schreiben. Das finde ich auch ganz praktisch.

20:46.000 --> 21:01.000
Ja. Genau. Ist eigentlich ganz cool. Aber, naja. Bei mir wird es nicht oft verwendet. Und ich hier jetzt auch erst recht.

21:01.000 --> 21:10.000
Deswegen schmeißen wir die komischen Swagger-Campels gleich mal wieder raus. Hat sich ausgeswagt. So. Swagger muss weg. Brem.

21:10.000 --> 21:17.000
Äh, das kann auch weg. Authorization, CAC-V. Kommt man da hin? Swagger.

21:17.000 --> 21:23.000
Okay. Die haben das ein bisschen entschlackt. Ich sehe das jetzt nämlich zum ersten Mal, das neue Template mit Dortnet 5.

21:23.000 --> 21:33.000
Das sieht eine ganze Ecke schlanker aus. Ja. Zumindest, was wir jetzt brauchen, ist, wir brauchen Fake-Daten.

21:33.000 --> 21:38.000
Dass wir CraftQL richtig verwenden können. Weil CraftQL, wie gesagt, ist halt was zum Abfragen.

21:38.000 --> 21:47.000
Eine Hilfe, um Daten abzufragen von einer AP oder wie nennt man das? Was sagen die denn selbst, was die sind?

21:47.000 --> 21:57.000
CraftQL. Die können das bestimmt besser erklären als ich. Ah, genau. Eine Abfragesprache für meine AP.

21:57.000 --> 22:04.000
Okay. Deswegen brauchen wir jetzt erst mal Daten, die wir überhaupt abfragen können.

22:04.000 --> 22:17.000
Äh, Cheat95. Das Archiv müsste eigentlich funktionieren. Du darfst nicht auf das Video direkt klicken. Du musst irgendwie unten klicken, sonst will er es downloaden.

22:17.000 --> 22:25.000
Das ist ein bisschen Google-Fail. Die Bedienung davon.

22:25.000 --> 22:35.000
So. Und zwar, was macht man, wenn man Fake-Daten braucht? Da gibt es ein ziemlich gutes Dortnet-Projekt. Also, wer mal JavaScript verwendet, der kennt bestimmt Faker.

22:35.000 --> 22:44.000
Oder was war Faker? Faker. Und es geht nicht um irgendwelche LoL-Spiele oder so. Okay, ich gebe zu, das war halt schlecht.

22:44.000 --> 22:52.000
Sondern um eine Library, die Fake-Daten generiert. Und relativ gut eigentlich auch.

22:52.000 --> 22:57.000
Allerdings ist es wirklich Fake. Also Postleitzahlen und so stimmen nicht. Das sind ausgedachte Sachen.

22:57.000 --> 23:05.000
Genau. Und Faker. Das ist so eine JavaScript-Geschichte. Und es gibt für Dortnet eins. Das nennt sich Bogus.

23:05.000 --> 23:13.000
Das macht im Prinzip das Gleiche. Ich glaube, das ist sogar ein Faker-Port. Genau. Port of Faker.

23:13.000 --> 23:23.000
Und was man damit machen kann, ist, wenn ich jetzt irgendwas ausprobieren will und massig Fake-Daten brauche, kann man das damit erstellen.

23:23.000 --> 23:27.000
Zum Beispiel sowas hier.

23:27.000 --> 23:36.000
Okay, das ist ein bisschen ultrakompliziert geschrieben jetzt. Aber da kommt halt sowas hier raus. Fake-Daten.

23:36.000 --> 23:48.000
Das ist eigentlich ganz nützlich.

23:48.000 --> 23:55.000
Jetzt geht es wieder. Okay. So, deswegen installieren wir mal das Ding und generieren uns ein paar Fake-Daten, die wir gleich über Craft-Ql abfragen können.

23:55.000 --> 24:11.000
Exzellent. Ich glaube, das ist das Richtige. Alter, die sind doch bei Version 32. Die machen den Firefox hier.

24:11.000 --> 24:18.000
Die machen den Firefox.

24:18.000 --> 24:25.000
Na ja, sollen sie mal machen.

24:25.000 --> 24:32.000
Alles installiert. Okay. So, und was man da jetzt machen kann, ist...

24:32.000 --> 24:34.000
Wartet mal.

24:34.000 --> 24:42.000
Wo machen wir das jetzt am besten? Ja, eigentlich bräuchten wir jetzt noch irgendeine SQLite-Datenbank oder sowas, wo wir uns das rausholen können.

24:42.000 --> 24:48.000
Oder eine In-Memory-Datenbank. Wir generieren erstmal ein bisschen Fake-Daten.

24:48.000 --> 24:59.000
So, da kann man zum Beispiel jetzt sagen, wir machen den Klassiker... Oracle, genau. Wir machen den Klassiker, wir machen irgendwie Customer oder sowas.

24:59.000 --> 25:07.000
Erstmal Oracle. Natürlich nur mit Lizenz, versteht sich.

25:07.000 --> 25:14.000
Ich überleg grad, wie das ging. Man konnte irgendwie sagen... So, kurz das Beispiel noch mal angucken.

25:14.000 --> 25:20.000
Genau, man musste sagen, Faker und dann was für User. Ja, machen wir. Machen wir mal eine Klasse. Keine Ahnung.

25:20.000 --> 25:27.000
Ich mach das jetzt hier einfach mal inline. Public Class User. Irgendwas, wir brauchen doch irgendwas zum Abfragen.

25:27.000 --> 25:37.000
So, und dieser User hat, keine Ahnung, Adresse... Adress? What the fuck? String? String? Hallo? Bäm, bäm.

25:37.000 --> 25:43.000
Adress? Schreibt man Adress mit DD? Ich kann mir das immer nicht merken. Adresse? Adress? Adress schreibt man glaube ich mit DD.

25:43.000 --> 25:57.000
So, der hat eine Adress, der hat einen String Name und der hat, keine Ahnung, der hat noch irgendwie ein Phone oder so. Vollkommen egal.

25:57.000 --> 26:08.000
So, und jetzt kann man sagen, Faker, erstelle mir neue User und man kann dem auch irgendwo hier sagen, genau, ob er...

26:08.000 --> 26:15.000
Man kann ihm nämlich auch sagen, was er für eine Sprache verwenden soll, aber das ist recht beschränkt, also das geht nicht mit allem.

26:15.000 --> 26:21.000
Aber da kann er zum Beispiel Namen generieren wie Peter Krabbe oder sowas.

26:21.000 --> 26:26.000
Wir hatten noch letztens dieses Mal, wo ich euch dieses eine Projekt mal gezeigt habe, waren Fake-Daten drin.

26:26.000 --> 26:34.000
Da war da Peter Krabbe dabei, das kann ich mich noch dran erinnern. Und in EN würde dann Peter Crabbe generieren oder sowas. Was auch immer.

26:34.000 --> 26:48.000
So, also. Oder hier, Users. Eigentlich brauchen wir gar keine Datenbank, wir machen einfach die Fake-User public und gut ist.

26:48.000 --> 26:55.000
So, und nun kann man ihm sagen, was er für Fake-Sachen erstellen soll. Da kann man nämlich sagen, Rule und jetzt zum Beispiel für...

26:55.000 --> 27:05.000
Der kriegt noch eine Mail zum Beispiel. Mail ist auch gut, Mail kann das auch gut, weil ich brauche ja später ein bisschen was zum Abfragen.

27:05.000 --> 27:13.000
So, Mail. Was, Max, möchtest du mal... Moment, ich muss übrigens mal Chat aufmachen, hab ich vergessen.

27:13.000 --> 27:30.000
Chat you. So, also. Was meinste? Möchtest du mal die geballte Kompetenz des österreichischen Wirtschaftsministeriums bezüglich E-Commerce erleben?

27:30.000 --> 27:42.000
Also, warum? Inwiefern? Was haben sie gerissen? Ich hab nur mitgekriegt, dass sich vor zwei Tagen alle über den Bundeskanzler, den Österreichischen, aufgeregt haben.

27:42.000 --> 27:49.000
Weil er irgendwas erzählt hat von Ausländer, die haben Corona eingeschleppt oder sowas, da haben sich alle aufgeregt.

27:49.000 --> 27:59.000
Kaufhaus Österreich. Ok, zeig mal her, warum ist das so unfähig hier? Kaufhaus Österreich. Oh, Hi-Res-Bild schon mal.

27:59.000 --> 28:06.000
Ich kaufe Regionalen, das geht auch digital. Willkommen im Kaufhaus. Das sieht doch ganz ok aus, was ist da dran so schlimm?

28:06.000 --> 28:20.000
Shopkategorien, Bücher, äh, Schaufensterbummel, aha, exellent. Das sieht doch ganz... Was? Such mal Fahrrad.

28:20.000 --> 28:37.000
Ne. Ja, geht doch. Ist doch alles ok. Ich finde es sogar ganz gut. Der findet bei Fahrrad sogar E-Bike Factory.

28:37.000 --> 28:56.000
Drück Enter, ok. Down the law. Mal gucken, was passiert. Geht. Sieht zwar nicht gerade toll aus hier mit dem runter, aber es geht doch alles.

28:56.000 --> 29:17.000
Da können wir jetzt zum Beispiel uns dann in die E-Bike Factory angucken oder so. Ah, ich finde das jetzt nicht so schlimm.

29:17.000 --> 29:26.000
Was ist da dran so schlimm? Ich meine, die Seite sieht sogar noch ganz brauchbar aus. Das ist so Fake Material Design. Was ist denn das für ein Framework? Lass mir gucken.

29:26.000 --> 29:48.000
Blue Circle Arrow. Sagt einem das irgendwas? Was ist das? Blue Circle? Ist das irgendein Materialize oder sowas? CSS. Ach ne, das ist den MDI-Icons wahrscheinlich einfach nur. CTA-Full, CTA.

29:48.000 --> 30:04.000
Ich vermute fast, dass das irgendwas Custom-Zusammen gewusstet ist. Das Ding hat 620.000 Euro gekostet. Ja, das ist doch wenig. Guck mal, wie teuer der Flughafen bei uns ist oder der Bahnhof oder was auch immer.

30:04.000 --> 30:19.000
Hey, die Behördensachen sind immer teuer, weil die müssen sich auch nicht vom eigenen Geld bezahlen. Die können einfach sagen, okay, easy, mich juckt es überhaupt nicht, ob da was Gutes oder Schlechtes bei rauskommt. Ich gebe einfach mal Geld aus, was nicht mir ist.

30:19.000 --> 30:35.000
Die Corona-App, Leute. Also mein iPhone ist ja zu alt. Also das 6er kann das nicht. Aber meine Mutter hat auf ihrem iPhone SE die Corona-App.

30:35.000 --> 30:52.000
Und die Corona-App, die sagt bestimmt fünfmal am Tag, dass irgendwas ist, dass sie entweder gecrashed ist, dass sie irgendwelche Daten nicht abrufen kann, dass irgendwelche Verbindungsprobleme gibt. Also die Corona-App, die hat schon so oft auf sich aufmerksam gemacht.

30:52.000 --> 31:12.000
Nicht weil eine Corona Begegnung war, sondern weil es einfach nicht richtig funktioniert. Ja doch, bei uns schon. Und ich meine, man darf nicht vergessen, die Corona-App ist von den Besten der Besten programmiert worden.

31:12.000 --> 31:30.000
Das war doch eine Zusammenstellung aus Leuten von der Telekom und SAP. Also das muss eigentlich gut sein. Das waren die Stonks, Businessmans, highly trained expert consultant schlechthin.

31:30.000 --> 31:49.000
Also das wundert mich, dass das Probleme hat. So wir faken jetzt mal ein paar User-Daten. Also, Rule für, Moment, wie hat das noch mal funktioniert? Für User-Mail?

31:49.000 --> 32:14.000
Dann konnte man glaube ich irgendwie sagen, Faker-Mail? Nee. In-Commerce-Internet-Mail. Excellent. So, jetzt hat unser User Fake-E-Mails, eine Fake-E-Mail-Adresse.

32:14.000 --> 32:27.000
Dann braucht unser User noch einen Fake-Name auf jeden Fall. Name. Alter, gehst du mal fort da oben, Overlay, ist ja auch mal gut.

32:27.000 --> 32:47.000
Name. Fake-Name, ganz wichtig. Oh nee, Fake-Name geht nicht. Full-Name, jawoll, das braucht der unbedingt. Was wird hier gerade gebastelt?

32:47.000 --> 33:00.000
Ich generiere gerade ein paar Fake-Daten, dass wir dann GraphQL ausprobieren können. Wollte ich schon lange mal ausprobieren und mich ein bisschen mit rum basteln. Erstens, weil ich das für diese Security-Kamera-Überwachungssoftware verwenden will, die wir hier im Stream auch schon programmiert haben.

33:00.000 --> 33:11.000
Für die Aufnahmen, weil wenn es später viele Aufnahmen werden, wird das über Rest und Sortieren und Filtern ein bisschen eklig. Und einfach weil es eine coole Technik ist.

33:11.000 --> 33:17.000
Jetzt brauchen wir natürlich erstmal was zum Abfragen, dass wir überhaupt GraphQL verwenden können.

33:17.000 --> 33:43.000
Gut, was hat der User noch? Der hat noch eine, also E-Mail und Name haben wir jetzt schon, ein Phone hat er noch. User, Phone. Haben die direkt Phone in Faker? Phone? Phone-Number. Muss ja auch nichts realistisches drinstehen.

33:43.000 --> 33:57.000
So und dann hat unser User noch einen, ne Namen haben wir schon, Phone-Name-Address. Was haben wir jetzt vergessen? Mail-Phone-Name-Address. Address haben wir noch nicht.

33:57.000 --> 34:16.000
Was macht Rule 4? Das erstellt, was sagen sie denn? Create a Rule-4-Property, alles klar, Epic Brain. Da gibst du an, welches Property, welche Variable im Endeffekt von diesem User, mit was gefüllt werden soll.

34:16.000 --> 34:35.000
Also sagst du ihm hier, für jeden neuen User, den du anlegst, verwendet diese Regel, um es zu füllen. So, jetzt sag ich ok, User-Adresse möchte ich füllen mit den Regeln von Faker für Random-Adressen.

34:35.000 --> 34:48.000
So, Full. Gibt es da sowas wie Full-Adress? Exzellent. So, sind wir fertig. Und jetzt müssen wir ja gucken, wie wir den Kram erstellen.

34:48.000 --> 35:03.000
Jetzt konnte man irgendwie sagen, Generate oder sowas. Users, Generate. 500 User. Bam. So und jetzt haben wir 500 User mit Fake-Daten. Das ist zum Testen eine super Geschichte.

35:03.000 --> 35:13.000
Ich kann euch auch mal zeigen, dass da jetzt was Sinnvolles drin steht. Oh, wir können. Big Brain. Ich hab ne Idee. Wir können Record-Types verwenden.

35:13.000 --> 35:25.000
Weil, ist das so gut ist, bin ich mir gar nicht so... Probieren wir mal aus. Also, User in Users. Wir können gleich mal Record-Types verwenden.

35:25.000 --> 35:48.000
Moment. Ach nee. Moment. Rules. Rules Generate. So rum. Ah, yes. So. Und jetzt werdet ihr sehen, jetzt geb ich mir mal das ganze hier aus.

35:48.000 --> 36:01.000
Und jetzt gibts 500 Fake-User-Namen klar. Hier. Wen haben wir denn da? Jared Schimmel haben wir da zum Beispiel. Alles klar. Und Dean Schulzlist.

36:01.000 --> 36:08.000
So und jetzt kann man auch noch hier irgendwo einstellen, dass er das auf Deutsch machen soll. Deutsche Fake-Daten generieren.

36:08.000 --> 36:25.000
Da gibt es den Lorenzo Bussmann. Und was für ein Ding? Frieda Wirkschließ. Alles klar. Logisch. Wobei, die Leute heißen ganz merkwürdig.

36:25.000 --> 36:38.000
Aber Frieda Wirkschließ ist schon ganz toll. Gut. Also man sieht, der generiert halt Fake-Daten. Und man kann sich auch die E-Mailer ausgeben lassen. E-Mail.

36:38.000 --> 36:46.000
Was halt, was ich glaube ich, was er glaube ich nicht kann ist, dass die E-Mail zum User passt. Da muss man irgendwelche Custom-Rules für machen. Guck.

36:46.000 --> 37:05.000
Weil Lewin Holt hat umut80 at gmail.com. Das klingt natürlich wahnsinnig passend.

37:05.000 --> 37:20.000
Woher weiß er jetzt, woher f und u kommt? Das sind Lambda-Functions. Das weiß er gar nicht. Das ruft er auf mit diesen Optionen. Also hier lege ich im Prinzip nur fest, welche Regeln ich verwenden will.

37:20.000 --> 37:42.000
Und wenn ich dann sage Generate, dann macht er intern quasi eine Schleife 0 bis 500 und ruft quasi jede Sache, die er dann erstellt, ruft er diese Rule vor dann quasi auf, übergibt User, übergibt eine Faker-Instanz und holst das dann da raus. Das ist quasi ein Callback, wenn du es so willst.

37:42.000 --> 37:57.000
Würde ich mal vermuten. Nee, das ist kein Callback. Nee, das ist kein Callback. Das ist, doch das ist so eine Art Callback, würde ich mal sagen.

37:57.000 --> 38:16.000
Hast du was gefragt? Jetzt müsste ich erst mal überlegen, wie funktioniert denn das? Ja doch, das wird unter der Haube schon so eine Art Callback dann erzeugen, weil ich meine, der erzeugt ja die User nicht hier.

38:16.000 --> 38:31.000
Hier sagst du ja nur, welche Regel du auf welche Property mappst. Das heißt, hier erst wenn du Generate machst, ruft er die ganzen Sachen auf. Du ordnest hier zu Regel, zu Property. Das weiß er dann, aber da generiert er noch nichts.

38:31.000 --> 38:51.000
Also hier generiert er keine Fake-Email. Die Fake-Email wird er wahrscheinlich erst hier generieren und hier wird er nachgucken, was hat er denn für eine Regel ausgewählt dafür. Also wahrscheinlich registriere ich hier einfach nur, dass für die Klasse User und für das Property-Mail diese Regel verwendet werden.

38:51.000 --> 39:12.000
Ich meine, wir können ja mal reingucken, das schöne an Rider ist, wir drücken einfach Control, klicken drauf, aber man muss dazu sagen, das ist decompiled, das ist, ähm, der hat anscheinend wirklich Source-Code dafür, das sieht gar nicht mal so, so eklig decompiled aus.

39:12.000 --> 39:31.000
Tja, jetzt kommen wir uns den Source-Code da vorne an und gucken, also was macht er? Property-Name for Invoke. Okay, der merkt sich das hier. Also der speichert sich das hier, was ich ihm übergebe und das ruft er dann später als Callback nochmal auf, würde ich mal sagen.

39:31.000 --> 39:51.000
Ja genau, wie es genau intern funktioniert, weiß ich nicht. Keine Ahnung, hab ich schon nie angeguckt. Zumindest dieses U und U und äh, äh und F.

39:51.000 --> 40:06.000
Äh, was wollte ich jetzt sagen, dieses U und F, überleg ich, wie könnte das funktionieren, ist echt eine gute Frage.

40:06.000 --> 40:22.000
Excellent, alles klar, jetzt weißt du Bescheid, wenn du dir das anguckst. Ich mein, das ist die normale C-Sharp-Lambda-Sonntags, aber was, was könnte der da hinter der Haube machen?

40:22.000 --> 40:41.000
Ich müsste echt da überlegen, was die da treiben.

40:41.000 --> 41:01.000
Ich mein, das hier führt ja nicht gleich aus. Das hier ist ja nur die Kurzschreibweise von, ach ne, das geht gar nicht an der Stelle.

41:01.000 --> 41:13.000
Warum geht das nicht, warum kann ich hier nicht die lange Schreibweise verwenden? Ach, das ist keine Lambda-Sonntags, ne, ne, ne, ne, ne, ne.

41:13.000 --> 41:24.000
Das sind Expression Trees, das ist Big Brain Feature, das ist gar kein Lambda-Call, das ist, ähm, ach du Scheiße, ne, das kann ich nicht erklären, ich hab keine Ahnung, was der im Hintergrund macht.

41:24.000 --> 41:34.000
Das ist kein Lambda-Aufruf, das sind Expression Trees, das ist quasi On-The-Fly C-Sharp-Code-Generierung oder sowas, was da im Hintergrund läuft.

41:34.000 --> 41:40.000
Frag mich nicht, was der macht, keine Ahnung. Cheat95 oder wer das gefragt hat, Big Brain Frage, ich hab keinen Blasenschimmer, was die treiben.

41:40.000 --> 41:50.000
Das sind Expressions, das sind keine, der generiert On-The-Fly irgendwelchen Code dann im Hintergrund dafür.

41:50.000 --> 41:56.000
Krasser Scheiß, keine Ahnung, was das macht.

41:56.000 --> 42:03.000
Es funktioniert. Okay, jetzt haben wir 500 User generiert mit Fake-Daten.

42:03.000 --> 42:07.000
Ich überleg grad, ob wir noch ne Fake-Datenbank erstellen.

42:07.000 --> 42:15.000
Ich hab mir können ne Fake-Datenbank erstellen und User reinschreiben, dann brauchen wir nicht immer, ähm, nicht immer das Neugenerieren beim Starten.

42:15.000 --> 42:20.000
Das machen wir erst mal, das machen wir, wer stellt mal ne Fake, so SQlite oder sowas.

42:20.000 --> 42:32.000
SQlite Entity, hallo?

42:32.000 --> 42:39.000
Okay, Microsoft Entity.

42:39.000 --> 42:42.000
Muss man da jetzt Punkt machen? N.

42:42.000 --> 42:45.000
Core, SQlite, da ist es doch.

42:45.000 --> 42:49.000
Warum muss man das, warum finde ich das nicht gleich?

42:49.000 --> 42:54.000
So, bam, wir machen irgendeine Fake-Datenbank.

42:54.000 --> 42:57.000
So, da machen wir uns aber gar keine große Arbeit damit.

42:57.000 --> 43:01.000
Moin Rico, da machen wir uns gar keine große Arbeit mit.

43:01.000 --> 43:08.000
Wir machen einfach ne Datenbank mit genau einem Endpunkt für User und, oder einem DB-Kontext mit einem Endpunkt für User und gut ist.

43:08.000 --> 43:18.000
So, jetzt wird es erst mal wieder big-brainig, äh, wie konfiguriert man Datenbank nochmal aus dem Kopf in ASP.NET Core.

43:18.000 --> 43:24.000
Ich glaub man sagt Services, add DB-Kontext.

43:24.000 --> 43:28.000
Das muss man gleich, muss man gleich noch anlegen.

43:28.000 --> 43:32.000
Ähm, ne, wobei, glaub das, das, das war's.

43:32.000 --> 43:36.000
Hauptmehr musste man gar nicht machen.

43:36.000 --> 43:39.000
DB-Kontext.

43:39.000 --> 43:43.000
Den müssen wir anlegen, haben wir einen neuen Ordner.

43:43.000 --> 43:47.000
Wollen wir ja ordentlich sein.

43:47.000 --> 43:52.000
App, DB, Kontext.

43:52.000 --> 43:57.000
So, und jetzt steh ich auf dem Schlauch, weil ich mir aus dem Kopf nie merken kann, wie man den Kram anlegt.

43:57.000 --> 44:02.000
Zumindest weiß ich schonmal, wir wollen ein DB-Set.

44:02.000 --> 44:07.000
Das hat jetzt keinen speziellen Grund, warum man das so macht, das muss man so machen, dass es funktioniert.

44:07.000 --> 44:11.000
Äh, User, heißt Users.

44:11.000 --> 44:14.000
So, und jetzt muss man ihm irgendwie noch sagen, dass wir SQLite verwenden sollen.

44:14.000 --> 44:18.000
Da muss ich mal kurz abgucken, weil ich mir nicht merken kann, wie der ganze Krämpel funktioniert.

44:18.000 --> 44:22.000
Guck mal kurz ab, Leute. Easy cheat.

44:22.000 --> 44:26.000
Äh, App DB Kontext.

44:26.000 --> 44:29.000
Aha, so funktioniert's.

44:29.000 --> 44:34.000
Excellent.

44:34.000 --> 44:36.000
Gut abgeguckt.

44:36.000 --> 44:38.000
Ist die halbe Miete.

44:38.000 --> 44:41.000
Will ich wissen, wie viele Leute Stackoverflow permanent copypasten.

44:41.000 --> 44:45.000
Das hab ich jetzt einfach aus irgendwas, wo ich weiß, dass es funktioniert, genommen.

44:45.000 --> 44:52.000
Also, dann schreiben wir mal in unsere Datenbank die ganzen Fake-User rein.

44:52.000 --> 44:56.000
Und zwar machen wir das einmalig.

44:56.000 --> 44:59.000
Und danach löschen wir's.

44:59.000 --> 45:04.000
Dass er das anlegt, weil ich will nicht bei jedem Start Fake-User generieren.

45:04.000 --> 45:08.000
So.

45:08.000 --> 45:13.000
Das machen wir mal anders, diesen ganzen Krämpel machen wir hier oben.

45:13.000 --> 45:16.000
So.

45:16.000 --> 45:19.000
Also lass mir den Fake-User vor CraftQL ausprobieren.

45:19.000 --> 45:26.000
So. Und nun sag ich mal, X-Database soll created werden.

45:26.000 --> 45:33.000
Und dann sagen wir, Database-User-Add-Range, die ganzen Users.

45:33.000 --> 45:37.000
Bam. Und dann CTX-Save-Changes.

45:37.000 --> 45:40.000
Zack.

45:40.000 --> 45:42.000
Oh.

45:42.000 --> 45:47.000
Hast du schon mal eine 7S programmiert? Nein, was hat er jetzt für Schmerzen?

45:47.000 --> 45:50.000
What the... Whoa.

45:50.000 --> 45:53.000
Hab ich den verkehrt gemacht?

45:53.000 --> 45:55.000
Ah, ich hab die ID vergessen von User.

45:55.000 --> 45:57.000
Ah, das muss man machen.

45:57.000 --> 46:03.000
Wenn man EF Core verwenden will und die ganzen Typen, die man EF Core speichern will,

46:03.000 --> 46:06.000
die brauchen immer ein Feld, was ID heißt.

46:06.000 --> 46:09.000
Wenn es das nicht gibt, dann mag er nicht.

46:09.000 --> 46:12.000
So, jetzt funktioniert's.

46:12.000 --> 46:15.000
Der generiert die automatisch, aber nur, wenn es ein Feld in der Klasse für gibt.

46:15.000 --> 46:17.000
Weil, wo soll er es denn sonst reinschreiben?

46:17.000 --> 46:21.000
Also, wenn du es abfragst, er könnte es unter der Haube machen.

46:21.000 --> 46:24.000
Er könnte es unter der Haube Magic irgendwie machen.

46:24.000 --> 46:26.000
Das wird vielleicht gehen.

46:26.000 --> 46:29.000
Aber so ist es schöner. Da kann man sich die ID später auch ausgeben lassen.

46:29.000 --> 46:32.000
Und man verwende die sogar relativ oft.

46:32.000 --> 46:34.000
So, jetzt haben wir hier eine Datenbank.

46:34.000 --> 46:37.000
Eine SQLite-Datenbank, data.db.

46:37.000 --> 46:39.000
Da können wir uns auch mal angucken.

46:39.000 --> 46:44.000
Da installieren wir mal den SQLite-Browser, oder wie das Teil heißt.

46:44.000 --> 46:45.000
Genau.

46:45.000 --> 46:50.000
Dann nehmen wir den SQLite-Browser zu und gucken uns mal an, was da drin steht.

46:50.000 --> 46:52.000
Vorher schmeiße ich den Kram wieder raus,

46:52.000 --> 46:55.000
weil ich will ja gar nicht, dass er das jedes Mal macht.

46:55.000 --> 46:58.000
Also, SQLite.

46:58.000 --> 47:02.000
SQLite-Browser-Data.db.

47:02.000 --> 47:06.000
Schieben wir rüber und gucken uns mal an, was da drin ist.

47:06.000 --> 47:08.000
Und da sind alle meine User.

47:08.000 --> 47:17.000
Sehr gut.

47:17.000 --> 47:19.000
Ost-Ivone-Land.

47:19.000 --> 47:20.000
Das gibt es doch nicht.

47:20.000 --> 47:23.000
Ach so, in Grönland. Alles klar.

47:23.000 --> 47:28.000
So, und deswegen verwende ich auch EF Core, weil ich kein SQL von Hand schreiben will.

47:28.000 --> 47:31.000
So, okay, wir haben jetzt eine Fake-Datenbank mit Fake-Daten.

47:31.000 --> 47:34.000
Also nein, wir haben eine echte Datenbank mit Fake-Daten.

47:34.000 --> 47:37.000
Und passt alles. Wunderbar.

47:37.000 --> 47:39.000
Ich habe die Generierung auch wieder rausgeschmissen,

47:39.000 --> 47:41.000
weil wenn ich die Generierung jetzt reinmache,

47:41.000 --> 47:45.000
dann kriegen wir jedes Mal, macht er das jedes Mal noch mal.

47:45.000 --> 47:46.000
Und das wollen wir ja nicht.

47:46.000 --> 47:49.000
Das war ja gerade der Sinn, dass wir die Generierung einmal gemacht haben.

47:49.000 --> 47:51.000
So, und jetzt können wir wieder eigentlich eine Sache anfangen.

47:51.000 --> 47:54.000
Jetzt können wir uns mal anschauen, wie das mit GraphQL funktioniert.

47:54.000 --> 47:57.000
Wie gesagt, ich habe das vor einer Weile schon mal ein bisschen verwendet.

47:57.000 --> 48:00.000
Aber es gibt mittlerweile drei neue Versionen oder sowas von der einen Library,

48:00.000 --> 48:02.000
die ich verwenden werde.

48:02.000 --> 48:06.000
Und keine Ahnung, wie es genau funktioniert.

48:06.000 --> 48:11.000
Also, als Library werden wir das hier verwenden.

48:11.000 --> 48:15.000
Es gibt wohl zwei GraphQL Libraries für.NET.

48:15.000 --> 48:17.000
Die habe ich schon mal verwendet.

48:17.000 --> 48:21.000
Aber es gibt auch noch GraphQL.NET.

48:21.000 --> 48:24.000
Aber ich habe mir sagen lassen,

48:24.000 --> 48:27.000
oder ich habe gelesen damals, wo ich mich damit beschäftigt habe,

48:27.000 --> 48:30.000
als ich mal für dieses eine Projekt verwendet habe,

48:30.000 --> 48:35.000
dass hier wohl irgendwie das geilere Zeug läuft.

48:35.000 --> 48:38.000
Keine Ahnung, ob das stimmt.

48:38.000 --> 48:42.000
Beliebtheit ist das hier auf jeden Fall höher auf GitHub.

48:42.000 --> 48:45.000
Aber die scheint irgendwie bei den Hackermans beliebter zu sein.

48:45.000 --> 48:46.000
Keine Ahnung.

48:46.000 --> 48:48.000
Wir werden die hier verwenden, weil die habe ich schon mal verwendet.

48:48.000 --> 48:52.000
Da weiß ich prinzipiell über den Kram konfiguriert.

48:52.000 --> 48:55.000
Und das Schöne ist, die haben auch gleich eine Spielwiese dabei,

48:55.000 --> 49:00.000
wo man das mal ausprobieren kann.

49:00.000 --> 49:04.000
So, also, haben die irgendwie sowas, was man hier hinzufügen muss?

49:04.000 --> 49:06.000
Was sind denn das für Namen?

49:06.000 --> 49:08.000
Was sind denn das für Namen?

49:08.000 --> 49:11.000
Banana Cake Pop.

49:11.000 --> 49:13.000
Green Donut.

49:13.000 --> 49:14.000
Hot Chocolate.

49:14.000 --> 49:15.000
Marshmallow.

49:15.000 --> 49:17.000
Das klingt ja fast wie Android-Namen.

49:17.000 --> 49:23.000
Strawberry Shake.

49:23.000 --> 49:26.000
Wat da?

49:26.000 --> 49:30.000
Banana Cake Pop, Alter.

49:30.000 --> 49:32.000
Oh, die Rhythmie ist gut.

49:32.000 --> 49:35.000
Aber gut, dass ihr das verlinkt habt.

49:35.000 --> 49:43.000
Ohne hätte ich jetzt nicht Bescheid gewusst.

49:43.000 --> 49:45.000
Ja, Kengi, wir probieren ein bisschen aus.

49:45.000 --> 49:47.000
So, also wir installieren erst mal die Library.

49:47.000 --> 49:49.000
Zack.

49:49.000 --> 49:51.000
Alter, komm her.

49:51.000 --> 49:53.000
Tritt mal deine Maus los.

49:53.000 --> 49:56.000
Hot.

49:56.000 --> 49:57.000
Keine Hoten Grills.

49:57.000 --> 50:00.000
Hot Chocolate.

50:00.000 --> 50:03.000
Tja, was muss man da alles installieren?

50:03.000 --> 50:05.000
Wolltest du nicht den YouTube-Adventskalender machen?

50:05.000 --> 50:10.000
Was soll ich jetzt zum ersten Mal?

50:10.000 --> 50:15.000
Kommst du denn auf sowas?

50:15.000 --> 50:17.000
Doch, doch, doch, ich weiß, ich weiß.

50:17.000 --> 50:20.000
Hatte ich eigentlich vor, aber ich habe nicht genug Videos gemacht.

50:20.000 --> 50:23.000
Ich habe auch gesagt, ich habe es schon ganz am Anfang gesagt,

50:23.000 --> 50:26.000
wenn ich nicht wirklich die Videos fertig habe, mache ich es nicht,

50:26.000 --> 50:36.000
weil ich dann Bock habe, dass es nach einer Woche einfach abrupt wieder aufhört.

50:36.000 --> 50:38.000
Oder ich habe nicht genug Videos gemacht.

50:38.000 --> 50:41.000
Aber ich habe ein neues Video aufgenommen,

50:41.000 --> 50:45.000
das ich wahrscheinlich dann am Wochenende hochlade.

50:45.000 --> 50:50.000
Erst mal installieren.

50:50.000 --> 50:52.000
Ja, ich habe ein neues Video aufgenommen.

50:52.000 --> 50:55.000
Ich habe mir ein paar Sachen rausgepickt aus dem letzten Black Friday Video,

50:55.000 --> 50:59.000
wo die Leute gefragt haben, zum Beispiel das mit den China-Shops.

50:59.000 --> 51:03.000
Dass man ja das erzollt, dass diese Freigrenze nicht mehr gilt

51:03.000 --> 51:07.000
und dass man angeblich am nächsten Jahr nicht mehr gescheit in China bestellen kann und sowas.

51:07.000 --> 51:09.000
Ich muss schon mal sagen, dass ich schwach bin.

51:09.000 --> 51:12.000
Natürlich kann man in China bestellen, gerade wenn man EU-Priority-Line bestellt,

51:12.000 --> 51:15.000
ist es gar kein Problem.

51:15.000 --> 51:18.000
So, Kengin sagt, benutze auch seit paar Tagen Rider,

51:18.000 --> 51:22.000
ist tausendmal besser als Visual Studio, auch wenn es in Java programmiert ist.

51:22.000 --> 51:24.000
Ja, das ist das einzige, was mir auf den Sack geht,

51:24.000 --> 51:31.000
aber ganz ehrlich, davon merkt man ja nichts.

51:31.000 --> 51:38.000
So, wir müssen mal in den Blog-Eintrag von denen gucken.

51:38.000 --> 51:42.000
CraftQL, weil die haben ein Beispiel drinne für CraftQL 11,

51:42.000 --> 51:48.000
weil das ist erst vor sieben Tagen oder so rausgekommen.

51:48.000 --> 51:51.000
Also, wo steht denn drinne, was wir machen müssen?

51:51.000 --> 51:56.000
New Configuration AP, Services, Add CraftQL Server, Add Query Type.

51:56.000 --> 52:03.000
Exzellent, das machen wir.

52:03.000 --> 52:06.000
Da.

52:06.000 --> 52:09.000
Ich weiß zwar nicht genau, was es macht, aber das machen wir.

52:09.000 --> 52:11.000
Was ist heute das Ziel?

52:11.000 --> 52:13.000
CraftQL ein bisschen ausprobieren.

52:13.000 --> 52:16.000
Ich habe eine Datenbank erstellt mit Fake-Usern und dann fragen wir das ein bisschen ab.

52:16.000 --> 52:18.000
Ich glaube nicht, dass das ewig lang dauern wird,

52:18.000 --> 52:23.000
weil wie gesagt, ich habe das vor einer Weile schon mal verwendet und das war relativ einfach vom Setup her.

52:23.000 --> 52:28.000
Und ich war damals echt begeistert, was Out of the Box für Riesen-Funktualität dabei ist,

52:28.000 --> 52:32.000
ohne dass man Zeug programmieren muss.

52:32.000 --> 52:35.000
Wie gut kennst du dich mit JS-Frameworks aus?

52:35.000 --> 52:38.000
Gar nicht, weil es gibt nahezu unendlich viele JS-Frameworks.

52:38.000 --> 52:43.000
Das heißt, meine Quote des Auskennens ist nahe Null.

52:43.000 --> 52:50.000
Wenn du mich konkret fragst, mit welchem, dann kann ich dir vielleicht was zu sagen.

52:50.000 --> 52:57.000
Aber ansonsten, es vergeht ja nicht einen Tag, wo irgendwelche JS-Frameworks kreiert werden.

52:57.000 --> 52:59.000
Okay, warum geht das hier nicht?

52:59.000 --> 53:01.000
Was hältst du von Ember.js?

53:01.000 --> 53:02.000
Was ist das denn?

53:02.000 --> 53:04.000
Das ist tatsächlich eine gute Frage.

53:04.000 --> 53:10.000
Ich habe Ember mal vor 5 Jahren oder so ewig her verwendet.

53:10.000 --> 53:13.000
Da war das noch relativ oder noch länger.

53:13.000 --> 53:15.000
Das muss noch länger her sein.

53:15.000 --> 53:17.000
Das war bestimmt 2012 oder 2013.

53:17.000 --> 53:19.000
Das ist ganz, ganz lang her.

53:19.000 --> 53:24.000
Da war das noch ziemlich neu und ihre komische Ember-Data-Geschichte war auch noch nicht da.

53:24.000 --> 53:29.000
Ich fand es extrem wirr und kompliziert.

53:29.000 --> 53:38.000
Dafür habe ich gelesen, dass Ember mittlerweile wohl so ziemlich alles built-in hat, was man braucht.

53:38.000 --> 53:41.000
Ich fand es damals echt wirr und unnötig komplex.

53:41.000 --> 53:44.000
Ich bin damit nicht warm geworden.

53:44.000 --> 53:48.000
Aber Ember ist auch nicht großartig angesagt mehr.

53:48.000 --> 54:00.000
Also wenn du Frontend-Frameworks sucht, es gibt eigentlich nur 3 Frontend-Frameworks, die so allgemein angesagt sind zurzeit.

54:00.000 --> 54:03.000
Das ist Angular, React und Vue.js.

54:03.000 --> 54:13.000
Es gibt noch 1.000 Milliarden andere JavaScript-Libraries, aber das sind halt die 3, die angesagt sind.

54:13.000 --> 54:17.000
Schon auch die letzten paar Jahre.

54:17.000 --> 54:19.000
Sorry für die Random-Frage. Warum?

54:19.000 --> 54:21.000
Random-Frage ist das Beste.

54:21.000 --> 54:26.000
Sorry für die Random-Frage, weil wie gesagt, ewig dauert das heute auch nicht mit dem GraphQL-Auspringen.

54:26.000 --> 54:29.000
Sorry für die Random-Frage. Heute kam mein Node-MCU.

54:29.000 --> 54:34.000
Oh, das ist schon mal ein Fehler. Du hast nur eine bestellt. Wenn du das nämlich kaputt machst, dann ist das Ding erst mal im Arsch.

54:34.000 --> 54:37.000
Deswegen bestelle ich immer mindestens 3-bar solche Sachen.

54:37.000 --> 54:41.000
Heute kam meine erste Node-MCU und ich will das Teil mit der Arduino...

54:41.000 --> 54:43.000
Würde ich nicht machen, würde ich nicht machen.

54:43.000 --> 54:45.000
Arduino IDE suckt.

54:45.000 --> 54:50.000
Das Programm soll sich die 3-bar von GitHub ziehen, aber das ist unfassbar.

54:50.000 --> 54:54.000
Ja, ich habe einen Tipp. Verwende Platform.io.

54:54.000 --> 54:56.000
Verwende das hier.

54:56.000 --> 55:01.000
Die Arduino IDE suckt einfach so extrem.

55:01.000 --> 55:04.000
Arduino IDE ist monarch-s-extrem.

55:04.000 --> 55:10.000
Das Ding hat keine Code-Completion. Ist total wirt zu bedienen.

55:10.000 --> 55:12.000
Nehm das hier.

55:12.000 --> 55:14.000
Ist einfacher als Arduino IDE.

55:14.000 --> 55:16.000
Und funktioniert mit Visual Studio Code.

55:16.000 --> 55:20.000
Hat alles, was du so brauchst. Nehm das hier.

55:20.000 --> 55:31.000
Und er hat einen Library Manager eingebaut.

55:31.000 --> 55:34.000
Oh, jetzt wird es advanced. Ja, da kann ich dir was zu sagen.

55:34.000 --> 55:52.000
Sobald ich weiß, nur die ref countet, weil die schreiben auch in ihrer Doku an allen Stellen, dass es zwei Möglichkeiten gibt, das Ganze anzulegen.

55:52.000 --> 56:04.000
Entweder mit eigenem Buffer oder beim Reinschreiben in das Package, dann automatisch erstellen.

56:04.000 --> 56:07.000
Und wenn du automatisch erstellst einen Buffer machst, dann musst du es unreffen.

56:07.000 --> 56:11.000
Nur wenn der reference-counter auf Null fällt, wird es automatisch aufkommen.

56:11.000 --> 56:18.000
Wenn du einen eigenen Buffer hast, bin ich mir relativ sicher, musst du das von Hand freen.

56:18.000 --> 56:22.000
Ich habe das noch nicht ausprobiert, aber ich bin mir da zu 900% sicher.

56:22.000 --> 56:29.000
Weil da schreiben die auch überall, dass man sich ja selbst darum kümmern muss.

56:29.000 --> 56:34.000
Außerdem gibt dir Unref gar nicht wirklich frei.

56:34.000 --> 56:44.000
Und dein manuell allocateden zu reference-counten wird schwierig, weil der ist ja nicht intern bei denen erstellt.

56:44.000 --> 56:54.000
Die manuell erstellten Buffer gibst du mit dem frei, was du benutzt hast zum Anlegen.

56:54.000 --> 56:59.000
Also wenn du New verwendet hast, weil es C++ ist, dann machst du Delete.

56:59.000 --> 57:03.000
Wenn du Malloc verwendet hast, dann machst du einen Free.

57:03.000 --> 57:06.000
Und wenn du etwas anderes verwendet hast, dann machst du es damit.

57:06.000 --> 57:08.000
Also wie gesagt, es gibt eigentlich so die zwei Sachen.

57:08.000 --> 57:13.000
Wenn es C++ ist mit New, dann machst du Delete und ansonsten machst du Free.

57:13.000 --> 57:16.000
Man kann wahrscheinlich beides mit beidem machen, ehrlich gesagt.

57:16.000 --> 57:19.000
Aber es ist C++ und C++, da weiß man nie so genau.

57:19.000 --> 57:23.000
Vor allem bei C++ weiß man nie so genau, was da passiert.

57:23.000 --> 57:41.000
Aber du musst dann am Ende, glaube ich, AV-Free oder Package-Free machen, wenn es nicht reference-counted ist.

57:41.000 --> 57:43.000
Bin ich mir jetzt aber nicht ganz sicher.

57:43.000 --> 57:46.000
Übrigens, fall nicht in die gleiche Falle wie ich.

57:46.000 --> 57:53.000
Es gibt nämlich AV-Package-Free und es gibt, pass mal auf, das ist total Fail.

57:53.000 --> 58:02.000
Package-Free, es gibt AV-Package-Free und AV-Free-Package.

58:02.000 --> 58:07.000
So.

58:07.000 --> 58:10.000
Also wer sich das ausgedacht hat, weiß ich auch nicht.

58:10.000 --> 58:17.000
Aber du musst AV-Package-Free verwenden und nicht AV-Free-Package.

58:17.000 --> 58:28.000
Alles klar?

58:28.000 --> 58:30.000
Will den AV-Frame selber behalten?

58:30.000 --> 58:32.000
Ach du hast den Decode-Stun.

58:32.000 --> 58:33.000
Ja gut, das macht ja nichts.

58:33.000 --> 58:45.000
Also der Buffer vom Package ist unabhängig von dem Buffer vom Frame.

58:45.000 --> 58:49.000
Ach so, da müsste ich jetzt im Detail gucken.

58:49.000 --> 58:55.000
Der AV-Frame ist ja das Decodete dann.

58:55.000 --> 59:04.000
AV-Package ist ja das komprimierte Bild und AV-Frame ist ja quasi das Decodete.

59:04.000 --> 59:06.000
Oder?

59:06.000 --> 59:11.000
Bin ich jetzt durch oder war es umgedreht?

59:11.000 --> 59:15.000
Nee, nee, ich glaube so war es.

59:15.000 --> 59:20.000
So, also warum kann ich jetzt hier kein GraphQL Server adden?

59:20.000 --> 59:25.000
Ah, ich weiß warum, weil ich noch glaub das ASP-Package hinzufügen muss.

59:25.000 --> 59:30.000
Exzellent.

59:30.000 --> 59:32.000
Jetzt geht's, sehr gut.

59:32.000 --> 59:36.000
Create QueryType, machen wir hier irgendwie Data.

59:36.000 --> 59:37.000
Neuer Ordner.

59:37.000 --> 59:41.000
Nein, nein, nicht neues File.

59:41.000 --> 59:46.000
Das Exzellent war richtig ASMR.

59:46.000 --> 59:55.000
Das war nicht beabsichtigt, aber ich bin ja immer froh, wenn ich dem Stream neue Facetten

59:55.000 --> 01:00:01.000
abgewinnen kann und dann war das halt ein ASMR Exzellent.

01:00:01.000 --> 01:00:06.000
So, jetzt müssen wir GraphQL Ordner anlegen.

01:00:06.000 --> 01:00:10.000
Und da machen wir jetzt eine Klasse drin, die sich Query nennt.

01:00:10.000 --> 01:00:14.000
Query, Query heißt es ja.

01:00:14.000 --> 01:00:19.000
So, gut und jetzt muss ich in das Beispiel gucken von denen.

01:00:19.000 --> 01:00:20.000
Oder?

01:00:20.000 --> 01:00:24.000
Nee, nein, du sollst Mines included.

01:00:24.000 --> 01:00:26.000
Ja, so.

01:00:26.000 --> 01:00:30.000
Jetzt muss ich nämlich nochmal in den Blog Eintrag von denen gucken.

01:00:30.000 --> 01:00:35.000
Also falls du noch Fragen hast hier, ich weiß nicht mehr genau wer es gewesen ist mit

01:00:35.000 --> 01:00:38.000
Platform HIO oder so, schieß los, wie gesagt.

01:00:38.000 --> 01:00:41.000
Oder du kannst doch mal im Stream Archiv gucken, wir haben ein paar Mal Microcontroller

01:00:41.000 --> 01:00:43.000
Zeug schon programmiert mit Platform HIO.

01:00:43.000 --> 01:00:45.000
Aber Platform HIO ist relativ einfach.

01:00:45.000 --> 01:00:51.000
Du installierst Visual Studio Code und die Platform HIO Extension und das war's.

01:00:51.000 --> 01:00:53.000
Der Rest ist dann recht selbst erklären.

01:00:53.000 --> 01:01:00.000
So, ich muss in den Blog Eintrag gucken, wie das jetzt weitergeht.

01:01:00.000 --> 01:01:03.000
Also add GraphQL Server, Query.

01:01:03.000 --> 01:01:13.000
Was ist das?

01:01:13.000 --> 01:01:19.000
Da hat eine Agar IOU zu viel gespielt.

01:01:19.000 --> 01:01:22.000
Nee, warte mal, Agar IOU war das mit den Punkten.

01:01:22.000 --> 01:01:25.000
Wie hieß das IOU Game mit den Schlangen?

01:01:25.000 --> 01:01:29.000
Slither IOU, genau, Slither IOU hat da zu viel gespielt.

01:01:29.000 --> 01:01:32.000
Nee, das Copy Paste ich nicht, ich lasse das erstmal so wie es ist.

01:01:32.000 --> 01:01:34.000
Genau, das hier habe ich gesucht.

01:01:34.000 --> 01:01:40.000
Wie kann man denn den ganzen Kram jetzt Endpoints Map GraphQL?

01:01:40.000 --> 01:01:45.000
Genau, das brauchen wir.

01:01:45.000 --> 01:01:47.000
Endpoints Map GraphQL.

01:01:47.000 --> 01:01:57.000
So, und wenn ich jetzt alles richtig gemacht habe, sollte ich jetzt die Testseite von denen sehen.

01:01:57.000 --> 01:02:00.000
Probieren wir das mal aus.

01:02:00.000 --> 01:02:05.000
5.000 GraphQL.

01:02:05.000 --> 01:02:10.000
Oh, guck mal, Banana Cake Pop.

01:02:10.000 --> 01:02:17.000
Gut, wir haben Banana Cake Pop am Start, da bin ich ja froh jetzt.

01:02:17.000 --> 01:02:21.000
Oh, failed, failed, aber okay, die Testumgebung geht zumindest schon mal.

01:02:21.000 --> 01:02:26.000
Aber auch wenn sie failed, failed, failed ist, okay, failed, failed, failed.

01:02:26.000 --> 01:02:36.000
Fetching Schema, failed, failed.

01:02:36.000 --> 01:02:46.000
So, ich glaube, man muss mir nämlich noch hier angeben, was man machen will.

01:02:46.000 --> 01:02:59.000
Gibt es da irgendwie noch ein bisschen Beispiel Code für MonkaS?

01:02:59.000 --> 01:03:06.000
Eye Query muss ich machen.

01:03:06.000 --> 01:03:09.000
Tja, Moment, ich gucke mir das mal aus dem anderen Projekt kurz ab.

01:03:09.000 --> 01:03:13.000
Easy, was wir da gemacht haben.

01:03:13.000 --> 01:03:20.000
Guck mal her, Data, GraphQL, Query.

01:03:20.000 --> 01:03:26.000
Wir haben da sowas gemacht, guck mal.

01:03:26.000 --> 01:03:35.000
Die Mucke ist glaube ich nein, das ist London Farm, ist das London Farm oder ist das?

01:03:35.000 --> 01:03:37.000
Ach nee, ist Kakariko Village, nicht London Farm.

01:03:37.000 --> 01:03:43.000
Das ist ja aus irgendeinem Zeller.

01:03:43.000 --> 01:03:53.000
Das hier, Customer, User.

01:03:53.000 --> 01:04:08.000
Jetzt brauche ich Zugriff auf meinen DB Kontext, geht das denn jetzt so?

01:04:08.000 --> 01:04:12.000
Wie ist das?

01:04:12.000 --> 01:04:15.000
Ja, included müssen wir da nichts.

01:04:15.000 --> 01:04:18.000
So, gucke ob das jetzt Funst, was ich da gemacht habe.

01:04:18.000 --> 01:04:20.000
Was ist deine Meinung zu Visual Studio Code?

01:04:20.000 --> 01:04:26.000
Der beste von den ganzen JavaScript Editors ist es.

01:04:26.000 --> 01:04:28.000
Das funktioniert nicht, irgendwas hat sich geändert.

01:04:28.000 --> 01:04:32.000
Seit der letzten Version, wo ich das verändert habe.

01:04:32.000 --> 01:04:35.000
Die Playlist, das ist hier.

01:04:35.000 --> 01:04:44.000
Come and Happy Nintendo Games Music to start the day.

01:04:44.000 --> 01:04:57.000
Warum geht denn das jetzt nicht? Ich habe das eins zu eins aus was Funktionierenden kopiert.

01:04:57.000 --> 01:05:03.000
Die wollen mich rollen, Alter.

01:05:03.000 --> 01:05:08.000
Hat der Probleme mit dem Entchecken von dem DB Kontext irgendwie?

01:05:08.000 --> 01:05:16.000
Moment.

01:05:16.000 --> 01:05:20.000
Die müssen auch noch einen Example für haben.

01:05:20.000 --> 01:05:23.000
Was soll denn das hier? Moment.

01:05:23.000 --> 01:05:26.000
Docs getting started.

01:05:26.000 --> 01:05:34.000
Eye Queryable ein.

01:05:34.000 --> 01:05:38.000
Schau mal mit einem Neustart probieren. Stopp, das wird es nicht sein.

01:05:38.000 --> 01:05:44.000
AP Reference gibt es nicht.

01:05:44.000 --> 01:05:59.000
Ah.

01:05:59.000 --> 01:06:03.000
Was wollen die hier? Ich brauche Beispiel Code Leute, ich brauche Beispiel Code.

01:06:03.000 --> 01:06:06.000
Die haben doch bestimmt einen Example.

01:06:06.000 --> 01:06:11.000
Sample Projects.

01:06:11.000 --> 01:06:13.000
Examples.

01:06:13.000 --> 01:06:15.000
Workshop.

01:06:15.000 --> 01:06:18.000
Source.

01:06:18.000 --> 01:06:20.000
Chocolate.

01:06:20.000 --> 01:06:23.000
Refql Workshop, das klingt gut.

01:06:23.000 --> 01:06:25.000
Code.

01:06:25.000 --> 01:06:27.000
Session 8.

01:06:27.000 --> 01:06:29.000
Alter jetzt.

01:06:29.000 --> 01:06:32.000
Jetzt übertreibt.

01:06:32.000 --> 01:06:37.000
Jetzt übertreibt man nicht mit Beispiel Code. Ich will einfach nur irgendwie.

01:06:37.000 --> 01:06:44.000
Sehen, wie man das anlegt.

01:06:44.000 --> 01:06:48.000
WTF.

01:06:48.000 --> 01:06:52.000
Ja, übertreibt es halt mit Beispiel Code.

01:06:52.000 --> 01:07:00.000
Moment, was ist das?

01:07:00.000 --> 01:07:05.000
Das ist mir zu Big Brain.

01:07:05.000 --> 01:07:08.000
Ah, guck mal hier, die injecten sich da irgendwas.

01:07:08.000 --> 01:07:11.000
Ok, ich habe.

01:07:11.000 --> 01:07:14.000
WTF haben die denn da gemacht?

01:07:14.000 --> 01:07:17.000
Das war total easy in der letzten Version, wo ich das verwendet habe.

01:07:17.000 --> 01:07:21.000
Du hast den DB Kontext inject und kannst das Ding verwenden.

01:07:21.000 --> 01:07:25.000
What the hell, was ist das?

01:07:25.000 --> 01:07:28.000
Das ist Hyper Big Brain C Sharp Code.

01:07:28.000 --> 01:07:31.000
Ich Copy Paste mir das mal kurz rein.

01:07:31.000 --> 01:07:36.000
Ok, Use Application Kontext kann ich schon mal gar nicht injecten.

01:07:36.000 --> 01:07:38.000
WTF, was ist das?

01:07:38.000 --> 01:07:40.000
Ich kriege Anfälle.

01:07:40.000 --> 01:07:46.000
Ok, also.

01:07:46.000 --> 01:07:51.000
Ok, wir wollen Users.

01:07:51.000 --> 01:07:56.000
Achtung.

01:07:56.000 --> 01:08:00.000
Ich bastel jetzt einfach irgendwas zusammen, von dem ich denke, dass das funktioniert.

01:08:00.000 --> 01:08:03.000
Nein, Constructor Injection funktioniert nicht.

01:08:03.000 --> 01:08:06.000
Constructor Injection ist irgendwie kaputt.

01:08:06.000 --> 01:08:10.000
Vielleicht habe ich was nicht registriert oder so.

01:08:10.000 --> 01:08:13.000
Constructor Injection mag nicht.

01:08:13.000 --> 01:08:16.000
Ok, ok, ok.

01:08:16.000 --> 01:08:18.000
So, und jetzt?

01:08:18.000 --> 01:08:30.000
Ach so, Service.

01:08:30.000 --> 01:08:33.000
Ok.

01:08:33.000 --> 01:08:35.000
Ha, mal gucken, ob das jetzt geht.

01:08:35.000 --> 01:08:48.000
Warte mal ab.

01:08:48.000 --> 01:08:50.000
Easy, Bam.

01:08:50.000 --> 01:08:58.000
Ich weiß zwar nicht, was zum Teufel ich da jetzt genau gemacht habe, aber es geht.

01:08:58.000 --> 01:09:03.000
Wie wir alle wissen, sobald es kompiliert ist es ja prinzipiell in Ordnung.

01:09:03.000 --> 01:09:05.000
Da kann es ja keine Fehler mehr geben danach.

01:09:05.000 --> 01:09:09.000
Ok, sehr schön.

01:09:09.000 --> 01:09:16.000
Also, ich weiß, was ich gemacht habe, aber ich habe keine Ahnung, warum es jetzt funktioniert

01:09:16.000 --> 01:09:21.000
und das andere vorher nicht funktioniert hat.

01:09:21.000 --> 01:09:23.000
Gut, es funktioniert.

01:09:23.000 --> 01:09:24.000
Ich bin zufrieden, alles klar.

01:09:24.000 --> 01:09:27.000
So, und jetzt kann ich euch mal was richtig Geiles von CraftQL zeigen.

01:09:27.000 --> 01:09:31.000
Zumindest, was mich das letzte Mal übelst beeindruckt hat, dass das mit drei Zeilen

01:09:31.000 --> 01:09:33.000
config out of the box drin ist.

01:09:33.000 --> 01:09:41.000
Und zwar im Vergleich zu den normalen Rest-API, wo man dann abfragen kann, index, push, get,

01:09:41.000 --> 01:09:54.000
ne, ich fasse hier nicht index, index, update, delete, und was gibt es noch?

01:09:54.000 --> 01:10:05.000
Index, update, delete, update, ne, index, delete, index, delete, update, putt, putt gibt es

01:10:05.000 --> 01:10:06.000
glaube ich noch.

01:10:06.000 --> 01:10:07.000
Schöne, was ich gehabt habe.

01:10:07.000 --> 01:10:08.000
Das habe ich noch vergessen.

01:10:08.000 --> 01:10:13.000
Na ja, egal.

01:10:13.000 --> 01:10:22.000
Zumindest, wenn man mit einer Rest-API auf einzelnen Ressourcen, ganz gut arbeiten kann,

01:10:22.000 --> 01:10:24.000
ist CraftQL deine Nummer advanceder.

01:10:24.000 --> 01:10:26.000
Und zwar, was richtig geil ist.

01:10:26.000 --> 01:10:32.000
Ich habe ihm jetzt ja gesagt, okay, wenn, oder ich habe ihm ja hier quasi gesagt, was

01:10:32.000 --> 01:10:33.000
man abfragen kann.

01:10:33.000 --> 01:10:36.000
Aktuell gibt es ja nur eine User Collection, die ich abfragen kann.

01:10:36.000 --> 01:10:42.000
Aber, wenn ich jetzt neu bin, oder zum ersten Mal hier quasi diese CraftQL-Sache aufmachen,

01:10:42.000 --> 01:10:49.000
kann ich hier unten auf Schema gehen, und da zeigt mir an, was ich alles abfragen kann.

01:10:49.000 --> 01:10:54.000
Also, so ein bisschen wie so eine eingebaute API-Doku.

01:10:54.000 --> 01:10:59.000
Könntest du mal zeigen, wie man eine Applikation mit einem Active Directory oder ähnlichem anbinden

01:10:59.000 --> 01:11:00.000
kann?

01:11:00.000 --> 01:11:01.000
Nein, habe ich noch nie gemacht.

01:11:01.000 --> 01:11:05.000
Also, mich da zeigt einem an, was man jetzt hier abfragen kann.

01:11:05.000 --> 01:11:10.000
So ein bisschen wie diese Swagger-Geschichte, die wir uns am Anfang angeguckt haben.

01:11:10.000 --> 01:11:13.000
Aber, und jetzt wird es advanced.

01:11:13.000 --> 01:11:15.000
Ich habe sogar autocomplete.

01:11:15.000 --> 01:11:19.000
Ich habe autocomplete für meine Queries.

01:11:19.000 --> 01:11:22.000
Also, ich will Sachen abfragen.

01:11:22.000 --> 01:11:25.000
Und zwar, ich habe zur Auswahl.

01:11:25.000 --> 01:11:28.000
Okay, ich habe nur Users zur Auswahl, aber ich habe autocomplete.

01:11:28.000 --> 01:11:33.000
Ist das nicht ein schöner Baukasten für Abfragen zusammenbauen?

01:11:33.000 --> 01:11:41.000
So, ich will Users abfragen, und von Users möchte ich abfragen, ne, falsch gemacht,

01:11:41.000 --> 01:11:44.000
geht es so.

01:11:44.000 --> 01:11:45.000
Genau.

01:11:45.000 --> 01:11:50.000
So, und von Users will ich abfragen.

01:11:50.000 --> 01:11:54.000
Also, der sagt mir sogar, was ich abfragen kann vom User.

01:11:54.000 --> 01:11:57.000
Adresse, ID, Mail, Name, Phone.

01:11:57.000 --> 01:12:07.000
Ich nehme alles, also ich will Adresse abfragen, na, ID, ID, okay, Mail, Name und Phone.

01:12:07.000 --> 01:12:13.000
So, und jetzt führe ich das Query aus, und zack, da sind alle meine User.

01:12:13.000 --> 01:12:18.000
Das ist mal easy as fuck im Vergleich zu einer Rest-API.

01:12:18.000 --> 01:12:21.000
Okay, dieser Schritt ist bei einer Rest-API auch einfach.

01:12:21.000 --> 01:12:27.000
Bei einer Rest-API sagst du einfach Index auf die Ressource und da kriegst du auch sowas in der Richtung wieder.

01:12:27.000 --> 01:12:33.000
Aber, was richtig nice ist, man kann jetzt, und das muss ich aber erstmal hinzufügen,

01:12:33.000 --> 01:12:37.000
also das erste, was jetzt schon mal richtig nice ist an der Geschichte ist,

01:12:37.000 --> 01:12:39.000
ich kann Sachen weglassen.

01:12:39.000 --> 01:12:43.000
Also sprich, wenn ich irgendwas nicht brauche, mal angenommen,

01:12:43.000 --> 01:12:50.000
ich brauche nur die Mail von den Usern, da lasse ich alles andere weg und ich krieg auch nur die Mail.

01:12:50.000 --> 01:12:52.000
Was das Ganze natürlich viel schneller macht.

01:12:56.000 --> 01:13:03.000
Datenjoin kann ich nicht so richtig, ich kann nur, wenn mein User-Typ, also bisschen geht das,

01:13:03.000 --> 01:13:11.000
wenn mein User-Typ, beispielsweise noch einen, sagt man mal irgendwas für einen User,

01:13:11.000 --> 01:13:14.000
was brauchen einen User als extra Klasse hier.

01:13:14.000 --> 01:13:20.000
Das ist quasi so eine Art SQL für API-Abfragen, ja.

01:13:20.000 --> 01:13:22.000
Ups, was mache ich denn hier?

01:13:22.000 --> 01:13:25.000
Hast du dich mit dem Inventar-Programm noch weiter auseinandergesetzt?

01:13:25.000 --> 01:13:29.000
Ja, ich habe jetzt Snipe bei mir daheim laufen und probiere das erstmal aus.

01:13:29.000 --> 01:13:33.000
Snipe it, Snipe it. All Posts, Posts oder Standards, Standards Zeug.

01:13:33.000 --> 01:13:44.000
Cute Points hat der User und die hat eigentlich bloß hier Count.

01:13:44.000 --> 01:13:46.000
Ah nee, Int.

01:13:53.000 --> 01:13:57.000
Also, so der User hat noch Cute Points, das ist ganz wichtig, das brauchen wir unbedingt.

01:13:57.000 --> 01:14:02.000
Und, ähm, ich überlege gerade, ob das überhaupt funktioniert.

01:14:06.000 --> 01:14:12.000
So, und die kann ich jetzt abfragen, über CraftQL.

01:14:14.000 --> 01:14:18.000
Das wird erstmal, wie geht das hier, na, da, japp.

01:14:18.000 --> 01:14:21.000
So, und jetzt kann ich hier sagen, ok, Cute Points.

01:14:21.000 --> 01:14:24.000
Und jetzt kann man Cute Points zusätzlich noch abfragen.

01:14:24.000 --> 01:14:28.000
So als Unterding von Users.

01:14:28.000 --> 01:14:30.000
Und da kann ich jetzt den Count noch mit abfragen.

01:14:30.000 --> 01:14:33.000
Aber, und das Coole ist, das behält auch hier, oh nee.

01:14:33.000 --> 01:14:35.000
Oh, hab ich verkehrt gemacht.

01:14:39.000 --> 01:14:42.000
Ah, ich weiß, was ich verkehrt gemacht habe.

01:14:42.000 --> 01:14:44.000
Cute Points wird nie gesetzt.

01:14:44.000 --> 01:14:46.000
Ok.

01:14:46.000 --> 01:14:50.000
Äh, wir lassen das jetzt mal aus, weil da müsste ich in die Datenbank jetzt noch Cute Points hinzufügen.

01:14:50.000 --> 01:14:55.000
Wobei, nee, wir können einfach sagen, gleich, new, geht das, new, Cute Points.

01:14:58.000 --> 01:15:01.000
Das, muss mal ausprobieren, ob das jetzt funktioniert.

01:15:04.000 --> 01:15:06.000
Verneuladen.

01:15:09.000 --> 01:15:10.000
Ne.

01:15:10.000 --> 01:15:12.000
Ok.

01:15:12.000 --> 01:15:14.000
Äh, er mag das nicht.

01:15:14.000 --> 01:15:18.000
Es ist ja auch kein Feld aus der Datenbank, was er abfragen kann.

01:15:18.000 --> 01:15:20.000
Na gut.

01:15:20.000 --> 01:15:23.000
Wenn er es nicht mag, dann mag er es nicht.

01:15:23.000 --> 01:15:26.000
Ich will jetzt die Datenbank nicht nochmal anpassen, dass es funktioniert.

01:15:26.000 --> 01:15:29.000
Was hat er denn für Schmerzen, woran stört er sich dann?

01:15:29.000 --> 01:15:32.000
Unexpected Execution Error.

01:15:32.000 --> 01:15:36.000
Der kann den Kram irgendwie nicht richtig serialisieren, vermute ich mal.

01:15:36.000 --> 01:15:39.000
Warum auch immer.

01:15:42.000 --> 01:15:45.000
Aber du so richtig joinen kannst du nix.

01:15:45.000 --> 01:15:52.000
Also du kannst nicht sagen, hier aus fünf Tabellen und dann, wo Key der gleiche ist und sowas.

01:15:52.000 --> 01:15:53.000
Du kannst aber filtern.

01:15:53.000 --> 01:15:55.000
Das ist jetzt das, was ich eigentlich zeigen wollte.

01:15:55.000 --> 01:16:01.000
Also das erste coole Feature ist ja schonmal, dass man Sachen weglassen kann, wenn man was abfragt.

01:16:01.000 --> 01:16:03.000
Oh.

01:16:03.000 --> 01:16:10.000
Ich glaube, ich habe meinen User Typ kaputt gemacht, dadurch, dass ich Cute Points hinzugefügt habe.

01:16:10.000 --> 01:16:12.000
Ok.

01:16:12.000 --> 01:16:15.000
Mag er wohl nicht.

01:16:15.000 --> 01:16:21.000
Cute Points Outdate Overrated Debated.

01:16:21.000 --> 01:16:24.000
Darf ich jetzt wieder?

01:16:24.000 --> 01:16:25.000
Ah, jetzt darf ich wieder, ok.

01:16:25.000 --> 01:16:32.000
Also das erste coole ist schonmal, dass man Sachen weglassen kann, wenn man was abfragt.

01:16:32.000 --> 01:16:39.000
Das erste coole ist schonmal, ich habe die Autocompletion verwendet.

01:16:39.000 --> 01:16:42.000
Also sprich, das ist schon richtig.

01:16:42.000 --> 01:16:50.000
Der macht wahrscheinlich automatisch den ersten Buchstaben klein, weil das JavaScript Convention ist.

01:16:50.000 --> 01:16:59.000
Aber das erste coole ist schonmal, dass ich Daten sparen kann und generell die Größe auch von den Sachen, die ich abfrage, indem ich nur das abfrage, was ich abfragen will.

01:16:59.000 --> 01:17:01.000
Das ist schonmal ganz praktisch.

01:17:01.000 --> 01:17:12.000
Aber was richtig cool ist, und was wir auch in diesem einen Projekt verwendet haben, ist, man kann total einfach, und das ist wirklich absolut ätzend mit Rest zu machen, man kann sortieren und filtern.

01:17:12.000 --> 01:17:15.000
Und das Ganze total einfach.

01:17:15.000 --> 01:17:22.000
Man kann nämlich einfach sagen, du musst bloß mal gucken, was ich hinzufügen muss dafür, Use Filter oder irgendwie sowas.

01:17:22.000 --> 01:17:31.000
Aber dazu muss ich erstmal etwas hinzufügen, Hot Chocolate Filter, Type Filters.

01:17:31.000 --> 01:17:36.000
Was war das, was haben wir da zur Auswahl, vielleicht kommt mir irgendwas bekannt vor.

01:17:36.000 --> 01:17:39.000
Runtime, Typ, Selections, Data.

01:17:39.000 --> 01:17:47.000
Ich glaube, ich glaube es war das hier, was man hinzufügen muss.

01:17:47.000 --> 01:17:53.000
Ist der Rechenaufwand für den Server dadurch gewaltig größer? Nee, das funktioniert ziemlich gut.

01:17:53.000 --> 01:17:59.000
Das funktioniert ziemlich gut. Use Filter. Use Filtering, genau, Use Filtering war es.

01:17:59.000 --> 01:18:10.000
So, und mehr muss ich nicht machen, um jetzt richtig gut filtern zu können beim Abfragen.

01:18:10.000 --> 01:18:15.000
Also wer schonmal versucht hat, solche Filter-Sachen über Rest zu machen, das ist wirklich eklig.

01:18:15.000 --> 01:18:22.000
Du musst zig Parameter übergeben, eventuell noch irgendwelche Paging-Geschichten machen.

01:18:22.000 --> 01:18:28.000
Dann musst du teilweise noch sortieren, aufsteigen, absteigen, mit der Suche und so. Es ist absolut eklig.

01:18:28.000 --> 01:18:37.000
Und das hier ist eigentlich das hier richtig cool gemacht.

01:18:37.000 --> 01:18:39.000
SQL in Query Parameter. Oh, das ist auch Big Brain.

01:18:39.000 --> 01:18:48.000
So, wir fragen jetzt noch mal alles ab, alle Sachen von unserem User-ID. Was heißt der Name? Adresse? Phone? Mail?

01:18:48.000 --> 01:18:56.000
Und jetzt kann man suchen. What the hell?

01:18:56.000 --> 01:19:01.000
Ah, ich habe glaube ich noch vergessen, das hinzuzufügen. Man muss eben noch sagen, dass man filtern, filtern will.

01:19:01.000 --> 01:19:09.000
Filter, Add Filter, genau, so, jetzt geht's.

01:19:09.000 --> 01:19:19.000
Komm ich mal, so. Bam, so. Und jetzt, da ist die Syntax aber ein bisschen, da ist mein Brain zu klein.

01:19:19.000 --> 01:19:21.000
Ich glaube die Syntax kriege ich nicht gescheit gebacken.

01:19:21.000 --> 01:19:28.000
Also man konnte jetzt hier sagen, Where? Direkt eingebaut, Where? Und jetzt verlassen wir uns mal auf die Autocompletion.

01:19:28.000 --> 01:19:41.000
Uh, Where? Okay, sagen wir mal, Mail? Wir wollen jetzt, okay, also, irgendjemand zu uns sagt, hey, wir wollen das so filtern, dass jetzt nur Gmail,

01:19:41.000 --> 01:19:50.000
dass nur User mit Gmail-Adresse ausgegeben werden. So, und das ist schon mit Rest ein bisschen größerer Akt.

01:19:50.000 --> 01:19:56.000
Du musst dann erstmal einen Filter, okay, ein Parameter mit Rest noch, aber es ist auf jeden Fall nicht schön.

01:19:56.000 --> 01:20:02.000
Du musst dann erstmal einen Parameter übergeben, dann musst du es auf deine Datenbank holen, musst das Ganze filtern,

01:20:02.000 --> 01:20:10.000
musst dann auch gucken, ob vielleicht irgendwie im Frontend Option gesetzt ist für aufsteigen, absteigen und das dann in die richtige Reihenfolge filtern und was auch immer.

01:20:10.000 --> 01:20:13.000
Das brauche ich hier alles nicht, das ist alles schon eingebaut.

01:20:13.000 --> 01:20:19.000
Ich kann zum Beispiel jetzt sagen, also, Where? User? Mail? Ich glaube jetzt muss man wieder einen Doppelpunkt machen.

01:20:19.000 --> 01:20:35.000
Und dann kann man sagen, äh, ja, ich bin zu Low-Brain für die Filter, aber irgendwie so ging das.

01:20:35.000 --> 01:20:43.000
Was hat denn der für Schmerzen? Where? Vielleicht muss ich erstmal refreshen. Ah, jetzt funktioniert es.

01:20:43.000 --> 01:21:00.000
Ah, jetzt kann ich nämlich auch, also, jetzt kann ich nämlich sagen, also, ich will nur den User haben, wo die Mail, wo die Mail, äh, endet mit, endet mit, ähm, wie macht man das jetzt so?

01:21:00.000 --> 01:21:16.000
Gmail.com. Nee, ohne. So, und jetzt kriege ich nur User, die mit Gmail.com enden, E-Mail-Adressen. Guck mal, das ist easy as fuck, das ist übelst geil.

01:21:16.000 --> 01:21:33.000
So, und warum ich mir das jetzt Ganze angucke, ähm, also ich finde schon, gerade wenn du mehrere Sachen filtern willst, finde ich, ist das mit Rest eklig.

01:21:33.000 --> 01:21:50.000
Du musst dich Parameter übergeben, du musst das, vor allem musst du die Suche und das Filtern selbst machen. Du musst dich um Sachen kümmern, wie ob es aufsteigen oder absteigend ist.

01:21:50.000 --> 01:22:08.000
Dann auch eventuelle Filterlogik selbst machen, hier hast du ja relativ viel eingebaut. Also mir graust es immer davor, wenn mir irgendein Suchfeld oder so basteln soll mit Rest.

01:22:08.000 --> 01:22:21.000
Ich finde das sehr praktisch hier. So, und das ist wirklich praktisch. Du sagst jetzt einfach, ey, gib mir alle User, wo die E-Mail-Adresse mit Gmail.com aufhört.

01:22:21.000 --> 01:22:31.000
Ich meine, viel einfacher kann das nicht sein. Und was man nicht vergessen darf, wir haben keine einzige Zeile Logik dafür programmieren müssen.

01:22:31.000 --> 01:22:40.000
Wenn ich das jetzt mit einem Controller machen würde über Rest, so, dann müsste ich erstmal einen Controller anlegen, dann müsste ich mir hier irgendwie einen Endpunkt basteln.

01:22:40.000 --> 01:23:01.000
Also irgendwie, was weiß ich, irgendwie einen Endpunkt, den man irgendwie filtert, immer.

01:23:01.000 --> 01:23:12.000
So, dann müsste ich jetzt irgendwie keine Ahnung, was auch immer, nach was kann man da jetzt filtern? Na, keine Ahnung. Name, Mail.

01:23:12.000 --> 01:23:26.000
So, und dann müsste ich quasi hier selbst drinne filtern, dann muss ich erstmal einen Data Context injecten.

01:23:26.000 --> 01:23:44.000
So, Ups, User, Swear, User, Mail, Mail, irgendwie Contains oder sagen wir mal Ends mit dem hier.

01:23:44.000 --> 01:23:52.000
So, das müsst ihr halt alles selbst machen. Also ich finde das viel praktischer. Das brauchen wir alles nicht. Wir brauchen keine eigene Logik und nichts.

01:23:52.000 --> 01:23:59.000
Natürlich, wenn man was komplizierteres machen will, was da nicht drin ist, muss man auch wieder eigene Logik basteln. Na, das ist ja logisch.

01:23:59.000 --> 01:24:10.000
Aber das kann nicht alles sein lassen.

01:24:10.000 --> 01:24:26.000
Man muss ja auch um die Reihenfolge keine Gedanken machen.

01:24:26.000 --> 01:24:43.000
Fuzzy Full Text, oh ja, ist auch toll. Es gibt ja schon ein paar ganz fertige, ein paar ganz gute fertige Frontend Sachen für so Type Ahead Geschichten.

01:24:43.000 --> 01:24:52.000
Aber ich finde es halt im Backend ätzend zu machen. Aber wie gesagt, ich bin ja auch kein großer Web Anwendungsprofi.

01:24:52.000 --> 01:25:02.000
Captain Seacast, falls du da schon mehr gemacht hast, vielleicht ist es wirklich easy as fuck mit Rest. Ich finde es halt so einfach angenehmer.

01:25:02.000 --> 01:25:09.000
Und was ich da dran halt cool finde ist, außer diese Sache hier angelegt, mussten wir nichts machen.

01:25:09.000 --> 01:25:17.000
Das ist der einzige Code, den wir dafür basteln mussten. Use Filtering dran schreiben, fertig.

01:25:17.000 --> 01:25:23.000
Ähm, wäre mal interessant, wie performant das Ding mit einer großen DB ist. Das ist ziemlich gut.

01:25:23.000 --> 01:25:34.000
CraftQL wurde von Facebook für ihre Mobile App erfunden, weil die zu lahm war.

01:25:34.000 --> 01:25:39.000
Also das ist schon auch dafür gedacht, dass es ordentlich flutscht.

01:25:39.000 --> 01:25:47.000
Ich habe es aber ehrlich gesagt noch nicht ausprobiert. Also ich habe jetzt noch keine CraftQL-Geschichte gemacht mit Riesen-Datenbank. Aber auf der anderen Seite.

01:25:47.000 --> 01:25:52.000
Ich meine, guckt mal. Wir können ja mal ein bisschen mehr in die Datenbank reinschreiben.

01:25:52.000 --> 01:26:01.000
Und ähm, ja. Wo habe ich denn hier meinen? Ich muss mal kurz. Oh nee, ich habe es nicht mehr drin.

01:26:01.000 --> 01:26:05.000
Aber da ist es doch. Ich wollte gerade sagen, wir können ein cooles Feature von Ryder verwenden.

01:26:05.000 --> 01:26:09.000
Wir haben nämlich History. Wir haben nämlich eine History.

01:26:09.000 --> 01:26:13.000
Wer das noch nicht kennt, muss ich euch mal zeigen. Das ist absolut Poggers, was die eingebaut haben.

01:26:13.000 --> 01:26:18.000
Also, ähm, wir können auch zwei Millionen Daten setzen, aber gar kein Ding.

01:26:18.000 --> 01:26:27.000
Also, ähm, man hat ja in so ziemlich jedem Editor die Möglichkeit zurück, also undo, redo zu machen.

01:26:27.000 --> 01:26:31.000
Aber was die in Ryder eingebaut haben, ist wirklich ganz nice.

01:26:31.000 --> 01:26:38.000
Äh, Local History. Und dann sieht man, ich schiebe es mal kurz rüber auf einen anderen Bildschirm.

01:26:38.000 --> 01:26:40.000
Äh, auf einen anderen Desktop.

01:26:40.000 --> 01:26:45.000
Da siehst du quasi die letzten Tage, Wochen, wie auch immer, wie es eingestellt ist.

01:26:45.000 --> 01:26:57.000
Alle Edits von dem File. Ähnlich zu einem Div in Git. Und das Ganze ohne Versionsverwaltung drunter.

01:26:57.000 --> 01:27:01.000
Das ist wirklich nice. Hat Eclipse auch, ja gut, irgendein Vorteil muss Eclipse ja haben.

01:27:01.000 --> 01:27:05.000
Aber Visual Studio hat es zum Beispiel nicht. Und das ist ein super Feature.

01:27:05.000 --> 01:27:10.000
Was mir persönlich dabei fehlt, ist noch die Möglichkeit, es durchsuchen zu können.

01:27:10.000 --> 01:27:14.000
Man kann das hier zwar durchsuchen, aber man kann nicht alle Sachen durchsuchen.

01:27:14.000 --> 01:27:17.000
Das wäre richtig pro, wenn man das noch durchsuchen könnte.

01:27:17.000 --> 01:27:24.000
Oder vielleicht weiß ich noch nicht, wie es geht, aber ich habe mal gesucht und es gab auch keine, ähm, Antwort da drauf.

01:27:24.000 --> 01:27:27.000
Ich habe ein paar Leute auch als Feature gefragt, aber anscheinend kann man das nicht durchsuchen.

01:27:27.000 --> 01:27:32.000
Man kann nur hier lokal durchsuchen.

01:27:32.000 --> 01:27:36.000
Also die Lokalhistorie ist wirklich praktisch.

01:27:36.000 --> 01:27:40.000
Kannst du da jetzt jede Datenbank dran klatschen?

01:27:40.000 --> 01:27:47.000
Ja, du kannst da theoretisch jede Datenbank dran klatschen, die Entity Framework kann.

01:27:47.000 --> 01:27:49.000
Oder nee, stimmt gar nicht.

01:27:49.000 --> 01:27:56.000
In dem Fall verwende ich jetzt mehr Entity Framework, aber die Collections hier kannst du von alle möglichen zurückgeben.

01:27:56.000 --> 01:28:01.000
Also du kannst das mit jeder x-beliebigen Datenbank verwenden, ja.

01:28:01.000 --> 01:28:07.000
Ich meine, wenn Entity Framework die jeweilige Datenbank unterstützt, ist es halt einfacher.

01:28:07.000 --> 01:28:13.000
Und wahrscheinlich auch eine ganze Ecke performanter, weil die halt nicht einfach nur komplette Antwort und Filtern,

01:28:13.000 --> 01:28:18.000
sondern halt wirklich Datenbank selectmäßig filtern können hiermit.

01:28:18.000 --> 01:28:21.000
Aber prinzipiell kannst du da jede Datenbank dafür verwenden, ja.

01:28:21.000 --> 01:28:25.000
Okay, wir legen noch mal ein bisschen mehr Datensätze an.

01:28:25.000 --> 01:28:30.000
Ich hab doch hier gerade die Sachen rauskopiert.

01:28:30.000 --> 01:28:34.000
Wir machen mal ein bisschen mehr, also.

01:28:34.000 --> 01:28:38.000
Database, okay, wir löschen die Datenbank vorher mal.

01:28:38.000 --> 01:28:43.000
Ich meine, es ist jetzt nur eine SQLite, aber ich finde SQLite ist eh besser als sein Ruf.

01:28:43.000 --> 01:28:49.000
Gerade für so lokale Sachen ist SQLite sehr, sehr zackig.

01:28:49.000 --> 01:28:51.000
So, okay, also wie viele Sachen legen wir mal an?

01:28:51.000 --> 01:28:53.000
Also wir haben jetzt 500 angelegt.

01:28:53.000 --> 01:28:55.000
Was sollen wir, 2 Millionen?

01:28:55.000 --> 01:29:00.000
1, 2, 3, 4, 5, 6, bam.

01:29:00.000 --> 01:29:04.000
Das dauert jetzt kurz.

01:29:04.000 --> 01:29:08.000
Das dauert jetzt ein bisschen.

01:29:08.000 --> 01:29:30.000
Schauen wir mal.

01:29:30.000 --> 01:29:34.000
Ja, okay.

01:29:34.000 --> 01:29:38.000
Der faked jetzt halt ein bisschen, ne?

01:29:38.000 --> 01:29:43.000
Der muss jetzt erst mal 2 Millionen Fake-User erstellen.

01:29:43.000 --> 01:29:52.000
Wie sieht eigentlich unser RAM-Verbrauch so aus?

01:29:52.000 --> 01:29:58.000
Wie sieht eigentlich unser RAM-Verbrauch so aus, zeigt mal her.

01:29:58.000 --> 01:30:03.000
Oh, okay.

01:30:03.000 --> 01:30:05.000
Der braucht viel zu lange, jaja.

01:30:05.000 --> 01:30:07.000
Ich weiß auch nicht, warum der so lange braucht.

01:30:07.000 --> 01:30:09.000
2 Millionen ist normalerweise gar kein Ding.

01:30:09.000 --> 01:30:16.000
Also doch, aber nicht so ein Ding.

01:30:16.000 --> 01:30:20.000
Ich glaube, ich weiß, woran das liegt.

01:30:20.000 --> 01:30:23.000
Ich könnte mir vorstellen, dass dieses Add Range hier nicht sonderlich geschwind ist.

01:30:23.000 --> 01:30:28.000
Das könnte man bestimmt optimierter machen.

01:30:28.000 --> 01:30:32.000
Wobei, ne, das ist okay.

01:30:32.000 --> 01:30:34.000
Ich meine, was wäre die Alternative nach jedem User?

01:30:34.000 --> 01:30:38.000
Saven wäre ja auch der Witz, ne?

01:30:38.000 --> 01:30:41.000
Aber jetzt scheint er zu schreiben in die Datenbank.

01:30:41.000 --> 01:30:46.000
Okay.

01:30:46.000 --> 01:30:50.000
Ja, der ist jetzt fertig generieren.

01:30:50.000 --> 01:31:01.000
Ja, mal gucken, wie groß das Ganze ist.

01:31:01.000 --> 01:31:05.000
Ich meine, 2 Millionen am Anfang erst mal rein ist halt auch ein bisschen was.

01:31:05.000 --> 01:31:07.000
Dann gucken wir mal, wie schnell es ist.

01:31:07.000 --> 01:31:11.000
Okay, dann muss man aber sagen, wenn ich 2 Millionen Einträge habe,

01:31:11.000 --> 01:31:15.000
dann ist aber schon mal keine allzu gute Idee, alles abzufragen.

01:31:15.000 --> 01:31:16.000
Aber das machen wir mal.

01:31:16.000 --> 01:31:27.000
Dann closed sich wahrscheinlich der Browser, weil er out of memory ist.

01:31:27.000 --> 01:31:30.000
Kann Faker multithreading?

01:31:30.000 --> 01:31:33.000
Also anscheinend nicht.

01:31:33.000 --> 01:31:35.000
Ach so, ne, jetzt ist auch der Datenbank write.

01:31:35.000 --> 01:31:44.000
Der Datenbank write in SQLite ist definitiv nicht multithreaded.

01:31:44.000 --> 01:32:00.000
1, 3, 3, 7, ich würde mal sogar vermuten, dass der das mit einer Transaction unter der Haube macht.

01:32:00.000 --> 01:32:09.000
Ich meine, der wird ja wohl nicht hingehen und sagen insert, insert, insert, insert, insert, insert.

01:32:09.000 --> 01:32:14.000
Der macht ja bestimmt nicht 2 Millionen Inserts da jetzt.

01:32:14.000 --> 01:32:15.000
Okay, er ist fertig.

01:32:15.000 --> 01:32:17.000
Excellent.

01:32:17.000 --> 01:32:21.000
Okay, 208 MB Datenbank, das geht ja noch.

01:32:21.000 --> 01:32:24.000
Dann schmeißen wir den Scheiß hier mal wieder raus.

01:32:24.000 --> 01:32:30.000
Mal gucken, ob SQLite Browser jetzt abkackt, wenn ich das aufmache.

01:32:30.000 --> 01:32:31.000
Nicht ohne ich weitermachen.

01:32:31.000 --> 01:32:43.000
Hey guck mal, der ist so macht das richtig.

01:32:43.000 --> 01:32:45.000
Der lädt einfach die Datensätze, die man sieht.

01:32:45.000 --> 01:32:47.000
So muss das sein.

01:32:47.000 --> 01:32:49.000
Okay, wir haben 2 Millionen Sachen drin.

01:32:49.000 --> 01:32:51.000
Sehr gut.

01:32:51.000 --> 01:32:52.000
Excellent.

01:32:52.000 --> 01:32:54.000
Wir haben aber keine Relation Geschichten.

01:32:54.000 --> 01:32:59.000
Also wir haben einfach nur stinknormale Objekte drin ohne irgendwas.

01:32:59.000 --> 01:33:06.000
Ich meine, wir könnten jetzt noch mal ein paar Verknüpfungen einbauen.

01:33:06.000 --> 01:33:13.000
Okay, wir starten jetzt erst einmal und schauen, wie schnell das Ganze ist.

01:33:13.000 --> 01:33:15.000
Mit 2 Millionen Daten setzen.

01:33:15.000 --> 01:33:21.000
Ich kann euch gleich sagen, der Browser wird jetzt erst mal friesen wahrscheinlich, weil ich frag alles ab.

01:33:21.000 --> 01:33:23.000
Ich frag nur die Sachen mit Gmail ab.

01:33:23.000 --> 01:33:28.000
Okay, das ist schon mal ist schon mal nicht so wild.

01:33:28.000 --> 01:33:37.000
Der muss ja wirklich.

01:33:37.000 --> 01:33:39.000
Okay, dadurch sucht jetzt 2 Millionen Datensätze.

01:33:39.000 --> 01:33:42.000
Easy.

01:33:42.000 --> 01:33:46.000
Aber so richtig, der richtig durch greppt das Ganze jetzt.

01:33:46.000 --> 01:33:47.000
Fertig.

01:33:47.000 --> 01:33:49.000
Das ging.

01:33:49.000 --> 01:33:50.000
Das geht.

01:33:50.000 --> 01:33:52.000
Ich meine, der konnte ja noch nicht mal.

01:33:52.000 --> 01:33:57.000
Der hat das wahrscheinlich nicht mal noch nicht mal irgendwie ein Index oder irgendwas da.

01:33:57.000 --> 01:34:00.000
Bringt einem ein Index überhaupt was?

01:34:00.000 --> 01:34:04.000
An der Stelle.

01:34:04.000 --> 01:34:10.000
Meine ends with Operation bringt einem dann ein Index was?

01:34:10.000 --> 01:34:14.000
Ich meine, da müsste ich, ich muss reingehen in jeden Datensatz und gucken.

01:34:14.000 --> 01:34:19.000
Also wozu, wozu ein Index, ja?

01:34:19.000 --> 01:34:24.000
Startet mit könnte den Index was bringen.

01:34:24.000 --> 01:34:34.000
Aber startet mit könnte insofern was bringen, weil, weil wenn es eine sortierte Liste ist,

01:34:34.000 --> 01:34:39.000
dann weiß ich, ab wo ich anfangen muss zu gucken, wenn ich startet mit mache.

01:34:39.000 --> 01:34:46.000
Endet mit nicht, aber startet mit könnte es tatsächlich was bringen.

01:34:46.000 --> 01:34:49.000
Hör mal.

01:34:49.000 --> 01:34:55.000
Alter, die Yoshi Musik, guck mal, schon fertig das Query.

01:34:55.000 --> 01:35:00.000
Bäm, startet mit gibt es nicht.

01:35:00.000 --> 01:35:06.000
Machen wir mal startet mit ABC, gibt es bestimmt irgendwas.

01:35:06.000 --> 01:35:13.000
Startet mit A.

01:35:13.000 --> 01:35:19.000
Gibt keine Welt, die mit A startet.

01:35:19.000 --> 01:35:24.000
Okay, da gibt es ein paar, die fangen immer mit Großbuchstaben an, das Faker Zeug.

01:35:24.000 --> 01:35:26.000
Okay.

01:35:26.000 --> 01:35:30.000
Amina suchen wir jetzt Bäm.

01:35:30.000 --> 01:35:33.000
Guck mal, da kannst du nur wirklich nichts sagen.

01:35:33.000 --> 01:35:39.000
Das ist eine SQLite Datenbank mit zwei Millionen Einträge drin und guck mal hier.

01:35:39.000 --> 01:35:43.000
Zack, das dauert 250 Millisekunden oder so.

01:35:43.000 --> 01:35:46.000
Es wäre natürlich noch richtig pro, wenn ihr unten...

01:35:46.000 --> 01:35:49.000
Guck mal, hier steht sogar wie lange das ganze dauert.

01:35:49.000 --> 01:35:53.000
Also, da kannst du dich nicht beschweren.

01:35:53.000 --> 01:35:57.000
So und ich wette mit euch, ends with ist jetzt auch schneller,

01:35:57.000 --> 01:36:03.000
weil das ganze im File System Cache drinne ist.

01:36:03.000 --> 01:36:07.000
Ja, guck mal, zack.

01:36:07.000 --> 01:36:12.000
Gar kein Problem.

01:36:12.000 --> 01:36:15.000
Ja, da kannst du dich nur wirklich nicht beschweren.

01:36:15.000 --> 01:36:17.000
Gmail.com.

01:36:17.000 --> 01:36:20.000
Hallo Jungs und Mädels, ja morgen ist soweit.

01:36:20.000 --> 01:36:21.000
Ne, ich morgen am Wochenende.

01:36:21.000 --> 01:36:22.000
Wochenende.

01:36:22.000 --> 01:36:24.000
Gibt es neues Video.

01:36:24.000 --> 01:36:27.000
Na, okay, ne, ends with dauert länger.

01:36:27.000 --> 01:36:32.000
Aber ich glaube, das längste ist gar nicht mal das Datenbankquery, sondern...

01:36:32.000 --> 01:36:34.000
Macht der Debug Datenbankquery?

01:36:34.000 --> 01:36:37.000
Sondern das Zusammenbauen von dem Result.

01:36:37.000 --> 01:36:42.000
Der braucht 8 Sekunden, um halt hier den Result mit...

01:36:42.000 --> 01:36:52.000
Was weiß ich, wie viel 100.000 Datensätzen da rauszuhauen.

01:36:52.000 --> 01:36:59.000
Ich weiß nicht, ob man hier irgendwo sehen kann, wie viel da drinne ist.

01:36:59.000 --> 01:37:02.000
Ne, anscheinend nicht.

01:37:02.000 --> 01:37:06.000
Dann sieht man nicht, wie viel Datensätze das sind.

01:37:06.000 --> 01:37:09.000
Obwohl man das bestimmt auch irgendwie querying kann.

01:37:09.000 --> 01:37:11.000
Aber das ist wirklich schnell.

01:37:11.000 --> 01:37:13.000
Kannst du dich nicht beschweren?

01:37:13.000 --> 01:37:20.000
Ja, und ich hab das gelesen, dass das unter anderem von Facebook entwickelt wurde,

01:37:20.000 --> 01:37:24.000
weil ihre Mobile App zu lahm war und wahrscheinlich weil die auch zu viele unnötige Daten abgefragt haben.

01:37:24.000 --> 01:37:29.000
Und gerade bei Services wie Facebook ist es ja so,

01:37:29.000 --> 01:37:33.000
dass du, sagen wir mal, User in der Datenbank stehen hast,

01:37:33.000 --> 01:37:38.000
aber du nicht auf jeder Seite alle Informationen zu diesem User haben willst.

01:37:38.000 --> 01:37:41.000
Was bringt einem das Generieren von den Daten jetzt?

01:37:41.000 --> 01:37:43.000
Naja, ich kann die Daten abfragen.

01:37:43.000 --> 01:37:45.000
Und ich will ja das Abfragen der Daten testen.

01:37:45.000 --> 01:37:50.000
Weißt du, um zu testen, wie man Daten abfragt,

01:37:50.000 --> 01:37:54.000
braucht man erstmal irgendwelche Fake-Daten, die man abfragen kann.

01:37:54.000 --> 01:37:56.000
Und deswegen haben wir die Fake-Daten generiert.

01:37:56.000 --> 01:38:00.000
Weil wo kriegst du denn sonst 2 Millionen Datensätze auf die Schnelle her?

01:38:00.000 --> 01:38:04.000
Erstmal bei Thor im Darknet eine Datenbank kaufen.

01:38:04.000 --> 01:38:07.000
Oder aber Fake-Daten generieren.

01:38:07.000 --> 01:38:11.000
So, und zum Beispiel, wenn ich jetzt sage,

01:38:11.000 --> 01:38:16.000
eigentlich interessiert mich nur die E-Mail, der Rest von den User ist mir egal,

01:38:16.000 --> 01:38:23.000
dann machen wir das Ganze mal mit der E-Mail.

01:38:23.000 --> 01:38:25.000
Und es ist nicht wirklich schneller geworden.

01:38:25.000 --> 01:38:27.000
Doch, ein bisschen schneller.

01:38:27.000 --> 01:38:29.000
Ein bisschen schneller ist es.

01:38:29.000 --> 01:38:33.000
Also die Hauptportion des Curies wird wahrscheinlich wirklich die Datenbank-Suche sein.

01:38:33.000 --> 01:38:36.000
Das hier ist ja quasi Volltext-Suche.

01:38:36.000 --> 01:38:40.000
Aber was ich cool finde, starts with geht schneller.

01:38:40.000 --> 01:38:43.000
Und ich bin mir ziemlich sicher, das liegt daran,

01:38:43.000 --> 01:38:51.000
weil der das intern schon irgendwie als sortierte Liste abgespeichert hat.

01:38:51.000 --> 01:38:55.000
Und dann kannst du den Start schneller finden.

01:38:55.000 --> 01:39:02.000
Ich weiß gar nicht, wie man im Entity-Framework ein Index erstellt.

01:39:02.000 --> 01:39:04.000
EF Core Index, wie macht man sowas?

01:39:04.000 --> 01:39:07.000
Hab ich, glaube ich, noch nie gemacht.

01:39:07.000 --> 01:39:08.000
Has Index.

01:39:08.000 --> 01:39:14.000
Ah ja, Model-Bilder, genau, doch, habe ich schon gemacht.

01:39:14.000 --> 01:39:23.000
On-Model-Creating, das machen wir jetzt mal.

01:39:23.000 --> 01:39:27.000
Muss man das an On-Model-Creating machen?

01:39:27.000 --> 01:39:37.000
Okay, Override, On-Model, was macht hier gerade Magic alles für mich oder was?

01:39:37.000 --> 01:39:52.000
On-Model-Creating, und dann sagen wir, okay, Model-Bilder, Entity-User, oder wie, oder was?

01:39:52.000 --> 01:39:56.000
Wahrscheinlich.

01:39:56.000 --> 01:39:57.000
Hallo?

01:39:57.000 --> 01:39:58.000
Wie, das gibt es nicht?

01:39:58.000 --> 01:40:00.000
Natürlich gibt es das.

01:40:00.000 --> 01:40:04.000
Ist es doch.

01:40:04.000 --> 01:40:11.000
Und dann, Has Index, da benutzt jemand Rider.

01:40:11.000 --> 01:40:13.000
Ja, Rider, beste.

01:40:13.000 --> 01:40:18.000
Der Grund, warum ich mit Rider mal angefangen habe, ist, weil es unter Linus funktioniert.

01:40:18.000 --> 01:40:21.000
Und mittlerweile bin ich da so überzeugt von, dass ich wahrscheinlich, wenn ich unter Windows

01:40:21.000 --> 01:40:24.000
wieder was basteln würde, würde ich wahrscheinlich das auch unter Windows installieren.

01:40:24.000 --> 01:40:30.000
Okay, machen wir mal ein Index auf die Mail.

01:40:30.000 --> 01:40:36.000
Und dann gucken wir, ob das irgendwie nennenswert was an der Performance bringt.

01:40:36.000 --> 01:40:48.000
Ach, Moment, On-Model-Creating, muss ich das jetzt noch mal machen?

01:40:48.000 --> 01:40:52.000
Macht der das jetzt nachträglich auf die Datenbank oder muss ich das jetzt noch mal

01:40:52.000 --> 01:40:53.000
reinschreiben?

01:40:53.000 --> 01:40:54.000
Zeig mal her.

01:40:54.000 --> 01:40:59.000
Jetzt müssen wir uns mal den SQLite Explorer angucken, ob dort, ob man da erkennt, ob da

01:40:59.000 --> 01:41:03.000
irgendwie ein Index drauf ist.

01:41:03.000 --> 01:41:09.000
Wo sieht man das?

01:41:09.000 --> 01:41:12.000
SQL MonkaS.

01:41:12.000 --> 01:41:16.000
Müssen das hier, gibt kein Index da.

01:41:16.000 --> 01:41:19.000
Gibt kein Index.

01:41:19.000 --> 01:41:20.000
Ja klar.

01:41:20.000 --> 01:41:23.000
Ich habe ja auch die Datenbank vorher schon angelegt.

01:41:23.000 --> 01:41:26.000
Okay, dann muss ich das noch mal machen.

01:41:26.000 --> 01:41:27.000
Okay, easy.

01:41:27.000 --> 01:41:32.000
Wir haben ja Zeit.

01:41:32.000 --> 01:41:35.000
Wir machen das noch mal.

01:41:35.000 --> 01:41:37.000
Oh nee, Moment.

01:41:37.000 --> 01:41:40.000
Ich hätte das vorher zu machen müssen.

01:41:40.000 --> 01:41:43.000
Wir legen einfach noch mal an.

01:41:43.000 --> 01:41:44.000
Kein Problem.

01:41:44.000 --> 01:41:47.000
Wir haben ja Zeit.

01:41:47.000 --> 01:41:49.000
Stimmt, du hast recht.

01:41:49.000 --> 01:41:50.000
Correct.

01:41:50.000 --> 01:41:51.000
Ja.

01:41:51.000 --> 01:41:52.000
Ja, ja.

01:41:52.000 --> 01:41:53.000
Hast du recht.

01:41:53.000 --> 01:41:57.000
So wie ich hier mache ist übrigens, hast du recht, ist Einbahnstraße.

01:41:57.000 --> 01:41:59.000
Den Fehler habe ich schon mal gemacht.

01:41:59.000 --> 01:42:05.000
Dann hast du später das Problem, wenn du Änderungen machen willst, dass es dann immer jedes Mal

01:42:05.000 --> 01:42:07.000
inkompatibel ist zu anderen.

01:42:07.000 --> 01:42:12.000
Du müsstest eigentlich New Migration machen und, ja, ja, du hast recht.

01:42:12.000 --> 01:42:13.000
Genau.

01:42:13.000 --> 01:42:14.000
Oh Mist.

01:42:14.000 --> 01:42:15.000
Ich kacknup.

01:42:15.000 --> 01:42:21.000
Jetzt habe ich es geändert und er hat es neu gestartet.

01:42:21.000 --> 01:42:23.000
Wir machen einfach mal Run.

01:42:23.000 --> 01:42:25.000
Ja, ja, ist ja gut.

01:42:25.000 --> 01:42:26.000
Run.

01:42:26.000 --> 01:42:37.000
Guck mal, jetzt schreibt er gleich in die Datenbank.

01:42:37.000 --> 01:42:38.000
Vorher hat er das nett gemacht.

01:42:38.000 --> 01:42:48.000
Okay, wir warten mal kurz, bis das alles reingeschrieben ist.

01:42:48.000 --> 01:42:57.000
Du hast recht mit meiner Migration, ja, musst du machen.

01:42:57.000 --> 01:43:01.000
Äh.

01:43:01.000 --> 01:43:02.000
Wattaf.

01:43:02.000 --> 01:43:13.000
Mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, s.

01:43:13.000 --> 01:43:15.000
Database is locked.

01:43:15.000 --> 01:43:16.000
Oh, habe ich noch noch auf?

01:43:16.000 --> 01:43:17.000
Warte mal.

01:43:17.000 --> 01:43:38.000
Warte mal, ich glaube das hab ich das einfach zu oft gestartet grade, killall.net easy, killall-9.net, zack, so muss es sein, zack, ok jetzt alles weg, jetzt kann man es nochmal starten.

01:43:38.000 --> 01:43:48.000
Ja, wir hatten ja die ganze Zeit Watch, das hat es halt verkackt, weil ich den Datei geändert hab, während er gerade generiert hat.

01:43:48.000 --> 01:44:08.000
Genau, respect, pain, I'm not net, so jetzt warten wir mal kurz ab. Ach so, nee, nee, nee, da machen wir keinen Watch für, LS-Spam ist viel besser.

01:44:08.000 --> 01:44:19.000
Also ihr habt die Auswahl, entweder kopier ich jetzt zwei Minuten einsen oder ich spam LS, was soll ich lieber. Der Chat darf sich's aussuchen.

01:44:19.000 --> 01:44:44.000
Was passiert hier genau? Ich hab gerade eine Fake-Datenbank erstellt mit 2 Millionen Einträgen und die fragen wir jetzt über eine AP ab. Und ich will dieses Abfrage-Link hier ausprobieren.

01:44:44.000 --> 01:44:56.000
Wie das, du kannst ja schauen wie das mit My Creations in EF Core geht, ey ich weiß wie das geht, das machst du über das.net command line tool, mir ist das bloß gerade nicht eingefallen, weil ich das so selten mache.

01:44:56.000 --> 01:45:06.000
Das machst du über das.net command line tool, du sagst irgendwie sowas wie, du musst erstmal irgendwelche, früher musstest du zumindest noch irgendwelche Plugins dafür installieren, wahrscheinlich ist es mittlerweile eingebaut.

01:45:06.000 --> 01:45:32.000
Und dann sagst du irgendwie.net new migration oder irgendwie sowas, migration add, migration add ja, genau.net EF migration und dieses EF Subcommando war früher nicht mitinstalliert und das war total verwirrend das nach zu installieren.

01:45:36.000 --> 01:46:03.000
Was hat der für Schmerzen denn jetzt auf einmal? Achso aber die Datenbank hat er angelegt oder? Ach nee der Mac hat nur, ach nee nichts Schlimmes, nichts Schlimmes, der Mac hat nur, dass es ihm zu lange dauert bis die Web-Anwendung gestartet ist, was ja klar ist, weil ich gerade 2 Millionen Datensätze anlege.

01:46:06.000 --> 01:46:13.000
Oh das ist Pocky Mode, das gefällt mir.

01:46:13.000 --> 01:46:29.000
So 203 MB oder sowas ist es, wobei jetzt mit Index ist es vielleicht ein, ja wobei, ein bisschen, bisschen größer vielleicht.

01:46:43.000 --> 01:46:57.000
So, gleich, gleich haben wir es. Und dann mal gucken ob das schneller geht, da bin ich mal gespannt. Ja warum ich, warum ich da heute drauf gekommen bin, warum ich das mal ausprobieren wollte ist,

01:46:57.000 --> 01:47:15.000
ich bastel ja gerade sowas für Überwachungskameras, wo man sich im Browser das ganze in Browser streamen lassen kann, die Überwachungskameras, also quasi fast Latency frei und ich habe jetzt aber mittlerweile schon einen Knopf eingebaut, dass man dann ein paar Sachen aufnehmen kann.

01:47:15.000 --> 01:47:32.000
Er macht Object-Erkennung, ob da Leute durchlaufen und wenn Leute durchs Bild laufen, dann startet eine 30 Sekunden Aufnahme und solche Geschichten und ich habe mir gedacht, ey wenn jemand, das man eine Weile laufen hat und dann irgendwie, was weiß ich, 300, 400 Aufnahmen hat,

01:47:32.000 --> 01:47:51.000
dann wird er ja wahrscheinlich auch ein bisschen filtern wollen in den Aufnahmen, ja. Nicht nur nach Kamera, sondern vielleicht auch nach Zeit, wann er es erstellt hat oder auch nach Typ, was es war, ob es eine manuelle Aufnahme war, ob es getriggert wurde durch Object-Detection.

01:47:51.000 --> 01:48:11.000
Deswegen wollte ich mir das mal angucken, weil es dafür mit Sicherheit recht nice ist. Was? Ah, wisst ihr warum das nicht geht? Warum ich meine IDE kaputt gemacht habe?

01:48:11.000 --> 01:48:25.000
Ich habe Killall.net gemacht, ich habe auch das.net der IDE gekillt. Tja gut, kann mal passieren.

01:48:25.000 --> 01:48:45.000
Hab ich noch Auto-Complete? Nee, ist alles weg, alles down. Okay, Leute, RIP IDE ist kaputt. Okay, Rider, Quit, alles klar. Ah nein, das falsche Rider war das. Nein, Rider, geh weg, piss dich alle.

01:48:45.000 --> 01:49:01.000
Geh weg, Rider. Ja, also hier Frage von Kofax. Ich bin, sie haben jetzt Plattformer-Auge geholt, doch weder Arduino noch Plattformer können was uploaden.

01:49:01.000 --> 01:49:28.000
Ich hatte den Boot, was? Hast du das auf Windows? Windows ist so ein Ding. Ich habe das noch nie verwendet auf Windows, aber du musst unter Windows erst irgendwelche serielle Treiber installieren, dass es funktioniert glaube ich.

01:49:28.000 --> 01:49:43.000
Ich habe das noch nie verwendet unter Windows. Den Bootknopf musst du nicht drücken. Du musst normalerweise nichts am Controller machen, wenn das ein ESP32 oder ein ESP266 ist.

01:49:43.000 --> 01:49:57.000
Du musst nichts am Controller machen, du musst den einfach nur einstecken und dann sagst du Upload und dann ist gut.

01:49:57.000 --> 01:50:11.000
Guck mal, jetzt kann ich zum Beispiel nicht zurück, weil ich habe die IDE geschlossen, aber die Local History ist immer noch da und in der Local History habe ich hier den Krams noch drinne stehen.

01:50:11.000 --> 01:50:22.000
Guckt, Bäm. Das heißt, wenn ich jetzt wieder haben will, kann ich mir einfach hier rauskopieren. Also Local History ist absolutes POG-Feature. Massive POG-Feature.

01:50:22.000 --> 01:50:32.000
So, jetzt können wir das starten. Jetzt haben wir unsere Daten mit 2 Millionen Einträgen und jetzt gucken wir mal, ob der Index irgendwas beschleunigt hat.

01:50:32.000 --> 01:50:43.000
Escalate Data, Indices, Users, Mail. Schauen wir mal, ob das jetzt schneller geht. Mit einem Index. Auf Mail.

01:50:43.000 --> 01:50:59.000
Welche Linux-Distro nutze ich? Das ist Manjaro mit E3-WM.

01:50:59.000 --> 01:51:03.000
Ist das jetzt schneller?

01:51:03.000 --> 01:51:32.000
Nee, das ist auch nicht schneller. Ich hätte gedacht, vielleicht bringt ein Index was. Zumindest bei Startet mit. Dass es beendet mit nichts bringt, ist klar.

01:51:32.000 --> 01:51:45.000
Geht eigentlich. Also, da kannst du dich nicht beschweren. 5 Sekunden für das Durchsuchen von der Datenbank mit 2 Millionen Einträgen. Vollkommen in Ordnung.

01:51:45.000 --> 01:52:03.000
Es waren vorher auch nicht 8 Sekunden. Die 8 Sekunden waren es nur, wenn es nicht im Filesystem Cache drin ist. Und es ist wahrscheinlich mittlerweile schon.

01:52:03.000 --> 01:52:17.000
Ja. Nee, aber es ist wirklich äußerst, äußerst nice. Du musst mal mit NodeMCU den Flash und einmal den Boot-Taster bestätigen.

01:52:17.000 --> 01:52:27.000
Also, wenn du NodeMCU hast, musst du nichts drücken. Du machst das einfach dran und drückst Upload und gut ist.

01:52:27.000 --> 01:52:37.000
Du kannst mal gucken, ob der serielle Monitor geht. Du kannst mal Serial Output starten und gucken, ob sich das connectet und geht.

01:52:37.000 --> 01:52:42.000
Ja. Nee, aber es ist auf jeden Fall eine coole Geschichte.

01:52:42.000 --> 01:52:52.000
Mit Arduino IDE kann das sein. Ich muss nie Boot drücken bei der NodeMCU. Nie. Einfach sagen Upload und gut ist.

01:52:52.000 --> 01:52:59.000
Man darf jetzt ja nicht vergessen, wir haben dafür null Code geschrieben. Das geht einfach.

01:52:59.000 --> 01:53:07.000
Was schon richtig cool ist.

01:53:07.000 --> 01:53:17.000
Aber sie haben ein paar Sachen geändert. Also das hier wurde jetzt neu gemacht, wie es aussieht und das hier ist auch neu.

01:53:17.000 --> 01:53:24.000
So und ein Feature. Also soweit habe ich das letztes in diesem einen rumgebastelt Projekt, das ich mit einem Kollegen zusammen gemacht habe.

01:53:24.000 --> 01:53:29.000
So ungefähr in diesem Umfang haben wir das GraphQL auch verwendet.

01:53:29.000 --> 01:53:42.000
Aber GraphQL kann eine richtig coole Geschichte, was ich noch nie ausprobiert habe, und zwar Subscriptions.

01:53:42.000 --> 01:53:48.000
Die Seite hat mich immer übelst überfordert, was da drin steht, weil es übelst wir ist.

01:53:48.000 --> 01:53:57.000
Also hier fragen wir ja aktuell nur ab. Wir fragen aktuell User ab und filtern die User.

01:53:57.000 --> 01:54:06.000
Fragen wir nochmal den Namen ab. Man kann mit GraphQL allerdings auch anstatt einen Query machen eine Subscription machen.

01:54:06.000 --> 01:54:18.000
So und was dann passiert ist, bei der Änderung auf Serverseite kriegt der Client automatisch die neuesten Sachen geschickt.

01:54:18.000 --> 01:54:25.000
Ich habe diese Seite schon ein paar Mal versucht zu lesen. Die finde ich so übertrieben kompliziert.

01:54:25.000 --> 01:54:43.000
Also ich habe keine Ahnung, wie das funktioniert. Ich copy paste mir jetzt einfach mal was zusammen.

01:54:43.000 --> 01:54:52.000
Windows erkennt das Ding gar nicht, ja das sagt.

01:54:52.000 --> 01:55:00.000
Ja es ist ein bisschen wie Signal A. Es ist unter der Haube eine Websocket Geschichte.

01:55:00.000 --> 01:55:15.000
Deswegen muss ich da wahrscheinlich auch sagen, use Websockets, dass das funktioniert.

01:55:15.000 --> 01:55:23.000
So das habe ich aber noch nie ausprobiert. Ich bin da ja ein bisschen hin und her gerissen gerade.

01:55:23.000 --> 01:55:32.000
Und zwar ich mache das ja hier so. Ich kann das jetzt mal kurz auf GitHub zeigen.

01:55:32.000 --> 01:55:37.000
Schon ein paar Tage her, wo ich was gepusht habe.

01:55:37.000 --> 01:55:49.000
Oder was? Monarch S. Und da habe ich ja auch Signal R im Frontend.

01:55:49.000 --> 01:55:55.000
Ich habe alles, oh warte, warum mache ich die Vue.js Seite auf alle Index.

01:55:55.000 --> 01:56:09.000
Hier habe ich auch Signal A drin, wenn es Updates gibt. Zum Beispiel, wenn in einem Videostream eine Person erkannt wird und sowas.

01:56:09.000 --> 01:56:12.000
Das funktioniert auch ziemlich gut.

01:56:12.000 --> 01:56:18.000
Und auf Serverseite habe ich auch noch so einen Event Message Bus, der Sachen zwischen Komponenten hin und her schickt.

01:56:18.000 --> 01:56:23.000
Ich weiß nicht, ob ich noch wirklich was drittes brauche, aber es wäre halt echt praktisch,

01:56:23.000 --> 01:56:31.000
wenn ich vom Server was abfrage, wie hier zum Beispiel, und kriege danach immer die neuesten Updates, wenn was hinzugefügt wurde.

01:56:31.000 --> 01:56:38.000
Ich Copy Paste einfach mal, ich probiere das einfach mal aus, weil das stelle ich mir trotzdem sehr praktisch vor.

01:56:38.000 --> 01:56:44.000
Was machen die hier für Dinger?

01:56:44.000 --> 01:56:49.000
Okay, also wir müssen erstmal irgendwie Add in Memory Subscription Provider machen.

01:56:49.000 --> 01:56:56.000
Also alles, was ich euch bis jetzt gezeigt habe, habe ich schon mal irgendwann gemacht, aber das ist jetzt komplett kein Plan.

01:56:56.000 --> 01:57:03.000
Adds in Memories Subscriptions und dann brauchen wir noch was, ein Add Subscription Type.

01:57:03.000 --> 01:57:09.000
Alles klar, nennen wir einfach mal Subscription.

01:57:09.000 --> 01:57:15.000
Ohne, dass ich wüsste, was ich da treibe.

01:57:15.000 --> 01:57:22.000
Subscription Public.

01:57:22.000 --> 01:57:25.000
So, wie geht das jetzt?

01:57:25.000 --> 01:57:27.000
Fangen wir mal oben an.

01:57:27.000 --> 01:57:34.000
Okay, das haben wir gemacht. GraphQL, Provider, Configure.

01:57:34.000 --> 01:57:48.000
What? Ein Event Message?

01:57:48.000 --> 01:57:53.000
What the fuck?

01:57:53.000 --> 01:57:56.000
Was passiert da überhaupt gerade?

01:57:56.000 --> 01:58:02.000
Was bin ich sehend?

01:58:02.000 --> 01:58:06.000
Was ist das?

01:58:06.000 --> 01:58:15.000
Return, what?

01:58:15.000 --> 01:58:19.000
What the fuck?

01:58:19.000 --> 01:58:24.000
Ich hab keine Ahnung, wie man das konfiguriert.

01:58:24.000 --> 01:58:35.000
Okay, da bin ich offiziell zu Low-Brain-Führer, das muss ich mir irgendwie bei Ruhe erkunden, keine Ahnung.

01:58:35.000 --> 01:58:40.000
Ah, du hast nur ein Ladekabel gehabt, bestimmt ein China-Kabel, oder?

01:58:40.000 --> 01:58:44.000
Redis ist genau das, dass man das auch wenn die Anwendung abkackt.

01:58:44.000 --> 01:58:47.000
Aber ich hab hier in Memory Subscription.

01:58:47.000 --> 01:58:50.000
Du musst Boot halten, was ist denn das?

01:58:50.000 --> 01:58:54.000
Zeig mal, was hast du für ein Board? Schick mal einen Link.

01:58:54.000 --> 01:58:56.000
Was ist das?

01:58:56.000 --> 01:59:08.000
Ein Event Sender? What the fuck?

01:59:08.000 --> 01:59:10.000
Ich copy-paste zumindest jetzt einfach mal.

01:59:10.000 --> 01:59:18.000
Ich weiß nicht genau, was da Sache ist, aber...

01:59:18.000 --> 01:59:24.000
Okay, ich geb also, ich geb ein neues...

01:59:24.000 --> 01:59:28.000
Wir machen jetzt mal eine ganz billige kleine Subscription.

01:59:28.000 --> 01:59:34.000
Wir geben einfach alle, alle User zurück.

01:59:34.000 --> 01:59:46.000
So, und jetzt haben wir on, weil es jetzt so eine Art Event ist, user changed oder so.

01:59:46.000 --> 01:59:52.000
Okay, komm, on user added oder created.

01:59:52.000 --> 01:59:58.000
Da brauchen wir jetzt was, ein Event Sender?

01:59:58.000 --> 02:00:00.000
Da muss ich bestimmt noch irgendeinen Package adden.

02:00:00.000 --> 02:00:08.000
Hot Chocolate Subscriptions oder sowas wahrscheinlich?

02:00:08.000 --> 02:00:12.000
Ich hab keinen Plastenschimmer, was ich hier treibe.

02:00:12.000 --> 02:00:20.000
Okay, ein Event Sender gibt es schon mal nicht.

02:00:20.000 --> 02:00:32.000
Muss ich dafür hinzufügen? Package? Muss ich dafür ein Package hinzufügen?

02:00:32.000 --> 02:00:52.000
Steht da irgendwo was? Nougat? Dot Subscriptions?

02:00:52.000 --> 02:00:56.000
Ah, ich hab das falsch hinzugefügen. Muss das da bestimmt hinzufügen.

02:00:56.000 --> 02:01:04.000
Okay, machen wir das wieder weg, remove, fügen das hinzu, add, jawoll.

02:01:04.000 --> 02:01:08.000
Oh, wahrscheinlich geht das jetzt besser.

02:01:08.000 --> 02:01:12.000
Moment, 105? Nee, das ist noch das alte.

02:01:12.000 --> 02:01:20.000
Ja, what the fuck?

02:01:20.000 --> 02:01:22.000
Event Sender?

02:01:22.000 --> 02:01:30.000
Itopic? Okay, das ist noch mal was anderes.

02:01:30.000 --> 02:01:33.000
Fuck.

02:01:33.000 --> 02:01:38.000
Oh nein, ich hab keinen Plastenschimmer, was ich da mache.

02:01:38.000 --> 02:01:48.000
Ich hab keine Ahnung, was es tut, was es macht, Alter.

02:01:48.000 --> 02:01:56.000
Okay, return.

02:01:56.000 --> 02:01:59.000
Was ist das?

02:01:59.000 --> 02:02:05.000
Äh, warum nicht?

02:02:05.000 --> 02:02:08.000
Hä?

02:02:08.000 --> 02:02:16.000
Ach so.

02:02:16.000 --> 02:02:21.000
Du hast das Board geschickt? Ja, Moment, ich guck's mir mal an.

02:02:21.000 --> 02:02:24.000
Dieses Board.

02:02:24.000 --> 02:02:29.000
Klar, das ist ganz normal, ESP32, da muss ich keinen Bootknopf drücken zum Flaschen.

02:02:29.000 --> 02:02:35.000
Genau das gleiche Board hab ich auch.

02:02:35.000 --> 02:02:38.000
Ist das irgendeine Windows-Geschichte? Keine Ahnung, ehrlich.

02:02:38.000 --> 02:02:44.000
Wir haben es letztens erst im Stream geflasht, hier.

02:02:44.000 --> 02:02:50.000
ESP-Tool-Write, bam, da muss ich nix halten.

02:02:50.000 --> 02:02:53.000
Ich glaub's dir, du musst das nicht schwören, Alter.

02:02:53.000 --> 02:02:56.000
Das schaut gut, ich glaub's dir.

02:02:56.000 --> 02:03:00.000
Das erinnert mich, das fand ich auch geil.

02:03:00.000 --> 02:03:04.000
So in Corona-Zeit hat sich...

02:03:04.000 --> 02:03:09.000
Also es gibt bei uns in Frankfurt einen ziemlich nice Köfte-Laden.

02:03:09.000 --> 02:03:12.000
Hier, den dafür. Ich kann ja mal Werbung machen für den.

02:03:12.000 --> 02:03:18.000
Köfte-Chi, irgendwie so, August oder so heißt der so?

02:03:18.000 --> 02:03:21.000
Köfte-Frankfurt, so.

02:03:21.000 --> 02:03:24.000
Hier, der da, Köfte-Chi.

02:03:24.000 --> 02:03:33.000
Der ist echt nice, Poggers Köfte in Frankfurt.

02:03:33.000 --> 02:03:36.000
Da haben wir angerufen.

02:03:36.000 --> 02:03:42.000
Da haben wir angerufen und haben gesagt, wir würden gerne Köfte-Sandwich bestellen.

02:03:42.000 --> 02:03:46.000
Und wir wollten fragen, ob er wieder auf hat.

02:03:46.000 --> 02:03:51.000
Weil das letzte Mal, wo wir da waren, da hat er ja noch renoviert.

02:03:51.000 --> 02:03:54.000
Und wir wollten Köfte-Sandwich bestellen und einfach fragen, ob er wieder da ist.

02:03:54.000 --> 02:03:57.000
Und dann meint er, nein, nein, ist noch alles geschlossen.

02:03:57.000 --> 02:04:02.000
Und dann meint mein Kollege so, ja, weil das letzte Mal stand dran.

02:04:02.000 --> 02:04:06.000
Der hat halt bis, kann ich sagen, bis 3.12. und deswegen...

02:04:06.000 --> 02:04:11.000
Nein, nein, immer noch geschlossen. Ich schwöre.

02:04:11.000 --> 02:04:14.000
Nein, ist schon gut. Wir glauben es dir auch so.

02:04:14.000 --> 02:04:17.000
Du musst nicht schwören, dass es keine Köfte-Sandwich gibt.

02:04:17.000 --> 02:04:23.000
Ist alles gut. Ich schwöre.

02:04:23.000 --> 02:04:27.000
Der hat gedacht, das wäre jetzt für uns die übelste Beleidigung oder so,

02:04:27.000 --> 02:04:31.000
dass er uns keine Köfte-Sandwich verkaufen will.

02:04:31.000 --> 02:04:35.000
Ich meine, wir können es überleben, so ohne Köfte-Sandwich.

02:04:35.000 --> 02:04:48.000
Ah ja.

02:04:48.000 --> 02:04:51.000
Haben die hier kein gescheites Latest? Ah, da haben sie was.

02:04:51.000 --> 02:04:53.000
Nee, da haben sie auch nichts.

02:04:53.000 --> 02:05:00.000
Topic habe ich jetzt schon öfters gelesen hier.

02:05:00.000 --> 02:05:07.000
Ich habe eine Idee. Ich habe eine Idee, Leute.

02:05:07.000 --> 02:05:12.000
Es gibt doch bestimmt ein Übungsprojekt auf GitHub von denen.

02:05:12.000 --> 02:05:14.000
Das haben wir doch schon gesehen hier.

02:05:14.000 --> 02:05:17.000
Workshops, bam, da haben wir es sogar noch auf.

02:05:17.000 --> 02:05:23.000
Da gibt es doch bestimmt auch was mit Subscriptions.

02:05:23.000 --> 02:05:28.000
Docs, Subscription checks.

02:05:28.000 --> 02:05:33.000
Alter, das ist ja Big-Brainster-Code-Extrem.

02:05:33.000 --> 02:05:36.000
Was ist hier los? Was passiert hier überhaupt?

02:05:36.000 --> 02:05:39.000
So, Subscription.

02:05:39.000 --> 02:05:41.000
Haben die irgendeine Subscription-Class oder sowas,

02:05:41.000 --> 02:05:43.000
die ich mir Copy-Paste-en kann?

02:05:43.000 --> 02:05:47.000
Add-Memory-Subscription. Session-Subscription.

02:05:47.000 --> 02:05:53.000
Ah, den kopieren wir uns jetzt. Wunderbar.

02:05:53.000 --> 02:05:59.000
Okay, also Topic-Subscribe brauchen wir. Wunderbar, machen wir.

02:05:59.000 --> 02:06:03.000
Das haben wir. Event-Message brauchen wir. Event-Message in Session-ID.

02:06:03.000 --> 02:06:07.000
Okay, können wir lassen.

02:06:07.000 --> 02:06:11.000
Lassen wir einfach mal drin.

02:06:11.000 --> 02:06:13.000
Den Rest brauchen wir anscheinend nicht.

02:06:13.000 --> 02:06:15.000
Topics können wir so lassen.

02:06:15.000 --> 02:06:24.000
OnUserCreated. Event-Message in Session-ID.

02:06:24.000 --> 02:06:26.000
Okay.

02:06:26.000 --> 02:06:30.000
Und wie trigger ich das jetzt?

02:06:30.000 --> 02:06:32.000
War da nicht Topic-Sender oder sowas dabei?

02:06:32.000 --> 02:06:34.000
Moment, das war auf der anderen Seite.

02:06:34.000 --> 02:06:39.000
Topic-Sender. Ach nee, hier. Event-Sender.

02:06:39.000 --> 02:06:41.000
Okay, ich probiere jetzt mal was ganz Abenteuerliches.

02:06:41.000 --> 02:06:43.000
Das wird wahrscheinlich nicht funktionieren.

02:06:43.000 --> 02:06:45.000
Okay, Moment. Wir starten jetzt erst mal neu

02:06:45.000 --> 02:06:51.000
und gucken, ob ich mich daran attachen kann an diese Subscription da.

02:06:51.000 --> 02:06:53.000
Oder ob man die jetzt überhaupt sieht.

02:06:53.000 --> 02:06:55.000
Reload.

02:06:55.000 --> 02:06:57.000
Subscription. Okay, das sieht er schon mal.

02:06:57.000 --> 02:06:59.000
Schau mal was. Schau mal was.

02:06:59.000 --> 02:07:03.000
Also, Subscription.

02:07:03.000 --> 02:07:07.000
Subscription.

02:07:07.000 --> 02:07:11.000
Where? Prime?

02:07:11.000 --> 02:07:13.000
Hier geht nicht.

02:07:13.000 --> 02:07:15.000
Keine Primers in CraftQL.

02:07:15.000 --> 02:07:19.000
Aber hoffentlich paar Primers auf Twitch.

02:07:19.000 --> 02:07:23.000
Also, Subscription.

02:07:23.000 --> 02:07:25.000
OnUserCreated.

02:07:25.000 --> 02:07:29.000
Ich gebe super schlechte Sellout-Versuche.

02:07:29.000 --> 02:07:32.000
Aber wenn es euch gefällt und ihr habt noch einen Prime-Sub übrig,

02:07:32.000 --> 02:07:35.000
ihr wisst es bald Weihnachten, ich würde mich freuen.

02:07:35.000 --> 02:07:40.000
Und wisst ihr, worüber ich mich noch mehr freue als über euren Prime-Sub?

02:07:40.000 --> 02:07:42.000
Wenn man euch hier öfters sieht.

02:07:42.000 --> 02:07:46.000
Weil wir sind Leute, die aktiv sind, im Chat sind und sich benehmen,

02:07:46.000 --> 02:07:48.000
lieber als jeder Prime-Sub.

02:07:48.000 --> 02:07:50.000
Deswegen ist mein Chat auch der beste Chat.

02:07:54.000 --> 02:07:56.000
Schweizer hat keinen Prime. Was? Warum? Was ist mit den Schweizers los?

02:07:56.000 --> 02:07:58.000
Mit den Eidgenossen.

02:07:58.000 --> 02:08:00.000
Was machen die Eidgenossen wieder?

02:08:00.000 --> 02:08:02.000
Was ist denn hier los?

02:08:02.000 --> 02:08:04.000
Killfills, Sex, Abos, Poggers.

02:08:04.000 --> 02:08:06.000
Dankeschön.

02:08:06.000 --> 02:08:08.000
Massive Subscription.

02:08:08.000 --> 02:08:12.000
Wer hat denn was gekriegt?

02:08:12.000 --> 02:08:14.000
ParthosDev.

02:08:14.000 --> 02:08:16.000
ÖtziOfficial.

02:08:16.000 --> 02:08:18.000
Oh, oder wirklich der richtig echte Ötzi.

02:08:20.000 --> 02:08:22.000
Dann haben wir...

02:08:22.000 --> 02:08:24.000
ApsuLeru.

02:08:24.000 --> 02:08:26.000
Zarosh.de

02:08:26.000 --> 02:08:28.000
djsw77

02:08:28.000 --> 02:08:30.000
Ja, nice.

02:08:30.000 --> 02:08:32.000
Dankeschön Killfil.

02:08:32.000 --> 02:08:34.000
Der Ammo-Button wurde gebashed. Genau.

02:08:34.000 --> 02:08:36.000
Aber richtig.

02:08:36.000 --> 02:08:38.000
Der Gifter-Button wurde gebashed.

02:08:38.000 --> 02:08:40.000
Gibt es bei CraftQL auch Security?

02:08:40.000 --> 02:08:42.000
Also Authentification?

02:08:46.000 --> 02:08:48.000
Gute Frage. Nächste Frage. Keine Ahnung.

02:08:48.000 --> 02:08:50.000
Dafür habe ich so nicht...

02:08:50.000 --> 02:08:52.000
oft genug verwendet.

02:08:52.000 --> 02:08:54.000
Ich weiß es nicht.

02:08:56.000 --> 02:08:58.000
Dodged.

02:08:58.000 --> 02:09:00.000
Ja.

02:09:06.000 --> 02:09:08.000
Okay Leute, es ist ja bald Weihnachten, ne?

02:09:10.000 --> 02:09:12.000
Es ist ja bald Weihnachten.

02:09:20.000 --> 02:09:22.000
So.

02:09:22.000 --> 02:09:24.000
Ich werde jetzt mal zwei Subs verteilen.

02:09:24.000 --> 02:09:26.000
Und zwar, weil ich die schon öfters hier gesehen habe.

02:09:32.000 --> 02:09:34.000
Einmal kriegt der Cheat 95 eins.

02:09:34.000 --> 02:09:36.000
Der braucht das.

02:09:38.000 --> 02:09:40.000
Der hat kein Geld.

02:09:40.000 --> 02:09:42.000
Und kein Prime.

02:09:44.000 --> 02:09:46.000
Ähm.

02:09:46.000 --> 02:09:48.000
Wem wollte ich noch eins giften?

02:09:52.000 --> 02:09:54.000
Weiß ich nicht mehr.

02:09:56.000 --> 02:09:58.000
Dann hebe ich bitte das nochmal auf.

02:10:04.000 --> 02:10:06.000
Irgendeinen habe ich gerade gedacht, den muss ich auch noch eins giften,

02:10:06.000 --> 02:10:08.000
weil das auch immer oft am Start und

02:10:08.000 --> 02:10:10.000
auch im Chat.

02:10:10.000 --> 02:10:12.000
Und dann muss ich auch noch eins giften,

02:10:12.000 --> 02:10:14.000
weil das auch immer oft am Start und

02:10:14.000 --> 02:10:16.000
auch im Chat

02:10:18.000 --> 02:10:20.000
unterwegs immer...

02:10:22.000 --> 02:10:24.000
Falls ich es sehe, dann

02:10:24.000 --> 02:10:26.000
mache ich es noch.

02:10:26.000 --> 02:10:28.000
Exzellent.

02:10:28.000 --> 02:10:30.000
So.

02:10:30.000 --> 02:10:32.000
Also, mal gucken ob das jetzt tut.

02:10:32.000 --> 02:10:34.000
Subscription on,

02:10:34.000 --> 02:10:36.000
User created.

02:10:38.000 --> 02:10:40.000
Okay. Und jetzt?

02:10:40.000 --> 02:10:42.000
Und jetzt?

02:10:42.000 --> 02:10:44.000
Die...

02:10:44.000 --> 02:10:46.000
Keine Ahnung, der Name.

02:10:46.000 --> 02:10:48.000
Den Name will ich haben.

02:10:48.000 --> 02:10:50.000
Und jetzt?

02:10:52.000 --> 02:10:54.000
Ah, okay.

02:10:54.000 --> 02:10:56.000
Okay, das funktioniert anscheinend. Da kann sich Subscriben.

02:10:56.000 --> 02:10:58.000
Okay, nice, nice.

02:11:02.000 --> 02:11:04.000
Aber, Leute, ich finde es nice,

02:11:04.000 --> 02:11:06.000
dass ihr alle am Start seid. Heute ist ja wirklich

02:11:06.000 --> 02:11:08.000
sehr Nischenthema und ich weiß auch nicht so genau,

02:11:08.000 --> 02:11:10.000
was ich hier treibe, trotzdem 150 Leute am Start.

02:11:10.000 --> 02:11:12.000
Teilweise 160, 70.

02:11:12.000 --> 02:11:14.000
Das ist auch spät.

02:11:14.000 --> 02:11:16.000
Äußerst nice, ja.

02:11:18.000 --> 02:11:20.000
So.

02:11:22.000 --> 02:11:24.000
Okay, ich probiere jetzt mal

02:11:24.000 --> 02:11:26.000
eine Sache aus.

02:11:26.000 --> 02:11:28.000
Ich, hier in

02:11:28.000 --> 02:11:30.000
meiner Config Methode, ich injecte mir

02:11:30.000 --> 02:11:32.000
mal einen Itopic

02:11:32.000 --> 02:11:34.000
Sender. Wie gesagt, ich habe

02:11:34.000 --> 02:11:36.000
keine Ahnung, ob man das so macht und

02:11:36.000 --> 02:11:38.000
auch weniger Ahnung, ob man das

02:11:38.000 --> 02:11:40.000
so geht und auch weniger Ahnung, ob man

02:11:40.000 --> 02:11:42.000
das wirklich so macht.

02:11:46.000 --> 02:11:48.000
Heute ist gar nicht so viel los

02:11:48.000 --> 02:11:50.000
im Vergleich zu sonst. Guck mal, gestern

02:11:50.000 --> 02:11:52.000
war man nach 22

02:11:52.000 --> 02:11:54.000
Uhr und hatten 250

02:11:54.000 --> 02:11:56.000
Viewer.

02:11:56.000 --> 02:11:58.000
Um 22.40 Uhr oder so.

02:11:58.000 --> 02:12:00.000
Da habe ich schon gedacht, what the fuck?

02:12:00.000 --> 02:12:02.000
Obwohl gestern im Endeffekt

02:12:02.000 --> 02:12:06.000
im Laberstream war.

02:12:08.000 --> 02:12:10.000
Kommt zu Weihnachten neues

02:12:10.000 --> 02:12:12.000
Commentary. Also,

02:12:12.000 --> 02:12:14.000
an mir soll es nicht liegen.

02:12:14.000 --> 02:12:16.000
Der Friseur

02:12:16.000 --> 02:12:18.000
müsste sich dazu

02:12:18.000 --> 02:12:20.000
ja, herablassen,

02:12:20.000 --> 02:12:22.000
das zu machen. Ich habe mich letztens

02:12:22.000 --> 02:12:24.000
gefragt, der hat sich nicht so wirklich gerührt.

02:12:24.000 --> 02:12:26.000
Ich glaube, der will sich auch da auf nichts

02:12:26.000 --> 02:12:28.000
festlegen, dass er jetzt noch irgendwie Videos macht

02:12:28.000 --> 02:12:30.000
oder so. Aber ich denke mal,

02:12:30.000 --> 02:12:32.000
ich kriege den dazu überredet.

02:12:34.000 --> 02:12:36.000
Aber im Vergleich zu vor einem Jahr ist auch

02:12:36.000 --> 02:12:38.000
viel los. Ja, das stimmt. Es ist

02:12:38.000 --> 02:12:40.000
ohne Scheiß so das letzte

02:12:40.000 --> 02:12:42.000
halbe Jahr ist ganz schön

02:12:42.000 --> 02:12:44.000
viel los hier. Also sind auch viele

02:12:44.000 --> 02:12:46.000
neue Leute dabei gekommen.

02:12:46.000 --> 02:12:48.000
Wir haben ja regelmäßig, also wir haben sonntags

02:12:48.000 --> 02:12:50.000
teilweise Andi 300 Zuschauer, aber das ist ja

02:12:50.000 --> 02:12:52.000
auch so der mainstreamigste

02:12:52.000 --> 02:12:54.000
Stream sonntags morgens und auch die

02:12:54.000 --> 02:12:56.000
beste Zeit. Teilweise 350

02:12:56.000 --> 02:12:58.000
hatten wir da auch schon. Ich glaube, das höchste,

02:12:58.000 --> 02:13:00.000
was ich hatte, war 700 bei irgendeinem blöden Apple Event.

02:13:00.000 --> 02:13:02.000
Glaubst du gar nicht, bei einem Apple Event.

02:13:04.000 --> 02:13:06.000
Aber so auch bei normalen

02:13:06.000 --> 02:13:08.000
Laber-Streams 250, das ist

02:13:08.000 --> 02:13:10.000
ultra poggers.

02:13:10.000 --> 02:13:12.000
Aber man muss auch sagen,

02:13:12.000 --> 02:13:14.000
ich habe im letzten Jahr auch ziemlich viel gestreamt.

02:13:14.000 --> 02:13:16.000
Und ich habe

02:13:16.000 --> 02:13:18.000
eine Sache gemacht, wo man auch sieht, dass die sich

02:13:18.000 --> 02:13:20.000
auszahlt.

02:13:20.000 --> 02:13:22.000
Ich habe mir diesmal, ich habe mir so das letzte

02:13:22.000 --> 02:13:24.000
Jahr über schon ein bisschen mehr

02:13:24.000 --> 02:13:26.000
Gedanken drüber gemacht, was man als

02:13:26.000 --> 02:13:28.000
Content zu bringen kann.

02:13:30.000 --> 02:13:32.000
Davor habe ich ja noch mehr random gelabert.

02:13:32.000 --> 02:13:34.000
Also ich denke mal schon, dass das

02:13:34.000 --> 02:13:36.000
was gebracht hat. Da fehlt jetzt nur noch

02:13:36.000 --> 02:13:38.000
eine Sache, Leute.

02:13:38.000 --> 02:13:40.000
Nämlich endlich mal die

02:13:40.000 --> 02:13:42.000
22 Emote-Slots voll machen.

02:13:44.000 --> 02:13:46.000
Das mache ich, Leute. Das mache ich diesen

02:13:46.000 --> 02:13:48.000
Dezember auf jeden Fall noch. Ich

02:13:48.000 --> 02:13:50.000
brauche Emotes. Fiverr ist, Fiverr-Auftrag

02:13:50.000 --> 02:13:52.000
ist, Fiverr-Auftrag ist raus.

02:13:52.000 --> 02:13:54.000
Der Content ist

02:13:54.000 --> 02:13:56.000
sehr spannend. Ja, nice, nice.

02:13:56.000 --> 02:13:58.000
So, ich mache jetzt

02:13:58.000 --> 02:14:00.000
einfach mal einen Task und

02:14:00.000 --> 02:14:02.000
sende unendlich lang,

02:14:02.000 --> 02:14:04.000
dass ein neuer User

02:14:04.000 --> 02:14:06.000
angelegt wird. Also wir faken

02:14:06.000 --> 02:14:08.000
jetzt einfach mal, dass ein neuer User angelegt

02:14:08.000 --> 02:14:10.000
wird, weil

02:14:12.000 --> 02:14:14.000
True

02:14:14.000 --> 02:14:16.000
so Event

02:14:16.000 --> 02:14:22.000
was? Sender.

02:14:22.000 --> 02:14:24.000
Send.

02:14:26.000 --> 02:14:28.000
Topic. Oh, welches

02:14:28.000 --> 02:14:30.000
Topic ist das denn?

02:14:30.000 --> 02:14:32.000
Topic.

02:14:32.000 --> 02:14:34.000
Kann man bei dem Topic Name angeben?

02:14:34.000 --> 02:14:36.000
Nein.

02:14:36.000 --> 02:14:38.000
0w. 0w

02:14:38.000 --> 02:14:40.000
größer keqw ist das. Wobei, ich weiß

02:14:40.000 --> 02:14:42.000
nicht, ob der mit solchen Zeichen

02:14:42.000 --> 02:14:44.000
0w ist das Topic. Sende an das

02:14:44.000 --> 02:14:46.000
Topic 0w.

02:14:46.000 --> 02:14:48.000
Tja, Message. Brauche ich die

02:14:48.000 --> 02:14:50.000
Message überhaupt?

02:14:50.000 --> 02:14:52.000
Message brauche ich wahrscheinlich gar nicht zum

02:14:52.000 --> 02:14:54.000
ausprobieren.

02:14:54.000 --> 02:14:56.000
1,

02:14:56.000 --> 02:14:58.000
ist egal.

02:14:58.000 --> 02:15:00.000
So, und dann sagen wir

02:15:00.000 --> 02:15:02.000
thread, sleep. Das ist nicht die schöne Art,

02:15:02.000 --> 02:15:04.000
das zu machen, aber ich will gucken, ob es funktioniert.

02:15:04.000 --> 02:15:06.000
So, da sollte jetzt im Hintergrund

02:15:08.000 --> 02:15:10.000
Moment, Moment, was ich hier mache

02:15:10.000 --> 02:15:12.000
ist ganz bescheuert. Ich gebe jedes Mal

02:15:12.000 --> 02:15:14.000
komplette User Array raus.

02:15:14.000 --> 02:15:16.000
Ne, das geht nicht.

02:15:16.000 --> 02:15:18.000
Ne, Moment. First.

02:15:18.000 --> 02:15:20.000
Ok, nur den

02:15:20.000 --> 02:15:22.000
First User. Nur den First User.

02:15:22.000 --> 02:15:24.000
Oder, oder,

02:15:24.000 --> 02:15:26.000
Range? Ging das

02:15:26.000 --> 02:15:28.000
Range? Ah ne, Moment, wie ging das nochmal?

02:15:28.000 --> 02:15:30.000
Wie kommt man mit Link nochmal?

02:15:30.000 --> 02:15:32.000
Ne, wir brauchen gar

02:15:32.000 --> 02:15:34.000
kein Link. Wir brauchen

02:15:34.000 --> 02:15:36.000
Range Selectors.

02:15:38.000 --> 02:15:40.000
Büg doch einen hinzu

02:15:40.000 --> 02:15:42.000
jede Sekunde.

02:15:46.000 --> 02:15:48.000
Das Problem

02:15:48.000 --> 02:15:50.000
bei einem hinzufügen jede Sekunde ist,

02:15:50.000 --> 02:15:52.000
dann müsste ich irgendwie hier drinnen erkennen, welchen

02:15:52.000 --> 02:15:54.000
ich hinzugefügt habe. Ne, ha,

02:15:54.000 --> 02:15:56.000
wir machen das anders.

02:15:56.000 --> 02:15:58.000
Wir machen das so. Users,

02:15:58.000 --> 02:16:00.000
last. Einfach immer

02:16:00.000 --> 02:16:02.000
den Letzten zurückgeben.

02:16:02.000 --> 02:16:04.000
Und dann füge ich jede Sekunde einen hinzu und das ist

02:16:04.000 --> 02:16:06.000
immer der Letzte. Ah,

02:16:06.000 --> 02:16:10.000
yes.

02:16:14.000 --> 02:16:16.000
So.

02:16:16.000 --> 02:16:18.000
Ok.

02:16:18.000 --> 02:16:20.000
Und jetzt?

02:16:20.000 --> 02:16:22.000
Kriege ich jetzt? Kriege ich jetzt

02:16:22.000 --> 02:16:24.000
einen User?

02:16:24.000 --> 02:16:26.000
Jede Sekunde kriege ich einen User?

02:16:28.000 --> 02:16:30.000
Nein. Oh. Oder?

02:16:30.000 --> 02:16:32.000
Errors.

02:16:32.000 --> 02:16:34.000
Unexpected

02:16:34.000 --> 02:16:36.000
Error.

02:16:36.000 --> 02:16:38.000
Aber, aber der macht jede Sekunde was.

02:16:38.000 --> 02:16:40.000
Also prinzipiell ist das gar nicht so falsch, was ich

02:16:40.000 --> 02:16:42.000
da mache.

02:16:42.000 --> 02:16:44.000
Aber, aber er mag

02:16:44.000 --> 02:16:46.000
nicht.

02:16:54.000 --> 02:16:56.000
Die Message sollte ein User Objekt sein.

02:16:58.000 --> 02:17:00.000
Ne,

02:17:00.000 --> 02:17:02.000
oder?

02:17:02.000 --> 02:17:04.000
Ne, die Message ist

02:17:04.000 --> 02:17:06.000
ein Int.

02:17:06.000 --> 02:17:08.000
Die Message ist ein Int. Ich

02:17:08.000 --> 02:17:10.000
benutze ja hier gar nichts von der Message.

02:17:12.000 --> 02:17:14.000
Message ist ein Int und hier ist auch

02:17:14.000 --> 02:17:16.000
ein Int. Das ist so weit ok.

02:17:18.000 --> 02:17:20.000
Sag mal so, ich kann die Message

02:17:20.000 --> 02:17:22.000
in den User Objekt geben,

02:17:22.000 --> 02:17:24.000
dann brauch ich den Data, den

02:17:24.000 --> 02:17:26.000
Datenbank Kontext nicht.

02:17:26.000 --> 02:17:28.000
Ja.

02:17:28.000 --> 02:17:30.000
Und dann geben wir einfach

02:17:30.000 --> 02:17:32.000
den User zurück.

02:17:32.000 --> 02:17:34.000
Genau, so machen wir das.

02:17:34.000 --> 02:17:36.000
Ja, so machen wir das, das ist ok.

02:17:36.000 --> 02:17:38.000
Return.

02:17:42.000 --> 02:17:44.000
Und jetzt

02:17:44.000 --> 02:17:46.000
sagen wir hier Send.

02:17:46.000 --> 02:17:48.000
Moment.

02:17:48.000 --> 02:17:50.000
Ah, wo ist mein Generate Code?

02:17:50.000 --> 02:17:52.000
Faker.

02:17:52.000 --> 02:17:54.000
Braucht man Generate Code?

02:17:54.000 --> 02:17:56.000
Und hier oben mach ich mal aus, dass er keine neue

02:17:56.000 --> 02:17:58.000
Datenbank generiert.

02:18:02.000 --> 02:18:04.000
Generate One.

02:18:06.000 --> 02:18:08.000
Und ich stelle jetzt jede Sekunde

02:18:08.000 --> 02:18:10.000
in den neuen User.

02:18:12.000 --> 02:18:14.000
Generate One First.

02:18:18.000 --> 02:18:20.000
Genau, ich generiere jetzt jede Sekunde einen neuen User

02:18:20.000 --> 02:18:22.000
und sag dem Client Bescheid,

02:18:22.000 --> 02:18:26.000
wo das neue User angelegt wurde.

02:18:38.000 --> 02:18:40.000
Guckt euch das mal an.

02:18:40.000 --> 02:18:42.000
Also die Doku-Seite

02:18:42.000 --> 02:18:44.000
braucht dringend mal ein bisschen Überholung,

02:18:44.000 --> 02:18:46.000
mit der blickt doch kein Sau durch, was die da eigentlich wollen von einem.

02:18:48.000 --> 02:18:50.000
Aber überlegt euch mal,

02:18:50.000 --> 02:18:52.000
das ist extrem nice.

02:18:52.000 --> 02:18:54.000
Ich bekomme

02:18:54.000 --> 02:18:56.000
quasi jetzt im Client

02:18:56.000 --> 02:18:58.000
mit, wenn im Backend

02:18:58.000 --> 02:19:00.000
was passiert, ohne

02:19:00.000 --> 02:19:02.000
dass ich irgendwas dafür machen muss.

02:19:02.000 --> 02:19:04.000
Also ich muss keine Signal-A-

02:19:04.000 --> 02:19:06.000
Websocket-Gedöns von Hand machen.

02:19:06.000 --> 02:19:08.000
Ich meine unter der Haube sind es Websockets,

02:19:08.000 --> 02:19:10.000
aber es macht das alles für mich.

02:19:10.000 --> 02:19:12.000
Das ist, wisst ihr, das ist richtig praktisch.

02:19:14.000 --> 02:19:16.000
Weil aktuell mache ich das so.

02:19:16.000 --> 02:19:18.000
Ich zeige euch das mal kurz an der Stelle,

02:19:18.000 --> 02:19:20.000
wo das passiert in meiner

02:19:20.000 --> 02:19:22.000
in dieser Web-Anwendung

02:19:22.000 --> 02:19:24.000
für Überwachungskameras.

02:19:26.000 --> 02:19:28.000
Kannst du Netzwerk-Tab anzeigen?

02:19:32.000 --> 02:19:34.000
Ach du meinst

02:19:34.000 --> 02:19:36.000
Entwicklertools oder was?

02:19:38.000 --> 02:19:40.000
F10? Ne, was sind denn F12?

02:19:42.000 --> 02:19:44.000
Muss ich aber neu laden.

02:19:44.000 --> 02:19:46.000
Ja, das mit Sicherheit Websockets.

02:19:48.000 --> 02:19:50.000
Ja, guck, der macht keine Request.

02:19:50.000 --> 02:19:52.000
Der hat hier oben

02:19:52.000 --> 02:19:54.000
GraphQL

02:19:54.000 --> 02:19:56.000
Wo ist die Websocket-Verbindung?

02:19:56.000 --> 02:19:58.000
Ich sehe sie nicht.

02:19:58.000 --> 02:20:00.000
Ich lade nochmal neu ohne

02:20:00.000 --> 02:20:02.000
ohne Cache.

02:20:04.000 --> 02:20:06.000
Zack.

02:20:06.000 --> 02:20:08.000
Also normalen Request könnten es nicht sein,

02:20:08.000 --> 02:20:10.000
sonst wird das Ganze

02:20:10.000 --> 02:20:12.000
Ist Hot Chocolate nur in Verbindung mit GraphQL geeignet?

02:20:12.000 --> 02:20:14.000
Hot Chocolate ist eine GraphQL-Implementierung.

02:20:20.000 --> 02:20:22.000
Sollte hier vorne nicht irgendwas von Upgrade

02:20:22.000 --> 02:20:24.000
oder so drinstehen, wenn es Websocket ist?

02:20:28.000 --> 02:20:30.000
Es funktioniert so ungefähr.

02:20:34.000 --> 02:20:36.000
Okay, es sind keine Websockets, aber was ist es dann,

02:20:36.000 --> 02:20:38.000
wenn es keine Websockets sind?

02:20:38.000 --> 02:20:40.000
Das müssen Websockets sein.

02:20:42.000 --> 02:20:44.000
Sonst müsste ja da irgendwas passieren.

02:20:46.000 --> 02:20:48.000
Magic.

02:20:50.000 --> 02:20:52.000
Das sind bestimmt Websockets.

02:21:00.000 --> 02:21:02.000
GraphQL

02:21:04.000 --> 02:21:06.000
Upgrade.

02:21:06.000 --> 02:21:08.000
Ne.

02:21:08.000 --> 02:21:10.000
Upgrade ist doch das

02:21:10.000 --> 02:21:12.000
für Webrequests. Upgrade-Header.

02:21:18.000 --> 02:21:20.000
Ne.

02:21:22.000 --> 02:21:24.000
Das ist was anderes.

02:21:26.000 --> 02:21:28.000
Ist das toll? Also das, was ich bis jetzt

02:21:28.000 --> 02:21:30.000
von gesehen habe, ist ultra nice.

02:21:30.000 --> 02:21:32.000
Ah, wirklich.

02:21:32.000 --> 02:21:34.000
Poggers nice.

02:21:34.000 --> 02:21:36.000
Keine Ahnung, aber es müssen Websockets sein.

02:21:36.000 --> 02:21:38.000
Guck mal, ich kriege jetzt

02:21:38.000 --> 02:21:40.000
live mit, wenn neue User angelegt werden.

02:21:40.000 --> 02:21:42.000
Ist doch ultra...

02:21:42.000 --> 02:21:44.000
Was ich bei den anderen Sachen...

02:21:44.000 --> 02:21:46.000
Bei den anderen Sachen müsste ich bestimmt 500

02:21:46.000 --> 02:21:48.000
Zeug programmieren, dass das funktioniert.

02:21:48.000 --> 02:21:50.000
So, jetzt noch die Telefonnummer dabei.

02:21:50.000 --> 02:21:52.000
Bam.

02:21:52.000 --> 02:21:54.000
Wunderbar.

02:21:56.000 --> 02:21:58.000
Das IP-Traff.

02:21:58.000 --> 02:22:00.000
Was? Warum?

02:22:00.000 --> 02:22:02.000
Ich kann Wireshark anbauen, wenn du willst.

02:22:02.000 --> 02:22:04.000
Push GraphQL zum Client.

02:22:04.000 --> 02:22:06.000
Ja, über Websockets.

02:22:06.000 --> 02:22:08.000
Ist das.

02:22:08.000 --> 02:22:10.000
Du musst

02:22:10.000 --> 02:22:12.000
vom Client aus das hier machen.

02:22:14.000 --> 02:22:16.000
Du musst vom Client aus

02:22:16.000 --> 02:22:18.000
sagen hier, ich will

02:22:18.000 --> 02:22:20.000
subscriben.

02:22:20.000 --> 02:22:22.000
Zum Beispiel auf onUserCreated.

02:22:22.000 --> 02:22:24.000
OnUserCreated musst du dann hier anlegen.

02:22:24.000 --> 02:22:26.000
Aber das ist jetzt alles an Code, was man braucht.

02:22:26.000 --> 02:22:28.000
Also

02:22:28.000 --> 02:22:30.000
onUserCreated.

02:22:30.000 --> 02:22:32.000
Darauf kannst du subscriben.

02:22:32.000 --> 02:22:34.000
Und dann kriegst du immer

02:22:34.000 --> 02:22:36.000
neue User. Und ich lege hier

02:22:36.000 --> 02:22:38.000
fake-mäßig im Hintergrund jedes Sekunde

02:22:38.000 --> 02:22:40.000
den User an.

02:22:40.000 --> 02:22:42.000
Mit Fake-Daten.

02:22:42.000 --> 02:22:44.000
Aber es funktioniert.

02:22:44.000 --> 02:22:46.000
Also ich kriege einmal in der Sekunde

02:22:46.000 --> 02:22:48.000
ein Update auf den Client. Und was daran

02:22:48.000 --> 02:22:50.000
richtig cool ist...

02:22:50.000 --> 02:22:52.000
Weil wie gesagt, ich will das ja verwenden

02:22:52.000 --> 02:22:54.000
für die... Ach genau, ich wollte euch ja zeigen an...

02:22:54.000 --> 02:22:56.000
Ich wollte euch ja was hier im...

02:22:56.000 --> 02:22:58.000
In der Anwendung zeigen und ich habe

02:22:58.000 --> 02:23:00.000
schon wieder vergessen, was ich euch zeigen wollte.

02:23:00.000 --> 02:23:02.000
Wofür ich das

02:23:02.000 --> 02:23:04.000
verwenden will ist, wenn man

02:23:04.000 --> 02:23:06.000
Aufnahmen hat und die filtern will.

02:23:06.000 --> 02:23:08.000
Und da ist das mit einer

02:23:08.000 --> 02:23:10.000
Subscription dazu natürlich richtig cool.

02:23:10.000 --> 02:23:12.000
Wenn man dann beispielsweise gerade

02:23:12.000 --> 02:23:14.000
guckt und

02:23:14.000 --> 02:23:16.000
schaut sich die Aufnahmen

02:23:16.000 --> 02:23:18.000
von der Kamera an und es kommt gerade eine neue dabei,

02:23:18.000 --> 02:23:20.000
dann bäm ist die automatisch mit

02:23:20.000 --> 02:23:22.000
Subscription da in der Liste.

02:23:22.000 --> 02:23:24.000
Ohne, dass man was refreshen muss.

02:23:24.000 --> 02:23:26.000
Bisher mache ich es

02:23:26.000 --> 02:23:28.000
über Signal A.

02:23:28.000 --> 02:23:30.000
Solche Geschichten, wenn die Aufnahme fertig ist.

02:23:30.000 --> 02:23:32.000
Zum Beispiel...

02:23:32.000 --> 02:23:34.000
Wenn...

02:23:34.000 --> 02:23:36.000
Hab ich das hier überhaupt drin?

02:23:36.000 --> 02:23:38.000
Capture...

02:23:38.000 --> 02:23:40.000
Ah ne.

02:23:40.000 --> 02:23:42.000
Ok, die Version ist ja uralt.

02:23:42.000 --> 02:23:44.000
Deff, Moment.

02:23:46.000 --> 02:23:48.000
Capture...

02:23:48.000 --> 02:23:50.000
Was mit Result müsste das heißen.

02:23:50.000 --> 02:23:52.000
Hier, genau. Also aktuell mache ich so...

02:23:52.000 --> 02:23:54.000
Das ist quasi

02:23:54.000 --> 02:23:56.000
auch über Websockets.

02:23:56.000 --> 02:23:58.000
So eine Microsoft Library um Websockets drum herum.

02:23:58.000 --> 02:24:00.000
Also sprich,

02:24:00.000 --> 02:24:02.000
mein Backend schickt

02:24:02.000 --> 02:24:04.000
eine Capture Result Message und da

02:24:04.000 --> 02:24:06.000
steht dann drinne

02:24:06.000 --> 02:24:08.000
was für eine Aufnahme gerade läuft.

02:24:08.000 --> 02:24:10.000
Was für eine Aufnahme gestartet wurde.

02:24:10.000 --> 02:24:12.000
Was für eine Aufnahme gerade fertig ist.

02:24:14.000 --> 02:24:16.000
Und dann füge ich das

02:24:16.000 --> 02:24:18.000
automatisch hier hinzu. Und das

02:24:18.000 --> 02:24:20.000
könnte ich mir alles sparen. Und auch hier oben

02:24:20.000 --> 02:24:22.000
die Logik, das könnte ich mir alles sparen.

02:24:22.000 --> 02:24:24.000
Und über GraphQL machen.

02:24:24.000 --> 02:24:26.000
Und das macht das alles für mich

02:24:26.000 --> 02:24:28.000
im Hintergrund. Das ist doch nice.

02:24:28.000 --> 02:24:30.000
Ich glaube,

02:24:30.000 --> 02:24:32.000
das ist eine gute Idee das einzubauen.

02:24:34.000 --> 02:24:36.000
Funktioniert gut. Würde für den

02:24:36.000 --> 02:24:38.000
Anwendungsfall auch gRPC gehen.

02:24:38.000 --> 02:24:40.000
Ehrlich gesagt, ich habe mit gRPC so gut wie nichts gemacht.

02:24:40.000 --> 02:24:42.000
Ich weiß, dass gRPC

02:24:42.000 --> 02:24:44.000
binary ist.

02:24:44.000 --> 02:24:46.000
Wohingegen der Kram hier ja alles

02:24:46.000 --> 02:24:48.000
plaintext ist.

02:24:48.000 --> 02:24:50.000
Und man könnte

02:24:50.000 --> 02:24:52.000
sowas sicherlich auch mit gRPC machen.

02:24:52.000 --> 02:24:54.000
Allerdings

02:24:56.000 --> 02:24:58.000
dann musst du viel mehr selbst programmieren

02:24:58.000 --> 02:25:00.000
wenn du das mit gRPC machen willst.

02:25:00.000 --> 02:25:02.000
Weil

02:25:02.000 --> 02:25:04.000
sowas hier zum Beispiel

02:25:04.000 --> 02:25:06.000
mit dem

02:25:06.000 --> 02:25:08.000
mit Filtern und sowas

02:25:08.000 --> 02:25:10.000
was wir hier vorhin gemacht haben.

02:25:10.000 --> 02:25:12.000
Du kannst ja auch easy filtern.

02:25:12.000 --> 02:25:14.000
Zum Beispiel User

02:25:14.000 --> 02:25:16.000
wo die E-Mail Adresse mit

02:25:16.000 --> 02:25:18.000
addgmail.com

02:25:18.000 --> 02:25:20.000
aufhört.

02:25:20.000 --> 02:25:22.000
Das dauert jetzt ein bisschen, weil die Datenbank

02:25:22.000 --> 02:25:24.000
ist fucking groß.

02:25:24.000 --> 02:25:26.000
Jetzt habe ich 2 Millionen Sachen für generiert.

02:25:28.000 --> 02:25:30.000
Aber das ist halt eine easy Geschichte.

02:25:30.000 --> 02:25:32.000
Das müsstest du mit

02:25:32.000 --> 02:25:34.000
gRPC oder

02:25:34.000 --> 02:25:36.000
über REST oder sonst wie den alles selbst programmieren.

02:25:36.000 --> 02:25:38.000
Und hier kriegst du das halt mit eingebaut.

02:25:38.000 --> 02:25:40.000
Was ziemlich nice ist.

02:25:40.000 --> 02:25:42.000
Wie sieht dann der Code dafür

02:25:42.000 --> 02:25:44.000
im Frontend aus?

02:25:44.000 --> 02:25:46.000
Das kann ich euch jetzt

02:25:46.000 --> 02:25:48.000
nicht live hier zeigen, weil ich habe ja

02:25:48.000 --> 02:25:50.000
kein wirkliches Frontend. Ich habe ja nur diesen

02:25:50.000 --> 02:25:52.000
Test-Baukasten.

02:25:52.000 --> 02:25:54.000
Das letzte Mal habe ich hier

02:25:54.000 --> 02:25:56.000
drüber gemacht.

02:25:58.000 --> 02:26:00.000
Da drüber.

02:26:00.000 --> 02:26:02.000
Apollo ist

02:26:02.000 --> 02:26:04.000
ein CraftQL Client.

02:26:04.000 --> 02:26:06.000
Ich habe jetzt gerade gesehen, dass

02:26:06.000 --> 02:26:08.000
die Hot Chocolate Dudes

02:26:10.000 --> 02:26:12.000
wo wir die Library von verwenden, dass

02:26:12.000 --> 02:26:16.000
sie auch einen

02:26:16.000 --> 02:26:18.000
JavaScript Client oder sowas

02:26:18.000 --> 02:26:20.000
haben.

02:26:20.000 --> 02:26:22.000
Ach, das ist ein C Sharp Client.

02:26:22.000 --> 02:26:24.000
Ok.

02:26:24.000 --> 02:26:26.000
Das hier habe ich letztes Mal verwenden.

02:26:26.000 --> 02:26:28.000
Apollo ist wohl eine CraftQL

02:26:28.000 --> 02:26:30.000
JavaScript Library.

02:26:30.000 --> 02:26:32.000
Und

02:26:32.000 --> 02:26:34.000
ich meine,

02:26:34.000 --> 02:26:36.000
wir können uns ja mal kurz hier diesen

02:26:36.000 --> 02:26:38.000
Getting Started angucken.

02:26:38.000 --> 02:26:40.000
Das ist

02:26:40.000 --> 02:26:42.000
relativ einfach zu benutzen.

02:26:42.000 --> 02:26:44.000
Also

02:26:44.000 --> 02:26:46.000
man kann das Ganze installieren

02:26:46.000 --> 02:26:48.000
über die Vue CLI.

02:26:50.000 --> 02:26:52.000
Einfach das da und gut ist.

02:26:52.000 --> 02:26:54.000
Und verwenden tut man es folgendermaßen.

02:26:58.000 --> 02:27:00.000
Genau.

02:27:00.000 --> 02:27:02.000
Man macht hier in seinem

02:27:02.000 --> 02:27:04.000
also man muss einmal hier diese Geschichte importieren.

02:27:04.000 --> 02:27:06.000
Und dort, wo man normalerweise

02:27:06.000 --> 02:27:08.000
sonst seine Variablen,

02:27:08.000 --> 02:27:10.000
also seine Data, seine Methoden

02:27:10.000 --> 02:27:12.000
und sonst was in der Vue

02:27:12.000 --> 02:27:14.000
Component anlegt.

02:27:14.000 --> 02:27:16.000
In der Vue.js Component

02:27:16.000 --> 02:27:18.000
kann man jetzt noch zusätzlich diese

02:27:18.000 --> 02:27:20.000
Apollo

02:27:22.000 --> 02:27:24.000
Referenz auf Apollo

02:27:24.000 --> 02:27:26.000
oder was das ist da verwenden.

02:27:26.000 --> 02:27:28.000
Und da schreibst du einfach deinen Query rein.

02:27:28.000 --> 02:27:30.000
Und was der dann unter der Haube macht ist,

02:27:30.000 --> 02:27:32.000
der macht so eine Abfrage hier

02:27:32.000 --> 02:27:34.000
zum Server.

02:27:34.000 --> 02:27:36.000
Man kann da auch Parameter und sowas übergeben.

02:27:36.000 --> 02:27:38.000
Macht eine Abfrage zum Server

02:27:38.000 --> 02:27:40.000
und legt automatisch

02:27:40.000 --> 02:27:42.000
eine

02:27:42.000 --> 02:27:44.000
Data Variable an,

02:27:44.000 --> 02:27:46.000
die man in dieser

02:27:46.000 --> 02:27:48.000
Vue Komponente verwenden kann.

02:27:48.000 --> 02:27:50.000
Also eigentlich ist das hier mehr oder weniger alles,

02:27:50.000 --> 02:27:52.000
was du brauchst.

02:27:54.000 --> 02:27:56.000
Also für ein normales Query.

02:27:56.000 --> 02:27:58.000
Subscription müsste man dann halt sowas hier reinschreiben.

02:27:58.000 --> 02:28:00.000
Das können wir vielleicht

02:28:00.000 --> 02:28:02.000
im nächsten Stream oder so machen,

02:28:02.000 --> 02:28:04.000
dass wir mit einem Vue.js Frontend probieren.

02:28:04.000 --> 02:28:06.000
Das können wir echt machen, das ist eine gute Idee.

02:28:06.000 --> 02:28:08.000
GRPC müssen wir auch noch irgendwann mal

02:28:08.000 --> 02:28:10.000
ausprobieren.

02:28:10.000 --> 02:28:12.000
Noch nichts gemacht.

02:28:12.000 --> 02:28:14.000
Und wie das halt so ist.

02:28:18.000 --> 02:28:20.000
Wo davon ausreden?

02:28:20.000 --> 02:28:22.000
WLAN? Ach so.

02:28:22.000 --> 02:28:24.000
Alter, wo habe ich denn meine Stream Ideen?

02:28:24.000 --> 02:28:26.000
Hier.

02:28:26.000 --> 02:28:28.000
Hab ich da schon GRPC drinne?

02:28:28.000 --> 02:28:34.000
Wie mache ich das denn überhaupt mit Notepad auf?

02:28:36.000 --> 02:28:38.000
Ach, es gibt tatsächlich wieder mal neue Emotes.

02:28:38.000 --> 02:28:40.000
Poggers.

02:28:42.000 --> 02:28:44.000
So, genau. Und das hier muss man im Frontend machen.

02:28:44.000 --> 02:28:46.000
Das können wir vielleicht hier wirklich ausprobieren.

02:28:46.000 --> 02:28:48.000
So ein Mini Vue.js

02:28:48.000 --> 02:28:50.000
Vue.tifile,

02:28:50.000 --> 02:28:52.000
sonst was Frontend.

02:28:54.000 --> 02:28:56.000
Wenn du noch

02:28:56.000 --> 02:28:58.000
20 mehr Emotes, Slots füllen willst,

02:28:58.000 --> 02:29:00.000
dann brauchst du doch noch 5 Desktops mehr.

02:29:02.000 --> 02:29:04.000
Ich habe irgendwie schon wirklich genug Desktops.

02:29:06.000 --> 02:29:08.000
Der Witz ist ja,

02:29:08.000 --> 02:29:10.000
dass, es heißt

02:29:10.000 --> 02:29:12.000
ja eigentlich virtuelle Desktops,

02:29:12.000 --> 02:29:14.000
aber das einzige,

02:29:14.000 --> 02:29:16.000
was nicht virtualisiert ist bei virtuellen

02:29:16.000 --> 02:29:18.000
Desktops, ist der Desktop.

02:29:18.000 --> 02:29:20.000
Und by the way, Windows ruckelt, wenn man mehrere

02:29:20.000 --> 02:29:22.000
Emotes. Seht ihr das?

02:29:22.000 --> 02:29:26.000
Es ruckelt.

02:29:26.000 --> 02:29:28.000
High Performance Windows.

02:29:40.000 --> 02:29:42.000
Zeit für Upgrade.

02:29:42.000 --> 02:29:44.000
Das ist

02:29:44.000 --> 02:29:46.000
das einzige,

02:29:46.000 --> 02:29:48.000
was man im Frontend machen muss.

02:29:48.000 --> 02:29:50.000
Aber das können wir mal in einem der nächsten

02:29:50.000 --> 02:29:52.000
vielleicht machen wir es doch gleich morgen im nächsten Stream.

02:29:52.000 --> 02:29:54.000
Dann mache ich morgen ein bisschen früher Stream an.

02:29:54.000 --> 02:29:56.000
Heute war ich ja ein bisschen spät wieder.

02:29:56.000 --> 02:29:58.000
Lieber morgen Mittag oder so.

02:29:58.000 --> 02:30:00.000
Morgen früh muss ich erstmal zum Zahnarzt,

02:30:00.000 --> 02:30:02.000
aber wird nichts gemacht.

02:30:02.000 --> 02:30:04.000
Der will mir bloß irgendwie erzählen, ich soll

02:30:04.000 --> 02:30:06.000
irgendwas teures bei ihm machen lassen.

02:30:06.000 --> 02:30:08.000
Und dann muss ich dann

02:30:08.000 --> 02:30:10.000
den Zahnarzt machen.

02:30:10.000 --> 02:30:12.000
Was teures bei ihm machen lassen,

02:30:12.000 --> 02:30:14.000
vermute ich mal.

02:30:16.000 --> 02:30:18.000
Ja.

02:30:18.000 --> 02:30:20.000
Aber das gefällt mir.

02:30:20.000 --> 02:30:22.000
Also das gefällt mir wirklich gut hier, die ganzen

02:30:22.000 --> 02:30:24.000
Craftgrillen. Und auch mit den Subscriptions

02:30:24.000 --> 02:30:26.000
scheint relativ

02:30:26.000 --> 02:30:28.000
easy zu sein, wenn man das

02:30:28.000 --> 02:30:30.000
nicht nach dieser komischen Doku Seite macht.

02:30:30.000 --> 02:30:32.000
Oder noch schlimmer, wenn man das nicht

02:30:32.000 --> 02:30:34.000
Alter, was geht mir denn ab hier?

02:30:34.000 --> 02:30:36.000
Ich mein, guckt euch das mal an.

02:30:36.000 --> 02:30:38.000
Was?

02:30:38.000 --> 02:30:40.000
Die, die, die machen hier.

02:30:40.000 --> 02:30:42.000
Das ist, die legen

02:30:42.000 --> 02:30:44.000
Gott und die Welt an. Ich hab keine Ahnung, was da

02:30:44.000 --> 02:30:46.000
eigentlich alles passiert, was die hier machen.

02:30:46.000 --> 02:30:48.000
Deswegen finde ich, dass

02:30:48.000 --> 02:30:50.000
die besten Guides

02:30:50.000 --> 02:30:52.000
und die beste Doku

02:30:52.000 --> 02:30:54.000
bei den Projekten ist,

02:30:54.000 --> 02:30:56.000
die minimalste

02:30:56.000 --> 02:30:58.000
funktionale

02:30:58.000 --> 02:31:00.000
Beispiele drin haben.

02:31:00.000 --> 02:31:02.000
Also sprich, wenn die sagen, okay,

02:31:02.000 --> 02:31:04.000
ähm, wir, wir, wir

02:31:04.000 --> 02:31:06.000
erzählen euch jetzt, wie man das Subscription

02:31:06.000 --> 02:31:08.000
Feature benutzt, dann ein Beispiel, was drei

02:31:08.000 --> 02:31:10.000
Zeilen lang ist. Und danach

02:31:10.000 --> 02:31:12.000
noch ein Beispiel, was drei Zeilen lang ist.

02:31:12.000 --> 02:31:14.000
Weil dann kapierst du's auch

02:31:14.000 --> 02:31:16.000
und kannst dir da ein eigenes Bild drauf machen.

02:31:16.000 --> 02:31:18.000
Das hier, das ist ja

02:31:18.000 --> 02:31:20.000
Overkill Extrem, Alter.

02:31:22.000 --> 02:31:24.000
Was machen die da alles?

02:31:24.000 --> 02:31:26.000
Ich weiß nicht mehr, was die da überhaupt alles anlegen.

02:31:28.000 --> 02:31:30.000
Und das eigentlich Wichtige ist,

02:31:30.000 --> 02:31:32.000
Subscription

02:31:32.000 --> 02:31:34.000
äh

02:31:34.000 --> 02:31:36.000
Wie hieß das Ding?

02:31:36.000 --> 02:31:38.000
Dieses Subscription

02:31:38.000 --> 02:31:40.000
Class von denen?

02:31:42.000 --> 02:31:44.000
Ich finde es noch nicht mal auf

02:31:44.000 --> 02:31:46.000
der Seite.

02:31:46.000 --> 02:31:48.000
Äh

02:31:52.000 --> 02:31:54.000
Session Subscription

02:31:58.000 --> 02:32:00.000
So, das, das hier

02:32:00.000 --> 02:32:02.000
ist das Beispiel, was man braucht.

02:32:10.000 --> 02:32:12.000
Einfach ein Beispiel, so macht man ein Event

02:32:12.000 --> 02:32:14.000
und so löst man's aus. Fertig.

02:32:14.000 --> 02:32:16.000
Und am besten, komplett ohne

02:32:16.000 --> 02:32:18.000
Client, Code und alles,

02:32:18.000 --> 02:32:20.000
einfach erstmal nur Server-Seite, weil man kann das

02:32:20.000 --> 02:32:22.000
garantiert auch irgendwie Server-Seite verwenden.

02:32:22.000 --> 02:32:24.000
Viel besser, anstatt

02:32:24.000 --> 02:32:26.000
hier riesen, riesen Dinger zu schreiben. Ich meine, klar.

02:32:26.000 --> 02:32:28.000
Die, das hier ist ja auch,

02:32:28.000 --> 02:32:30.000
man darf jetzt nicht übertreiben, das hier scheint

02:32:30.000 --> 02:32:32.000
ja auch irgendwie so ein, so ein

02:32:32.000 --> 02:32:34.000
Workshop zu sein, der aufeinander aufbaut.

02:32:34.000 --> 02:32:36.000
So How to CraftQL, okay.

02:32:38.000 --> 02:32:40.000
Aber auch hier

02:32:40.000 --> 02:32:42.000
in der Doku-Seite, also das

02:32:42.000 --> 02:32:44.000
und eins muss man echt sagen, bei diesem

02:32:44.000 --> 02:32:46.000
Projekt, die machen ganz schön viel Magic, ne?

02:32:46.000 --> 02:32:48.000
Die injecten

02:32:48.000 --> 02:32:50.000
hier irgendwelche Services mit

02:32:50.000 --> 02:32:52.000
iTopic-Events an, was auch immer es ist,

02:32:52.000 --> 02:32:54.000
wo auch immer es herkommt.

02:32:54.000 --> 02:32:56.000
Ähm

02:32:56.000 --> 02:32:58.000
dann haben sie noch irgendwie zig

02:32:58.000 --> 02:33:00.000
Attribute oben drauf.

02:33:00.000 --> 02:33:02.000
Und, und solche

02:33:02.000 --> 02:33:04.000
Big Brain-Dinger, also

02:33:04.000 --> 02:33:06.000
sonderlich klar ist es nicht.

02:33:08.000 --> 02:33:10.000
Kennt ihr ein gutes Notiz-Tool, das hier?

02:33:14.000 --> 02:33:16.000
Oh, hab ich gar nicht installiert.

02:33:16.000 --> 02:33:18.000
Das hier.

02:33:18.000 --> 02:33:20.000
Das ist zwar nicht das

02:33:20.000 --> 02:33:22.000
beste, was du

02:33:22.000 --> 02:33:24.000
so kriegst,

02:33:24.000 --> 02:33:26.000
aber

02:33:26.000 --> 02:33:28.000
installier es mal kurz.

02:33:28.000 --> 02:33:30.000
Kompiliert er das jetzt

02:33:30.000 --> 02:33:32.000
selbst, wenn ich das installiere?

02:33:36.000 --> 02:33:38.000
Ich will nicht, dass er selbst kompiliert, ich will einfach, dass er es installiert.

02:33:38.000 --> 02:33:40.000
Vielleicht soll ich das

02:33:40.000 --> 02:33:42.000
App-Image nehmen.

02:33:48.000 --> 02:33:50.000
Oh ja, der installiert

02:33:50.000 --> 02:33:52.000
das selbst.

02:33:52.000 --> 02:33:54.000
Ich sollte mein App...

02:33:54.000 --> 02:33:56.000
Ich nehme das App-Image.

02:34:04.000 --> 02:34:06.000
Ja.

02:34:06.000 --> 02:34:08.000
Das ist vielleicht nicht das beste

02:34:08.000 --> 02:34:10.000
Notiz-Programm, aber

02:34:10.000 --> 02:34:12.000
es ist das cross-platformste

02:34:12.000 --> 02:34:14.000
Notiz-Programm, Open Source

02:34:14.000 --> 02:34:16.000
Notiz-Programm, was du findest.

02:34:16.000 --> 02:34:18.000
Das da.

02:34:28.000 --> 02:34:30.000
Das nicht startet.

02:34:30.000 --> 02:34:32.000
Tja, ich hab nichts gesagt.

02:34:36.000 --> 02:34:38.000
Ich hatte das schon mal, dass das

02:34:38.000 --> 02:34:40.000
App-Image nicht starten wollte.

02:34:42.000 --> 02:34:44.000
Okay.

02:34:44.000 --> 02:34:46.000
Ich weiß nicht, woran es liegt.

02:34:50.000 --> 02:34:52.000
Sieht gut aus.

02:34:56.000 --> 02:34:58.000
NPM?

02:34:58.000 --> 02:35:00.000
Ich will kein NPM installieren.

02:35:00.000 --> 02:35:02.000
Geh mal fort. Will er den

02:35:02.000 --> 02:35:04.000
gerade... Moment, das ist doch uralt.

02:35:04.000 --> 02:35:06.000
Das ist doch uralt.

02:35:08.000 --> 02:35:10.000
1,3

02:35:10.000 --> 02:35:12.000
Das ist doch

02:35:12.000 --> 02:35:14.000
uralt, oder?

02:35:20.000 --> 02:35:22.000
Ja, das ist

02:35:22.000 --> 02:35:24.000
uralt.

02:35:24.000 --> 02:35:26.000
Ich übertreib's mal.

02:35:26.000 --> 02:35:28.000
Jetzt installiert er mir das halbe Internet.

02:35:28.000 --> 02:35:30.000
Gehst du weg?

02:35:32.000 --> 02:35:34.000
Gleich wieder alles deinstallieren.

02:35:34.000 --> 02:35:36.000
Alles weg hier.

02:35:36.000 --> 02:35:38.000
Hat er sonst noch als

02:35:38.000 --> 02:35:40.000
Abhängigkeit irgendwas

02:35:40.000 --> 02:35:42.000
installiert?

02:35:42.000 --> 02:35:44.000
Gehst du weg.

02:35:46.000 --> 02:35:48.000
Wieder alles weg hier.

02:35:52.000 --> 02:35:54.000
Geht so nicht.

02:35:58.000 --> 02:36:00.000
Alles weg.

02:36:00.000 --> 02:36:02.000
Org! Der hat den Org

02:36:02.000 --> 02:36:04.000
installiert.

02:36:04.000 --> 02:36:06.000
Er hat den Org installiert.

02:36:10.000 --> 02:36:12.000
Das Org.

02:36:12.000 --> 02:36:14.000
Kennst du eigentlich

02:36:14.000 --> 02:36:16.000
GNS3?

02:36:16.000 --> 02:36:18.000
Was war das nochmal?

02:36:18.000 --> 02:36:20.000
Das sagt mir irgendwas.

02:36:20.000 --> 02:36:22.000
Was ist denn das?

02:36:24.000 --> 02:36:26.000
Ach, genau.

02:36:26.000 --> 02:36:28.000
Das ist dieser

02:36:28.000 --> 02:36:30.000
Packet Tracer nur in

02:36:30.000 --> 02:36:32.000
besser.

02:36:32.000 --> 02:36:34.000
Ja.

02:36:34.000 --> 02:36:36.000
Was mich da ein bisschen abgeschreckt hat,

02:36:36.000 --> 02:36:38.000
korrigiert mich, wenn ich falsch liege.

02:36:38.000 --> 02:36:40.000
Ich bin mir nämlich nicht sicher, ob es das ist,

02:36:40.000 --> 02:36:42.000
dass man für die Switche quasi

02:36:42.000 --> 02:36:44.000
teilweise

02:36:44.000 --> 02:36:46.000
VMs starten muss und sich irgendwo

02:36:46.000 --> 02:36:48.000
Firmware runterladen muss für die

02:36:48.000 --> 02:36:50.000
Switche, dass man die richtig verwenden kann,

02:36:50.000 --> 02:36:52.000
falls das das ist. Es könnte aber was anderes

02:36:52.000 --> 02:36:54.000
gewesen sein.

02:36:54.000 --> 02:36:56.000
Das fand ich etwas nervig.

02:36:58.000 --> 02:37:00.000
Deswegen finde ich den Cisco

02:37:00.000 --> 02:37:02.000
Tracer, um irgendwelchen Azubis

02:37:02.000 --> 02:37:04.000
was zu zeigen, immer noch sehr nice.

02:37:06.000 --> 02:37:08.000
Warum kriege ich mein

02:37:08.000 --> 02:37:10.000
Notizprogramm hier nicht installiert? Was ist da

02:37:10.000 --> 02:37:12.000
los?

02:37:14.000 --> 02:37:16.000
App Image,

02:37:16.000 --> 02:37:18.000
vollkommen okay.

02:37:18.000 --> 02:37:26.000
Clean Bild, jawoll.

02:37:32.000 --> 02:37:34.000
Die besten

02:37:34.000 --> 02:37:36.000
Note Modules ist odd is even.

02:37:36.000 --> 02:37:38.000
War das nicht, Moment,

02:37:38.000 --> 02:37:40.000
hier, war nicht

02:37:40.000 --> 02:37:42.000
bei einem von beiden dieser Packages

02:37:42.000 --> 02:37:44.000
hatten die da nicht ein Problem

02:37:44.000 --> 02:37:46.000
letztens, dass irgendwie einer das

02:37:46.000 --> 02:37:48.000
Package entweder unpublished

02:37:48.000 --> 02:37:50.000
hat oder, dass

02:37:50.000 --> 02:37:52.000
irgendwas

02:37:52.000 --> 02:37:54.000
Breaking Change drinne war

02:37:54.000 --> 02:37:56.000
und irgendwie 5 Milliarden Projekte

02:37:56.000 --> 02:37:58.000
sind kaputt gegangen.

02:37:58.000 --> 02:38:00.000
Da war doch irgendwas. Da war doch

02:38:00.000 --> 02:38:02.000
letztens irgendwas, ey.

02:38:04.000 --> 02:38:06.000
Ja, was Crypts, Cancer Dependencies, ey.

02:38:06.000 --> 02:38:08.000
Sag mal.

02:38:12.000 --> 02:38:14.000
Warum startet das nicht?

02:38:18.000 --> 02:38:20.000
What the fuck?

02:38:28.000 --> 02:38:30.000
Okay.

02:38:30.000 --> 02:38:32.000
Okay.

02:38:34.000 --> 02:38:36.000
Wo liegt denn das App Image überhaupt?

02:38:38.000 --> 02:38:40.000
Wow, naja.

02:38:42.000 --> 02:38:44.000
Guck mal, Find

02:38:44.000 --> 02:38:46.000
App Image.

02:38:46.000 --> 02:38:48.000
Hier.

02:38:48.000 --> 02:38:50.000
Ja, irgendwo, irgendwo, wahrscheinlich

02:38:50.000 --> 02:38:52.000
vielleicht User irgendwo wird es sein,

02:38:52.000 --> 02:38:54.000
hä?

02:38:54.000 --> 02:38:56.000
Wo liegt das überhaupt?

02:38:56.000 --> 02:38:58.000
Ja.

02:38:58.000 --> 02:39:00.000
Da ist es, nee.

02:39:02.000 --> 02:39:04.000
Okay, ähm, wie

02:39:04.000 --> 02:39:06.000
konnte man sich auch mal anzeigen lassen, wo

02:39:06.000 --> 02:39:08.000
ein Package liegt?

02:39:14.000 --> 02:39:16.000
Wo liegt da das Ganze hin?

02:39:18.000 --> 02:39:20.000
Okay.

02:39:20.000 --> 02:39:22.000
Wo liegt da das Ganze hin?

02:39:24.000 --> 02:39:26.000
Okay, das downloadet er sich.

02:39:26.000 --> 02:39:28.000
Exzellent.

02:39:28.000 --> 02:39:30.000
Wir können es jetzt mal downloaden und von Hand ausführen.

02:39:30.000 --> 02:39:32.000
Wo liegt denn den Kram hin?

02:39:32.000 --> 02:39:34.000
Wo ist das Build File?

02:39:34.000 --> 02:39:36.000
View Package Build.

02:39:40.000 --> 02:39:42.000
Äh, okay, wo

02:39:42.000 --> 02:39:58.000
liegt der das hin? User Share.

02:39:58.000 --> 02:40:00.000
Opt.

02:40:00.000 --> 02:40:02.000
Opt.

02:40:02.000 --> 02:40:04.000
App Images.

02:40:04.000 --> 02:40:06.000
Da ist es.

02:40:08.000 --> 02:40:10.000
Ich hab keinen Fuse installiert.

02:40:10.000 --> 02:40:12.000
What?

02:40:12.000 --> 02:40:14.000
Echt nicht?

02:40:14.000 --> 02:40:16.000
Doch.

02:40:16.000 --> 02:40:18.000
Hab ich.

02:40:20.000 --> 02:40:22.000
Kein Wunder, dass es überhaupt geht.

02:40:22.000 --> 02:40:24.000
What?

02:40:26.000 --> 02:40:28.000
Hab ich nicht?

02:40:36.000 --> 02:40:38.000
Hab ich vorhin ein Kernel Update gemacht?

02:40:38.000 --> 02:40:40.000
Ich hab doch vorhin ein

02:40:40.000 --> 02:40:42.000
Update gemacht, oder?

02:40:42.000 --> 02:40:44.000
Hab ich danach schon rebooted?

02:40:46.000 --> 02:40:48.000
Wenn nicht, mach ich das jetzt mal schnell.

02:40:50.000 --> 02:40:52.000
Daran könnte das nämlich liegen.

02:40:52.000 --> 02:40:54.000
Was ist das denn?

02:41:06.000 --> 02:41:08.000
Exquisite

02:41:08.000 --> 02:41:10.000
Bing, Foto

02:41:12.000 --> 02:41:14.000
Opt

02:41:14.000 --> 02:41:16.000
Ah

02:41:16.000 --> 02:41:18.000
Ah

02:41:18.000 --> 02:41:22.000
Alles klar.

02:41:22.000 --> 02:41:24.000
Gut, sehr gut, alles klar.

02:41:24.000 --> 02:41:26.000
Okay, ja, ich weiß nicht, ob derjenige, der

02:41:26.000 --> 02:41:28.000
noch Notizprogramme sucht,

02:41:28.000 --> 02:41:30.000
noch da ist. Also, das

02:41:30.000 --> 02:41:32.000
ist das Notizprogramm, was ich verwende.

02:41:32.000 --> 02:41:34.000
Natürlich

02:41:34.000 --> 02:41:36.000
mit dem besten Eintrag aller Zeiten.

02:41:36.000 --> 02:41:38.000
Subsgiften, natürlich.

02:41:40.000 --> 02:41:42.000
In die To Do Liste muss

02:41:42.000 --> 02:41:44.000
dann natürlich unbedingt natürlich

02:41:44.000 --> 02:41:46.000
noch rein.

02:41:46.000 --> 02:41:48.000
Max Prime

02:41:48.000 --> 02:41:50.000
Summon

02:41:50.000 --> 02:41:52.000
ganz essentiell.

02:41:52.000 --> 02:41:54.000
Das ist aber

02:41:54.000 --> 02:41:56.000
hoffentlich bei den meisten schon abgehakt.

02:41:56.000 --> 02:41:58.000
So,

02:41:58.000 --> 02:42:00.000
genau, und warum ich das verwende, ist folgendes.

02:42:00.000 --> 02:42:02.000
Das ist weder das Hübscheste

02:42:02.000 --> 02:42:04.000
hier verschmerzen.

02:42:04.000 --> 02:42:06.000
Ach, das war unser Nextcloud-Test.

02:42:06.000 --> 02:42:08.000
Könnte ich eigentlich mal wegschmeißen.

02:42:08.000 --> 02:42:10.000
Das ist weder das Hübscheste,

02:42:10.000 --> 02:42:12.000
noch das, das

02:42:12.000 --> 02:42:14.000
von den besten Features her.

02:42:14.000 --> 02:42:16.000
Aber, warum ich das verwende, ist

02:42:16.000 --> 02:42:18.000
erstens,

02:42:18.000 --> 02:42:20.000
integriert sich das so ziemlich in alle

02:42:20.000 --> 02:42:22.000
Sync-Lösungen, die es gibt, weil es

02:42:22.000 --> 02:42:24.000
unterstützt WebDAF Sync, direkt

02:42:24.000 --> 02:42:26.000
File Sync, man kann direkt mit Nextcloud

02:42:26.000 --> 02:42:28.000
Sync, wobei ich Nextcloud nicht mag, aber

02:42:28.000 --> 02:42:30.000
es funktioniert so ziemlich

02:42:30.000 --> 02:42:32.000
mit allen Sync-Sachen.

02:42:32.000 --> 02:42:34.000
Also, dementsprechend auch mit allen

02:42:34.000 --> 02:42:36.000
selbst gehosteten Sync-Sachen.

02:42:36.000 --> 02:42:38.000
Und, was mir

02:42:38.000 --> 02:42:40.000
an der Sache auch noch sehr gut gefällt,

02:42:40.000 --> 02:42:42.000
ist, dass es das wirklich für jedes

02:42:42.000 --> 02:42:44.000
Betriebssystem gibt. Also, außer

02:42:44.000 --> 02:42:46.000
Windows Phone.

02:42:46.000 --> 02:42:48.000
Aber ich glaube, da sind wir uns einig, Windows Phone

02:42:48.000 --> 02:42:50.000
brauchst du, kannst du vergessen.

02:42:50.000 --> 02:42:52.000
Sie haben übrigens auch einen nice Web

02:42:52.000 --> 02:42:54.000
Clipper Addon, wo man

02:42:54.000 --> 02:42:56.000
Screenshots und Sachen von Webseiten machen

02:42:56.000 --> 02:42:58.000
kann. Aber, man sieht

02:42:58.000 --> 02:43:00.000
schon, guck mal, es gibt es für Windows, gibt es für Mac, gibt es

02:43:00.000 --> 02:43:02.000
für Linux und gibt es für Android und gibt es für IOS.

02:43:02.000 --> 02:43:04.000
Das ist für mich, ehrlich gesagt,

02:43:04.000 --> 02:43:06.000
so das Killer-Kriterium, weil ich verwende

02:43:06.000 --> 02:43:08.000
alle Betriebssysteme

02:43:08.000 --> 02:43:10.000
außer macOS. macOS nicht

02:43:10.000 --> 02:43:12.000
wirklich, aber

02:43:12.000 --> 02:43:14.000
ansonsten alles.

02:43:20.000 --> 02:43:22.000
Deswegen mag ich das.

02:43:22.000 --> 02:43:24.000
Und, weil die

02:43:24.000 --> 02:43:26.000
auch ganz gut so ein paar native Features

02:43:26.000 --> 02:43:28.000
unterstützen von den jeweiligen Betriebssystemen,

02:43:28.000 --> 02:43:30.000
zum Beispiel, kann ich sagen,

02:43:30.000 --> 02:43:32.000
ähm,

02:43:32.000 --> 02:43:34.000
irgendwie Subskiften,

02:43:34.000 --> 02:43:36.000
ob es gerade

02:43:36.000 --> 02:43:38.000
um Desktop überhaupt geht,

02:43:38.000 --> 02:43:40.000
äh, Subskiften und jetzt kann man

02:43:40.000 --> 02:43:42.000
eben irgendwie sagen, Reminder.

02:43:42.000 --> 02:43:44.000
Irgendwo hier.

02:43:44.000 --> 02:43:46.000
Okay, nicht Datetime, fuck,

02:43:46.000 --> 02:43:48.000
bin ich doof.

02:43:50.000 --> 02:43:52.000
Mit der Android-Variante kann man jetzt auch

02:43:52.000 --> 02:43:54.000
wo ist denn das?

02:43:54.000 --> 02:44:04.000
Wo ist der Reminder?

02:44:08.000 --> 02:44:10.000
Blöd.

02:44:10.000 --> 02:44:24.000
Geht das nicht, weil mein Sync kaputt ist?

02:44:28.000 --> 02:44:30.000
Man konnte sich da doch mal

02:44:30.000 --> 02:44:32.000
nachdenken lassen, wenn ein Datum ansteht,

02:44:32.000 --> 02:44:34.000
äh.

02:44:36.000 --> 02:44:38.000
Wo ist es denn?

02:44:38.000 --> 02:44:40.000
Glocken oben rechts.

02:44:42.000 --> 02:44:44.000
Ah!

02:44:44.000 --> 02:44:46.000
Haben die das um, haben die das um,

02:44:46.000 --> 02:44:48.000
umgeschoben?

02:44:50.000 --> 02:44:52.000
Komisch.

02:44:52.000 --> 02:44:54.000
Genau, und

02:44:54.000 --> 02:44:56.000
man kann Alarm einstellen, wann das Ding

02:44:56.000 --> 02:44:58.000
eine Notification machen soll.

02:44:58.000 --> 02:45:00.000
Und das Gute daran ist,

02:45:00.000 --> 02:45:02.000
also gehen wir jetzt mal irgendwie, was weiß ich,

02:45:02.000 --> 02:45:04.000
Dezember,

02:45:04.000 --> 02:45:08.000
Dritter,

02:45:08.000 --> 02:45:10.000
auf

02:45:12.000 --> 02:45:14.000
21 Uhr 22.

02:45:14.000 --> 02:45:16.000
Okay.

02:45:16.000 --> 02:45:18.000
Aber das ist jetzt wahrscheinlich

02:45:18.000 --> 02:45:20.000
der Vorführeffekt, wahrscheinlich funktioniert

02:45:20.000 --> 02:45:22.000
es jetzt nicht.

02:45:22.000 --> 02:45:24.000
Und aber das Gute daran ist, dass diese Notifications

02:45:24.000 --> 02:45:26.000
native für die jeweilige

02:45:26.000 --> 02:45:28.000
Plattform funktionieren.

02:45:28.000 --> 02:45:30.000
Ah, habe ich 21 Uhr

02:45:30.000 --> 02:45:34.000
gemacht? Was?

02:45:36.000 --> 02:45:38.000
Habe ich 21 Uhr gemacht? Ups.

02:45:40.000 --> 02:45:42.000
Ah.

02:45:42.000 --> 02:45:44.000
Ja, gut.

02:45:44.000 --> 02:45:46.000
Dann machen wir das so

02:45:46.000 --> 02:45:48.000
und gleich nochmal in einer Minute.

02:45:50.000 --> 02:45:52.000
Wahrscheinlich funktioniert es jetzt eh nicht. So,

02:45:52.000 --> 02:45:54.000
und du hast, wenn

02:45:54.000 --> 02:45:56.000
dann diese Notifications aufploppen,

02:45:56.000 --> 02:45:58.000
hast du das

02:45:58.000 --> 02:46:00.000
sowohl mit den

02:46:00.000 --> 02:46:02.000
normalen Plattform-Locations

02:46:02.000 --> 02:46:04.000
auf iOS als auch auf Android.

02:46:04.000 --> 02:46:06.000
Also sprich, du kannst Cross-Plattformen

02:46:06.000 --> 02:46:08.000
auch Notifications setzen. Das ist das,

02:46:08.000 --> 02:46:10.000
was bei anderen Notiz-Apps nicht so gut

02:46:10.000 --> 02:46:12.000
funktioniert, außer

02:46:12.000 --> 02:46:14.000
natürlich man verwendet

02:46:14.000 --> 02:46:16.000
Google

02:46:16.000 --> 02:46:18.000
Deep oder was es da nicht gibt

02:46:18.000 --> 02:46:20.000
oder

02:46:20.000 --> 02:46:22.000
Evernote oder was ist da

02:46:22.000 --> 02:46:24.000
nicht alles.

02:46:24.000 --> 02:46:26.000
Aber was mir halt gut

02:46:26.000 --> 02:46:28.000
gefällt ist, erstens ist es

02:46:28.000 --> 02:46:30.000
Cross-Plattform, es gibt es für alles

02:46:30.000 --> 02:46:32.000
und

02:46:32.000 --> 02:46:34.000
es züngt halt auch easy

02:46:34.000 --> 02:46:36.000
überall hin.

02:46:36.000 --> 02:46:38.000
So, Pause-Champ, Pause-Champ,

02:46:38.000 --> 02:46:40.000
es funktioniert nicht.

02:46:50.000 --> 02:46:52.000
Schön, dass wir Notifications gesetzt haben, die nicht

02:46:52.000 --> 02:46:54.000
funktionieren.

02:46:54.000 --> 02:46:56.000
Sehr nice.

02:46:58.000 --> 02:47:00.000
Excellent.

02:47:06.000 --> 02:47:08.000
Noch ist die Minute nicht vorbei.

02:47:08.000 --> 02:47:10.000
Nein, das kommt am Anfang.

02:47:20.000 --> 02:47:22.000
Es kann sein,

02:47:22.000 --> 02:47:24.000
habe ich überhaupt irgendwelche

02:47:24.000 --> 02:47:26.000
Notifications-Sachen installiert, die

02:47:26.000 --> 02:47:28.000
notifizieren könnten?

02:47:30.000 --> 02:47:32.000
Ich glaube, ich habe gar keine

02:47:32.000 --> 02:47:34.000
Notifications-Zeug installiert.

02:47:36.000 --> 02:47:38.000
Da kann auch nichts aufpoppen.

02:47:38.000 --> 02:47:40.000
Ja.

02:47:40.000 --> 02:47:42.000
Ich glaube, ich habe gar nichts.

02:47:42.000 --> 02:47:44.000
Null.

02:47:44.000 --> 02:47:46.000
Ne, ich habe gar nichts für Notifications

02:47:46.000 --> 02:47:48.000
installiert. Ja, dann kein Wunder.

02:47:48.000 --> 02:47:50.000
Da kann auch nichts aufploppen.

02:47:50.000 --> 02:47:52.000
Es gibt keine

02:47:52.000 --> 02:47:54.000
Notifications, wenn kein Notifications-

02:47:54.000 --> 02:47:56.000
Zeug installiert ist.

02:48:00.000 --> 02:48:02.000
Ich muss irgendeine

02:48:02.000 --> 02:48:04.000
Notification-Dings installieren, aber

02:48:04.000 --> 02:48:06.000
da habe ich jetzt keinen Bock drauf.

02:48:06.000 --> 02:48:08.000
Aber normalerweise

02:48:08.000 --> 02:48:10.000
funktioniert das und in meiner normalen

02:48:10.000 --> 02:48:12.000
VM, die ich sonst verwende, da gehen auch

02:48:12.000 --> 02:48:14.000
die Notifications. In der Streaming-VM

02:48:14.000 --> 02:48:16.000
hier geht es nicht.

02:48:16.000 --> 02:48:18.000
Und das Ganze

02:48:18.000 --> 02:48:20.000
ist halt Cross-Plattform.

02:48:20.000 --> 02:48:22.000
Aber man merkt halt auch,

02:48:22.000 --> 02:48:24.000
dass es ein Community-Projekt ist,

02:48:24.000 --> 02:48:26.000
ein Open-Source-Projekt, wo jetzt nicht

02:48:26.000 --> 02:48:28.000
eine riesen Firma dahinter steckt.

02:48:28.000 --> 02:48:30.000
Manche Sachen sind schon

02:48:30.000 --> 02:48:32.000
ein bisschen... Also die Android-

02:48:32.000 --> 02:48:34.000
App könnte schöner sein.

02:48:34.000 --> 02:48:36.000
Ich habe keinen

02:48:36.000 --> 02:48:38.000
Standard-Window-Manager von Manjaro.

02:48:38.000 --> 02:48:40.000
Ich habe Manjaro von

02:48:40.000 --> 02:48:42.000
der Architekt ISO installiert

02:48:42.000 --> 02:48:44.000
und nur i3 drauf.

02:48:44.000 --> 02:48:46.000
Sonst gibt es da nichts

02:48:46.000 --> 02:48:48.000
mehr. Long-Range-Snipe,

02:48:48.000 --> 02:48:50.000
das gucken wir dann am Wochenende an.

02:49:12.000 --> 02:49:14.000
Das war

02:49:14.000 --> 02:49:16.000
ein nicer Soundtrack.

02:49:18.000 --> 02:49:20.000
Ja Leute, nice. Also, ich gehe ins Bett.

02:49:20.000 --> 02:49:22.000
Wir sehen uns morgen.

02:49:22.000 --> 02:49:24.000
Macht's gut. Bis denn.

02:49:24.000 --> 02:49:26.000
Achso, ja.

02:49:26.000 --> 02:49:28.000
Outro-Musik muss auch mal wieder sein.

02:49:28.000 --> 02:49:30.000
Macht's gut. Bis...

02:49:30.000 --> 02:49:42.000
Bis morgen, tschüss.

02:50:00.000 --> 02:50:10.000
Outro-Musik

02:50:30.000 --> 02:50:40.000
Outro-Musik

02:51:00.000 --> 02:51:10.000
Outro-Musik

02:51:30.000 --> 02:51:40.000
Outro-Musik

02:51:40.000 --> 02:51:50.000
Outro-Musik

02:51:50.000 --> 02:52:00.000
Outro-Musik

02:52:00.000 --> 02:52:10.000
Outro-Musik

02:52:10.000 --> 02:52:20.000
Outro-Musik

