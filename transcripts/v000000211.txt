Das war's für heute, bis zum nächsten Mal, ciao!
So Leute, da sind wir mal wieder!
Das sind wir mal wieder, hier!
Heute machen wir mal wieder ein Brogger-Stream, das ist auch schon ewig her.
Mal gucken, ob Twitch heute funktioniert im Vergleich zu sonst.
Ich weiß ja nie, Twitch wird ja kaputt, aber es sieht eigentlich ganz gut aus heute.
Die haben ja mittlerweile einen eigenen Twitch-Channel.
Ah ja, ja! Mal den sonst noch für Musik zu bieten.
Updaten mal den Titel.
So, Titel geupdatet, Big Brain Titel am Start.
Ich glaube, die Musik ist mir zugechillt jetzt.
Energetic brauchen wir garantiert nicht.
Die ist nicht relaxing.
Nervig.
No sleep, Chillmix.
Oh je, ne ne, das auch nicht.
Was braucht Hardfera dieses Mal?
Ja, also ich zeige euch mal das Bild, was er mir geschickt hat.
Dann gucken wir mal, ob jeder daraus schlau wäre.
Moment, aber da muss ich mich gerade mal kurz auf Twitter einloggen, auf der anderen Seite.
Ich zeige euch mal das Bild, was er geschickt hat.
So, Copy Image. Mal gucken, ob das funktioniert.
Mal gucken, ob das Image kopieren tut.
Paint. Okay, muss ich das jetzt in Paint Copy Pasten oder so? Ja, da ist es.
Ich habe dieses tolle...
Alter, die Musik, die SPD ist mir zugechillt.
Ich brauche irgendwas, ich brauche irgendwas, was nicht nervt und was mich nicht zum Einschlafen bringt.
Ich brauche so ein Zwischending.
Was mir zu...
Concentration, Concentration ist gut.
Ja, okay.
Ja, so flippe ich auch immer aus, wenn ich Musik höre.
Das ist auch nervig. Irgendwie keine gescheite Musik am Start zu programmieren.
Focus Music.
Das hatten wir letztens erst.
Chillout Mix.
Ja, das geht auch halbwegs.
Nicht ganz so zum Einschlafen wie der Rest.
Lautstärke anpassen, gut.
So, neues Fenster, weil wir müssen wahrscheinlich wieder ein bisschen Buchlornen, wie das Ganze funktioniert.
So Leute, also ich zeige euch jetzt mal das Bild von dem, was wir machen sollen.
Genau, ich programmiere heute einen Keylogger, dass ich alles mitkriege.
Er hat auch heute schon auf Twitter gefragt, ob es nicht einen Shop gäbe, der ohne Cookies funktioniert.
Ganz einfach, einfach Keylogger auf allen Rechnern installieren, da Leute, die kaufen wollen, da weiß man auch, was die kaufen wollen.
Also ich zeige euch jetzt mal, was wir machen.
Ich weiß nicht, wie das wirklich so aussieht.
Die Andy abonniert schon zwei Monate aktuell im ersten fortlaufenden Monat.
Was auch immer man mir das sagen soll, aber das sagt mir auf jeden Fall.
Big Brain für den Chat wieder.
So, ich zeige euch jetzt mal.
Freetech, Twitch Prime, geht noch weiter hier, Massive Huge Brain.
Jetzt ist es ein bisschen laut, ne?
Ok, also ich zeige euch jetzt mal das Bild von dem, was wir machen müssen.
Ihr müsst mir mal erklären, ob ihr daraus schlau werdet.
Ich habe es nicht am Anfang so gecheckt, muss ich jetzt sagen.
Folgendes hätte er gerne, hat er gefragt, ob man das nicht machen kann.
Er hat wohl auch bei irgendeinem anderen Softwarehersteller angefragt und er wollte einen höheren dreistelligen Eurobetrag für.
Und ich habe ihm gesagt, wenn ich es ihm streamen programmieren darf, dann bastel ich ihm was zusammen.
Aber das wird kein Schönheitspreis gewinnen, weil es eine Win-aus-Desktop-Anwendung wird.
Und Win-aus-Desktop-Anwendungen gewinnen in der Regel nie den Schönheitspreis.
Also folgendes Bild hat er mir geschickt.
Also, der hätte gerne ein Fenster, das sind die Big-IQ-Zeichnungen.
Also, folgendes Problem, so hat er es beschrieben.
Wir machen das jetzt mal so.
Weil eine Sache ist immer wichtig, wenn man was programmiert für andere Leute, man muss das sich fünfmal erklären lassen, dass man es verstanden hat, was sie wirklich haben wollen.
Nicht, weil sie es beim ersten Mal nicht richtig erklären konnten, sondern erst, weil sie fünfmal erklärt haben und man hat fünfmal das gleiche verstanden.
Dann kann man anfangen, weil sonst macht man irgendwas, was nicht stimmt.
Also das erste, was er geschrieben hat ist, er will ein Mini-Programm haben.
Also er schreibt, es soll einfach das können.
Wenn eine neue Lieferung kommt, kann man die anlegen.
Dann scannt man die Seriennummer ein und speichert es ab.
Wenn man später nach der Seriennummer sucht, soll angezeigt werden, aus welcher Lieferung es stammt.
So, und da hat er mir jetzt auch folgendes Bild dazu gemalt.
Und zwar, er will irgendwie ein Fenster haben, das machen wir nicht ganz so, weil das kann man schöner machen.
Aber so vom groben Ablauf her.
Man könnte das übrigens genauso in Excel oder so wahrscheinlich machen.
Oder aber in irgendeiner Kommando-Zeilen-Anwendung oder so.
Also das ist jetzt nix.
Kompliziert ist wahrscheinlich, denke ich mal.
Mal gucken, was wir machen.
Das kann man übrigens in fast jeder Sprache machen, die immer lustig ist.
So was Kleines.
Man muss sich bloß überlegen, wie man die Daten speichern will.
Aber das wird ja im Endeffekt einfach nur ein bisschen Text sein.
Ich glaube, ich weiß schon, wie ich es mache.
Also was er gerne hätte ist...
Achso, was er noch dazu gesagt hat ist, dass irgendwie ihre Warenwirtschaft ist irgendwie ein DOS oder so.
Und alles kostet irgendwie übertrieben viel Geld und das wird ihm was helfen.
Und wenn ihm das was hilft, ist gut.
Ich habe gesagt, solange ich sie im Stream machen kann, ist gut.
Ne, wir machen keine Webseite.
Wir machen tatsächlich mal eine ganz oldschool, entweder WPF oder Windows Form.
Wahrscheinlich machen wir sogar eine Windows Form Anwendung.
Irgendwas ganz billiges, was...
Ich habe immer schon gesagt, das wird kein Schöner als Preis gewinnen.
Naja, zumindest, also was er gerne hätte, wenn man das Ding startet,
hätte er gerne einfach ein Fenster mit einem Feld, wo man nach Seriennummern suchen kann.
Oder man kann auf neue Bestellungen klicken.
Wobei wir das anders machen.
Das habe ich mir schon überlegt.
Wir machen an der Stelle schon den absolut high IQ Move.
Und zwar...
Ja, ich weiß, dass man damit grafische Sachen erstellen kann.
Das ist dieses TCL-Dings, was wir in Python eingebaut haben für grafische Oberfläche.
So, genau.
Also wir machen den Big Brain Move ganz am Anfang.
Wir machen hier kein Suchfeld.
Doch, einen Suchfeld machen wir.
Wir machen hier aber keinen Button für neue Bestellungen.
Wir machen einfach, nur habe ich mir das so überlegt.
Wir machen einfach nur ein Fenster.
Da ist eine Textbox drinnen, wo man Seriennummern suchen kann.
Und unten drunter eine Liste mit allen Seriennummern.
Und die filtert das einfach, wenn du was in die Liste tippst.
So, und wenn du eine Seriennummer eintippst und er die nicht findet,
dann erstellt er automatisch eine neue.
Das heißt, wir brauchen diesen neue Bestellungen erstellen-Button gar nicht.
Vielleicht machen wir den doch hin, weil theoretisch können Seriennummern auch doppelt sein.
Theoretisch können Seriennummern auch doppelt sein, aber das ist recht unwahrscheinlich.
Und umso weniger Buttons man hat und umso einfacher das zu bedienen ist, umso besser natürlich.
So, danach soll er die Seriennummer suchen und das machen wir so auch nicht.
Es gibt jetzt im Prinzip zwei Fälle.
Wenn wir wieder mit mir finden eine Seriennummer, dann mache ich das Fenster auf,
wo die Details zur Bestellung drinstehen.
Also sprich, wie die Bestellung heißt und was alles für Sachen in der jeweiligen Bestellung drin sind.
Das ist dann ziemlich easy.
So, und das gleiche machen wir, wenn wir nach einer Seriennummer suchen
und der findet die Seriennummer nicht und man drückt Enter.
Also dieses Zwischenfenster hier lassen wir auch weg.
Und man drückt Enter.
Dann geht einfach gleich das neue Fenster auf für die Bestellung.
Also im Prinzip wird das eine Anwendung aus zwei Fenstern und also zwei Forms und ein bisschen Logik oder so.
Also es hält sich in Grenzen.
Es ist jetzt nicht so... Twitch Prime, xPaulx, huge, big brain sub.
Dankeschön.
Leute, ihr müsst mich heute mal wieder ein bisschen anscheißen, falls ich die Subs vergesse,
weil wenn ich mich konzentriere, dann kann das schon mal passieren, dass ich Subs übersehe.
Morgen gibt es übrigens ein neues Video auf YouTube.
Nur mal so angemerkt.
Ich frage so viele Leute, was ich auf der Arbeit mache, sowohl im Stream als auch hier auf YouTube in den Comments,
dass ich mich mal zu ihnen hingesetzt habe und mir überlegt, was mache ich eigentlich so eine ganze Zeit auf der Arbeit.
Da habe ich halt so ein 10, 15 Minuten Video drüber, was man so als DevOps-Engineer treibt.
Wie gesagt, Berufsbezeichnungen sind eh Schall und Rauch.
Exakt steht das bei mir auch nicht drauf, aber ich mache es im Prinzip vom Aufgabenfeld her.
Das Zeug nennt eh jeder anders.
Morgen Pfeiffer-Video.
Das kriege ich bis morgen nicht fertig.
Ja, Sebaro, du darfst nicht alles verraten.
So, hier kann ich mich jetzt endlich mal in Steamlabs einloggen.
Steamlabs kann jetzt meine Worts schneiden.
Warum macht das Steamlabs? Ich bin gar nicht das Steamlabs, das darf.
Also, wen haben wir hier heute gesagt?
xPollix, fritec und Andy.
Ich glaube, die habe ich alle vorgelesen.
Gut, also fangen wir mal an.
Wie gesagt, das wird kein Schönheitspreis gewinnen, das Ding.
Wir machen mal eine neue Anwendung.
Und zwar eine Sache, die ich schon ganz lange nicht mehr gemacht habe.
Der Sebaro, der hat wieder hier seine Fantasien.
Also, wir machen jetzt eine Sache, die ich schon ewig nicht mehr gemacht habe.
Und zwar, wir erstellen eine Oldschool Windows Forms Anwendung.
So etwas, was dann auch richtig schön aussieht, wie von 2005 oder so.
Aber das dürfte am einfachsten und schnellsten sein.
Und natürlich auch.NET Framework, nicht so neue Sachen wie.NET Core oder so.
Wir machen das.NET Framework, da kann ich ihm einfach das Programm schicken.
Und er kann es ausführen und gut ist.
Da ist nichts großer als dabei.
So, wie nennen wir denn das Ding?
Wir brauchen jetzt einen guten Namen für das Teil.
Man könnte es, man könnte es Scansor nennen.
Wir brauchen BigBrain, HighIQ-Name für das Ding.
Man müsste mal kreativ sein.
NanoSAP, nee nee nee, Hard Versor, nee.
Irgendetwas, was, warum denn kein UVP ist?
Ganz einfach, weil du UVP nicht einfach jemanden schicken kannst und er kann es ausführen.
Er müsste dann erstmal Zertifikate von dir installieren.
Das ist ja auch mein Kritikpunkt an UVP.
Hab ich übrigens schon als neuestes gezeigt, ich hab's vorhin auf Twitter gepostet.
Das ist ja auch das Problem an UVP, dass ich das für so normale 0815 Anwendungen,
die man einfach bereitstellen will irgendwo zum Download und zum Ausführen, nicht verwenden kann.
Weil, erstens brauchst du Admin-Rechte.
Ich dachte eigentlich, wir haben es geschafft unter Windows, dass man kleine Programme keine Admin-Rechte mehr braucht.
Allerdings für UVP braucht man Admin-Rechte, weil wenn man kein offizielles Code-Signing-Zertifikat hat,
und ich hab kein offizielles, ich kauf mir doch kein, ich geb doch nicht viel Geld aus für ein Code-Signing-Zertifikat,
dass ich kostenlose Anwendungen bereitstellen darf.
Das ergibt doch irgendwie keinen Sinn.
So, und deswegen kann man UVP aus dem Gesichtspunkt schon mal vergessen.
Leider, leider, an sich würde ich es in UVP machen.
Aber, wisst ihr was ich heute gesehen hab, was richtig cool ist?
Und zwar, Microsoft ist es auch aufgefallen, dass Windows-GUI-Entwicklung scheiße ist.
Das ist Microsoft auch aufgefallen, weil wenn man ehrlich ist,
Windows-GUI-Entwicklung ist halt entweder scheiße mit UVP,
was eigentlich ein gutes GUI-Framework hat, hat aber alles andere kacke drumherum ist,
oder es ist ur, ur, uralt mit Windows-Forms, oder es ist nicht ganz so alt,
allerdings mit WPF auch nicht wirklich modern.
WPF kann keine Emojis anzeigen, zum Beispiel, und das im Jahr 2019.
WPF kann ich ordentlich mit DirectX interagieren.
Ich weiß, es geht, aber es hat auch mit modernen Windows-Sachen als auch generell Probleme.
Das ist im Prinzip unter Windows-GUI nur die Auswahl.
Crap mit UVP, mit gutem GUI dafür, aber Restkacke.
Oder du hast die Auswahl zwischen ur, uralt und alt unter Windows.
Das sind so die zwei Sachen.
Wenn man mal die Sachen, die nicht von Microsoft kommen, außen vor lassen,
also zum Beispiel, wenn man was mit Qt macht, dann geht das natürlich auch,
aber das muss es in C++ machen, oder ich weiß, es gibt auch Python-Bindings,
oder auch Go-Bindings, oder Flutter, Flutter geht jetzt, ich habe jetzt was gefunden,
Flutter geht jetzt auch für den Desktop.
Ja, also es ist Scheiße unter Windows, und das ist Microsoft auch aufgefallen.
Oh, Killer47Gear, Twitch Prime, Dankeschön.
Huge Sub.
Benutzt doch Java, ne.
Java ist eigentlich, was Cross-Platform-GUI angeht, mit JavaFX gar nicht so schlecht.
Und man kann JavaFX auch ganz gut aussehen lassen, aber ich habe so eine Abneigung gegen Java,
ich mache nichts, und es kann nicht sein, dass es keine Alternative gescheit gibt.
Das Einzige, was es gibt, ist Qt, das geht nur mit C++ so richtig.
Ja, es ist JavaVM, JavaVM, das will ich nicht.
Oder Flutter in Zukunft, aber das kann so viel anderes noch nicht.
Ja, Flutter Desktop hat zum Beispiel, hat zum Beispiel kein Webview.
Warum ist, warum findest du Java so kacke, es hat keinen Tiefregrund?
Ich mag es nicht.
So, zumindest, was ich sagen wollte.
Microsoft ist es jetzt selber aufgefallen, dass ihr das GUI-Programmierung,
beziehungs Windows-Anwendungsprogrammieren kacke ist,
und dass die sich ein bisschen zu sehr darauf versteift haben auf UWP.
UWP war ja mal die Idee von Microsoft, dass du quasi eine Universal-Platform-App programmieren kannst,
und die läuft dann auf Xbox, auf Hololens, auf Surface Hub und auf Devices und Windows Phone und IoT und alles Mögliche.
Und natürlich auch Windows.
Das war mal so die Idee von Microsoft.
Das Problem bei der ganzen Geschichte ist, keine Sau, bis auf eine Hand voll,
entwickeln Anwendungen für Hololens, Surface Hub, Windows Phone, IoT, ein paar vielleicht noch Xbox.
Aber da gibt es auch andere Varianten.
So, kaum jemand.
Die meisten Leute wollen Anwendungen für Windows-PCs entwickeln.
Und das ist halt mit UWP kacke gewesen.
Du hattest eine Sandbox drumherum, dass du nicht mal Screenshots machen konntest.
Wohlgemerkt, du konntest nicht mal Screenshots machen in einer UWP-Anwendung.
Und du brauchst ein offizielles Codesigning-Zertifikat, dass du UWP-Anwendungen verteilen darfst,
was sich keiner kauft, der einfach hobbymäßig mal was programmiert.
So, deswegen ist UWP crap.
Das einzig Gute an UWP ist tatsächlich das UI-Framework gewesen.
Das ist wirklich schick.
Man kann sagen, was man will.
Ich meine, der Calculator ist ein schlechtes Beispiel, weil der Calculator sieht kacke aus.
Aber dieses UI-Framework, was hinter diesen UWP-Apps steht, ist wirklich nice.
Unter Windows ist das das Beste, was es gibt, ja.
So, und jetzt sind sie auf die glorreiche Idee gekommen bei Microsoft.
Und wenn Hardware gerade die App auf HoloLens nutzen will,
dann muss man sich erstmal überlegen, wie man in Windows Forms List View anklickt unter HoloLens.
Kannst du dich mal an Playstation Move erinnern?
So, und zumindest war das die Idee von Microsoft ursprünglich.
Und es ist halt alles kacke an UWP außer das GUI-Framework.
Das ist Microsoft jetzt auch aufgefallen.
Und sie wollen Ende des Jahres, also viertes Quartal 2019,
möchte Microsoft was Neues bereitstellen.
Nämlich, also das da ist jetzt, stimmt nicht wirklich.
Sondern, das ist das Falsche.
Ja, doch, das ist das Richtige.
Sondern, man sieht hier, der Unterschied ist das da.
Sondern, man kann jetzt das GUI-Framework,
was aktuell auf UWP exklusiv ist,
kann man jetzt für ganz normale Windows 32 Anwendungen verwenden.
Und das ist zum ersten Mal seit Windows, keine Ahnung,
mit wann hat UWP angefangen? Windows 8?
Oder schon Vista?
Ich glaube schon in Vista, oder?
Vista hat doch diese Geschichte mit WinRT und so Geschiss angefangen.
Weiß es gar nicht mehr genau.
Vista oder Windows 8?
Aber WinRT Geschiss gab...
Ach nee, unter Vista war das diese WinRT JavaScript Gedöns, oder?
Aber Windows 8, zumindest, die schaffen es jetzt quasi seit...
Sagen wir mal seit 5 Jahren, oder so,
oder eigentlich schon länger, weil unter den Teilen davor war es auch nicht.
Ich sage mal seit 10 Jahren.
Windows schafft es jetzt Ende des Jahres als Testversion zum ersten Mal wieder,
dass man GUI-Technologie bzw. Anwendungen für Windows programmieren kann,
die nicht auf 10 Jahre plus alter Technik basieren.
Ich weiß nicht, was sich Microsoft die ganze Zeit gedacht hat.
Sie haben sich gedacht, es werden schon die Leute UWP verwenden,
aber es hat keiner UWP verwendet.
Weil es auch kacke ist.
Und jetzt endlich haben sie es gecheckt.
Du kannst quasi das komplette UI von UWP auch für nicht-UWP verwenden.
Und das wird richtig gut.
So, das schreiben sie ja für den Quartal 2019.
So, und sollten sie jetzt noch auf die glorreiche Idee kommen bei Microsoft,
aber ich glaube, das ist zu big brain und zu viel Aufwand für Microsoft.
Wenn sie das jetzt noch so rausbringen würden oder so programmieren würden,
dass du es relativ einfach zumindest auf Mac und Linux laufen lassen könntest,
aber ich meine, das könnten sie nur machen, wenn sie DirectX rausschmeißen
oder so flexibel machen, dass du es auch mit OpenGL rendern kannst,
dann kann alles andere Cross-Plattformen einpacken.
Wenn sie das richtig gut hinkriegen.
Ja, du kannst...
Diddy Holz, das kannst du jetzt schon.
Du kannst jetzt schon in WPF UWP beziehungsweise WinUI verwenden.
Nämlich mit SAML Islands kannst du das machen.
Die Sache ist bloß die, das ist ein bisschen eklig.
Ich versprich, du musst quasi einen extra WinUI Hosting Control in dein WPF einbinden,
um darin dann die neuen Controls zu hosten.
Das ist nicht so schön, das ist ein bisschen eklig.
Aber ja, hiermit könntest du tatsächlich komplett einfach sagen,
du, keine Ahnung, wie das Ding dann heißen wird, WinUI Window oder so, und dann wird das funktionieren.
Das wird richtig gut, wenn sie es richtig machen.
Und sollten die sich dazu entschließen, das Cross-Plattformen zu machen,
irgendwann mal, das werden sie nicht gleich machen,
dann muss ich Qt warm anziehen, GTK kannst du eh vergessen,
Flutter ist auf dem Desktop noch viel zu unausgereift.
Ansonsten gibt es ja außer JavaScript-Elektronen-Geschichten nichts mehr.
Das war es ja eigentlich ernst zu nehmen, Cross-Plattformen.
Sie versuchen ein bisschen so mit React Native,
aber was unter der Haube auch nur OWP ist unter Windows.
Es gibt ja nichts Cross-Plattformen mehr so richtig.
Also sollten sie das machen und das gut funktionieren,
das wird einschlagen wie eine Bombe, das werden ganz viele Leute benutzen,
weil du kannst die Sharp verwenden, was eine richtig geile Programmiersprache ist,
und du hättest ein UI-Framework, was von einer großen Company gebackt ist.
Oder du musst halt weiter mit Elektronen rumfrickeln.
Unter der Haube ist ja im Prinzip ganz vieles Elektron.
Es gibt da viele Sachen, die auch drauf aufsetzen und so was.
Kann ich die Sharp direkt, wenn ich Java kann?
Ja, naja, es hat ein paar Eigenheiten, aber ansonsten eigentlich kein Problem.
Elektron ist toll, das stimmt, allerdings geht mir Elektron auf den Kicks für kleine Anwendungen.
Ich finde, Elektron ist viel zu aufgeblasen für irgendwelchen Kleinkram.
Ja, so, auf geht's.
Haben wir jetzt eigentlich einen ordentlichen Namen dafür?
Ja, richtig, UWP hebt seit Jahren nicht ab.
Uno ist ein Aufsatz auf UWP, wiederum, unter Windows oder Xamarin Forms.
Uno ist ganz was Abgedrehtes.
Uno ist ein Aufsatz auf UWP, wiederum, unter Windows oder Xamarin Forms.
Uno ist etwas Abgedrehtes. Uno ist ein Aufsatz von einem Aufsatz von einem Aufsatz.
Also Uno setzt unter Windows auf UWP auf.
Deine Anwendung setzt auf Uno auf und Uno setzt auf UWP unter Windows auf.
Unter anderen Betriebssystemen setzt du auf Uno auf, Uno setzt auf Xamarin Forms auf
Xamarin Forms setzt auf Mono und die lokale Library von Android oder iOS.
Das ist ganz Bier, das verwende ich erst gar nicht.
Ja, Windows React Native ist im Prinzip auch UWP.
Also im Prinzip ist alles UWP und das wird alles hiermit besser, wenn sie das richtig machen.
Und um es abzuschließen, sollten sie es cross-platform machen, wird das einschlagen wie eine Bombe.
Das wird alles veressen.
Avalonia ist auch cool, allerdings fehlt noch ein bisschen viel.
Avalonia rendert manche Sachen nicht selbst.
Avalonia hat keine Low-Level-Implementierung zum Malen.
Ich glaube, die verwenden aktuell zum Malen irgendeine 2D-Library von Google oder so.
Also es wäre auf jeden Fall deutlich schneller möglich.
Sie verwenden teilweise noch GTK unter Linux.
Sie haben kein Webview.
Also es gibt für mich zwei Sachen.
Es gibt für mich zwei Sachen, wo man, finde ich, erkennen kann, ob ein GUI-Framework gut ist.
Ob ein GUI-Framework was taucht bzw. wo man sich mal angucken kann, was das Feature ist.
Ihr müsst erstmal natürlich gucken, ob es euch gefällt, von der Bedienung her zusagen.
Dann zwei Sachen, die ihr gucken müsst.
Hat das Ding einen aktuellen Embedded Webview bzw.
irgendeine Möglichkeit, einen Browser einzubinden in die Anwendung?
Das ist das Erste.
Wenn es das kann, das können nämlich die meisten nicht,
weil es auch eklig ist, Chrome zu embedden.
Wenn es das kann, ist gut.
Und das Zweite ist, es muss 3D-beschleunigend Content embedden können.
Also du musst irgendwie die Möglichkeit haben, DirectX-Content oder OpenGL-Content einzubetten.
Wenn es die zwei Sachen gibt, dann taugt das GUI-Framework meistens was.
Wenn es eins davon nicht kann, ist es eher noch ein Projekt, was ein bisschen reifen muss.
Afalonia geht aber auf jeden Fall in die richtige Richtung.
Aber es gibt nichts, außer Qt.
Qt ist das Einzige, was das Cross-Plattform alles kann, was man braucht.
Allerdings ist Qt C++ und da kriege ich immer Anfälle bei.
So, wir nennen das Ding jetzt einfach Scansor, weil mir nichts anderes einfällt.
Bam, Create.
Hab ich übrigens das Richtige ausgewählt?
Ja.
Also ich sag euch gleich, wie gesagt Leute, die App wird keinen Schönheitspreis gewinnen.
So, wir haben jetzt mal so eine gute, alte, ekliche Windows-Form.
Und wir nennen das Ding jetzt mal um in Main-Form, sodass das Ding schon mal richtig heißt.
So, zack.
Was brauchen wir jetzt?
Wir brauchen jetzt eine Textbox.
So, und wir brauchen ein ListView.
Also zumindest, wenn man dem hier so glaubt, was er da gemalt hat, brauchen wir das.
So, das sieht jetzt halt aus wie 2003.
Oh, zack, zack.
Also schön ist was anderes, aber muss es ja auch nicht sein.
Zack.
So, und da machen wir jetzt nichts anderes, wie reinzuschreiben, was es für Seriennummern gibt.
Button zum Schließen brauchen wir nicht.
Komplett overrated, Button zum Schließen.
Warum Windows-Forms und kein WPF?
Weil ich finde, für so eine simple Anwendung mit zwei Fenstern ist es mit Windows-Forms einfacher.
Das ist alles.
WPF ist immer so ein...
Ich weiß nicht, immer so ein...
Unter WPF hat man immer den Hang dazu, die Sachen unnötig kompliziert zu machen.
Du musst bei zig Sachen extra Interfaces implementieren.
Dann kommen die ersten Leute an, die sagen, oh nein, code behind darf man doch nicht verwenden unter WPF.
Ja.
Ach guck mal, da ist er ja.
Ja, doch, doch, ich hab's schon verstanden.
Ich mein, ich weiß, du hast ja meine Handschrift noch nicht gesehen.
Da ist das hier, huge, big brain Handschrift dagegen.
WPF ist auch deutlich komplizierter als Windows-Form.
Dafür ist WPF auch eindeutig die schönere Framework, da kann man nix sagen.
Wir fangen jetzt mal an, wie ändert man den Titel da noch?
Ich hab schon ewig nichts bei Windows-Forms gemacht.
Text, Ding heißt ScanSore.
Ewig nichts bei Windows-Form gemacht.
Aber es dürfte das Einfachste wahrscheinlich sein dafür.
View-Code.
Das ist abgekackt.
Ist die Schriftgröße gut oder soll ich ein bisschen größer machen?
Warum nicht einfach Excel benutzen?
Theoretischen Excel könnt ihr das wahrscheinlich auch machen.
Passt?
Okay, sehr gut.
Nice.
Yeah.
Okay, so.
Also, lasst mal überlegen.
Wir brauchen zwei Spalten.
Und zwar die erste Spalte.
Die nennt sich, keine Ahnung, Seriennummer.
Vielleicht soll ich umschalten auf Details.
Seriennummer.
Und die zweite Spalte heißt OrderHeader oder so.
Wir haben ja zwei Sachen.
Im Prinzip haben wir Seriennummer und Bestellung.
Das ist alles, was wir brauchen.
Order.
Zack.
So.
Gut.
Fertig.
Reicht, oder?
Genug.
Ach so, ganz wichtig, Leute.
Das Wichtigste, was ihr zuerst machen müsst bei jeder Windows-Anwendung.
Ganz wichtig.
Ganz, ganz extrem wichtig.
Ihr müsst das Icon ändern.
Und zwar.
Und das ist das einzig legitime Icon, was ihr verwenden dürft.
Jemals.
Wenn ihr was anderes bisher gehört habt, ist das, das hat er euch verarscht.
Das einzige Icon, was ihr verwenden dürft, ist lul.ico.
Alles andere geht nicht.
Nein, dass du die voll eigen darfst, nur lul.
Lulw ist auch noch okay.
Und wublul wäre auch noch okay.
Allerdings keckw ist nicht okay.
Nee, nee, nee, das geht nicht.
Das keckw ist nicht dein, das geht nicht.
Es geht nur lul, lulw oder wublul.
Eins von beiden.
Okay.
Ich würde sagen, jetzt mal lang genug rumgeschwätzt.
Was machen wir jetzt?
Wir brauchen noch eine zweite Form.
Und die nennen wir jetzt mal Order Form.
Big IQ Naming, ich weiß.
Und die kriegen einen Button.
Ups.
Button.
Oh, ich habe ja schon einen Button.
Die kriegen einen Button da unten in die Ecke irgendwo.
Ach so, ich muss erst mal was gucken.
Das war.
Oh, oh, das, Leute, das scale nicht.
Sie ist Batman.
Wie ging das nochmal unter Windows Forms mit dem scale?
Anchor, ne?
Anchor.
So.
Wow, scales.
Huge.
Poke ears.
So, und jetzt brauchen wir einen Button, der heißt.
Wo ist das Text?
Save?
Mehr Button.
Okay.
Das ist der einzige Button, der in die gesamte Anwendung reinkommt.
Mehr brauchen wir nicht.
Reicht.
Wo hast du die Hintergrundmusik her?
Äh.
Da.
Chillout Mix.
Einfach auf YouTube gesucht.
So, und da machen wir jetzt oben wieder eine Textbox rein.
Ja.
Windows Forms UI programmieren ist ganz dolle.
Die machen wir jetzt ungefähr so breit wie die andere.
Oh.
Ähm.
So.
Da oben kommt der Name von einer Bestellung rein.
Den kann man dann editieren.
Äh, und da unten.
Äh, nicht Listbox.
Habe ich List, ich brauche eine List View, keine Listbox.
Und da unten kommt eine List View rein, der die aktuellen Bestellungen, äh, die aktuellen
Items in der jeweiligen Bestellung anzeigt.
Fertig.
Reicht.
Gut, und jetzt können wir anfangen zu brogern.
Brogern.
Alter, das hört sich ja mal übelst fremd schäm an.
Äh.
So.
Jetzt lassen wir mal überlegen.
Was, was müssen wir jetzt machen?
Als erstes.
Ähm.
Was, mit was fangen, mit was fangen wir denn jetzt am besten an?
Oh.
Mr.
Mr.
Price94.
Dankeschön.
Nice.
So, mit was fangen wir denn jetzt am besten an?
Ich muss, muss können wir überlegen.
Fangen wir jetzt zuerst mit dem Speichern an von den Daten?
Oder machen wir mal testweise was in das hier?
Ich würde sagen, wir fangen mal, wir fangen mal ganz simpel.
Tempelritter.
Dankeschön.
Nice.
Der IQ im Chat explodiert ja heute fast förmlich.
Ich würde sagen, wir fangen mal mit der Datenbank an.
Also Datenbank ist zu viel gesagt für das, was wir jetzt hier machen.
Ja.
Mark G.
Blaze sagt, er kann jetzt auf dem iPad Videos gucken in der Dusche.
Das ist natürlich absolut next level.
Immer noch keine Emotes.
Ja Leute, ich komme nicht dazu, arbeiten zu gehen, Streams zu machen.
Jeden zweiten Tag Videos aufzunehmen für YouTube.
Und mich um Fiverr und Emotes zu kümmern.
Irgendwo, ich, ich, ich meine, die einfachste Variante wäre, ich gehe einfach nicht arbeiten.
Das wäre die einfachste Variante.
Hartz IV Confirmed.
Pro690 verschenkt zwei Abos.
Und zwar ein I am Jinx, LOL und Muffin Cody.
Dankeschön.
Huge Big Brain.
360 NoScope.
Abo NoScope.
Okay, also wir machen jetzt erstmal den Datenbank Krampel.
Und zwar, so, so, also das ist jetzt so einfach so, so Brain Dump.
Ich weiß nicht, ob das so funktioniert, wie ich mir das vorstelle.
Wir machen jetzt eine neue, neue Klasse und zwar nennen wir das ganz primitiv Repo.
So und das machen wir Public.
Warum auch immer.
Hartz FPS.
Das ist gut.
Easy Killer Twitch Prime.
Lull W.
Dazu kann ich nur sagen Wupp Lull.
Und jetzt bist du nämlich Sub.
Und warst du vorher auch schon.
Jetzt kannst du auch Wupp Lull verwenden, weil Wupp Lull ist eindeutig größer Lull W.
Ja genau.
Also Repo.
Was wir als Datenbank verwenden ist das hier.
Das ist keine wirkliche Datenbank.
Also keine, keine, so kein neu, kein SQLite oder sowas.
Das ist eine NoSQL Datenbank, die man in jeder.NET Anwendung verwenden kann.
Die kann nicht sonderlich viel.
Aber für ein paar Seriennummern speichern und ein bisschen zu Bestellungen zuordnen.
Wie kann ich denn auf Mobile Sub, ist da nicht oben rechts, da ist doch irgendwie ein Knopf.
Aber ich glaube du musst Paypal oder so hinterlegt haben.
Oder nicht?
Oder doch?
Keine Ahnung.
Aber da oben rechts ist doch der innen Subbutton, oder?
Aber wir verwenden LiteDB als Datenbank.
Oder wie mein Lehrer an der Berufsschule immer gesagt hat, Datenbanken.
Der hat das wirklich total hängen geblieben, ausgesprochen immer.
Der konnte nicht sagen Datenbanken.
Der hat immer gesagt Datenbanken, die Datenbanken.
Ok, LiteDB.
Prime geht nicht mobile.
Die Spaß ist nett.
Das ist das Richtige.
Doch, das ist das Richtige.
So, auf jeden Fall den LiteDB.
Was, es kostet mehr von mobile zu subben?
Warum?
Ah, weil Apple was abhaben will.
Zulul.
Die sind ja next level.
Das sind ja Drecksäge.
So, und jetzt brauchen wir erstmal eine Klasse für die Bestellung.
Und zwar, das könnte fast ein Tutorial sein hier, weil das sind so Sachen.
Moment, was mache ich denn hier gerade?
Das sind fast so, WTF.
Das sind fast so Sachen, die macht man in Tutorials.
Also von den Namen der Klassen her und sowas.
Also, jetzt machen wir eine Klasse.
Ich mache mal einen Ticken größer, oder?
So ist besser.
So oder so?
Komm, ich mache schon ein bisschen dicker hier das Ganze.
So, das heißt Order.
So, und was hat eine Order?
Eine Order hat eine ID für die Datenbank, das muss sein.
Die Order hat eine Name.
Dann hat die Order noch, würde ich sagen, ein updated ad.
Sonst noch was?
Ja gut, die Items, also quasi die Seriennummern.
Okay, wir können das in guter alter Windows Tradition schreiben.
Das sind die Serials.
Wobei, wir sind hier auf Twitch.
Da will ich ja gar nicht den Anschein erwecken, als machen wir irgendwas Illegales.
Wann die Bestellung getätigt wurde, weiß ich nicht.
Ich muss da rein.
Das weiß der Linie, das scannt gar nicht.
Wir machen jetzt erstmal Basic.
Erweitern kann man den Kram ja immer noch.
Das war übrigens voll das falsche E-Mode gerade.
Ja.
Komm, ich nenne es Items.
Warum soll ich Seriennummer nennen?
Items, Items nenne ich.
Das sind einfach, das ist kein String.
Das ist ne, ne, ne, ne, ne.
Aus, ein String enumerable quasi.
Okay, ähm, gut.
So, jetzt müssen wir lesen, jetzt müssen wir Daten lesen und schreiben in die Datenbank.
Dazu gucken wir uns mal hier den Beispielcode von lightdb an, weil ich mir das nie merken kann, wie das ganze aussieht.
Oh, so geht das.
Using var, db, lightdb.
Übrigens soll ich euch mal erzählen, warum ich keinen.NET Core verwende.
Ich verwende keinen.NET Core, weil es ist zwar Windows Forms unterstützt seit.NET Core 3,
aber der Designer geht noch nicht.
Und niemand möchte Windows Forms per Hand programmiertechnisch designen.
Ich weiß nicht, warum man eine Windows Forms Integration released, ohne dass der Designer geht.
Das ist eigentlich total beknackt, das kann keiner verwenden.
Ähm, okay, also was.
Deswegen sind wir jetzt auch noch auf so einer alten C Sharp Version.
Ich würde ja gerne ganz neue C Sharp verwenden, aber das geht nicht, weil wir keinen.NET Core verwenden können.
Das ist Mass FPGA.
500 Cent, Dankeschön.
Der Weizenhainz hat gecheert.
Huge.
Ich hab keine Emote, was dazu passt.
Doch, das hier.
Unterscheidet sich das EINumerable von dem, wie ich es machen würde, Public List String Items?
Äh, ja, der einzige Unterschied ist, ähm, also eben unter der Haube ist es das gleiche,
aber ein Numerable ist nicht veränderbar.
Und ne Liste schon.
Kann durchaus sein, dass man, das müsste, wir müssten da sogar ne Liste draus machen,
weil wir möchten ja da Sachen anhängen können.
Jaja, wir müssten da ne Liste drauf machen.
Ist eigentlich total beknackt.
So, also mal Beispiel Code angucken.
Using DB, Light DB.
Okay, alles klar.
Machen wir.
Light DB, Usen.
Wo ist denn jetzt das Problem?
Ach so.
Vielleicht soll ich das auch mal reinschreiben an der Stelle, wo es hingehört.
Okay, also, jetzt machen wir mal Public.
Okay, was brauchen wir?
Wir brauchen Methoden zum Einfügen.
Auf jeden Fall Insert Order.
Brauchen wir Update Order, Insert Order, Insert Order.
Ach so.
Eats.
Wir probieren jetzt erstmal aus, wie man Sachen in die Light DB einfügen kann,
weil, wie gesagt, ich hab schon ewig kein Minus Form mehr verwendet
und ich hab auch schon anderen Kram ne ganze Weile nicht mehr gemacht.
Insert Order, würde ich sagen, wir geben da mal True oder False zurück,
weil es könnte ja sein, dass das Insert nicht funktioniert,
weil die Sache schon drinnen ist.
Das könnte, das könnte man machen.
Nee, ich kann, nein, der Designer geht mit 3.0 nicht.
Es gibt einen Extra Designer für 3.0 und der ist noch so alpha,
dass er nicht richtig funktioniert.
Ich hab vorgestern extra erst geguckt, ob der Designer in 3.0 geht.
Guck, ich zeig's dir, dass der Designer nicht geht in 3.0.
Schau mal auf.
Äh.
Core.
Jawoll.
So, jetzt werd ich jetzt zeigen, der Designer geht nicht.
Nee, der Designer, ich zeig euch, dass der Designer nicht geht.
Nee, ich benutzt Hext für die Seriennummern.
Rakel alles rein.
So, pass mal auf, Designer geht nicht, Designer broken.
Windows Forms,.NET Core, Designer RIP.
Du kannst das VSIX runter, ja, ich sag doch, es gibt einen Alpha Designer dafür.
Der soll aber noch so krass rumbacken, dass ich ihn erstmal nicht verwende.
Außerdem ist das umzustellen auf.NET Core übelst einfach.
So, wir müssen jetzt aber erstmal ein bisschen was machen.
Guck mal, es ist schon 19.50.
So, nennen wir das Ding jetzt mal Orders DB.
So, ähm.
Und dann müssen wir, wie geht's, wie geht denn der Kram weiter hier?
Insert, RTB, Customers, bla.
Orders, so.
Orders, Insert.
Insert, Orders, so.
Und wenn das nicht funktioniert, so.
Dann gucken wir, ob das Ganze funktioniert.
Wenn das nicht funktioniert, sagen wir Falls.
So, und eine Sache müssen wir machen.
Wir müssen, äh, updated add auf DateTime now setzen.
Dass wir wissen, wann das Ding eingefügt wurde bzw. geupdatet wurde.
So, sehr schön.
Dann machen wir noch gleich mal das gleiche.
Public, void, update, order.
Müssen wir mal überlegen, vielleicht könnte man auch eine Methode draus machen.
Mal schauen.
Was könnte man eigentlich machen?
Oh, was hat er jetzt getrieben?
Alter, sehr gut.
What the fuck?
Insert, nicht auch einen Pool zurück, nee.
Insert gibt, also Insert wirft eine Exception, das weiß ich noch.
Insert wirft eine Exception, wenn du, ähm, was einfügst, was es schon gibt.
People leave, äh, ich hab alle, ich hab alle Emotes, voll.
Muss ich mal gucken.
Äh, Maskr95, Twitch Prime, dankeschön, nice.
Hardwarerad, Twitch Prime, oh.
Der Auftraggeber selbst.
Ohne den könnten wir heute nichts zu programmieren im Stream.
So, äh, update, order, das ist wahrscheinlich relativ einfach.
Das ist der gleiche Mist wie hier.
So, dass wir jetzt sagen, orders, update, order.
Oh, das ist easy.
Ähm.
Gut, was wir noch machen müssen ist, wir brauchen einen Index.
Wir brauchen einen Index auf dem Name.
Wie geht denn das hier so?
Ah ja, genau wie der das hier auch gemacht hat.
Weil wir wollen sicherstellen, dass der Name einer Bestellung,
der Name einer Bestellung soll immer eindeutig sein.
So.
Okay, dann würde ich sagen, legen wir mal hier was an.
Private, read only.
Was?
Nicht radio button, read only.
So.
Und jetzt legen wir, wir machen jetzt, wir haben doch hier,
wir haben hier einen Button da drauf, oder?
Haben wir einen Button da drauf?
Keinen Button drauf.
Wir machen jetzt mal ganz hässlich da einen Button drauf,
ein paar Sachen anzulegen.
So, hier, huge button.
So, da, da genau muss der hin, der Button.
So, button click.
Ähm.
Insert.
Order, okay.
Wir fügen jetzt einfach mal ein paar Sachen ein,
dass wir was drinnen haben, ja.
Einfach, dass wir wissen, dass was,
dass in der Datenbank was drinnen ist.
Also legen wir den neuen Order an.
Boah, da brauchen wir eigentlich gar nichts.
Wir sagen jetzt Order, items, add.
So, wir machen, wir machen jetzt mal ein paar Seriennummern.
So, Seriennummer.
Seriennummer.
Ja, so.
Und was machen wir noch?
Auch Seriennummer.
Ganz tolle Seriennummer.
Reicht da zum, reicht da zum Testen im Endeffekt.
Ähm.
Dann sagen wir noch.
Order name.
Ähm.
Keine Ahnung.
Default oder so.
Dann, dann keine Ahnung.
Das ist jetzt einfach nur mal zum Testen.
Das kommt danach gleich wieder weg.
Will einfach mal ein paar Sachen in die Datenbank einfügen.
So, Default.
Und dann irgendwie eine Nummer hinten dran.
Und dann sagen wir Insert Order.
Schon irgendwas vergessen?
Ne, das war's.
Order.
Schauen wir mal.
Ach ja.
Wir machen noch eine Sache.
Wir stellen das Ding um auf Konsolenanwendung.
Dass wir zugucken können, was das macht.
Weil eins ist klar.
Console Debugging immer beste.
Äh.
Mate Twitch Prime, Dankeschön.
Also Leute, spampt mich mal ein bisschen an, falls ich es vergesse.
Sorry Leute, falls ich irgendjemand übersehe.
Ich muss mich ähm.
Konzentrieren.
Aber ich guck so alle halbe Stunde mal in den ähm.
In mein Steamlabs rein.
Das seh ich.
Okay.
Insert Order.
Das müsst ihr doch jetzt eigentlich tun.
Mal gucken, ob's abkackt.
Achso.
Ne Moment.
Nicht.
Max, nicht starten.
Nicht starten.
Aus.
Geh weg.
Ähm.
Hier machen wir noch eine andere Sache rein.
Und zwar.
Machen wir hier in das Repo.
Machen wir noch ein bisschen.
Ähm.
Machen wir mal ein bisschen.
Machen wir ne Debug-Ausgabe rein.
Und zwar falls das Ding ne Exception wirft.
Dann, dann.
Printen wir die einfach in die Konsole.
So.
Ähm.
Jetzt fügen wir mal ein bisschen was ein.
Okay.
Ich hoffe, er hat jetzt was eingefügt.
Ähm.
Und dann tragen wir das jetzt mal in die Liste ein.
Also ich hab jetzt paar random Sachen.
Paar random Order mit random.
Ne, nenn ich mit random.
Mit immer den gleichen Seriennummern.
Das ist eigentlich beknackt.
Egal.
Aber da können wir auch gleich testen, ob doppelte Seriennummer funktionieren.
Ähm.
Wir können jetzt, wir können jetzt übrigens den Button wieder weg machen.
Den Button brauchen wir nicht mehr.
Woah.
Fuck.
Monkey Smoke.
Weiß aber woran es liegt.
So.
Wenn ich den Button lösche, dann darf ich auch die Methode löschen.
So.
Ähm.
Wunderbar.
Und jetzt gucken wir mal was passiert.
Wenn ich das in die Liste ein, ein, äh.
Unload.
Und Show.
Unload.
Ach, was auch immer.
Ähm.
List.
Gut.
Damit sehen wir schon das nächste, was wir brauchen in unserem Repo.
Wir brauchen was zum Queren.
Public.
Äh.
Und da gibt's jetzt ne Liste zurück mit allen Ordern drinne, die wir haben.
So.
Dann müssen wir wieder diesen Müll hier kopieren.
So.
Ähm.
Und jetzt sagen wir Return Orders.
Was?
Nein.
Orders.
All?
Ja.
Ähm.
Wunderbar.
Okay.
Ja, vielleicht sollte ich das nochmal schön schreiben.
All.
Orders.
Gut.
Und das fügen wir jetzt mal in den ListView ein.
Und dann gucken wir mal was passiert.
Ob das richtig war, was ich da getrieben hab.
Order.
In Orders.
Und zack.
ListView Items add.
Äh.
Ach Quatsch.
Nicht.
Haha.
Moment.
Brauch noch ne Schleife.
Für die Items.
So.
Und jetzt können wir das Ganze einfügen.
ListView Items add.
Und dann gucken wir mal ob da irgendwas reinkommt.
Einfach nur mal gucken ob's funktioniert.
Item.
Sollten wir da jetzt ein bisschen Text drinne stehen haben.
Hey.
Da ist unser Zeug.
Ich mein.
Es ist nicht richtig resized.
Es sieht übelst beschissen aus.
Aber da stehen schon mal Seriennummern drin.
Das ist schon mal gut.
Ja.
Zwar irgendwelche random.
Ich hab auf face rolled auf der Tastatur stehen da drinne.
Aber die stehen schon mal drinne.
So.
Hat das Ding nicht add range?
Das ist eine gute Frage.
Guck mal mal.
Add range.
Haha.
Aber keine.
Aber kein String Array.
Oh die Musik ist fertig.
Guck mal von vorne.
Aber man kann.
Man kann kein.
Guck mal.
Man kann keine Strings adden.
Geht nicht.
RIP.
Hast du eine Ulay Out Tastatur?
Nee.
Das ist eine gute Frage.
Okay.
Das einfügen funktioniert.
Weiß irgendjemand aus dem Kopf.
Wie man.
Weil da muss ich jetzt nachgucken.
Nicht add range.
Weiß irgendjemand wie man.
In verschiedene.
In die unterschiedlichen Spalten das einfügt.
Weil ich will das hier die Bestellung steht.
Und da die Seriennummer.
Doch die Tastatur ist mechanisch.
Das ist ein Corsair K95 Platinum.
Sonst was.
Ich hab keine Ahnung.
Ich weiß es ehrlich gesagt nicht.
Aber Subitem kommt mir bekannt vor.
Subitem.
Nee wie.
Ach nee warte mal.
So ging das.
Subitem.
Das war ganz, ganz eklig.
Alter das war richtig eklig.
Genau Subitems.
Und jetzt kann man hier sagen.
Order Name.
So.
Nee.
Fuck.
Ähm.
So.
Nee.
Äh.
Moment.
Et.
So.
Ich glaub so.
Oh.
Mach gucken.
Aber warum steht der überall eins?
Ach so.
Weil mein Count nie gecountet hat.
Ich hab richtig hängen geblieben.
Mein Count hat.
Das darf aber nicht funktionieren.
Der Count aber local.
Aber das.
Das, das hätte nicht funktionieren dürfen.
Der hätte eigentlich abkacken müssen.
Ich hab doch gesagt.
Ich hab doch gesagt Index.
Index auf Name oder?
Wenn ich sag Index auf Name.
Moment wie geht das mit dem Index nochmal?
Doch.
Das ist Unic.
Hm.
Warum hat er jetzt den?
Hm.
Warum hat er das jetzt kein Index gemacht?
GitHub.
Zeit.
DB.
Mal gucken wie die das da machen.
Vielleicht sind einfach die Beispiele nicht aktuell bei ihnen.
Ah.
True.
Okay.
Dann sollten sie vielleicht mal ihre Beispiele aktualisieren.
Das wäre nicht verkehrt.
So.
Okay.
Aber bevor wir weitermachen.
Wir machen es jetzt mal so, dass man neue Sachen einfügen kann.
Dann lösche ich den Kram, nehme ich mal wieder.
Oder DB.
Weg damit.
Das müsste aber so funktionieren.
So.
Also wir machen jetzt mal, dass man was einfügen kann.
Eingefügt werden soll was, wenn man, wenn man hier drin Enter drückt.
Dann soll was eingefügt werden.
Also machen wir das mal.
Events.
Key.
Ab.
Key press.
Key ab.
Ab.
Okay.
Wenn.
Also.
Wenn jetzt irgendjemand hier oben drin was eingegeben hat und Enter drückt.
Dann will ich.
Key.
Code.
Ich habe so lange damit nichts mal gemacht.
Enter.
Enter.
Also wenn der Key Code Enter ist oder wir machen das anders.
Wenn der Key Code nicht Enter ist.
Dann machen wir einfach nichts.
Das heißt hier unten ist jetzt, wenn der Key Code Enter ist.
Dann fügen wir mal was ein.
Und zwar fügen wir dann ein.
Aus der Textbox.
Den Text.
Und sagen.
Insert und dann sehen wir nämlich gleich ob das funktioniert.
Oh.
Falsche.
Falsche Form.
MonkaS.
Falsche Form.
Falsche Form Leute.
Ah.
Was?
Richt, richtige Form.
Wenn.
Key.
Ab.
Jetzt aber.
Dann.
Insert.
Order.
So.
Jetzt legen wir jetzt legen wir nochmal random eine an.
Order gleich New.
Oder muss ich das jetzt nochmal machen.
Order Name.
Okay.
Das sollte jetzt abkacken.
Wenn ich das einmal gemacht habe.
Wir fügen jetzt hier nochmal irgendeinen Blödsinn ein um zu gucken ob das auch abkackt.
Weil.
Es ist immer wichtig dass man verifiziert das Dinge abkacken.
Order.
Okay.
Wenn ich da oben jetzt drinnen Enter drücke dann sollte der was Neues einfügen.
Ha.
Funktioniert.
Guck das erste Mal Enter hat er eingefügt und das zweite Mal sagt er Duplicate.
Das ist sehr schön.
So.
Dann.
Dann funktioniert das.
Das heißt dass der Name von der Order in dem Fall eins muss immer Unix sein.
Sonst funktioniert es nicht.
Das ist gut.
Das wollte ich jetzt nochmal ausprobieren an der Stelle.
Das heißt wir gucken jetzt ob Text.
Ob in Text was drin steht und wenn in Text was drin steht.
Dann.
Machen wir.
Dann machen wir die diese Form auf wo man wo man was eintragen kann.
Also wenn wenn Enter gedrückt wird und in in dem in dem Textfeld was drin steht.
Dann öffnen wir.
Das da.
Probieren wir mal prinzipiell aus was funktioniert.
Ach so.
Schau.
Sollte ich vielleicht noch machen.
Ha.
Ach so.
Is not.
Omega Lul.
Ah.
Da ist die neue Form.
Okay.
Das funktioniert.
Alles klar.
Habe ich habe ich subs übersehen.
Nein habe ich nicht.
Den easy killer habe ich schon vorgelesen.
So okay jetzt machen wir jetzt machen wir die Form hier auf.
Für neue Sachen wurden hinzugefügt.
Dann brauchen wir in dieser Order Form noch einen neuen Konstruktor.
Und zwar.
Für.
Seriennummer.
Wir müssen auch noch den Base aufrufen.
So.
Und dort übergeben wir nämlich das was aktuell.
Moment.
Bin ich.
Fuck.
So und da übergeben wir nämlich was aktuell hier in der Textbox drinne steht.
Weil es ja die aktuelle Seriennummer ist die wir einfügen wollen.
So.
Blabla Blabla Blabla Blabla.
Order.
So dann brauchen wir nochmal das ganze.
Und zwar.
Für.
Wenn wir was bearbeiten was schon existiert.
Legen wir mal ein Feld an.
So.
So und jetzt kann ich nämlich sagen.
Dass er schon mal die ganzen Daten lädt wenn das aufgeht.
Also würde ich sagen da machen wir mal.
Der ganze Mist der kommt wieder weg.
So das das wird jetzt das kommt jetzt hier das wird jetzt aufgerufen.
Wenn man.
Eine neue Seriennummer eingebt und Enter drückt.
Das ist für hinzufügen im Endeffekt.
So.
Dann machen wir das ganze nämlich hier drinne.
Wir legen eine neue Order an.
Adden als Items.
Das was wir eingegeben haben.
Und inserten tun wir nichts.
So und Order Name.
Insert machen wir erst wenn wir auf den Save Button drücken.
So und Name ist keine Ahnung.
Neue Bestellung oder so.
Falls falls ihr irgendwelche spezielle Spezialwünsche habt kann ich das immer noch reinschreiben.
Neue Bestellung.
Order sehr schön.
Jetzt sagen wir noch die globale Order ist das da.
Gut und von der Idee her.
Muss ich jetzt noch sagen wenn diese.
Oder unload.
Also sprich wenn die Order Form das erste Mal angezeigt wird.
Dann setzen wir den Text auf.
Oder also den Titel das was oben im Fenster steht.
Setzen wir dann auf den Name der aktuellen Bestellung.
So das sollte jetzt funktionieren also von der Idee her.
Wenn ich jetzt hier irgendwas eingebe und Enter drücke.
Sollte ein neues Fenster aufgehen.
Mit dem mit dem Name der Bestellung im Titel.
Funktioniert nicht.
Warum nicht.
Vielleicht weil ich Base aufrufe.
Warum nicht.
Geht das nicht.
Warum schreibst du das nicht in den Constructor weil.
Weil ich den Constructor haben will der einen Parameter braucht.
Und du musst den defaulten in den leeren Constructor verwenden.
Dass der Designer funktioniert sonst ist der Designer kaputt.
Vielleicht und Show.
Können wir ausprobieren.
Vielleicht.
Warte mal ich hab da irgendeine Logik.
Ich hab da irgendeine Logik Fehler drinne.
Ist Text überhaupt das richtige.
Text überhaupt das richtig.
Aber schon.
Ich glaube das ist an der anderen Stelle irgendwie Fail.
Das muss doch funktionieren.
Leute ich muss mal 5 Minuten weg unsere Heizung ist kaputt.
Ihr könnt euch mal überlegen woran es liegt.
Ich muss mal 5 Minuten weg unsere Heizung ist kaputt.
Ihr könnt euch mal überlegen woran es liegt.
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
und
