1
00:00:00,000 --> 00:00:07,000
Das war's für heute und wir sehen uns beim nächsten Mal wieder, bis dahin, tschüss, tschüss, tschüss, tschüss.

2
00:00:30,000 --> 00:00:35,000
Das war's für heute und wir sehen uns beim nächsten Mal wieder, tschüss, tschüss.

3
00:01:00,000 --> 00:01:05,000
Das war's für heute und wir sehen uns beim nächsten Mal wieder.

4
00:01:30,000 --> 00:01:35,000
So, da bin ich. Heute brauchen wir noch so 10 Minuten oder so, ich muss erst mal in Bastelstimmung kommen.

5
00:01:35,000 --> 00:01:50,000
So, da bin ich. Heute brauchen wir noch so 10 Minuten oder so, ich muss erst mal in Bastelstimmung kommen.

6
00:01:50,000 --> 00:02:03,000
Und war es auf der Arbeit wieder ein bisschen nervig. Und danach habe ich Sport gemacht, also ich bin noch nicht so wirklich komplett in Bastelstimmung.

7
00:02:03,000 --> 00:02:11,000
Aber das wird sich wahrscheinlich demnächst ergeben, hoffe ich mal. Habt ihr irgendwas Spannendes heute gemacht?

8
00:02:11,000 --> 00:02:21,000
Gibt es irgendwelche wichtigen, interessanten Neuigkeiten? Ich habe gesehen, Game Awards sind, es könnte mich kaum was weniger interessieren gerade.

9
00:02:21,000 --> 00:02:27,000
Game Awards haben mich ehrlich gesagt noch nie interessiert.

10
00:02:27,000 --> 00:02:38,000
Es gab mal eine Zeit, da habe ich total drauf gebrannt, neue Ankündigungen zu haben von Games, sei es irgendwelche Pressekonferenzen oder was vorgestellt wurde.

11
00:02:38,000 --> 00:02:44,000
Aber nachdem das alles mittlerweile so lame und overhyped ist, bis auf ein paar Sachen, mache ich die meisten.

12
00:02:44,000 --> 00:02:52,000
Gestern habe ich auch nicht geguckt. Ich lese mir einfach Zusammenfassungen durch und gut ist.

13
00:02:52,000 --> 00:02:55,000
Tja, siehste.

14
00:02:55,000 --> 00:03:01,000
Leute, was ist die beste Rust DDE, bevor wir loslegen?

15
00:03:01,000 --> 00:03:09,000
IntelliJ mit Rust Plugin, Wishlist Studio Code.

16
00:03:09,000 --> 00:03:16,000
Ich habe mir im Vorfeld nicht viel angeguckt. Ich habe nur ganz kurz mal so ein Hallo Welt Tutorial gelesen, das war es.

17
00:03:16,000 --> 00:03:25,000
NeoWim, ja mit was denn? NeoWim alleine wird es ja kaum sein, oder?

18
00:03:25,000 --> 00:03:29,000
Language Server, oder was?

19
00:03:29,000 --> 00:03:35,000
C-Line mit Rust, na gut, da kann ich auch IntelliJ mit, wobei C-Line habe ich schon installiert, da kann ich auch C-Line verwenden.

20
00:03:35,000 --> 00:03:45,000
Wobei ich weiß gar nicht, ob ich auf dieser vor allem installiert habe.

21
00:03:45,000 --> 00:03:52,000
Das ist genau das gleiche, das ist Wishlist Studio Code, nur glaube ich ohne proprietären Microsoft-Krempel.

22
00:03:52,000 --> 00:04:00,000
Was teilweise gar nicht so einfach ist, weil du beispielsweise für CodeShare und für die C++ Extensions und sowas...

23
00:04:00,000 --> 00:04:05,000
Ja, die Wishlist Studio Code C++ Extensions ist proprietär, die geht nicht.

24
00:04:05,000 --> 00:04:13,000
Ja, also ich habe Rust mal gemacht vor einer ganzen, ganzen Weile. Ich glaube, da war die Sprache noch nicht mal 1.0, als das neu war.

25
00:04:13,000 --> 00:04:18,000
So ganz grob habe ich ein bisschen Ahnung von, aber nicht wirklich viel.

26
00:04:18,000 --> 00:04:23,000
Ah, ich weiß, dass du bei den hinteren Printen ein Ausrufezeichen brauchst, weil es ein Makro ist.

27
00:04:23,000 --> 00:04:27,000
Ich weiß, dass du mit Cargo dein Zeug managst.

28
00:04:27,000 --> 00:04:32,000
Aber ich weiß, dass die Syntax teilweise ein bisschen Painschamp ist.

29
00:04:32,000 --> 00:04:37,000
Sehr viel NumSumOptional.

30
00:04:37,000 --> 00:04:45,000
Das Multithreading damals ziemlich Painschamp gewesen ist, wobei uns das für WebAssembly wahrscheinlich nicht weiter jucken muss.

31
00:04:45,000 --> 00:04:48,000
Ich, keine Ahnung, ich bin mal gespannt.

32
00:04:48,000 --> 00:04:57,000
Ownership, Borrow Checker, genau dieses ganze Zeug, da werden wir heute wahrscheinlich ein bisschen ausflippen.

33
00:04:57,000 --> 00:05:00,000
Aber wir machen simple Sachen.

34
00:05:00,000 --> 00:05:05,000
Ich habe keine Einladung zur Beta, ich habe mich noch nicht mal angemeldet zur Beta.

35
00:05:05,000 --> 00:05:08,000
Warum muss man sich da überhaupt anmelden zu einer Beta?

36
00:05:08,000 --> 00:05:11,000
Warum kann man nicht einfach den Editor in der Beta installieren?

37
00:05:11,000 --> 00:05:20,000
Und das gute, wie irgendwelche neuen Social Plattformen, die sind auch immer mit Einladung am Anfang.

38
00:05:20,000 --> 00:05:22,000
Gibt es eigentlich Clubhouse noch?

39
00:05:22,000 --> 00:05:25,000
Nein, Clubhouse interessiert doch keinen mehr, oder?

40
00:05:25,000 --> 00:05:37,000
Die haben doch mal irgendwelche Daten geleakt und seitdem will da keiner mehr hin.

41
00:05:37,000 --> 00:05:47,000
Nicht Assembler, WebAssembly, das hat wenig zu tun mit wirklich x86 Assembler oder sowas.

42
00:05:47,000 --> 00:05:58,000
Man kann WebAssembly sogar in einer Lisp-ähnlichen Sprache zusammenwursten von Hand.

43
00:05:58,000 --> 00:06:02,000
Habe ich letztes Video drüber gesehen.

44
00:06:02,000 --> 00:06:05,000
Ja, da wurde irgendwas geleakt, ich weiß aber nicht mal was.

45
00:06:05,000 --> 00:06:09,000
Irgendwas wurde geleakt und ach, kein Schimmer.

46
00:06:09,000 --> 00:06:11,000
Ich hatte die App nie installiert.

47
00:06:11,000 --> 00:06:22,000
Ja, Lisp, also Leute, wenn ihr auf Programmiersprachen steht, die im Endeffekt so aussehen, dann mögt ihr Lisp wahrscheinlich.

48
00:06:22,000 --> 00:06:32,000
Ich habe früher mal eine ganze Weile Emacs verwendet, so zu Zeiten noch als Wishful Studio Code noch nicht angesagt,

49
00:06:32,000 --> 00:06:38,000
und auch die ganzen Extensions und ich sage euch, Emacs Lisp ist wirklich das Schlimmste, was es gibt.

50
00:06:38,000 --> 00:06:48,000
Ich weiß gar nicht, warum das so viele abgefeiert haben immer.

51
00:06:48,000 --> 00:06:56,000
Ja, fast.

52
00:06:56,000 --> 00:07:05,000
Ich überlege gerade, wie man das jetzt am besten machen.

53
00:07:05,000 --> 00:07:10,000
Als erstes installiere ich mir mal IntelliJ oder gucken, ob ich Z-Line noch installiert habe.

54
00:07:10,000 --> 00:07:13,000
Erstmal installieren wir den ganzen Krempel und dann schauen wir mal.

55
00:07:13,000 --> 00:07:20,000
Ich muss mich ein bisschen an Rust rantasten, wobei so ein Hallo Welt kriegen wir wahrscheinlich relativ zackig zum Laufen.

56
00:07:20,000 --> 00:07:24,000
Ob wir heute was mit FFmpeg hinbekommen, da habe ich so meine Zweifel.

57
00:07:24,000 --> 00:07:26,000
Weil das ist ja eigentlich das, was ich ausprobieren will.

58
00:07:26,000 --> 00:07:35,000
Ob ich mit FFmpeg was im Browser quasi Transcoden kann.

59
00:07:35,000 --> 00:07:44,000
Und ich will wirklich Low-Level das machen, also AV-Frames rausholen und nicht irgendein fertiges FFmpeg zu WebAssembly-Commando-Zeilen-Tool verwenden.

60
00:07:44,000 --> 00:07:48,000
Ich bin mal gespannt.

61
00:07:48,000 --> 00:07:51,000
Aber ich glaube nicht, dass wir das heute so weit hinkriegen.

62
00:07:51,000 --> 00:07:57,000
So, also, was ist das heute für ein Hintergrund? Das ist das Bing Image of the Day.

63
00:07:57,000 --> 00:08:04,000
Das ist eine Wiese mit roten Flecken.

64
00:08:04,000 --> 00:08:09,000
Alles klar.

65
00:08:09,000 --> 00:08:13,000
Was ist dein Haupt-OS, Windows 10?

66
00:08:13,000 --> 00:08:17,000
Das ist Windows 10 und das ist eine Linux VM.

67
00:08:17,000 --> 00:08:22,000
Sind eigentlich deine Hardware-Komponenten bekannt? Ja, die sind gar nicht sonderlich gut mittlerweile.

68
00:08:22,000 --> 00:08:30,000
Damals waren die ziemlich gut.

69
00:08:30,000 --> 00:08:34,000
Das hier, oder?

70
00:08:34,000 --> 00:08:36,000
Ja.

71
00:08:36,000 --> 00:08:40,000
Hast du 32 GB? Ja, ich habe 32 GB Arbeitsspeicher.

72
00:08:40,000 --> 00:08:44,000
Hier stehen glaube ich nur 16 drin, aber es sind insgesamt 32.

73
00:08:44,000 --> 00:08:46,000
Guck hier, 32 GB.

74
00:08:46,000 --> 00:08:50,000
Aber das brauchst du nicht. Guck mal, also das ist jetzt nicht...

75
00:08:50,000 --> 00:08:54,000
Armour Reforged, nee. Reforger.

76
00:08:54,000 --> 00:08:57,000
Gesehen habe ich das schon, Armour, aber nicht gespielt, nee.

77
00:08:57,000 --> 00:09:02,000
Also guck, du brauchst also, um ein paar VMs ordentlich laufen zu lassen, brauchst du keine 32 GB.

78
00:09:02,000 --> 00:09:06,000
Ich habe es voll übertrieben. Ich meine, ich habe dieser VM...

79
00:09:06,000 --> 00:09:08,000
Äh, hallo?

80
00:09:08,000 --> 00:09:14,000
Ich habe dieser VM 16 GB RAM und 4 CPU-Kerne gegeben. Das braucht die im Leben nicht.

81
00:09:14,000 --> 00:09:19,000
Armour Reforged, nee, das war Warcraft 3 Reforged.

82
00:09:19,000 --> 00:09:26,000
Also der Rechner ist 4 Jahre alt und ist immer noch ziemlich gut.

83
00:09:26,000 --> 00:09:34,000
Hauptsächlich wegen der 1080T.

84
00:09:34,000 --> 00:09:38,000
Das wird sich gleich zeigen.

85
00:09:38,000 --> 00:09:48,000
Nein, nein, das ist nicht die neue VM. Die ist ja noch gar nicht fertig.

86
00:09:48,000 --> 00:09:52,000
Ich glaube bei RAM-Auslastung ist eigentlich weniger mehr.

87
00:09:52,000 --> 00:09:56,000
Madboy Mad Prime Subscriptions hier, Dankeschön.

88
00:09:56,000 --> 00:10:01,000
Massive Prime Subs. Ich habe übrigens vorher noch eine neue Version vom EPG-Champ gepostet.

89
00:10:01,000 --> 00:10:07,000
Der caches das ganze Zeug jetzt ordentlich, jetzt geht es ein bisschen schneller.

90
00:10:07,000 --> 00:10:11,000
Und die Aufnahme funktioniert auch wieder.

91
00:10:11,000 --> 00:10:13,000
Wie heißt noch mal die Terminal-Anwendung?

92
00:10:13,000 --> 00:10:17,000
Das da, CMDR.

93
00:10:17,000 --> 00:10:22,000
Aber mittlerweile, du kannst auch das neue Windows Terminal verwenden, das ist auch ganz okay.

94
00:10:22,000 --> 00:10:25,000
Allerdings, please nicht mit PowerShell.

95
00:10:25,000 --> 00:10:31,000
Na gut, doch mit PowerShell. PowerShell ist okay. Ich mag PowerShell als interaktive Shell nicht, aber PowerShell ist okay.

96
00:10:31,000 --> 00:10:44,000
Was halt Ober-Crap ist, also Hyper-Ultra-Crap ist das CMD-Fenster und dann da drin diese Batch-Shell. Ganz abartig.

97
00:10:44,000 --> 00:10:49,000
PowerShell gibt es übrigens mittlerweile sogar unter Linux. Ich weiß gar nicht, ob ich hier mal Just For Fun installiert habe.

98
00:10:49,000 --> 00:10:54,000
Seit es.NET Core gibt, gibt es den Kram.

99
00:10:54,000 --> 00:10:57,000
Auch für Linux.

100
00:10:57,000 --> 00:11:20,000
So, ich muss mal kurz ein bisschen Platz machen. Wartet mal, Leute, ich muss mal kurz, muss mal kurz was gucken, wo ich hier viel Platz verschwende.

101
00:11:20,000 --> 00:11:27,000
Dart. Ich hab immer noch Dart und Flutter drauf hier. Das könnte man tatsächlich mal löschen.

102
00:11:27,000 --> 00:11:30,000
Mach hinne.

103
00:11:30,000 --> 00:11:36,000
Ich muss ein paar Sachen löschen, dass ich genug Platz hab wieder. Ich glaub, ich hab da schon 160 geht ran.

104
00:11:36,000 --> 00:11:42,000
Oder 80 nur?

105
00:11:42,000 --> 00:11:50,000
Hat nicht denselben Umfang wie unter Windows. Ja, das wundert mich nicht. PowerShell war ja ursprünglich als Windows-Automatisierungs-Ding geplant. Da ist ja auch dieses Ganze.

106
00:11:50,000 --> 00:11:58,000
Wie heißt das unter Windows? Nicht WSL. Ich meine nicht WSL. Ich meine dieses Abfragezeug. WMI heißt das, glaube ich, unter Windows.

107
00:11:58,000 --> 00:12:07,000
Wo du so System-Infos abfragen kannst. Das hat ja eigentlich alles ganz gute PowerShell-Integrationen, aber das gibt es ja unter Linux gar nicht.

108
00:12:07,000 --> 00:12:14,000
So. Oldschooler hier. Guck dir schon lange. Kam nie dazu, im Steam zu sein.

109
00:12:14,000 --> 00:12:21,000
Ja, ursprünglich hatte ich eigentlich gedacht, wir könnten eine Runde Battlefield spielen, wenn jetzt die neue Season rauskommt.

110
00:12:21,000 --> 00:12:30,000
Aber ich hab heute absolut keinen Bock auf Battlefield 2042. Ich bin eh ziemlich im Arsch.

111
00:12:30,000 --> 00:12:36,000
Ich bin ehrlich gesagt auch nur angekommen, weil ich gestern gesagt hab oder gestern extra abstimmen lassen,

112
00:12:36,000 --> 00:12:44,000
was wir heute machen wollen. Zwar mit dem Hinweis vielleicht auch nix, aber ich wollte dann trotzdem jetzt auch nicht den Streamstreak abreißen lassen.

113
00:12:44,000 --> 00:12:51,000
Ich meine, das ist jetzt Premiere. Ich glaube, das hatte ich noch nie. Ich war sieben Tage oder acht Tage in Folge on.

114
00:12:51,000 --> 00:13:00,000
Das ist ja, das kommt ja normalerweise nie vor.

115
00:13:00,000 --> 00:13:07,000
So. Also, Home. Na, da haben wir nicht viel. War. Lip.

116
00:13:07,000 --> 00:13:17,000
Alter.

117
00:13:17,000 --> 00:13:26,000
Snap-Pains-Champ, Alter. Was hab ich denn überhaupt? Snap-List. Snap-List.

118
00:13:26,000 --> 00:13:37,000
WTF? Ah. Wie krieg ich, wie krieg ich, wie krieg ich das überhaupt weg? Snap-Remove.

119
00:13:37,000 --> 00:13:44,000
Okay, okay. Weg, weg damit. Braucht doch kein Mensch.

120
00:13:44,000 --> 00:13:56,000
Bare. Core. Core. Core. Dings. GTK Common Themes. Warum?

121
00:13:56,000 --> 00:14:06,000
LXD. Was hab ich denn hier alles für einen Müll drauf? Was laufen? Warum hast du, ich weiß es nicht.

122
00:14:06,000 --> 00:14:16,000
Ich hab noch, ich hab noch LXD, LXD. Was hab ich denn hier alles für Zeug? Delete. Remove. Ach.

123
00:14:16,000 --> 00:14:26,000
Uninstall. Ach, ich weiß gar nicht, was es ist. Ich hoffe, dass es Remove ist. Nein. Delete. Delete. Vielleicht. Okay.

124
00:14:26,000 --> 00:14:39,000
Delete. Da runnt sogar ein Container standardmäßig. Ich hab keinen platzen Schimmer, was es ist, aber.

125
00:14:39,000 --> 00:14:46,000
Ich lösch das jetzt einfach. Kann nix Wichtiges sein.

126
00:14:46,000 --> 00:15:03,000
Einfach weg damit. So, und dann werde ich, dann werde ich gleich wegschmeißen. Ich muss mal kurz ein bisschen Platz machen. Ja, auf. Ausgehen, please.

127
00:15:03,000 --> 00:15:10,000
Arch, by the way. Ja. Da kann es schonmal sein, dass man über, Arch ist so wahnsinnig advanced und geil.

128
00:15:10,000 --> 00:15:24,000
Da kann schonmal passieren, dass man die Übersicht verliert, was man so alles läuft. Sag mal.

129
00:15:24,000 --> 00:15:29,000
Kann sich das vielleicht mal beenden? Please.

130
00:15:29,000 --> 00:15:45,000
This operation can't be cancelled. Interrupt, ja was denn jetzt? Kann ichs jetzt, kann ichs jetzt canceln oder nicht?

131
00:15:45,000 --> 00:15:55,000
Boss. Weg. Okay. Alles klar. Delete.

132
00:15:55,000 --> 00:16:02,000
Ich weiß nicht, was es ist, aber das muss weg. Muss man bei LXC auch noch Images löschen? Lieber Docker oder ist das danach?

133
00:16:02,000 --> 00:16:13,000
Image. Image List. Ja 200 irgendwas. Image. Delete.

134
00:16:13,000 --> 00:16:19,000
Ubuntu 18. Das läuft schon eine Weile hier, würde ich sagen, oder? Weil wir hier in Ubuntu 1804 laufen haben.

135
00:16:19,000 --> 00:16:35,000
Okay, so und jetzt kann ich Snap remove. Und jetzt habe ich. Was?

136
00:16:35,000 --> 00:16:46,000
Warum ist Snap so ein Crap, Alter? Und jetzt? Snap ist being used. Okay, das kann ich nicht löschen.

137
00:16:46,000 --> 00:16:54,000
Das gehört zu Snap dazu. Alles klar. Nee, auch nicht. Okay.

138
00:16:54,000 --> 00:17:16,000
Coil, Coil auch nicht oder was? Alter, Mann. Okay, Snap List. Darf ich jetzt den Rest löschen? Ja, ja, okay, okay.

139
00:17:16,000 --> 00:17:21,000
Ja, Snap löscht, Snap wird auch gleich gelöscht. Ich weiß gar nicht, warum ich den Müll überhaupt installiert habe.

140
00:17:21,000 --> 00:17:37,000
Keine Ahnung, aber dadurch wird ja nicht alles entfernt. So und jetzt diesen ganzen anderen Mist. Okay, das geht nicht.

141
00:17:37,000 --> 00:17:53,000
Ah, jetzt, jetzt kann ich die Bare löschen. Okay, das Klo muss da bleiben, alles klar. Snap. Weg damit. Yep.

142
00:17:53,000 --> 00:18:04,000
Na, Gott sei Dank. So, jetzt habe ich ein bisschen mehr Platz. Gut. Snap. Alles klar, gelöscht. So und jetzt machen wir noch mal ganz kurz hier ein bisschen Platz.

143
00:18:04,000 --> 00:18:21,000
Max. Cash. Alter, was ist denn hier alles gecashed, Mann? Share. Jet Brands. Okay, ergibt Sinn. Okay, wie, wie klärt man?

144
00:18:21,000 --> 00:18:39,000
Cash. Clearing Cash. Ja, wie geht das? Okay.

145
00:18:39,000 --> 00:19:00,000
Do you want to remove all other packages from cash? Yes. Yes. Do you want to remove all other? Yes. Yes.

146
00:19:00,000 --> 00:19:13,000
So, ich hoffe, ich habe mir jetzt nichts kaputt gemacht, aber schauen wir mal. Sehr gut. So, jetzt haben wir jetzt 75, 45G wieder frei. Excellent. So muss das sein.

147
00:19:13,000 --> 00:19:31,000
Alles klar. Gut. Dann installiere ich mir mal irgendein Jet Brands Ding mit Rust Plugin. Kengi, Moin. Da ist er. Moment, ich wollte nicht weiter. Ich wollte die Toolbox öffnen.

148
00:19:31,000 --> 00:19:47,000
Soll wohl auch für Web-Anwendungen eine gute Alternative. Go ist jetzt, ganz im Ernst, ich glaube nicht, dass Go bei Web-Anwendungen wahnsinnig irgendwie jetzt den hohen Marktanteil hat. Ich meine, es gibt ein paar Web-Frameworks, es gibt Leute, die machen größere Web-Anwendungen mit Go-Backend.

149
00:19:47,000 --> 00:20:07,000
Aber Go ist vor allem im Cloud-Umfeld ziemlich beliebt und für Kommando-Zeilen-Tools und Static Binaries. Also Go ist eine wunderbare Geschichte. Ich habe so ein paar Kritikpunkte an der Syntax und ein paar Sachen, die ich nicht ganz nachvollziehen kann.

150
00:20:07,000 --> 00:20:22,000
Auf der einen Seite hast du zum Beispiel drei verschiedene Sorten, wie du Variablen anlegen kannst, aber sie wollen immer noch, dass du drei Nested Loops machst, um ordentlich durch Arrays durchzufräsen und dort was rauszufiltern.

151
00:20:22,000 --> 00:20:37,000
Wie gesagt, auf der einen Seite irgendwie ein bisschen viel, auf der anderen Seite ein bisschen wenig. Aber insgesamt ist Go immer noch ganz nice. Vor allem, wenn man das an C++-Standards misst, dann ist es hyper nice.

152
00:20:37,000 --> 00:20:46,000
Ja und Go hat jetzt auch Generics, wobei die Syntax wohl auch nicht so geil sein soll.

153
00:20:46,000 --> 00:21:08,000
Ja, Switchbot ist preislich nicht so super attraktiv. Ich habe allerdings noch zwei Stück hier auf Lager, weil man braucht immer mal was, ja auch Sachen zu checken, ob irgendein Key in einem Dictionary drin ist. Der Go-Way ist da auch jetzt nicht so geil.

154
00:21:08,000 --> 00:21:19,000
Das coole ist an den Switchbots, dass du damit alles irgendwie smart machen kannst, was ein Button hat, wo du nicht dran rumbasteln willst. Dafür habe ich auch noch ein paar auf der hohen Halde, also zwei Stück.

155
00:21:19,000 --> 00:21:32,000
So Leute, macht es einen Unterschied, ob ich C-Line installiere oder IntelliJ. Ich installiere wahrscheinlich C-Line, weil vielleicht machen wir ja mal wieder ein bisschen Arduino Zeug.

156
00:21:32,000 --> 00:21:49,000
Ich habe bei mir auf der normalen VM, die ich verwende, wenn wir nicht sind, habe ich im Prinzip auch Goland Rider C-Line drauf, weil ich das teilweise netter finde als Platform I.O. in Visual Studio Code.

157
00:21:49,000 --> 00:22:03,000
Tom, PC, Dankeschön für den Zap. So, C-Line, auf geht's. Nee, auf Vim habe ich jetzt keinen Bock.

158
00:22:03,000 --> 00:22:18,000
Wie gesagt, ich war früher der richtige Vim-Addikt. Ich habe 800 Zeilen Vim-AC oder noch mehr gehabt, keine Ahnung und irgendwie 40 Plugins und sonst was.

159
00:22:18,000 --> 00:22:26,000
Das kenne ich, das habe ich gesehen, aber das machen wir jetzt erstmal nicht. Ich brauche ja kein Web-Framework.

160
00:22:26,000 --> 00:22:33,000
Ich brauche ein paar Funktionen, die ich aufrufen kann im Browser von JavaScript aus. So, ich habe ein Tutorial gefunden für diese ganze Geschichte.

161
00:22:33,000 --> 00:22:49,000
Das war Rust WebAssembly. Das sah eigentlich ganz gut aus, das da. Das machen wir nicht durch, wir machen bloß das Hallo Welt da draus.

162
00:22:49,000 --> 00:23:05,000
Okay, also, Opening. Dann Open mal. Ich finde es immer geil, wenn Java ohne irgendwelche Settings geladen wird, wie schön das Frontrendering ist. Sagt doch mal, das ist doch eine wahre Augenweide.

163
00:23:05,000 --> 00:23:29,000
Plugins. So, Rust, guck mal da. Ist ziemlich beliebt. Erstes Plugin, was empfohlen wird. Rust. Ach so, bevor ich Rust installiere, sollte ich vielleicht mal Rust installieren, oder?

164
00:23:29,000 --> 00:23:38,000
Habe ich Rust 19? Ja, aber Rust alleine bringt mir nicht. Ich brauche Rust Up wahrscheinlich. Ich erinnere mich noch dunkel, dass man sowas... Oh.

165
00:23:38,000 --> 00:23:44,000
Are in Conflict. Ich glaube, ich brauche Rust Up, aber das werden wir gleich sehen.

166
00:23:44,000 --> 00:24:00,000
Weil wir brauchen ja zusätzliche Tool-Chains und Dinger. Vielleicht geht das auch mit Cargo. Ich weiß es nicht. Nee, Conflict sagt er jetzt bloß, weil beide das Rust-Kommando zur Verfügung stellen.

167
00:24:00,000 --> 00:24:15,000
Cargo, Cargo habe ich bestimmt. Ja, ja. Und ich habe auch ein aktuelles Rust. Guck mal hier, Repos, MK, wobei wir machen das irgendwie.

168
00:24:15,000 --> 00:24:36,000
Ja, mit Rust Up kannst du doch so... Also wenn ich mich doch richtig erinnere dran. Mit Rust Up kannst du dann auch zusätzliche Tool-Chains installieren, oder kannst du sagen, ja, ich hätte gern den Rust-Compiler für WebAssembly, ich hätte gern den Rust-Compiler für ARM, ich hätte gern auf Musel-Basis. Ja, das gibt es wirklich. Das ist so eine minimale C-Library.

169
00:24:36,000 --> 00:25:04,000
So, und nun? Wie geht es jetzt weiter? Ich habe jetzt Rust-Plugin installiert. Gibt es ein Plugin für HolySea? Nee. Nicht TempleOS Confirmed. Ok, neues Projekt, Rust. Ok. Language Standard C++14.

170
00:25:04,000 --> 00:25:31,000
Ich... Ist es Procken? Leute, ist das Plugin Procken? Wenn ich hier was anklicke, dann ändert sich was. Wenn ich Rust anklicke, passiert gar nichts. Restarten? Ok, wir Restarten.

171
00:25:31,000 --> 00:25:50,000
Im Zweifelsfall, Reboot tut gut, ne? Hast du schon mal was mit dir im... Nee, aber ich weiß, was es ist. Das ist so ein Stateless Overlay mal Ding für C und C++.

172
00:25:50,000 --> 00:26:10,000
So, und jetzt? Ah, tatsächlich. Ok, wir müssen doch kurz in das Tutorial reingucken, aber ganz wichtig. Ah, yes. Darkreader an. Setup. Erstmal Setup angucken.

173
00:26:10,000 --> 00:26:25,000
Rust-Toolchain. You will need Rust-Toolchain in Rust-Up, Rust-C und Cargo. Ok, Leute, ich brauche Rust-Up. Warum?

174
00:26:25,000 --> 00:26:47,000
NPM zum NPM installieren. MonkaS. Was ist der Unterschied von einer IDE und Vim zu Emacs? Es ist standardmäßig einfach mehr dabei. Bei Vim und Emacs musst du dir sehr viel selbst bauen.

175
00:26:47,000 --> 00:27:02,000
Und viele Sachen gehen da auch jetzt nicht so schön, wobei vieles mit externen Tools gelöst wurde. Also, zum Beispiel eine Sache, die in Vim nie so schön ging, war beispielsweise Auto-Completion-Pop-Ups.

176
00:27:02,000 --> 00:27:27,000
Vim hat zwar eingebaute Auto-Completion-Pop-Ups, aber wenn du beispielsweise ein Pop-Up... zeig dir, was ich meine. Ja, in Mineo-Vim funktioniert das gut. Vielleicht geht es mittlerweile auch, weil die ja vieles übernommen haben.

177
00:27:27,000 --> 00:27:48,000
So. Auf, starte mal. Das ist der Vorteil von Vim, der Startestelle. Also, wenn du sowas hier hast, zum Beispiel so ein Auto-Complete-Pop-Up, was du machen kannst, das ist halt richtig Pain's Jam gewesen, zum Beispiel Vim früher umzusetzen, weil Vim hat halt keine Möglichkeiten gehabt, außer ein Pop-Up zu machen.

178
00:27:48,000 --> 00:28:03,000
Also, wenn du sowas programmieren willst und du hast nur ein Pop-Up, wo du einfach nur Text reinschreiben kannst, ist es halt ein bisschen eklig. Also, du brauchst ja Zusatzinformation. In welchem Namespace ist das? Ist es eine Methode? Ist es ein sonst was anderes Icon?

179
00:28:03,000 --> 00:28:18,000
Mit so Sachen wie Language Server ist es ein bisschen besser geworden, aber sowas ist halt wirklich eklig in Vim. Aber in der Regel kann man sagen, Vim ist halt standardmäßig ein Out-of-the-Box-and-Text-Editor, der in irgendwie 5 Millisekunden gestartet ist.

180
00:28:18,000 --> 00:28:34,000
Wohingegen meine Ideen erst mal 30 Sekunden Booten richtig tun, dafür Out-of-the-Box deutlich mehr Funktionalität haben. Wie ist der aktuelle Stand bei der China-Chinesen-Wetterstation? Die funktioniert, die steht draußen und liefert Zeug.

181
00:28:34,000 --> 00:28:48,000
Ok. Hello World. Cargo Generate. Shit. Ich will kein Game of Life generaten, ich will Hello World generaten.

182
00:28:48,000 --> 00:29:05,000
Oui, Alok. Was für ein Ding. Ok, Leute, ich weiß noch nicht mal, was ich überhaupt installieren muss. Wasumpack.

183
00:29:05,000 --> 00:29:29,000
Get Wasumpack hier. Ja klar. Wie ich das mag. Erst mal schön reinpasten. Jaja, ganz bestimmt. Gibt's Wasumpack? Gibt's das hier? Wasumpack, da ist es doch, sehr schön. Wasumpack. Mach mal so ein Package Manager.

184
00:29:29,000 --> 00:29:45,000
Cargo Generate. Cargo Install, Cargo Generate. Ok, ich mach mal kurz ein neues Repo. Wobei, das installiert man wahrscheinlich einfach so, oder?

185
00:29:45,000 --> 00:30:04,000
Ach nee, jetzt mach ich's in meinem Heimatverzeichnis. Man hätte das, glaube ich, doch im Projekt machen sollen. Oder ist es jetzt global? Ich mach das einfach mal. NPM hab ich installiert. Ok, also Hello World.

186
00:30:04,000 --> 00:30:28,000
Was lädt er da eigentlich? Das ist ja fast schon schlimmer als bei NPM.

187
00:30:28,000 --> 00:30:39,000
Auf Cargo. Steht vor Schanghai rum. Kommt nicht rein.

188
00:30:39,000 --> 00:30:52,000
Warum soll ich? Was ist das eigentlich für ein bescheuertes Tutorial? Ich glaube, das machen wir doch nicht. Ich will doch kein Git Repo klonen von sonst wo. Ich will einfach mit einem simple Hallo Welt anfangen. Ok.

189
00:30:52,000 --> 00:30:57,000
Rust Web Assembly. Gibt's da ein besseres Tutorial?

190
00:30:57,000 --> 00:31:05,000
Introduction. Nee, das ist das gleiche.

191
00:31:05,000 --> 00:31:11,000
Gibt's ein Compiling from Rust? Ok, die Mozilla Dinger sind teilweise gar nicht schlecht.

192
00:31:11,000 --> 00:31:21,000
Was? Ach, das kann man auch über Cargo installieren. Warum schreiben die das nicht gleich?

193
00:31:21,000 --> 00:31:29,000
Oh, es kompiliert. Aho Korrasik wird kompiliert. Alles klar.

194
00:31:29,000 --> 00:31:37,000
Ich weiß sogar noch ungefähr, was das ist. Das war irgendeine String Match Library. Die gab es damals auch schon, wo ich mir Rust eingeschaut habe.

195
00:31:37,000 --> 00:31:57,000
Jetzt habe ich mir gemerkt, weil der Name so weird champ war. Es wird gerade wirklich das halbe Internet runtergeladen. Kann das sein?

196
00:31:57,000 --> 00:32:13,000
Ich weiß noch nicht, ob ich plötzlich Five Head bin. Das muss ich mal sehen. So, und dann macht man neues Cargo Projekt. Und dann macht man It Works.

197
00:32:13,000 --> 00:32:31,000
Ach du Scheiße, das ist ja richtiger Five Head Kram. Was für eine Leitung. 400 MBit drunter. Ich mache das einfach, wie Mozilla das sagt. Mozilla hat Ahnung.

198
00:32:31,000 --> 00:32:49,000
Auf, gib ihm. Ich kompiliere, ja, aber das soll man völlig schneller kompilieren.

199
00:32:49,000 --> 00:33:13,000
Single Threaded Compilation. Weird Champ.

200
00:33:13,000 --> 00:33:21,000
Okay, da brauchen wir anscheinend noch ein bisschen.

201
00:33:21,000 --> 00:33:30,000
Das ist. 33 Minuten. Das ist.

202
00:33:30,000 --> 00:33:44,000
Petalburg City aus Pokemon Omega Ruby und Alpha Sapphire. Alles klar. Jetzt weißt du Bescheid.

203
00:33:44,000 --> 00:33:51,000
Wie ist dein Workflow mit VMWare und der virtualen Maschine, die läuft? Hast du einfach ein extra Bildschirm? Nö.

204
00:33:51,000 --> 00:34:01,000
Mehrere Desktops. Oh, er ist fertig. Hab ich wahrscheinlich.

205
00:34:01,000 --> 00:34:07,000
Ne, hab ich nicht. Okay.

206
00:34:07,000 --> 00:34:11,000
Wo ist mein Path hier?

207
00:34:11,000 --> 00:34:23,000
Ich habe da schon ganz schön viel Müll drin. Okay, bin Cargo. Alles klar.

208
00:34:23,000 --> 00:34:37,000
Cargo. Generate. Alles klar, hat funktioniert. Sehr schön. Ups, jetzt habe ich meine Shell zugemacht. Also auf geht's. CD, Repos.

209
00:34:37,000 --> 00:34:43,000
Macht einen eigenen Ordner. Wenn ich Cargo New mache, macht er einen eigenen Ordner, der Hello Wasm heißt.

210
00:34:43,000 --> 00:34:53,000
Oder oder legt er das im aktuellen. Ach, in der Subdirector. Ja, steht doch da. Hello Wasm.

211
00:34:53,000 --> 00:35:08,000
Alles klar. So, dann öffnen wir das mal. Gucken, ob das Ding was taugt. Was ist denn die? Ich habe keine Ahnung. Das weiß ich auch jetzt nicht mehr. Ich habe wirklich keinen Schimmer mehr.

212
00:35:08,000 --> 00:35:23,000
Also, Repos. Hello Wasm. Nicht der Label-Champ. Cargo-Tommel. Auf geht's. Open Project. Trust. Wir trusten alles. Bei dem Hello World Project kann ich allzu viel falsch.

213
00:35:23,000 --> 00:35:52,000
Okay, was will der von mir jetzt? Genau. CMake? What the fuck? Oh no. Cargo fail. Warum?

214
00:35:52,000 --> 00:36:08,000
Warum? Cannot attach standard lip sources automatically. Okay, also muss ich doch Rust Up installieren. Meine Güte.

215
00:36:08,000 --> 00:36:28,000
Also, Rust Up. Ja, ist in Konflikt. Alles gut. Yes. Und wie stand das jetzt in der Anleitung? Setup Instruction. Okay.

216
00:36:28,000 --> 00:36:55,000
Der hier Rust Up. Und nu? Rust is managed by Rust Up to Rusta63. Blablabla. Rust Up. Und nu? Wie verwendet man das jetzt?

217
00:36:55,000 --> 00:37:11,000
Moment. Rust Up self uninstall? Das Ding kann sich selbst... Nee, Update lädt ja nichts Neues runter. Ich muss ihm wahrscheinlich sagen install oder sowas.

218
00:37:11,000 --> 00:37:28,000
Rust Up. Tool. Chain. Install. Stable. Wahrscheinlich wollen wir auch Stable haben. Vom 18.05. Ja, das ist ja noch nicht so lange her. Okay.

219
00:37:28,000 --> 00:37:43,000
Wunderbar. Stable x8664 unknown Linux GNU. Oh, allow me to interject for a moment. Es ist nicht Linux, es ist GNU Linux.

220
00:37:43,000 --> 00:38:02,000
Da ist es doch, Rust. Wunderbar. Auf geht's. Vielleicht geht's ja jetzt. Go installieren wir einfach? Das tatsächlich, ja. Das ist tatsächlich so.

221
00:38:02,000 --> 00:38:15,000
Go installieren ist easy. Wobei, ganz ehrlich, das Rumgefundene früher mit Go Pass war auch nicht schön. So, er hat's gecheckt. Code with me. Jetzt net. So, wie wär's mit Schrift ein bisschen größer machen?

222
00:38:15,000 --> 00:38:42,000
Und? Pack. Size 16. Immer noch zu klein. Hallo?

223
00:38:42,000 --> 00:39:01,000
18. Es ist exellent. So, it works. Sehr schön. Da bin ich ja froh, dass es worked. Leute, was ist Standard? Was machen die ganzen Rust oder die ganzen Rust, wie Rust Crust Tachians?

224
00:39:01,000 --> 00:39:16,000
Alter, warum müssen sich die Leute bei jeder Programmiersprache irgendwie komische Namen geben? Vier spaces, acht spaces, zwei spaces, tabs, backspace only, reverse indentation, was machen die? Vier spaces, ist das Standard?

225
00:39:16,000 --> 00:39:35,000
Einrückung. So. Ja, was macht denn Cargo FMT standardmäßig?

226
00:39:35,000 --> 00:39:49,000
Format. So, okay. Also, auf geht's. It works. Wunderbarer Test. Bester.

227
00:39:49,000 --> 00:40:07,000
We won't use this test code at all, so go ahead and delete it. Gut, gut, dass wir das überhaupt haben. Ja. Let's write some Rust. Was im Bindgen?

228
00:40:07,000 --> 00:40:24,000
Was für ein Ding? Okay, das wird jetzt einfach, das wird knallhart copy pasted. Was im Bindgen? Was im das? Das bedeutet wahrscheinlich, was er, da kann man bestimmt auch Parameter übergeben oder so. Nee, kann man nicht.

229
00:40:24,000 --> 00:40:42,000
Das bedeutet wahrscheinlich, für was er JavaScript Bindings generieren soll. Sag mal, okay, okay, ich rate jetzt mal was. Das hier ist so was wie ein Import von JavaScript und das hier ist ein Export zu JavaScript.

230
00:40:42,000 --> 00:40:57,000
Vermute ich jetzt einfach mal. Muss ich irgendwelche Dependencies eintragen? Das steht hier aber gar nicht.

231
00:40:57,000 --> 00:41:12,000
Pifat. Using was im Bindgen to communicate. Okay. Calling external functions in JavaScript vom Rust. Okay.

232
00:41:12,000 --> 00:41:37,000
Das steht unten. Werden wir gleich sehen. Ich will jetzt wirklich mal ein minimales Hallo Welt produzieren. Ja, das hatten wir, das hatten wir doch hier gerade schon. Warum macht er dann eigentlich überhaupt eine Zeile draus und nicht zwei?

233
00:41:37,000 --> 00:41:51,000
Das interessiert ihn auch nicht. Compiling our code to WebAssembly. Okay. Cargo Tommel. Ja, Inni war gestern. Jason und Jaml ist auch out.

234
00:41:51,000 --> 00:42:08,000
Rust setzte von Anfang an auf Tommel. Das kann ich mir noch dran erinnern. Das ist quasi so Inni plus in etwas besser. So bla bla bla bla bla bla bla. Das brauchen wir alles nicht. Crate Type cdlib. Alles klar.

235
00:42:08,000 --> 00:42:32,000
Das weiß ich sofort Bescheid. Was im Bindgen Version 2? Muss es wirklich Version 2 sein oder kann es nicht einfach auch was neueres sein? Von wann ist denn das Tutorial? Was im Bindgen GitHub? Was sind die neueste Version davon?

236
00:42:32,000 --> 00:42:47,000
Okay. Installiert er wenn ich 2.0. Ja, der war so schlau. Cargo war nämlich ziemlich ziemlich nice. Da kann ich mich noch dunkel dran erinnern. Der installiert jetzt die letzte Zweier Version. Also 0 2 80 wahrscheinlich.

237
00:42:47,000 --> 00:43:05,000
Fill in your own repository GitHub bla bla bla bla bla. Okay. Was im Pack? Bild Target Web. Okay. Wenn das jetzt funktioniert, dann kacke ich aber eine Runde.

238
00:43:05,000 --> 00:43:26,000
Wie das funktioniert. Smiley face. Was im Package ist? Package ausschreiben war selbstverständlich kein Platz mehr. Das verstehe ich.

239
00:43:26,000 --> 00:43:44,000
Is ready to publish pkg. Hello wasm bg. Hello wasm bg. Guck mal sogar Typescript. Typescript support haben wir sogar.

240
00:43:44,000 --> 00:44:08,000
Okay. Was im Browser will ich das ausführen? Also im Endeffekt brauche ich wahrscheinlich jetzt irgendeine. Genau. Index HTML. Und dann muss man den Krempel hier machen. Alles klar. Dann machen wir das doch mal.

241
00:44:08,000 --> 00:44:32,000
Project. Okay. Ich glaube so ein bisschen HTML kannst du hier darin auch machen. So. Und. Das geht jetzt oder was? Das muss ich jetzt surfen. Gehe ich mal von außer ich brauche. Okay.

242
00:44:32,000 --> 00:44:47,000
Genau das. Ohne Scheiß. Genau das hätte ich auch gemacht. Genau das hatte ich auch gemacht. Make sure to use an up to date web server that supports application wasm.

243
00:44:47,000 --> 00:45:04,000
Alles klar. Application wasm. So und jetzt einfach starten da drin. Port 8000. Na dann. Schauen wir mal. Was da jetzt rauskommt bei. Localhost port 8000.

244
00:45:04,000 --> 00:45:18,000
Hello web. Das war einfach. Das war wirklich easy. So also wenn ich das jetzt richtig gesehen habe passiert jetzt folgendes.

245
00:45:18,000 --> 00:45:35,000
JavaScript. Also. Okay. Hier. Wir importieren unser WebAssembly Modul. Und rufen. Nachdem es geladen wurde. Mit. Ab artigster. Callback Syntax.

246
00:45:35,000 --> 00:45:49,000
Rufen wir jetzt hier unsere Funktion auf. In WebAssembly die dann wiederum eine JavaScript Funktion aufruft. Okay. Das ist ziemlich sinnloser durch die Brust ins Auge. Aber. Why not. Ja.

247
00:45:49,000 --> 00:46:00,000
Was ist der Vorteil davon. Dass du zum Beispiel C Libraries verwenden kannst und sowas. Im Browser. Das ist halt schon recht nice. Oder Rust Libraries.

248
00:46:00,000 --> 00:46:15,000
Hello wasm. Muss man. Da muss das nicht. Du kannst mit JavaScript mehr oder weniger alles machen was du brauchst.

249
00:46:15,000 --> 00:46:25,000
Aber zum Beispiel wenn du sowas wie FFM Pack im Browser haben willst dann kommste da dran nicht vorbei. Was es in Rust gibt was es in JavaScript nicht gibt.

250
00:46:25,000 --> 00:46:40,000
Zum Beispiel FFM Pack bindings. Im Browser funktionieren. Wenn du FFM Pack im Browser verwenden willst kannst du das mit JavaScript alleine ziemlich knicken.

251
00:46:40,000 --> 00:46:55,000
So. Jetzt versuchen wir mal es halbwegs sinnvolles zu machen. Schieben wir mal den Browser dahin. Ich meine es liefert immer das gleiche aus. Dann machen wir mal hier unten ein Terminal auf.

252
00:46:55,000 --> 00:47:11,000
Und. Was musste man nochmal machen. Wasm. Wasm. Build. Target. Web. Musste man machen. Okay. Also damit kompiliere ich den Krempel. Alles klar. So. Das heißt im Endeffekt ich mache jetzt mal dieses Alert daraus.

253
00:47:11,000 --> 00:47:26,000
Das braucht ja keiner. Print. Kann das auf die Konsole printen. Wahrscheinlich nicht oder. Kein Que. Das wird wahrscheinlich nicht funktionieren. Moment. Leute. Rust Semikolon oder kein Semikolon.

254
00:47:26,000 --> 00:47:41,000
Darf ich fragen was FFM Pack ist. FFM Pack. Wobei ich weiß gar nicht ob du das gefragt hast. Ja. FFM Pack. Es hat nichts mit Frankfurter Mind zu tun. Was ich meine ist FFM Pack. Das ist eine Multimedia Library.

255
00:47:41,000 --> 00:47:57,000
Die dir unter anderem erlaubt Streams zu empfangen. Anders zu encoden. Bilder zu extrahieren. Und nachdem das alles relativ low level ist kannst du da ganz abgedrehte Sachen machen. Du kannst zum Beispiel sagen. Ich empfange ein RTSP Stream von der Webcam.

256
00:47:57,000 --> 00:48:16,000
Und extrahiere mir jedes Bild. Also decode jedes Bild. Und dann mache ich alle 5 Sekunden ein Bild was ich beispielsweise als JPEG rendere und dann auch in der Webseite anzeige. Irgendwie sowas. Du kannst ganz wildes wildes Zeug machen mit FFM Pack.

257
00:48:16,000 --> 00:48:31,000
Ja vor allem. Vor allem als Decoder ist FFM Pack. Gut. Ich encode meine Videos übrigens auch mit FFM Pack. Aber gerade. Also was ich eigentlich hauptsächlich bisher verwendet hab immer. Und wo FFM Pack einfach best ever ist.

258
00:48:31,000 --> 00:48:46,000
Wenn du Videos decoden musst. Wir haben schon öfters in Streams mal H264 Streams decoded. Und da kannst du halt FFM Pack verwenden komplett. Vom empfangen über RTSP. Über das extrahieren von einzelnen Bildern und decoden.

259
00:48:46,000 --> 00:49:13,000
In normales. Nicht wirklich RGB. Aber ich sag jetzt mal RGB. Also FFM Pack ist extrem Pog G. Scheiße. Extrem Pog. Macht FFM Pack auch Audio. Macht auch Audio ja.

260
00:49:13,000 --> 00:49:22,000
Du kannst beispielsweise mit FFM Pack wenn du jetzt das nicht als Library verwenden willst. FFM Pack besteht ja auch aus einem ziemlich umfangreichen Command Line Tool.

261
00:49:22,000 --> 00:49:39,000
Kannst mit FFM Pack zum Beispiel sowas machen wie Videos kürzen ohne neu zu encoden oder Videos von TS in MP4 Container packen ohne neu zu encoden und sowas. Also FFM Pack ist wirklich nice.

262
00:49:39,000 --> 00:49:45,000
So. Jetzt wollen wir mal gucken ob Print. Ob Print geht. Ob es auf der Konsole dann rauskommt.

263
00:49:45,000 --> 00:49:59,000
Pfeilen und v. Ne. Ok. Also auf Konsole kann man nicht. Wie würde ich jetzt kon- Ok. Moment. Moment. Wenn ich den Kram doch importiere.

264
00:49:59,000 --> 00:50:06,000
Das wird nicht funktionieren oder?

265
00:50:06,000 --> 00:50:11,000
Rust. Import. Konsole. Log. Wasen.

266
00:50:11,000 --> 00:50:19,000
Ah. Beispiele. Konsole. Log. Pog. Der Chat weiß schon wieder Bescheid.

267
00:50:19,000 --> 00:50:23,000
Ok. Konsole. Konsole. Log.

268
00:50:23,000 --> 00:50:35,000
FN Log. Ach. So. Ah. Ok. Verstehe. Verstehe. Verstehe. Der Name Space. Was ist bloß das Problem jetzt?

269
00:50:35,000 --> 00:50:45,000
Ach. Extern. Extern muss ich machen. Ach. Hier haben sie es schon extern. Ah. Ok. Da kannst du dann so einen größeren Block dran machen.

270
00:50:45,000 --> 00:50:57,000
Aha.

271
00:50:57,000 --> 00:51:06,000
Ok. Ok. Verstehe. So. Das heißt ich kann jetzt von Representive Assembly auch was auf die Konsole loggen. Also Log.

272
00:51:06,000 --> 00:51:10,000
CacW.

273
00:51:10,000 --> 00:51:12,000
Bild.

274
00:51:12,000 --> 00:51:16,000
Und CacW kommt auf der Konsole raus. Ok. Das ist schon mal nice.

275
00:51:16,000 --> 00:51:22,000
Cute. Chat. Ah. Ja. Ja.

276
00:51:22,000 --> 00:51:25,000
Funktioniert. Sehr schön. Pog. Nice. Das ist gut.

277
00:51:25,000 --> 00:51:32,000
Bis jetzt habe ich alles verstanden. Das war zwar noch nicht viel, was wir gemacht haben, aber immerhin.

278
00:51:32,000 --> 00:51:38,000
Das spricht nicht für das. Kommentare sind eh overrated. Das sage ich ja auch immer.

279
00:51:38,000 --> 00:51:47,000
Guter Code dokumentiert sich selbst. Und wenn man dann auch fehlerfrei programmiert, braucht man auch keine Tests.

280
00:51:47,000 --> 00:51:53,000
Und spart sich Zeit und ist schneller fertig. Easy.

281
00:51:53,000 --> 00:51:57,000
Easy.

282
00:51:57,000 --> 00:52:00,000
Alles overrated, outdated, gebadet.

283
00:52:00,000 --> 00:52:04,000
Debugger und Breakpoints braucht auch keiner.

284
00:52:04,000 --> 00:52:07,000
Command Line. CLI.

285
00:52:07,000 --> 00:52:12,000
Konsole Log Debugging. Beste.

286
00:52:12,000 --> 00:52:19,000
So. Gut. So. Was können wir denn jetzt mal wirklich sinnvolles machen?

287
00:52:19,000 --> 00:52:25,000
Guck mal. Muss man diesen Krampel so Payneschampig aufrufen wie da?

288
00:52:25,000 --> 00:52:32,000
Ich möchte meinen. Eigentlich möchte ich das mit zwei Tabs Einrückung haben.

289
00:52:32,000 --> 00:52:34,000
Ich.

290
00:52:34,000 --> 00:52:38,000
Haltet. Haltet ihr mich für sehr.

291
00:52:38,000 --> 00:52:48,000
Cringe. Wenn ich mein HTML mit zwei Spaces Einrückung mag.

292
00:52:48,000 --> 00:53:01,000
Willst du jetzt Champ oder?

293
00:53:01,000 --> 00:53:05,000
Capsa ist zwei. Zwei.

294
00:53:05,000 --> 00:53:08,000
Hier.

295
00:53:08,000 --> 00:53:13,000
Da bin ich mir jetzt nicht sicher. Warum nicht auch zwei?

296
00:53:13,000 --> 00:53:15,000
Next.

297
00:53:15,000 --> 00:53:17,000
Format.

298
00:53:17,000 --> 00:53:19,000
Wie?

299
00:53:19,000 --> 00:53:27,000
Mich veräppeln.

300
00:53:27,000 --> 00:53:39,000
Alter, lüg halt nicht.

301
00:53:39,000 --> 00:53:45,000
Jetzt. Was ist das denn?

302
00:53:45,000 --> 00:53:48,000
Das scheint nicht zu funktionieren. Ach, das ist wahrscheinlich für JavaScript.

303
00:53:48,000 --> 00:53:52,000
Für JavaScript ist nochmal extra oder wie?

304
00:53:52,000 --> 00:54:00,000
Wahrscheinlich ist für JavaScript nochmal extra.

305
00:54:00,000 --> 00:54:03,000
So. Ja, genau. Wir wollen wir wollen auf jeden Fall das erwarten.

306
00:54:03,000 --> 00:54:09,000
Irgendwie wie auch immer genau. Also sprich.

307
00:54:09,000 --> 00:54:15,000
Gibt es eigentlich Top Level Await mittlerweile in JavaScript? Also.

308
00:54:15,000 --> 00:54:20,000
So was da.

309
00:54:20,000 --> 00:54:23,000
Wow, wow, wow.

310
00:54:23,000 --> 00:54:31,000
Ich will nichts kommenden. Ich will auskommen kommentieren.

311
00:54:31,000 --> 00:54:36,000
Geht Top Level Await wahrscheinlich nicht, oder?

312
00:54:36,000 --> 00:54:38,000
Quatsch, das ist ja hier.

313
00:54:38,000 --> 00:54:40,000
Oder doch?

314
00:54:40,000 --> 00:54:42,000
Oder doch?

315
00:54:42,000 --> 00:54:46,000
Wie ist denn standardmäßig in C-Line das?

316
00:54:46,000 --> 00:54:52,000
Ach Mensch, Shortcuts.

317
00:54:52,000 --> 00:54:59,000
Nee, wo geht das? Alter, warum ist das immer so versteckt?

318
00:54:59,000 --> 00:55:04,000
Short.

319
00:55:04,000 --> 00:55:06,000
Was muss ich noch mal gucken?

320
00:55:06,000 --> 00:55:11,000
Comment? Ich meine, so kann ich, ich meine, ich kann auch sagen Comment.

321
00:55:11,000 --> 00:55:14,000
Aber schön ist es nicht.

322
00:55:14,000 --> 00:55:17,000
So, jetzt muss ich mir am Kopf überlegen. JavaScript.

323
00:55:17,000 --> 00:55:24,000
Also das wäre dann quasi.

324
00:55:24,000 --> 00:55:26,000
Warte mal, nee.

325
00:55:26,000 --> 00:55:29,000
Ich würde einfach sagen Await in it.

326
00:55:29,000 --> 00:55:32,000
Und dann sage ich Creed.

327
00:55:32,000 --> 00:55:36,000
Das müsste doch funktionieren dann, wenn er ordentlich Awaited hat.

328
00:55:36,000 --> 00:55:37,000
Funktioniert auch.

329
00:55:37,000 --> 00:55:44,000
Ja, dann können wir uns dieses komische, dieses ekliche Callback Zeug sparen.

330
00:55:44,000 --> 00:55:45,000
Okay, nice. Also.

331
00:55:45,000 --> 00:55:48,000
So, jetzt lass mal in mich gehen.

332
00:55:48,000 --> 00:55:52,000
Was könnte man dann irgendwie Sinnvolles machen da jetzt?

333
00:55:52,000 --> 00:55:56,000
Was sagt denn das Mozilla Tutorial weiter?

334
00:55:56,000 --> 00:55:58,000
So ein bisschen üben.

335
00:55:58,000 --> 00:56:02,000
Ja, also Konsolok funktioniert Marco rules Konzo.

336
00:56:02,000 --> 00:56:08,000
Alter, das nimmt ja fast C++ Ausmaße an mittlerweile.

337
00:56:08,000 --> 00:56:15,000
Was ist denn das?

338
00:56:15,000 --> 00:56:21,000
Was bin ich sehend?

339
00:56:21,000 --> 00:56:28,000
Das erinnert mich ja wirklich fast schon ein bisschen an C++ Template, wenn ich sowas hier sehe.

340
00:56:28,000 --> 00:56:31,000
Was ist das? Was macht das? Was tut es?

341
00:56:31,000 --> 00:56:35,000
Es ist ein Template Argument, Funktionen und Lock.

342
00:56:35,000 --> 00:56:40,000
Ist das, dass man beliebig viele Argumente locken kann?

343
00:56:40,000 --> 00:56:42,000
Ist das, dass man möglichst viele?

344
00:56:42,000 --> 00:56:44,000
Next, let's define a Marco like this.

345
00:56:44,000 --> 00:56:54,000
Only it works for console lock.

346
00:56:54,000 --> 00:56:58,000
Okay, das brauche ich nicht.

347
00:56:58,000 --> 00:57:04,000
Das tut auch so.

348
00:57:04,000 --> 00:57:08,000
Let JS JS value 4 into.

349
00:57:08,000 --> 00:57:11,000
Alter, jetzt wird es aber.

350
00:57:11,000 --> 00:57:14,000
JS value. Wo kommt denn das her?

351
00:57:14,000 --> 00:57:17,000
Ist das standardmäßig hier einfach verfügbar?

352
00:57:17,000 --> 00:57:20,000
Let JS value.

353
00:57:20,000 --> 00:57:24,000
Okay, da kann ich quasi direkt JavaScript Variablen anlegen oder sowas.

354
00:57:24,000 --> 00:57:31,000
Okay, dann müssen wir mal probieren, wie man Return Werte von Konsolen macht.

355
00:57:31,000 --> 00:57:36,000
Also sprich, wie kriege ich einen Return Wert hier von zurück nach JavaScript?

356
00:57:36,000 --> 00:57:42,000
Ich glaube nämlich, wenn ich später mal tatsächlich es hinbekomme, FFmpeg zu verwenden und Bild decoded habe.

357
00:57:42,000 --> 00:57:44,000
So, und da kann man jetzt sagen Log.

358
00:57:44,000 --> 00:57:47,000
Wobei das das geht jetzt ja nicht, oder?

359
00:57:47,000 --> 00:57:49,000
Wenn ich sage JS.

360
00:57:49,000 --> 00:57:53,000
Das ist ja kein String. Das mag er ja nicht.

361
00:57:53,000 --> 00:58:00,000
Dann brauche ich dann brauche ich doch den Moment. Was macht er hier?

362
00:58:00,000 --> 00:58:03,000
Into into was?

363
00:58:03,000 --> 00:58:09,000
Boah, Alter, die die Rastzündung ist schon krasser Shit.

364
00:58:09,000 --> 00:58:13,000
Lock 2.

365
00:58:13,000 --> 00:58:22,000
Ach nee, Using Web Sus.

366
00:58:22,000 --> 00:58:24,000
Ach so.

367
00:58:24,000 --> 00:58:31,000
Warte, das gibt es schon.

368
00:58:31,000 --> 00:58:34,000
Ja, warum habe ich das denn dann überhaupt selbst gemacht?

369
00:58:34,000 --> 00:58:42,000
Ups.

370
00:58:42,000 --> 00:58:45,000
Muss das Krait noch installieren?

371
00:58:45,000 --> 00:58:48,000
Use of Undeclared Krait. Aha.

372
00:58:48,000 --> 00:58:51,000
Das heißt, das muss ich erst in meine.

373
00:58:51,000 --> 00:58:55,000
Tommelfile schreiben.

374
00:58:55,000 --> 00:59:01,000
Benutzt einfach was im Logger zum Logger. Was im Logger?

375
00:59:01,000 --> 00:59:05,000
Was im Logger Krait Github.

376
00:59:05,000 --> 00:59:07,000
Mach ich.

377
00:59:07,000 --> 00:59:15,000
Welches davon ist es denn?

378
00:59:15,000 --> 00:59:17,000
GitLab, MonkaS.

379
00:59:17,000 --> 00:59:21,000
Leute hosten wirklich jetzt auf GitLab.

380
00:59:21,000 --> 00:59:23,000
Zwei Jahre ago. Nee.

381
00:59:23,000 --> 00:59:31,000
Das will man wahrscheinlich nicht, oder?

382
00:59:31,000 --> 00:59:36,000
Zwei Jahre.

383
00:59:36,000 --> 00:59:42,000
Und das ist das ist noch älter.

384
00:59:42,000 --> 00:59:52,000
Will man das?

385
00:59:52,000 --> 00:59:55,000
Und was war das andere, was die hier hatten?

386
00:59:55,000 --> 01:00:00,000
Web Sus Console.

387
01:00:00,000 --> 01:00:02,000
Web Sus Console.

388
01:00:02,000 --> 01:00:06,000
Was ich noch nicht ganz gecheckt habe, ist, Leute, wie installiere ich was?

389
01:00:06,000 --> 01:00:09,000
Also da kann ich mich nicht mehr dran erinnern.

390
01:00:09,000 --> 01:00:12,000
Ja, man kann das hier in seine Cargo Datei schreiben.

391
01:00:12,000 --> 01:00:15,000
Aber woher weiß ich denn welche Versionen und so?

392
01:00:15,000 --> 01:00:17,000
Kann ich nicht einfach immer sagen?

393
01:00:17,000 --> 01:00:34,000
Gibt es nicht wie bei NPM beispielsweise ein Cargo install für die letzte Version?

394
01:00:34,000 --> 01:00:36,000
Krait's I.O. OK.

395
01:00:36,000 --> 01:00:37,000
Gratis Punkt.

396
01:00:37,000 --> 01:00:40,000
Da kann ich mich noch dran erinnern.

397
01:00:40,000 --> 01:00:45,000
Web Sus Console.

398
01:00:45,000 --> 01:00:48,000
Das heißt aber ganz anders, woher weiß ich denn jetzt, dass es das ist?

399
01:00:48,000 --> 01:00:49,000
Web Sus.

400
01:00:49,000 --> 01:00:55,000
Ach nee, das brauche ich wahrscheinlich.

401
01:00:55,000 --> 01:00:57,000
Das brauche ich wahrscheinlich.

402
01:00:57,000 --> 01:01:00,000
Web Sus brauche ich wohl.

403
01:01:00,000 --> 01:01:04,000
OK, also sprich, das muss ich in meinen Cargo schreiben.

404
01:01:04,000 --> 01:01:06,000
Am besten schreibe ich doch so, oder?

405
01:01:06,000 --> 01:01:10,000
Da mache ich immer die neueste 3er Version rein.

406
01:01:10,000 --> 01:01:19,000
Ah, jetzt ergibt es schon.

407
01:01:19,000 --> 01:01:20,000
No Console.

408
01:01:20,000 --> 01:01:25,000
OK.

409
01:01:25,000 --> 01:01:28,000
Klick auf die Kiste daneben.

410
01:01:28,000 --> 01:01:29,000
Was?

411
01:01:29,000 --> 01:01:36,000
Welche Kiste?

412
01:01:36,000 --> 01:01:40,000
Den C-Line?

413
01:01:40,000 --> 01:01:43,000
Ach hier.

414
01:01:43,000 --> 01:01:45,000
Ah, das ist ja cool.

415
01:01:45,000 --> 01:01:48,000
OK, nice.

416
01:01:48,000 --> 01:01:53,000
Console.

417
01:01:53,000 --> 01:01:58,000
Warum gibt es das jetzt angeblich nicht?

418
01:01:58,000 --> 01:02:05,000
Und warum kriege ich kein Autocomplete davon?

419
01:02:05,000 --> 01:02:18,000
Tja, so einfach ist das nicht.

420
01:02:18,000 --> 01:02:24,000
Ähm, ja und du?

421
01:02:24,000 --> 01:02:26,000
No Console in root.

422
01:02:26,000 --> 01:02:28,000
Was soll mir das jetzt sagen?

423
01:02:28,000 --> 01:02:32,000
Da steht es doch, dass es das gibt.

424
01:02:32,000 --> 01:02:36,000
Und vor allem, warum gibt es kein Autocomplete?

425
01:02:36,000 --> 01:02:38,000
Muss man das oben importieren vielleicht?

426
01:02:38,000 --> 01:02:47,000
Irgendwie da?

427
01:02:47,000 --> 01:02:49,000
OK, das triggert mich schon wieder.

428
01:02:49,000 --> 01:02:52,000
Warum funktioniert das nicht, obwohl das eindeutig so da steht?

429
01:02:52,000 --> 01:03:01,000
Und warum kriege ich kein Autocomplete dafür?

430
01:03:01,000 --> 01:03:07,000
Ich hab das bei mir drinne stehen.

431
01:03:07,000 --> 01:03:08,000
Features gleich Console.

432
01:03:08,000 --> 01:03:15,000
Wo steht das denn?

433
01:03:15,000 --> 01:03:16,000
Aha.

434
01:03:16,000 --> 01:03:21,000
Und woher weiß man das jetzt?

435
01:03:21,000 --> 01:03:24,000
Console.

436
01:03:24,000 --> 01:03:29,000
Wohin soll man das wissen?

437
01:03:29,000 --> 01:03:32,000
Also.

438
01:03:32,000 --> 01:03:36,000
Features.

439
01:03:36,000 --> 01:03:38,000
Console.

440
01:03:38,000 --> 01:03:39,000
OK.

441
01:03:39,000 --> 01:03:41,000
What?

442
01:03:41,000 --> 01:03:58,000
Alter, was will das von mir?

443
01:03:58,000 --> 01:04:01,000
Das muss in eine eigene Dependency.

444
01:04:01,000 --> 01:04:07,000
OK, ich copy paste das jetzt einfach aus dem Chat.

445
01:04:07,000 --> 01:04:10,000
Das ist sowas.

446
01:04:10,000 --> 01:04:12,000
OK, da wäre ich ohne euch nicht drauf gekommen.

447
01:04:12,000 --> 01:04:20,000
Keine Ahnung.

448
01:04:20,000 --> 01:04:30,000
Alter, wo ist denn das Problem, was will das von mir?

449
01:04:30,000 --> 01:04:32,000
Warum ist das angeklärt?

450
01:04:32,000 --> 01:04:34,000
Ach so, weil ich es rausgeschmissen habe.

451
01:04:34,000 --> 01:04:35,000
Ich habe nichts gesagt.

452
01:04:35,000 --> 01:04:36,000
Kriege ich denn jetzt?

453
01:04:36,000 --> 01:04:37,000
Kriege ich jetzt Autocomplete?

454
01:04:37,000 --> 01:04:39,000
Ach, jetzt kriege ich Console.

455
01:04:39,000 --> 01:04:41,000
OK.

456
01:04:41,000 --> 01:04:44,000
Ah, das ist doch schon besser.

457
01:04:44,000 --> 01:04:45,000
Jetzt funktioniert es.

458
01:04:45,000 --> 01:04:47,000
OK, jetzt können wir wirklich auch Zeug loggen.

459
01:04:47,000 --> 01:04:48,000
Das ist schon mal nicht verkehrt.

460
01:04:48,000 --> 01:04:51,000
OK, also, wie macht man Return Werte?

461
01:04:51,000 --> 01:04:53,000
Da muss ich jetzt mal schauen.

462
01:04:53,000 --> 01:04:58,000
Also, haben die das hier drinnen stehen?

463
01:04:58,000 --> 01:05:00,000
Nee, aber wie macht man Return Werte?

464
01:05:00,000 --> 01:05:02,000
Also quasi, das nennen wir jetzt nicht Creed.

465
01:05:02,000 --> 01:05:08,000
Das nennen wir jetzt irgendwie Pog.

466
01:05:08,000 --> 01:05:10,000
Return Pog.

467
01:05:10,000 --> 01:05:11,000
Heißt das?

468
01:05:11,000 --> 01:05:14,000
So, und wir machen mal was einfaches.

469
01:05:14,000 --> 01:05:18,000
Wenn ich das jetzt noch richtig in Erinnerung habe,

470
01:05:18,000 --> 01:05:21,000
musste man doch Return Code in Rust irgendwie so machen.

471
01:05:21,000 --> 01:05:26,000
Ibi32 oder so.

472
01:05:26,000 --> 01:05:28,000
Ja, so ging das.

473
01:05:28,000 --> 01:05:33,000
Hab ich noch im Hinterkopf, dass das irgendwie so funktioniert hat.

474
01:05:33,000 --> 01:05:39,000
OK, so, jetzt wird das hier abkacken, weil es gibt es nicht.

475
01:05:39,000 --> 01:05:42,000
Und wir rufen jetzt nicht Creed auf,

476
01:05:42,000 --> 01:05:45,000
sondern Return...

477
01:05:45,000 --> 01:05:47,000
Oh, guck mal, sogar Autokomplete im HTML.

478
01:05:47,000 --> 01:05:48,000
Das ist cool.

479
01:05:48,000 --> 01:05:50,000
Return Pog.

480
01:05:50,000 --> 01:05:51,000
So, Return Pog.

481
01:05:51,000 --> 01:05:55,000
Brauchen wir eigentlich gar kein String übergeben.

482
01:05:55,000 --> 01:06:04,000
Return Pog kriegt einfach nur Return Wert von 1.

483
01:06:04,000 --> 01:06:07,000
OK, und jetzt?

484
01:06:07,000 --> 01:06:08,000
Let E gleich?

485
01:06:08,000 --> 01:06:13,000
Nee, so einfach wird das nicht sein, oder?

486
01:06:13,000 --> 01:06:16,000
So einfach wird das doch nicht sein.

487
01:06:16,000 --> 01:06:19,000
Doch.

488
01:06:19,000 --> 01:06:24,000
Tatsächlich.

489
01:06:24,000 --> 01:06:25,000
Chat bisschen höher.

490
01:06:25,000 --> 01:06:27,000
Ja, ja, ja, hast recht.

491
01:06:27,000 --> 01:06:29,000
Ich mach den Chat oben rechts hin.

492
01:06:29,000 --> 01:06:36,000
Oben rechts ist ja sonst nichts Wichtiges.

493
01:06:36,000 --> 01:06:43,000
Hier oben, das muss man glaube ich nicht sehen.

494
01:06:43,000 --> 01:06:52,000
Wobei doch, da ist es über dem Browser.

495
01:06:52,000 --> 01:06:54,000
Oben links?

496
01:06:54,000 --> 01:07:04,000
Wo braucht man einen Chat gerade am wenigsten?

497
01:07:04,000 --> 01:07:06,000
Gar keinen Chat, nee.

498
01:07:06,000 --> 01:07:08,000
Nein, nein, wir plätten den Chat nicht aus.

499
01:07:08,000 --> 01:07:12,000
Der Chat ist Pog.

500
01:07:12,000 --> 01:07:17,000
Direkt über die Katze?

501
01:07:17,000 --> 01:07:19,000
Ich weiß, was ich mache.

502
01:07:19,000 --> 01:07:23,000
Der Chat bleibt hier unter Chico.

503
01:07:23,000 --> 01:07:26,000
Wie habe ich den Chat sonst immer so hier, glaube ich.

504
01:07:26,000 --> 01:07:27,000
Und wir machen was anderes.

505
01:07:27,000 --> 01:07:32,000
Wir machen was anderes.

506
01:07:32,000 --> 01:07:33,000
Ach, Quatsch.

507
01:07:33,000 --> 01:07:39,000
Moment, das muss ich so machen.

508
01:07:39,000 --> 01:07:43,000
Wir machen einfach so, guck mal.

509
01:07:43,000 --> 01:07:53,000
Nur kurz schauen, ob das jetzt hinhaut.

510
01:07:53,000 --> 01:07:57,000
Und da unten, zur Entspannung, kann Chico Fische fangen.

511
01:07:57,000 --> 01:08:07,000
Das reicht von der Quatsch.

512
01:08:07,000 --> 01:08:09,000
Kann Chico Fische fangen.

513
01:08:09,000 --> 01:08:10,000
Sehr gut.

514
01:08:10,000 --> 01:08:11,000
Alles klar.

515
01:08:11,000 --> 01:08:12,000
So, weiter im Text.

516
01:08:12,000 --> 01:08:15,000
Okay, Inns sind tatsächlich relativ einfach.

517
01:08:15,000 --> 01:08:17,000
Wie returnt man einen String?

518
01:08:17,000 --> 01:08:21,000
Ich erinnere mich, das war in Rust generell ein bisschen painstamp mit Returnwerten, weil

519
01:08:21,000 --> 01:08:27,000
du musstest immer sagen, returnst du eine Referenz, returnst du quasi das Ownership

520
01:08:27,000 --> 01:08:33,000
oder nur, nur, nur, wird das nur ausgeborgt oder sonst was.

521
01:08:33,000 --> 01:08:36,000
Das ist ganz kompliziert gewesen.

522
01:08:36,000 --> 01:08:42,000
Also einfach nur String geht wahrscheinlich nicht, weil String immer eine Referenz ist

523
01:08:42,000 --> 01:08:44,000
oder warum ist das so?

524
01:08:44,000 --> 01:08:48,000
Ich kann mich noch dran erinnern, in Rust gab es auch sowas.

525
01:08:48,000 --> 01:08:53,000
Da habe ich, da habe ich aber dann damals aus, bin ich damals ausgestiegen.

526
01:08:53,000 --> 01:08:54,000
Keine Ahnung, was das macht.

527
01:08:54,000 --> 01:09:00,000
Das ist irgendwas für Lifetime.

528
01:09:00,000 --> 01:09:01,000
Fail to execute.

529
01:09:01,000 --> 01:09:02,000
Jetzt geht's schon los.

530
01:09:02,000 --> 01:09:12,000
Jetzt geht's schon los.

531
01:09:12,000 --> 01:09:13,000
Und warum?

532
01:09:13,000 --> 01:09:18,000
Error.

533
01:09:18,000 --> 01:09:24,000
Ach, weil dann ein Warning an ist oder was?

534
01:09:24,000 --> 01:09:29,000
Das ist ja schon fast, das nimmt ja schon fast Go Ausmaße an.

535
01:09:29,000 --> 01:09:31,000
Ne, das will ich ausschalten.

536
01:09:31,000 --> 01:09:34,000
Wie macht man solche Flags aus?

537
01:09:34,000 --> 01:09:38,000
One unused defaults, bloß nicht.

538
01:09:38,000 --> 01:09:41,000
Das erinnert mich fast an Go-Generfe.

539
01:09:41,000 --> 01:09:51,000
Ja, wie macht man das?

540
01:09:51,000 --> 01:09:55,000
Ok, Agnus, disable Rust.

541
01:09:55,000 --> 01:09:58,000
Allow dead code klingt gut.

542
01:09:58,000 --> 01:10:04,000
Das ist das schönste.

543
01:10:04,000 --> 01:10:13,000
Ok, das geht schon mal nicht.

544
01:10:13,000 --> 01:10:16,000
Compiling your create to WebAssembly failed.

545
01:10:16,000 --> 01:10:20,000
Weil cannot return borrowed ref.

546
01:10:20,000 --> 01:10:25,000
Ok, das ist jetzt diese typische Rust Geschichte.

547
01:10:25,000 --> 01:10:30,000
Rust ist äußerst korrekt darin, wenn du Sachen machst, die out of scope gehen können.

548
01:10:30,000 --> 01:10:36,000
Weil es ist jetzt ja so, ich returne hier eine Referenz zu einem String.

549
01:10:36,000 --> 01:10:39,000
Aber sobald ich hier rausgehe, ist der String ja eigentlich schon wieder gelöscht.

550
01:10:39,000 --> 01:10:45,000
Das heißt, ich returne eigentlich was, was es gar nicht geben sollte.

551
01:10:45,000 --> 01:10:48,000
Kann man einfach String machen?

552
01:10:48,000 --> 01:10:49,000
Geht sowas?

553
01:10:49,000 --> 01:10:50,000
Ne, oder?

554
01:10:50,000 --> 01:10:53,000
Ok, jetzt hab ich keine Ahnung, wie ich den String returne.

555
01:10:53,000 --> 01:10:57,000
Ehrlich gesagt, sodass es funktioniert.

556
01:10:57,000 --> 01:11:00,000
Rust String.

557
01:11:00,000 --> 01:11:03,000
Ich hab wirklich keine Ahnung, wie es funktioniert.

558
01:11:03,000 --> 01:11:07,000
Ich erinnere mich dran, man musste glaube ich String new oder sowas machen, oder?

559
01:11:07,000 --> 01:11:09,000
String from?

560
01:11:09,000 --> 01:11:14,000
Sowas muss man glaube ich machen.

561
01:11:14,000 --> 01:11:15,000
Oder new?

562
01:11:15,000 --> 01:11:17,000
Irgendwie sowas war das doch, oder?

563
01:11:17,000 --> 01:11:20,000
Wie gesagt, ich hab Rust vor Jahren mal gemacht, oder?

564
01:11:20,000 --> 01:11:24,000
From?

565
01:11:24,000 --> 01:11:31,000
Oder into String?

566
01:11:31,000 --> 01:11:36,000
Ne.

567
01:11:36,000 --> 01:11:41,000
Und jetzt keine Referenz, sondern direkt in String, oder wie, oder was, oder wo?

568
01:11:41,000 --> 01:11:43,000
Aha, nein.

569
01:11:43,000 --> 01:11:46,000
Das geht auch nicht.

570
01:11:46,000 --> 01:11:57,000
Method not found in Static String.

571
01:11:57,000 --> 01:12:01,000
Das stimmt, Patrick, das ist wirklich so, true String.

572
01:12:01,000 --> 01:12:03,000
Ok, das hat jetzt funktioniert.

573
01:12:03,000 --> 01:12:06,000
Ich hab keine Ahnung, was der Unterschied ist zwischen...

574
01:12:06,000 --> 01:12:09,000
Ah, das eine ist bloß eine Referenz oder so?

575
01:12:09,000 --> 01:12:10,000
Ne.

576
01:12:10,000 --> 01:12:12,000
Hä?

577
01:12:12,000 --> 01:12:27,000
Ok, das eine gibt ein Box String und das andere gibt ein String.

578
01:12:27,000 --> 01:12:35,000
Alles klar.

579
01:12:35,000 --> 01:12:43,000
Ok, also Strings hin und her geht auch relativ einfach.

580
01:12:43,000 --> 01:12:47,000
So, jetzt, jetzt...

581
01:12:47,000 --> 01:12:53,000
Also, die Sache ist die, wenn wir irgendwie mal...

582
01:12:53,000 --> 01:13:03,000
Raw Daten returnen wollen, brauchen wir einen Byte Array.

583
01:13:03,000 --> 01:13:05,000
Ähm, wann war das?

584
01:13:05,000 --> 01:13:07,000
Let?

585
01:13:07,000 --> 01:13:09,000
Das war auch Let.

586
01:13:09,000 --> 01:13:11,000
Let Mut?

587
01:13:11,000 --> 01:13:13,000
Boah, mein Rust ist lange her.

588
01:13:13,000 --> 01:13:15,000
Und jetzt U8?

589
01:13:15,000 --> 01:13:17,000
Ne.

590
01:13:17,000 --> 01:13:19,000
U8?

591
01:13:19,000 --> 01:13:23,000
Ach du große Güte, was ist denn das?

592
01:13:23,000 --> 01:13:25,000
Hardware Instructions?

593
01:13:25,000 --> 01:13:27,000
Ne.

594
01:13:27,000 --> 01:13:29,000
Also, also.

595
01:13:29,000 --> 01:13:31,000
Byte Array Rust.

596
01:13:31,000 --> 01:13:34,000
Ich hab keine Ahnung.

597
01:13:34,000 --> 01:13:36,000
Ich mein, das heißt einfach Byte Array?

598
01:13:36,000 --> 01:13:42,000
Wirklich?

599
01:13:42,000 --> 01:13:47,000
Ne, das ist, das ist irgendein, das ist irgendein Create.

600
01:13:47,000 --> 01:13:49,000
How do I create an empty Byte Array?

601
01:13:49,000 --> 01:13:51,000
Genau das will ich wissen.

602
01:13:51,000 --> 01:13:53,000
Weg, weg war's.

603
01:13:53,000 --> 01:13:56,000
Ich erinnere mich wieder.

604
01:13:56,000 --> 01:13:58,000
Wobei, ne, ne.

605
01:13:58,000 --> 01:14:10,000
Byte Array, ach so war die, war die Array sonntags.

606
01:14:10,000 --> 01:14:12,000
Wie nimmst du Underscore Result?

607
01:14:12,000 --> 01:14:14,000
Ne.

608
01:14:14,000 --> 01:14:16,000
Okay, also das ist ein I32.

609
01:14:16,000 --> 01:14:18,000
Und konnte man das an U8 oder so hinten dran machen?

610
01:14:18,000 --> 01:14:20,000
Ja, genau.

611
01:14:20,000 --> 01:14:26,000
So, das ist jetzt ein Byte Array mit 24 Stellen.

612
01:14:26,000 --> 01:14:34,000
Das ist doch richtig so, ne?

613
01:14:34,000 --> 01:14:36,000
So, okay.

614
01:14:36,000 --> 01:14:38,000
Mutable muss es nicht sein.

615
01:14:38,000 --> 01:14:46,000
Und das kann ich jetzt aber höchstwahrscheinlich nicht einfach so return.

616
01:14:46,000 --> 01:14:48,000
Ist das hier der return Wert?

617
01:14:48,000 --> 01:14:50,000
Ne.

618
01:14:50,000 --> 01:14:52,000
Okay.

619
01:14:52,000 --> 01:14:54,000
How to return a Byte Array.

620
01:14:54,000 --> 01:14:56,000
Rust.

621
01:14:56,000 --> 01:14:58,000
How return Byte Array.

622
01:14:58,000 --> 01:15:04,000
Ach, muss man, muss man.

623
01:15:04,000 --> 01:15:08,000
Und U8 ist es.

624
01:15:08,000 --> 01:15:10,000
Ah.

625
01:15:10,000 --> 01:15:16,000
Aber Und U8 kann doch nicht funktionieren, weil sobald das hier aus dem Scope geht,

626
01:15:16,000 --> 01:15:24,000
und das geht hier aus dem Scope beim return, ist es doch undify, das erlauben die mir doch garantiert nicht.

627
01:15:24,000 --> 01:15:30,000
Das geht mit Vektors, geht das wahrscheinlich.

628
01:15:30,000 --> 01:15:38,000
Okay, das funktioniert.

629
01:15:38,000 --> 01:15:40,000
Okay.

630
01:15:40,000 --> 01:15:42,000
Und die Rust-Logik ist jetzt folgendes.

631
01:15:42,000 --> 01:15:48,000
Solange ich keine Referenz returne, ist das okay, weil dann returne ich ja Ownership zum Aufrufer von diesem Ding.

632
01:15:48,000 --> 01:15:52,000
Also quasi, dass der Aufrufer übernimmt das dann quasi.

633
01:15:52,000 --> 01:15:54,000
Ich, wie gesagt, ich hab Verurteil...

634
01:15:54,000 --> 01:15:56,000
Ach, fick dich, Alter.

635
01:15:56,000 --> 01:15:58,000
Was willst du denn?

636
01:15:58,000 --> 01:16:00,000
Oh.

637
01:16:00,000 --> 01:16:02,000
Das funktioniert nicht.

638
01:16:02,000 --> 01:16:04,000
Okay.

639
01:16:04,000 --> 01:16:06,000
Das kann man nicht returnen.

640
01:16:06,000 --> 01:16:10,000
Das muss man irgendwie anders machen.

641
01:16:10,000 --> 01:16:12,000
Kann man den Vektor returnen?

642
01:16:12,000 --> 01:16:20,000
Wahrscheinlich auch nicht.

643
01:16:20,000 --> 01:16:22,000
Äh.

644
01:16:22,000 --> 01:16:24,000
Moment, wie ging das nochmal?

645
01:16:24,000 --> 01:16:26,000
Weg.

646
01:16:26,000 --> 01:16:28,000
Einfach weg, Ausrufezeichen.

647
01:16:28,000 --> 01:16:30,000
Und jetzt ist er leer, oder?

648
01:16:30,000 --> 01:16:32,000
Leerer Vektor?

649
01:16:32,000 --> 01:16:34,000
Ne.

650
01:16:34,000 --> 01:16:36,000
Eins.

651
01:16:36,000 --> 01:16:38,000
Konnte man sowas machen?

652
01:16:38,000 --> 01:16:40,000
Eins.

653
01:16:40,000 --> 01:16:42,000
U8.

654
01:16:42,000 --> 01:16:44,000
Oh.

655
01:16:44,000 --> 01:16:46,000
So, und jetzt muss ich was returnen?

656
01:16:46,000 --> 01:16:48,000
Into?

657
01:16:48,000 --> 01:16:50,000
Rockslice.

658
01:16:50,000 --> 01:16:54,000
Alter, das ist so ein Fiveheader-Kram, diese Sprache, ist der Wahnsinn.

659
01:16:54,000 --> 01:16:58,000
Äh, und jetzt müssen wir wahrscheinlich einen Vektor returnen.

660
01:16:58,000 --> 01:17:00,000
Wobei, mit einem Vektor kann ja JavaScript nichts anfangen.

661
01:17:00,000 --> 01:17:04,000
Das kann ja, das kann ja eigentlich gar nicht funktionieren.

662
01:17:04,000 --> 01:17:06,000
Doch, das geht.

663
01:17:06,000 --> 01:17:08,000
Ah.

664
01:17:08,000 --> 01:17:12,000
Der macht da gleich einen kompatiblen JavaScript-Typ draus.

665
01:17:12,000 --> 01:17:14,000
Der macht ein U8-Array draus.

666
01:17:14,000 --> 01:17:16,000
Das ist, das ist sehr gut.

667
01:17:16,000 --> 01:17:18,000
Das ist sehr gut, dass der das macht.

668
01:17:18,000 --> 01:17:24,000
Weil so kriege ich mein Zeug von FFmpeg, die codet in Frames, auch zurück nach JavaScript.

669
01:17:24,000 --> 01:17:26,000
Okay, das ist Fiveheader-Time.

670
01:17:26,000 --> 01:17:28,000
Das ist cool, dass sie das unter der Haube machen.

671
01:17:28,000 --> 01:17:32,000
Ich stelle mir vor, wenn man das von Hand machen muss, ist eklig.

672
01:17:32,000 --> 01:17:40,000
Ich stelle mir vor, wenn man das von Hand machen muss, ist eklig.

673
01:17:40,000 --> 01:17:42,000
Das können wir jetzt theoretisch sogar auslesen.

674
01:17:42,000 --> 01:17:44,000
Kann man sagen, keine Ahnung.

675
01:17:44,000 --> 01:17:48,000
I, 0, das sollte 1 sein.

676
01:17:48,000 --> 01:17:50,000
Ja, ist 1, passt.

677
01:17:50,000 --> 01:17:52,000
Sehr cool, das ist nice.

678
01:17:52,000 --> 01:17:58,000
Dein Returnvent muss den Into Wasom Abitrade implementieren.

679
01:17:58,000 --> 01:18:01,000
Ich hoffe, dass alles, das schon standardmäßig, was ich brauche, drin ist.

680
01:18:01,000 --> 01:18:06,000
Okay, das ist tatsächlich äußerst spannend.

681
01:18:06,000 --> 01:18:09,000
Das finde ich cool.

682
01:18:09,000 --> 01:18:14,000
Ich will jetzt nicht gleich mit FFmpeg hier draufhauen, weil FFmpeg ist eigentlich das, was ich ausprobieren will.

683
01:18:14,000 --> 01:18:22,000
Weil ich gehe davon aus, wir werden noch ganz viele Probleme rennen, um überhaupt FFmpeg zum Laufen zu bekommen.

684
01:18:22,000 --> 01:18:24,000
Man kann es ja mal probieren.

685
01:18:24,000 --> 01:18:30,000
Direkt nach dem Hallo Welt und Print 1 gleich mal FFmpeg included und auf geht's.

686
01:18:30,000 --> 01:18:32,000
Ich meine, warum nicht?

687
01:18:32,000 --> 01:18:35,000
Scheiß drauf.

688
01:18:35,000 --> 01:18:37,000
Was soll FFmpeg überhaupt machen?

689
01:18:37,000 --> 01:18:43,000
Also, ich, wartet mal.

690
01:18:43,000 --> 01:18:48,000
Also ich habe mir folgendes überlegt, rein um sich mal ein bisschen mit Rust und WebAssembly zu beschäftigen.

691
01:18:48,000 --> 01:18:51,000
Wir haben noch den EPG-Champ programmiert.

692
01:18:51,000 --> 01:18:57,000
Allerdings, also ich will das nicht releasemäßig in den EPG-Champ einbauen.

693
01:18:57,000 --> 01:19:01,000
Wer den EPG-Champ nicht kann, ich zeige den EPG-Champ nochmal.

694
01:19:01,000 --> 01:19:08,000
Das ist ein Webfrontend für TV-Headend, dass man auch ordentlich auf dem Tablet und überall sein EPG angucken kann.

695
01:19:08,000 --> 01:19:14,000
So, und ich habe mir jetzt gedacht, und wie gesagt, nicht releasefertig einbauen.

696
01:19:14,000 --> 01:19:21,000
Man könnte doch beispielsweise einbauen, dass man sich ein Video streamen kann von TV-Headend.

697
01:19:21,000 --> 01:19:28,000
Das geht standardmäßig schon. FFmpeg kann das auf TV-Headend-Server-Seite transcoden für ein.

698
01:19:28,000 --> 01:19:37,000
Weil der Browser kann ja kein mpeg2h263, ist das glaube ich dann.

699
01:19:37,000 --> 01:19:40,000
Der Vorgänger von H264.

700
01:19:40,000 --> 01:19:43,000
Also das, was man heute so zum größten Teil des Videos hat.

701
01:19:43,000 --> 01:19:47,000
Das können Browser nicht. Und deswegen habe ich mir gedacht, warum Server-seitig machen,

702
01:19:47,000 --> 01:19:54,000
wenn ich mir das Video schicken lassen kann und on the fly mit FFmpeg im Browser transcoden kann.

703
01:19:54,000 --> 01:19:59,000
Nicht, dass das irgendwie produktionsreif mal werden würde.

704
01:19:59,000 --> 01:20:03,000
Aber mich interessiert einfach, ob das performanstechnisch möglich wäre.

705
01:20:03,000 --> 01:20:15,000
Also kann man mit FFmpeg im Browser ein SD-Video, also PAL hat ja nur 720x580 oder sowas.

706
01:20:15,000 --> 01:20:19,000
Ich brauche was im FFmpeg. Richtig.

707
01:20:19,000 --> 01:20:27,000
Und von der Idee her würde ich es dann so machen.

708
01:20:27,000 --> 01:20:44,000
Du lässt dir von einem Endpunkt, von einem Web-Server-Endpunkt streamen mir das Video-File runter.

709
01:20:44,000 --> 01:20:56,000
Übergebe das häppchenweise an FFmpeg in Wasm und krieg einen decodeten Frame zurück.

710
01:20:56,000 --> 01:20:58,000
Soweit die Idee.

711
01:20:58,000 --> 01:21:01,000
Das hört sich jetzt abstrakt gesehen relativ easy an.

712
01:21:01,000 --> 01:21:07,000
Aber ich glaube praktisch ist das durchaus ziemlicher Abfuck und gar nicht so easy, wenn man sich das vorstellt.

713
01:21:07,000 --> 01:21:12,000
Das heißt mein Ziel wäre jetzt erst mal zwischenzeitlich, ob ich überhaupt FFmpeg eingebunden kriege

714
01:21:12,000 --> 01:21:16,000
und ob ich vielleicht ein Test-Bild aus FFmpeg raus bekomme.

715
01:21:16,000 --> 01:21:20,000
FFmpeg kann ja Test-Bilder generieren, da brauche ich keinen Input.

716
01:21:20,000 --> 01:21:24,000
RGB, RGB, Test-Bilder.

717
01:21:24,000 --> 01:21:37,000
Also guckt, FFmpeg kann FFmpeg Generate, Test, Test-Pattern, Test-Pattern.

718
01:21:37,000 --> 01:21:43,000
Ja ne, ne, das ist besser.

719
01:21:43,000 --> 01:21:47,000
Oh fuck, das musst du mit Filter machen. Mit Filter ist schonmal eklig.

720
01:21:47,000 --> 01:21:50,000
Filter will man eigentlich nicht, nicht.

721
01:21:50,000 --> 01:21:53,000
Ja, da kommt so ein Test-Bild raus.

722
01:21:53,000 --> 01:21:57,000
Oder wir nehmen einfach, wir nehmen einfach einen PNG oder irgendwas.

723
01:21:57,000 --> 01:22:02,000
Irgendwie etwas. Aber wie kriegen wir denn jetzt überhaupt FFmpeg?

724
01:22:02,000 --> 01:22:05,000
Rust da rein.

725
01:22:05,000 --> 01:22:09,000
Safe FFmpeg Wrapper, das brauchen wir nicht.

726
01:22:09,000 --> 01:22:13,000
Simple and Safe Rust Interface, das brauchen wir schon eher.

727
01:22:13,000 --> 01:22:15,000
Rust AC FFmpeg.

728
01:22:15,000 --> 01:22:21,000
Also ich brauch was, wo ich wirklich Raw Zugriff auf FFmpeg habe.

729
01:22:21,000 --> 01:22:24,000
Und zwar Wasm.

730
01:22:24,000 --> 01:22:29,000
Nicht einfach nur Rust FFmpeg, Rust Wasm FFmpeg.

731
01:22:29,000 --> 01:22:34,000
Rust FFmpeg Wasi, das klingt doch schonmal gut.

732
01:22:34,000 --> 01:22:42,000
Letztes Jahr reicht mir immer noch.

733
01:22:42,000 --> 01:22:47,000
FFmpeg Libraries pre-compiled for WebAssembly Wasi als...

734
01:22:47,000 --> 01:22:53,000
Ach du Scheiße, ich hab keine Ahnung.

735
01:22:53,000 --> 01:22:55,000
Null?

736
01:22:55,000 --> 01:22:57,000
Ey, das klappt doch im Leben nicht.

737
01:22:57,000 --> 01:23:01,000
Das klappt doch im Leben nicht.

738
01:23:01,000 --> 01:23:04,000
MonkaS

739
01:23:04,000 --> 01:23:11,000
Ist das...

740
01:23:11,000 --> 01:23:13,000
Source

741
01:23:13,000 --> 01:23:15,000
AV Codec RS

742
01:23:15,000 --> 01:23:17,000
Geh auf.

743
01:23:17,000 --> 01:23:19,000
Okay, das sieht nach...

744
01:23:19,000 --> 01:23:23,000
Das sieht nach FFmpeg aus.

745
01:23:23,000 --> 01:23:25,000
Das sieht nach FFmpeg aus, ja.

746
01:23:25,000 --> 01:23:29,000
Alter, der hat sich aber einer Mühe gegeben.

747
01:23:29,000 --> 01:23:33,000
Ich mach das jetzt einfach rein, ich hab keine Ahnung, was ich da treibe.

748
01:23:33,000 --> 01:23:37,000
Weil mein Ziel ist eigentlich wirklich, ich will FFmpeg reinkriegen.

749
01:23:37,000 --> 01:23:38,000
Ne, so.

750
01:23:38,000 --> 01:23:40,000
Version 0, alles klar.

751
01:23:40,000 --> 01:23:41,000
Bild.

752
01:23:41,000 --> 01:23:46,000
Das kackt wahrscheinlich schon beim Bild ab gleich.

753
01:23:46,000 --> 01:23:48,000
Ne, ne, ne.

754
01:23:48,000 --> 01:23:50,000
Help.

755
01:23:50,000 --> 01:23:54,000
Convert identifier to snake case.

756
01:23:54,000 --> 01:23:55,000
Aha, okay.

757
01:23:55,000 --> 01:24:00,000
Also, Rust Style ist nicht Return Pog, sondern Return Pog.

758
01:24:00,000 --> 01:24:04,000
So macht man das, so machen das also die coolen Rust-Leute.

759
01:24:04,000 --> 01:24:06,000
Snake Case.

760
01:24:06,000 --> 01:24:14,000
Nicht Pascal, nicht Kebab Case, Snake Case.

761
01:24:14,000 --> 01:24:17,000
Return Pog.

762
01:24:17,000 --> 01:24:24,000
Noch funktioniert's, noch geht's, alles gut.

763
01:24:24,000 --> 01:24:26,000
Okay, und wie würd ich jetzt...

764
01:24:26,000 --> 01:24:31,000
Okay, ich hab keine Ahnung, wie ich FFmpeg verwenden würde.

765
01:24:31,000 --> 01:24:39,000
So, immer include und gucken, ob's immer noch kompiliert.

766
01:24:39,000 --> 01:24:42,000
Nein.

767
01:24:42,000 --> 01:24:44,000
Unknown Instruction Block.

768
01:24:44,000 --> 01:24:52,000
Na, geil.

769
01:24:52,000 --> 01:25:04,000
Ich glaub, das kann ich vergessen.

770
01:25:04,000 --> 01:25:06,000
Ich mein, ist ja auch geil.

771
01:25:06,000 --> 01:25:20,000
Die Fehlermeldung ist jetzt nicht so das geilste, oder?

772
01:25:20,000 --> 01:25:28,000
Rust Backtrace 1.

773
01:25:28,000 --> 01:25:31,000
What the fuck?

774
01:25:31,000 --> 01:25:36,000
Rust Begin Unwind.

775
01:25:36,000 --> 01:25:39,000
Okay, also...

776
01:25:39,000 --> 01:25:44,000
Das funktioniert nicht.

777
01:25:44,000 --> 01:25:49,000
AV Codec brauch ich, wenn überhaupt.

778
01:25:49,000 --> 01:25:57,000
Nee, Leute, also FFmpeg krieg ich da nicht so einfach rein, wie ich mir das gedacht hab.

779
01:25:57,000 --> 01:26:03,000
Hat irgendjemand einen Plan, was ich jetzt überhaupt gucken könnte, wo der Fehler ist?

780
01:26:03,000 --> 01:26:10,000
Ich glaub, man hat einfach gelitten, hör.

781
01:26:10,000 --> 01:26:25,000
Exited Status Code 101, super, da weiß man Bescheid.

782
01:26:25,000 --> 01:26:28,000
X Autist Prime, Dankeschön für den Sub.

783
01:26:28,000 --> 01:26:35,000
Nee, das kannst du vergessen, sobald ich diesen Krempel hier einbinde, dann ist... dann kackt der ab.

784
01:26:35,000 --> 01:26:38,000
Ohne geht's.

785
01:26:38,000 --> 01:26:43,000
Issues, Closed.

786
01:26:43,000 --> 01:26:48,000
Document Build Process.

787
01:26:48,000 --> 01:26:55,000
Ich hab legit keine Ahnung, was ich machen soll.

788
01:26:55,000 --> 01:26:58,000
Gibt auch FFmpeg was im Jahr, das bringt mir aber nichts.

789
01:26:58,000 --> 01:27:03,000
Das ist quasi der Kommandozahlen-Rapper.

790
01:27:03,000 --> 01:27:11,000
Ich brauch Low-Level-Access, oder hat FFmpeg was im wirklich Low-Level-Access, dass ich sagen kann, ich will AV-Packages haben und sowas?

791
01:27:11,000 --> 01:27:17,000
Ich glaube nicht, das ist das Kommandozahlen-Tool gerappt.

792
01:27:17,000 --> 01:27:20,000
Also das hab ich mir nämlich letztes Mal auf dem Handy angeguckt.

793
01:27:20,000 --> 01:27:27,000
Es gibt zwei Sachen, es gibt FFmpeg was im und es gibt noch ein anderes Projekt.

794
01:27:27,000 --> 01:27:38,000
Und die machen dann bloß so Sachen, wie zum Beispiel sowas hier, die quasi aufrufen von der FFmpeg Kommandozahlen-Dings und...

795
01:27:38,000 --> 01:27:40,000
Das will ich nicht.

796
01:27:40,000 --> 01:27:43,000
Okay, also dieser Krempel funktioniert, also schauen wir mal nicht.

797
01:27:43,000 --> 01:27:46,000
Rust FFmpeg war so...

798
01:27:46,000 --> 01:27:51,000
Da find ich bloß das.

799
01:27:51,000 --> 01:28:01,000
Das sagt.

800
01:28:01,000 --> 01:28:04,000
Okay, dann weiß ich nicht, was ich jetzt machen soll.

801
01:28:04,000 --> 01:28:10,000
Ich mein, das ist ja komplett nichts sagen, vor 15 Monaten irgendwann mal aktualisiert.

802
01:28:10,000 --> 01:28:14,000
Das geht wahrscheinlich einfach in der aktuellen Rust-Version schon gar nicht mehr.

803
01:28:14,000 --> 01:28:18,000
Sobald ich das einbinde, ist F angesagt.

804
01:28:18,000 --> 01:28:21,000
Kann er nicht, kann er nicht binden.

805
01:28:21,000 --> 01:28:25,000
Und ich mein, ich hab das gemacht, was der Typ geschrieben hat.

806
01:28:25,000 --> 01:28:28,000
Exakt das eingetragen.

807
01:28:28,000 --> 01:28:29,000
Geht nicht.

808
01:28:29,000 --> 01:28:31,000
Tja.

809
01:28:31,000 --> 01:28:40,000
Dann wird das mit irgendwelchen FFmpeg Sachen heute schon mal erst nichts.

810
01:28:40,000 --> 01:28:45,000
Unknown Instruction Block.

811
01:28:45,000 --> 01:28:47,000
Wirklich, keine Ahnung, keine Ahnung.

812
01:28:47,000 --> 01:28:50,000
Das wäre aber auch zu schön gewesen, wenn das einfach funktioniert hätte.

813
01:28:50,000 --> 01:28:52,000
Schau mal die Fehlermeldung näher.

814
01:28:52,000 --> 01:28:57,000
Es gibt keine wirkliche Fehlermeldung zu googlen.

815
01:28:57,000 --> 01:29:03,000
Das ist alles so Generic Zeugs, wo du nichts mit wirklich anfangen kannst.

816
01:29:03,000 --> 01:29:09,000
Ja.

817
01:29:09,000 --> 01:29:11,000
Ja gut, ich hab es halt rausgeschmissen.

818
01:29:11,000 --> 01:29:12,000
Naja.

819
01:29:12,000 --> 01:29:16,000
Aber von der Idee her wäre ja jeder Krempel drinnen gewesen, den ich haben will.

820
01:29:16,000 --> 01:29:19,000
AV Packet.

821
01:29:19,000 --> 01:29:22,000
Genau, diesen Krempel will ich haben.

822
01:29:22,000 --> 01:29:25,000
AV Packet zum Beispiel.

823
01:29:25,000 --> 01:29:32,000
AV Packet und dann will ich den Stream lesen und sonst was.

824
01:29:32,000 --> 01:29:34,000
Ja, keine Ahnung, wie das funktioniert.

825
01:29:34,000 --> 01:29:38,000
Es gibt ja auch, es gibt ja anscheinend auch keine ordentlichen Anleitungen dafür.

826
01:29:38,000 --> 01:29:45,000
Wir können mal suchen, ob wir dazu was finden.

827
01:29:45,000 --> 01:29:48,000
Docs, ES.

828
01:29:48,000 --> 01:29:49,000
Usage.

829
01:29:49,000 --> 01:29:54,000
Tja.

830
01:29:54,000 --> 01:29:59,000
Normalerweise muss man auch sowas wie FFM Pack.

831
01:29:59,000 --> 01:30:00,000
Load.

832
01:30:00,000 --> 01:30:03,000
Gibt es aber nicht.

833
01:30:03,000 --> 01:30:04,000
FFM Pack.

834
01:30:04,000 --> 01:30:07,000
Load.

835
01:30:07,000 --> 01:30:09,000
New AV Package.

836
01:30:09,000 --> 01:30:11,000
Ne, das geht ja nicht.

837
01:30:11,000 --> 01:30:21,000
Normalerweise machst du AV Packet, A-Log und so Dinger.

838
01:30:21,000 --> 01:30:24,000
Wobei das Rustbindings sind, wer weiß wie das funktioniert.

839
01:30:24,000 --> 01:30:28,000
Call unsafe function requires unsafe function.

840
01:30:28,000 --> 01:30:30,000
Alles klar, unsafe.

841
01:30:30,000 --> 01:30:31,000
Ne.

842
01:30:31,000 --> 01:30:35,000
Unsafe.

843
01:30:35,000 --> 01:30:36,000
Unsafe.

844
01:30:36,000 --> 01:30:47,000
Aha, einfach mal geraten, wo das unsafe hin muss.

845
01:30:47,000 --> 01:30:49,000
Ne.

846
01:30:49,000 --> 01:30:51,000
Aha, das geht nicht.

847
01:30:51,000 --> 01:30:52,000
Aha, aha.

848
01:30:52,000 --> 01:30:55,000
Das müsste ich dann rappen in irgendeine Rust Funktion oder so.

849
01:30:55,000 --> 01:30:59,000
Aber ganz ervernehmt, es kompiliert ja eh nicht.

850
01:30:59,000 --> 01:31:02,000
Also, kann ich jetzt sagen, quasi FM.

851
01:31:02,000 --> 01:31:06,000
Hat es kein Makro oder so für die IDE?

852
01:31:06,000 --> 01:31:07,000
FM.

853
01:31:07,000 --> 01:31:08,000
CACW.

854
01:31:08,000 --> 01:31:11,000
Eigentlich egal, weil es funktioniert nicht.

855
01:31:11,000 --> 01:31:12,000
Unsafe.

856
01:31:12,000 --> 01:31:13,000
Unsafe.

857
01:31:13,000 --> 01:31:27,000
Ok, wie gesagt, es funktioniert nicht.

858
01:31:27,000 --> 01:31:30,000
Wo ist das Problem?

859
01:31:30,000 --> 01:31:32,000
Warum könnte er das nicht mal aufrufen?

860
01:31:32,000 --> 01:31:35,000
Ah, call to unsafe.

861
01:31:35,000 --> 01:31:37,000
Ok, das ist nicht winzig sharp.

862
01:31:37,000 --> 01:31:42,000
Das einmal unsafe reicht und das zieht quasi unsafe mit.

863
01:31:42,000 --> 01:31:48,000
Ok, das würde funktionieren.

864
01:31:48,000 --> 01:31:51,000
Ne, also das funktioniert nicht.

865
01:31:51,000 --> 01:31:54,000
Funktioniert anscheinend, ja.

866
01:31:54,000 --> 01:32:01,000
Ja, aber du musst unsafe verwenden, wenn du raw ffmpeg verwenden willst.

867
01:32:01,000 --> 01:32:03,000
Aber ganz ervernehmt, es funktioniert ja eh nicht.

868
01:32:03,000 --> 01:32:09,000
Er ist der Meinung, äh, ja, panicked.

869
01:32:09,000 --> 01:32:11,000
Block.

870
01:32:11,000 --> 01:32:15,000
Und man findet dazu auch nichts.

871
01:32:15,000 --> 01:32:23,000
Wasm.

872
01:32:23,000 --> 01:32:25,000
Und ansonsten, es gibt da keine README dazu.

873
01:32:25,000 --> 01:32:27,000
Das ist halt sehr...

874
01:32:27,000 --> 01:32:32,000
Ok, Rust, ffmpeg, github.

875
01:32:32,000 --> 01:32:34,000
Ich will keinen safe wrapper haben.

876
01:32:34,000 --> 01:32:36,000
Wasm.

877
01:32:36,000 --> 01:32:38,000
Äh, ich...

878
01:32:38,000 --> 01:32:41,000
Es wird nichts großartig gebastelt.

879
01:32:41,000 --> 01:32:45,000
Ich versuche mir gerade Rust mit WebAssembly anzugucken.

880
01:32:45,000 --> 01:32:48,000
Also irgendwann mal will ich...

881
01:32:48,000 --> 01:32:50,000
Kann man Features hinzufügen vielleicht?

882
01:32:50,000 --> 01:32:54,000
Irgendwann mal will ich ffmpeg ausprobieren im Browser damit.

883
01:32:54,000 --> 01:32:56,000
Aber das ist nicht wirklich Ziel.

884
01:32:56,000 --> 01:32:57,000
Ich hab' bloß gedacht, es ist einfach.

885
01:32:57,000 --> 01:32:58,000
Package einbinden und es geht.

886
01:32:58,000 --> 01:33:04,000
Aber so einfach ist es nicht.

887
01:33:04,000 --> 01:33:06,000
Also ich hab' keine Ahnung, wie man das bildet.

888
01:33:06,000 --> 01:33:10,000
Kann man jetzt aber...

889
01:33:10,000 --> 01:33:12,000
Rates?

890
01:33:12,000 --> 01:33:15,000
Was ist, wenn man da jetzt mal nach Web... nach, ähm...

891
01:33:15,000 --> 01:33:18,000
ffmpeg sucht?

892
01:33:18,000 --> 01:33:21,000
ffmpeg.

893
01:33:21,000 --> 01:33:23,000
ffmpeg.

894
01:33:23,000 --> 01:33:28,000
Ja, die bräuchte ich, aber ich brauch das für die WebAssembly Version.

895
01:33:28,000 --> 01:33:30,000
Du hast dein Browser zugemacht.

896
01:33:30,000 --> 01:33:38,000
Nee, du hast irgendeine Electron Anwendung zugemacht.

897
01:33:38,000 --> 01:33:43,000
Wasm.

898
01:33:43,000 --> 01:33:44,000
Wasi.

899
01:33:44,000 --> 01:33:46,000
Wasi?

900
01:33:46,000 --> 01:33:47,000
Da gibt's nur eins.

901
01:33:47,000 --> 01:33:48,000
Ja, das sucked.

902
01:33:48,000 --> 01:33:49,000
Okay, das funktioniert nicht.

903
01:33:49,000 --> 01:33:50,000
Es war Java, war es.

904
01:33:50,000 --> 01:33:53,000
Okay.

905
01:33:53,000 --> 01:33:56,000
Ja, also wie der Shit funktioniert, weiß man nicht.

906
01:33:56,000 --> 01:34:00,000
Document Build Process closed.

907
01:34:00,000 --> 01:34:06,000
Okay.

908
01:34:06,000 --> 01:34:07,000
Was zum...

909
01:34:07,000 --> 01:34:08,000
Es ist einfach ein Link.

910
01:34:08,000 --> 01:34:09,000
Random auf irgendwas.

911
01:34:09,000 --> 01:34:10,000
Was ist...

912
01:34:10,000 --> 01:34:12,000
Was ist zig?

913
01:34:12,000 --> 01:34:17,000
Will der Typ uns irgendeinen Crypto-Miner-Dingsen, oder was?

914
01:34:17,000 --> 01:34:20,000
Geile Bild-Documentation.

915
01:34:20,000 --> 01:34:22,000
Ganz, ganz grandios, ja.

916
01:34:22,000 --> 01:34:23,000
Da weiß man Bescheid.

917
01:34:23,000 --> 01:34:26,000
Bild zig.

918
01:34:26,000 --> 01:34:27,000
Mhm.

919
01:34:27,000 --> 01:34:28,000
Super.

920
01:34:28,000 --> 01:34:49,000
Jetzt versteh ich alles.

921
01:34:49,000 --> 01:34:52,000
Was zum...

922
01:34:52,000 --> 01:34:58,000
Ich hab keine Ahnung, was der Typ will.

923
01:34:58,000 --> 01:34:59,000
Okay, das ist mir zu pfeifert.

924
01:34:59,000 --> 01:35:02,000
Ich glaub, das ist nicht so sinnvoll, damit anzufangen.

925
01:35:02,000 --> 01:35:08,000
Das ist mir zu hoch.

926
01:35:08,000 --> 01:35:15,000
Wir machen erst mal zum Üben ein bisschen was anderes.

927
01:35:15,000 --> 01:35:17,000
Kein Schimmer, wie das funktionieren soll.

928
01:35:17,000 --> 01:35:25,000
Ich mein, er schreibt ja explizit, ich muss es nicht kompilieren.

929
01:35:25,000 --> 01:35:26,000
Es ist schon fertig.

930
01:35:26,000 --> 01:35:28,000
Aber das ist anscheinend nicht so.

931
01:35:28,000 --> 01:35:34,000
Hat da nicht mal irgendeiner einen Blogpost oder so zugeschrieben?

932
01:35:34,000 --> 01:35:38,000
Alter, wir verwenden hier wieder ganz obskure Dinger.

933
01:35:38,000 --> 01:35:43,000
Dank Dennis weiß bestimmt Bescheid.

934
01:35:43,000 --> 01:35:48,000
Nee, also mit FFM Back wird das so und auf die andere Weise nix.

935
01:35:48,000 --> 01:35:57,000
Chat, jemand eine gute Idee, was wir ausprobieren könnten?

936
01:35:57,000 --> 01:36:03,000
Was könnte man in Rust laufen lassen und dann im Process...

937
01:36:03,000 --> 01:36:04,000
Wie ist das denn?

938
01:36:04,000 --> 01:36:05,000
Moment, ich hab eine Idee.

939
01:36:05,000 --> 01:36:07,000
Wie ist das denn mit Multithreading?

940
01:36:07,000 --> 01:36:12,000
Wie ist das denn mit Multithreading in Rust und in...

941
01:36:12,000 --> 01:36:14,000
Das wird doch nicht funktionieren, oder?

942
01:36:14,000 --> 01:36:20,000
Also ich werde doch nicht irgendwas Multithreading können und dann...

943
01:36:20,000 --> 01:36:24,000
Damit irgendwie JavaScript mit JavaScript interagieren.

944
01:36:24,000 --> 01:36:25,000
Oder geht das?

945
01:36:25,000 --> 01:36:34,000
Rust, Wasm, Multithreading.

946
01:36:34,000 --> 01:36:36,000
Multithreading, Rust und Wasm.

947
01:36:36,000 --> 01:36:42,000
Okay.

948
01:36:42,000 --> 01:36:43,000
MonkaS.

949
01:36:43,000 --> 01:36:46,000
Alter.

950
01:36:46,000 --> 01:36:55,000
Okay, das ist advanceder Shit.

951
01:36:55,000 --> 01:37:04,000
Das ist einfach alles so krasser Fiveheader Kram.

952
01:37:04,000 --> 01:37:07,000
Ja, alles klar, alles klar, easy.

953
01:37:07,000 --> 01:37:08,000
Kein Ding, ja.

954
01:37:08,000 --> 01:37:15,000
Raytracing Demo.

955
01:37:15,000 --> 01:37:18,000
Helps you create and execute webworkers based threads.

956
01:37:18,000 --> 01:37:20,000
Okay, ja, nice.

957
01:37:20,000 --> 01:37:23,000
Nee, Webworkers kann ich auch so machen.

958
01:37:23,000 --> 01:37:35,000
Okay, ich glaube Multithreading ist keine allzu gute Idee.

959
01:37:35,000 --> 01:37:37,000
Ja, ich dachte man könnte aber das...

960
01:37:37,000 --> 01:37:39,000
Also man hätte ja das Rendern im Hintergrund machen können.

961
01:37:39,000 --> 01:37:45,000
Also das Video rendern, also das Video transconen.

962
01:37:45,000 --> 01:37:48,000
Ja Leute, ich weiß jetzt gar nicht, was ich gescheit machen soll.

963
01:37:48,000 --> 01:37:50,000
Ich meine, das mit FFmpeg funktioniert nicht.

964
01:37:50,000 --> 01:37:54,000
Ich brauche irgendwie einen Mini-Anwendungscase so.

965
01:37:54,000 --> 01:37:58,000
Irgendwas kleines, wo man ein bisschen basteln könnte.

966
01:37:58,000 --> 01:38:01,000
Was gibt denn diese Mozilla Anleitung noch her?

967
01:38:01,000 --> 01:38:26,000
Einfach mal Raytracing selber machen, ja, easy.

968
01:38:26,000 --> 01:38:33,000
Gibt es vielleicht einen Rust-Decoder?

969
01:38:33,000 --> 01:38:42,000
Da brauche ich kein FFmpeg.

970
01:38:42,000 --> 01:38:45,000
Vier Jahre.

971
01:38:45,000 --> 01:38:57,000
Der To-Do-App ist da glaube ich nicht das Richtige.

972
01:38:57,000 --> 01:38:59,000
Oh nee, dann lieber FFmpeg.

973
01:38:59,000 --> 01:39:06,000
In FFmpeg weiß ich, wie der Kram funktioniert.

974
01:39:06,000 --> 01:39:09,000
Leute, ich habe keine Ahnung, was ich machen soll.

975
01:39:09,000 --> 01:39:17,000
Okay, gibt es?

976
01:39:17,000 --> 01:39:36,000
Wie gesagt, To-Do-App, Ich muss mal gucken, was die Mozilla Anleitung macht.

977
01:39:36,000 --> 01:39:42,000
Nee, das ist...

978
01:39:42,000 --> 01:39:46,000
Ach, das war so ein Pac-Da-Projekt.

979
01:39:46,000 --> 01:39:50,000
Ja, vielleicht steht da irgendwas interessantes drin, was man ausprobieren könnte.

980
01:39:50,000 --> 01:39:52,000
Wobei Examples Hello World...

981
01:39:52,000 --> 01:39:56,000
What?

982
01:39:56,000 --> 01:40:13,000
Ja, das haben wir schon gemacht.

983
01:40:13,000 --> 01:40:18,000
Flashbang sei der.

984
01:40:18,000 --> 01:40:21,000
Ja, die Anleitung haben wir schon durchgemacht.

985
01:40:21,000 --> 01:40:25,000
Google in Dark Mode, Pog.

986
01:40:25,000 --> 01:40:30,000
Leute, mir fällt gerade wirklich nichts ein, als Anwendung.

987
01:40:30,000 --> 01:40:32,000
Das war jetzt ausnahmsweise mal echt so.

988
01:40:32,000 --> 01:40:34,000
Ich habe mich absolut gar nicht darauf vorbereitet.

989
01:40:34,000 --> 01:40:36,000
Ich habe gedacht, wir basteln einfach ein bisschen.

990
01:40:36,000 --> 01:40:40,000
Aber ich weiß echt nicht, was ich basteln soll.

991
01:40:40,000 --> 01:40:42,000
Ich meine, wir haben Sachen returned.

992
01:40:42,000 --> 01:40:47,000
Das ist garantiert nur ein ganz kleiner Bruchteil von dem, was man machen muss.

993
01:40:47,000 --> 01:40:55,000
Aber es fehlt gerade so eine kreative Eingebung, was wir ausprobieren könnten.

994
01:40:55,000 --> 01:41:01,000
Ich meine, wir haben Bites returned.

995
01:41:01,000 --> 01:41:05,000
Und das funktioniert erstaunlich gut.

996
01:41:05,000 --> 01:41:07,000
Was kann Rust WebAssembly besser als JavaScript?

997
01:41:07,000 --> 01:41:09,000
Ich muss fragen, was WebAssembly besser kann.

998
01:41:09,000 --> 01:41:17,000
WebAssembly ist ja quasi das Target, in das du übersetzt.

999
01:41:17,000 --> 01:41:19,000
Also egal, ob das jetzt von C++ oder von Rust oder von sonst wo aus ist.

1000
01:41:19,000 --> 01:41:25,000
Das ist quasi eine Zwei-Mobility-Runtime, kann man das nicht nennen.

1001
01:41:25,000 --> 01:41:31,000
Das hat sich seit ein paar Jahren etabliert im Browser als JavaScript-Alternative.

1002
01:41:31,000 --> 01:41:34,000
Allerdings weniger, um JavaScript abzulösen.

1003
01:41:34,000 --> 01:41:40,000
Sondern eher als Compiled-Target für andere Programmiersprachen.

1004
01:41:40,000 --> 01:41:46,000
Das heißt, du kannst C++ nehmen, nach WebAssembly übersetzen und im Browser laufen lassen.

1005
01:41:46,000 --> 01:41:49,000
Dementsprechend kannst du auch C++-Libraries verwenden.

1006
01:41:49,000 --> 01:41:50,000
Crypto-Minor zum Beispiel.

1007
01:41:50,000 --> 01:41:55,000
Deswegen kannst du auch C++-Libraries verwenden oder Rust-Libraries verwenden.

1008
01:41:55,000 --> 01:42:00,000
Ich will mir jetzt nicht WebAssembly in C++ noch angucken.

1009
01:42:00,000 --> 01:42:02,000
Da dreh ich am Rat.

1010
01:42:02,000 --> 01:42:06,000
Nur mal just for fun.

1011
01:42:06,000 --> 01:42:08,000
Was im Tutorial.

1012
01:42:08,000 --> 01:42:20,000
So, und nachdem du quasi jetzt eine eigene Low-Level-Sprache im Browser hast,

1013
01:42:20,000 --> 01:42:25,000
von der du, also in die du kompilieren kannst, von anderen Sprachen aus,

1014
01:42:25,000 --> 01:42:31,000
kannst du halt mehr oder weniger fast alles im Browser laufen lassen.

1015
01:42:31,000 --> 01:42:35,000
Ich meine, du hast immer noch Beschränkungen, nämlich das, was Browsern nicht erlauben.

1016
01:42:35,000 --> 01:42:38,000
Also zum Beispiel, du kannst es nicht einfach in TCP-Socket aufmachen und sagen,

1017
01:42:38,000 --> 01:42:41,000
ich lausche da jetzt mal auf neue Requests und sowas.

1018
01:42:41,000 --> 01:42:43,000
Das funktioniert nicht.

1019
01:42:43,000 --> 01:42:46,000
Weil das geht alleine durch die Browser-Sandbox nicht.

1020
01:42:46,000 --> 01:42:50,000
Zu Recht, weil ansonsten hättest du ganz andere Probleme.

1021
01:42:50,000 --> 01:42:52,000
Oder aufs lokale Filesystem zugreifen oder so.

1022
01:42:52,000 --> 01:42:56,000
Das funktioniert nicht.

1023
01:42:56,000 --> 01:43:00,000
Was im Tutorial.

1024
01:43:00,000 --> 01:43:10,000
Oh nee, nein Leute, ich mach garantiert kein C++ jetzt.

1025
01:43:10,000 --> 01:43:16,000
Das fängt schon äußerst Paynes-Champi an.

1026
01:43:16,000 --> 01:43:20,000
Wenn ich das schon sehe.

1027
01:43:20,000 --> 01:43:22,000
Linux-Könnel in Wasm.

1028
01:43:22,000 --> 01:43:26,000
Mich würd's nicht wundern, wenn einer irgendeinen Mini-Mini-Könnel in Wasm schon übersetzt hätte.

1029
01:43:26,000 --> 01:43:31,000
Ich meine, das ist reines C, das sollte wahrscheinlich sogar irgendwie funktionieren.

1030
01:43:31,000 --> 01:43:34,000
GC, Wasm und FFmpeg.

1031
01:43:34,000 --> 01:43:38,000
Also du brauchst FFmpeg auf jeden Fall.

1032
01:43:38,000 --> 01:43:44,000
Also mit meinen x86 FFmpeg Libraries kommt man hier glaube ich nicht weit.

1033
01:43:44,000 --> 01:43:49,000
Ich glaube, man braucht wirklich dann eine Web-Assembly FFmpeg-Lib,

1034
01:43:49,000 --> 01:43:53,000
dass ich die ansprechen kann und ich weiß nicht, ob es sowas gibt.

1035
01:43:53,000 --> 01:43:56,000
Also Windows 98 könnte ich mir vorstellen, dass es das gibt.

1036
01:43:56,000 --> 01:43:59,000
Die Grafik-Ausgabe kannst du halt nicht in Web-Assembly machen.

1037
01:43:59,000 --> 01:44:04,000
Das ist Browser, das ist JavaScript.

1038
01:44:04,000 --> 01:44:08,000
Es gibt FFmpeg Wasm, ich weiß, aber was genau soll mir das bringen?

1039
01:44:08,000 --> 01:44:14,000
Das ist ein Command-Line, das ist das FFmpeg Command-Line-Tool.

1040
01:44:14,000 --> 01:44:18,000
Es sei denn, es gab noch zwei.

1041
01:44:18,000 --> 01:44:22,000
Es gibt FFmpeg Wasm und FFmpeg JS.

1042
01:44:22,000 --> 01:44:24,000
Genau.

1043
01:44:24,000 --> 01:44:29,000
Es sei denn, die erlauben einem irgendwie auf die internen Sachen zuzugreifen.

1044
01:44:29,000 --> 01:44:42,000
Das glaube ich aber halt nicht.

1045
01:44:42,000 --> 01:44:51,000
Das ist doch garantiert nicht der Source.

1046
01:44:51,000 --> 01:44:58,000
Wo ist denn der Source?

1047
01:44:58,000 --> 01:45:05,000
Äh, hier.

1048
01:45:05,000 --> 01:45:11,000
Den Port?

1049
01:45:11,000 --> 01:45:18,000
Wo ist denn der Source-Code für FFmpeg Wasm?

1050
01:45:18,000 --> 01:45:21,000
Nein, das ist es ja nicht.

1051
01:45:21,000 --> 01:45:22,000
Hier.

1052
01:45:22,000 --> 01:45:29,000
Get Create FFmpeg Core.

1053
01:45:29,000 --> 01:45:32,000
Patch?

1054
01:45:32,000 --> 01:45:38,000
Ja, wo ist es denn?

1055
01:45:38,000 --> 01:45:39,000
Also hier ist es nicht.

1056
01:45:39,000 --> 01:45:50,000
Der FFmpeg Source-Code ist ein bisschen größer.

1057
01:45:50,000 --> 01:45:57,000
FFmpeg Core JS

1058
01:45:57,000 --> 01:46:13,000
Ist das ein eigenes Projekt vielleicht?

1059
01:46:13,000 --> 01:46:14,000
Ach, kommt mal hier.

1060
01:46:14,000 --> 01:46:18,000
Das ist eine gute Sache.

1061
01:46:18,000 --> 01:46:20,000
Ach, hier.

1062
01:46:20,000 --> 01:46:23,000
Aber das kann man nicht in WebAssembly direkt verwenden, oder?

1063
01:46:23,000 --> 01:46:30,000
FFmpeg Wasm Core

1064
01:46:30,000 --> 01:46:38,000
Where we transpiled C++-Code of FFmpeg to Java.

1065
01:46:38,000 --> 01:46:44,000
Why?

1066
01:46:44,000 --> 01:46:54,000
Specify Media-File.

1067
01:46:54,000 --> 01:46:59,000
Wenn ich Bild-Files in C++ schon sehe, drehe ich am Rad wieder.

1068
01:46:59,000 --> 01:47:07,000
Alter.

1069
01:47:07,000 --> 01:47:10,000
Ich meine, vielleicht.

1070
01:47:10,000 --> 01:47:14,000
Ich meine, das wird theoretisch mit Rust auch alles funktionieren, ne?

1071
01:47:14,000 --> 01:47:19,000
Aber...

1072
01:47:19,000 --> 01:47:24,000
Nee, das Übersetzen wird da nicht funktionieren.

1073
01:47:24,000 --> 01:47:26,000
Okay Leute, ich habe legit keine Ahnung.

1074
01:47:26,000 --> 01:47:30,000
Also das mit FFmpeg taugt wahrscheinlich erstmal so nicht.

1075
01:47:30,000 --> 01:47:32,000
Ich muss mir irgendwas überlegen.

1076
01:47:32,000 --> 01:47:35,000
Ich habe heute keine Idee, was wir machen können.

1077
01:47:35,000 --> 01:47:37,000
Das müssen wir verschieben.

1078
01:47:37,000 --> 01:47:42,000
Weil ja, so PASIC-Sachen gehen, aber der Teufel liegt da im Detail.

1079
01:47:42,000 --> 01:47:47,000
Also man muss bestimmt vieles machen, wovon ich jetzt auch keine Ahnung habe.

1080
01:47:47,000 --> 01:47:56,000
Aber auch dadurch, dass ich keine Ahnung habe und ich weiß, was es ist.

1081
01:47:56,000 --> 01:47:57,000
Wasm Game of Life.

1082
01:47:57,000 --> 01:48:01,000
Nee, ich weiß, das ist das Tutorial davon.

1083
01:48:01,000 --> 01:48:03,000
Das muss ich mir mal überlegen.

1084
01:48:03,000 --> 01:48:05,000
Fallback auf zweite Stream-Idee.

1085
01:48:05,000 --> 01:48:12,000
Nee, Fallback auf, ich gehe jetzt aufs Klo.

1086
01:48:12,000 --> 01:48:15,000
Müssen wir alle mal weitermachen, keine Ahnung.

1087
01:48:15,000 --> 01:48:17,000
Fällt mir gerade nichts zu ein.

1088
01:48:17,000 --> 01:48:18,000
Wir machen morgen weiter.

1089
01:48:18,000 --> 01:48:20,000
Also wir machen morgen vielleicht was anderes.

1090
01:48:20,000 --> 01:48:24,000
Also zu dieser WebAssembly-Geschichte muss ich mir erst ein Anwendungsbeispiel überlegen,

1091
01:48:24,000 --> 01:48:26,000
dass wir was Gescheites machen können.

1092
01:48:26,000 --> 01:48:32,000
Das kann ich jetzt nicht aus dem Ärmel schütteln.

1093
01:48:32,000 --> 01:48:33,000
Nee, das hat nicht funktioniert, Leute.

1094
01:48:33,000 --> 01:48:35,000
Kann ich immer klappen.

1095
01:48:35,000 --> 01:48:36,000
Ich gehe jetzt auf.

1096
01:48:36,000 --> 01:48:39,000
Wir gucken uns heute auch keine Videos an.

1097
01:48:39,000 --> 01:48:40,000
Wir sehen uns im nächsten Stream.

1098
01:48:40,000 --> 01:48:41,000
Macht's gut.

1099
01:48:41,000 --> 01:49:06,000
CO.

