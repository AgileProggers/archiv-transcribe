1
00:00:30,000 --> 00:00:54,680
So, machen wir mal ein bisschen weiter.

2
00:00:54,680 --> 00:01:17,680
Also Leute, also irgendwie kann mein Vorschau-Rechner den Emoji im Stream-Titel nicht, aber das

3
00:01:17,680 --> 00:01:23,680
kann doch eigentlich mittlerweile jeder, was ist das denn, Unicode 05, nee, der kann doch

4
00:01:23,680 --> 00:01:29,040
ja, keine Ahnung, wer Schmerzen hat, wahrscheinlich spackt der Browser einfach rum, aber war's

5
00:01:29,040 --> 00:01:30,040
nicht, aber war's nicht.

6
00:01:30,040 --> 00:01:39,680
Den haben wir am Start, der Captain Siekay ist wieder da, huge, Jettüftelfelix, nice,

7
00:01:39,680 --> 00:01:46,440
so, ja ich zeige euch jetzt erstmal, wo wir stehen, was gerade aktuell ist, beziehungsweise

8
00:01:46,440 --> 00:01:52,080
nee, ich fang mal anders an, also, ich erzähle erstmal, was wir heute machen, wenn ein paar

9
00:01:52,080 --> 00:01:55,320
Leute am Start sind, übrigens den ganzen Krämpel von heute Morgen kann ich eigentlich mal

10
00:01:55,320 --> 00:01:56,320
hier zumachen.

11
00:01:56,320 --> 00:01:57,320
Lul.

12
00:01:57,320 --> 00:02:10,720
Und ich muss eine Maus anschließen an den Rechner, äh, am zweiten Rechner wohlgemerkt,

13
00:02:10,720 --> 00:02:23,360
also der hier fürs Streaming, spackt gerade übelst rum, naja, man war's nicht, achso weil

14
00:02:23,360 --> 00:02:28,760
heute Morgen die Frage kam, was für NFC-Tags ich hierfür verwende, habe ich erst später

15
00:02:28,760 --> 00:02:33,120
gelesen, muss schon weg, also ja, ich habe heute Morgen ein Video gezeigt von meinem

16
00:02:33,120 --> 00:02:39,600
Bart, wo ich zeige, wie ich hier mit dem iPad über den NFC-Tag, hier über den NFC-Tag

17
00:02:39,600 --> 00:02:45,320
meinen Heizer einschalte, hier so zack, dranhalten, und dann geht der Lüfter an, und dann zeige

18
00:02:45,320 --> 00:02:48,640
ich noch irgendwo die Steckdose, wie das Ganze eingeschaltet wird und sowas, aber heute

19
00:02:48,640 --> 00:02:54,200
Morgen hat irgendjemand gefragt, was ich da für NFC-Tags verwende, kann ich euch zeigen,

20
00:02:54,200 --> 00:03:03,720
und zwar, Postchamp, Postchamp, Postchamp, ich muss es mal kurz hier aufmachen, äh, ich

21
00:03:03,720 --> 00:03:09,200
habe mir so ein NFC-Tag-Set gekauft, und letztendlich, ihr könnt wirklich alles mögliche für NFC-Tags

22
00:03:09,200 --> 00:03:13,920
verwenden, also, das Gute ist, es ist eigentlich noch viel zu teuer für das was, ne, das Gute

23
00:03:13,920 --> 00:03:19,360
an NFC-Tags ist, ihr könnt die auch reinweise kaputt machen, der Kram ist echt abgrundtief

24
00:03:19,360 --> 00:03:26,360
billig, also billig meine ich jetzt, also günstig, NFC-Tags sind wirklich so unglaublich kosteneffizient,

25
00:03:26,360 --> 00:03:29,880
wenn man was machen will, also, wenn man die Auswahl hat, macht man einen Knopf irgendwo

26
00:03:29,880 --> 00:03:33,880
hin, oder hat man sein Handy dabei und macht einen NFC-Tag hin, macht einen NFC-Tag hin,

27
00:03:33,880 --> 00:03:39,480
ein NFC-Tag geht wahrscheinlich weniger kaputt, und ein NFC-Tag kostet nix, wirklich gar nix,

28
00:03:39,480 --> 00:03:46,080
wenn du hier guckst, die billigen NFC-Tags kostet 2 Centenstücke oder so, das ist wirklich

29
00:03:46,080 --> 00:03:56,160
massiv billig, und, ähm, wie viel Speicher, boah, keine Ahnung, 120 byte oder so, steht

30
00:03:56,160 --> 00:04:08,080
das hier irgendwo, dann zeige ich euch was wir heute machen, äh, steht hier irgendwo

31
00:04:08,080 --> 00:04:19,840
bytes, Speicher, bytes, bytes, 888 bytes Speicher, ok, hat der eine, also, es ist nicht viel,

32
00:04:19,840 --> 00:04:23,800
also du hast weniger als ein Kilobyte Speicher, du hast paar, paar bytes, also du hast echt

33
00:04:23,800 --> 00:04:32,680
nicht viel Speicher, so ein NFC-Tag, aber brauchst du letztendlich auch nicht, ja, das

34
00:04:32,680 --> 00:04:39,360
wird, ich muss mal kurz den Chat aufmachen, also das ist eines der wenigen Dinger heutzutage,

35
00:04:39,360 --> 00:04:45,040
der noch kein Doom laufen lassen kann, also Doom auf dem NFC-Tag geht noch nicht, man

36
00:04:45,040 --> 00:04:50,240
muss aber ja auch sagen, ich weiß ja natürlich, das ist ja ein Gag, aber die Frage ist gar

37
00:04:50,240 --> 00:04:54,600
nicht mal so unberechtigt, wenn man sich anguckt, dass man heute auf Druckern, auf dem Klo und

38
00:04:54,600 --> 00:04:59,040
auf einem Schwangerschaftstest, wo geht das, Schwangerschaftstest war fake, aber man kann

39
00:04:59,040 --> 00:05:02,600
ja mittlerweile überall Doom drauf spielen, das heißt, warum nicht da, gut, bei dem NFC-Tag

40
00:05:02,600 --> 00:05:07,800
ist es relativ einfach, die haben ja gar keine CPU in dem Sinn drauf, das ist ja nur

41
00:05:07,800 --> 00:05:18,840
irgendeine Antenne und, äh, ein paar bytes Speicher, genau, aber das ist wirklich top,

42
00:05:18,840 --> 00:05:22,080
also kann man nichts sagen, auch dieses Set hier finde ich ganz gut, du hast magnetische

43
00:05:22,080 --> 00:05:27,120
Sticker und alles mögliche, und wisst ihr was auch richtig nice ist, was ich mir jetzt

44
00:05:27,120 --> 00:05:32,280
auch noch einen Schalter bestellt habe, und zwar einen, wobei man den sich auf Banggood

45
00:05:32,280 --> 00:05:37,560
kaufen muss, zeig den mal hier, weil da ist er billiger, Banggood, Alter, das ist die

46
00:05:37,560 --> 00:05:42,320
Seite mit dem Abstand besten Namen, wer kauft noch was bei Banggood, und zwar ihr müsst

47
00:05:42,320 --> 00:05:54,480
an Aquara, Opel oder so heißt das, total bescheuerte Name, ne, doch den hier, hier also, die gibt

48
00:05:54,480 --> 00:06:03,160
es teilweise recht günstig, aus China, was, wo ist das aus China, what the fuck, das kriegst

49
00:06:03,160 --> 00:06:10,880
ja fast schon, ihr müsst mal gucken, wo es das gibt, das sind Schalter, das sind ZigPee-Schalter,

50
00:06:10,880 --> 00:06:15,680
und die kosten, wenn man da ordentlich, ordentlich guckt, irgendwie, keine Ahnung, 10 bis 15

51
00:06:15,680 --> 00:06:21,160
Dollar, so das Stück, gibt es bis zu 3 Schalter, und die sind richtig cool gemacht, also erst

52
00:06:21,160 --> 00:06:26,120
ist kann man die pairen, total easy, mit jedem x-beliebigen ZigPee-Stick und ZigPee-Hub und

53
00:06:26,120 --> 00:06:31,040
sonst was, und das coole ist, man kann den Schalter rausnehmen, man kann das so als,

54
00:06:31,040 --> 00:06:36,920
so Art Fernbedienung verwenden, und die Rückseite ist magnetisch, das heißt man kann den einfach

55
00:06:36,920 --> 00:06:41,000
an den Türrahmen hängen, und ich hab jetzt hier einfach an zwei Türrahmen so ein Ding

56
00:06:41,000 --> 00:06:44,000
gesteckt, und da kann man jetzt Sachen mit einmal ausschalten, eigentlich richtig praktisch,

57
00:06:44,000 --> 00:06:50,800
ja, aber was auch immer, übrigens guckt euch mal hier an, was ich, also meine Twitter-Medien-Historie

58
00:06:50,800 --> 00:06:56,800
ist wirklich fail, die besteht jetzt im größten Teil aus irgendwelchen Emotes, und naja, so

59
00:06:56,800 --> 00:07:01,200
also ich zeige euch mal, was wir heute machen, so also wo wir stehen geblieben sind, übrigens,

60
00:07:01,200 --> 00:07:05,160
du bist nicht der erste, der sagt französische Werbung vorm Stream, heute Morgen hat jeder

61
00:07:05,160 --> 00:07:08,760
geschrieben französische Werbung, ich weiß nicht warum es französische Werbung vorm Stream

62
00:07:08,760 --> 00:07:16,760
gibt, die Pogers, Pogers, Pogers sind los, also meine Stream-Sprache steht nicht auf

63
00:07:16,760 --> 00:07:24,560
französisch oder, Zuschauer alle, Stream-Sprache, Deutsch ist das deutsche Sprache hier im Stream,

64
00:07:24,560 --> 00:07:30,040
aber naja, ich weiß nicht warum es da französische Werbung gibt, so, ich hab jetzt mal den aktuellen

65
00:07:30,040 --> 00:07:37,360
Stand vorher gepusht, und zwar, also ich pull das jetzt mal, ich pull das jetzt mal, also

66
00:07:37,360 --> 00:07:44,160
weiß ich, dann zeige ich mal, was, also was wir im letzten Stream gemacht haben, wenn

67
00:07:44,160 --> 00:07:50,520
ich es euch angucken will, ich hab's ja, auf drängen des Chats letztes mal, hab ich das

68
00:07:50,520 --> 00:07:55,560
Repo gepusht, obwohl ich das Repo noch überhaupt nicht pushen wollte, und dann Chat, jetzt

69
00:07:55,560 --> 00:08:00,760
muss ich ja mal ein ernstes Wörtchen mit dem Chat reden, ja, Chat lacks critical information,

70
00:08:00,760 --> 00:08:08,520
so, ich wollte das das letzte mal nicht pushen, und ich hab's gepusht, weil das der Chat

71
00:08:08,520 --> 00:08:14,760
unbedingt wollte, und jetzt hab ich ein Stern gekriegt, also ich hab jetzt am mindestens

72
00:08:14,760 --> 00:08:19,160
gerechnet, dass zumindest jetzt so Alibi-mäßig mal so 3-4 Leute wenigstens mal das Ding starren

73
00:08:19,160 --> 00:08:30,440
aufgeht haben, aber nee, EINER, demnächst hör ich nicht mehr auf den Chat, hallo, ich

74
00:08:30,440 --> 00:08:34,600
will nicht, ich will nicht, was auch immer, orienti-be, what the f, ich, ah, nicht docker,

75
00:08:34,600 --> 00:08:40,280
ich hab mich verschrieben, lull, wenn ich das richtige schreiben will, ist das denn,

76
00:08:40,280 --> 00:08:45,040
so, also pullen wir mal das aktuelle, was auch immer, so, und jetzt zeige ich euch mal,

77
00:08:45,040 --> 00:08:48,280
was das Ding macht, und was die Änderungen sind seit dem letzten Mal, so, ich starte

78
00:08:48,280 --> 00:09:06,800
das jetzt erst mal,.net-run,.net-run, jetzt sind's zwei, ajajaja, exzellent, so, also,

79
00:09:06,800 --> 00:09:17,240
ich hab mal ein paar Fake-Webcams hinzugefügt, nämlich diesen Stream hier, so, und, achso,

80
00:09:17,240 --> 00:09:23,920
jetzt hab ich's hier, ich hätt's auch hier starten können, nee, egal, so, und wenn ich

81
00:09:23,920 --> 00:09:30,280
das jetzt im Browser aufmach, ich mach jetzt mal hier, Browser, irgendwie Chrome auf,

82
00:09:30,280 --> 00:09:36,280
und wenn man jetzt hier auf die Seite geht, also sprich hier auf Local Host, wobei wir

83
00:09:36,280 --> 00:09:40,440
gehen nicht auf Local Host, da spackt das manchmal rum, wir gehen mal hier, IP League,

84
00:09:40,440 --> 00:09:46,760
ich weiß immer IP League, ganz, ganz furchtbar kritisch, Port 5000, dann sehen wir jetzt

85
00:09:46,760 --> 00:09:54,640
erst mal nicht viel, wir sehen jetzt, paar Streams, so, das könnten allerdings Webcam-Streams

86
00:09:54,640 --> 00:10:00,480
sein, also sprich, was dieses, was dieses Programm macht, ist folgendes, das nimmt

87
00:10:00,480 --> 00:10:10,920
sich Streams von der Webcam, das nimmt sich Pakete von der Webcam, packt die ein, und

88
00:10:10,920 --> 00:10:19,400
schickt die über WebRTC an den Browser, ja, Corona, so, und das funktioniert hier erstaunlich

89
00:10:19,400 --> 00:10:25,080
gut und ohne zu rocken, damit man mal da ein bisschen was anderes sieht, werd ich jetzt

90
00:10:25,080 --> 00:10:29,920
mal was leaken, und zwar, ich werd jetzt mal mein Hoftor leaken, aber zumindest, was das

91
00:10:29,920 --> 00:10:34,080
Ziel ist, was wir heute machen, ist, paar halbwegs realistische Kamerabilder reinmachen, nicht

92
00:10:34,080 --> 00:10:37,840
unbedingt diesen Teststream, gibt's einen Delay, nee, ich hab's letztes Mal im Stream

93
00:10:37,840 --> 00:10:41,760
gezeigt, es gibt nahezu kein Delay, wir können das ausprobieren, wir können das mit dem

94
00:10:41,760 --> 00:10:48,240
Delay noch mal ausprobieren, warte mal, ich mach mal kurz mein iPhone an, und ich zeig

95
00:10:48,240 --> 00:11:06,200
euch das mal, dass es kaum ein Delay gibt, ja, wartet mal, ich mach mal kurz, ach nee,

96
00:11:06,200 --> 00:11:17,480
wartet mal kurz, muss das grad noch umstellen, mein iPhone ist nämlich der Meinung, es kann

97
00:11:17,480 --> 00:11:27,400
den Stream nicht anmachen, ich zeig euch mal, dass es nahezu kein Delay gibt, ich zeig's

98
00:11:27,400 --> 00:11:33,160
euch erstmal in VLC, und danach zeig ich's euch mal in meinem Streamer, da werden wir

99
00:11:33,160 --> 00:11:41,320
sehen, da sind Welten dazwischen, was Delay angeht, so, Kamera Access, Livestreamer an,

100
00:11:41,320 --> 00:12:08,620
okay.

101
00:12:08,620 --> 00:12:26,820
Also ich zeig's euch mal im VLC, ich zeig's euch mal im VLC, VLC, erstmal etwas verkleinert

102
00:12:26,820 --> 00:12:32,020
falls ich was liege, man weiß ja nie, hallo, Alter warum ist so, warum ist sowas in Windows

103
00:12:32,020 --> 00:12:33,020
möglich?

104
00:12:33,020 --> 00:12:34,020
Kann mir das mal einer erklären?

105
00:12:34,020 --> 00:12:37,340
Warum, warum kann man Fenster so verschieben, dass man sie nicht mehr zurückschieben kann?

106
00:12:37,340 --> 00:12:47,020
Richtig dumm, richtig dumm, so und jetzt haben wir hier öffnen, Network Stream, ok 110.

107
00:12:47,020 --> 00:13:01,820
Oh hat mein iPhone gar keine 100 IP, 110 mehr, was kann mein iPhone für eine IP haben?

108
00:13:01,820 --> 00:13:17,940
Ok ich muss mal in meinen Rauder gucken, was mein Rauder sagt, ok, ich glaube mein iPhone

109
00:13:17,940 --> 00:13:31,180
hat ein neuer IP gekriegt, ist ja nicht fixed, so IP, DHCP Server, Leases, iPhone, 110,

110
00:13:31,180 --> 00:13:59,020
also mein iPhone hat angeblich 110, ok, kann man dem iPhone irgendwie nachgucken was

111
00:13:59,020 --> 00:14:02,660
man für eine IP hat?

112
00:14:29,020 --> 00:14:45,620
Warum kriegt mein iPhone nicht die reservierte, sondern so eine komische kacke IP, was ist

113
00:14:45,620 --> 00:14:46,620
das denn schon wieder hier?

114
00:14:46,620 --> 00:15:05,140
Weiß, da weiß man echt nicht was los ist bei Apple manchmal, so, also dann nehmen wir

115
00:15:05,140 --> 00:15:23,900
jetzt mal die Verzögerung im VLC, pass mal auf, Verzögerung im VLC, ich muss mal kurz

116
00:15:23,900 --> 00:15:28,460
gucken wie ich das mache, also ich klatsche da jetzt mal irgendwie so, dass ihr es hört,

117
00:15:28,460 --> 00:15:35,820
also hören ist quasi, ihr seht das Klatschen zum Hören, zu dem ich die Hände zusammenmache,

118
00:15:35,820 --> 00:15:56,620
ich leg mal kurz das hier hin, so, easy clap, also ich würd mal sagen, was meint ihr, wie

119
00:15:56,620 --> 00:16:06,020
viel Verzögerung ist das, so 3 Sekunden oder so, 3 Sekunden irgendwie so in dem dreh, ich

120
00:16:06,020 --> 00:16:14,740
spiegel mich in die Hand, OMG, 2 Sekunden, ok, jetzt pass mal auf, jetzt mach ich das

121
00:16:14,740 --> 00:16:21,620
mal bei mir, in meinem Streaming Programm, ich mach mal nur eine Cam, weil ich mein was

122
00:16:21,620 --> 00:16:26,820
Braume da vorbeigekomme, ich mach, das Wohnzimmer, das Wohnzimmer machen wir jetzt hier zu meinem

123
00:16:26,820 --> 00:16:39,620
Stream, 1, 2, 3, 4, 1, 2, 1, 4, 6 war's, zack,.net, watch, watch, run, so jetzt passt mal auf,

124
00:16:39,620 --> 00:17:02,260
wie verzu, ah, ich dab, ich hab's hier schon, ich hab's hier schon laufen, lul, jaja, Blablabla,

125
00:17:02,260 --> 00:17:05,700
ist ok, so jetzt gehen wir, ich geh auch extra mal hier in Windows rein, dann sieht man das

126
00:17:05,700 --> 00:17:17,700
nicht besser, mal Chrome auf, Chrome, so, 1, 2, 1, 6, 8, 2,., was war das hier, 1, 3,

127
00:17:17,700 --> 00:17:26,700
1, 5000, so, also, und jetzt passt mal auf, guckt euch mal an, wie nicht existent diese

128
00:17:26,700 --> 00:17:50,380
Verzögerung ist, ist das nicht Massive Poggers, wie das ist nicht genau gleich, das ist überhaupt

129
00:17:50,380 --> 00:17:57,380
nicht genau gleich, das ist, ok, ich mach's jetzt nebeneinander, Leute, ich mach's jetzt

130
00:17:57,380 --> 00:18:03,420
nebeneinander, ich mach, die Verzögerung ist, keine Ahnung, 100 Millisekunden oder so, wenn

131
00:18:03,420 --> 00:18:09,260
es hochkommt, also das ist ja, oder 300 vielleicht, ja, das ist viel, ich weiß, ich weiß, chat,

132
00:18:09,260 --> 00:18:13,180
viele Leute haben da kein Gefühl für, ja, ja, ich weiß, das ist jetzt natürlich nicht

133
00:18:13,180 --> 00:18:16,980
so richtig guter Vergleich, weil, weiß gar nicht, ob man sich da mehrfach dazu connecten

134
00:18:16,980 --> 00:18:30,860
kann, aber wir gucken uns das jetzt mal im Vergleich an, easy clap, kann man das wieder

135
00:18:30,860 --> 00:18:59,860
richtig machen, ok, so, jetzt passt mal auf, ok, so, jetzt passt mal auf, ok, so, jetzt

136
00:18:59,860 --> 00:19:22,980
passt mal auf, ok, also chat, jetzt ist es glaube ich jedem aufgefallen, dass die Verzögerung

137
00:19:22,980 --> 00:19:29,020
ein bisschen höher ist, normalerweise, ja, so, und man muss dazu sagen, das ist jetzt

138
00:19:29,020 --> 00:19:34,660
sogar noch gestreamt in Browser, normalerweise, wenn du so Sachen über den Browser machst,

139
00:19:34,660 --> 00:19:43,940
dann ist das ja nochmal nen Tick langsamer, so, und diesmal ist es jetzt hier quasi, nicht

140
00:19:43,940 --> 00:19:48,540
nur einfach schneller als im Player, es ist auch noch im Browser schneller, also das ist

141
00:19:48,540 --> 00:19:59,260
massive POG, so, bringt das Laden ist eigentlich auch relativ schnell, so, ich hab mir schon

142
00:19:59,260 --> 00:20:04,060
überlegt, ob ich nicht immer den ersten Keyframe einfach mitsende, ok, so, das ist das erste,

143
00:20:04,060 --> 00:20:08,140
was wir hier oben am Start haben, das kann ich jetzt einfach mal da drauf liegen lassen

144
00:20:08,140 --> 00:20:14,500
und das juckt jetzt ja nicht weiter, die Zeit tickt hoch, so, und jetzt leak ich nochmal

145
00:20:14,500 --> 00:20:24,980
was und zwar mein Hoftor, weil da hab ich ne Testaufnahme drin, von gestern Abend, Hoftor,

146
00:20:24,980 --> 00:20:34,180
ultimatives Hoftor Leak, das nehmen wir jetzt, das ist Nachtsicht von der Kamera, das ist

147
00:20:34,180 --> 00:20:46,260
Nachtsicht von der Kamera und irgendwann läuft jetzt gleich jemand vorbei, so, das könnte

148
00:20:46,260 --> 00:20:51,620
sein, dass eine Spinne da vorsitzt, ja, oder Spinnenweben zumindest, so, und diesen Clip

149
00:20:51,620 --> 00:20:58,860
verwenden wir jetzt mal zum nächsten DSGVO, ich hab vorher gefragt, sogar wirklich, ich

150
00:20:58,860 --> 00:21:05,700
film jetzt nicht einfach hier Leute und dann, so, also, man erkennt ja auch nix drauf, so,

151
00:21:05,700 --> 00:21:12,060
und das nehmen wir heute zur Motion Detection Erkennungsgeschichte, ja, das bin ich nicht

152
00:21:12,060 --> 00:21:21,300
selbst, nein, selbst wenn ist es eigentlich vollkommen egal, wer das ist, so, jetzt muss

153
00:21:21,300 --> 00:21:36,700
ich den Kram nur nochmal in die VM kopieren kurz, Desktop, wie hab ich es genannt, Fluor,

154
00:21:36,700 --> 00:21:43,820
ja das heißt Fluor 2, total bescheuert, das hat mit Fluor überhaupt nix zu tun, so, exellent,

155
00:21:43,820 --> 00:21:55,540
jetzt mit Google Street View, jaja macht ihr mal, so, ich glaube, jetzt hat man das ganz

156
00:21:55,540 --> 00:21:59,860
gut erkannt zumindest, also sprich, was wir vorhaben, also sprich, die Kram mit die Verzögerung

157
00:21:59,860 --> 00:22:03,820
ist übelst gering da drüber, so, und was ich jetzt vorhab' ist, wir nehmen jetzt diesen

158
00:22:03,820 --> 00:22:10,380
Clip hier, Moment, wo hab ich denn überhaupt hinkopiert, ich glaube in den Zaum, der VLC

159
00:22:10,380 --> 00:22:18,180
Fluor 2, genau, so, wir nehmen diesen Clip und da machen wir jetzt Object Detection und

160
00:22:18,180 --> 00:22:26,820
zwar hab ich mir das folgendermaßen überlegt, Object Detection selbst braucht viel zu viel,

161
00:22:26,820 --> 00:22:42,460
Moment, das ist nicht alles, was der kopiert hat, oder, der hat nicht alle, what the fuck,

162
00:22:42,460 --> 00:22:57,780
der hat nicht alles kopiert, oder, ne, das geht nochmal nach 47 Sekunden, ja, seh'

163
00:22:57,780 --> 00:23:13,860
mal, der kommt gar nicht da, jetzt ist es ok, jetzt ist es da, so, jetzt ist es da, exellent,

164
00:23:13,860 --> 00:23:24,940
ok, so, und die Sache ist die, das braucht ganz schön viel, ÖZOfficial, ich, was verwendest

165
00:23:24,940 --> 00:23:34,220
du für den, mein OpenCV selbst kann ja nur die Geschichte mit Pixel, die sich ändern

166
00:23:34,220 --> 00:23:40,260
und so erkennen, das braucht ja dann meistens noch irgendwelche Trainingsmodelle und sowas

167
00:23:40,260 --> 00:23:48,740
unten drunter, dass es mit Object Detection gut funktioniert, oder was verwendest du,

168
00:23:48,740 --> 00:24:01,020
was nimmst du, da, achso, Kantenerkennung, ja, das ist auch eine gute Idee, das haben

169
00:24:01,020 --> 00:24:09,060
wir sogar im Stream schon gemacht, so, also, was ich machen will ist folgendes, also, erstens,

170
00:24:09,060 --> 00:24:13,620
das verbraucht, hier Object Detection machen, verbraucht ganz schön viel Leistung, sprich,

171
00:24:13,620 --> 00:24:20,380
wenn du jeden Frame analysieren willst, da kommt ja sogar, wahrscheinlich, naja, gut,

172
00:24:20,380 --> 00:24:24,620
ne, also, mein Desktop kommt da nicht unbedingt bei ins Schwitzen, aber ein Raspberry Pi schafft

173
00:24:24,620 --> 00:24:29,820
das nicht, keine Chance auf ein Raspberry Pi, das mit jedem Frame zu machen, deswegen

174
00:24:29,820 --> 00:24:34,620
hab ich mir folgendes überlegt, scheiß drauf, jeden Frame, brauchen wir gar nicht, wir nehmen

175
00:24:34,620 --> 00:24:41,420
einfach jeden Keyframe, wir nehmen jeden Keyframe von der Kamera, alle zwei Sekunden, sag mal

176
00:24:41,420 --> 00:24:47,580
was, was schneller eintritt, so, entweder jeden Keyframe, oder wenn die Keyframes schneller

177
00:24:47,580 --> 00:24:51,260
kommen als alle zwei Sekunden, dann nicht alle zwei Sekunden, so, ein Keyframe, nur mal

178
00:24:51,260 --> 00:24:56,100
zur Erklärung, was ein Keyframe in einem Video ist, es gibt grundsätzlich zwei verschiedene

179
00:24:56,100 --> 00:25:02,060
paar Frames in einem Video, das ist, also, komplett anders, als jetzt im Vergleich zu

180
00:25:02,060 --> 00:25:07,820
irgendwelchen Spielen, die gerendert werden, oder so, also, bei einem Spiel, oder generell

181
00:25:07,820 --> 00:25:16,100
bei allem hier so, was ihr da so seht, wird ja immer das komplette Bild berechnet, und

182
00:25:16,100 --> 00:25:20,300
bei Videos ist das grundsätzlich so, es gibt eigentlich erst mal nur zwei, es gibt natürlich

183
00:25:20,300 --> 00:25:25,500
noch andere Varianten, aber so grundsätzlich zwei verschiedene Sachen, es gibt Keyframes,

184
00:25:25,500 --> 00:25:32,860
das ist immer ein komplettes Bild, und es gibt, sag mal, nicht Keyframes, das ist immer

185
00:25:32,860 --> 00:25:40,140
der Unterschied zum letzten Keyframe, beziehungsweise der Unterschied zum letzten Frame, zum letzten

186
00:25:40,140 --> 00:25:44,820
Keyframe und so was, also sprich, es gibt einfach Keyframes, da ist komplettes Bild

187
00:25:44,820 --> 00:25:51,300
immer komplett, und es gibt die anderen Frames, ich glaube iFrames nennt sich das dann, das

188
00:25:51,300 --> 00:25:56,420
ist immer nur ein Diff, was natürlich den riesen Vorteil hat, man spart unglaublich

189
00:25:56,420 --> 00:26:03,180
viel Speicherplatz, sprich, ich muss, wenn ich alle zwei Sekunden nen Keyframe mach, manche

190
00:26:03,180 --> 00:26:08,340
Kameras machen sogar nur alle 10 Sekunden nen Keyframe, dann spar ich natürlich unglaublich

191
00:26:08,340 --> 00:26:13,620
viel Pixel, vor allem bei ner Webcam oder bei ner Kamera, wo sich nicht so viel bewegt,

192
00:26:13,620 --> 00:26:17,940
da ist dann, die normalen Frames sind dann halt nicht vorhanden, weil sich das Bild nicht

193
00:26:17,940 --> 00:26:21,780
ändert, also das hier sind ein paar Kilobit oder so, die die an Informationen speichern

194
00:26:21,780 --> 00:26:34,960
muss, weil es bewegt sich ja kaum was.

195
00:26:34,960 --> 00:26:39,060
Es gibt iP und bFrames, ja der Chat ist da sicherlich besser da drin, das zu erklären

196
00:26:39,060 --> 00:26:44,100
als ich, ich weiß nicht, was es noch für ne dritte Sorte Frames gibt, aber das sind

197
00:26:44,100 --> 00:26:49,580
so die zwei grundsätzlichen Unterschiede, ich glaub iFrames sind die Sachen, die dazwischen

198
00:26:49,580 --> 00:26:55,300
liegen, bFrames sind glaub ich die Keyframes, ich bin aber gar nicht sicher, zumindest,

199
00:26:55,300 --> 00:26:59,260
wie sind die Keyframes im Stream markiert, die haben spezielle Fleck gesetzt, dass man

200
00:26:59,260 --> 00:27:05,220
weiß, was die Keyframes sind, das lese ich ja hier übrigens auch aus, das zeig ich euch

201
00:27:05,220 --> 00:27:06,220
mal.

202
00:27:06,220 --> 00:27:17,100
Oh, ich glaub, wohnen wir gebannt, das hat grad die Verbindung zum Test Stream verloren.

203
00:27:17,100 --> 00:27:23,840
Wohnen wir, wohnen wir, nee, wohnen wir gar nicht gebannt, dachte, ich wurd schon mal

204
00:27:23,840 --> 00:27:27,340
gebannt von denen, weil ich zu oft den Stream aufgemacht hab, zumindest glaube ich, weil

205
00:27:27,340 --> 00:27:32,300
ich glaub ich, dass ich gebannt wurde, ich hab da nicht zu oft drauf zugegriffen, zu

206
00:27:32,300 --> 00:27:33,300
oft drauf zugegriffen.

207
00:27:33,300 --> 00:27:43,980
Okay, jetzt der Chat ist BigBrain, bei H264, das ist übrigens was wir supporten, ansonsten

208
00:27:43,980 --> 00:27:49,780
wir supporten nur H264, das ist auch das, was 99% aller Kameras machen, also, der iFrame

209
00:27:49,780 --> 00:27:58,900
ist das gesamte Bild, dann gibt es den pFrame, der das Diff quasi zum vorherigen Bild ist

210
00:27:58,900 --> 00:28:05,100
und dann gibt es was, ein bFrame, der berechnet das aus vorherigem Nachfolgen mit, exellent,

211
00:28:05,100 --> 00:28:09,860
letztendlich, unter der Haube, was hängen bleiben muss ist, es gibt Frames, die sind

212
00:28:09,860 --> 00:28:15,660
komplett alles, also komplett, jedes mal ein volles Bild und es gibt Frames, das sind nur

213
00:28:15,660 --> 00:28:20,460
die Unterschiede zu entweder letztem Keyframe oder zunächstem Bild, also einmal werden nur

214
00:28:20,460 --> 00:28:27,700
die Unterschiede gespeichert, einmal werden komplette Keyframes gespeichert, so, das heißt,

215
00:28:27,700 --> 00:28:32,580
wir können einfach nur jeden Keyframe nehmen, decoden und dann Motion Detection, äh, nicht

216
00:28:32,580 --> 00:28:38,580
Motion Detection, ähm, Object Detection mitmachen, das probieren wir jetzt mal aus.

217
00:28:38,580 --> 00:28:43,060
So, und jetzt zeige ich euch mal, dass man das hier auch erkennt, was ein Keyframe ist

218
00:28:43,060 --> 00:28:48,060
und was nicht, und zwar, gehen wir mal hier nach FFmpeg, ich hab das übrigens ein bisschen

219
00:28:48,060 --> 00:28:52,340
umgebaut, also wer das noch vom letzten Mal kennt, ich hab das jetzt hier ein bisschen

220
00:28:52,340 --> 00:28:57,220
aufgesplittet, aber es hat sich relativ viel getan, also ich hab da recht viel umgebaut,

221
00:28:57,220 --> 00:29:01,220
also das hier ist das letzte, letzte Commit hier, kurz nach dem Stream und ich hab das

222
00:29:01,220 --> 00:29:06,260
Ganze jetzt ein bisschen weniger Dirty gemacht, ein bisschen ordentlicher, also ich gehe

223
00:29:06,260 --> 00:29:10,580
wieder nur mal kurz drüber, was sich geändert hat, ähm, ich hab jetzt was eingebaut, wo

224
00:29:10,580 --> 00:29:15,780
man abfragen kann, welche Kameras es gibt, aus dem Frontend, dann hab ich diese ganze

225
00:29:15,780 --> 00:29:20,900
FFmpeg-Geschichte, die mir im Startup drinnen stehen hatten, hab ich so eine eigene FFmpeg-Geschichte

226
00:29:20,900 --> 00:29:25,100
draus gemacht, die ist dafür zuständig, von der Kameras die Sachen einzulesen, können

227
00:29:25,100 --> 00:29:33,980
wir uns gleich angucken, ähm, ja, ein paar Helper-Klasses, hier eine, eine Klasse, die

228
00:29:33,980 --> 00:29:38,700
dafür sorgt, dass FFmpeg-Sachen immer aufgeräumt werden, weil das neigt dazu ein bisschen zu

229
00:29:38,700 --> 00:29:44,140
Memory-Leaken, wenn ich das nicht ordentlich aufräume, sprich jedes Mal, wenn diese Klasse

230
00:29:44,140 --> 00:29:50,220
hier out of Scope geht, oder letzte Referenz weg ist, dann löscht er auch den Buffer für

231
00:29:50,220 --> 00:29:56,460
ein Bild, so, ähm, dann hab ich was gebaut, wo man Sachen resize-en kann, weil das brauchen

232
00:29:56,460 --> 00:30:02,940
wir auf jeden Fall, diese ganzen Machine-Learning-Dinger, die füttert man nur mit übelst Low-Res-Bildern,

233
00:30:02,940 --> 00:30:09,540
also wer jetzt denkt, wir schieben da ein 1080p-Bild rein, so ein, äh, Object Detection-Algorithmus,

234
00:30:09,540 --> 00:30:16,900
äh, ne, das ist meistens, keine Ahnung, 250x256x300x300, die Bilder sind übelst klein, das heißt,

235
00:30:16,900 --> 00:30:24,820
wir müssen das auf jeden Fall resize-en, vorher, oder es dauerte ewig, ja, so, bla bla, so,

236
00:30:24,820 --> 00:30:27,580
dann ist der Verbindungsaufbau, geht ein bisschen anders, das müssen wir uns jetzt nicht im

237
00:30:27,580 --> 00:30:40,580
Detail angucken, ähm, was haben wir sonst noch, eigentlich nix als zu spannendes, genau,

238
00:30:40,580 --> 00:30:45,700
und wie man rauskriegt, was Keyframes sind, ist folgendes, mit FFmpeg, kann man das Ganze

239
00:30:45,700 --> 00:30:57,180
abfragen, bist du Max FPS, liegt, würde ich sagen, revealed, exposed, ja, bin ich, du

240
00:30:57,180 --> 00:31:24,580
hast es richtig erkannt, so, ähm, so, und FFmpeg, äh,

241
00:31:24,580 --> 00:31:36,140
blöd, warum möchte es entstehen, ist da gar nichts drinne mit Keyframe, ich hab hier

242
00:31:36,140 --> 00:31:43,260
auch ein Keyframe, ach, hier ist es doch, ich bin blind manchmal, ne, also, ähm, FFmpeg,

243
00:31:43,260 --> 00:31:48,180
wenn es, ähm, die Sachen von der Kamera einliest, die kann auch die Flex einlesen und man kann

244
00:31:48,180 --> 00:31:53,020
quasi so abfragen, ob das, ob das jeweilige Bild, was ich eingelesen hab, ob das ein Keyframe

245
00:31:53,020 --> 00:31:58,300
ist, wohlgemerkt, was ich hier einlese, ist das noch encodete Bild, also sprich, wenn

246
00:31:58,300 --> 00:32:02,820
ich das Ding hier speichere, irgendwo auf der Festplatte, da kann ich damit nix anfangen,

247
00:32:02,820 --> 00:32:07,340
ne, also wenn ich da jetzt, sagen wir, keine Ahnung, File, Dot, ich mach das jetzt nochmal,

248
00:32:07,340 --> 00:32:11,820
da kommt jetzt nix raus, so dass ihr seht, dass es auch nicht, äh, nicht funktioniert,

249
00:32:11,820 --> 00:32:24,300
ach so, Moment, wir schreiben jetzt mal hier, Home, Max, Null, Punkt, ja, gibt's ja nicht

250
00:32:24,300 --> 00:32:32,540
mal ein Format, was der Corsage angeben kann, so, und dann schreiben wir hier, so, ich zeig

251
00:32:32,540 --> 00:32:36,940
jetzt so mal, dass da nix Sinnvolles bei rauskommt, wenn ich diesen Frame hier einfach speichere,

252
00:32:36,940 --> 00:32:50,100
es sei denn, es sei denn, FFmpeg ist übelst big brain, ne, da geht nix, keine Chance,

253
00:32:50,100 --> 00:32:57,340
na, weil, das ist ein encodeter Frame, da ist noch keinerlei RGB oder irgendwelche sonstigen

254
00:32:57,340 --> 00:33:02,980
Sachen drinne, keine Pixel, das ist quasi noch das komprimierte Bild, was da drin ist,

255
00:33:02,980 --> 00:33:07,980
d.h. wir müssen jetzt auch erstmal noch decompressen und, also, also, die, die, nicht was decompressen,

256
00:33:07,980 --> 00:33:16,180
decoden, genau, also, folgendes, was ich vor hab, ist, ich hab hier dieses Projekt auf

257
00:33:16,180 --> 00:33:22,780
GitHub gefunden, was eigentlich einen ganz guten Eindruck macht, wenn ich duels, warum

258
00:33:22,780 --> 00:33:32,940
auch immer, das ist ein Docker-Container mit einer recht simplen, äh, JSON-RP, so und

259
00:33:32,940 --> 00:33:36,780
was man da macht, wir testen den Container auch gleich mal mit nem Curl-Aufruf, so und

260
00:33:36,780 --> 00:33:45,300
was man machen kann, ist, man übergibt, hier, äh, man macht nen, nen Postrequest und schickt

261
00:33:45,300 --> 00:33:55,540
dahin, ok, hier hast du meine Bild, hier hast du meine, äh, Base64-encodeden Bildinformation,

262
00:33:55,540 --> 00:33:59,420
dann welchen, welche Erkennungsgeschichte man verwenden will und wie sicher er sich sein

263
00:33:59,420 --> 00:34:05,220
muss. Das ist ja, das ist lustig, allerdings Cheat95 juckt mich nicht wirklich, weil ich

264
00:34:05,220 --> 00:34:10,100
muss mich da null drum kümmern, ich mach einfach nen Container an und gut ist. Und ja, das

265
00:34:10,100 --> 00:34:14,740
Gute ist, ich muss mich null selbst drum kümmern, um da jetzt wirklich irgendwie, äh, die,

266
00:34:14,740 --> 00:34:18,460
die Machine-Learning-Sachen zu programmieren. Bis ich da was habe, was so gut funktioniert

267
00:34:18,460 --> 00:34:22,340
wie das hier, ist wahrscheinlich eine Wissenschaft für sich. So, dem Ding übergibt man sein

268
00:34:22,340 --> 00:34:28,940
Bild und dann gibt, gibt man ne Antwort, wo drinnen steht, äh, ob er was erkannt hat,

269
00:34:28,940 --> 00:34:36,940
zum Beispiel, er ist sich zu 87%, sicher, er hat ne Person erkannt und zwar hier, ich

270
00:34:36,940 --> 00:34:44,780
weiß nicht, sind das Prozentangaben, 0% links, bei Pixel können es nicht sein, von 0 bis

271
00:34:44,780 --> 00:34:48,820
1, sind wahrscheinlich Prozentangaben, also quasi, 0 pro, also überhaupt nicht links,

272
00:34:48,820 --> 00:34:53,500
äh, überhaupt nicht oben, äh, 0,05 pro, ah ne Moment, das muss ich mal 100 rechnen,

273
00:34:53,500 --> 00:35:02,700
0% 5% links, 85% unten und 95% rechts, also, also irgendwo rechts unten auf dem Bild war

274
00:35:02,700 --> 00:35:12,420
die Person. Die 4 Ecken, aber in Prozent, in Prozent. Was richtig gut ist, dass das

275
00:35:12,420 --> 00:35:17,340
in Prozent ist, ne, wisst ihr das? Da muss ich nämlich keine Pixel umrechnen, das kann

276
00:35:17,340 --> 00:35:22,260
ich 1 zu 1 nehmen, um irgendeinen Overlay im Frontend zu malen. Ok, wir machen jetzt

277
00:35:22,260 --> 00:35:28,300
ein bisschen Big Brain Time. Erstmal starten wir den Docker-Container und probieren das

278
00:35:28,300 --> 00:35:34,220
mal aus, mit der Bilderkennung. Da muss ich dazu sagen, chat, ich jibale euch, ich hab

279
00:35:34,220 --> 00:35:37,300
schon ausprobiert, also ich weiß, dass es funktioniert, sonst würde ich das, würde

280
00:35:37,300 --> 00:35:41,580
ich das Projekt hier gar nicht jetzt angefangen. Aber ich kann, wenn es euch lieber ist, wenn

281
00:35:41,580 --> 00:35:45,100
es euch lieber ist, kann ich so tun wie, oh, ob das jetzt funktioniert, wir werden es,

282
00:35:45,100 --> 00:35:48,940
wir werden es gleich erfahren, ja. Also mal gucken, ich bin mir da nicht sicher, ob es

283
00:35:48,940 --> 00:35:53,100
funktioniert, also, wenn wir Glück haben, klappt das. So, also, ich muss erstmal den

284
00:35:53,100 --> 00:36:00,460
Docker-Container starten. Chat, ich hab euch übrigens auf diese Art und Weise schon öfters

285
00:36:00,460 --> 00:36:07,900
mal jibated und ihr habt's überhaupt nicht mitgekriegt. Ihab911, Dankeschön für den

286
00:36:07,900 --> 00:36:19,740
Sub, huge, Subscription. Fake Content, ja, so, ganz, ganz schlimm. Also, Docker, haben

287
00:36:19,740 --> 00:36:29,940
die da irgendwie ne Anleitung drin, wie man startet? Ja, da, genau. Äh, ja, das da.

288
00:36:29,940 --> 00:36:36,940
Ja, eins muss ich machen bei diesem Docker-Container, witzigerweise. Ich muss ihm sagen, weil über

289
00:36:36,940 --> 00:36:42,100
den Docker-Proxy ging es nicht, ich weiß nicht, woran das liegt. Host-Network, warum auch

290
00:36:42,100 --> 00:36:59,060
immer. Dich hab ich nicht jibated, fuck, Alter. Jetzt ist es raus. Hast du heute schon dein

291
00:36:59,060 --> 00:37:04,300
Spezial gezeigt? Ach so, jetzt wo du's sagst. Also, Seron möchte, möchte ich, glaube ich,

292
00:37:04,300 --> 00:37:10,940
das mal wieder sehen. Hab ich euch schon mal gezeigt, wie ich meine Heizung überwache.

293
00:37:10,940 --> 00:37:19,660
Ja, guckt euch das mal an. Ich kann's nicht mehr ernst bringen, Leute, das funktioniert

294
00:37:19,660 --> 00:37:25,100
nicht mehr. Also, für die Leute, die neu sind, das ist so der Running-Gag in jedem Stream

295
00:37:25,100 --> 00:37:30,540
und ich kann's, ich krieg's nicht mehr ernst hin. Ich hab mal fünf Streams im Folge quasi

296
00:37:30,540 --> 00:37:34,060
jeden Stream erzählt, guck mal, wie geil ich meine Heizung überwache und das ist jetzt

297
00:37:34,060 --> 00:37:36,660
so ein bisschen der Running-Gag. Aber guck mal, wie schön ich meine Heizung überwache.

298
00:37:36,660 --> 00:37:40,060
Hier sieht man, dass der Status okay ist, weil die Kessel-Temperatur ist, auch die Pumpe

299
00:37:40,060 --> 00:37:45,500
pumpt, Abgaswerte und sonst was. Aber wisst ihr was, was noch viel nicer ist? Gehen wir

300
00:37:45,500 --> 00:37:54,980
mal Dashboards kurz. Ach, hier, Manage, genau. Plattenplatz nicht, Blackbox. Ich hab mir

301
00:37:54,980 --> 00:38:03,180
noch was gebaut, wo ich sehe, wann meine Zertifikate auslaufen. Und ich sehe, dass

302
00:38:03,180 --> 00:38:13,820
Wiki läuft in 35 Tagen aus. Anzeige ist raus. Aber das Gute ist, ich muss überhaupt nichts

303
00:38:13,820 --> 00:38:18,020
machen. In fünf Tagen wird Let's Encrypt oder beziehungsweise nicht Let's Encrypt Traffic

304
00:38:18,020 --> 00:38:24,380
wird das Ding automatisch selbst erneuern. Gut, also, hier läuft das Object Detection

305
00:38:24,380 --> 00:38:28,780
Ding im Container. Jetzt probieren wir das mal aus. Wir brauchen jetzt erstmal ein Bild,

306
00:38:28,780 --> 00:38:34,140
wo offensichtlich eine Person drauf ist. Da schnappen wir uns jetzt mal Google irgendwas

307
00:38:34,140 --> 00:38:40,100
und dann machen wir hier so diesen Curl-Befehl, um das Ganze auszuprobieren. Also, ich hab

308
00:38:40,100 --> 00:38:59,740
Angst nach Person zu gucken. Person. Gibt's da vielleicht irgendwie On-Couch oder so?

309
00:38:59,740 --> 00:39:10,420
On-Couch. Okay, wunderbar. So, was nehmen wir da jetzt? Irgendwas, vollkommen wurscht,

310
00:39:10,420 --> 00:39:13,060
so irgendwie. Den Typ mit der kurzen Hose. Ich hab Angst, immer noch sowas zu suchen.

311
00:39:13,060 --> 00:39:30,980
Toxy, 10 Monate. Dankeschön. Willen Sub. Massive Subscription. Ja, ich hab jetzt einfach

312
00:39:30,980 --> 00:39:37,620
mal, okay, wir nehmen jetzt irgendeinen Bild von irgendeinem Dude, der ja auf der... Handsome

313
00:39:37,620 --> 00:39:44,700
Young Man Sitting. Exzellent. Gucken wir mal, ob das Motion, ob das Object Detection das

314
00:39:44,700 --> 00:39:54,700
trotz Wassermarks erkennt, wahrscheinlich. View Image. Save. Handsome Young Man at Home

315
00:39:54,700 --> 00:40:02,140
Sitting on the Couch. Alles klar. Natürlich. Wir beachten nur die Lizenz. Immer. Immer.

316
00:40:02,140 --> 00:40:08,220
Ich mach nix anderes wie Lizenzen beachten. So, nennen wir das mal irgendwie keiner. Perz.jpg.

317
00:40:08,220 --> 00:40:13,100
Exzellent. So, was wir jetzt mal machen müssen, wir müssen das Ding erst mal resizeen, damit

318
00:40:13,100 --> 00:40:18,420
man das auch ordentlich ausprobieren kann. Wenn ich jetzt so wüsste, wie man Image Magic

319
00:40:18,420 --> 00:40:32,260
schön resize, ich glaub resize. Ah, wunderschöne Seite. Exquisite. Ja, minusminus resize war's.

320
00:40:32,260 --> 00:40:37,860
Minusminus resize auf, wir machen mal irgendwie, keine Ahnung, 300. 300 mal 300? Aber ich

321
00:40:37,860 --> 00:40:44,100
weiß, dass das intern mit 300 mal 300 funktioniert, deswegen mach ich das jetzt auf 300 mal 300.

322
00:40:44,100 --> 00:40:57,660
Wir werden unsere Frames auch auf 300 mal 300 resizeen. So. Gucken wir mal, ob das resized

323
00:40:57,660 --> 00:41:06,260
hat. Jawoll. So. Und da machen wir jetzt mal Erkennung drauf, ob Dudes das erkennt als

324
00:41:06,260 --> 00:41:10,420
Person. Vielleicht haben wir auch Glück, es erkennt es auch als Couch. Couch und Person.

325
00:41:10,420 --> 00:41:25,620
Müssen wir mal schauen. So, One-liner. Okay. Zack. So. Okay, wir machen mal 50% Genauigkeit

326
00:41:25,620 --> 00:41:40,900
runter. So, Cat. Und jetzt, wie hab ich gesagt, Person 2.jpg. Localhost 8080 Detect. Exzellent.

327
00:41:40,900 --> 00:41:43,700
So. So, was hat er erkannt? Wir machen das mal nach JQ, dann erkennt man's besser. Was

328
00:41:43,700 --> 00:41:54,500
hat er erkannt? Person hat er erkannt. Person und zwar 9 top, 28 left, 95 bottom und 67

329
00:41:54,500 --> 00:42:01,300
right. Das kommt hin. Also sprich, das ist eher ein Bild, eher unten, unten Richtung

330
00:42:01,300 --> 00:42:12,340
rechts. So. Ja. Also der hat quasi eher die Person da so erkannt. Aber er hat sie auf

331
00:42:12,340 --> 00:42:21,020
jeden Fall erkannt und er ist sich ziemlich sicher. Er ist 80% sicher, dass er eine Person

332
00:42:21,020 --> 00:42:27,940
erkannt hat. Exzellent. Wer in Bad Dudes auch Frauen erkannt? Ja. Aber ich will nicht nach

333
00:42:27,940 --> 00:42:35,220
Mädels auf der Couch in der Google-Suche suchen, weil ihr wisst, was man da hinkriegt. Was

334
00:42:35,220 --> 00:42:43,660
man da als Antwort kriegt wahrscheinlich. Übrigens, was ich erzählt hab, stimmt überhaupt

335
00:42:43,660 --> 00:42:54,420
nicht. 28% left und 67% right. Das ist ziemlich genau die Mitte. Das ist quasi 30-60. Also

336
00:42:54,420 --> 00:43:10,780
ich hab übrigens Mist erzählt. Patrick, das ist eigentlich safe for work. Ja. Also

337
00:43:10,780 --> 00:43:19,020
das Bild kann man... Okay, Patrick, das Bild nehmen wir jetzt als Object Detection. Ich

338
00:43:19,020 --> 00:43:23,740
muss mal kurz gucken, ob das wirklich safe ist. Ich meine, die haben zwar ganz schöne

339
00:43:23,740 --> 00:43:49,300
Dinger in der Unterhose, aber das ist safe. Also we get. So. Convert. C10. 3.jpg. Also

340
00:43:49,300 --> 00:43:54,100
ich glaube, man erkennt, was da eigentlich auf dem Bild zu sehen ist. Aber es ist nicht

341
00:43:54,100 --> 00:43:58,540
TOS. Es kann nicht TOS sein. Es ist nichts Schlimmes. Ja, also man sieht nichts. So jetzt

342
00:43:58,540 --> 00:44:18,780
gucken wir mal, was die Image-Erkennung daraus macht. So. Also. Gucken wir mal. Wie hab

343
00:44:18,780 --> 00:44:30,700
ich gern Person 3? Oh, guck mal hier. Er hat erkannt Person, Person, Person, Person. Okay,

344
00:44:30,700 --> 00:44:40,180
wie viel? 1, 2, 3, 6 Persons hat er erkannt. Okay. Der ist ziemlich gut, oder? 1, 2, 3,

345
00:44:40,180 --> 00:44:49,260
4, 5, 6. Nicht schlecht. Okay, er hätte jetzt noch Person in Unterhose schreiben können.

346
00:44:49,260 --> 00:44:56,300
Nicht verkehrt. Die Couch erkennt er nicht. So, wir können mal aus Spaß sagen, wenn er

347
00:44:56,300 --> 00:45:00,060
sich ein bisschen unsicherer ist, was er noch so alles erkennt. Ein TV-Erkennter. Okay,

348
00:45:00,060 --> 00:45:10,860
eine Couch. Er ist sich ziemlich sicher, dass er eine Couch erkennt. Person, Person, Person-Erkennter.

349
00:45:10,860 --> 00:45:20,460
Couch, Couch. Okay. TV. Okay, wo immer dann TV sein soll. Also Object Detection funktioniert.

350
00:45:20,460 --> 00:45:24,500
Ob er Anime-Characters erkennt, ist die Frage, ob das da drauf trainiert wurde. Wahrscheinlich

351
00:45:24,500 --> 00:45:31,420
nicht. So, aber wir sorgen dafür, dass wir 60, 60% sicher wollen wir sein. 60% sicher

352
00:45:31,420 --> 00:45:41,700
ist gut. Also man sieht, das funktioniert wunderbar. Confidence mal 1, ja dann erkennt

353
00:45:41,700 --> 00:45:54,420
er alles mögliche. Wobei, geht eigentlich. Couch, Couch, TV, Person-Erkennter. Also der

354
00:45:54,420 --> 00:46:00,540
ist gar nicht so fehleranfällig. TV, wo auch immer da ein Fernsehgerät ist, man weiß

355
00:46:00,540 --> 00:46:06,940
es nicht. Ist da irgendwo ein Fernsehgerät? Da hinten das vielleicht. Vielleicht denkt

356
00:46:06,940 --> 00:46:21,940
er, das da ist ein Fernsehgerät. Ich glaube Null geht nicht. Genau das gleiche. Der erkennt

357
00:46:21,940 --> 00:46:29,820
das Fenster als Fernseher, das kann schon sein. Top, nee. Nee, der erkennt, der Fernseher

358
00:46:29,820 --> 00:46:46,860
ist rechts, von links nach rechts und Mitte. Also von oben bis zur oberes Drittel vom Bild

359
00:46:46,860 --> 00:46:52,140
und von links nach rechts ist das. Ja, genau, der erkennt das Fenster. Das ist das Fenster.

360
00:46:52,140 --> 00:46:59,260
Oberes Drittel vom Bild, also sprich von oben bis zu ungefähr 30% vom Bild und dann fast

361
00:46:59,260 --> 00:47:05,220
von links fast nach rechts. Das ist das Fenster. Das erkennt das Fenster. Das ist das Fenster,

362
00:47:05,220 --> 00:47:10,700
was der als Fernseher erkennt. Also okay, für unsere Sachen reicht das. So, wir machen

363
00:47:10,700 --> 00:47:14,700
jetzt mal kurz einen Benchmark, wie schnell der ist. Wohlgemerkt hier auf meinem Rechner.

364
00:47:14,700 --> 00:47:21,660
Auf dem Raspberry Pi ist der nochmal eine Ecke langsamer. Auf dem Raspberry Pi kannst

365
00:47:21,660 --> 00:47:26,820
du froh sein wahrscheinlich, wenn du pro Sekunde den Bild erkennen kannst. Also pro Kern oder

366
00:47:26,820 --> 00:47:30,860
so. Pro Kern ein Bild. Irgendwie so würde ich mal drauf tippen auf dem aktuellen Raspberry

367
00:47:30,860 --> 00:47:37,020
Pi. So, also dazu müssen wir erstmal, müssen wir mal ne Runde Benchmarks machen. Ah, hab

368
00:47:37,020 --> 00:47:46,260
ich gar nicht gesehen. Ja, bester, bester Kommandozeilen Benchmark. Exzellent. Hyperfine. Hyper,

369
00:47:46,260 --> 00:48:02,740
hyperfine. Ah ja, huge. What the fuck? Was ist das? Wollte ich nicht. Ah, das hier wollte

370
00:48:02,740 --> 00:48:12,900
ich. Genau. Also es ist ein Benchmark Tool für die Shell. Oh, oh ich muss Update machen.

371
00:48:12,900 --> 00:48:20,980
Ja, ja, ist gut. Mach Update. Also ihr seht, er erkennt schon ziemlich gut das Ganze. Kann

372
00:48:20,980 --> 00:48:26,540
man sich nicht beschweren. Exquisite. Exzellent. Macht er das. So, dann muss man kurz Updates

373
00:48:26,540 --> 00:48:31,780
machen. Gut, und mein Plan ist jetzt folgender, während er hier Updates macht, bevor wir

374
00:48:31,780 --> 00:48:40,500
hier weitermachen können. Erklär ich mal was, was wir machen. Also, wir greifen uns jetzt

375
00:48:40,500 --> 00:48:45,420
jeden Keyframe ab. Wir bekommen ja hier schon jeden Keyframe. Und wir bauen ne Motion Detection

376
00:48:45,420 --> 00:49:03,260
Klasse oder ne Object Detection Klasse. Äh, Patrick, ich kann mir durchaus vorstellen,

377
00:49:03,260 --> 00:49:11,140
dass er das auch erkennt als Person. Hast du das jetzt aus der Startup genommen? Ja. Es

378
00:49:11,140 --> 00:49:16,140
gibt jetzt was eigenes. Guck das jetzt hier. Ich hab jetzt, ich hab das aus der Startup

379
00:49:16,140 --> 00:49:19,340
rausgenommen, also was der, was der macht. Während er hier Updates kann ich ja mal so

380
00:49:19,340 --> 00:49:27,580
ein bisschen grob erklären, wie das Ganze, wie das Ganze funktioniert. Also. Ähm. Gut,

381
00:49:27,580 --> 00:49:32,540
diese Startup Klasse ist jetzt nicht sonderlich besonders. Das ist das, wie jede ASP.NET Startup

382
00:49:32,540 --> 00:49:37,500
aussieht. Sprich, man sagt, was es für Controller gibt, was es für, äh, was Sachen registriert

383
00:49:37,500 --> 00:49:41,940
werden sollen. Ich hab's jetzt so behelfsmäßig mal so gemacht. Ich hab hier ne Public-Liste

384
00:49:41,940 --> 00:49:49,460
mit den Kameras drin, weil ich noch keine Datenbank angebunden hab. Ähm. So, und dann

385
00:49:49,460 --> 00:49:55,300
startet er ein paar Dinger. Das Startup ist ziemlich langweilig. So, und das eigentlich

386
00:49:55,300 --> 00:50:04,660
Interessante passiert einmal hier. Kamerastream. Es gibt einmal eine Kamerastream-Pool-Klasse.

387
00:50:04,660 --> 00:50:10,020
Dort drüber startet man die einzelnen Kamerastreams, weil, ähm, ich brauch ja auch irgendwas,

388
00:50:10,020 --> 00:50:16,020
was handelt, wenn ein Kamerastream mal abbricht. Also, wenn man, ich zeig euch, ich zeig euch

389
00:50:16,020 --> 00:50:21,660
mal wie das geht. Also, wenn ich den Kamerastream starte, dann sag ich so was hier. Kamerastream-Pool

390
00:50:21,660 --> 00:50:25,460
start und übergibt quasi ein Kameraobjekt, wo dann drinsteht. In so einem Kameraobjekt

391
00:50:25,460 --> 00:50:33,380
steht folgendes drinne. Aber jetzt die Musik ein bisschen laut. Nee, passt so eigentlich,

392
00:50:33,380 --> 00:50:38,620
oder? So, eigentlich ist es okay. Aber ein Ticken leiser. Ich glaub passt. So, in so

393
00:50:38,620 --> 00:50:42,860
einem Kameraobjekt steht was folgendes drinne. Das ist schon committed. Ja, das hab ich vorhin

394
00:50:42,860 --> 00:50:47,260
committed vor einer Stunde oder so. Das wir hier im Stream weitermachen können. Also,

395
00:50:47,260 --> 00:50:51,140
jede Kamera hat ne ID, ne Name, ne Stream-Mode, User und Passwort, falls man das braucht.

396
00:50:51,140 --> 00:51:03,500
Abneuer ich kein Bild, ja? Bei mir in Vorschau ist alles gut. So, dann startet er das, dann

397
00:51:03,500 --> 00:51:11,100
sag ich ihm hier, starte, dann Stream für die Kamera. Es ist überhaupt nichts F, Leute.

398
00:51:11,100 --> 00:51:21,700
Also, manchmal lass ich mich ja übelst debaten, ja? Hast du Git-Add-Punkt gemacht? Äh, weiß

399
00:51:21,700 --> 00:51:32,860
ich nicht mehr, was ich gemacht hab. Ich glaub Git-Add-A. Kengin, was suchst du denn? Ah,

400
00:51:32,860 --> 00:51:38,820
okay. So, also der startet hier ne Kamera. Was der dann macht ist folgendes. Okay, der

401
00:51:38,820 --> 00:51:43,860
startet immer noch. Der geht hier rein in die Start-Methode. So, und diese Kamera-Stream-Klasse

402
00:51:43,860 --> 00:51:48,500
oder diese Kamera-Stream-Pool ist dafür zuständig, quasi zu sorgen, dass die Kamera-Streams, wenn

403
00:51:48,500 --> 00:51:54,420
sie abkacken, neu gestartet werden. Also, wenn ich hier sage, Kamera start, dann legt

404
00:51:54,420 --> 00:51:58,500
er ein neues Kamera-Stream-Objekt an, addet das zu einer Streaming-Liste, das ist hier

405
00:51:58,500 --> 00:52:05,340
so ein Threadsafe-Dictionary, wo er das reinschreibt. So, dann macht er einen neuen Task, wobei

406
00:52:05,340 --> 00:52:13,300
ich mir jetzt gar nicht so sicher bin, ob ich den eigentlich brauche. Hm, mal gucken.

407
00:52:13,300 --> 00:52:21,500
Ähm, da macht er einen neuen Task auf mit einer Endlosschleife drin, startet den Kamera-Stream,

408
00:52:21,500 --> 00:52:24,700
wusstest du das get or add bei einem konkuren Ding? Nichts, Threadsafe hab ich letztens

409
00:52:24,700 --> 00:52:35,260
auch gesehen, ja? So, der startet den Kamera-Stream. Wenn der Stream abkackt, dann lockt er ne Message,

410
00:52:35,260 --> 00:52:40,880
resette das Ganze, wartet 5 Sekunden und fängt wieder von vorne an. So, und sollte das ordentlich

411
00:52:40,880 --> 00:52:44,540
beendet werden, weil man die Kamera stoppt, dann geht er hier raus und ich muss neu starten.

412
00:52:44,540 --> 00:52:49,260
So. Das hier unten ist die eigentliche Klasse, die dafür da ist, FFM-Pack, die Kamera-Streams

413
00:52:49,260 --> 00:52:58,940
zu benutzen. Also, äh, die Kamera-Streams abzufragen, es funktioniert auch relativ

414
00:52:58,940 --> 00:53:02,740
simpel, wenn man schon mal was mit FFM-Pack gemacht hat. Das hier ist alles bla bla, das

415
00:53:02,740 --> 00:53:06,420
braucht kein Mensch. Wichtig ist das hier, das ist die eigentliche Funktion, die man

416
00:53:06,420 --> 00:53:14,020
das macht. Ähm, setzt hier ein paar Options und hier, äh, Moment, und hier verbindet

417
00:53:14,020 --> 00:53:21,980
sich zur Kamera. AV-Format, Open Input. Äh, also das Frontend kann ich dir zeigen, da

418
00:53:21,980 --> 00:53:26,900
ist nicht allzu viel zu sehen. Test, Test-Kamera-Streams am Start, die übrigens grad nicht laufen,

419
00:53:26,900 --> 00:53:34,820
wenn ich's gestoppt hab. So, äh, hier öffnet er den Kamera-Stream. Was echt verwirrend

420
00:53:34,820 --> 00:53:40,500
ist, wo man bei FFM-Pack aufpassen muss, wenn das hier fehlschlägt, dann macht er automatisch

421
00:53:40,500 --> 00:53:46,780
Free hier drauf. Was merkwürdig ist, weil überall anders musst du selbst Free machen,

422
00:53:46,780 --> 00:53:54,980
aber nur da macht FFM-Pack Free für dich. Logik, weiß nicht. So, deswegen, deswegen

423
00:53:54,980 --> 00:53:59,340
kann ich da auch nicht einfach weitermachen danach. So, da verbindet sich zur Kamera,

424
00:53:59,340 --> 00:54:03,580
liest ein bisschen Zeug aus, sucht sich raus in den Videostream, schmeißt ne Fehler, wenn

425
00:54:03,580 --> 00:54:07,060
es keinen Videostream gibt, weil ich kann da schlecht Video abfragen, ohne Videostream

426
00:54:07,060 --> 00:54:12,580
von der Kamera zu bekommen. So, und dann hat er hier eigentlich nur ne lange Endlosschleife,

427
00:54:12,580 --> 00:54:22,220
wo er nix anderes macht als, ähm, einfach Frame nach Frame von der Quelle einlesen.

428
00:54:22,220 --> 00:54:26,940
Der macht quasi Read Frame, macht ein paar Sachen mit, nächster Durchgang, Read Frame,

429
00:54:26,940 --> 00:54:31,100
Read Frame, Read Frame, und das macht er unendlich lange, oder zumindest so lange, bis einer

430
00:54:31,100 --> 00:54:37,620
Cancel aufruft, macht er das. Das ist das, was er im Prinzip, was er in FFM-Pack macht,

431
00:54:37,620 --> 00:54:40,620
einfach unendlich lange die Kamera lesen. So, und dann mach ich hier noch ein bisschen

432
00:54:40,620 --> 00:54:45,460
Error-Checking drin, also ich guck zum Beispiel, falls die Kamera, das machen nämlich viele

433
00:54:45,460 --> 00:54:52,700
billig, äh, China-Cams, die, wenn die Timestamps nicht stimmen, unter anderem hier gerade, wenn

434
00:54:52,700 --> 00:54:57,820
die Timestamps nicht stimmen, dann überspringe ich einfach diesen Frame. Ist nicht so schön,

435
00:54:57,820 --> 00:55:02,380
man könnte das auch umsortieren, das werd ich noch machen später, aber erstmal ist,

436
00:55:02,380 --> 00:55:08,060
äh, skipp ich das einfach, wenn die Timestamps nicht stimmen. So, und dann guckt ihr, ob's

437
00:55:08,060 --> 00:55:16,820
ein Keyframe ist, wirft das Event on Keyframe, und wenn's kein Keyframe, also bei jedem Frame

438
00:55:16,820 --> 00:55:24,820
wirft er das On Next Frame Event, so. Das war im Prinzip alles, was er in FFM-Pack macht.

439
00:55:24,820 --> 00:55:29,380
So, und der Verbindungsaufbau, das ist das einzige, was noch irgendwie ein bisschen komplexer

440
00:55:29,380 --> 00:55:34,420
ist, bei der ganzen Geschichte, ist hier drin. Äh, wir müssen übrigens das Front, das Frontend,

441
00:55:34,420 --> 00:55:40,900
alles ist da. Glaub mal, hier zu. Ähm, was der hier macht, ist folgendes, der holt sich

442
00:55:40,900 --> 00:55:56,900
eine Session-ID, hier im Frontend. Äh, oh, ja. Connect ruft er auf, und Connect passiert

443
00:55:56,900 --> 00:56:04,820
die eigentliche Sache, also sprich, äh, der, wo ist das Session-ID, der ruft sich eine

444
00:56:04,820 --> 00:56:09,420
Session-ID ab, so, dann kriegt er hier eine Session-ID zurück, es wird eine neue Connection

445
00:56:09,420 --> 00:56:14,180
schonmal angelegt, dann, das ist jetzt WebRTC-interne Sachen, das muss man sich jetzt nicht so genau

446
00:56:14,180 --> 00:56:21,140
angucken, dann ruft er sich ab, was der Server für Bildformate unterstützt, und schickt

447
00:56:21,140 --> 00:56:25,180
zurück, was der Browser für Bildformate unterstützt, und wenn die sich einig sind,

448
00:56:25,180 --> 00:56:29,220
ist eine Session aufgebaut, und wenn eine Session aufgebaut ist, dann passiert folgendermaßen,

449
00:56:29,220 --> 00:56:35,060
passiert das hier, wenn eine Session aufgebaut ist zwischen Browser und Server, dann geht

450
00:56:35,060 --> 00:56:42,620
er zu diesem CameraStreamPool, ähm, und, äh, das ist quasi das Event, was aufgerufen

451
00:56:42,620 --> 00:56:49,220
wird intern für jeden, für jeden Frame. Er sagt CameraStreamPool getOutput für diese

452
00:56:49,220 --> 00:56:55,140
Kamera, und dann kriegt er, quasi bei jedem neuen Frame von der Kamera, kriegt er jetzt

453
00:56:55,140 --> 00:57:01,940
hier einen Callback, und das schickt er an den Browser, in einem eigenen Task. Wohlgemänt

454
00:57:01,940 --> 00:57:05,060
alles in einem eigenen Task, weil das soll asynchron funktionieren und nix hängen, falls

455
00:57:05,060 --> 00:57:10,540
es mal irgendwie länger dauert. Das ist, also, man kann sich das durchaus angucken, denk

456
00:57:10,540 --> 00:57:14,940
ich, das ist diesmal relativ ordentlich, was ich hier fabriziert hab. Was ganz cool ist,

457
00:57:14,940 --> 00:57:21,460
ich hab ein paar neue Features von C-Sharp 8, ist das glaub ich, verwendet, und zwar,

458
00:57:21,460 --> 00:57:25,420
was macht eigentlich mein Update, ist das durch? Ah, mein Update ist, exellent. Update

459
00:57:25,420 --> 00:57:28,700
ist fertig, da kann ich das jetzt mal installieren. Und zwar, ich hab ein Feature von C-Sharp

460
00:57:28,700 --> 00:57:33,180
8 verwendet, oder 7, 8, ich glaub von, ne, neun kommt jetzt von C-Sharp 8, wusste ich

461
00:57:33,180 --> 00:57:40,580
selbst gar nicht, dass es das gibt, und zwar, await for each. Und ich bin mir da gar nicht

462
00:57:40,580 --> 00:57:43,660
sicher, ob ich das in einem eigenen Task überhaupt machen muss, oder ob der das unter der Haube

463
00:57:43,660 --> 00:57:50,380
für mich schon macht. Await for each, das ist eigentlich ziemlich, ziemlich praktisch,

464
00:57:50,380 --> 00:57:58,060
und zwar, jedes Mal, wenn es von der Kamera ein neues Bild gibt, dann schreibt er das

465
00:57:58,060 --> 00:58:06,180
hier in diese Queue rein, oder in diesen Buffer rein. Und, äh, hier passen maximal 5 Bilder

466
00:58:06,180 --> 00:58:13,620
rein, und wenn mehr reinkommen als, also, wenn der Buffer voll läuft, dann droppt er

467
00:58:13,620 --> 00:58:17,820
immer das älteste Bild. Weil, was soll er machen? Ja, da kann er den Buffer schlecht

468
00:58:17,820 --> 00:58:21,540
voll laufen, da ist irgendwas der Ram, irgendwann ist der Ram dicht. Also, er hat maximal einen

469
00:58:21,540 --> 00:58:27,900
Buffer von 5 Frames, der sich speichert. So, und was das hier macht, ist, der kann, also,

470
00:58:27,900 --> 00:58:34,420
eigentlich ein richtig, ein richtig nicees Feature, der wartet quasi immer hier drauf,

471
00:58:34,420 --> 00:58:38,700
wenn hier ein neues Bild reinkommt, dann führt er das hier, diesen Schleifendurchgang,

472
00:58:38,700 --> 00:58:43,940
einmal aus, geht wieder nach oben, und wartet von sich aus, ohne dass ich da irgendwie einen

473
00:58:43,940 --> 00:58:50,540
Sleep einbauen muss, oder irgendwas. Der nimmt sich das, bis hier der Buffer leer ist, bis

474
00:58:50,540 --> 00:58:54,900
dieser Channel leer ist, und wenn der Channel leer ist, dann wartet er einfach, bis das

475
00:58:54,900 --> 00:59:00,380
nächste Bild reinkommt. Also sprich, ich muss hier keine Endlosschleife machen, äh,

476
00:59:00,380 --> 00:59:04,940
ein Sleep für zwei Sekunden, oder sowas, das macht das alles für mich. Das ist eigentlich

477
00:59:04,940 --> 00:59:08,460
ein ziemlich nicees Feature, ich geh mal davon aus, dass man damit noch viel mehr nicee Sachen

478
00:59:08,460 --> 00:59:13,740
machen kann. Also, es ist ziemlich pock, man muss Microsoft wirklich mal, wirklich loben,

479
00:59:13,740 --> 00:59:23,620
ähm, die haben echt viel gute Sachen eingebaut in C-Sharp. Auch, auch die letzten Jahre

480
00:59:23,620 --> 00:59:28,340
über. Also, C-Sharp hatte von Anfang an schon ziemlich gute Features, das liegt aber vor

481
00:59:28,340 --> 00:59:33,700
allem daran, weil Anders Heilsberg übelst, äh, guter Sprachdesigner ist letztendlich,

482
00:59:33,700 --> 00:59:36,780
jetzt ist er ja bei TypeScript am Start, glaub ich, weiß nicht, ob er da immer noch

483
00:59:36,780 --> 00:59:40,900
ist. Ey, du kannst dich einfach MS loben, doch, was C-Sharp angeht, muss man wirklich,

484
00:59:40,900 --> 00:59:47,940
oder auch.NET Core, muss man das loben. So, ähm, genau, so, jetzt machen wir mal ein

485
00:59:47,940 --> 00:59:52,300
Benchmark, wie schnell das Ganze, wie schnell das Ganze ist. Wie gesagt, Hyperfine ist ein

486
00:59:52,300 --> 01:00:01,980
Commando-Zeilen-Benchmark. Ups. Der führt das jetzt ein paar Mal aus und sagt mir, wie

487
01:00:01,980 --> 01:00:11,140
lang das dauert. So, und man sieht, mein Rechner braucht aktuell ungefähr 100 Millisekunden

488
01:00:11,140 --> 01:00:17,500
für einmal Bilderkennung. Das ist das gleiche Bild, was wir uns eben angeguckt haben. So,

489
01:00:17,500 --> 01:00:20,940
wir können jetzt nochmal das andere, wir nehmen mal das bisschen größere Bild, da werdet

490
01:00:20,940 --> 01:00:27,620
ihr sehen, dass es instant langsamer wird. Naja, so viel langsamer auch nicht. Weil jetzt

491
01:00:27,620 --> 01:00:33,540
muss das noch resizen, vorher hab ich es resized. Also, mein Rechner braucht ungefähr 100 Millisekunden

492
01:00:33,540 --> 01:00:40,420
für einmal Object Detection. Was natürlich nicht zu vergleichen ist mit dem Raspberry

493
01:00:40,420 --> 01:00:46,060
Pi, der Raspberry Pi braucht wahrscheinlich eine Sekunde für ein Bild oder so. Werden

494
01:00:46,060 --> 01:00:50,300
wir da mal sehen. Äh, aber das Coole ist auch dadurch, dass das Ganze im Docker-Container

495
01:00:50,300 --> 01:00:54,860
läuft, kann ich ihm einfach sagen auf dem Raspberry Pi, ey, beschränk dich mal auf

496
01:00:54,860 --> 01:01:00,940
maximal zwei CPU-Kerne. Und mein Ziel ist ja, dass das Ganze gut auf dem Raspberry Pi läuft,

497
01:01:00,940 --> 01:01:05,340
deswegen mach ich ja da auch kein großes Encoding, Transcoding, Decoding oder so, sondern reiche

498
01:01:05,340 --> 01:01:12,140
einfach nur die ganzen Bilder von der Kamera durch. Und das, also das läuft ultra performant

499
01:01:12,140 --> 01:01:16,060
auf dem Raspberry Pi, das hab ich schon ausprobiert, aber halt nicht mit Object Detection. So,

500
01:01:16,060 --> 01:01:21,940
und ich hab ja die Hoffnung, wenn man ihm sagt, ey, Object Detection einmal die Sekunde

501
01:01:21,940 --> 01:01:30,060
oder einmal alle zwei Sekunden pro Keyframe, dass das ein Raspberry Pi auch gut ab kann

502
01:01:30,060 --> 01:01:35,980
mit eins, zwei CPU-Kernen ausgelastet. Was natürlich richtig cool ist, weil dann hat

503
01:01:35,980 --> 01:01:42,740
man eine richtig, ziemlich gute Erkennung von Kamerabildern, die viel besser ist als das,

504
01:01:42,740 --> 01:01:47,420
was wir in den meisten China-Cams haben. So, und jetzt machen wir mal ein bisschen Big-Brain-Logik.

505
01:01:47,420 --> 01:01:51,420
So, also ich weiß, dass das hier funktioniert, also wir haben uns angeschaut, Object Detection

506
01:01:51,420 --> 01:01:57,540
funktioniert und das ist auch relativ schnell. So, und jetzt werden wir mal eine Object Detection-Klasse

507
01:01:57,540 --> 01:02:03,660
programmieren. Gut, also, gehen wir da mal hin, hier. Im Zweifelsfall alles in Helper,

508
01:02:03,660 --> 01:02:07,620
wenn man nicht weiß wohin, dann immer in Helper. Exzellent. So, und ich muss mir jetzt nebenbei

509
01:02:07,620 --> 01:02:10,940
mal was aufmachen zum abgucken, weil alles aus dem Kopf so jetzt runterschreiben kann

510
01:02:10,940 --> 01:02:19,700
ich auch nicht. So, was gucken. Weil ich habe schon FFmpeg und habe schon ein paar Projekte

511
01:02:19,700 --> 01:02:22,700
verwendet. Ich gucke, ich mache mir da meistens auf dem zweiten Bildschirm eins auf, dass

512
01:02:22,700 --> 01:02:29,780
man ein bisschen abgucken kann, weil FFmpeg ist in der Handhabung ein bisschen G-Bait-lastig.

513
01:02:29,780 --> 01:02:40,860
Und ich zeige euch jetzt mal was, was ein mega G-Bait bei FFmpeg ist. Wo ich mal echt

514
01:02:40,860 --> 01:02:49,500
fast einen Tag lang danach gesucht habe. So, und zwar es gibt FFmpeg, Free Packet, ja

515
01:02:49,500 --> 01:02:55,500
mittlerweile ist es Obsolete Deprecated, ja ja, mittlerweile ist es das. Es gibt FFmpeg,

516
01:02:55,500 --> 01:03:16,740
Free Packet und es gibt FFmpeg, Packet Free. Und das ist mega scheiße, das ist ultra scheiße.

517
01:03:16,740 --> 01:03:27,980
Und die machen auch noch im Prinzip das gleiche. Der eine nimmt einen Pointer zu einem Pointer.

518
01:03:27,980 --> 01:03:32,020
Übrigens, Chat, was mein, ok ich habe es eben schon gespoilert, aber was meint ihr,

519
01:03:32,020 --> 01:03:35,980
welches davon das richtige ist? Man hat ja so, wenn man sich so anguckt, eigentlich gar

520
01:03:35,980 --> 01:03:39,260
keine Ahnung, oder? Chat, was meint ihr, was ist die richtige Funktion, die man eigentlich

521
01:03:39,260 --> 01:03:45,700
verwenden will? Free Packet oder Packet Free? Ich habe es eben schon gezeigt, was Deprecated

522
01:03:45,700 --> 01:03:53,740
ist, aber trotzdem. Ja, das zweite ist richtig. Das ist das, was man nehmen soll, das soll

523
01:03:53,740 --> 01:03:57,940
man nicht mehr nehmen. Und als Unwrap, also Fail, da habe ich mal wirklich einen Tag danach

524
01:03:57,940 --> 01:04:00,500
gesucht, weil es irgendwie überhaupt nicht funktioniert hat. Deswegen brauche ich immer

525
01:04:00,500 --> 01:04:05,900
was zum abgucken, denn FFmpeg ist schon ein bisschen Chebatelastig an manchen Stellen.

526
01:04:05,900 --> 01:04:18,780
So, also was ich mir überlegt habe, ist folgendes. Ich habe euch jetzt einmal so grob gezeigt,

527
01:04:18,780 --> 01:04:23,860
was das intern macht, und ich denke mal, man kann das halbwegs nachvollziehen. Wenn nicht,

528
01:04:23,860 --> 01:04:30,020
wie gesagt, der Sourcecode ist ja hier am Start. Oh, Exquisite-Sternchen. Kann man sich auch

529
01:04:30,020 --> 01:04:34,420
mal angucken. Also ich finde, es ist relativ ordentlich programmiert. Es hat zwar kaum

530
01:04:34,420 --> 01:04:38,780
Comments, aber ihr wisst ja, wer braucht Kommentare, wenn er ordentlich den Sourcecode schreibt.

531
01:04:38,780 --> 01:04:50,780
Kommentar ist eh total überbewertet. Ist der Namespace echt? Wo habe ich mich vertippt?

532
01:04:50,780 --> 01:05:12,780
Das ist Absicht. Natürlich ist Monarch-S. Geht mal Monarch-S ein im Chat. Das ist Absicht.

533
01:05:12,780 --> 01:05:22,580
Conker-S ist ja der, und Monarch-S ist der. Das ist Absicht. Eigentlich eine ziemlich

534
01:05:22,580 --> 01:05:29,140
bescheuerte Name für ein Projekt, weil niemand wird, wenn es um Webcams oder Streams geht,

535
01:05:29,140 --> 01:05:36,900
nach Monarch-S suchen, Alter. So, also was ich mir überlegt habe, ist folgendes. Wir

536
01:05:36,900 --> 01:05:45,540
können jetzt hier irgendwie so keine New Object Detector oder sowas machen. Ich kann nicht

537
01:05:45,540 --> 01:05:50,340
mal schreiben. Also wir machen irgendwie New Object Detector. Ich überlege jetzt nur mal,

538
01:05:50,340 --> 01:05:55,020
wie wir es machen. Also wir bauen eine Klasse, die für uns, also die nicht wirklich Object

539
01:05:55,020 --> 01:06:01,660
Erkennung macht, sondern die diesen Object Detection Service verwendet. So, das Ding

540
01:06:01,660 --> 01:06:12,260
schmeißt dann irgendwie ein Event. Das Ding schmeißt dann ein Event. Irgendwie sowas

541
01:06:12,260 --> 01:06:23,820
wie Detected. Und da subscribe ich mich dann dran und schicke es zurück zum Client. Soweit

542
01:06:23,820 --> 01:06:36,060
die Idee. Ergebnisse. Kann ich schreiben. Ergebnisse. Doch, passt. Aber ihr wisst was

543
01:06:36,060 --> 01:06:41,420
ich meine. So habe ich mir das gedacht. Also, probieren wir das mal aus. So, ein bisschen

544
01:06:41,420 --> 01:06:59,220
FFmpeg Zeug muss ich mir abgucken. Weil aus dem Kopf, wie gesagt, klappt das nicht. Also,

545
01:06:59,220 --> 01:07:07,740
ich will sowas hier in der Richtung machen. Also auf jeden Fall wird das was, was Ressourcen

546
01:07:07,740 --> 01:07:19,860
aufräumen muss. Event, Task, Assync, Await. Was? Choose my name. What? Das sind jetzt

547
01:07:19,860 --> 01:07:24,260
so paar Stichwörter, die sich den Zusammenhang bei mir im Gehirn gerade nicht ergibt, was

548
01:07:24,260 --> 01:07:37,580
du wissen willst. Hand auf Tief. Moin. Also, ich brauche hier sowas wie War. Nennen wir

549
01:07:37,580 --> 01:07:47,460
es mal irgendwie Object Detector. Brauchen da noch ein ordentlicher Namen für. Object

550
01:07:47,460 --> 01:07:53,260
Detector. So, irgendwie sowas. So. Und das wird auf jeden Fall, muss das seine Ressourcen

551
01:07:53,260 --> 01:07:59,340
wieder aufräumen, weil da wird FFmpeg drin gemacht. FFmpeg ist unsafe, Pointergeschiss

552
01:07:59,340 --> 01:08:05,180
und das geht auf jeden Fall in die Hose, ohne dass ich das aufräume am Ende. Wir brauchen

553
01:08:05,180 --> 01:08:08,740
natürlich auch die Object Detector Manager Factory, sonst geht es natürlich nicht.

554
01:08:08,740 --> 01:08:13,500
Das ist klar, wir müssen jetzt ja wie machen, wie die Großen in Java müssen wir das machen.

555
01:08:13,500 --> 01:08:18,020
Okay, also wir implementieren jetzt erstmal diese Object Detector Class. Das machen wir

556
01:08:18,020 --> 01:08:23,380
hier drin. Normalerweise sagt man immer ein Pfeil pro Klasse, aber mal draufgeschissen.

557
01:08:23,380 --> 01:08:34,940
So, Class, Object Detector, Public. Was machst du da? Ist das hier weg? Public, da, Object

558
01:08:34,940 --> 01:08:40,700
Detector. So, also was will Choose My Name wissen? Event oder, nee, kannst du das ja

559
01:08:40,700 --> 01:08:48,660
entweder mit Events machen oder Task Objekte erzeugen und evaden. Das ist ein bisschen

560
01:08:48,660 --> 01:08:54,620
unterschiedlich, würde ich sagen. Also Events, also man kann natürlich letztendlich alles

561
01:08:54,620 --> 01:09:01,940
für alles verwenden, aber ich würde sagen, es gibt nur zwei grundsätzlich unterschiedliche,

562
01:09:01,940 --> 01:09:07,540
nennen wir es mal, Sorten von Events. Also es gibt einmal die klassische Eventgeschichte

563
01:09:07,540 --> 01:09:15,780
in.NET. Das ist ja quasi ein Push. Also du subscribes dich und zu dir pusht dann einer

564
01:09:15,780 --> 01:09:21,860
irgendwie das Event. So, und dann gibt es quasi noch die umgedrehte Sache. Du kannst

565
01:09:21,860 --> 01:09:31,140
das Ganze pullen. Also quasi es hängt, bis es was gibt und du pullst quasi das Event

566
01:09:31,140 --> 01:09:43,620
raus aus dem Objekt. Also quasi das hier, äh, das hier ist quasi ein Pull. Ah, der

567
01:09:43,620 --> 01:09:50,060
liest quasi, der zieht sich aus dem Channel quasi die Events raus. Und das hier unten

568
01:09:50,060 --> 01:09:59,860
ist quasi ein Push oder das hier ist ein Push Event, weil jemand, der sich dahin subscribt

569
01:09:59,860 --> 01:10:04,660
hat, er kriegt ja das Event zu sich hingeschoben. So, und deswegen würde ich sagen, es ist

570
01:10:04,660 --> 01:10:13,820
ziemlich situationsabhängig, was man nimmt. Das schöne an Events ist, dass du mehrere

571
01:10:13,820 --> 01:10:20,340
Sachen damit abfackeln kannst. Also du kannst, wenn du ein Event wirfst, können das beliebig

572
01:10:20,340 --> 01:10:27,420
viele Leute empfangen. Aber, und da muss man aufpassen, der Eventhändler läuft immer

573
01:10:27,420 --> 01:10:35,740
im Thread des Objekts oder dessen, der das Event auslöst. Also sprich, es hat überhaupt

574
01:10:35,740 --> 01:10:43,860
keinen Sinn, wenn ich hier unten dieses Event werfe, Next Frame, und dann in einem Eventhändler

575
01:10:43,860 --> 01:10:48,540
was mache, was zwei Sekunden dauert. Das, was passieren wird, ist, das plockt zwei Sekunden

576
01:10:48,540 --> 01:10:55,100
an der Stelle, weil der Eventhändler immer im Thread vom Aufrufer läuft. Ich hoffe,

577
01:10:55,100 --> 01:11:00,860
man kann mir irgendwie halbwegs folgen, was ich da erzähle. Das heißt, du musst dann

578
01:11:00,860 --> 01:11:08,140
in dem Eventhändler einen neuen Task machen, sonst plockst du das. Also Events sind absolut

579
01:11:08,140 --> 01:11:26,300
Null Multithreaded. Wo bin ich jetzt übrigens gerade stehen geblieben? Ok, Object Detector.

580
01:11:26,300 --> 01:11:32,020
Task Run Event Evoke, das kannst du auch machen, dann hast du aber das nächste Problem. Du

581
01:11:32,020 --> 01:11:34,780
kannst dir nicht mehr sicher sein, dass die Events in der richtigen Reihenfolge kommen.

582
01:11:34,780 --> 01:11:40,220
Multithreading ist ganz schön scheißgebiet, es ist wirklich sacked, mega. Du musst an

583
01:11:40,220 --> 01:11:45,260
so viele Sachen denken. Wenn du Task Run Event Evoke machst, dann kannst du dir nicht mehr

584
01:11:45,260 --> 01:11:54,260
sicher sein, dass es in der richtigen Reihenfolge passiert. Also dass sie das in der richtigen

585
01:11:54,260 --> 01:12:00,380
Reihenfolge empfangen. Das ist, also Multithreading ist richtig kacke an vielen Stellen. So,

586
01:12:00,380 --> 01:12:22,900
Public Glass Object Detector. Äh, warum? Warum äh? WTF? Hä? Hallo? Achso, ich bin

587
01:12:22,900 --> 01:12:32,060
ja kacke du. Ich habe ja gesagt, dass es disposable ist. Das ist auch ein wirklich

588
01:12:32,060 --> 01:12:38,660
Big, jetzt will Ryder zu clever sein. Das ist auch ein ziemlich Big Brain C Sharp Feature

589
01:12:38,660 --> 01:12:43,460
und zwar, das ist jetzt auch neu seit C Sharp 7 oder so. Man kann jetzt, wenn man Variablen

590
01:12:43,460 --> 01:12:47,820
anlegt, man kann Variablen nicht nur so anlegen, sondern man kann jetzt noch Using davor

591
01:12:47,820 --> 01:12:55,260
schreiben. Was das macht ist, sobald das hier außer aus dem Scope geht und das Scope ist

592
01:12:55,260 --> 01:13:00,900
das hier, Klammer auf Klammer zu. Also sprich, sobald das Objekt hier aus dem Scope raus

593
01:13:00,900 --> 01:13:07,500
geht, wird automatisch die Aufräum Methode aufgerufen. Das ist eigentlich ziemlich cooles

594
01:13:07,500 --> 01:13:12,900
Feature, was die jetzt eingebaut haben. Das Feature an sich gibt es schon ewig, aber

595
01:13:12,900 --> 01:13:19,500
dass man das so schreiben kann. Früher musste man das so schreiben. Früher musste man das

596
01:13:19,500 --> 01:13:23,940
so schreiben und dann hatte man übelst viel Eindrückungstiefe und so und man musste,

597
01:13:23,940 --> 01:13:28,900
wenn man da schachteln will, wenn man da schachteln will, musste man das dann so machen. Das war

598
01:13:28,900 --> 01:13:41,500
mega hängen geblieben. Also man kann in C Sharp die Sachen auf zwei Arten aufräumen,

599
01:13:41,500 --> 01:13:48,940
wenn man Müll verursacht im Speicher. Man kann das auf zwei Arten aufräumen. Allerdings

600
01:13:48,940 --> 01:13:56,020
man braucht beide Arten, wenn man es richtig machen will. Es gibt einmal diese Sache mit

601
01:13:56,020 --> 01:14:01,260
Using und Disposable, also sprich das hier. Das heißt, wenn dieses Objekt hier aus dem

602
01:14:01,260 --> 01:14:09,420
Scope geht, wird das hier aufgerufen. Hier mache ich dann hier Cleanup. Das ist quasi

603
01:14:09,420 --> 01:14:15,580
die manuelle Variante. Das ist gut für unmanaged Ressourcen. Also wenn ich hier FFmpeg-Pointergeschiss

604
01:14:15,580 --> 01:14:20,460
anlege, ist das hier eigentlich gut. Und dann gibt es noch die Destructor-Variante. Das

605
01:14:20,460 --> 01:14:29,060
ist quasi die Garbage-Collected-Variante. Das hier, sobald alle Referenzen auf dieses

606
01:14:29,060 --> 01:14:33,740
Objekt weg sind, ruft C Sharp irgendwann und die Betonung ist auf irgendwann, weil das

607
01:14:33,740 --> 01:14:40,700
ist nicht garantiert wann, ruft der Garbage-Collector irgendwann meinen Destructor auf. Da kann

608
01:14:40,700 --> 01:14:46,460
ich auch drin aufräumen. Aber ehrlich gesagt, wenn man unmanaged Ressourcen hat und im Zweifelsfall

609
01:14:46,460 --> 01:14:52,700
auch schnell unmanaged Ressourcen anlegt, ist die Variante schöner, weil hier kannst

610
01:14:52,700 --> 01:14:56,940
du dir sicher sein, dass die Ressourcen hier freigegeben werden, direkt nachdem du sie

611
01:14:56,940 --> 01:15:00,340
nicht mehr brauchst. Und je nachdem, was du unmanaged machst, willst du, dass muss das

612
01:15:00,340 --> 01:15:03,660
vielleicht sogar so sein. Du kannst nicht darauf warten, dass irgendwie zehn Sekunden später

613
01:15:03,660 --> 01:15:10,540
hier mal ein Destructor aufgerufen wird. Also das hier ist die Managed-Variante, wo

614
01:15:10,540 --> 01:15:15,780
C Sharp quasi das komplett für dich selbst, für dich handelt. C Sharp guckt, okay, ist

615
01:15:15,780 --> 01:15:19,860
dieses Objekt irgendwie noch erreichbar, wenn nein, Destructor aufrufen. Dispose ist quasi

616
01:15:19,860 --> 01:15:26,340
so die manuelle Variante für unmanaged Ressourcen, die man selbst aufrufen muss. Die andere Variante

617
01:15:26,340 --> 01:15:38,660
wäre übrigens das hier. Das wäre die andere Variante und so ganz stimmt das auch nicht,

618
01:15:38,660 --> 01:15:46,780
denn in Wirklichkeit ist es nicht das, sondern, also was dieses Using macht, ist folgendes,

619
01:15:46,780 --> 01:15:51,060
das macht nicht nur einfach die Dispose, da macht er auch einen Try-Catch-Final-Lied

620
01:15:51,060 --> 01:16:01,100
drum, sodass das immer aufgerufen wird. Also du kannst dich darauf verlassen, wenn du dein

621
01:16:01,100 --> 01:16:08,820
Objekt mit Using anlegst davor und du hast in deinem Objekt Dispose-Methode, du kannst

622
01:16:08,820 --> 01:16:16,740
dich darauf verlassen, selbst wenn das crasht, also selbst wenn das hier crasht, dann wird

623
01:16:16,740 --> 01:16:23,500
immer noch der Clean-Up-Code aufgerufen. Also sprich, das ist wirklich Big Brain durchdacht,

624
01:16:23,500 --> 01:16:30,180
was die C Sharp Leute da gemacht haben. Also ist schon wirklich nice. Deswegen kotz ich

625
01:16:30,180 --> 01:16:35,940
auch immer rum, wenn ich was in C++ machen will, weil in C Sharp ist vieles so leicht

626
01:16:35,940 --> 01:16:42,540
und in sich durchdacht. Und das heißt halt in C++ absolut gar nicht. C++ ist einfach

627
01:16:42,540 --> 01:16:46,740
ein weherer Haufen von Leuten machen wehre Sachen und schreiben einen noch wehren Standard

628
01:16:46,740 --> 01:16:52,300
drum herum und dann kommen dann irgendwelche C++ Sachen bei rum. So, also ich muss jetzt

629
01:16:52,300 --> 01:16:57,060
mal ein bisschen was machen, wir haben ja noch gar nichts. Wir haben ja noch wirklich nichts

630
01:16:57,060 --> 01:17:04,540
gemacht. Also, okay, also das war jetzt ziemlich klasse. Disposable haben wir. So, also, lasst

631
01:17:04,540 --> 01:17:13,060
mal überlegen, was, was brauchen wir? Was brauchen wir? Also wir haben, wir haben Dispose,

632
01:17:13,060 --> 01:17:33,500
wir brauchen eine Public, irgendwas Public, Public Detect. So, wir brauchen eine Methode

633
01:17:33,500 --> 01:17:41,140
für, die wir aufrufen für Object Erkennung. So, das machen wir hier. Object Detector,

634
01:17:41,140 --> 01:17:55,980
Object Detector Detect. Und der kriegt, ach Moment, ja fast, fast. Kamerastream on Keyframe,

635
01:17:55,980 --> 01:18:01,700
also sprich immer wenn es einen neuen Keyframe gibt, dann soll er sich subscriben zu dem

636
01:18:01,700 --> 01:18:06,900
Event und soll das hier aufrufen. So, also was das hier macht ist, jedes Mal, wenn es

637
01:18:06,900 --> 01:18:15,820
ein Keyframe von der Kamera gibt, dann ruft er das hier auf. Warum keine Cancellation

638
01:18:15,820 --> 01:18:20,740
Talks? Hat keinen tieferen Sinn. Also jetzt nicht so, dass ich gesagt habe, nee an der

639
01:18:20,740 --> 01:18:25,660
Stelle keine Cancellation Talks. Ähm, an der Stelle habe ich es hier, hier habe ich

640
01:18:25,660 --> 01:18:39,780
es einmal manuell gemacht. Ah, hier, Reset, Break Cancel, genau. Hier mache ich es mit

641
01:18:39,780 --> 01:18:44,740
einer Variable, die die Schleife am Ende abbricht. Ja, man könnte das auch alles mit Cancellation

642
01:18:44,740 --> 01:18:49,820
Talks machen, das ist richtig. Ich meine, wir können hier auch Cancellation Talks übergeben,

643
01:18:49,820 --> 01:18:55,860
aber ich gehe mal davon aus, es hängt nicht so lang und dann hängt es halt mal eine Sekunde

644
01:18:55,860 --> 01:18:58,980
oder so. Das probieren wir mal aus. Müssen wir es mal rantasten. Ich weiß ja noch gar

645
01:18:58,980 --> 01:19:03,340
nicht, wie das am Ende aussieht. Also das hier wird aufgerufen. Was hat er übrigens

646
01:19:03,340 --> 01:19:07,940
für Schmerzen mit Static? Nein, bestimmt nicht. So, also hier kommt jetzt das Ganze

647
01:19:07,940 --> 01:19:15,100
rein und hier bekommt er das Bild, hier bekommt er quasi das encodete, also noch das komprimierte

648
01:19:15,100 --> 01:19:23,220
Bild von der Kamera. Den komprimierten Keyframe von der Kamera kriegt er hier jetzt. So, ähm,

649
01:19:23,220 --> 01:19:27,380
so, was wir jetzt machen ist, wir machen das jetzt ähnlich wie hier, wo ich das alles

650
01:19:27,380 --> 01:19:32,620
in so einen Channel reinschreibe. Wir machen uns einen Buffer. Einen Buffer für Kamerabilder.

651
01:19:32,620 --> 01:19:45,620
Also, keine Ahnung, was machen wir? Private Channel für ein Kamerabild. Also dieses AVPacket

652
01:19:45,620 --> 01:19:51,260
Handle ist quasi ein Bild von der Kamera, steckt da drinne. Guckt, ich zeig's euch mal.

653
01:19:51,260 --> 01:19:59,460
Es gibt das Byte Array, das sind wirklich das komprimierte Kamerabild, wie lang das

654
01:19:59,460 --> 01:20:04,500
Segment ist und Höhe, Breite. Das ist was, was ich drumherum gebastelt habe, dass der

655
01:20:04,500 --> 01:20:11,620
Speicher automatisch aufgeräumt wird. Weil ansonsten müsste ich überall dieses Packet

656
01:20:11,620 --> 01:20:17,420
unref machen, freeen und sonst was und das macht er hier für mich, deswegen hab ich

657
01:20:17,420 --> 01:20:29,540
das mal so gerappt. So, also, wir machen einen Buffer. Oder nennen es wir irgendwie, images

658
01:20:29,540 --> 01:20:43,820
oder so. Images. Gleich. Create. Und was machen wir da rein? Wie viel passen da auch rein?

659
01:20:43,820 --> 01:20:51,820
5? Nee, eigentlich einer. Einer reicht. Ist genug. Weil danach ist es eh zu spät. Juckt

660
01:20:51,820 --> 01:20:56,500
eigentlich nicht. Maximal einer. Reicht. Weil was interessiert mich, ob ich motion

661
01:20:56,500 --> 01:21:03,700
... Also mal angenommen, ich produziere so viele Bilder, dass meine Motion Detection

662
01:21:03,700 --> 01:21:07,620
beziehungsweise Object Detection nicht hinterherkommt. Dann hat's auch gar keinen Sinn, wenn ich

663
01:21:07,620 --> 01:21:13,420
da noch ältere Bilder drin hab, weil dann seh ich dann ne Motionerkennung von vor 5

664
01:21:13,420 --> 01:21:16,460
Sekunden, die keinen mehr interessiert. Da ist ja der Typ schon längst durchs Bild gelaufen.

665
01:21:16,460 --> 01:21:21,660
Also entweder das aktuelle Bild oder gar kein Bild. So. Also, das heißt, das einzige,

666
01:21:21,660 --> 01:21:28,460
was wir hier in dieser Detect Methode machen, ist Images, äh, was nicht? Triad? Ah nee,

667
01:21:28,460 --> 01:21:36,860
Writer, Triad. Nee, Tri-Write ist es. Tri-Write. Dann ist Packet. So. Also sprich, jedes neue

668
01:21:36,860 --> 01:21:47,940
Bild von der Kamera... Hallo? Hotel? Wo ist es? Ja. Jedes neue Bild von der Kamera wird

669
01:21:47,940 --> 01:21:56,620
hier reingesteckt. Copper Pride. Dann wird's in diese Warteschlange geschrieben, die ich

670
01:21:56,620 --> 01:22:01,660
dann in der Schleife auslese. So. Was wir jetzt noch machen müssen, ist, das Bild von

671
01:22:01,660 --> 01:22:10,300
der Kamera ist ja komprimiert. Äh, Geed95 ungefähr. Es macht noch ein bisschen mehr.

672
01:22:10,300 --> 01:22:15,700
Guck, ich kann's dir zeigen hier. AVPacketHandle macht folgendes. Ähm, setzt am Anfang erstmal

673
01:22:15,700 --> 01:22:23,140
hier diese ganzen Felder. Breite, Höhe. Äh, einmal kopiert das das Ganze in ein Managed

674
01:22:23,140 --> 01:22:29,220
Array. Byte Array für die ganzen Daten. Setzt die Duration. Und ansonsten, mehr macht das

675
01:22:29,220 --> 01:22:37,740
nicht. Wenn's out of Scope geht, wird das Ganze freed. Also, das war's. Mehr macht's

676
01:22:37,740 --> 01:22:43,620
nicht. Ja, und falls ich mal ein bisschen ekliche Sachen machen will, dann auch das hier. Ja,

677
01:22:43,620 --> 01:22:53,660
und ich hab noch was gebastelt, dass man, ähm... Empty? Wo hab ich's? Äh, dass man

678
01:22:53,660 --> 01:22:58,100
das hier folgendermaßen aufrufen kann auf AVPacketHandle. Empty. Falls man mal ein leeres

679
01:22:58,100 --> 01:23:02,420
Package hat und man möchte keinen Nullpointer verwenden auf irgendwas, was es nicht gibt,

680
01:23:02,420 --> 01:23:06,420
dann kann man das verwenden. Weil, es kann ja mal sein, dass man eine Methode hat, die

681
01:23:06,420 --> 01:23:10,420
den Package zurückgibt und das hat dann einen Fehler und man möchte jetzt keine Exception

682
01:23:10,420 --> 01:23:15,060
schmeißen, sondern einfach ein leeres Bild zurückgeben oder so. Ja. So, also wir schreiben

683
01:23:15,060 --> 01:23:23,300
das jetzt hier rein. Gut. Jetzt ist ja das Bild immer noch komprimiert. Was heißt, wir

684
01:23:23,300 --> 01:23:32,500
müssen jetzt sowas hier machen wie private, uns, das ist auf jeden Fall unsave, ähm... Und

685
01:23:32,500 --> 01:23:40,180
das gibt jetzt tatsächlich ein neues Package zurück und das decoded. Decode. Decode and

686
01:23:40,180 --> 01:23:46,140
resize. Wir müssen ja das Bild, was wir kriegen von der Kamera, also das ist ja ein komprimiertes

687
01:23:46,140 --> 01:23:56,380
H.264 Bild aus einem komprimierten H.264 Stream. Das müssen wir quasi dekomprimieren

688
01:23:56,380 --> 01:24:01,820
oder decoden und wenn wir es decoded haben, dann noch resizen. Das ist ja in dem Fall

689
01:24:01,820 --> 01:24:11,900
ist es ein 1.920 x 1.080 komprimiertes Bild und das müssen wir decoden und anschließend

690
01:24:11,900 --> 01:24:19,420
verkleinern und dann noch als, keine Ahnung, als JPEG encoden oder so, also irgendwas encoden,

691
01:24:19,420 --> 01:24:29,420
was dieser, was dieser Object Detection-Dings frisst. Was frisst denn das? Was frisst das

692
01:24:29,420 --> 01:24:38,860
denn für Bilder? JPEG? Ja, also. It can read Bitmaps, PNG, JPEG und PPM. Was ist denn,

693
01:24:38,860 --> 01:24:45,540
was PPM habe ich? Das ist irgendein Bitmap Format, PPM. Ja, wir machen es, wir encoden

694
01:24:45,540 --> 01:24:57,820
es als JPEG. Als JPEG. Also wir brauchen sowas, decode and resize und jetzt müssen wir FFmpeg

695
01:24:57,820 --> 01:25:04,740
Magic machen und das copy und paste ich mir ein bisschen rüber aus einem anderen Projekt.

696
01:25:04,740 --> 01:25:12,140
So, jetzt muss ich mal kurz, jetzt muss ich mal kurz in mich gehen. So, also das hier

697
01:25:12,140 --> 01:25:20,940
kann ich mir schon mal rübercopy pasten. Memory Leaks incoming. Oh ja, wahrscheinlich

698
01:25:20,940 --> 01:25:39,780
werden wir irgendwelche Memory Leaks produzieren. Garantiert. So. Ah, ich muss die Decoder erst

699
01:25:39,780 --> 01:25:45,140
noch anlegen, weil ich habe ja gesagt, das ist ja noch encoded, das heißt, ich muss

700
01:25:45,140 --> 01:25:51,220
es erst noch decoden. Hast du eine Empfehlung für einen bezahlbaren 10 Gigabit Switch? Ja,

701
01:25:51,220 --> 01:25:56,940
Microtech. Beste. Okay, dann machen wir jetzt mal Big, Big, Big Brain Logik und zwar wir

702
01:25:56,940 --> 01:26:09,060
nehmen mal sowas hier. Private bool initialized. Hab ich das jetzt richtig geschrieben? Initialized.

703
01:26:09,060 --> 01:26:19,220
Hey, ich hab zwar erst mal richtig geschrieben. Here, false. Dann gucken wir hier in der Object

704
01:26:19,220 --> 01:26:34,380
Detection drinnen. Ob das schon. Nee, das waren wir hier. Genau, hier gucken wir. If,

705
01:26:34,380 --> 01:26:43,380
wenn das noch nicht initialized ist, dann machen wir Init und dann machen wir initialized is

706
01:26:43,380 --> 01:26:49,260
true. Der Sinn ist dahinter, weil, ihr werdet es jetzt gleich sehen, um FFmpeg Sachen anlegen

707
01:26:49,260 --> 01:26:57,620
zu können. Ich kopiere mir das jetzt gerade mal raus. Um in FFmpeg Decoder und sowas angeben

708
01:26:57,620 --> 01:27:02,060
zu können, braucht man die Größe von dem Bild. Und die Größe von dem Bild habe ich

709
01:27:02,060 --> 01:27:06,740
ja beim ersten Aufruf von hier erst. Das heißt, beim ersten Aufruf mit einem Package

710
01:27:06,740 --> 01:27:10,220
werde ich die ganzen Decoder anlegen. Und damit ich das nicht jedes Mal mache, habe

711
01:27:10,220 --> 01:27:15,860
ich hier dieses Flag, was dafür sorgt, dass ich nicht crashe, weil wenn ich die oder Memory

712
01:27:15,860 --> 01:27:19,740
leake, wenn ich jedes Mal die Decoder und Encoder neu anlegen würde. So, also sagen

713
01:27:19,740 --> 01:27:27,980
wir hier Private noch mal unsave. Nennen wir irgendwie sowas. Init, Decoder, Encoder. Das

714
01:27:27,980 --> 01:27:34,620
braucht auch das Packet. So, und jetzt kommt Big Brain FFmpeg Matchup. Was habe ich verkehrt

715
01:27:34,620 --> 01:27:48,820
gemacht? Achso, unsave, void. 1, 3, 3, 7. Ja, ja. Da hast du recht. Ist besser, wenn man

716
01:27:48,820 --> 01:27:57,940
es hier reinschreibt. Was genau heißt bzw. 8 unsave, wenn du Libraries verwendest, die

717
01:27:57,940 --> 01:28:04,060
C-Funktionen aufrufen und dort irgendwelche Pointer hin und zurück geschickt werden,

718
01:28:04,060 --> 01:28:08,420
so wie zum Beispiel hier bei FFmpeg, dann erlaubt das die Sharp normalerweise nicht.

719
01:28:08,420 --> 01:28:12,340
Dann musst du sagen, das ist unsave. Weil alles, was irgendwie Raw-Pointer und so verwendet,

720
01:28:12,340 --> 01:28:18,580
ist unsave. Heißt, jedes Mal, wenn du mit irgendwelchen C-Libraries interagierst, wirst

721
01:28:18,580 --> 01:28:23,180
du früher oder später unsave verwenden. Unsave kann man auf drei verschiedene Arten verwenden.

722
01:28:23,180 --> 01:28:31,100
Du kannst wieder an der Methode dran, an der kompletten Klasse dran oder als unsave block

723
01:28:31,100 --> 01:28:36,380
innerhalb einer safe Methode. Ach ja, und by the way, eine ganz wichtige Geschichte.

724
01:28:36,380 --> 01:28:41,100
Wenn man unsave verwendet, kann man kein async await verwenden in der gleichen Methode. Also

725
01:28:41,100 --> 01:28:48,860
sobald ich hier sage, das ist unsave, ich kann nicht unsave async sagen und dann irgendwie

726
01:28:48,860 --> 01:28:54,860
sagen await task completed. Das geht nicht. Sobald ich das versuche, sagt er mir, hier

727
01:28:54,860 --> 01:29:04,660
guck mal, cannot await in unsave-Kontext. Das ist ASP.NET Core richtig, ja. So, ich muss

728
01:29:04,660 --> 01:29:07,020
jetzt mal ein bisschen zu Potter kommen, das wird ja heute mal wieder gar nichts. Ich habe

729
01:29:07,020 --> 01:29:12,300
drei Zeilen, drei Zeilen geschrieben bisher. Okay, unsave. Also, wir initialisieren jetzt

730
01:29:12,300 --> 01:29:20,180
unsere Decoders. Okay, dann, ich copy-paste mir mal rüber. Zack, copy-paste, das da. Bäm.

731
01:29:20,180 --> 01:29:28,660
Das ist FFmpeg Magic, ich suche mir Decoder für H.264. 99% der Cameras streams in H.264,

732
01:29:28,660 --> 01:29:34,460
das ist das einzige, was wir supporten. Und Encoder, das ist der Encoder für JPEG. Als

733
01:29:34,460 --> 01:29:38,560
Frontend, ne, das Frontend ist noch relativ übersichtlich. Also, das Frontend besteht

734
01:29:38,560 --> 01:29:45,380
im Prinzip nur aus ein paar Videoplayer für die Kamerabilder. Das ist zwar jetzt mit

735
01:29:45,380 --> 01:29:49,060
Vue.js gemacht, aber das ist noch so simpel, das kannst du mit jedem x-beliebigen anderen

736
01:29:49,060 --> 01:30:01,060
auch machen. Also, ich benutze Vue.js hier als Frontend-Framework und SignalR als Messaging,

737
01:30:01,060 --> 01:30:09,140
wie nennt man das? Messaging-System. Weil, zum Beispiel, wenn man was erkannt hat, das

738
01:30:09,140 --> 01:30:12,220
werden wir auch gleich sehen. Also, im Angenommen, ich hab jetzt ein Objekt erkannt auf einem

739
01:30:12,220 --> 01:30:15,900
Bild, dann muss ich halt dem Frontend Bescheid sagen, hallo, ich hab ein Bild erkannt, dass

740
01:30:15,900 --> 01:30:21,660
das Frontend dann quasi so einen Viereck malen kann hier drauf, wo er was erkennt hat.

741
01:30:21,660 --> 01:30:29,860
Das machen wir jetzt alles. Also, Decoder-Encoder, also wir suchen H.264-Encoder raus. So, dann

742
01:30:29,860 --> 01:30:36,860
brauchen wir einen, hab ich wieder BigBrain benannt, einen Resizer. Also, der Resizer

743
01:30:36,860 --> 01:30:44,100
macht das, was man sich anhand des Namens denkt, er resized. Wer hätte sich das nur

744
01:30:44,100 --> 01:30:48,460
denken können? Das ist auch FFmpeg-Magic, das müssen wir uns jetzt gar nicht so sehr

745
01:30:48,460 --> 01:30:54,780
im Detail angucken. Der nimmt sich ein Paket und resized das auf kleinere Größe. Zumindest

746
01:30:54,780 --> 01:31:01,540
brauchen wir das, weil, ihr habt's ja gesehen, das hier frisst am liebsten Bilder in der

747
01:31:01,540 --> 01:31:09,060
Größe 300x300. Und 300x300 ist halt so ein bisschen kleiner als 1920x1080. Das heißt,

748
01:31:09,060 --> 01:31:18,300
ich muss das resizen. Also, sagen wir jetzt hier irgendwie New, Frame, Resizer. So, also,

749
01:31:18,300 --> 01:31:29,300
was brauchen wir? Source ist Paket, ah, Moment, Moment, Moment, Size. Genau, ist Paket Breite

750
01:31:29,300 --> 01:31:38,420
und Paket Höhe. Dann brauchen wir Source Destination. Source Destination ist einfach, 300x300. Wir

751
01:31:38,420 --> 01:31:44,620
wollen das resizen auf 300x300, weil diese Object Detection, diese Object Detection API

752
01:31:44,620 --> 01:31:51,500
am liebsten 300x300 große Bilder frisst. Dann brauchen wir, was kommt als nächstes? Pixel

753
01:31:51,500 --> 01:31:58,020
Format. Das Pixel Format ist übelst kryptisch, wenn man sich noch nicht mit Videos beschäftigt

754
01:31:58,020 --> 01:32:04,940
hat. Natürlich Hardcoded. Das ist ja Hardcoded in dem Object Detection drin. Die wollen 300x300

755
01:32:04,940 --> 01:32:12,500
Bilder haben. Die Input, der Input ist dynamisch, je nachdem wie groß das Package ist. So,

756
01:32:12,500 --> 01:32:17,540
Pixel Format. Das Pixel Format Hardcoded wir, weil wir unterstützen nur H264 Webcam Streams

757
01:32:17,540 --> 01:32:27,700
und die sind immer H264 und quasi immer dieses Pixel, also dieses Farbpixel Format. Das hat

758
01:32:27,700 --> 01:32:34,060
übrigens auch den großen Vorteil, dass wir das direkt zu einem JPEG umwandeln können,

759
01:32:34,060 --> 01:32:40,060
weil JPEG intern das gleiche Pixel Format verwendet. Da müssen wir gar nichts umwursten.

760
01:32:40,060 --> 01:32:50,100
So, Keep Aspect Ratio ist false tatsächlich. Wir wollen das strecken und dehnen und machen

761
01:32:50,100 --> 01:32:59,540
und tun. Also was das macht, ist mal angenommen, ich hab nen 1920x1080 Kamerabild und ich will

762
01:32:59,540 --> 01:33:04,940
das resizing zu 300x300. Das ist ja das falsche Seitenverhältnis. Das eine ist 16 zu 9 und

763
01:33:04,940 --> 01:33:10,540
das hier ist 1 zu 1. Das heißt, was man jetzt machen kann, ist entweder beim resizing das

764
01:33:10,540 --> 01:33:16,940
jetzt ja entweder abzuschneiden oder aber es eben nicht 300x300 zu machen, sondern frag

765
01:33:16,940 --> 01:33:24,420
mich nicht, 300x120 oder irgendwie sowas. Dass das Seitenverhältnis erhalten bleibt

766
01:33:24,420 --> 01:33:28,580
oder man streckt es und das mach ich hier, also sprich das Seitenverhältnis wird dann

767
01:33:28,580 --> 01:33:37,300
anders, aber dieser Object Detector, der möchte die Bilder immer in 300x300 haben, dann funktioniert

768
01:33:37,300 --> 01:33:43,460
er am besten und dann kann ich es auch selbst resizing. Bringst hier das ein cooles Feature

769
01:33:43,460 --> 01:33:49,380
aus Rider, wenn ich jetzt sag hier, ich will diese Resizer Variable belegen und die gibt

770
01:33:49,380 --> 01:33:53,860
es nicht, deswegen ich mag Rider richtig gern mittlerweile, kann ich sagen, okay hier gibt

771
01:33:53,860 --> 01:34:02,100
es nicht, Create Field Resizer, da legt er mir automatisch hier oben was an für die ganze

772
01:34:02,100 --> 01:34:06,380
Klasse, die Variable, wo ich das dann reinschreiben kann, da muss ich nicht extra von der Hand

773
01:34:06,380 --> 01:34:11,420
hingehen und das reinschreiben. Eigentlich ziemlich nice. So, Resizer. So, dann brauchen

774
01:34:11,420 --> 01:34:15,860
wir, das kann ich jetzt wieder copypasten aus dem anderen. Im Prinzip kann ich mir eigentlich

775
01:34:15,860 --> 01:34:24,180
alles, fast alles copypasten, also wir legen uns einen Codec an für H.264-Decoder, wir

776
01:34:24,180 --> 01:34:40,980
legen uns einen, den nennen wir übrigens anders, einen JPEG-Encoder an, nicht ENC, wenn man

777
01:34:40,980 --> 01:34:48,740
es richtig macht, dann passt das auch. Also, einen Encoder für JPEG legen wir uns an, dann

778
01:34:48,740 --> 01:34:56,500
müssen wir ein paar Settings einstellen, irgendwie eine Bitrate vergeben, ups, fuck, warum hat

779
01:34:56,500 --> 01:35:03,700
das jetzt nicht kopiert, eine Bitrate vergeben, achso, da heißt es jetzt natürlich anders,

780
01:35:03,700 --> 01:35:12,660
dass das Bild nicht total verpixelt ist. So, dann brauchen wir Encoder, die Breite, die

781
01:35:12,660 --> 01:35:20,420
Breite ist nicht die Breite vom Package, weil das ist ja die Quelle, hier ist ja quasi

782
01:35:20,420 --> 01:35:31,820
jetzt nach dem Resize, das heißt wir müssen sagen Resizer, Destination, Breite und Höhe,

783
01:35:31,820 --> 01:35:38,740
also das generiert quasi ein kleines Vorschaubildchen, 300 mal 300, das nimmt, das nimmt das Bild

784
01:35:38,740 --> 01:35:45,580
von der Kamera, decodet es, verkleinert es und komprimiert es als JPEG, oder eigentlich

785
01:35:45,580 --> 01:35:49,340
muss es das gar nicht großartig komprimieren, weil das Farbformat schon stimmt, der kann

786
01:35:49,340 --> 01:35:53,220
es einfach speichern wieder als JPEG, oder ja ein bisschen, doch der komprimiert es schon,

787
01:35:53,220 --> 01:35:57,620
aber ihr wisst was ich mein. Wir könnten auch, wir könnten richtig, ey kann das Ding

788
01:35:57,620 --> 01:36:03,220
WebP oder sowas, WebP, dann nehmen wir WebP, alter, nee, WebP kann es nicht, WebP ist ja

789
01:36:03,220 --> 01:36:12,260
so der neueste Schrei gerade. So, das ist Höhe, hat jemand von euch schon mal WebP oder

790
01:36:12,260 --> 01:36:20,980
Dings, wie heißt die, wie heißt diese Alternative zu WebP, wow, wie ist das, ah ja, A, A, A,

791
01:36:20,980 --> 01:36:33,220
A5 oder so, A5, heißt das, nee WebM ist quasi WebP, nur für Videos, also WebM und WebP ist

792
01:36:33,220 --> 01:36:46,020
das gleiche, genau A5 meine ich hier, das da, Hive, was zum Teufel ist Hive, hier gucken

793
01:36:46,020 --> 01:36:55,700
wir mal, Browser, Image Format Support, Mozilla, was sagt Mozilla dazu, APNG, A5 meine ich

794
01:36:55,700 --> 01:37:02,180
hier, AV1, Image Format, genau, ja, das kann FFmpeg noch nicht, sonst würde ich das nehmen,

795
01:37:02,180 --> 01:37:09,860
naja, gut, machen wir weiter, dann muss ich das hier, die Sachen kann ich auch kopieren,

796
01:37:09,860 --> 01:37:18,500
sehr gut, exzellent, heißt jetzt hier nur anders, so und dann müssen wir das ganze starten,

797
01:37:18,500 --> 01:37:30,300
so was hier jetzt passiert ist, okay, Hive ist das Apple Format, irgendwas habe ich hier

798
01:37:30,300 --> 01:37:39,500
gerade verkackt, was macht der File, das ist das gleiche wie ein C++, das ist Pointer,

799
01:37:39,500 --> 01:37:46,980
Pointer dereference, also du machst nicht Punkt, sondern du machst Pointer, weil das

800
01:37:46,980 --> 01:37:55,180
hier ist, das hier ist unsafe, das ist ein Zeiger auf einen AV-Codec-Kontext und der

801
01:37:55,180 --> 01:38:00,660
File dereferenziert das und greift dann darauf zu, das ist das gleiche wie ein C++, normalerweise

802
01:38:00,660 --> 01:38:04,900
sieht man das in C sharp nicht, weil man in C sharp eigentlich kein unsafe Zeugs macht,

803
01:38:04,900 --> 01:38:11,140
es sei denn, man interfacet hier mit FFmpeg, übrigens hier, was habe ich hier vergessen,

804
01:38:11,140 --> 01:38:20,460
unsafe, mag er nämlich nicht, so, gut, also wunderbar, das funktioniert doch schon mal

805
01:38:20,460 --> 01:38:25,740
ganz gut, so jetzt habe ich hier meine Decoder angelegt, so und jetzt kommt das nächste,

806
01:38:25,740 --> 01:38:41,140
wir testen mal, was hat er hier für Schmerzen, warum mag er nicht, wo ist der, achso, so

807
01:38:41,140 --> 01:38:49,020
jetzt gucken wir mal, ob das ganze funktioniert und nicht gleich crasht, Stream-Uhr, ja komm

808
01:38:49,020 --> 01:38:57,700
wir legen, wir nehmen nur mein iPhone mal rein, dass das ganze schneller startet, Tobonautilus

809
01:38:57,700 --> 01:39:08,460
drei Monate, Dankeschön für den Sub, exellent, exellent, Subscription, so wir legen hier

810
01:39:08,460 --> 01:39:15,260
nur mal die Kamera an von meinem iPhone gerade und dann vertraten wir doch das ganze mal,

811
01:39:15,260 --> 01:39:22,340
dass das jetzt auch aufgerufen wird hier, also, also habe ich schon, On Keyframe, Object Detector

812
01:39:22,340 --> 01:39:33,780
Detect, alles klar, probieren wir mal aus, ob das funktioniert, Detect, gutes, altes

813
01:39:33,780 --> 01:39:47,580
Print F, Debugging, ok, ja, das funktioniert, sehr schön, gucken wir mal in Browser, da

814
01:39:47,580 --> 01:39:52,260
ist das Bild von meiner Kamera, ok, sehr gut, man sieht ja auch unten, es läuft, ne, also

815
01:39:52,260 --> 01:40:01,660
es, wow, es funktioniert, die, es ist tatsächlich Live-Kamera-Bild und danach nehmen wir gleich

816
01:40:01,660 --> 01:40:07,660
das von meinem Hoftor, ich muss das, ich muss die Warnung mit dem falschen Zeit-Stempel

817
01:40:07,660 --> 01:40:11,180
wegmachen, das geht mir auf den Keks, kriege ich Anfälle, wenn das permanent hier durch,

818
01:40:11,180 --> 01:40:17,180
durchflimmert, wo ist das hier, Wrong TS, ja, schön, schön für den Timestamp, wenn

819
01:40:17,180 --> 01:40:24,500
er falsch ist, oh, jetzt habe ich es zugemacht, ich kann't noob, exellent, so, also, der ruft,

820
01:40:24,500 --> 01:40:36,500
bei jedem Keyframe ruft er jetzt meine Object Detection Methode auf, schon mal gut, so,

821
01:40:36,500 --> 01:40:43,620
und jetzt müssen wir das irgendwie in den Decoder füttern, also, jetzt lass mal überlegen,

822
01:40:43,620 --> 01:40:56,140
das heißt, hier machen wir nix, so, Decode and Resize, wenn nicht Init, dann rufen wir

823
01:40:56,140 --> 01:41:05,700
auf, Init Encoder, alles klar, gut, dann ist das Ganze initialisiert, sehr schön, das lassen

824
01:41:05,700 --> 01:41:10,900
wir mal, und jetzt müssen wir im Hintergrund, jetzt brauchen wir einen Hintergrund-Task,

825
01:41:10,900 --> 01:41:19,100
der permanent guckt, ob es neue Bilder von der Kamera zum analysieren gibt, also, ich

826
01:41:19,100 --> 01:41:23,780
schreibe das jetzt mal so runter, mal gucken, ob das Sinn ergibt, was ich da mache, so,

827
01:41:23,780 --> 01:41:28,780
also, Private, wir nennen es mal ganz big brain, Name Loop, ich nenne immer meine Sachen

828
01:41:28,780 --> 01:41:34,060
immer Loop, manche nennen es Run, manche nennen es Do It, manche nennen es Do Work oder Work

829
01:41:34,060 --> 01:41:38,220
oder was auch immer, also sprich, hier ruf ich mal, ich dann meinen, meinen, meinen Task

830
01:41:38,220 --> 01:41:43,060
drinne, der im Hintergrund überprüft, was Sache ist, so, das machen wir auch schon mal

831
01:41:43,060 --> 01:41:50,660
Async, weil ich mal ziemlich sicher bin, dass ich das gleich brauche, so, das starten wir

832
01:41:50,660 --> 01:41:56,860
hier drin, dann sagen wir Newt, wobei machen wir, brauchen wir überhaupt einen neuen Task,

833
01:41:56,860 --> 01:42:01,180
das ist eine gute Frage, ich hab ehrlich gesagt keine Ahnung, ob wir einen neuen Task brauchen,

834
01:42:01,180 --> 01:42:03,700
wir nehmen auf jeden Fall schon mal ein neues C-Sharp-Feature, wir nehmen nicht, nehme

835
01:42:03,700 --> 01:42:16,980
ich wieder Async oder Await For Each und zwar nehmen wir hier meine, die Image, die Collection

836
01:42:16,980 --> 01:42:28,340
mit dem, mit dem, oh, also sprich, der liest jetzt unendlich lange neue Bilder ein, die

837
01:42:28,340 --> 01:42:36,700
eben hier reingeschoben, hört sich jetzt ein bisschen sehr an, aber die ihr hier reinbekommt

838
01:42:36,700 --> 01:42:48,540
in diese Message oder in diese Queue und die liest ihr unendlich lang ein und guckt ob

839
01:42:48,540 --> 01:42:55,980
es da was neues gibt, okay, also, ich bin mir jetzt nicht sicher, muss ich das jetzt

840
01:42:55,980 --> 01:43:02,140
in einem eigenen Task machen oder nicht, muss ich das im eigenen Task machen, ich hab ehrlich

841
01:43:02,140 --> 01:43:05,820
gesagt keine Ahnung, mach das für mich jetzt, zählt das schon in einem eigenen Task oder

842
01:43:05,820 --> 01:43:06,820
nicht?

843
01:43:06,820 --> 01:43:13,220
Und in welchem Task oder in welchem Thread-Context läuft das jetzt, wenn ich das jetzt einfach

844
01:43:13,220 --> 01:43:14,220
so mache?

845
01:43:14,220 --> 01:43:23,780
Ich hab keinen Plastenschimmer, na gut, ja, wir machen mal weiter, wir machen mal weiter,

846
01:43:23,780 --> 01:43:32,540
so, also, ich lese unendlich, ich muss mal kurz gucken, ob der überhaupt, wir machen

847
01:43:32,540 --> 01:43:37,620
jetzt hier exquisite printf-debugging wieder, wir gucken mal, ob der das überhaupt ausführt

848
01:43:37,620 --> 01:43:48,100
jetzt, eins, zwei, okay, führte aus, alles klar, funktioniert, so, also, For Each, so,

849
01:43:48,100 --> 01:43:53,740
hier drin machen wir jetzt unsere Object-Erkennung und wir brauchen dann noch ein Event, würde

850
01:43:53,740 --> 01:44:00,900
ich sagen, wir brauchen noch ein Event, Public, Event, Action, das nennen wir dann irgendwie

851
01:44:00,900 --> 01:44:09,420
sowas wie Motion, nee, nicht Motion, nicht Motion, Object, Object Detector, Result oder

852
01:44:09,420 --> 01:44:17,020
so, das müssen wir noch anlegen, das ist alles nur mal Platzhalter, weil ich noch nicht

853
01:44:17,020 --> 01:44:22,820
genau weiß, wie der ganze Mist am Ende heißen wird, so, das ist ein Event, das schicken

854
01:44:22,820 --> 01:44:29,540
wir raus, wenn wir was erkannt haben auf dem Bild und die Ergebnisse drinnen, Chat sagt

855
01:44:29,540 --> 01:44:33,140
gerade, hatte mal einen Entwickler bei uns, der Methoden öfters mal Let's Do It genannt

856
01:44:33,140 --> 01:44:39,620
hat und Methoden gehabt, wo er bool umgedreht hatte von if zu, von true, return, false,

857
01:44:39,620 --> 01:44:44,300
oh, das ist Big Brain, Logik, ja, hat er das gemacht, um euch zu ärgern oder konnte er

858
01:44:44,300 --> 01:44:50,540
das nicht anders, so, das nennen wir jetzt hier Detected, gut, das heißt, was wir jetzt

859
01:44:50,540 --> 01:44:56,580
jetzt machen ist, wenn, ich laber das jetzt nur so vor mich hin, weil ich nachdenken muss,

860
01:44:56,580 --> 01:45:23,460
also, wenn ich ein neues Objekt erkannt habe, dann schick ich das zum Client, so, ich glaub,

861
01:45:23,460 --> 01:45:29,580
das ergibt halbwegs Sinn, so, und jetzt muss ich die eigentliche, die eigentliche Objekt

862
01:45:29,580 --> 01:45:32,940
Erkennung machen, das wird jetzt ein bisschen komplizierter, also, ich mach die halt zum

863
01:45:32,940 --> 01:45:38,900
Glück nicht selbst, ich schick die an diese API, aber, so, also, await for each, sprich,

864
01:45:38,900 --> 01:45:44,180
ich gucke mal kurz, ob das auch funktioniert, blub, da sollte jetzt ganz oft blub ausgeben,

865
01:45:44,180 --> 01:45:52,140
pro Keyframe sollte jetzt blub ausgeben, wenn das richtig funktioniert, blub, blub, blub,

866
01:45:52,140 --> 01:45:58,180
blub, ok, exellent, funktioniert, so, und hier muss ich jetzt den API Aufruf drin machen,

867
01:45:58,180 --> 01:46:05,460
also, wir brauchen auf jeden Fall schon mal einen HTTP Client, HTTP Client, um Webrequest

868
01:46:05,460 --> 01:46:20,700
zu machen, so, dann brauchen wir eine Variable für das Image, und das ist, this is the code

869
01:46:20,700 --> 01:46:29,860
and resize, genau, wir müssen, wir wollen es decoden und resizen, was ich übrigens noch

870
01:46:29,860 --> 01:46:33,020
gar nicht implementiert hab, fällt mir gerade auf, das muss ich machen, das copy paste ich

871
01:46:33,020 --> 01:46:41,700
mir mal wieder zusammen, decode and resize init, wisst ihr was, ich machs, ich mach das

872
01:46:41,700 --> 01:46:50,420
hier, ich find das hier an der Stelle besser zu lesen, weil hier frag ichs auch ab, so,

873
01:46:50,420 --> 01:46:59,860
ok, lass mal überlegen, was, was brauch ich jetzt, also ich brauch nen Frame zum decoden,

874
01:46:59,860 --> 01:47:07,740
jetzt brauch ich nen Package, irgendwie sowas wie, keine Out Package, immer, muss man mal

875
01:47:07,740 --> 01:47:13,220
schauen, was wir damit machen, so, also, jetzt muss ich das Bild erstmal decoden, was von

876
01:47:13,220 --> 01:47:19,860
der Kamera kommt, sprich, das ist FFmpeg, das wird auch mal richtig schön copy pasted,

877
01:47:19,860 --> 01:47:33,740
excellent, so, also, send Package an den Decoder, dann decoder das für mich, und hier bekomm

878
01:47:33,740 --> 01:47:39,300
ich das decodete Bild wieder, sehr gut, speichern übrigens dann den Frame, Frame Source, das

879
01:47:39,300 --> 01:47:43,980
heißt, ich muss hier unten schon mal eine Sache machen, FFmpeg, Free Frame, nee, es

880
01:47:43,980 --> 01:47:59,420
ist Frame Free, genau, Frame Free, und zwar, Frame Source, alles Benahmung, ja, oh, das

881
01:47:59,420 --> 01:48:04,820
ist ja, das ist cringe, ey, wenn ich das im Chat lese, ey, it's Knoppers Time, ach,

882
01:48:04,820 --> 01:48:09,460
du Scheiße, wer sowas, ey, wer den Source Code rein schreibt, gut, ich mein, ich darf

883
01:48:09,460 --> 01:48:13,620
nix sagen, ich schreib bei uns manchmal auch so wirklich Sachen wie Poggers und so rein,

884
01:48:13,620 --> 01:48:16,940
aber das versteht außer mir, glaub ich, keiner, deswegen ist das nicht so wild, Knoppers Time

885
01:48:16,940 --> 01:48:24,740
ist ja Paint's Jam, ja, so, also, jetzt decoden wir das, encoden das, so, und wenn es ein,

886
01:48:24,740 --> 01:48:29,580
ah, jetzt weiß ich, was ich damals gebastelt hab, wenn es ein Fehler ist, wenn es ein Fehler

887
01:48:29,580 --> 01:48:37,340
ist, dann geben wir das leere Package zurück, und Free in den Frame, wir wollen ja keine

888
01:48:37,340 --> 01:48:46,500
Memory Leaks verursachen, so, jetzt müssen wir das Ganze resizen, also, sprich, den,

889
01:48:46,500 --> 01:48:58,660
das Package müssen wir resizen zu 300 mal 300, achso, übrigens, stimmt gar nicht, hier,

890
01:48:58,660 --> 01:49:08,300
Frame, Frame Source, muss ich erwähnen, ne, nicht Resizer, wie heißt das jetzt, Resized,

891
01:49:08,300 --> 01:49:17,140
Kompetenz, Frame Resized, mir fällt jetzt grad nix besseres ein, so, so, jetzt müssen

892
01:49:17,140 --> 01:49:24,260
wir diesen Frame encoden als JPEG, haben die Vorgesetzten doch, aber das juckt doch kein,

893
01:49:24,260 --> 01:49:34,420
achso, du meinst das hier im Chat, ja, das ist keine gute Idee, also, man kann ja, man

894
01:49:34,420 --> 01:49:40,420
kann schon teilweise mal eben paar witzige Sachen reinschreiben, aber irgendwelche Leute

895
01:49:40,420 --> 01:49:45,140
beleidigen in Comments würde ich da wirklich nicht, also, erstens, eh nicht, aber auch

896
01:49:45,140 --> 01:49:52,260
so nicht, so, jetzt kann ich mir das andere wieder zusammencopy paste, so, achso, das

897
01:49:52,260 --> 01:49:58,540
heißt ja noch anders, das haben wir ja so genannt, was ist denn Thumb Packet, was ist

898
01:49:58,540 --> 01:50:11,420
das, sowas hier, aha, alles klar, wunderbar, und jetzt sagen wir dann, Packet gleich, kann

899
01:50:11,420 --> 01:50:31,580
ich das ganze ja zusammenwursten, und zwar, Breite, Breite und Höhe, ah, ok, und jetzt

900
01:50:31,580 --> 01:50:43,540
müssen wir noch ein bisschen aufräumen, FFmpeg, Frame resized, muss ich aufräumen, das ist

901
01:50:43,540 --> 01:50:48,700
normalerweise was, was man in C Sharp nie machen muss, dieses manuelle Memorymanagement, Packet

902
01:50:48,700 --> 01:50:54,660
free, aber wenn man hier unmanaged Zeugs hat, da bleibt dann nix anderes übrig, so, ich

903
01:50:54,660 --> 01:51:00,500
hoffe ich verwursache jetzt keine Memory Leaks, und ich hoffe es, also es kann durchaus sein,

904
01:51:00,500 --> 01:51:12,860
dass es jetzt gleich crashed, ne, gucken wir mal, ok, ich hab gut abgeschrieben, es crashed

905
01:51:12,860 --> 01:51:22,860
nicht, so, das heißt hier bekomme ich jetzt das resized Image, ich kann euch sogar beweisen,

906
01:51:22,860 --> 01:51:28,020
dass das resized und in JPEG komprimiert, das passt mal auf, ehm, wir gucken uns jetzt

907
01:51:28,020 --> 01:51:34,740
nämlich mal den Vergleich an, die Größe des JPEG, des verkleinerten JPEGs Images,

908
01:51:34,740 --> 01:51:49,380
zu ehm, zu der ursprünglichen, zu dem ursprünglichen Full HD Frame, guckt mal, ja, guckt mal, also

909
01:51:49,380 --> 01:51:59,380
der ursprüngliche Frame ist ehm, 46 Kilo Byte und das JPEG Bild ist nur noch 13 Kilo Byte,

910
01:51:59,380 --> 01:52:08,980
also das hat schon funktioniert mit dem resizing und dem ehm, encode, so, jetzt haben wir das,

911
01:52:08,980 --> 01:52:11,740
also das scheint ja auch zu funktionieren, was ich da gebastelt hab, sonst wird's jetzt

912
01:52:11,740 --> 01:52:16,060
nicht, sonst wird's jetzt direkt, direkt abkacken, so und jetzt müssen wir folgendes machen,

913
01:52:16,060 --> 01:52:20,740
das was wir hier mit, sag ich, warum ist die Musik so laut, ne, ist gar nicht so laut,

914
01:52:20,740 --> 01:52:26,940
kommt mir nur so vor, ehm, das was wir hier gemacht haben mit der, mit der Object Detection,

915
01:52:26,940 --> 01:52:33,500
das müssen wir jetzt von Hand machen, also sprich, wir müssen einen Request schicken

916
01:52:33,500 --> 01:52:39,900
an localhost 8080detect, ein Postrequest, mit diesen Parametern drin und den Bild als

917
01:52:39,900 --> 01:52:54,980
Base64encodedes, Base64encodedes String, dieses JPEG Image, so, also, was, VM Settings, was

918
01:52:54,980 --> 01:53:11,220
willst du wissen, eh, if you wanna know the Linux, Windows Manager, it's Manjaro Linux

919
01:53:11,220 --> 01:53:22,980
and eh, E3WM, also ich dachte, du meinst, du machst das mit den Kommandos, weil es auf

920
01:53:22,980 --> 01:53:27,140
Englisch, auf Deutsch nicht versteht, ehm, was ist virtualisiert, Linux oder Windows,

921
01:53:27,140 --> 01:53:33,180
eh, Linux, kommt irgendwann wieder YouTube Stuff, ja, im Dezember, eh, Linux ist virtualisiert,

922
01:53:33,180 --> 01:53:38,620
Windows ist Host unten drunter, guck da, Windows Desktops und hier Linux Desktops, exellent,

923
01:53:38,620 --> 01:53:44,220
so, also, wir haben jetzt das JPEG Image und wir müssen jetzt diesen Request hier schicken

924
01:53:44,220 --> 01:53:57,860
an die I, es ist I3WM, genau, was ist, was hat dir eigentlich geritten das WW zu nennen,

925
01:53:57,860 --> 01:54:03,820
ja, alle anderen Buchstaben kannst du halbwegs so buchstabieren wie im Deutschen, nur W nicht,

926
01:54:03,820 --> 01:54:11,660
sondern eben, ich mein, W, was ist an W so kompliziert, warum muss es gerade W sein,

927
01:54:11,660 --> 01:54:18,980
es trägt dann so Blüten wie, dass es in CS nicht AWP ist, sondern AWP, weil die Leute

928
01:54:18,980 --> 01:54:27,540
im Kopf das nicht hinkriegen und ich vertue mich da auch total oft drinnen, welche Software

929
01:54:27,540 --> 01:54:31,700
benutzt du, das ist vor allem bei Workstation, ok, jetzt machen wir erstmal den AP Aufruf

930
01:54:31,700 --> 01:54:35,300
und dann sehen wir auch gleich schon, ob das Ganze funktioniert und dann können wir auch

931
01:54:35,300 --> 01:54:40,500
gleich überprüfen, ob das mit meinem Hoftor funktioniert, zum Erkennen, also wir müssen

932
01:54:40,500 --> 01:54:47,580
jetzt den Aufruf machen an diese Rest-AP oder an diese JSON-AP, so, wir haben eine HTTP-Klein,

933
01:54:47,580 --> 01:54:55,620
wir müssen erstmal unser JSON zusammenbauen, JObject, so, und zwar, was wir jetzt zusammenbauen

934
01:54:55,620 --> 01:55:00,660
müssen ist folgendes, ich kopiere mir das hier mal rein, dass ich das jetzt, dass ich

935
01:55:00,660 --> 01:55:19,100
abgucken kann, gehst du fort, Moment, doch das ist richtig, brauch ich nicht hier, Application

936
01:55:19,100 --> 01:55:24,380
JSON, hier das da brauch ich, das ist das interessante, der Rest ist nicht so, nicht

937
01:55:24,380 --> 01:55:34,500
so wild, also, also, was brauchen wir denn, JSON, add, was haben wir, Detector Name, Detector

938
01:55:34,500 --> 01:55:47,580
Name ist default, so, JSON, add, was haben wir als nächstes, ok, Sub-OP, Data, doch

939
01:55:47,580 --> 01:55:55,180
das war's schon, mehr brauchen wir gar nicht, easy, easy, also, sagen wir, Data, Data, da

940
01:55:55,180 --> 01:56:04,700
müssen wir jetzt ein bisschen erfinderisch sein, wie, Base64 in System Buffers, was,

941
01:56:04,700 --> 01:56:17,340
Binary Data, und hier, wie konvertiert man in C-Sharp möglichst einfach, Binary zu Base64

942
01:56:17,340 --> 01:56:24,780
String, ok, C-Sharp, Base64 String, wie geht das, Endcode, Endcode, Convert to, excellent,

943
01:56:24,780 --> 01:56:31,500
deswegen mag ich das.NET Framework, für jeden Scheiß irgendwas dabei, also, was war

944
01:56:31,500 --> 01:56:42,980
das jetzt, Convert to Base64 String, Convert, was jetzt, to Base64, das gibt's einfach

945
01:56:42,980 --> 01:56:52,740
schon, nice, so, Byte Array, ist JPEG Image, Data, gut, und jetzt brauchen wir noch eins,

946
01:56:52,740 --> 01:57:02,260
JSON, add, wie heißt das, Detect, und da jetzt ein Stern, nee, nee, oh je, wie geht

947
01:57:02,260 --> 01:57:28,100
denn das jetzt, ich brauch so ein, so ein, Sub, Object, legt man das jetzt ja an, wieso

948
01:57:28,100 --> 01:57:45,340
was, Dynamic, Dynamic, eh, Manually, Manually ist gut, Creating JSON, Creating JSON, mach

949
01:57:45,340 --> 01:57:49,740
dir ne Klasse, die du dann serialisierst, das wird glaub ich zu aufwendig für, ah,

950
01:57:49,740 --> 01:57:58,820
guck mal hier, add, ah, ein zweites Objekt, kann man, kann man nicht sowas hier einfach

951
01:57:58,820 --> 01:58:07,860
machen, J-Object, irgendwie sowas, oh, Moment, what the fuck, J-Object, J-Ob, ich kann das

952
01:58:07,860 --> 01:58:23,060
nicht so schreibe, J-Object, und dann, was soll ich irgendwie reinschreiben, ich mein,

953
01:58:23,060 --> 01:58:27,860
was man machen könnte ist, aber das gefällt mir nicht, sowas hier, ich weiß jetzt grad

954
01:58:27,860 --> 01:58:35,660
echt die Syntax nicht, ich mein sowas könnte man hier machen, Temp, Add, und dann Detect,

955
01:58:35,660 --> 01:59:01,100
ne, Moment, ne, Moment, nicht Detect, Sternchen, Sternchen, mach mal 50 oder 60, ich mein,

956
01:59:01,100 --> 01:59:04,700
so könnte ich das, aber das ist doch mega hässlich oder, ah, das machen wir doch,

957
01:59:04,700 --> 01:59:13,740
das kann man doch nicht machen, iiih, ah, wird ja immer schlimmer, MonkaS, was schlägt

958
01:59:13,740 --> 01:59:30,820
der mir denn hier vor, what, ich könnte mit dem Dictionary machen, dann sag ich, das muss

959
01:59:30,820 --> 01:59:45,340
einfacher gehen, das muss einfacher tun hier, aha, J-Object, Leute, ich hab ne Idee, also,

960
01:59:45,340 --> 02:00:05,620
der kann nämlich das irgendwie, was ist das, das sah ja abartig aus, so, guck mal, der

961
02:00:05,620 --> 02:00:12,220
kann das so, kann ich jetzt nicht einfach sagen, New J-Object, einfach hier reinschreiben,

962
02:00:12,220 --> 02:00:22,540
New J-Object, ist da das, und dann, und dann hier dahinter, und dann hier dahinter schreiben,

963
02:00:22,540 --> 02:00:31,940
so, ob das geht, weißt du, das geht, ich hab da, ich hab da so meine Zeit, aber ich meine,

964
02:00:31,940 --> 02:00:35,220
es gibt keine Syntaxfehler, das heißt, dass, die Chance, dass das geht, ist schon mal relativ

965
02:00:35,220 --> 02:00:42,500
gut, gucken wir mal, lassen wir uns das mal ausgeben, tu String, du brauchst nicht mehr

966
02:00:42,500 --> 02:00:49,620
das zweite J-Object, ja, wie, wie, wie schreib ichs dann, ok, schauen wir mal, ob zumindest,

967
02:00:49,620 --> 02:01:17,780
dass, was sinnvolles dabei rauskommt jetzt, einfach als Dictionary, ah, Moment, ah ja,

968
02:01:17,780 --> 02:01:32,900
Moment, äh, oh je, ich muss ja so machen, New, Detect, das funktioniert doch nicht,

969
02:01:32,900 --> 02:01:43,540
fuck, oh man, ich bin so dumm, irgendwie ein bisschen Jason zusammen zu wursten, das kann

970
02:01:43,540 --> 02:01:52,860
doch nicht sein, was macht das, das New Object noch da weg, ok, so, ne, ne, ne, ne, ne, das

971
02:01:52,860 --> 02:02:08,900
ist ja kein Ruby hier, sowas hier, ne, ne, ne, ach du Scheiße, wie macht man das, ja,

972
02:02:08,900 --> 02:02:16,020
Öffnungsskript Interop, macht ihr doch sonst einfach ein anonymes Object, ne das geht nicht,

973
02:02:16,020 --> 02:02:22,140
siehste doch hier, genau das hab ich doch, das geht nicht, es ist ja kein Ruby und außerdem

974
02:02:22,140 --> 02:02:27,780
in anonymen Objekten es geht ja keine Variable oder keine Property-Names mit Sternchen, ok,

975
02:02:27,780 --> 02:02:32,220
ich, ok, ich muss mir die Hilfe angucken, also, New Object und dann einen NewJ-Property

976
02:02:32,220 --> 02:02:36,820
drin, ich hätt mir einfach die ganze Sache, selbst an, einfach gleich mal die Hilfe angucken,

977
02:02:36,820 --> 02:02:54,460
UJ-Object und dann UJ-Property und dann das da rein easy und jetzt gehts passt auf easy

978
02:02:54,460 --> 02:03:16,180
as fuck ha ha guck mal da funktioniert das ist mein base 64 encodedes build base 64 encodedes

979
02:03:16,180 --> 02:03:23,740
build und die folgt alles klar funktioniert gut ja das ist dann so einfach in den schalter hätte

980
02:03:23,740 --> 02:03:32,860
ich nicht gedacht es gibt wahrscheinlich schönere varianten das zu machen aber es ist ein json

981
02:03:32,860 --> 02:03:39,180
objekt das so formatiert ist wie man das braucht also so und jetzt wird es spannend jetzt gucken

982
02:03:39,180 --> 02:03:46,260
ob die ob die result oder wer braucht das ergebnis ne ne wir brauchen das ergebnis weil da steht

983
02:03:46,260 --> 02:04:02,140
ja dann drinne was das woran was erkannt hat also also also den attp client post und zwar

984
02:04:02,140 --> 02:04:20,180
attp doppelpunkt doppelslash localhost doppelpunkt 80 80 slash die tag so new content wir machen mal

985
02:04:20,180 --> 02:04:30,620
das ganze in die nächste zeile das hier auch new string content hier kommt dann das json rein

986
02:04:30,620 --> 02:04:43,460
muss man das jetzt noch to stringen wahrscheinlich to string encoding ist utf 8 und das ist ein bisschen

987
02:04:43,460 --> 02:04:47,500
also dieser hatte dieser hatte tp handling und json handling finde ich in sich scharf ist auch

988
02:04:47,500 --> 02:05:05,100
ist es zweckmäßig aber schon ist es nett so text ne application json ist es ab application

989
02:05:05,100 --> 02:05:21,300
json so jetzt schicken wir den response dahin alles klar ok

990
02:05:21,300 --> 02:05:33,420
los besser so jetzt lesen wir die response ein

991
02:05:33,420 --> 02:05:47,740
also machen wir das jetzt am besten response ne awaiten müssen wir das ganze await deswegen

992
02:05:47,740 --> 02:06:02,620
haben wir das hier glücklicherweise ssync gemacht oder auch ssync response response wie ging das

993
02:06:02,620 --> 02:06:12,580
jetzt das da was content dann irgendwie read read s string genau auch wieder awaiten text und das

994
02:06:12,580 --> 02:06:18,900
gehen wir mal aus so also sprich von der idee her sollten wir jetzt unser base 64 encodedes

995
02:06:18,900 --> 02:06:26,020
bild an diesen service schicken und als antwort erhalten ob der was erkennt ob der was erkennt

996
02:06:26,020 --> 02:06:30,340
ist fraglich doch mal gucken ob der unseren raspberry pi erkennt mal gucken ob der unseren

997
02:06:30,340 --> 02:06:53,860
raspberry pi erkennt mal hier was bett bett ok es sieht aus wie ein bett aber ja es ist ein bett

998
02:06:53,860 --> 02:07:03,460
sagt er mal gucken ob er meine hand erkennt also er denkt es ist ein bett naja ich mein lasse

999
02:07:03,460 --> 02:07:06,620
ich mal durchgehen das ist eigentlich ist auch ein scheiß bild um da irgendwie objekt erkennung

1000
02:07:06,620 --> 02:07:13,660
drauf zu machen wir gucken ob er mein handy erkennt aber das ding ist bestimmt also das ding ist ja

1001
02:07:13,660 --> 02:07:21,500
das ding ist ja auf person detection trainiert das ist ja auf also das ist jetzt nicht auf raspberry

1002
02:07:21,500 --> 02:07:38,180
pies oder so ok schlägt mich mach mal mein handy mein handy case

1003
02:07:38,180 --> 02:08:01,900
ich so wirklich ok ich würde sagen also dieses bild ist nicht so gut dafür geeignet wir machen

1004
02:08:01,900 --> 02:08:17,980
mal mein kamerabild was ich mitgebracht habe probieren wir mal aus doch doch bild ist live nur

1005
02:08:17,980 --> 02:08:26,820
der process abgekackt also der ist der meinung er erkennt hier irgendwie den bett ok nicht so

1006
02:08:26,820 --> 02:08:38,220
ganz aber wenn er meint ja also wie gesagt der ist nicht gut darin sachen zu erkennen wie also

1007
02:08:38,220 --> 02:08:41,700
der ist hauptsächlich auf personen trainiert deswegen erkennt er diesen kram auch nicht

1008
02:08:41,700 --> 02:08:50,420
richtig der hier also ich glaube das ist hauptsächlich auf personen ok dann machen wir das mal mit einem

1009
02:08:50,420 --> 02:08:57,540
kamerabild was ich die ganze zeit schon machen wollte genau ff play flur 2 das hier von meiner

1010
02:08:57,540 --> 02:09:06,940
kamera im hof bei nacht was es übrigens gerade hängen geblieben ist warum auch immer also das

1011
02:09:06,940 --> 02:09:14,020
nehmen wir jetzt mal als objekt als detection bild und irgendwann kommt ihr auch gleich jemand

1012
02:09:14,020 --> 02:09:23,380
durchgelaufen excellent gesagt ich bin es nicht so jetzt jetzt es wird natürlich ein

1013
02:09:23,380 --> 02:09:28,420
bisschen kompliziert jetzt müssen wir erst mal diese diese datei die ich hier habe als

1014
02:09:28,420 --> 02:09:34,620
rtsp stream bereitstellt um zu faken dass es eine webcam ist das aber glücklicher kein kein

1015
02:09:34,620 --> 02:09:43,500
problem weil da habe ich letztens ein sehr nice das projekt gefunden simpel rtsp das da das ist

1016
02:09:43,500 --> 02:09:51,260
ein go programm ob es das gibt über gibt es nicht das ist ein go programm und das kann

1017
02:09:51,260 --> 02:09:57,340
einfach sachen restreamen also sprich ich kann dateien restreamen als rtsp das ist ultra praktisch

1018
02:09:57,340 --> 02:10:02,340
wir laden das ganze jetzt mal runter oder natürlich nachdem es ein go binary ist kannst du ein go

1019
02:10:02,340 --> 02:10:17,940
binary auch einfach runterladen und direkt ausführen ziemlich witzlig ist rtsp genau und

1020
02:10:17,940 --> 02:10:23,180
schon läuft easy also einfacher könnte es nicht sein rtsp server zu starten als dieses ding doch

1021
02:10:23,180 --> 02:10:29,220
das kann vlc aber die syntax von vlc um den rtsp server zu starten ist so wir das kann ich mir

1022
02:10:29,220 --> 02:10:39,900
nie merken ok und jetzt müssen wir unsere sache da rein streamen ffmpeg stream 1 file ts was ich noch

1023
02:10:39,900 --> 02:11:01,660
dabei ist meistens ist kein audio und meine datei heißt flur 2.ts localhost stream passt gucken wir

1024
02:11:01,660 --> 02:11:08,540
mal jetzt bin ich gespannt ob die object detection funktioniert also die person detection

1025
02:11:08,540 --> 02:11:24,940
kommt mal er erkennt es da ist einer ins bild gelaufen eine ins bild gelaufen komm her person

1026
02:11:24,940 --> 02:11:34,540
person jetzt geht die tür zu und er erkennt wieder nix funktioniert ok lasse gucken wir

1027
02:11:34,540 --> 02:11:45,940
doch mal er erkennt nix er erkennt nix er erkennt nix keine detection keine detection doch gleich

1028
02:11:45,940 --> 02:11:49,340
geht die kameraloop wieder von vorne los ja wir machen jetzt noch ein kästchen drüber

1029
02:11:49,340 --> 02:11:52,500
gleich das wird richtig big brain wir machen gleich noch ein kästchen im frontend drüber

1030
02:11:52,500 --> 02:12:14,780
guckt person person person person confidence 79 prozent excellent exquisite nice so und wisst ihr

1031
02:12:14,780 --> 02:12:21,860
was das gute daran ist dass die kamera so eine so eine billige china cam motion erkennung wäre

1032
02:12:21,860 --> 02:12:26,500
durch die spinnweben schon teilweise angegangen oder durch die bäume im hintergrund und das ding

1033
02:12:26,500 --> 02:12:32,340
ist trainiert auf person das heißt du hast viel weniger so falls positive motion detection

1034
02:12:32,340 --> 02:12:41,820
so sehr gut sehr gut so als müssen wir noch das ergebnis an den kleinen schicken jetzt

1035
02:12:41,820 --> 02:12:56,300
müssen wir noch das ergebnis an den kleinen schicken wie sieht so ein ergebnis aus so gut

1036
02:12:56,300 --> 02:13:03,140
das heißt wir machen jetzt mal ein ein muss man kurz gucken wie man das für mal was man

1037
02:13:03,140 --> 02:13:07,380
dafür ein ordentliches objekt draus machen dass wir zurückgeben können ok also wir brauchen top

1038
02:13:07,380 --> 02:13:23,660
string top fast string top und confidence und label und label confidence ist übrigens ein

1039
02:13:23,660 --> 02:13:31,980
double wir machen sie scharp unter linux klar dort net core ist richtig poc das projekt ist

1040
02:13:31,980 --> 02:13:39,940
auf github allerdings die objekt detection ist noch nicht dabei weil die objekt detection machen

1041
02:13:39,940 --> 02:13:52,140
wir auch gerade das hier ist label label das wird richtig geil wenn das ding hier käschen um die

1042
02:13:52,140 --> 02:14:00,620
leute malen kann das wird mega poggers hast du eine zweite auflösungsstufe nee eine zweite

1043
02:14:00,620 --> 02:14:11,820
auflösungsstufe bringt nix weil dieses objekt detection api programm ding resized hardcoded

1044
02:14:11,820 --> 02:14:19,220
auf 300 mal 300 das heißt wenn ich nicht resize 300 mal 300 resize das ding 300 mal 300 welche

1045
02:14:19,220 --> 02:14:23,860
kann kämmen das ist irgendeine china kämmen die ich draußen hängen habe hier die hier warte mal

1046
02:14:23,860 --> 02:14:33,100
hier aber stelle die nicht bei amazon da kostet es doppelt wie bei aliexpress 410 irgendwas wehe

1047
02:14:33,100 --> 02:14:48,540
oder das teil ist das das ist die kammer aber wie gesagt 60 euro ist eigentlich viel zu teuer

1048
02:14:48,540 --> 02:14:53,900
kauft die das woanders bei bengot aliexpress oder irgendwo da bezahlt 30 oder so guck mal

1049
02:14:53,900 --> 02:15:01,220
aliexpress gucken wir mal uns den den vergleich an nicht immer aliexpress schwankt immer ein

1050
02:15:01,220 --> 02:15:17,460
bisschen der link ops aliexpress fang ich dann immer immer diese üb alda gefahrt oh die gibt's grad gar nicht in 30 euro

1051
02:15:17,460 --> 02:15:35,900
rider ja doch guck naja so ein großer unterschied ist aber immerhin immerhin 20

1052
02:15:35,900 --> 02:15:49,340
euro billiger als in den d so also top top top bottom bottom right left aber es wird so

1053
02:15:49,340 --> 02:15:55,220
nice wenn das kässtchen drum herum malen kann im web interface das ist dann besser als 90 prozent

1054
02:15:55,220 --> 02:16:01,340
das ist dann jetzt schon besser als 90 prozent dieser kommerziellen krab video surveillance

1055
02:16:01,340 --> 02:16:09,020
dinger ok objekt detektor results das ergibt keinen sinn weil die sachen sind eine detection

1056
02:16:09,020 --> 02:16:16,540
drin und schon fortschritte ja person wird erkannt hier person wird erkannt wir gucken

1057
02:16:16,540 --> 02:16:19,780
jetzt nur noch wie man das gescheit zum frontend transportieren können um dann kässtchen drum

1058
02:16:19,780 --> 02:16:25,980
zu malen ok objekt detektor result wir machen jetzt so was hier objekt detektor result objekt

1059
02:16:25,980 --> 02:16:37,220
detektor summary big brain benahmung ich weiß und das ist prop eine liste aus objekt detektor

1060
02:16:37,220 --> 02:16:44,660
result die im detections heißt das muss so heißen weil ansonsten klappt es sterilisieren nicht

1061
02:16:44,660 --> 02:16:56,300
detektions ok legen wir mal die folgt eine anders wenn die kein exception irgendwie rein

1062
02:16:56,300 --> 02:17:05,540
laufen wird das dann so aus wie in china camps ja viel besser viel viel viel mehr rtx on sind

1063
02:17:05,540 --> 02:17:15,140
unsere kässtchen so jetzt die serialisen wir das ganze mal und zwar machen wir da jetzt jason

1064
02:17:15,140 --> 02:17:23,580
konvert die serialize objekt und zwar ein objekt ok die benahmung benahmung könnte wirklich besser

1065
02:17:23,580 --> 02:17:33,940
sein summary und zwar das da wird die serialized excellent so wie nennen wenn das ganze jetzt

1066
02:17:33,940 --> 02:17:44,100
richtig konvident das resulten das hier irgendwie response dass man übrigens das bisschen

1067
02:17:44,100 --> 02:18:04,380
unterscheide können was was ist so jetzt haben wir das jetzt gucken wir ob in diesem result

1068
02:18:04,380 --> 02:18:13,140
detections ob das größer als null ist nur dann hat er was gefunden und wenn das größer als

1069
02:18:13,140 --> 02:18:28,660
null ist dann werfen wir unser detected event in walk mit diesem summary trinne eh konvinenz

1070
02:18:28,660 --> 02:18:40,340
summary auch so und jetzt kann ich das an den kleinen schicken warum geht das nicht

1071
02:18:40,340 --> 02:18:58,900
soll für schmerzen ich habe das falsch genannt moment was macht fu fragezeichenbar das ist auf

1072
02:18:58,900 --> 02:19:07,220
null checken also das hier ist das gleiche wie das hier war doch mal vielleicht kann können

1073
02:19:07,220 --> 02:19:12,740
die das sogar vielleicht können die das sogar umwandeln für mich da muss ich das nicht schreiben

1074
02:19:12,740 --> 02:19:31,220
also das hier ist das gleiche wie if detected und gleich null ist detected also das ist das

1075
02:19:31,220 --> 02:19:45,500
gleiche das ist die kurzform davon stba 42 11 monat eins vor hypersubscriber eins vor hypersubscriber

1076
02:19:45,500 --> 02:19:50,980
aber dankeschön für den sub also versteht man glaube ich das ist die kurzvariante davon der

1077
02:19:50,980 --> 02:19:56,300
checkt ob das null ist nur wenn es null ist macht er das in walk und er bietet mir jetzt auch an

1078
02:19:56,300 --> 02:20:04,060
alter komm nimm doch das und das ist das ist wirklich cool an rider dass es so diese kleinen

1079
02:20:04,060 --> 02:20:11,820
refactoring sachen drinne hat ok jetzt schickt er mir das zurück jetzt schweißt er mir den event

1080
02:20:11,820 --> 02:20:18,220
hier alter ich hab was gefunden mit den mit den werten hier drinne und jetzt muss ich das nur noch

1081
02:20:18,220 --> 02:20:22,380
zum klein also nur noch einfach nur zum klein zurückschicken und das kann ich folgendermaßen

1082
02:20:22,380 --> 02:20:29,620
ich hab doch hier sogar schon ok exzellent das ist die verbindung zu meinem zu meinen zu meinem

1083
02:20:29,620 --> 02:20:42,300
webfront end send user clients all send async so wir brauchen jetzt was was wir aufrufen auf

1084
02:20:42,300 --> 02:20:54,740
dem klein zu als zum ersten mal wo wir heute beim klein was machen ok also ist signal rr wie dem auch

1085
02:20:54,740 --> 02:21:08,900
sei und detected wenn wir das jetzt einfach auch mal detected und zwar kriegt das dann übergeben

1086
02:21:08,900 --> 02:21:19,100
die kamera wofür es ist nicht die kanne sondern die kamera und das summary die berechnung bitte

1087
02:21:19,100 --> 02:21:27,820
dann c++ web assembly exzellent was ne das ist javascript das frontend gedöns hier alles alles

1088
02:21:27,820 --> 02:21:36,860
in line in einer index html datei wie ist denn jetzt eigentlich der aktuelle javas javascript

1089
02:21:36,860 --> 02:21:42,020
style guide leute macht man jetzt semi-colon oder nicht das ändert sich ja alle mal paar

1090
02:21:42,020 --> 02:21:49,980
jahre je nachdem was der aktuelle oberjavascript guru sagt macht man jetzt semi-colon am ende

1091
02:21:49,980 --> 02:21:59,820
oder nicht in javascript macht man ok weil von pan ja von paar jahren hieß es noch hieß es noch

1092
02:21:59,820 --> 02:22:10,940
nein macht man nicht so also und detected könnte man zwar ein bisschen schöner nehmen aber es

1093
02:22:10,940 --> 02:22:15,580
egal ok und detected dann schicke ich zurück die kammer halter ich war was habe ich mit meiner

1094
02:22:15,580 --> 02:22:22,500
kanne die kamera schicke ich zurück und das summary und das schöne ist an die heißt ja ist

1095
02:22:22,500 --> 02:22:31,860
noch nicht so alt das schöne daran ist der macht das ganze serialize für mich also sprich ich muss

1096
02:22:31,860 --> 02:22:36,300
hier nichts umwandeln in irgendwelche chasens ist eigentlich ziemlich gut so und ich sollte

1097
02:22:36,300 --> 02:22:51,420
jetzt hier was bekommen jedes mal wenn er war wenn er nur eine person ist das so fett

1098
02:22:51,420 --> 02:22:59,020
ist das so ultra fett

1099
02:22:59,020 --> 02:23:07,980
ja ohne das ist ja huge vielleicht habe ich das mal umgestellt

1100
02:23:07,980 --> 02:23:24,220
wir waren zu spät die person wurde gerade detected ID ja gut das ist die kamera die

1101
02:23:24,220 --> 02:23:37,220
das schickt aber ich habe gar nicht im lock drinne stehen weit hier lock camp und lock summary so

1102
02:23:37,220 --> 02:23:42,020
jetzt warten wir noch ob wir jetzt was zum frontend geschickt kriegen wo er was erkannt hat

1103
02:23:42,020 --> 02:23:59,700
postchamp postchamp postchamp postchamp detection beim er erkennt es in der kamera

1104
02:23:59,700 --> 02:24:13,580
ID 1 wohnzimmer und hat detected diese koordinaten als person exzellent extrem exzellent so was ist

1105
02:24:13,580 --> 02:24:20,740
wenn dann dort ein plumentopf steht erkennt er das als festen gegenstand das ist ja gerade

1106
02:24:20,740 --> 02:24:26,180
das gute der unterschied von quasi so das simplen motion detector sache das ist ein

1107
02:24:26,180 --> 02:24:31,540
nee das ist das ist eine aufnahme von meiner kamera ja das ist das war gestern abend oder

1108
02:24:31,540 --> 02:24:37,220
so meine live bild jetzt ist es eine loop die ich abspiele im hintergrund zum ausprobieren

1109
02:24:37,220 --> 02:24:45,940
von diesem ganzen zeug das ist ja der gründer der unterschied dazu herz 93 das ding ist

1110
02:24:45,940 --> 02:24:58,940
halt ai sagen wir mal ai mäßig trainiert auf erkennen von leuten das heißt das ist

1111
02:24:58,940 --> 02:25:05,620
viel viel weniger fehler anfällig als so eine einfache erkennung mit wie viel pixel

1112
02:25:05,620 --> 02:25:13,380
verändert sich im bild das heißt du hast du hast so gut wie keine fehlarme mehr klar

1113
02:25:13,380 --> 02:25:19,380
ein paar mal er kennt das trotzdem schrott ja aber du siehst ja es erkennt wirklich

1114
02:25:19,380 --> 02:25:23,460
nichts erkennt wirklich nur wenn hier einer durchläuft hier kuck jetzt hat er wieder

1115
02:25:23,460 --> 02:25:33,100
erkannt dass das hier so ok also detected objekt jetzt müssen wir noch kässtchen drum

1116
02:25:33,100 --> 02:25:40,500
herum malen chat jetzt kommen meine big brain javascript sachen zum zum tragen wie mal

1117
02:25:40,500 --> 02:25:47,700
ich da jetzt am besten in kässtchen kässtchen anhand dieser angaben die ich da bekomme wie

1118
02:25:47,700 --> 02:25:51,820
mache ich überhaupt in kässtchen ok ok ok also wir machen jetzt erst mal dann sie

1119
02:25:51,820 --> 02:26:05,180
kann diff diff overlay mit dem flash player genau klas immer mal overlay overlay overlay

1120
02:26:05,180 --> 02:26:17,900
ok also sagen wir jetzt mal irgendwie so overlay ja watsch moment so falsche klammern overlay

1121
02:26:17,900 --> 02:26:25,300
und dann machen wir jetzt mal äh äh ähm position position muss man glaube ich absolut

1122
02:26:25,300 --> 02:26:31,900
stellen dass das überhaupt funktioniert so dann machen wir mal 50 pixel breit dass man

1123
02:26:31,900 --> 02:26:36,460
überhaupt was sieht 50 pixel sieht man jetzt schon was am moment live surfer mal anmachen

1124
02:26:36,460 --> 02:27:00,620
dass ich refreshen kann exzellente sollte da nicht automatisch refreshen jetzt sollte

1125
02:27:00,620 --> 02:27:09,020
da nicht automatisch refreshen um refresh dann automatisch ah jetzt ok alles klar stellst

1126
02:27:09,020 --> 02:27:13,580
du den code an der ist schon public zu all halt ohne diese diese motion detector schicht

1127
02:27:13,580 --> 02:27:21,540
jetzt dabei weil die machen wir gerade aber das kann ich danach schon pushen ja doch doch

1128
02:27:21,540 --> 02:27:24,620
ich kann die koordinaten kreppen ich weiß ja bloß nicht wie ich ein overlay maler gescheit

1129
02:27:24,620 --> 02:27:33,620
ok wir machen was also border border style solid border color red hauptsache dass man

1130
02:27:33,620 --> 02:27:49,100
mal was sieht ah da ist er ok ok haha sehr gut also wir haben schon mal ne kästchen ähm

1131
02:27:49,100 --> 02:28:02,660
zwei oh das ist ja ganz ganz klein äh kann ich da jetzt sagen kann ich jetzt sowas sagen

1132
02:28:02,660 --> 02:28:08,700
wie keine ah top kann man kann man das in prozent machen kann man das in prozent machen

1133
02:28:08,700 --> 02:28:17,580
geht das top 10 prozent ah fuck das geht auf die ganze seite von der höhe her ah scheiße

1134
02:28:17,580 --> 02:28:25,220
moment wie kann ich denn wenn jetzt sagen dass er dass das nur so groß ist wie das

1135
02:28:25,220 --> 02:28:37,140
video ach du kacke wie sage ich dem jetzt dass es nur so groß ist wie das video noch

1136
02:28:37,140 --> 02:28:43,820
ein diff drum herum noch noch ein extra diff drum herum ne mal diff doch das geht bestimmt

1137
02:28:43,820 --> 02:29:02,740
style 100 prozent kein iframe dann iframe sowas machen wir nicht wait max pack es war

1138
02:29:02,740 --> 02:29:11,540
doch css magic oder aha excellent ok jetzt habe ich den overlay wo ich über das bild

1139
02:29:11,540 --> 02:29:27,500
drüber malen kann ok das war mal so da haben wir jetzt einen roten punkt oben in der ecke

1140
02:29:27,500 --> 02:29:32,260
das ist aber egal so jetzt macht man was übrigens das ist nicht der vue js way wie ich das

1141
02:29:32,260 --> 02:29:40,660
hier mache mit ids und so ne das gehört sich so gar nicht das macht man über data text

1142
02:29:40,660 --> 02:29:48,460
ja einfach nur mal gucken ob es funktioniert so also jetzt müssen wir uns die koordinaten

1143
02:29:48,460 --> 02:29:58,260
abgreifen aus der ganzen das heißt wir gehen jetzt hier in unser detect rein so also gucken

1144
02:29:58,260 --> 02:30:09,020
wir erste mal ob summary detect detections hat wenn es keine detection hat machen wir

1145
02:30:09,020 --> 02:30:19,540
nix ok vorher brauchen wir das ist dieses das jeweilige overlay objekt dafür also irgendwie

1146
02:30:19,540 --> 02:30:29,340
gleich document wie habe ich es genannt overlay mit der jeweiligen kamera id das kann ich

1147
02:30:29,340 --> 02:30:43,460
mir 1 2 1 so raus crepen so das ist das element so und da gehen wir jetzt rein erstmal lock

1148
02:30:43,460 --> 02:30:54,180
let position gleich summary detections 0 wir gehen jetzt einfach mal aus das ist gerade

1149
02:30:54,180 --> 02:30:59,380
nur eine person drauf so jetzt gucke ich erst einmal ob es noch funktioniert wenn hier jetzt

1150
02:30:59,380 --> 02:31:04,260
jemand durchs bild läuft ob es dann was ausgibt ich war zu langsam wieder war wieder zu langsam

1151
02:31:04,260 --> 02:31:13,340
wieso machst du das selbst und benutzt nicht so mein da weil das hat objekt detection ich

1152
02:31:13,340 --> 02:31:17,700
habe keine ahnung wie gut die objekt detection von so mein da ist und ich weiß auch nicht

1153
02:31:17,700 --> 02:31:23,500
wie gut so mein da als irgendwie überwachungs software ist was sie höchstwahrscheinlich

1154
02:31:23,500 --> 02:31:28,740
nicht kann ist latency frei in browser stream das können nämlich so gut wie so gut wie

1155
02:31:28,740 --> 02:31:32,380
keine kann das oder was der ursprüngliche grund ist warum ich das überhaupt selbst

1156
02:31:32,380 --> 02:31:41,540
gebastelt habe weil latency frei in browser stream kaum eine software kann hier guck position

1157
02:31:41,540 --> 02:31:48,940
ok dann holen wir uns mal die koordinaten raus also hier left gleich position ich post

1158
02:31:48,940 --> 02:32:12,540
position left dann right top bottom bottom so achso das das ist in prozent von 0 bis

1159
02:32:12,540 --> 02:32:17,540
von 0 bis 1 das heißt noch das ganze mal 100 ihr könnt mir ruhig sagen wenn man das

1160
02:32:17,540 --> 02:32:29,340
irgendwie javascript mäßig alle schöner machen kann so lock gucken wir uns mal exemplarisch

1161
02:32:29,340 --> 02:32:38,180
an ob left oder was ah guck mal hier 61 61 prozent left 61 prozent left heißt hier so

1162
02:32:38,180 --> 02:32:46,740
ungefähr das stimmt das stimmt mit objekt destructing wie wie mache ich objekt was

1163
02:32:46,740 --> 02:33:02,020
für ein ding objekt objekt destructing denen fällt auch immer was neues eine what

1164
02:33:02,020 --> 02:33:21,100
moment ich habe doch kein array das bringt mir gar nichts habe kein array ich habe unterschiedliche

1165
02:33:21,100 --> 02:33:34,740
prop das geht damit nicht so ok wie mache ich denn jetzt über z wie mache ich denn

1166
02:33:34,740 --> 02:33:44,940
jetzt mit css über javascript die position von dem ding wie geht das jazz dom objekt

1167
02:33:44,940 --> 02:33:53,900
position wie macht man sowas stag overflow excellent irgendwas irgendwas halbwegs neues

1168
02:33:53,900 --> 02:34:03,220
ja ja wir stimmen zu kannst du den style doch doch man könnte das deutlich mehr vue js

1169
02:34:03,220 --> 02:34:26,180
mäßig machen was ist das gibt es nicht so was wie set diff position autoposition adiv

1170
02:34:26,180 --> 02:34:34,940
aha sowas hier objekt destructing geht auch mit objekten hier ok aber ich check check

1171
02:34:34,940 --> 02:34:41,940
halt nicht ah moment warte mal so so also kann ich sowas hier machen moment testen wir

1172
02:34:41,940 --> 02:34:52,820
mal irgendwie was ich habe über das a b c d e f oder so und dann gleich ging das ging

1173
02:34:52,820 --> 02:35:06,380
er so aber mit kelly mit mit mit mit mit prak prak prak prakets praxis wie immer genau

1174
02:35:06,380 --> 02:35:31,060
was das geht das funst das glaube ich erst wenn ich sehe auf durchs bild auf ich brauche

1175
02:35:31,060 --> 02:35:44,900
objekt detection please das funktioniert nicht ist auch wurscht ich habe es mir ich

1176
02:35:44,900 --> 02:35:50,940
habe es mir so rausgeholt jetzt alles alles gut oder habe ich irgendwas anderes kaputt

1177
02:35:50,940 --> 02:36:18,620
gemacht links rechts oben unten label confidence ah da macht nicht der reinfolge nach da macht

1178
02:36:18,620 --> 02:36:29,340
das nicht der reinfolge nach das muss dann auch wirklich so heißen ach scheiß drauf

1179
02:36:29,340 --> 02:36:37,300
so geht es doch auch so die viel interessantere frage war doch wie kann ich das hier setzen

1180
02:36:37,300 --> 02:36:49,460
ok also position style ok wobei doch ich finde das cool das machen wir jetzt doch noch war

1181
02:36:49,460 --> 02:36:54,380
was man muss das man muss das wirklich mit kelly machen ok wir probieren das jetzt aus

1182
02:36:54,380 --> 02:37:20,860
der chat chat kennt sich aus echt krass das funst es funktioniert wobei mir das nix bringt

1183
02:37:20,860 --> 02:37:25,300
ich muss es ja noch ich muss es ich muss ja noch mal 100 rechnen mal 100 kann ich hier

1184
02:37:25,300 --> 02:37:30,180
drin gar nicht rechnen also ich muss es doch so machen so aber jetzt viel interessanter

1185
02:37:30,180 --> 02:37:40,820
also wie ging das andere jetzt el style style so ok ach jetzt wirds big boy left gleich

1186
02:37:40,820 --> 02:37:52,700
wie war das hier nochmal ncs so ne left und dann prozent ich hab ehrlich legit kein plan

1187
02:37:52,700 --> 02:38:00,060
ob man das setzen kann in java script wir reloaden mal schnell weil er hat ach guck

1188
02:38:00,060 --> 02:38:14,300
leute es stimmt die position ist ziemlich ziemlich ziemlich gut ok weiter gehts right

1189
02:38:14,300 --> 02:38:23,620
einfach ne moment right geht nicht so right muss ich ausrechnen aber top kann ich noch

1190
02:38:23,620 --> 02:38:45,860
so und so machen top aber top wissen wir schon oben guck mal hier das wird das wird leute

1191
02:38:45,860 --> 02:38:56,740
es wird es wird das ist schon ziemlich nah dran ok jetzt kommt das nächste el style style

1192
02:38:56,740 --> 02:39:08,500
so jetzt wirds ein bisschen komplizierter rechts den rechts ist dann left plus left plus right

1193
02:39:08,500 --> 02:39:17,220
gibt das sinn übrigens ist auch nicht right es ist es ist es ist breite ne das ergibt

1194
02:39:17,220 --> 02:39:26,420
keinen sinn was ich hier mache oder kann oder muss man oder kann man das so setzen kann

1195
02:39:26,420 --> 02:39:37,260
man das einfach so setzen ne ne ne genau es ist ne ne es ist right minus left und dann

1196
02:39:37,260 --> 02:39:51,420
muss es breite sein right minus left so und dann höhe höhe ist dann bottom minus top

1197
02:39:51,420 --> 02:40:11,820
so und passt auf leute jetzt gehts jetzt gehts easy easy mit ansagen gehts jetzt easy easy

1198
02:40:11,820 --> 02:40:21,880
ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha ha

1199
02:40:21,880 --> 02:40:36,380
guckt euch an hier wie wie die profis hier backbend ok das muss ich jetzt nochmal angucken

1200
02:40:36,380 --> 02:40:39,980
aber es verschwindet noch nicht ok das kann das kann man gleich noch fixen dass es nicht

1201
02:40:39,980 --> 02:41:00,940
verschwindet es sieht wirklich aus wie ein wallhack

1202
02:41:00,940 --> 02:41:06,580
wack incoming ok er erkennts hier unten irgendwie aber das liegt daran weil sie erst ins bild

1203
02:41:06,580 --> 02:41:20,780
hier rein läuft nice exquisite exellent das stacheldraht ne haust du drauf dass das stacheldraht

1204
02:41:20,780 --> 02:41:33,660
ist äh das sind irgendwelche spinnenweben würd ich sagen ja ultra nice ultra nice

1205
02:41:33,660 --> 02:41:41,700
exellent exellent so können wir jetzt nicht einfach sowas hier machen set timeout set

1206
02:41:41,700 --> 02:41:53,140
timeout und dann keine ahnung nach 2 sekunden nach 2 sekunden machen wir dann el style display

1207
02:41:53,140 --> 02:42:06,220
irgendwie none oder so none muss doch funktionieren dann solls nach 2 sekunden wieder verschwinden

1208
02:42:06,220 --> 02:42:10,580
wobei das nicht richtig funktioniert weil sich das dann gegenseitig resettet der erste

1209
02:42:10,580 --> 02:42:15,860
tickt und resettet während der zweite angezeigt wird ich glaub das ich glaub das funktioniert

1210
02:42:15,860 --> 02:42:26,380
nicht so ganz

1211
02:42:26,380 --> 02:42:37,900
wie kann ich denn jetzt an die box was dran schreiben content css content oder so ja guck

1212
02:42:37,900 --> 02:42:48,740
das blendet sich jetzt gegenseitig aus

1213
02:42:48,740 --> 02:43:10,980
woop oh ah kann ich sowas hier machen el style content person geht das so willst du

1214
02:43:10,980 --> 02:43:15,300
die objekterkennung wirklich auf raspberry pile auflassen ja erstmal schon je nachdem

1215
02:43:15,300 --> 02:43:22,500
wie das performance mäßig funktioniert aber ich denke alle 2 sekunden in frame decoden

1216
02:43:22,500 --> 02:43:38,300
und detection machen kann er ok ne das funktioniert so schonmal nicht inner text inner text

1217
02:43:38,300 --> 02:43:53,940
die musik aus das bin ich schon so lange on

1218
02:43:53,940 --> 02:44:10,100
inner text mal gucken ob das jetzt funktioniert chat wir müssen jetzt leider immer kurz warten

1219
02:44:10,100 --> 02:44:19,100
oh person guck mal da steht person man siehts zwar nicht aber es steht dran wahnsinn ich

1220
02:44:19,100 --> 02:44:33,700
bin höchst höchst begeistert gibt es nicht sowas wie outer text

1221
02:44:33,700 --> 02:44:46,820
kann ich kann ich hier kann ich hier drinne sagen color irgendwie auch red warum lässt

1222
02:44:46,820 --> 02:44:50,140
du die box nicht nur anzeigen wenn er auf was erkannte ja das ist feintuning gezeugt

1223
02:44:50,140 --> 02:44:52,100
ich bin mir jetzt erstmal schon happy dass überhaupt was anstreicht

1224
02:44:52,100 --> 02:45:06,060
genau das wir machen noch hier guck mal person excellent display nun

1225
02:45:06,060 --> 02:45:13,500
jetzt ist es weg und erst wenn er was erkennt ist es zu spät war erst wenn er was erkennt

1226
02:45:13,500 --> 02:45:18,620
dann zeigt er das an wobei moment ich muss ich muss hier noch hin unten ich muss noch

1227
02:45:18,620 --> 02:45:43,100
setzen display style display was macht man da block

1228
02:45:43,100 --> 02:45:48,540
wie kann ich dem jetzt text oben drüber schreiben wie also da brauche ich jetzt mal eure html

1229
02:45:48,540 --> 02:45:54,380
ex exquisite big brain html kenntnisse wie kriege ich die wie kriege ich es hin dass

1230
02:45:54,380 --> 02:45:58,940
person oben drüber steht und wie kriege ich es hin dass ich das besser lesbar mache

1231
02:45:58,940 --> 02:46:03,860
also mit einem outline oder so kann man text outline machen in html in irgendeiner art

1232
02:46:03,860 --> 02:46:14,700
und weise also was wir auf jeden fall schon mal machen können ist text position gibt

1233
02:46:14,700 --> 02:46:28,060
sowas text text position sowas doch text position so sowas gibt es nicht noch ein diff mit schwarz

1234
02:46:28,060 --> 02:46:32,980
im hintergrund die text text allein kann ich nur links rechts oben unten und sowas machen

1235
02:46:32,980 --> 02:46:52,580
aber nicht wo es wo es steht

1236
02:46:52,580 --> 02:46:57,700
den text in ein diff ja dann kann ich da aber nicht so ohne weiteres drauf zu also wir machen

1237
02:46:57,700 --> 02:47:06,060
jetzt erstmal ein oder hier font family was sind die areale oder so irgendwas in der richtung

1238
02:47:06,060 --> 02:47:14,740
font size 20 pixel dann sieht man schon ein bisschen mehr font emphasis ne aber was ist

1239
02:47:14,740 --> 02:47:30,820
zum was ist zum fett machen noch mal alter was ist zum fett norm font weight bold ok

1240
02:47:30,820 --> 02:47:39,140
es sieht schon es sieht es sieht immer immer besser aus ja so dann können wir border border

1241
02:47:39,140 --> 02:47:44,020
radius aber zwei pixel dann ist es sogar für die apple fans erträglich weil es abgerundet

1242
02:47:44,020 --> 02:47:52,420
ist moment es gab subs habe ich gar nicht übersehen set pudding hat was verschenkt

1243
02:47:52,420 --> 02:48:03,180
an forza sebastian stufe 1 dankeschön für den sub huge brain sub nice sorry falls ich

1244
02:48:03,180 --> 02:48:07,580
heute irgendwelche übersehen habe ich war gerade am konzentraten ok das sieht das sieht

1245
02:48:07,580 --> 02:48:13,420
doch jetzt eigentlich schon halbwegs passabel aus guck mal der resize sogar wenn er das

1246
02:48:13,420 --> 02:48:31,060
besser erkennt richtig gut richtig gut so ich würde jetzt nur gerne den font ok das

1247
02:48:31,060 --> 02:48:35,300
mal wir machen jetzt nicht inner text jetzt habe eine idee ich habe eine idee wir machen

1248
02:48:35,300 --> 02:48:43,340
nicht inner text wir machen inner html und da machen wir jetzt p oder so was hat glaube

1249
02:48:43,340 --> 02:48:49,340
ich auch einer im chat kann vorgeschlagen p und da machen wir jetzt style oh jetzt wird

1250
02:48:49,340 --> 02:49:09,900
aber ich style wie positionieren das jetzt kann ich kann ich kann ich sowas machen wie

1251
02:49:09,900 --> 02:49:26,900
irgendwie padding padding top minus 20 oder so person transform translate jetzt wirds

1252
02:49:26,900 --> 02:49:40,540
jetzt wirds big brain moment das muss ich jetzt mal kurz kurz versuchen nachzustellen

1253
02:49:40,540 --> 02:49:51,820
wie das ne das funktioniert ok moment das muss ich jetzt mal das muss ich jetzt mal

1254
02:49:51,820 --> 02:49:58,780
kurz ausprobieren also wir machen hier mal das display nun weg jetzt jetzt tun wir mal

1255
02:49:58,780 --> 02:50:06,140
so als machen wir das wirklich also da drinne machen wir jetzt ein p person und das will

1256
02:50:06,140 --> 02:50:18,660
ich style kann ich einfach so was sagen wie top minus 20 pixel ne fuck position ne

1257
02:50:18,660 --> 02:50:25,540
ah doch ah ne das geht ja aus der box raus

1258
02:50:25,540 --> 02:50:34,180
eh promise 1 wenn man das html richtig macht dann ist das kein ding

1259
02:50:34,180 --> 02:50:48,780
wie kann ich das überhaupt fix kann ich bestimmt mal sowas hier

1260
02:50:48,780 --> 02:51:13,720
papa Leute ich habe es ich habe es excellent minus 20 dass smaller jetzt ja messes tritts

1261
02:51:13,720 --> 02:51:16,000
Ach, jetzt bewegt sich's. Fuck, jetzt bewegt sich's nicht.

1262
02:51:17,000 --> 02:51:17,500
Ah!

1263
02:51:21,600 --> 02:51:24,200
Nur mit Transform. Okay, okay, ich mach das mit Transform.

1264
02:51:24,600 --> 02:51:26,360
Wenn du das sagst, ich mach das mit Transform.

1265
02:51:27,280 --> 02:51:29,440
Also, was muss ich machen? Transform.

1266
02:51:30,400 --> 02:51:31,600
Transform, Translate.

1267
02:51:39,400 --> 02:51:39,900
So.

1268
02:51:39,900 --> 02:51:45,540
Was? Minus 100? Minus 10?

1269
02:51:50,460 --> 02:51:53,700
Ey, das klippt nicht. Das bleibt in der Box drin.

1270
02:51:55,060 --> 02:51:55,980
Glaub ich zumindest, oder?

1271
02:51:57,860 --> 02:51:58,360
100?

1272
02:52:03,100 --> 02:52:07,020
Okay, ich glaub dir das jetzt. Ich mach das jetzt einfach mal.

1273
02:52:07,020 --> 02:52:10,820
Manchmal, Leute, manchmal muss man dem Chat einfach vertrauen.

1274
02:52:12,300 --> 02:52:15,780
Wobei das oftmals auch ganz schnell nach hinten losgehen kann.

1275
02:52:18,540 --> 02:52:21,180
Aber der Chat, hier ist ja der Cute Chat, da passiert sowas nicht.

1276
02:52:23,500 --> 02:52:26,500
Okay, jetzt mal gucken, wie es jetzt funzt.

1277
02:52:28,340 --> 02:52:28,900
Oder auch nicht.

1278
02:52:28,900 --> 02:52:38,020
Auf, lauf ins Bild.

1279
02:52:40,500 --> 02:52:43,020
Ich sollte den Loop kürzer machen, da schläfst du ja ein, weil.

1280
02:52:47,300 --> 02:52:47,800
Ah!

1281
02:52:51,780 --> 02:52:52,280
Pog.

1282
02:52:52,280 --> 02:52:55,600
Geht einfach. Ist es nicht hübsch? Ist es nicht hübsch?

1283
02:52:56,960 --> 02:53:00,200
Kann man, kann man in CSS Outlines machen?

1284
02:53:00,680 --> 02:53:03,880
CSS Outline Texts? Geht das irgendwie?

1285
02:53:05,000 --> 02:53:06,360
Adding Stroke to Web Texts.

1286
02:53:10,520 --> 02:53:17,720
Oh, oh, das ist irgendeine Firefox, Firefox, äh, nee, Moment, Webkit, irgendeine, äh, äh,

1287
02:53:17,720 --> 02:53:25,080
Moment, ich bring's durcheinander. Äh, Chrome, ne, bin verwirrt. Safari?

1288
02:53:28,440 --> 02:53:37,640
Also Mozilla ist Geckro. Safari ist Webkit, ne? Und Chrome ist Plink, aber Plink war mal Webkit, oder wie war das?

1289
02:53:37,640 --> 02:53:51,480
KHTML ist, glaub ich, Webkit. Ich, warte mal, ah, guck mal, wir haben ja Support. Was, was juckt mich, was juckt mich denn, bitteschön, der IE-Support?

1290
02:53:55,080 --> 02:53:57,080
IE-Support, was ist das?

1291
02:53:57,080 --> 02:54:06,200
Keck, Keck, da reicht Keck W nicht mehr für IE-Support. Das ist Keck, Keck Triple U Extreme.

1292
02:54:06,200 --> 02:54:15,800
Keck, Keck, da reicht Keck W nicht mehr für IE-Support. Das ist Keck, Keck Triple U Extreme.

1293
02:54:15,800 --> 02:54:28,220
Oh, ich hab's kaputt gemacht, Leute. Was hab ich verkehrt gemacht? Unexpected Token Doppelpunkt.

1294
02:54:28,220 --> 02:54:46,680
Warum? Ah, Kacknup. Das brauchen wir noch. Kann man da Enter drücken drinnen und da macht es

1295
02:54:46,680 --> 02:54:51,720
trotzdem auf die nächste Zeit. Kann man, kann man sowas machen in JavaScript irgendwie so?

1296
02:54:51,720 --> 02:54:58,800
Das war zwar nicht schön, aber man erkennt wenigstens ein bisschen was.

1297
02:54:58,800 --> 02:55:23,440
Boah, Boah. Paar Gas hier. Jetzt kann man sogar lesen.

1298
02:55:28,800 --> 02:55:51,760
Moment. Das ist aber gar nicht das, was ich haben will. Wartet mal. Text Fill Color Red, Outline White.

1299
02:55:51,760 --> 02:56:09,000
Das ist doch schon mal, das geht in die richtige Richtung. Okay, ähm, zwei Pixel dick. Es ist

1300
02:56:09,000 --> 02:56:13,800
halt mega hässlich, was ich hier zusammengestrickt habe gerade. Aber es geht ja nur ums Ausprobieren.

1301
02:56:13,800 --> 02:56:17,240
Das machen wir dann. Das werden wir auf jeden Fall alles ein bisschen noch Vue.js mäßig

1302
02:56:17,240 --> 02:56:21,040
integrieren, weil das man, das ist ja absolut anti Vue.js mäßig, dass man hier irgendwelche

1303
02:56:21,040 --> 02:56:35,280
HTML Elemente. Ähm, Face Recognition. Oh, das wird ein bisschen komplizierter. So anspruchsvoll

1304
02:56:35,280 --> 02:56:50,960
bin ich gar nicht, was das anbelangt. Äh, was ist das? Iget. Wir machen Mono Space Fun.

1305
02:56:50,960 --> 02:57:06,280
Das ist bestimmt viel besser. Mono, Mono Space Fun. So. Macht es ein bisschen heller. Okay,

1306
02:57:06,280 --> 02:57:15,960
ähm. Was war mal ein bisschen heller? Also RGB. Hatte Visual Studio nicht sowas, wo

1307
02:57:15,960 --> 02:57:25,480
man das hier auswählen kann? Gab es da nicht so ein Track and Drop irgendwie? Konnte das

1308
02:57:25,480 --> 02:57:34,880
das nicht irgendwie? Ich bin eigentlich ziemlich sicher, dass es das konnte. Ah, geht doch

1309
02:57:34,880 --> 02:57:42,200
hier. So, das ist volle Pulle, volle Pulle rot. Wir machen es jetzt einfach ein bisschen,

1310
02:57:42,200 --> 02:57:50,800
ein bisschen heller. Oder? Nee, wir machen. Äh, das ist schon okay. Aber ich, okay, ich

1311
02:57:50,800 --> 02:57:55,600
bin, für das Outline bin ich zu dumm. Das kenne ich nicht gebacken. Wie man das schön

1312
02:57:55,600 --> 02:58:10,880
macht. Da bin ich zu Low-Brain-Führer. Aber noch mal hier, Outline 1. Aber es ist doch

1313
02:58:10,880 --> 02:58:15,600
schon mal was. Ich meine, es highlightet, wo was ist. So, und jetzt müssen wir noch,

1314
02:58:15,600 --> 02:58:21,360
jetzt müssen wir übrigens noch probieren, ob das auch mit Mehrfachen kam. Ah, also.

1315
02:58:21,360 --> 02:58:35,440
Ah, ja. Also, schön ist was anderes, ja. Schön ist was anderes. Aber wir müssen noch

1316
02:58:35,440 --> 02:58:47,440
was anderes probieren, und zwar, ob mehrere Kameras gehen. Okay, wir probieren erst mal

1317
02:58:47,440 --> 02:58:55,360
was aus. Ich mache jetzt hier noch einmal die Kamera vom iPhone ran. So, keine Ahnung.

1318
02:58:55,360 --> 02:59:06,360
Und, ähm, wir versuchen mal, ob ich das Ding dazu überredet kriege, irgendwas zu erkennen.

1319
02:59:06,360 --> 02:59:22,560
Was Red und White vertauschen? Also, du meinst, dass wir hier sagen. Ups. Du meinst, dass

1320
02:59:22,560 --> 02:59:34,560
wir hier sagen. White. Und hier sagen Red. Und das heißt, wir müssen hier auch sagen

1321
02:59:34,560 --> 02:59:52,960
White oder wie? Äh. Er erkennt ein Bett. Also, dass da Person dran steht, stimmt ja nicht.

1322
02:59:52,960 --> 02:59:57,480
Person haben wir ja hardcoded. Das ist auch noch eine Sache, was vielleicht ein bisschen,

1323
02:59:57,480 --> 03:00:05,280
was vielleicht ein bisschen verbugt ist, dass wir hier nicht Person reinschreiben sollten,

1324
03:00:05,280 --> 03:00:22,360
sondern, ähm, sondern wir sollten reinschreiben Summary Detection. Post. Okay, Post. Label.

1325
03:00:22,360 --> 03:00:34,200
Bett. Guck, er erkennt ein Bett. Eindeutig. Eindeutig ist das hier ein Bett. Also, ich

1326
03:00:34,200 --> 03:00:41,240
finde, offensichtlicher könnte das gar kein Bett sein. Aber wisst ihr was richtig Geiles?

1327
03:00:41,240 --> 03:00:53,440
Es funktioniert auf beiden Kameras parallel schon. So, was brauchst denn? Ich mach das

1328
03:00:53,440 --> 03:00:59,280
jetzt nur mit einem grafischen Programm, dass man es ordentlich overlayen kann. Norm System

1329
03:00:59,280 --> 03:01:16,440
Monitor. Weil so ein Terminal halt ein bisschen kacke als Overlay aussieht. Monarch S. Guck

1330
03:01:16,440 --> 03:01:31,680
mal, das braucht kaum CPU. YouTube Videos zu konvertieren ist gar nicht so einfach in

1331
03:01:31,680 --> 03:01:40,680
Sachen, die der Browser abspielen kann über WebRTC. Wie popst du die Fenster aus? Windows

1332
03:01:40,680 --> 03:01:46,960
Shift, Leertaste. Okay, das ist ein Bett. Das ist schon mal ziemlich fein. Ich mach mal

1333
03:01:46,960 --> 03:02:03,640
kurz den Raspberry Pi weg. Guck mal, ob er es immer noch als Bett erkennt. Jetzt haben

1334
03:02:03,640 --> 03:02:12,280
wir noch ein Bett. Es sieht auch echt aus wie ein Bett. Jetzt mal ohne Scheiß. Versetzt

1335
03:02:12,280 --> 03:02:22,360
euch mal in diese Detekte. Das sieht aus wie ein Bett. Guck mal, hier oben ist das Kopfstück.

1336
03:02:22,360 --> 03:02:27,480
Hier oben ist das Kopfstück. Das hier ist eine Bettdecke und das hier ist das Bett drum

1337
03:02:27,480 --> 03:02:31,960
rum. Das sieht wirklich aus wie ein Bett. Also, ich kann schon verstehen, dass das als

1338
03:02:31,960 --> 03:02:41,880
Bettdetekt ist. Das ergibt sogar Sinn. Also, das passt schon. Mal gucken, was er mit dem

1339
03:02:41,880 --> 03:03:11,320
Tablet macht. Eine Kühlschrank. Geil. Eine Kühlschrank.

1340
03:03:11,320 --> 03:03:23,800
Vielleicht hat er auch Probleme mit dieser Beleuchtung. Das ist geil. Wir probieren noch

1341
03:03:23,800 --> 03:03:42,120
was aus. Okay. Es ist wie ein Kühlschrank.

1342
03:03:42,120 --> 03:04:08,040
Oh, es geht nicht richtig.

1343
03:04:08,040 --> 03:04:37,000
Es ist schon mal näher dran als ein Bett. Mal eine Fernbedienung ausprobieren.

1344
03:04:37,000 --> 03:04:55,800
Er erkennt da gar nichts mehr. Jetzt erkennt er gar nichts mehr. Probier doch mal das Handy

1345
03:04:55,800 --> 03:05:11,240
auf. Lassen.

1346
03:05:11,240 --> 03:05:36,040
Ich, ich. Okay, okay, okay. Was?

1347
03:05:36,040 --> 03:05:54,840
Das andere erkennt er aber nicht wirklich. Ideen.

1348
03:05:54,840 --> 03:06:10,280
Das glaube ich. Das, wo ist der Crap überhaupt? Mal gucken, ob er den ergibt.

1349
03:06:10,280 --> 03:06:27,560
Ja, ich glaube, er ergibt den auch, dass da rechts noch so viel anderes Zeug drauf ist.

1350
03:06:27,560 --> 03:06:53,480
Ich glaube, das ist der Crap. Ja, das ist der Crap, das ist der Crap.

1351
03:06:53,480 --> 03:07:23,240
Okay Leute, vergesst, das klappt nicht. Das klappt nicht.

1352
03:07:23,240 --> 03:07:40,520
Aber wohlgemerkt, das Ding ist ja auch auf Person-Erkennung trainiert, ne?

1353
03:07:40,520 --> 03:07:55,560
Person, also das erkennt er.

1354
03:07:55,560 --> 03:08:21,080
Ja, ich glaube, das ist der Crap, das ist der Crap, das ist der Crap, das ist der Crap.

1355
03:08:21,080 --> 03:08:46,040
Dafür ist er nicht trainiert, das zu können. Naja, aber ich muss sagen, doch ein äußerst

1356
03:08:46,040 --> 03:09:00,280
erfolgreicher Stream, oder? Ich weiß, es geht einfach. Einfach Bild, einfach Objekterkennung,

1357
03:09:00,280 --> 03:09:20,200
ja. Richtig poggers. Äh, übrigens, jaja, als erstes immer Ray steht immer, also, äh,

1358
03:09:20,200 --> 03:09:26,200
gute Frage. Vielleicht sollten wir nämlich mal gucken. Du hast Recht, ich nehme ja immer

1359
03:09:26,200 --> 03:09:31,080
das erste. Leute, ich nehme immer das erste, was ja im Endeffekt gar nicht mal stimmen

1360
03:09:31,080 --> 03:09:41,480
muss. Guck mal hier, ähm, Log, probieren wir das nochmal aus. Also, Summary, ne, Pos,

1361
03:09:41,480 --> 03:09:45,480
ne, Summary. Wir geben jetzt einfach mal aus, was er jetzt erkennt nochmal. Wir probieren

1362
03:09:45,480 --> 03:10:07,640
das nochmal aus. Ob er überhaupt was erkennt. Okay, das ist jetzt oben die, die Pos, ne,

1363
03:10:07,640 --> 03:10:27,520
er erkennt da nix. Der erkennt da nix. Naja, gut. Äh, die G-Streamer-Einstellung, äh,

1364
03:10:27,520 --> 03:10:34,800
ne, glaub, die hab ich nirgendswo gezeigt. Naja, gut. Ähm, was ich mich jetzt noch frage

1365
03:10:34,800 --> 03:10:39,000
ist, das ist eine Sache, die wir jetzt vielleicht noch kurz machen können. Hat jemand eine

1366
03:10:39,000 --> 03:10:45,240
glorreiche Idee, wenn man das hinkriegt, dass das wieder weggeht? Mein Set-Timeout funktioniert

1367
03:10:45,240 --> 03:10:56,480
ja nicht richtig. Ich mein, ich könnte sowas machen hier, ähm, keine Ahnung, Set-Timeout,

1368
03:10:56,480 --> 03:11:06,160
2 Sekunden, oder 2 Sekunden Timeout. Ähm, If, und dann machen wir so was wie Reset, Reset,

1369
03:11:06,160 --> 03:11:11,000
wir machen, wir könnten die Zeit nehmen, irgendwie, irgendwie, keine Ahnung, Set, gleich, äh,

1370
03:11:11,000 --> 03:11:23,500
New, oder hier irgendwie Date, Now. Detection-Layer gibt's, äh, Detection-Layer gibt's nicht,

1371
03:11:23,500 --> 03:11:29,800
der schickt keine leere Detection zurück. Dann wär das einfach, dann könnte ich Resetten.

1372
03:11:29,800 --> 03:11:32,720
Der schickt keine leere Detection, also im Prinzip eigentlich total sinnlos, dass ich

1373
03:11:32,720 --> 03:11:35,600
hier überhaupt prüfe, der schickt ja nur, wenn Detection ist, das kann ich mir eigentlich,

1374
03:11:35,600 --> 03:11:38,160
das kann ich mir eigentlich, eigentlich gut, dass wir darüber gesprochen haben, das kann

1375
03:11:38,160 --> 03:11:46,600
ich mir eigentlich komplett schenken, brauch ich gar nicht. Ne, ne, macht er nicht. Der

1376
03:11:46,600 --> 03:11:57,240
schickt nur, wenn was ist. Ich mein, ich hab das ja backhandmäßig selbst programmiert,

1377
03:11:57,240 --> 03:12:00,680
also ich weiß, dass der nur was schickt. Guck, das sind jetzt irgendwelche Kameras,

1378
03:12:00,680 --> 03:12:04,120
die er schickt, das ist jetzt nicht, guck, es kommt nichts, die ganze Zeit, erst wenn

1379
03:12:04,120 --> 03:12:10,560
da was detektet, kommt was. Äh, wäre da nicht Wild True besser? Sorry, bin noob, ja, äh,

1380
03:12:10,560 --> 03:12:23,760
in Bezug auf was. Also ich mein, was man machen könnte, ist sowas hier, DateTimeNow, dann

1381
03:12:23,760 --> 03:12:43,760
irgendwie, so, also, DateTimeNow, if DateTimeNow minus DateTimeNow größer 2 Sekunden, dann

1382
03:12:43,760 --> 03:13:01,280
ElStyleDisplayNone. Ob das, ob das passt, was ich hier gebastelt hab? Achso, Moment, ey,

1383
03:13:01,280 --> 03:13:17,520
passt eigentlich. So, geht's jetzt weg?

1384
03:13:17,520 --> 03:13:36,240
Äh. Okay.

1385
03:13:36,240 --> 03:14:02,040
Was mach ich denn, verkehrt mich jetzt so? Ah, falsch rum, ja klar, es ist DateTimeNow

1386
03:14:02,040 --> 03:14:20,720
minus früher, ha, richtig, BigBrainChat, bam, jetzt geht's noch 2 Sekunden weg, jawoll,

1387
03:14:20,720 --> 03:14:32,360
du kannst den TimeOut einfach nutzen, okay, jetzt, jetzt komm hier BigBrain, clearTimeOut,

1388
03:14:32,360 --> 03:14:38,840
also ich sag einfach hier drinnen immer, clearTimeOut, ich, TimeOut, ich cleare mich da irgendwie

1389
03:14:38,840 --> 03:14:51,560
selbst oder so. Ja, aber so funktioniert es doch, aber so funktioniert es doch auch, so

1390
03:14:51,560 --> 03:14:54,360
geht's doch auch. Wie gesagt, das ist eben mega dirty gemacht hier gerade, na, Hauptsache,

1391
03:14:54,360 --> 03:14:59,320
ich wollt jetzt nur mal, dass man was anzeigen kann. So, wir machen mal ein bisschen länger,

1392
03:14:59,320 --> 03:15:10,360
3 Sekunden, 3 Sekunden wird es, glaub ich, frei. Aber das Coole ist, man hat jetzt ziemlich

1393
03:15:10,360 --> 03:15:21,240
wenig Fehlalarme. Erkennt er das mit Machine Learning? Ja, das ist trainiert auf irgendeine

1394
03:15:21,240 --> 03:15:33,800
Standard Image Database. Komm, wir machen mal die Erkennung runter und schauen, ob er,

1395
03:15:33,800 --> 03:15:48,000
ob er vielleicht doch irgendwie den Schraubendreher oder so erkennt. Achso, jetzt muss ich größer

1396
03:15:48,000 --> 03:15:54,880
3 machen. Ne, ich muss größer gleich 3 machen. Wir machen mal die Image Detection ein bisschen

1397
03:15:54,880 --> 03:16:07,640
weniger aggressiv. Komm, wir gehen mal auf 40% Dings hier, Confidence runter. Wisst

1398
03:16:07,640 --> 03:16:28,200
ihr, was wir... Na, okay, okay, okay, okay, na ja, MonkaS. Baseball-Bat. Aber jetzt hat

1399
03:16:28,200 --> 03:16:38,360
er 2 Sachen erkannt. Guck mal hier, Baseball-Bat, Baseball-Bat. Na gut, ne gewisse, ne gewisse

1400
03:16:38,360 --> 03:16:48,400
Ähnlichkeit ist da. Oh, da oben dreht er ab. Ja, siehste, deswegen hab ich die Confidence

1401
03:16:48,400 --> 03:16:59,360
schon ein bisschen höher gestellt. Hund? What? Wo ist dein Hund? Okay, das darf er

1402
03:16:59,360 --> 03:17:16,000
nicht machen, 60%. 60% passt schon. 60% ist schon gut, 60% funzt auch. Aber ich finde

1403
03:17:16,000 --> 03:17:31,640
das ultra nice, wie verhältnismäßig einfach man das machen kann. Ne, jetzt detaktiert

1404
03:17:31,640 --> 03:17:39,560
er nichts mehr, jetzt hat er 60% Confidence. Man muss das auch ein bisschen höher machen,

1405
03:17:39,560 --> 03:17:49,840
weil ansonsten erkennt er hier irgendwelche Spinnenweben als Zeug. Wie ist dieses Framework

1406
03:17:49,840 --> 03:17:56,040
trainiert worden? Also es ist ja schon komplett fertig, ja, Object Detection Service, der

1407
03:17:56,040 --> 03:18:00,200
übrigens auch, glaub ich, eher gedacht ist für Kamerabilder und nicht für so Close-Ups,

1408
03:18:00,200 --> 03:18:14,240
wie denkt er halt, es ist ein Baseball-Schläger. Das ist TensorFlow Lite mit, wisst ihr was

1409
03:18:14,240 --> 03:18:18,880
wir auch machen, noch machen können, also heute nicht, wir können das über gRPC ansteuern

1410
03:18:18,880 --> 03:18:23,520
anstatt über Rest, weil das wahrscheinlich nicht viel Unterschied macht mit diesem kleinen

1411
03:18:23,520 --> 03:18:30,400
Spielchen. Es dürfte Performance-mäßig nur wirklich keinen großen Unterschied machen,

1412
03:18:30,400 --> 03:18:35,300
denke ich. Die Bilder sind ja nicht groß, das sind, wie groß waren die Bilder? 11 Kilo

1413
03:18:35,300 --> 03:18:45,280
Byte, 11 Kilo Byte kann man auch mal in so einem Postrequest schicken. Ja. Aber man

1414
03:18:45,280 --> 03:18:48,040
kann es ja mal probieren, da haben wir auf jeden Fall den nächsten Stream schon was

1415
03:18:48,040 --> 03:18:53,120
zu tun. Übrigens, nice, wie viele Leute heute am Start sind. Pongas, ich habe selten Programmier-Streams

1416
03:18:53,120 --> 03:19:01,520
mit teilweise 240 Zuschauern, also richtig krasser Scheiß hier. Any Primors, nee, nee,

1417
03:19:01,520 --> 03:19:04,640
ich bin schon froh über jeden, der da ist. Ich finde es übrigens allgemein, da muss ich

1418
03:19:04,640 --> 03:19:12,320
den Chat ja mal, ja, ohne zu sehr rumzuschleimen und ich sage, ich habe wirklich, und das meine

1419
03:19:12,320 --> 03:19:14,840
ich jetzt ernst, das ist nicht diese übliche Geschichte mit irgendwie, ah, ich habe die

1420
03:19:14,840 --> 03:19:21,840
besten Zuschauer und so, mein Chat ist wirklich extrem angenehm. Vergleiche das mal mit anderen

1421
03:19:21,840 --> 03:19:27,800
Chats, da ist im Prinzip zwei lustige Copypastas am Start, aber ich meine, überlegt euch

1422
03:19:27,800 --> 03:19:32,560
mal, hier helfen sich sogar die Leute untereinander. Ich habe im Chat schon so viele Fragen gesehen,

1423
03:19:32,560 --> 03:19:38,040
wo dann einer darauf geantwortet hat. Das hast du nirgendswo auf Twitch sonst. Das ist nur

1424
03:19:38,040 --> 03:19:45,320
hier im, nur der Cute Chat kann das. Never sub, never donate, du hast, du hast die Dry

1425
03:19:45,320 --> 03:19:57,160
Heart Emote vergessen. So, wie hat das hier Person, Person. Also das scheint schon spezialisiert

1426
03:19:57,160 --> 03:20:01,120
zu sein auf Personenerkennung. Ja, wie das Ganze trainiert wurde, muss man sich hier mal

1427
03:20:01,120 --> 03:20:14,480
durchlesen. TensorFlow Lite, ok. Was für Dinger, Coco SSD, MobileNet, ich habe keine Ahnung,

1428
03:20:14,480 --> 03:20:22,640
was das ist. Nee, das ist was anderes, oder? Ich kenne mich mit TensorFlow Machine Learning

1429
03:20:22,640 --> 03:20:26,280
Zeug nicht wirklich gut aus, deswegen ist das für mich alles so böhmische Dörfer.

1430
03:20:26,280 --> 03:20:46,960
Ja, Kengel, da müsste ich aber irgendeine, irgendeine lernen, wie man gRPC richtig verwendet.

1431
03:20:46,960 --> 03:20:54,160
Habe ich noch nicht gemacht. Könnte man aber machen. Ich finde es so geil, Leute. Ich finde

1432
03:20:54,160 --> 03:20:57,760
das so geil, wie ihr das erkennt. Ich mache mal kurz hier Fullscreen, dass wir die ganze

1433
03:20:57,760 --> 03:21:03,000
Sache mal ordentlich und entsprechend huldigen können. Guckt euch das mal an, wie geil das

1434
03:21:03,000 --> 03:21:22,680
funktioniert. Wie geil das funktioniert. Das ist so ein Wahnsinns Pock. Das hätte ich

1435
03:21:22,680 --> 03:21:31,120
nicht gedacht, dass das so gut klappt. Also WebSockets in WebAssembly habe ich nie gemacht.

1436
03:21:31,120 --> 03:21:41,040
Das Kästchen blinkt wegen dem Timeout. Ja, das geht nach 3 Sekunden weg. Das bin ich

1437
03:21:41,040 --> 03:21:54,280
nicht. Mit einem anderen Video. Hast du eins? Wir können das noch mal schnell mit einem

1438
03:21:54,280 --> 03:22:01,960
anderen Video testen. Ja, klar. Was haben wir hier? YouTube. Aber YouTube Videos konvertieren

1439
03:22:01,960 --> 03:22:18,400
ein Format, was der versteht, ist gar nicht so einfach. YouTube. Surveillance-Test-Video

1440
03:22:18,400 --> 03:22:29,520
oder so. Ja, meins ist besser. Das Gute daran ist, dass es nicht sonderlich viel CPU-Last

1441
03:22:29,520 --> 03:22:45,860
ist. Ja, aber das handlar dann über numerator, 총itytier. Aber ob du das nenne, die happens

1442
03:22:45,860 --> 03:22:47,860
Sibaro, was ist das?

1443
03:22:48,500 --> 03:22:52,020
Nee, das bringt jetzt nichts. Wir brauchen da schon ordentliche Aufnahme von draußen.

1444
03:22:53,780 --> 03:22:59,300
Okay, wir suchen einfach noch einen Park. Outdoor-Park.

1445
03:23:04,540 --> 03:23:06,880
Das ist die Pedobear-Videos hier, was ist da los?

1446
03:23:08,580 --> 03:23:11,820
Summer Bench Workout, exakt.

1447
03:23:11,820 --> 03:23:17,060
Das ist gut, da können wir sehen, wie die getrackt wird.

1448
03:23:18,580 --> 03:23:21,580
Da können wir sehen, wie die getrackt wird durch das Bild, das ist gut.

1449
03:23:23,020 --> 03:23:25,020
YouTube-DL

1450
03:23:25,340 --> 03:23:27,340
Exit

1451
03:23:32,340 --> 03:23:36,580
Das Video ist super und draußen. Real-Life durch den Stich.

1452
03:23:36,580 --> 03:23:45,060
Es ist aber nicht so einfach, YouTube-Videos in Format zu konvertieren, was funktioniert, also das kann sein, dass es nicht klappt.

1453
03:23:45,700 --> 03:23:47,860
Was nehmen wir denn da jetzt mal? 22?

1454
03:23:50,260 --> 03:23:52,260
HVC1

1455
03:23:54,260 --> 03:23:56,260
30 FPS

1456
03:23:56,260 --> 03:24:00,260
YouTube-DL

1457
03:24:03,620 --> 03:24:05,620
Das kann durchaus sein, dass es nicht funktioniert.

1458
03:24:07,940 --> 03:24:09,940
What?

1459
03:24:10,980 --> 03:24:12,980
Muss ich das updaten?

1460
03:24:13,860 --> 03:24:15,860
YouTube-DL

1461
03:24:15,860 --> 03:24:19,860
YouTube-DL

1462
03:24:23,380 --> 03:24:25,380
YouTube-DL

1463
03:24:28,580 --> 03:24:30,580
Nehmen wir mal das kleine.

1464
03:24:31,780 --> 03:24:33,780
Das geht.

1465
03:24:33,780 --> 03:24:42,180
Okay, das für uns, für Object Detection sollte das ausreichen.

1466
03:24:47,140 --> 03:24:50,100
Okay, also das heißt, wir machen jetzt FFmpeg.

1467
03:24:52,260 --> 03:24:55,540
Ne, eigentlich, eigentlich können wir das, wir müssen es aber umbenennen.

1468
03:24:55,540 --> 03:25:06,020
Ich bin mir nicht sicher, ob das das einfach so frisst, ehrlich gesagt.

1469
03:25:07,460 --> 03:25:12,180
Benen wir den Kram mal und jetzt palten wir das mal rein.

1470
03:25:15,780 --> 03:25:17,780
Publish

1471
03:25:19,860 --> 03:25:21,860
Ne, der frisst das YouTube-Video nicht.

1472
03:25:21,860 --> 03:25:28,500
Das muss man jetzt in irgendein anderes Format konvertieren, dass er das kapiert.

1473
03:25:32,100 --> 03:25:36,580
Wie, wie, also in welches Format kann ich das konvertieren, dass es das kapiert?

1474
03:25:39,140 --> 03:25:41,140
Dass ich das verwenden kann.

1475
03:25:46,340 --> 03:25:48,340
Seit wann streamst du hier? Seit zwei Jahren oder so?

1476
03:25:48,340 --> 03:25:50,340
FFmpeg

1477
03:26:02,340 --> 03:26:06,340
Okay, jetzt reencode der erstmal, aber es geht schnell.

1478
03:26:08,740 --> 03:26:10,740
Ne, oder? Der reencode klappt gar nicht.

1479
03:26:11,380 --> 03:26:13,380
Ach, Moment, das ist

1480
03:26:15,220 --> 03:26:17,220
Moment mal, ist das jetzt ein H2-64-Stream?

1481
03:26:17,220 --> 03:26:21,220
Das war vorher ein Mpeg-2, ja, kann man ja nicht wundern, dass das nicht funktioniert hat.

1482
03:26:22,500 --> 03:26:24,500
FFprobe?

1483
03:26:25,300 --> 03:26:27,300
Ach ne, FFprobe-Floor?

1484
03:26:29,060 --> 03:26:31,060
Ah, MonkaS.

1485
03:26:36,100 --> 03:26:38,100
Wie kriege ich das jetzt konvertiert?

1486
03:26:38,100 --> 03:26:53,140
Minus C, copy, no audio, okay, okay, klubts.

1487
03:26:57,940 --> 03:27:01,940
Ja, ich hab keine Ahnung, welches Format ich das konvertieren muss, ehrlich gesagt, dass es funktioniert.

1488
03:27:01,940 --> 03:27:07,940
Ähm, also die normalen Videos sind problematisch. Oh, es geht, es geht einfach.

1489
03:27:10,580 --> 03:27:12,580
Bensch, oh, guck mal.

1490
03:27:13,780 --> 03:27:15,780
Person.

1491
03:27:16,820 --> 03:27:18,820
Oh, jetzt spackt er rum, Alter.

1492
03:27:21,060 --> 03:27:23,060
Meine Detection ist kaputt.

1493
03:27:23,060 --> 03:27:30,100
Und, und, ich hab, ich hab viel zu viele Keyframes, 95% CPU-Last, MonkaS.

1494
03:27:33,620 --> 03:27:38,100
Das ist mein Browser, der rumspackt, Alter, ich muss, oder ist das das Ding?

1495
03:27:43,300 --> 03:27:46,340
Kann es sein, dass dieses Video ultra viele Keyframes hat?

1496
03:27:46,340 --> 03:27:49,380
Ja, das Video ist nicht so detailliert, ich glaube, das Video hat zu viele Keyframes.

1497
03:27:52,180 --> 03:27:54,180
Oder auch nicht.

1498
03:27:54,980 --> 03:27:57,780
Okay, ne, das ist, das ist das Frontend, was rumspackt.

1499
03:27:58,580 --> 03:28:00,580
Alles klar, das ist das Frontend, was rumspackt.

1500
03:28:02,500 --> 03:28:10,180
Nicht, nicht das Backend, okay, ähm, äh, ich muss das mit dem Timeout kurz wegmachen.

1501
03:28:10,180 --> 03:28:15,220
Prom.

1502
03:28:16,340 --> 03:28:18,340
Pluton plant.

1503
03:28:21,940 --> 03:28:23,940
Jetzt geht's.

1504
03:28:25,780 --> 03:28:27,220
Komm mal, her.

1505
03:28:32,340 --> 03:28:34,820
Ja, hier ist er, hier ist er.

1506
03:28:36,500 --> 03:28:38,500
Ja, ihr ihr auch.

1507
03:28:38,500 --> 03:28:44,600
Guck mal hier, wie gut das funktioniert.

1508
03:28:44,600 --> 03:28:51,220
Es lag ein bisschen hinterher, aber ist das nicht richtig poggers?

1509
03:28:51,220 --> 03:28:53,940
Guck mal hier, wie es trackt.

1510
03:28:53,940 --> 03:29:05,780
Mensch, das ist ja richtig geil.

1511
03:29:05,780 --> 03:29:13,260
Okay, bewegt er sich noch ein bisschen mehr als da...

1512
03:29:13,260 --> 03:29:18,180
Also ich meine, so über das Bild nicht die Bank hoch und runter, dass man mal was anderes

1513
03:29:18,180 --> 03:29:20,260
sieht, wie das trackt.

1514
03:29:20,260 --> 03:29:24,580
Okay, die Person hört angeblich...

1515
03:29:24,580 --> 03:29:27,580
Guck mal, er erkennt es.

1516
03:29:27,580 --> 03:29:31,100
Ich muss mal kurz gucken, wie viel Auslastung das Ding hat.

1517
03:29:31,100 --> 03:29:32,100
Oh, jetzt wird gejumpt.

1518
03:29:32,100 --> 03:29:34,260
Jetzt wird übelst gejumpt, Honor.

1519
03:29:34,260 --> 03:29:36,180
Ja, das mache ich auch morgens immer.

1520
03:29:36,180 --> 03:29:39,260
Guck mal, nur 7% CPU-Last.

1521
03:29:39,260 --> 03:29:42,500
Hat er keinen Track erkennt?

1522
03:29:42,500 --> 03:29:49,100
Oh, jetzt wird es aber anstößig langsam.

1523
03:29:49,100 --> 03:29:52,540
Aber wie gut er das erkennt.

1524
03:29:52,540 --> 03:29:57,540
Guck mal hier, sogar die Umrisse stimmen halbwegs.

1525
03:29:57,540 --> 03:30:09,700
Guck mal hier, das erkennt sogar, dass die Grillgestütze zu macht.

1526
03:30:09,700 --> 03:30:26,500
Ich meine, das ist auch ein Vorwand, sich Hottegymnastikgrills anzugucken jetzt, aber

1527
03:30:26,500 --> 03:30:29,540
wie gut das klappt, ultra nah ist.

1528
03:30:29,540 --> 03:30:33,860
Guck mal hier, wie gut er erkennt sogar, also die Umrisse sind ziemlich gut, müsst ihr

1529
03:30:33,860 --> 03:30:34,860
mal sagen.

1530
03:30:34,860 --> 03:30:35,860
Chat.

1531
03:30:35,860 --> 03:30:53,420
So, man treibt es nicht.

1532
03:30:53,420 --> 03:30:58,460
Okay, ich hoffe ja, dass die sich noch ein bisschen über das Bild irgendwie bewegt, dass

1533
03:30:58,460 --> 03:31:01,780
man auch erkennt, dass das in der Bewegung gut funktioniert.

1534
03:31:01,780 --> 03:31:15,540
Was machst du mit dem Tool?

1535
03:31:15,540 --> 03:31:16,700
Rumspielen erstmal.

1536
03:31:16,700 --> 03:31:21,060
Guck mal, und das alles mit 6% CPU-Auslastung.

1537
03:31:21,060 --> 03:31:24,780
Guck mal, wie es wieder erkannt hat, dass es jetzt steht.

1538
03:31:24,780 --> 03:31:30,260
Ich meine, es ist ein Keyframe hinterher, also es ist klar, ich meine, es extractet

1539
03:31:30,260 --> 03:31:34,740
nur jeden Keyframe, das heißt, es leckt ein bisschen hinterher bis zum nächsten Keyframe,

1540
03:31:34,740 --> 03:31:37,220
aber who cares, dafür braucht es kaum CPU-Auslastung.

1541
03:31:37,220 --> 03:31:42,220
Sehr nice.

1542
03:31:42,220 --> 03:31:47,620
So, gibt es noch irgendwelche Gymnastik-Videos, wo wir mal gucken können?

1543
03:31:47,620 --> 03:31:52,900
Oder, ich gucke mal, ob die sich später noch ein bisschen bewegt hier, nee, nee, nee,

1544
03:31:52,900 --> 03:31:53,900
das...

1545
03:31:53,900 --> 03:31:58,780
Aber doch, hier, am Ende, am Ende läuft es noch ein bisschen rum.

1546
03:31:58,780 --> 03:31:59,780
Okay.

1547
03:31:59,780 --> 03:32:00,780
Outdoor.

1548
03:32:00,780 --> 03:32:10,260
Sag mal, was sind das alles für Videos, Alter?

1549
03:32:10,260 --> 03:32:13,300
Überall die Hot'n'Grills bei irgendwelchen Workouts.

1550
03:32:13,300 --> 03:32:26,820
Okay, der bewegt sich bestimmt ein bisschen mehr jetzt.

1551
03:32:26,820 --> 03:32:27,820
Nee.

1552
03:32:27,820 --> 03:32:28,820
Ah, doch.

1553
03:32:28,820 --> 03:32:34,620
Excellent, der bewegt sich ein bisschen mehr.

1554
03:32:34,620 --> 03:32:38,180
Okay, probieren wir das mit dem Video noch mal aus.

1555
03:32:38,180 --> 03:32:54,060
Ey, diese Fitness-Videos sind optimal, um so was zu testen.

1556
03:32:54,060 --> 03:32:57,740
Da bewegen sich Leute drauf und das ist genau das, was man brennt.

1557
03:32:57,740 --> 03:33:04,820
Personen im Hintergrund, gut, ich nehme aktuell immer nur das erste, was matcht.

1558
03:33:04,820 --> 03:33:14,300
Stimmt, bei zu vielen Personen, ich matche auch aktuell nur eins.

1559
03:33:14,300 --> 03:33:33,820
So, was nehmen wir, 18, 18, was, nee, oh, okay, also ich loop zwei, Punkt, mp4, und

1560
03:33:33,820 --> 03:33:39,060
jetzt müssen wir das Ganze konvertieren, loop zwei, Punkt, loop zwei, beste, beste Namen

1561
03:33:39,060 --> 03:33:40,060
aller Zeiten.

1562
03:33:40,060 --> 03:33:50,300
So, und jetzt füttern wir das hier rein, excellent, loop zwei.

1563
03:33:50,300 --> 03:33:56,460
Es kann sein, dass er das Video nicht frisst, wie gesagt, Videos von YouTube, ah doch, geht,

1564
03:33:56,460 --> 03:33:57,460
easy.

1565
03:33:57,460 --> 03:34:13,140
Hier, Person, er kennt doch, und das alles bei fast kaum CPU-Last, nee, zwei Kästen zusammen

1566
03:34:13,140 --> 03:34:15,180
kann er nicht, weil wir nur ein Overlay-Element haben.

1567
03:34:15,180 --> 03:34:24,460
Also, es kann durchaus sein, dass er theoretisch die Kinder im Hintergrund erkennt, aber der

1568
03:34:24,460 --> 03:34:29,380
nimmt immer nur das, was er am höchsten erkennt, als erstes.

1569
03:34:29,380 --> 03:34:36,340
Das läuft immer Machine Learning, ja, komm mal hier, er hat gleich erkannt, bäm, dahin

1570
03:34:36,340 --> 03:34:37,340
steht er.

1571
03:34:37,340 --> 03:34:44,300
Ich bin echt, ihr merkt vielleicht, ich bin wirklich extrem begeistert, wie gut das geht.

1572
03:34:44,300 --> 03:34:54,220
Mein erstes AI-Einsatzgebiet bisher, ich habe ja noch nie nichts AI-mäßiges bisher

1573
03:34:54,220 --> 03:34:55,220
verwendet.

1574
03:34:55,220 --> 03:35:00,660
Na okay, das kriegt er nicht hin, ist ja nur ein Keyframe alle zwei Sekunden oder so.

1575
03:35:00,660 --> 03:35:15,500
Kannst du die erkannten Keyframes auch als Standbild exportieren, um dann zum Beispiel

1576
03:35:15,500 --> 03:35:16,500
an Smartphones zu schicken?

1577
03:35:16,500 --> 03:35:18,660
Theoretisch kann ich das machen.

1578
03:35:18,660 --> 03:35:25,100
Notifications, muss ich mir dann irgendwie überlegen, wie man das einbaut.

1579
03:35:25,100 --> 03:35:29,540
Als nächstes werde ich jetzt erstmal einbauen, dass der automatisch was aufnehmen kann, wenn

1580
03:35:29,540 --> 03:35:30,540
er was erkennt.

1581
03:35:30,540 --> 03:35:41,260
Also ich werde es so machen, der zeichnet permanent 10 Sekunden auf und sobald es einen

1582
03:35:41,260 --> 03:35:44,940
Aufnahme-Event gibt, das kann entweder ein Klick im Web-Interface sein oder Motion-Erkennung

1583
03:35:44,940 --> 03:35:49,140
oder eine gewisse Zeit, dann nimmt er auf und hängt aber die letzten 10 Sekunden an

1584
03:35:49,140 --> 03:35:53,420
die Aufnahme mit dran, weil ansonsten hast du das Problem, wenn es Motion-Erkennung macht

1585
03:35:53,420 --> 03:35:58,460
und die Person übelschnell rennt, dann kriegst du es nicht mit.

1586
03:35:58,460 --> 03:36:04,060
Deswegen nehme ich immer die letzten 10 Sekunden auf und mache die an der Aufnahme mit dran.

1587
03:36:04,060 --> 03:36:08,780
Man sieht jetzt genau, dass da ungefähr zwei Sekunden der Keyframe hinten dran sind, habt

1588
03:36:08,780 --> 03:36:19,340
ihr gesehen, Cellphone, exellent, nein ich habe keine Informatik studiert, Cellphone

1589
03:36:19,340 --> 03:36:23,700
ist das, ok wusste ich noch gar nicht, aber aktuell ist er der Meinung, Cellphone ist

1590
03:36:23,700 --> 03:36:28,900
das höchste, das wichtigste, was er erkannt hat in dem Bild, exellent, ich bin wirklich

1591
03:36:28,900 --> 03:36:38,700
zutiefst begeistert, wie gut das funktioniert, aber Leute, ich habe Hunger, ich habe Hunger,

1592
03:36:38,700 --> 03:36:44,780
ich hoffe euch hat der Stream gefallen, schön, dass so viele da gewesen sind, wenn ihr noch

1593
03:36:44,780 --> 03:36:49,900
Prime übrig habt und mich supporten wollt, wäre das sehr nice, eine Runde Setout muss

1594
03:36:49,900 --> 03:36:54,820
sein, ich denke, das war auch mal wirklich ein interessanter Stream, ihr habt mir auch

1595
03:36:54,820 --> 03:36:59,220
gesehen, wie viele Diskussionen im Chat waren und wie viele Leute am Start waren, bei dem

1596
03:36:59,220 --> 03:37:09,700
Programmier Stream, sehr nice Geschichte, ja und jetzt haben wir Schluss, ich gehe jetzt

1597
03:37:09,700 --> 03:37:12,780
was essen, dann gehe ich später eine Stunde oder eineinhalb, ja zwei Stunden gehe ich pennen,

1598
03:37:12,780 --> 03:37:30,540
machts gut, wir sehen uns im nächsten Stream, bis dann, see you.

