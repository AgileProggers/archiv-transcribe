Oh ich hab nen Wackelkontakt, okay Quaid, was ist los?
So, ich glaub jetzt gehts, alter was war das denn grade, weiß nicht wo der Wackelkontakt
herkommt ehrlich gesagt, aber das ist ziemlich pepega pains champ, vermute mal aus dem Verlängerungskabel,
weil das ein Headsetkabel, das ist so dick und robust und stabil, da wird nix sein, ja
das ist bestimmt aus dem Verlängerungskabel, aber doof, na gut nix bewegen, dann gehts
auch wieder, aber jetzt müsste ich mich eigentlich relativ normal anhören oder, das ist eigentlich
so wie immer, kurz checken, Lautstärke ist eigentlich auch okay, ne ne das ist nicht
an der Stelle wo es rollt, jetzt mich rollen alter, lan, so, jetzt mich rollen alter, ja
okay, aber das ist irgendwie so ganz richtig, das ist eben noch nicht oder, warte mal, wobei
eigentlich ist okay, na ich hoffe mal wackelkontakt technisch hat sich das jetzt erledigt, gibt
das irgendwo, jetzt mal ist das ein Mikrofon, warte mal, mal was gucken, test, test, test,
das ist mono, test, test, test, test, test, ist exakt das gleiche, müsste also auf beiden
Seiten gleich laut sein, ne das scheint echt noch ein bisschen wackelkontakt zu haben, weil
ich höre beispielsweise höre ich mich auf der rechten Seite nicht so laut wie auf der
linken Seite, das ist irgendwie komisch, so, vielleicht jetzt besser, so, ja, ich glaube
das ist besser, ich habe jetzt nochmal rein rausgesteckt, okay keine Ahnung was das für
Schmerzen hatte, ich schwarze es nicht, aber kann ich nur sagen, ja moin Leute, warum seid
ihr denn eigentlich schon alle da, müsst ihr nicht arbeiten, habt ihr Urlaub, wollt
ihr jetzt eine Runde Javascript Hackermans zugucken, von jemand der eigentlich davon
gar keine großartige Ahnung hat, Urlaub, Pock, ich würde sagen Pockers, offiziell bist du
im Homeoffice, tja, das ist ja Fortbildungsmaßnahmen hier, kann man ja durchaus so durchgehen lassen,
ne, mein Chef hat sogar auch mal gesagt, wenn wir irgendwelche, keine Ahnung, Azure Sachen
auf YouTube angucken oder so abends, da können wir das theoretisch auch einreichen, habe ich
aber nicht gemacht, also ich meine, wenn es direkte Arbeit profitiert, ist es natürlich
auch nur fair, haben ja alle was von, okay, also wo sind wir stehen geblieben, wir müssen
erstmal den Kicks, den Kicks to do wieder deployen, weil ich habe die Server ja nicht
standardmäßig ab, ich hoffe ich habe alles richtig gemacht, nichts vergessen, also wenn
alles funktioniert Leute, sollte es gleich unter todo.caqw.services, sollte gleich was
kommen, schauen wir mal, dann können wir weitermachen, weil ich lasse die App nicht oben, also Load
Balancer habe ich schon da, Server ist erstellt, okay, weil ich lasse die Kisten ja nicht oben,
das kostet mich ja dann irgendwie, keine Ahnung, 8 Euro im Monat für nichts im Endeffekt, es
ist sehr merkwürdig, dass das sich links und rechts unterschiedlich laut anhört, was
kostet der Load Balancer, die kleinen Load Balancer kosten glaube ich 5 Euro, hat man
nicht Server, Load Balancer, die kleinen Load Balancer kosten 5 Euro im Monat, der mittlere
kostet 17 und der große kostet 35, ja 16er Zuschauer, genau, also der großartige Unterschied
ist ja eigentlich, Moment, Avira nervt auf dem zweiten Rechner, ich weiß ich habe immer
noch Avira drauf auf dem zweiten Rechner, weil er ist halt irgendwie 8 Jahre alt oder
so, ne ne nicht ganz, also der hauptsächliche Unterschied ist ja eh nur, dass du unterschiedlich
viele Zertifikate und Services Load balancen kannst, was die Performance Unterschiede
ist, ach guck mal, hier steht es ja sogar, 10.000 concurrent connections, 20, 200, 20.000
und 40.000, gleichzeitige Benutzer wohlgemerkt, ne, gleichzeitige, gleichzeitige connections,
was meistens halt ein Benutzer ist, Biakra Diehart, Dankeschön für den Sub, excellent
Subscription, Porgas, also was Target, was war die Frage gerade nochmal, ich lese das
gleich durch, was ist mit Service und Target gemeint, Service und Target ist im Prinzip
die grundsätzliche Konfig, was da machen soll, von welchem Port auf welchem Port und
Target ist die Server, worauf es da letztendlich geht, also Services kannst du einstellen,
ey es ist sehr merkwürdig, dass ich mich, sag mal, hab ich rechts was im Ohr oder was,
warum ist rechts die Sache so, links so unterschiedlich laut, das dürfte eigentlich gar nicht sein,
die Musik ist richtig, aber mein Mikrophone ist irgendwie, ah super, geil, unreachable,
gut job, gut job, ne die Musik ist ja richtig laut, das ist nur mein Mikro, bei euch ist
alles normal oder, okay, hä, okay, ja gut, dann weiß ich jetzt auch nicht, ich mein ich
war grad duschen vorhin, vielleicht hab ich noch Wasser immer oder so, sehr merkwürdig,
ich setz mich mal, also wenn ich das Headset abhabe ist alles gleich laut, okay, aber wenn
ich das Headset aufhabe, dann ist irgendwie links lauter als rechts, ich hab keine Ahnung,
was da abgeht, Backway, Loch im Kopf, die Musik ist ja auch gleich laut, ne ich hab wahrscheinlich
noch ein bisschen Wasser immer oder so, irgendwie keine Ahnung, sehr komisch, so, okay, Service
ist up and running, gucken wir mal, ob das stimmt, Pause, Champ, löst es denn richtig
auf, ping, glaub richtig, ja, hat der Lautbalancer gecheckt, dass der Server aufnehmen soll,
Unhealthy, Target, 1 Server, also alles gut, dann braucht der Lautbalancer einfach noch
das zu checken, ne guck, Service ist die generelle Definition von Port 443, ne jetzt ist er oben,
von Port 443 auf 3000 und Target sind die eigentlichen Server, wo das dann auf Port
43000 läuft, so jetzt sollte es aber eigentlich funktionieren, ja, Kicks to 2 am Start, so,
das ist das, wo wir zuletzt stehen geblieben sind, die to do, die, oh, guck mal, die Progress
Leiste ist broken, Hydrolyzer, danke für den Sub, so da sind wir letztens stehen geblieben
und ich betone das jetzt noch mal, es geht hier nicht darum, irgendwie super krasse App
zu bauen, die jegliche to do Listen Apps ablösen wird oder so, es geht darum, dass fürs Welt
uns Weltkit lernen und to do App sind ja bekannt für die Hello World Anwendung des Internets,
also was in irgendwelchen normalen Programmiersprachen Hello World ist, ist in irgendwelchen Frontend
Frameworks, to do App, so, machen wir unseren Krempel mal auf, äh, das ist auf jeden Fall
nicht richtig, dadus, aber hab ich das eigentlich alles in mein Jet geschmissen, da hat es eigentlich
gar nichts zu suchen, grad die Bildfiles nicht, so, ich glaub, hier sind wir stehen geblieben,
genau, also das erste, was wir jetzt machen, also die Features, die wir noch einbauen können,
haben wir hier stehen, wir bauen heute ne Suche, das werden wir heute wahrscheinlich machen,
aber wir fangen erst mal an, das Ganze ein bisschen hübsch zu machen, weil, also mit
hübsch meine ich nicht so sehr die Optik, die Optik werden wir auch noch ein bisschen
verbessern, wir machen auch ne Dark und Light Theme und sowas, weiß gar nicht, ob ich das
schon da drinnen stehen hab, ne, ähm, aber wir müssen das ein bisschen auslagern und
ein bisschen hübsch machen, wir müssen einzelne Komponenten draus machen, weil, guckt euch
mal mein Index-File an, das ist zwar natürlich noch nix, wildes, ja, aber es ist, ich mein,
wir haben es ja letztes Mal schon ein bisschen aufgehört, wir haben eine extra to do Komponente
draus gemacht, aber zum Beispiel die Buttons könnten wir noch deutlich einfacher machen
als irgendwelche SVGs von Hand reinpasten und die, äh, Progress Komponente ist glaub
ich auch noch gar nicht richtig funktional, das werden wir alles ein bisschen zusammenfassen,
so, jetzt muss ich mal kurz aber Chat gucken, werde bald neben meinem Studium für ein paar
kleine Webseinschreibungen verkaufen, hast du Tipps für das Hosting, wie ich das mit
dem Kunden kläre und abwickele, das hängt immer ein bisschen davon ab, was die wollen,
wollen die reines Frontend, also quasi, sagen wir mal sowas, wir sind Handwerkerfirma XY
und äh, bieten das und das an, also reines Frontend, ohne dass du irgendeinen, irgendeinen
Backend im Service brauchst, dann würde ich sagen Netlify, das ist mit Abstand das einfachste,
Netlify einfach deine Seite hin deployen, Static und fertig ist, die Domain umbiegen
und du hast Ruhe, natürlich ist die billigste Variante wahrscheinlich wirklich ein virtueller
Server bei Hetzner irgendwo, also wenn du wirklich das Minimalste haben willst, da kannst
du nämlich auch mehrere Leute drauf hausten und ich meine, du kommst schon, du kommst
ja schon, wenn das, wenn das die einfache Handwerker Webseiten sind oder sowas, die
haben ja nicht viele Aufrufe, die haben am Tag 5 Aufrufe oder so oder die haben am Tag
20 Aufrufe, da brauchst du nichts, da kommst du ja selbst für was weiß ich, 50, 50 Webseiten
die du anbietest locker mit dem kleinsten V-Server hin und ich glaube, ich weiß nicht,
wir gucken mal gerade das Netlify, heute ist ja kein Sponsor Stream oder so, wir gucken
mal Netlify Pricing, ich glaube das ist standardnehmmäßig nämlich auch free, ja, ja musst du dir mal
sagen, also Netlify ist halt mit Abstand das einfachste, du kannst auch Cloudflare Sites,
weiß gar nicht wie das, Mario danke für den Zapp, weiß gar nicht wie das heißt bei
Cloudflare, die haben auch so ein Static Hosting, na das schöne an Netlify ist halt, du nimmst
die Seite, schiebst das HTML im Endeffekt dahin und die haben halt weltweit schon ihr
CDN verteilt, sodass die Seite immer schnell ausgeliefert wird, du brauchst kein Server,
administrieren musst dich um nichts kümmern, du biegst dein DNS um, Netlify, schiebst
eine neue Version um und die Seite ist da, das ist halt easy, aber die billigste Variante
dürfte wahrscheinlich immer noch ein eigener Hetzner Linux Server oder irgendwas in der
Richtung sein, bedeutet Load Balancer Lastverteilung auf verschiedene Server, ja, kann es, in der
Regel bedeutet es das auch, muss es aber nicht zwangsläufig, also klar die klassische Load
Balancer Geschichte ist Lastverteilung, entweder nach Connections oder nach abwechselnd, das
sind so die zwei hauptsächlich in Load Balancer Modi, die es eigentlich gibt, entweder man
macht es abwechselnd, Verbindung kommt auf Server A, nächste Verbindung kommt auf Server
B, dritte Verbindung kommt wieder auf Server A, also hin und her, aber es gibt auch ein
bisschen intelligenteres Load Balancing, das guckt, wie viele Verbindungen sind schon offen
und macht es dann auf den Server mit den wenigsten Verbindungen, aber nicht unbedingt, man kann
auch so, gerade den Hetzner Load Balancer kann man wunderbar auch als so Art Reverse
Proxy verwenden, der sich um Zertifikate und sowas für dich kümmert, das mache ich jetzt
hier im Prinzip der Einfachheit halber, warum ich den Load Balancer davor habe, ich meine,
ich habe hier mal eine Serverkiste, da ist nichts drauf außer die Node.js Anwendung,
die die Webseite ausliefert und um Zertifikate und Geschiss kümmert sich alles der Load
Balancer im Vorfeld, das ist jetzt rein aus Bequemlichkeitsgründen, für eine Kiste lohnt
sich das natürlich nicht wirklich, weil dann könntest du auch einfach einen Web Server
drauf machen und Zertifikatsmanagement auf dem Server, was auch nicht schwer ist mit
heutiger Software, das ist ja eine Sache von 5 Minuten, haben wir auch schon oft genug
gemacht, aber ich finde es gerade einfach praktischer, du hast den Vorteil aber, wenn
du Load Balancer davor hast und vor allem, wenn du das mit einer festen Floating IP machst,
Fest und Floating, das hört sich jetzt widersprüchlich an, aber was ich meine ist, du kannst dir eine
feste IP anlegen bei Hetzner, die du an verschiedene Server Attachen kannst, wie es dir gerade
passt und da kannst du dir quasi pro externe Seite, die du anbietest, wenn du es halt möglichst
hoch verfügbar machen willst, legst du dir eine IP an und selbst wenn du dann irgendwie
mal was an der Architektur änderst, wenn du sagst, ich steige jetzt von einem Server um
auf einen Load Balancer mit 3 Servern dahinter, dann kannst du diese Floating IP immer mitumziehen,
das ist dann so unterbrechungsfrei, wie es geht, bei allem anderen müsstest du dann
halt DNS Eintrag umbiegen, was jetzt auch nicht so wild ist.
Ja und du hast den Vorteil, wenn du es mit dem Load Balancer machst, du kannst jetzt
beispielsweise, also ich könnte jetzt zum Beispiel ohne Probleme sagen, hier anstatt
anstatt 1 Server hier hinten bei Targets, packe ich noch 3 weitere dahinter, überhaupt
kein Ding.
Und gerade bei so stateless Anwendungen ist halt, also was ohne Backend im Endeffekt,
ist es ja im Prinzip auch egal auf welchem Server man rauskommt, passiert ja eh alles
kleinseitig.
Also mal angenommen, mal angenommen, Kicks2Do wird hier der nächste große Hit, das sieht
übrigens nur so aus, als würde es falsch gehen, macht aber alles richtig.
Also mal angenommen, Kicks2Do wird der riesengroße Hit, könnte ich das einfach scaling auf 50
Web Server.
Du hast Schwachsinn jetzt aber, könnte man machen, so, ja das hatten wir gerade.
Wie gesagt, das, ich sag's noch mal, das einfachste ist Netlify, wenn du einfach nur
deine Seite pushen willst und deine Ruhe haben, am billigsten und flexibelsten ist aber wahrscheinlich
irgendeine Linux Kiste bei Hetzner und die kleinste reicht auch schon, wenn's reine statisches
HTML ist, das braucht ja nix, da kannst du sogar mehrere drauf laufen lassen.
Interessanter wird's dann, wenn die da auch Sachen drauf aktualisieren wollen, ja, sagen
wir mal, das ist irgendwie ein Handwerker, der regelmäßig da auch News drauf posten
will, so nach dem Motto, wir sind im Urlaub, wir haben jetzt Sonneangebote und so was in
der Richtung, dann brauchst du ja eine Möglichkeit, dass der das irgendwie einstellt, du willst
ja nicht, dass der dich jeden Tag anruft und sagst, ich würde gerne, dass du eine neue
News Hardcode ist auf unserer Startseite.
Dann brauchst du irgendeine Art von Backend und da ist halt auch die Frage, will man was
eigenes oder nimmt man irgendwelche Cloud-Services dafür.
Oh, der Samuel hat auch einen gekriegt, Poggers.
Muss kommen mit dem Chat nicht her, Loch im Köpfel, ey.
Hydrolyzer, danke für den Sub, Cobalt-Backend, genau, ähm, gibt es ein Web-Server in Cobalt?
Ach du Scheiße.
Cobalt on Wheelchair, Michael Framework for Cobalt, alles klar.
Okay, du machst dann Apache drauf als Web-Server und der piped es dann weiter nach Cobalt.
Ich brauche mal ein Exempel, okay, das Apache-Config, ach du Scheiße, oh Gott, oh Gott, oh Gott,
das ist der Hello World Controller, kann doch schon mal kein Mensch entziffern.
Alter Cobalt, so krass hässlicher Kram, wieso hostest du das, könnte ich auch machen, könnte
ich auch machen, aber nachdem ich ja öfters mal Sponsored Stream mache, bietet sich das
alles auf Hetzer zu hosten, oh ich muss mal kurz in meine Mails gucken, es ist ja wieder
normale Arbeitstage jetzt, ob irgendeiner noch was geschrieben hat für nächstes Jahr,
weil ich hab noch ein paar offene Sachen.
Kurz eine E-Mail schreiben, ich hab gerade was wichtiges.
Ich hab nämlich schon eine ganze Weile in meine E-Mails nicht reingeguckt, das war jetzt
ziemlich doofer Zeitpunkt, gebe ich zu, oh, ich hab mal wieder eine Mail gekriegt, hallo
Wubblors, ich krieg vermehrt Mails mittlerweile auch für meinen Twitch-Channel, das finde
ich immer äußerst, äußerst spannend.
Bis wann hast du Urlaub, ich hab noch Urlaub, bis, also quasi eine Woche hier, ich muss
am vierten muss ich wieder arbeiten, die Mails sind so geil teilweise, ich habe mir
alle seine Videos angeschaut und bin sehr an deinen Videos interessiert, können sie
uns helfen ein Video zu machen, ich werde über die Kosten für das Schießen sprechen,
das sind meine Kontaktdaten, Telegram und WeChat, na, wenn das mal nicht irgendwie nach
dem Deal des Jahrhunderts klingt, WeChat vor allem, ich muss mal wirklich kurz noch das
durchgucken, ich hab jetzt, ich hab die letzten fünf Tage nicht reingeguckt, hab gerade gesehen,
da sind ein paar halbwegs, ein richtig dummer Zeitpunkt, Leute, ich weiß, aber ich muss
nur kurz gucken, dass ich nichts über sehe, was wichtig ist, oh nein, die Preis-Champ-Domain
läuft ab in sieben Tagen, MonkaS, Renewal failed, was ist da los, warum ist Renewal failed,
Anzeige ist raus, das geht ja nicht, Renewal failed, ok, ich hab's geschafft, also, so,
also, Chat, weiter, weiter zu euch jetzt, also, äh, wieso haustest du solche Projekte nicht
über GitHub, Page ist ja kostenlos, wie gesagt, weil es sich jetzt für Sponsoring-Streams
einfach anbietet, wenn sie über Hetzen erläutert, ansonsten, man könnte das überall hausten,
so statische, statische Seiten, aber der Unterschied ist, das muss ich jetzt an der Stelle auch
nochmal zeigen, das werdet ihr auch gleich sehen, dass, ähm, diese Übungstodo-App,
die wir hier gemacht haben, die ist nicht rein statisch, die hat ein Node.js-Backend,
das ist nämlich eine Mischung aus Server-Site-Render und Client-Site-Render, dass die Seite-Stelle
ausgeliefert wird, das ist der Trick ans Welt-Kit, ähm, der Trick ans Welt-Kit ist, der rendert
die Seiten auf dem Server schon vor, schickt sie rüber zu dir, dass dein Browser die Seite
schneller anzeigt und dann übergibt er das Ganze zu einer Client-Site-Application, d.h.
du brauchst eine Server-Seite, mit GitHub-Pages alleine kommst du da nicht hin, wenn du das
machen willst, du könntest natürlich auch rein statisch exportieren, das geht auch,
dann könntest du über GitHub-Pages laufen lassen, aber es gibt ja noch mehr so Sachen,
wie gesagt, Netlify hat irgendeinen Free-Tier, äh, Cloudflare, wie heißt das Cloudflare
Sites, hat das jemand mal, ja ist das Sites, ich bin mir ganz sicher, Pages, Pages heißt
es bei Cloudflare, äh, kannst du verwenden, es gibt ja viele so statische Seiten-Hoster
mittlerweile, also dafür, wir üben jetzt ja gerade, also das ist ja neu, diese Anwendung
hier, das ist ja eine reine Übungsanwendung, die ist nur entstanden, weil ich mir Svelte
und Svelte-Kit angucken wollte, also quasi, äh, das hier, yikes, ja, gute, gute Werbung
dafür, weil ich mir das hier angucken wollte und, äh, das ist wohl so der neueste Shit,
was JavaScript-Frontend-Sachen angeht und zwar ist wohl der Unterschied hier zu klassischen
Frameworks, wie, äh, was haben wir da, Vue, Angular, React, dass das während dem Bild-Vorgang
quasi verschwindet, bei Vue ist es ja so, wenn du irgendeine Seite mit Vue gemacht hast,
musst du erst mal Vue laden, dass die Seite funktioniert und, äh, Svelte verschwindet
im Bild-Prozess wohl und übersetzt sich quasi, also die komplette Magic, die man hier macht
von Two-Way-Data-Binding und sonst was, wandelt das um in optimiertes Vanilla-Java-Script
und die Seite kannst du dann ausliefern, also von Svelte ist quasi nach dem Bild-Vorgang
nichts mehr übrig, was angeblich dazu führt, dass die Seiten im Durchschnitt 30% kleiner
sind und, äh, schneller geladen sind. Ob das dann im Endeffekt so ist, muss ich wahrscheinlich
von Fall zu Fall zeigen. Jetzt mal ehrlich, musste ein interaktives Web-Movie für meine
Klausur entwickeln und mir ist nicht eingefallen, wo ich da Tests schreiben soll in einer Web-Anwendung,
weiß ich, keine Ahnung. Ich bin, ich bin ja auch, äh, nicht gerade dafür bekannt, dass,
äh, ich hier irgendwie öfters mal Tests onstream mache. Es ist ganz einfach, wenn du keine
Fehler programmierst, brauchst du auch keine Tests. Ist, ist ja eigentlich Obvious. Einfach
keine Fehler machen und dann sagen, deswegen benutze ich, mache ich auch keine, es ist
einfach Produktivitätsboost. Auf Tests verzichten, weil man programmiert eh fehlerfrei. Dementsprechend,
ist natürlich dein Source-Code auch so gut programmiert, dass der sich, dass er nicht
nur fehlerfrei ist, sondern, sondern sich auch selbst dokumentiert. Das heißt, du brauchst
keine Dokumentation schreiben, du brauchst auch irgendwie, irgendwie Swagger, RP-Docs
exportieren oder sowas, das ist alles fehlerfrei und selbsterklärend, selbstdokumentierend,
selbstheilend. Ja, überhaupt kein Problem. Einfach, einfach richtig agiler Progas Hacker-Man.
Du hast eine 4 bekommen, weil du die Tests nicht programmiert hast. Tja, dann weiß
ich auch nicht. Mario XCB, Dankeschön. Ich schreibe auch, 20K Zeilen Code, der sofort
funktioniert, sagt der Alex. Ja, ich mein, wer nicht, wer nicht, also, also, ich weiß
die ganze Welt nicht, aber wir im Stream machen das hier. Also, wir wissen ja, dass jeder
Prime-Sub zu mehr IQ und größerem Hirn führt. Das heißt, wenn einfach nur oft genug
subscribt wird, dann können alle 20.000 Zeilen ohne Fehler schreiben. Müsste einfach nur
oft genug im Stream sein. Und ich mein, wann mache ich denn mal Fehler? Es kommt ganz selten
vor. Wie man zum Beispiel hier sieht, an so einer, an so einer super komplexen To-Do-App,
wie man zum Beispiel sieht, dass die Progas-Zeile nicht mehr funktioniert. Aber wer denkt, das
ist ein Fehler? Weit gefehlt. Das habe ich ja nur gemacht, dass ich euch zeigen kann,
wie man die Progas-Bar wieder fixt. So, Mario, danke für den Sub. Ja, dann ist easy. Dann
kannst du sie ja überall, kannst sogar auf Strato laufen lassen oder so. Wobei, falls
du doch mal was Dynamisches machen willst, hast du da bloß PHP. Und PHP, naja, ist eigentlich
besser als ein Ruf, aber scharf drauf bin ich nicht. Captain CK, dankeschön, 20 Monate.
Pogas-Subscription hier. Der Goldkeks ist schon lange raus, aber mehr als Goldkeks haben
wir gerade nicht. Inwieweit ist es sinnvoll, ein Backend für mehrere Frontends zu haben,
wenn die Code-Pace sehr ähnlich ist? Kann man machen. Ich meine, kann man machen. Wahrscheinlich
musst du es ein bisschen anpassen, aber du kannst ja ohne Probleme irgendein, was weiß
ich, Flutter-Dings, Mobile-App-Gedöns haben, irgendeine Vue.js-Web-Anwendung, eventuell,
was weiß ich, irgendeine WPF-Desktop-Anwendung und, keine Ahnung, zu guter Letzt noch irgendwelche
API-Services oder so. Also, das geht schon. Wobei ich das dann ein bisschen, also möglich,
wobei ich das dann natürlich ein bisschen anders machen würde, hätte ich wirklich
die Anforderung, dass ich ein Service quasi als App anbiete, dann würde ich gucken, dass
ich das nach Möglichkeit so ähnlich baue, wie irgendwie geht. Also dann würde ich vielleicht
irgendeine JavaScript-Web-Anwendung bauen und mir dann aber schon das passende Framework
und Sachen so raussuchen, dass ich dann relativ easy eine Mobile-App draus machen kann und
dann nach Möglichkeit wahrscheinlich noch eine Electron-Desktop-App, das ist halt, wenn
irgendwie einer auf Desktop unbedingt das auf dem Desktop laufen will, hat er auch
genug RAM und kann auch in eine weitere Electron-Anwendung laufen haben, dann habe ich weniger Stress,
aber du kannst natürlich auch komplett unterschiedliche Frontend-Technologien benutzen für dein Backend,
warum nicht? Mein Discord macht es ja ähnlich, Discord macht es aber halt schlau, Discord
hat eine App auf JavaScript-Basis, die dann aber in der Desktop-Version enhanced wird
mit native Functions und Betriebssystem-Integrierung, so muss es eigentlich auch machen. Aber ich
meine, Discord hätte auch sagen können, sie machen eine JavaScript-App im Browser für
mobile und auf dem Desktop machen sie keine Ahnung, eine Qt-Anwendung, was bescheuert
wäre, das wäre halt viel zu großer Umstand. Also ich würde gucken, dass man das in der
Möglichkeit zu weit wie möglich zusammenfasst. Ich habe mit React noch nie was gemacht, aber
ich weiß, dass viele App-Programmierer stehen voll auf React Native, dass man dann irgendeine
Mischung aus React App, React Native und für irgendeine Electron-Geschichte für den Desktop
macht. Dann hast du ziemlich ähnlich, Origin macht es ja auch so, Origin ist ja auch noch
die Origin-Webseite als Desktop-Anwendung mit Browser verpackt. Dann hast du einen Backend,
hast du relativ ähnliche Frontend-Technologien, aber kannst trotzdem alle Plattformen abdecken.
Ja, wer ist dieser Max, das freut mich auch immer, aber danke für den Zapp. Ihh, gehts
alter, Microfokus. Sind das die, wo Cobol in Java übersetzten? Falls ja, dann haben wir
das vielleicht auf der Arbeit sogar. Wie gesagt, bis Viertel. Zum Thema China-Chinese, ich
hab heute Essen bestellt, aber nicht Chinesisch, sondern Türkisch. Köfte-Teller, extra Fleisch
und ich hab so massive Pippo-Fett gemacht, wie das nicht normal. Neubi, danke für den
Zapp. Tja, der ist halt besonders agil. Was gibt's denn für bekannte JavaScript-Testing-Frameworks?
Ich kenn bloß, ich glaub Jest heißt das oder so. Das ist das Einzige, was ich kenne. Okay,
der Chat kennt mehr. Jest kenn ich aber auch nur, weil das glaube ich relativ an Ruby
R-Spec angelehnt ist. Was hab ich da mal im Zusammenhang mit gesehen, da brauchen wir
ein ordentliches Beispiel. Alle haben auch nicht einfach mal ein schönes Beispiel. Hier,
Expect Some. Das sieht ein bisschen nach R-Spec aus. Eins muss man Ruby echt mal zugute halten.
Also Ruby finde ich ist mit Abstand die lesbarste Sprache, die es gibt. Sogar die Tests in Ruby
sehen gut aus. Doofes Beispiel, was sie hier haben. Das ist kein allzu schönes Beispiel
hier, aber das geht auch. Sogar Tests lesen sich in Ruby gut. Okay, ich hab den Chat geschafft.
Jetzt können wir uns mal der Sache widmen. Leute, ich muss mal kurz die Musik austauschen.
Das wäre das gleiche. Nein, nein, nein, nicht Lego Creations. Wo sind wir stehen geblieben?
Es ist ja noch winterlich. Mach mal das. Okay, exellent. Auf geht's. Rust Tests. Wie
heißt denn das? Rust Testing? Oder nee, das war eingebaut in Rust sogar, glaube ich. Es
ist lange her, da ich was mit Rust gemacht hab. Da war das noch nicht mal 1.0 raus. Mod
Tests. Ich würde das tatsächlich nicht wundern, wenn bei den Rust Tests Leute von Ruby dabei
sind, weil ich weiß, dass am Anfang zumindest relativ viele aus der Ruby Community auf Rust
aufgesprungen sind, auch wenn es komplett andere Sprache ist. Also folgende Features, da werden
wir uns heute mal drum kümmern. Wir bauen eine Suche, wir bauen ein Dark Light Theme und
das ist das erste, was wir machen. Wir machen das mal ein bisschen hübsch, weil es ist
mittlerweile doch schon sehr unübersichtlich und eklig. Wir werden das alles mal ein bisschen
den Komponenten auslagern und gut ist. Dann können wir noch gucken, dass wir die To Do's,
dass man einzelne To Do Bücher anlegen kann und anzwitschen kann dazwischen. Müssen wir
mal gucken, da müssen wir die Struktur ändern, das ist wahrscheinlich ein bisschen schwieriger.
Dann können wir gucken, dass man die To Do Listen als Links sharen kann und jemand anderem
schicken. Das dürfte relativ easy sein. Flofos, danke für den Sub. Ja, so sehe ich
das auch. Einfach keine Fehler machen, easy. Ja, Hello World sozusagen. Massive Subscription,
dazu kann ich nur sagen. Nee, der falsche Subscriber. Ja, To Do Apps sind ja quasi das
Hello World der Webentwicklung. Aber ich habe halt keine Ahnung von Svelte und da bieten
sich To Do Apps an. Die To Do's werden, das ist übrigens das erste, was wir jetzt ordentlich
anders machen werden. Die To Do's sind Local Storage im Browser und sieht man hier, wir
machen jetzt einen, habe ich nämlich Tutorial gelesen, Custom Store für die To Do's. Also
sprich, der Store kümmert sich dann um das Local Storage speichern und laden am Anfang
und ich kann einfach drauf zugreifen, ohne dass ich jedes Mal diesen ganzen extra Wurst
hier machen muss. So, was haben wir noch für Features? Genau, ein Button, um alles zu löschen.
Wir können mal gucken, wie einfach mit Svelte man ein PWA draus bauen kann, weiß ich noch
nicht. Shortcuts, Alt Enter für To Do Completed oder keine Ahnung, Alt Enter für eine Neues
To Do oder irgendwie sowas. Vielleicht kann man irgendwie Prioritäten setzen, dass man
dann sagen kann, hey, der Hintergrund ändert sich je nach Priorität. Wir können Papierkopp
machen, dass die Dinger nicht direkt gelöscht werden, sondern gefleckt werden als Deleted.
Das wäre sogar relativ einfach. Das wäre sogar eigentlich relativ einfach, wir könnten
einfach hier in dem Feld machen, Deleted und alles was Deleted ist, landet im Papierkopp,
das dürfte wahrscheinlich das einfachste sein überhaupt. Die Katze, ja gut, das Hauptfeature
einer Katze ist ja, dass sie niedlich ist. Was ist denn sonst das Hauptfeature? Also
quasi Killer Feature. Dann könnten wir noch die To Do als Export als File anbieten, warum
auch immer man das braucht, aber wir könnten mal gucken. Letztens meinte einer im Chat,
er möchte unbedingt die To Do als Excel Export haben. Da hatten wir das letzte Mal schon
mal Just For Fun geguckt und ja, es gibt sogar ein JavaScript zu Excel Exporter. Nein, nein,
nein, nicht CSV, Excel. Da habe ich mir gedacht, hey, wenn er das haben will. So, und dann
können wir das Sortieren noch ändern mit einem File so von oben nach unten. So, und
die Advanced Sachen sind dann, dass wir vielleicht gucken, ob wir Strike und Droppen können
oder ob wir noch irgendwie einen Date Picker für ein Fälligkeitsdatum irgendwie einbauen.
Aber wir fangen jetzt mal hiermit an, mit diesen drei Sachen, Suche Dark Light Sie und
Hübsch machen. Ich würde sagen, wir fangen nämlich mit dem Hübsch machen an, weil das
ist das Problem. Kann ich nicht weitermachen, weil dann blicke ich nicht mehr durch. Das
ist Hardcore unübersichtlich. Jetzt schon. Wir starten das Ganze mal, wie wir das Run,
ne Open. So glaube, ne. So. Ach ja, übrigens für alle, die noch nicht dabei waren das
letzte Mal, wisst ihr eigentlich, wie nice das ist, wenn man sich ein Ansible Playbook
gebaut hat für seine Server-Konfiguration. Mal angenommen, ich ändere jetzt was. So,
mal angenommen, ich ändere jetzt was. Sagen wir mal, ich möchte jetzt. Ja, ich habe wirklich
die, ich habe wirklich aus irgendwelchen Gründen die Progress Bar kaputt gemacht. Wie habe
ich das denn geschafft, die Progress Bar zu zerstören hier? Sekunde, das wollte ich mal
kurz angucken. Each to do's to do's to do's one for progress. Ah, ich habe das einfach
nie fertig programmiert. Value set. Ich habe das nie dynamisch gemacht. Das ist einfach
procken. Okay, das fixen wir mal kurz. Let value gleich Null. Export. Und dann sage ich
was zu. Add. Progress. Wir fangen bei Null an. Kann auch Null reinschreiben. Progress.
Set. Brauchen wir nicht. Ist es ja schon standardmäßig Null. Und jetzt müssen wir uns. Sobald sich
Value ändert. Progress Set Value. So, wenn ich das jetzt richtig gemacht habe, dann sollte
eigentlich die Pro. Value is not a store with subscribe methods. Okay. Was? Ach hier.
Moment, ist auch falsch. Progress muss ich auch machen. So jetzt. Ach fuck, es geht immer
wieder. Was? Okay, was ist denn hier kaputt? Progress. Value. Gleich. Percent. Ah, okay
Leute, es funkt wieder. Fixed. Okay, also nur mal so, dass ich euch erzählen, dass ich
euch zeigen kann, wie nice das ist, wenn man sich einen Ansible animiert hier mit Interpolate
zwischen States und sowas. Richtig Proc Jam. So, ich pushe das mal, dass ihr seht, wie cool
das ist, wenn man ein Ansible Playbook hat. Also wer sich das jetzt angucken will, hier
ist die App und jetzt machen wir mal eine Sache. Wir machen jetzt Ansible Playbook. Bam. Jetzt
kompiliert er das neu. Was heißt kompiliert? Es bildet er das neu und oh, ich habe das
mit den Tags vergessen. Jetzt führt er nochmal den kompletten Server neu aus. Tags. Das
bräuchte ich jetzt eigentlich. Deploy. Wenn ihr jetzt refresht im Browser, dann geht auch
wieder die Progress Bar. Also sprich innerhalb von zwei Sekunden neue Version deployed. Easy.
Ist übrigens, wenn jemand fertige Sachen verwendet von Netlify bis Cloudflare Pages
oder sowas, ist es ähnlich. Easy. Penny Primers. So. Übrigens habt ihr schon mal gesehen,
wie nice das ausfährt, wenn man hier reingeht. Dachibus. Mal hier. Multi-Line-Forgas-Proc-Champ.
Dann klickt man wieder rein, dann klickt man wieder rein, dann fährt das zusammen hier.
Richtig nice. Richtig huge. So. Kleine Prinzessin, Dankeschön für den Sub. Gut. Oh guck mal,
das ist noch verbugt. Da fängt mit Not a Number an. Warum? Aber eigentlich will ich mich jetzt
gar nicht an so viel Kleinscheiß aufhängen, weil wir werden das jetzt eh bisschen umstricken
und ordentlich machen, weil es ist so unübersichtlich mittlerweile. Warum ist es Not a Number? Weil
Value. Ah es ist Not a Number. Ich weiß warum. Weil geteilt durch Null. Weil geteilt durch
Null. Geteilt durch Null. Kann man da sowas machen? Oder oder eins? Null. Jawoll. Fixed.
Es ist jetzt auch, weil Länge Null ist, es ist halt eins. Scheiß drauf. Wird dann eh
überschrieben. Wir machen das eh klar ordentlich. So. Siehste? Jetzt. Jetzt lädt das neu und
wui ist gleich schick. So. Was zum? So gleich neu deployen. Copy App. Ach. Das ist die
falsche. Das ist die falsche IP. Ich deploy grad den Server von irgendjemand anderem.
Also mal davon abgesehen, dass das nicht geht, weil ich mich nicht drauf einloggen kann,
aber ich hab grad versucht den Server von irgendjemand anderem zu deployen. So. Jetzt
aber. Guckt hier. Jetzt ist gefixt. Orgas. Alles klar. So. Und jetzt machen wir das ganz
mal ein bisschen ordentlich. Wir fangen mal an. Da hab ich mir nämlich letztens ein Tutorial
zu angeguckt. Das ist ja schon sehr. Fängt trotzdem bei Null an, weil Null durch eins
gleich Null. Ja, das ist ja aber auch okay, dass er bei Null anfängt. Die Sache ist plus
die. Null durch Null ergibt not a number und das funktioniert nicht. Wenn er eins nimmt,
dann funktioniert die Rechnung wenigstens immer. Kommt halt Null bei raus, ne? Das ist ja auch
gut so. Aber wenn ich das hier weg mache. Kommt not a number raus, weil er versucht
durch Null zu teilen und das ist broken F. Was ist startet dann bei eins? Ja, es es fängt
halt an zu rechnen mit der Länge eins anstatt obwohl es eigentlich Null ist, aber das macht
unterm Strich ja keinen Unterschied. So, also wir machen das jetzt alles mal ein bisschen
ordentlicher. Ich hab in ein Tutorial geguckt zu Svelte Stores. Das heißt, wenn ich das
richtig verstanden hab, brauchen wir, also wir haben das letzte Mal hier schon ein bisschen
gebastelt, brauchen wir diesen ganzen Krämpel nicht. Man kann das wohl auslagern in ein
Custom Store und dann funktioniert das genauso und ich brauch diesen ganzen Mist nicht. Übrigens,
das können wir wahrscheinlich wegschmeißen, die Styles. Ja, macht überhaupt keinen Unterschied.
Styles wegschmeißen. Das Sort hier inline sieht zum Beispiel auch mega hässlich aus.
Also mein Ziel ist, dass das am Ende, wenn wir das ordentlich, ordentlich in Komponenten
ausgelagert haben, dass das Ding hier noch 40 Zeilen lang ist oder so. Mal gucken. Gucken
wir, wie das hinhaut. So, ich sehe gerade eine nicht so schöne Sache. Text Area, Text Area,
wir sollten sagen Padding Top Null Punkt Fünf. Guck mal hier, zack. Guck mal, jetzt ist das
hier oben und unten gleich. Ach ja, und, und was auch noch? Auto Correct? Nee, Spellcheck
heißt das? Nee, wie heißt das Spellcheck bei CSS? Spellcheck CSS Disable. Auto Disable
Spellcheck. Ach, man schreibt das so dran, ok. Spellcheck Pulse. Zack, guckt dann. Habt
es gesehen, dann verschwindet dieser, dieser Mist da unten drunter. Ja. Spellcheck Pulse.
Äh, True. Nee, Pulse. Null. So, und jetzt gibt es keinen Spellcheck mehr. Kein Type
Script. Warum denn Type Script unbedingt? Das ist nicht so, als wäre das wahnsinnig
krasses Enterprise Projekt. Gut, dann lasst uns doch mal anfangen. Also, das To Do Zeug
lasse ich jetzt einfach mal da. Also, On Mount kommt weg. Jaja, dann geht es nicht, das weiß
ich. So, also wir machen jetzt einen Svelte Custom Store. Custom Store. Das müssen wir
uns das Tutorial zu angucken. Custom Store. Also, das ist voll so, also ich versuche das
mal so jetzt in meiner Logik zu erklären, wie ich das verstanden habe, was die sich
gedacht haben dabei. Also, das hier ist unsere Index Seite. Also, die halt hier unter Slash
geladen wird. So, und wir haben ein globales Array mit To Do's. Da müssen eigentlich,
wenn man es mal genau nimmt, so gut wie alle Komponenten drauf zugreifen. Die Progress
Bar muss darauf zugreifen, um zu wissen, wie viele To Do's insgesamt abgearbeitet sind.
Diese Liste hier braucht das, dass es die einzelnen To Do's rendern kann. Der Add Button
braucht das eigentlich auch, damit er neue To Do's anhängen kann. Und für so Global
State hat Svelte sowas wie Stores. Die gibt es in Lesbar und Schreibbar, wobei Schreibbar
wohl die häufigste Geschichte ist. So, und dann gibt es die Möglichkeit, dass man wohl
Custom Stores anlegt, wenn einem das normale Global State Zeugs nicht reicht. Und ich vermute
mal, wir brauchen einen Custom Store, weil wir ja, wenn man neue Werte setzt oder wenn
man irgendwas hier abhakt, möchten wir das ja speichern im Browser. Das ist, wenn ich
das hier abhacke und ich refresche die Seite, dann ist das immer noch abgehakt. Warum noch
keine Tests und Dokumentation? Ja Leute, ich pushe das auf GitHub, ihr könnt ja da mitmachen.
Gerade nachdem wir Dokumentation und Test schreiben, mit Abstand die beliebteste Beschäftigung
ist echte Hackermans, was wir alle wissen. Ich Crowdsourcer das einfach an den Chat.
Aber auf der anderen Seite, wenn man keine Fehler macht, braucht man auch keine Dokumentation
und keine Kommentare und keine Tests. Wissen wir doch. So, deswegen kommentiere ich diesen
ganzen Krempel hier mal aus. Auch meine To Do's kommentiere ich aus. Und auch das kommentiere
ich aus. Jetzt wird natürlich die Seite nicht funktionieren. Guter Code ist Dokumentation
genug. Genau, so sieht's aus. On Mount kommentiere ich aus. Und hier schreiben wir mal standardmäßig
Hardcoded Null rein. Ich will einfach nur, dass es nicht abkackt. To Do's is not defined.
Ne, To Do's lassen wir mal hier. Das darf ruhig kaputt gehen. So, und jetzt legen wir
mal einen eigenen Store an. Also es gibt hier einen Store.js File. So habe ich das zumindest
verstanden, wie das funktioniert. Also Import Writable Swell Store. Const To Do's. Das heißt
ich kann den Kram hier schon mal importieren. Oh guck mal, aber der hat Autocomplete für
Stores. Richtig, richtig pock. Gibt es eine Liste mit Emoji-Commands? Ja. Entweder machst
du Doppelpunkt. So Wupp. Sonst kriegst du alles mögliche angezeigt. Oder du hast FFZ
und kannst das hier alles durchsuchen. Wenn du FFZ hast, siehst du alles, was es gibt.
Nur mit dem Unterschied, dass mein FFZ wahrscheinlich gerade nicht funktioniert, weshalb auch immer.
Habe ich in FFZ vielleicht nicht Bella Twitch TV und so aktiviert? Doch. Dann weiß ich
auch nicht, vielleicht weil ich nicht eingeloggt bin. Ach ne, ich weiß warum, weil es im Chat
nicht richtig funktioniert. Da muss man hier direkt in den Chat auf der Seite glaube ich,
dann funktioniert es. Ja Switch. Keine Ahnung. Normalerweise zeigt das FFZ an, aber wahrscheinlich
weil ich nicht eingeloggt bin. Du hast meine Videos geguckt als Hausaufgaben zu erledigen.
Tja. Ist das jetzt gut oder schlecht? Ich fühle mich geehrt, ja. Ohne Struktogramm. Ja
Nassi Schneiderman Struktogramm ist Pflicht. So, machen wir einfach mal weiter hier. Also
schmeißen wir mal diesen ganzen Kämpel raus, den wir hier nicht brauchen sollten. Ziel
ist ja das hier ein bisschen ordentlicher aufzuräumen. Import to do's from store. Das heißt, sort
is not a function. Ja gut. Das ist jetzt ja auch Dollar to do's. Gut 100% weil nichts
geladen drin, aber die Seite lädt schon mal. So, also was brauchen wir jetzt hier? Wie
gesagt wir wollen das hier alles ein bisschen aufräumen. Und das Ziel ist, dass wir dieses
ganze Local Storage im Browser speichern, von dem von dem State uns gar nicht wirklich
drum kümmern müssen, sondern dass alles über diesen Customs Well Store läuft. Also Custom
Store. Zeigt mal hier wie das funktioniert. Create count. Ich copy paste mir das jetzt
einfach mal. Create count. Ok, dann machen wir mal sowas wie create, to do, store. Was
auch immer. Was? Subscribes. Oh, was ist das für Big Brain JavaScript Syntax? Das ist
irgendwie so Destructor Syntax. Das ist mir zu neues JavaScript. Pipehead. Time. Const
to do's. Machen wir das mal so. Und to do's sind ein Array. Zu neu. Oh, create count is
not defined. Achso, das heißt ja auch create to do store. Ok, funktioniert wieder. Ich
habe keine Ahnung was das hier für eine super krasse Next Level JavaScript Syntax ist. Increment
decrement reset. Das brauchen wir nicht. Also wir wollen ein Custom Store machen, der immer
wenn ein Wert gesetzt wird, die Sachen im Local Storage speichert und einmal am Anfang
es aus dem Local Storage lädt. Ok, wir machen mal das Laden aus dem Local Storage zuerst.
Also ich zeige euch mal meine Local Storage. Local Storage ist hier. Guckt. To do's. Local
Storage. Das heißt wir sagen Local Storage. Get item. Ja JavaScript. Hey, lieber JavaScript
muss man muss ihn auch mal wirklich was zugute halten. Da ändert sich öfters mal was, wobei
es die letzten Jahre doch schon langsamer gegangen ist. Aber die machen im Vergleich
zu C++ und den C++ Gremium machen die sinnvolle Sachen. Angefangen von ihrem Promise Zeugs
über Async Await, wie sich das dann weiterentwickelt hat, zu solchen komischen Konstrukten hier,
die nicht wie bei C++, wo man standardmäßig, was ist das? Ok, keine Ahnung. Nicht bei
C++, wie man standardmäßig davon ausgehen muss, dass es wieder irgendwelcher undurchdachter
Mist ist, der eingebaut wird, sondern meistens liegt es daran, dass man selbst noch nicht
gecheckt hat. Ist der Local Storage im Browser Cache oder tatsächlich irgendwo auf der Festplatte
gespeichert? Ja, das ist kein Cache in dem Sinn. Local Storage ist quasi wie Cookie Storage,
was heißt die Session Storage, ist irgendwo in deinem Browserverzeichnis, in deinem User
Browserverzeichnis, Profilverzeichnis wahrscheinlich. Irgendeine Datei unter dem Strich wird es
wahrscheinlich sein. Ja, ich glaube maximal, wie groß ist der Local Storage, maximal 50
MB? Max Size? 5 MB, 5 MB, siehste. Es ist ja aber auch klar, weil jede Webseite kann
sich ja da auch voll austoben drin. Stellt euch mal vor, jede Webseite macht 50 MB Local
Storage voller, ist ja eure Festplatte fast dicht. Was ist bei C++ unüberlegter Mist?
Ich weiß nicht, ob wir von diesem Thema jetzt anfangen wollen, weil ihr wisst, wenn ich
von C++ anfange und was daran misst, ist, dann dauert das jetzt wieder zwei Stunden.
Unicorn Chuck lacked critical information, das ist ein ganz schlechtes Thema bei mir,
wenn ich davon anfange. Okay, aber wir können ja mal ein paar Punkte machen bei C++, warum
C++ unüberlegter Mist ist. Zum Beispiel, wenn man schon anfängt von diesem ganzen Implementierungszeug,
wenn du das neueste dir von C++ anguckst, heißt das noch lange nicht, dass die Plattform,
die du verwendest, und selbst wenn du was halbwegs Neues verwendest, das automatisch
auch kann. Das ist schon mal ultra wirr, was da wie wo überhaupt was kann. Und selbst
wenn die sagen, hey ab, keine Ahnung, GCC Version, irgendwas wird was unterstützt, heißt
das noch lange nicht, dass es den kompletten Standard unterstützt. Das ist auch mal ultra
wirr. So, dann geht's richtig los mit Header Files. Welche Sprache im Jahr 2021 ruddelt
noch mit Header Files rum. Ich weiß, die wollen schon seit 100 Jahren Module einführen und
haben es jetzt auch mittlerweile geschafft. Weiß ich nicht. Aber bis der Kram darauf
umgestellt ist, wird nie passieren oder vergehen 100 Jahre. Dann kommen so komische Sachen
dabei wie, dass es bis vor ganz kurzer Zeit in C++ noch nicht mal ein publisches Standard
String to Uppercase gab. Da musstest du dann solche Dinge machen. Hier, sowas musstest
du da machen. Ja, ich hab doch hier gerade noch ein Beispiel. Also, in normalen Programmiersprachen
würdest du sowas machen. Äh, normalen Programmiersprachen würdest du sowas hier machen und gut ist,
nicht so in C++. In C++ musstest du lange Zeit sowas hier machen. Standard Transform
Begin to Upper. Excellent. Exquisite. Das ist eines der Dinge, die schon mal richtig reudig
an C++ sind. Dann haben die sich eine absolut hässliche Lambda-Syntax überlegt, die ich
jetzt aus dem Kopf gar nicht mehr hinkriege. Irgendwie sowas für Copy. Äh, so, so glaube
ich, ist die C++-Lambda-Syntax, sieht ein bisschen aus wie so ein Fisch. Ganz eklig.
Die haben keinen Package-Manager im Jahr 2021, kein Standard-Missing. Sachen wie Arranges
und Iterator checkt auch niemand. Wie implementiert man den Iterator, da funktioniert in C++?
Ohne immer 50 mal in der Tutorial zu gucken. Es ist wir. Es ist einfach wir. Nicht, dass
Javascript nicht auch wir wäre, aber anders wir. Okay, also wir waren jetzt dabei unseren
Programm ordentlich zu machen. C++ hat auch seine Berechtigung, aber leider aus nicht
C++ Gründen, sondern dass es quasi fast alternativlos ist in den Bereichen, wo man es verwendet,
weil es nichts anderes gibt. Zum Beispiel, wenn du irgendwelche Arduino-Geschichten basteln
willst oder ESP32 oder so, da gibt es halt nichts anderes dafür als C und C++, vor allem,
wenn es Arduino ist, automatisch C++, dass du das verwenden kannst. Es gab Versuche mit
Rust was zu machen, aber hat sich halt nie durchgesetzt. Und wenn du Unreal verwendest
für Spiele, wird er wahrscheinlich, wenn du es erweitern willst, auch nichts anderes
als C++ übrig bleiben. Leider. Aber Schatz schon seinen Grund, warum Unity sich so rasant
verbreitet hat. Da hat bestimmt auch C-Sharp als Programmiersprache zu beigetragen, mehr
als man denkt. Ja, das C++ ist auch erträglicher. Die haben zum Beispiel sinnvolle Collections,
die man verwenden kann, ohne dass man 20 Seiten Doku durchlesen muss. So, Local Storage is
not defined. So, das ist ein Problem, weil, jetzt kommt's, Leute, wer hat aufgepasst,
warum ist Local Storage not defined? Ich hab's am Anfang ganz kurz gesagt, aber ihr könnt's
eigentlich nicht wissen, aber vielleicht ist jemand so massive, feifett und weiß, warum
Local Storage not defined ist. Kein Import, nee, das ist es nicht. Es liegt daran, es
liegt daran, weil das Server-seitlich ausgeführt wird. Korrekt. Das wird Server-seitlich ausgeführt,
weil der große Vorteil oder eines der Selling-Points von SvelteKit ist ja, die Seite wird Server-seitig
gerendert, an den Client geschickt und dann übernimmt der Client quasi als Client-Seit-Application,
was dazu führt, dass die Webseite schneller lädt und dynamisch bleibt, also das Beste
aus beiden Welten. Das heißt aber, wenn das jetzt auf dem Server gerendert wird, was eigentlich
schwachsinnig ist, Local Storage, ja. Server-seit heißt kein Adblock, nee, das hat miteinander
nichts zu tun. Server-seit bedeutet, du kriegst quasi schon eine fertige Seite geschickt
mit HTML drin, was dein Browser direkt nachdem er es empfangen hat rendern kann, im Unterschied
zu Client-Seit-Applications, die erstmal ganz viel JavaScript ausliefern und wenn JavaScript
nicht geht, die Seite einfach eine Fehlermeldung hat oder weiß bleibt und dann geht das Java
hin an irgendwelche Apis, zieht sich die Sachen und rendert dann quasi die Seite erst
nachdem das JavaScript die Logik durchlaufen hat. Und hier läuft die JavaScript-Logik einmal
server-seitig, erzeugt HTML, schickt es rüber, dass der Browser das rendern kann und dann
übernimmt der Browser das quasi als Client-Seit-Application und macht das weiter wie bei einer normalen
Client-Seit-Application. Das ist quasi so, dass eine Mischung aus, also zuerst war Server-Seit-Rendering,
das ist eigentlich so die Standardgeschichte. Server-Seit-Rendering heißt, du machst ein
Get-Request auf einen Web-Server oder auf eine PHP-Anwendung oder was auch immer oder
auf einen ASP.NET Core oder wie auch immer und der guckt dann, dass er für dich die
Seite zusammenbaut, so mit deinem User drin und allem, auf Server-Seite, rendert das komplett
als HTML und schickt dir das. Dein Browser bekommt die Seite, rendert einfach nur das
HTML auf seinen Bildschirm und fertig. Das ist natürlich schön für Webseiten mit vielen
Daten drauf, so die klassische Inventarliste oder sowas, da ist das ganz nice. Aber sobald
es dynamisch wird, zum Beispiel, ein gutes Beispiel für dynamische Seiten ist ein Chat
oder sowas, der Twitch-Chat zum Beispiel, der Twitch-Chat würde Server-Seit-Rendern
nicht funktionieren. Server-Seit-Rendern ist statisch zum Zeitpunkt des Server-Seit-Renderns,
also wenn du eine Webseite aufmachst, dann ist die Seite zum Zeitpunkt dessen, wo der
Server für dich die Seite erstellt und dir rüber schickt, statisch. So und ein Chat
funktioniert nicht mit reinem statischem Server-Seit-Rendere. Der Chat, also wenn angenommen
dieser Chat wäre jetzt Server-Seit-Rendert beim Abrufen, dann würde ich es genau bis
hierhin bekommen, die Seite, aber ich bekomme keine Updates. So. Die nächste Geschichte
war dann natürlich so eine Hybrid, so ein Hybrid, man hat gesagt, ja, wir fangen halt
mit JavaScript an, also wir rendern die Seite, zum größten Teil server-seitig, aber die
dynamischen Elemente machen wir dann klein-seitig mit JavaScript. Da kamen also Sachen wie Websockets
auf oder jetzt irgendwie Signal A als Abstraktion oder sonst was. Das war so der nächste Schritt
und dann, wie das so ist in der Webentwicklung, die Leute treiben es voll auf die Spitze,
danach hat man gesagt, okay, wir machen jetzt klein-seit-Application, also sprich, man hat
gar nichts mehr auf dem Server gerendert, man hat auf dem Server einfach nur noch eine
Handvoll JSON-APs angeboten und hat einen riesen Blob JavaScript rüber geschickt zum
client, der dann die komplette Seite klein-seitig aufgebaut hat. Und damit kamen dann so Sachen
auf wie Angular und Vue und React und sonst was, so als reine klein-seitige Single-Page-Application
hat sich das genannt. Das spricht, du kriegst erstmal einen riesen Blob JavaScript, das
JavaScript geht dann zu deinem Server, ruft sich über die JSON-APs irgendwas ab und dann
erzeugt es daraus klein-seitig HTML, was dein Browser rendern kann, passiert alles in deinem
Browser. Der Server rendert überhaupt nichts mehr an HTML und schickt es dir. So und dann
hat man festgestellt, gut das ist schön, aber das hat zwei Nachteile. Erstens ist die Ladezeit
nicht sonderlich schnell, weil du musst dir erstmal dem Client 10 MB JavaScript rüber
schicken, der muss dann erstmal zu irgendwelchen APs sich connecten und dann die Seite refreshen.
Hat natürlich den Vorteil, es ist super dynamisch, du kannst da halt super Geschichten machen
wie real-time Aktienkurse oder auch besonders ressourcenintensive Anwendungen mit grafischem
Schnickschnack oder sonst was, was sich dynamisch aktualisiert, ist das wunderbar klein-seitig,
das kannst du auf dem Server nicht rendern und das willst du auf dem Server auch nicht
rendern. Und das nächste ist, was auch richtig schlecht war an Single-Page-Applications,
das Suchmaschinen-Auffindbarkeit, ja es ist Storytime angesagt. Also das war richtig schlecht,
weil stellt euch mal vor, dass man anstatt einer Website bekommt man einfach nur noch
10 MB JavaScript. Was macht die Suchmaschine? Die Suchmaschine stellt fest, sie kann nichts
suchen, kann nichts indizieren auf deiner Seite und du wirst nicht richtig gefunden.
So und das war so der Knackpunkt, wo man dann gesagt hat, hey wäre es nicht sinnvoll, man
baut eine Mischung wieder, also man geht quasi wieder einen Schritt zurück, man baut eine
Mischung aus, ne du hast ja noch nicht, du könntest eine Sitemap rendern, ja, du könntest
quasi auf dem Server eine Sitemap rendern und die dann irgendwie ausliefern, wenn es
eine Suchmaschine ist oder ein Suchmaschinen-Crawler, der anfragt oder sowas. Aber selbst dann
müsstest du ja quasi, wenn du das richtig ordentlich machen willst, jede Seite noch
mal als statische Seite irgendwie vorhalten oder wie auch immer. Zumindest auf die Idee
ist man dann auch gekommen, man hat gesagt, ok so rein Single-Page-Application ist eklig,
das heißt man geht wieder einen Schritt zurück. Wäre das nicht das beste, wenn man die Seite
auf dem Server rendert, den State einpackt, den man braucht, um sie quasi dynamisch weiter
rendern zu können, das rüber schickt an den Client, der Client bekommt initial quasi
einmal fertiges HTML um die Seite zu rendern, bekommt aber auch den ganzen State und JavaScript
geschiss mitgeschickt, um eine voll funktionsfähige Client-Site-Application zu sein. Das heißt,
du hast jetzt das beste aus beiden Welten, du hast schnelle, schnelle Seiten aufbauten
und die Client-Site-dynamischen Möglichkeiten von Single-Page-Applications. Das ist richtig
pfeifert, ja. Genau, Next gibt es bei JS, es gibt Nuxt bei Vue oder es gibt Svelte-Kit
per Svelte. Die machen alle mehr oder weniger das gleiche. Die Idee dahinter ist, dass man
Server-seitig die Seite schon mal quasi vorrendert, dass sie schneller lädt, den State einpackt
und das ganze JavaScript-Geschiss mitschickt und dann wird die Seite Client-seitig hydrated,
nennt sich das. Das habe ich mir nicht ausgedacht, steht bei denen immer auf der Webseite. Dann
wird quasi auch diese Information, die man bekommt vom Server und dem State, wird die
Seite dann quasi hydrated zu einer Client-Site-Application, die dann so läuft, wie halt eben eine normale
Single-Page-Application, die man so kennt. Und das heißt, man hat damit eigentlich alles
erschlagen, was man braucht. Man hat super Crawling-Möglichkeiten für Suchmaschinen,
sich indizieren zu lassen. Du hast schnelle Seiten-Ladezeiten und du hast alle Möglichkeiten
von Client-Site-Applications. Mach die Sache aber komplizierter. Wie man jetzt hier zum
Beispiel an der Stelle sieht. Warum ich nämlich jetzt hier den Fehler bekomme, LocalStorage
ist noch Define, ist ganz einfach. Der versucht, das Server-seitig zu rendern, aber es gibt
Server-seitig kein LocalStorage. Was man da jetzt machen kann, ist, die Jungs von SvelteKits
sind ja nicht blöd, es gibt verschiedene Environment-Variablen, in denen man nachgucken kann, in welchem
Kontext man sich befindet. Es gibt hier zum Beispiel Browser, Def-Mode, Pre-Rendering
und sonst was. Mit diesen zwei Sachen kann ich zum Beispiel überprüfen, Pre-Rendering
ist true, wenn die Server-Seit gerendert wird, Browser ist true, wenn ich wirklich im Browser
laufe. Das heißt, ich muss jetzt quasi gucken, if Browser. Wenn ich gucke, if Browser,
dann funktioniert auch LocalStorage. Also die anderen Sachen nicht, weil das ist ja
da nicht angelegt, aber dann fun- ja, aber ihr wisst vielleicht mal, in der Fehler geht
weg. Wir müssen auch mehr machen, dass es wirklich funktioniert. So, also machen wir
das mal. To Do's, hieß das ganze glaube ich mal im LocalStorage. Genau, jetzt funktioniert
das, wenn ich auch gucke, if Browser. Ich zeige euch mal, dass es wirklich so heißt.
Hydration. Server-Seit-Rendering, guck. Die nennen das wirklich so. Client-Seit-Hydration.
Weil wir brauchen für alles irgendwelche coolen Wörter. So, und jetzt muss ich mal
kurz in mich gehen, weil ich habe jetzt so viel gelabert, dass ich eigentlich voll raus
bin aus der Hacker-Man-Geschichte. Also, was gucken wir denn jetzt? Also, was brauchen
wir jetzt? Wir brauchen ein Store. Writeable. Warum, warum, warum mache ich, warum nenne
ich das nicht einfach irgendwie Store? Warum mache ich hier so komisches Zeug? Egal, die
Svelte-Leute werden sich schon was beigedacht haben. So, also, wir müssen jetzt initial
das ganze erstmal laden. Also, if Browser. LocalStorage.getItems. Was machen wir hier
oben drüber? So, LocalStorage.getItems. So, das ist aber als JSON hier drin gespeichert,
das heißt, wir müssen jetzt sagen, JSON pass LocalStorage.getItems. So, jetzt können wir
übrigens mal gucken, ob das funktioniert. Wird mal Zeit für ein paar Logs. Ja, Funtz,
guck. Läuft jetzt nur im Browser. Chat wieder. Was ist verrührt eines dieser
neuen, was für ein Ding? Der Yapt-Champ. Ach so, weil sich der Erstsemester verrührt
hat. Ah, verstehe. Geht auch nicht so was wie Dollar Browser. LocalStorage. Ne, das ist
true oder false. Was funktioniert ist, ähm, was funktionieren würde ist sowas. Ich glaube,
das geht auch, weil JavaScript. Das funktioniert auch. Aber, Chat, was findet ihr lesbarer?
Das oder das? Die JavaScript Bros sagen bestimmt das hier. Lieber if Statements. Ja, denke
ich auch. Das denke ich auch. Wir machen lieber ein if Statement. One-liner-Hackerman. Ja,
da kommt da wahrscheinlich noch ein bisschen mehr dazu. Also, wir laden die To-Do's aus
unserem LocalStorage. So, und jetzt müssen wir ja gucken, ob der LocalStorage überhaupt
was enthält. Weil es könnte ja sein, dass der LocalStorage leer ist. Also sagen wir,
wenn das LocalStorage nichts enthält, können wir da sowas machen? Haben wir doch letztes
Mal das? Das müsste funktionieren. Wenn der LocalStorage nichts enthält, dann einfach
leeres Array. Wobei, leeres Array ist natürlich doof, weil leeres Array wird nicht richtig
rendern, weil er ja erwartet, dass da Objekte drin sind mit einem. Wobei, ne, müsste eigentlich
funktionieren. Doch, es müsste eigentlich so gehen, ne? Also, Jay, was macht denn, wobei
ich bin mir gar nicht so sicher, ob das funktioniert. LocalStorage.getItemToDo's. Das ist okay.
Was kommt denn da zurück? LocalStorage.getItem. Was kommt denn da zurück, wenn es das nicht
gibt? 0W. Null. Okay. Gibt es nicht Fragezeichen? Fragezeichen. JavaScript. Ja, was macht das?
Ich überleg gerade. In C-Sharp ist das Nullchecken? Ja, das gibt's. Warum ist JavaScript eigentlich
so verhasst? Ist es gar nicht. Wenn was verhasst ist, dann C++. Ist es gar nicht. Also C++
ist verhasst. Ne, aber JavaScript war früher richtig pain in the ass. Mittlerweile ist
JavaScript echt ganz okay. So, also ich wollte mal kurz was gucken. Wenn es das nicht gibt,
kommt Null raus. Und was passiert bei JSON? Pass? Pass Null? Was macht es dann? Da kommt
auch Null raus. Okay, dann funktioniert das hier. Ja, die Leute, die Lehrer erzählen
viel mehr. Geht das hier auch? Keine Ahnung. Okay, das funktioniert. Okay, was ist der Unterschied
dazwischen jetzt? Okay, mein. Operator. JavaScript. JavaScript Operators. Gibt es das überhaupt?
Aber W3Schools ist übrigens Rottseite. Echt, Leute, das ist doch eklig. Da steht teilweise
Sache drauf, die stimmen überhaupt nicht. An lieber Mozilla. Ich frag mich nur, hat
JavaScript sowas? Ich glaube JavaScript hat sowas gar nicht, gell? Wisst ihr, was mich
dann besonders stört, dass es irgendwie fehlerfrei kompiliert? Okay, dann muss ich mal kurz gucken.
Log. Okay, wir fragen mal was ab, was es nicht gibt. Aus irgendwelchen Gründen funktioniert
das? Ich hab keine Ahnung warum. Und es macht das gleiche wie das. Okay, Null. Core Lasking
Operator. Alles klar. Five Head Time. JavaScript Five Head Time, Alter. Dazu kann ich nur sagen.
The Nullish Core Lasking Operator. Wie zum Teufel spricht man das aus? Moment, Moment.
TTS. Text to Speech. Google. Google. TTS. Ich brauch jemanden, der mir das ausspricht.
Ah. Nullish Core Lasking Operator. Nullish Core Lasking Operator. Nullish Core Lasking
Operator. Nullish Core Lasking Operator. Nullish Core Lasking Operator. Okay, es gibt Sachen,
die muss ich nicht korrekt aussprechen können. Aber alles klar. Okay, also Logical Operator
that returns its right hand side operand when its left hand side operand is null or undefined.
Also im Prinzip, this can be contrast, aha, aha, is any. Ah, okay, okay. JavaScript Logik,
dass man beides braucht. Also, das hier versus das hier. Okay, ich glaube ich hab's verstanden.
Also, der Unterschied zwischen diesen zwei ist das Folgendes. In dem Fall würde übrigens
das gleiche passieren. Also, das hier, guckt, ist das hier, also ist dieser Ausdruck, ist
der null oder ist der undefined? Und nur wenn es null oder undefined ist, dann nimmt er
das hier. So. Also, nur null oder, machen wir mal so, dann erkennt man das hier. Die
Falls schreiben wir jetzt mal rein. Also, das funktioniert nur damit, wohingegen oder oder
mit jedem Value funktioniert, den JavaScript als Falls ansieht. Und was JavaScript alles
als Falls ansieht, ist eine absolute Wissenschaft für sich. Da leckt, glaube ich, jeder Critical
Information auf dieser Welt. Was ist Fallsy? Also, hier, das ist alles was Falls ist laut
JavaScript. Falls, null, minus null, null n, leerer String, leerer Template String, leerer
String, null, undefined, not a number, document all. Das ist, das ist quasi, also bei dem
hier, ist es wirklich nur null oder undefined. Bei dem Operator greift das alles, wenn es
einer dieser Values hier ist. Macht Sinn. Ja, es macht Sinn, dass es da zwei verschiedene
Operator für gibt. Diese ganze Fallsy-Geschichte in JavaScript finde ich sehr unintuitiv.
Ja, warum not a number false ist, verstehe ich auch nicht. Not a number ist irgendwas,
aber halt not a number. Warum es false sein sollte, keine Ahnung. Das ist historisch
gewachsen, ja. So, und deswegen funktioniert in diesem Fall auch das da und das da exakt
gleich, weil, wenn es diesen Key hier nicht gibt, dann sagt get item null. Ach, Moment,
wir haben ja pass. Ja, und pass sagt auch null, wenn es null passen soll. Das heißt,
das hier macht in dem Fall exakt das gleiche. Alter, so, jetzt wissen wir Bescheid. Jetzt
wissen wir Bescheid. Also, nachdem es in dem Fall egal ist, können wir auch den Big Brain
neuen Operator verwenden, so. Dieser Operator geht wahrscheinlich im Browser noch gar
nicht, oder? Doch, tatsächlich. Guck, hier kann man ziemlich ausbreiten. Null, also hier,
default. So, null kommt default raus. Undefined kommt default raus. Allerdings, bei false
kommt false raus und nicht default. Wohin ging, bei false oder oder die default raus
kommen würde? So, Leute, noted, morgen gibt's Test. Was none gleich gleich minus eins gleich
gleich true. Keine Ahnung, das ist eh sehr wirr in JavaScript, weil not a number gleich
gleich not a number ist ja auch nicht true. Na gut, das ist eigentlich relativ klar. Is
none. Also, meine Vermutung ist folgendes. Wenn ich das, wenn ich is not a number, not
a number als String mache, dann ist die Antwort natürlich, äh, Moment, warum ist das true?
Ach so, is not a number, ja, passt doch, passt doch, ist doch logisch. Das ist ja auch not
a number, das ist ja auch ein String, not a number. Nee, das ist doch richtig, ist doch
richtig, das ergibt sogar Sinn. Das ergibt sogar Sinn, egal was ich hier reinschreibe
als String value is, is not a number. Not a number wäre zum Beispiel eins geteilt durch
null, äh, weil eins geteilt durch null, ach, is infinite, ah, yes, yes, alles klar. Wisst
ihr was, kann man das löschen? Ich will das gar nicht wissen hier, da, da. JavaScript,
geh weg, is egal. Wir waren jetzt weiter. Guck mal Leute, wir haben, wir sind eine Stunde
dreißig, Ordnung, wir haben zwei Zeilen gebaut bisher. Lull. Also, wo sind wir denn stehen
geblieben? Äh, also, okay, äh, Leute, ich komme voll raus. Also, to do's, also wir passen
die lokalen to do's. Wenn es keine lokalen to do's gibt, dann nehmen wir den leeren Array.
Gut. Alles klar. So, ähm, jetzt müssen wir den Kram aber irgendwie in den Store bekommen.
Wie kommen wir da, wie bekomme ich denn hier oben was in den Store rein? Gar nicht, oder?
Set. Ich habe Subscribed, Set, Update. Gibt es sowas wie Get? Oder, oder kann ich sowas
hier machen? Äh, Store. Wie das funktioniert? So. Ne. Muss ich diesen Müll hier vielleicht
weglassen? Const. Store. Ja, so scheint es zu funktion- Okay, so. So. Store. Set. Meine
to do's. Was hat er für Schmerzen? Kei- Oh. Subscribe is not defined. Aha. Wahrscheinlich
weil es Store. Sub. Ne. Subsribe? Alter, ich kann nicht schreibe. Subsribe. Ah, yes,
alles klar, alles klar. Set. Ja gut, das gibt's nicht. Leute, ich hab Big Brain, Big Brain
Idee. Pass mal auf. Ich hab was gelernt in Javascript, den letzten Stream. Guckt mal.
Das müsste eigentlich auch funktionieren. Das Funst. Massive. Feifett. Alter. Das ist
ja schon. Das hätt ich nicht gedacht, dass es funktioniert. Das ist ja schon Next Level
11 Head Time hier. Alter, ist das Next Level Shit. Das haben wir letztes Mal im Stream
gelernt. Das ist ein Spreading Operator, heißt das, glaub ich. Der nimmt alle Properties
von Store und setzt die hier ein. Das ist quasi so, also der macht quasi aus, ich zeig
es euch. Hier, Store. So, Store hat Set. Subscribe. Update. Der macht im Prinzip nichts anderes
wie Set. Store. Set. Subscribe. Store. Subscribe. Und so. Das macht es alles für mich jetzt.
Richtig, richtig nice. Das letzte Mal, hat's schon gelohnt, dass wir uns das letzte Mal
angeguckt haben. Exquisite, excellent, Feifett-Time. So, also jetzt haben wir unseren lokalen Kram
geladen. Wenn es lokal nichts gibt, dann sagen wir, ja, es gibt nichts. Gut. So, das ist
jetzt unseren Store. Wir müssen jetzt allerdings noch Set überschreiben, würde ich sagen.
Macht man das? Ich möchte ja mitbekommen, wie funktioniert das jetzt? Ich möchte ja
mitbekommen, wenn einer ein Value setzt. Also muss ich dann Store Set. Set. Set einfach
so dann? Nee. So wahrscheinlich. Oder darf man vielleicht so machen direkt? Set. Okay,
gucken wir mal. Log. Hey, funktioniert. Okay, Set. Setge. So. Und jedes Mal, wenn ein Value
gesetzt wird, will ich Store Set machen. Will ich ja rappen quasi. Setge. Und gleichermaßen
will ich sagen, Local Storage. Set. Item. To Do's. To Do's. Und dann Jason Stringify
Store. Ich habe keine Ahnung, ob das Funst, was ich da baue. Nee. Store is not defined.
Okay. Weißt du was, wir machen das anders. Wir machen das nicht hier unten zum überschreiben,
wir sagen einfach hier unten. Store. Subscribe. Value. Und jedes Mal, wenn es einen neuen
Value gibt, dann will ich sagen, Local Storage. Set Item. To Do's. Jason Stringify. Weil
Local Storage sind nur Strings. Nee. V. So. Ich bin mir jetzt nicht sicher, ob das funktioniert,
aber es sollte eigentlich tun. Eins, zwei. Ja, guck mal. Es funktioniert. Jedes Mal,
wenn es ein neues Item gesetzt wird, ändert sich das im Local Storage. Gucken wir mal,
ob das jetzt funktioniert. Application. Ja, super. Das ist sehr gut, sehr gut lesbar
hier alles. So. Ich lösche, ich lösche den. Ach nee, löschen geht ja grad nicht. Lul.
Ah ja. Guck mal. Es ist updated. Seht ihr's? Es ist updated. Es ist Local Storage, wenn
ich setze. Unten rechts. Also das funktioniert schon mal, was wir hier gebaut haben. Okay.
So. Unser Custom Store. Das ist egal. Local Storage ist seitenspezifisch. Also eine Seite
kann nicht auf den Local Storage der anderen Seite zugreifen. Was ja auch wichtig ist.
Sonst könnten die ja Sachen auslesen von anderen Seiten. Jede Seite hat ihr eigenes Local Storage.
Deswegen seht ihr auch hier, guck mal. Local Storage. Guck, das ist Local Storage für
Local Host 3000. Was ist denn eigentlich IndexedDB? IndexedDB ist eine Programmier-Schnittstelle,
die das Website mittels JavaScript darauf strukturierte Daten im Browser zu speichern.
Noch auf Englisch. Ich hab ne Datenbank in meinem Browser. Sehe ich das richtig? Okay.
IndexedDB vs. Local Storage. Stack Overflow. Jawoll. So. How is IndexedDB vor 10 Jahre?
Nein, das hat nichts mit CraftQL zu tun. Both index and local answer. Okay. IndexedDB is
not a key value store in the same key store strings. Jaja. Ich weiß. Ich hab keinen
Blassen-Shimmer. Der QA-Stack. Das ist Stack Overflow-Fake, Alter. Hä?
Auf Erzähl. Hat da nicht einer mal irgendwie so ne ganz kurze knackige Antwort? Was ist
ne bescheuerte Antwort? Die hat ja mit überhaupt nichts zu tun. Ach, das sind Related Answers.
Okay, keine Ahnung, warum ich das verwenden sollte. Wie greift man da überhaupt zu? Ah,
okay. Das hab ich noch nie verwendet. Databases. Ach, da kann man dann auch so Geschichten
machen wie Database-Migrations im Browser oder sowas. Falls jemand die Webseite besucht
und noch Daten hat oder hat ne alte Version und solche Dinger. Boah, das ist aber richtig
next level shit dann. Und was ist Alter? IndexedDB oder Local Storage? Wobei, wenn ihr sagt IndexedDB
ist auch im Local Storage, dann erübrigt sich die Frage ja. Okay. Weiter im Text. Also ihr
habt es gesehen, es wird alles gespeichert, wenn man hier, unser Progress geht gerade nicht,
das weiß ich. So, es wird alles gespeichert, wenn man die Sachen setzt im Store. Gut,
ich glaube mehr brauchen wir auch erstmal gar nicht. Das müsste eigentlich so passen.
So, schauen wir mal. Also To Do's ist importiert. Das hier brauchen wir nicht mehr. Das haben wir
alles. Haben wir alles im Store. To Do's Definition brauchen wir auch nicht mehr. On Mount, das Laden
brauchen wir auch nicht mehr. Haben wir alles im Store. Siehst du mal, es wird schon einiges kürzer
hier. So. Jetzt müssen wir noch, okay, die Prozente müssen wir noch Calculate. Percent. Oh. Was? To
Do's Filter ist not a Function. Warum? Was ist jetzt auf einmal das Problem? Was? Filter? Ach
hier. Remove. Ach so. Ja, das kommentieren wir auch mal aus. Das kommentieren wir auch mal aus. Filter. Ach hier. Ja,
es muss Dollar To Do's sein. Dollar To Do's, To Do's Length. Okay. Warum aktualisiert sich das jetzt
denn mehr? Ich hätte es eigentlich gedacht, es müsste einfach funktionieren. Bekommt er das
irgendwie nicht mit, wenn das geupdatet wird? If Browser To Let's To Do's Store. Da kann ja nicht
allzu viel verkehrt laufen jetzt. Percent ist unused. Das ist richtig. Ah. Calculate. Guck mal,
schon funktioniert es. Der Chat ist wieder richtig Expanded Brain am Mitdenken hier. Ich merke es.
Huge Big Brain Chat. So. Siehst du mal, jetzt haben wir das ganze schon deutlich kürzer und knackiger gemacht. So. Wir
könnten jetzt noch diesen ganzen, diesen ganzen Create To Do Geschiss könnten wir eigentlich noch
in die Stores, in die Stores mit reinpacken. Wobei oder auch nicht. Lassen wir das, lassen wir das. Okay. So. Jetzt müssen wir
erstmal wieder bauen, dass es funktioniert. So. Wenn ich ein To Do hinzufüge, dann will ich jetzt
nicht sagen Add To Do's gleich. Kann ich das jetzt einfach so mit dem Store machen? Geht das? Nee?
Warum? Muss ich da auch ein Dollar davor machen? Geht das? Funzt. Nice. Aber löschen geht natürlich nicht.
Aber wäre es nicht schöner, wenn ich einfach sagen würde To Do's Set. Warte mal. Wobei nö. Geht doch. So
eigentlich in Ordnung so, oder? Tauschen wir einfach aus. Wenn wir den Store. So. Und jetzt soll ich
Sachen löschen können wieder und Sachen hinzufügen können. Excellent. Funktioniert wunderbar. Nice.
Komm mal schon deutlich übersichtlicher. So. Und jetzt ist natürlich die Frage, können wir das hier
vielleicht noch auskliedern? Kann man? Boah, das wäre es jetzt natürlich. Kann man irgendwie in
diesem Store so ein Custom Property machen? So nach dem Motto Count. Und dass ich quasi das hier
gar nicht mehr brauche. Oder dass man vielleicht sogar sogar so weit gehen kann, wie ich sage, Percent oder so.
Oder sagen wir hier Completed. Dann. Genau. Wie viel davon? Kann man da überhaupt Custom Sachen
hinzufügen? Return 5. Mal gucken. Ich weiß nicht, ob das funktioniert. Also kann ich jetzt so was
sagen wie. Du du's. Dann anscheinend schon. Fünf. Okay. Und ist das jetzt dynamisch, wenn ich dann
sowas sage wie. Store. Ach so, jetzt kann ich ja nicht auf den Inhalt von meinem Store zugreifen.
Boah, das ist ja pepega. Das muss ich aktualisieren. Jedes Mal, wenn ich subscribe, wenn ich, wenn ich
einen neuen Wert rein kriege, müsste ich das aktualisieren. Geht das? Nee, das gibt's hier nicht. Ach doch.
Block. So was da? Vielleicht geht das jetzt? Nee, oder? Das ist not defined. Undefined ist es.
Nee, nee, es ist undefined. Das geht nicht. Nee, nee, passt. Ist doch richtig. Ist richtig. So,
ich habe aber keine Ahnung, was ich damit jetzt anfange. Ehrlich gesagt. So. Wie komme ich denn
jetzt an die Daten da draus dran? Das gibt sowas wie Get oder so. Get. Jetzt Wellstore. Get. Get.
Get this. Ich habe ehrlich gesagt legit keinen Plan, was ich hier mache gerade. Ach,
Commander. Okay. Was zum Teufel passiert hier überhaupt? Und jetzt Return Data Length. Fünf.
Ja, passt doch. Ah, das updatet sich nicht automatisch. Guckt mal. Das ist ja doof. Das
updatet sich nicht automatisch. Ja, dann bringt uns das nichts, wenn sich das nicht automatisch
updatet. Guckt, es updatet sich automatisch. Ja, dann ist das natürlich unsinnig. Kann
man sowas machen? Nee, dann bringt das nichts, was ich mir hier vorgestellt habe. Okay, nee,
keine Ahnung. Dann, dann, dann, dann belassen wir das jetzt mal hier bei der. Oh, was ist jetzt?
Dann gibt es nicht. Aber nice. Trotzdem, das ist schon mal. Github Repo stimmt. Jetzt,
wo wir gerade dabei sind, wir machen das jetzt mal. Zack, wo sind wir denn?
Er sollte eigentlich jetzt nicht mehr den Master haben. Ach so, hier ist das. Github Repo.
Hier habe ich das. Okay. So, nee, nee, ich habe, ich habe da lokal schon ein bisschen
rumgewurstet. Das will ich nicht pushen auf Github. So, geht in it. Oh, Master Branch. Ganz,
ganz böse. Wir müssen jetzt ein paar Sachen exkluden. Wir brauchen, wir brauchen ein paar
Git Ignores. Also, was, was wollen wir denn hier nicht mit committen? Git Ignore. Gibt's da nicht
schon irgendwas fertiges? Vor allem, warum ist da kein? Warum bringt das? Warum bringt das? Ach,
Moment, da gibt es schon eine Github. Da gibt es schon eine Datei. Ja, dann ist ja alles gut. Dann
ist ja alles kein Problem. So, das heißt jetzt im Endeffekt, wenn ich eins hochgehe,
Git Status, Git, Git Add, immer noch Features, Features, moveen wir mal nach to do, als geht
er da drum. Wobei wir könnten das eigentlich auch als Readme verwenden. Ist, ist wurscht. So, Git
Status, Git Add minus A, Git Status, mal gucken, was der alles edit. Der edit ist Ansible Zeug,
der edit ist den to do Kram, das ist alles in Ordnung, den Source Code, das ist auch alles
in Ordnung, die statischen Bilder, das ist auch alles in Ordnung. Okay, das ist schon mal nicht
gut. WWW Route, WWW Route darf auch nicht mit rein. Git Ignore, WWW Route. Nee, man muss Sternchen
oder sowas machen. Was muss man machen? WWW Route Sternchen? Nee, was, was? Ich glaube einfach,
ich glaube einfach nur so. Stimmt, ich muss, ich muss, ich muss sagen, äh, warte mal, Git,
ich, das, das noch nicht committed, aber geedited, das war was? Reset, minus, minus,
einfach nur Git Reset, nee. Staged, so, okay, passt, Git Add. Jawoll, so sieht das schon viel
besser aus. So sieht das schon viel besser aus. Also wir, wir committen bloß noch Ansible Server
to do, Source, dieses komische Zeug hier, Tailwind GitHub, Tailwind Config, alles genau, okay,
Git, commit, A minus M, init. So, und jetzt gehen wir auf, auf GitHub, ich bin wahrscheinlich
nicht eingeloggt. Sign in. Chat, du musst jetzt weggucken. Keiner hingucken, ne? Alle
weggucken.
Ahh!
Ich kann eh nichts machen, dank 2 Fakten Ordenifizierung, lul.
You have been added to the Agile Progress Organization, dann ist ja alles gut.
So, äh, New Repo, so wie heißt das Ding, Kekstudu, äh Kekstudu,
äh Description Optional, Readme braucht kein Mensch, Lizenz,
Kekwade, Alter, Create, ok, äh, wir brauchen das da, Quatsch, Brock,
so, da sind wir Leute, Kekstudu ist am Start, Readme ist absolut bloated,
ich mein wir könnten, wir könnten einfach, wisst ihr was wir machen, wir moveen die, ähm,
das Feature Ding, moveen wir nach Readme.md und, achso, das ist ja gar nicht hier, das ist da,
Readme.md und sagen, äh, äh, keine Ahnung, über Twitch Stream, äh, geplante Features zum Einbauen,
so, gut, das, eigentlich hätten wir sagen müssen GitMV, übrigens das war jetzt blöd von mir,
eigentlich hätte ich sagen müssen, hätte ich euch gleich mal richtig zeigen können,
äh, richtig zeigen können, eigentlich wäre sinnvoller gewesen, wir hätten GitMV benutzt,
er hat es aber auch so gecheckt, dass er nämlich erkennt, das wurde renamed von da nach da,
Git, commit, minus a, minus m, Readme, Topfer Readme geht auch so klein geschrieben,
äh, so, jetzt das Shit Repo am Start, exzellent, so, jetzt können wir weitermachen, wo sind wir
stehen geblieben, du, du, hier oben wollen wir nach Ansible, falls wir das zum Deployen brauchen
und hier unten wollen wir Open, den Broser, so, gut, wunderbar, also, ich habe gesagt,
wir wollen das noch ein bisschen, ein bisschen weiter aufräumen, äh, wir könnten diese,
diese Create tut, eigentlich, Leute, was haltet ihr von der Idee, wir, wir machen das komplette
Remove, Add und Create, machen wir mit in diesen Store rein, weil da gehört es eigentlich hin,
oder, eigentlich könnte man auch quasi sagen, wir nehmen das und sagen, irgendwie,
wobei ich mir nicht sicher bin, ob das funktioniert, wie das funktioniert,
das funktioniert doch nie im Leben, einfach, ah, nee, funktioniert auch nicht so, es ist
gebrochen, add to do is not defined, muss ich doch wenigstens noch importieren, add, remove
is not defined, ok, äh, ach, jetzt kann man wieder nicht auf den, auf den Store hier zugreifen,
ja, warum, das verstehe ich nicht, checkt irgendjemand, warum ich hier dollar to do's
nicht machen darf und hier darf ich dollar to do's machen, kann man das auf Raspberry
Pi laufen lassen, klar, überhaupt kein Ding, das ist statische Webseite, Leute, was findet
ihr besser, wenn wir den Kram in diese Store Datei machen oder im Index lassen, ich meine,
es hat ja mit dem Store eigentlich nichts zu tun, kann mir jemand erklären, für was
das, äh, Dollar Symbol steht, das ist, das ist Weltlogik, das sorgt dafür, dass % immer
neu berechnet wird, wenn sich hier hinten was geändert hat, das ist, das ist Weltlogik,
also wenn sich in to do's was ändert, dann wird % automatisch neu berechnet, was, bleibt
es so, komm wieder weg, wunderbar, gut, create, create to do, ist da add to do, ok, passt
eigentlich alles, dann können wir das, denke ich mal so lassen, guck mal, das sieht schon
deutlich übersichtlicher aus jetzt am Anfang, ähm, eine Sache, die ist auch unnötig, ich
finde add to do's und remove to do's sollten in den Store, aber nicht create to do, ok,
ja das stimmt, das hier gepasst zum Store, das ist ja irgendwie so ein custom Ding, gucken
wir mal, aber das funktioniert ja aus irgendwelchen Gründen nicht, ich lasse es jetzt erstmal
so, ich meine, es ist jetzt nicht so, als wäre das hier wahnsinnig unübersichtlich,
ok, also wisst ihr was ich auch noch sehr unübersichtlich finde, da habe ich aber auch
schon eine Idee für, was ich auch noch übelst unübersichtlich finde, ist das hier mit diesen,
mit den Icons, das ist auch, das ist auch eklig, aber was ich da, was ich letztens gefunden
habe und was ich auch schon mal ausprobieren will, ist das hier, hat das mal jemand ausprobiert?
Iconify, Iconify, so und da habe ich nämlich gesehen, da gibt es sogar eines Weltkomponent
für und was das angeblich macht, ist folgendes, das ist ein Meta, äh, keine Ahnung, Meta-Framework
für zig unterschiedliche Icon-Fonds, das heißt, man kann quasi mit einem Meta-Icon-Fond
jegliche Icon-Fonds verwenden, die man will, zum Beispiel, wenn man jetzt hier mal nach
Trash-Icon sucht, Search-Icons, so, dann sehe ich, ok, es gibt Trash-Icons in quasi allen
möglichen Image-Fonds, sogar hier, sogar bunte und sowas und der hat quasi von Material-Design-Icons
bis Hero-Icons und sowas, alles, alles mit drinne, das heißt, wir könnten uns dieses
von Hand hinzugefüge sparen, deswegen probieren wir das jetzt mal, probieren wir das jetzt
mal aus, npm install, was ist denn der Unterschied zwischen, was ist denn der Unterschied zwischen
save-dev und install, also der Unterschied da zwischen und da zwischen, ah, wahrscheinlich,
dass ich das, wenn ich es gebildet hab, auf dem Server nicht brauche oder so, ok, npm save-dev,
dev-dependencies, alles klar, jetzt weiß ich noch weniger Bescheid, what is dev-dependencies,
npm, names versions of node which are required only for development purposes, aha, aber warum
will ich das denn als dev haben, ich will das doch dann später auch verwenden, egal,
wir machen das, wenn die offizielle Anleitung das so sagt, dann machen wir das jetzt einfach,
npm import icon from iconify, bam, so, und jetzt, wie können wir das dann verwenden,
icon gleich mde-litehome, testen wir mal, jetzt sollte über der progress bahnen material
design icon an, hey, easy, das ist ja einfach, das ist ja geil, das ist ja wirklich easy,
easy.
Ok, und jetzt brauchen wir noch die richtige Syntax, pass mal auf, ich hab noch, ich hab
noch eine bessere Idee, extensions iconify, gibt's bestimmt, gibt's, es gibt für jeden
scheiß visual studio code extensions, guck mal da, iconify-intelliSense, als hätt ich
es riesen können vorher, es gibt für visual studio code jeden scheiß mittlerweile, warum
soll's da nicht auch ein iconify-intelliSense geben, was macht das, das ist ein äußerst
hochauflösendes Bild, krieg ich das vielleicht auch mal so, dass ich's erkennen kann, nein,
ah doch, warum kann man das hier nicht anklicken und es wird groß, ahja, ja nice, ok install,
ok, das heißt ich kann jetzt hier quasi sagen, icon, was, 2 Emoji, alter, mit Bildervorschau,
fuck, massive, alter, trash, oder bin, nein ich bikini, ok und das jetzt größer, größer
zu machen, um das jetzt größer zu machen, könnte man beispielsweise ein class text xl
oder 5xl, bam, ich mein ich will nicht wirklich da an dieser Stelle ein icon haben, ne, das
war jetzt nur zum testen, paper please, ja ich weiß nicht, was haben die denn für icon
fonts, haben die twitch emotes als icon fonts, iconify twitch emotes, bestimmt nicht, nein,
warum hat keiner, warum haben die keine twitch emotes, bros icons, was haben sie denn drin,
also material design icons, google material icons, phosphor icons, icon park, meine güte,
was es da alles gibt, line icons, aber keine twitch emotes, twitter emotes, ok, aber keine
twitch emotes, aber das ist mega geil, das ist eine image komponente, also eine icon komponente
einfach für alles, das finde ich nice, das heißt, guck mal, wir können uns diesen krempel
hier sparen, aber die klassen, die klasse, die klasse merke ich mir jetzt hier gerade
mal, äh, auskommentieren html, also das heißt wir können dieses ganze ding hier rausschmeißen
und einfach noch sagen icon, icon, hallo, ok dann eben nicht, icon, ach ne ich hab vergessen,
was war das icon, achso dann einfach icon gleich, so, wir wollen nicht wie moji, wir
wollen hero icons, hero icons outline hatten wir nämlich dafür, hero icons outline, aber
wo sind wir denn überhaupt gerade, beim to do button sind wir, hero icons outline plus
hieß das glaub ich plus circle, da ist er, nur mit den falschen hintergrunddingern, also
da kriegt das jetzt als class, select, none, md, genau und bg pink rounded, ups, jetzt hab
es gelöscht, was hab ich falsch gemacht, ah, äh, ah, ich hab, äh, normal, ich hab
dir die faultgröße vergessen, nice, guck mal wie viel übersichtlicher das jetzt ist,
guck mal wir sind schon bei 79 zeilen, das ist viel besser lesbar, was, servus, also ganz
ehrlich zum einstieg wünschen viewjs empfehlen, viewjs kannst du verwenden ohne jeglichen
build geschichten, kannst du einfach script include viewjs und auf gehts, das ist dann
zwar nicht so, so die allerperformanteste und beste geschichte, aber du kannst einfach
quasi mit viewjs anfangen wie damals mit jQuery im endeffekt, auf viewjs finde ich
ist zur einleitung auch mit, also zum lernen auch mit abstand das einfachste, äh, übrigens
wir sind nicht wie, wir sind view version 3, das ist falsch was hier steht, aber das
geht in view version 3 wahrscheinlich auch ähnlich, viewjs 3 tutorial cdn, ja, genau
einfach, einfach importen in die seite und dann, alter haben die kein gescheites beispiel
und dann hier, ne runtime only, das da braucht man, aber für view gibts massig, ähm, tutorials
und du kannst da anfangen ohne 30 million build tools, einfach in deine html seite view
reinschreiben und loslegen, ansonsten kann ich dir noch eine sache empfehlen, äh, zum
anfangen, äh, wide starter, wobei wheat ist es ja eigentlich, template, nämlich das da,
das ist auch für viewjs ein super starter template, aber das macht halt schon viele
sachen für, sachen für dich, wo man dann erstmal wahrscheinlich bisschen, bisschen
überfordert ist, aber da musst du dir einfach nur das github repo klonen und hast quasi
alles was du zum entwickeln mit typescript und viewjs brauchst schon am start, wobei
du halt 90 prozent von dem kram hier wahrscheinlich gar nicht brauchst, ja, svelte ist aber auch
nice muss ich sagen, aber svelte funktioniert halt nur mit sehr vielen build tools, ne view
cli ist ein bisschen out mittlerweile, wheat ist das angesagte, aber das heißt wirklich
wheat und das heißt nicht weit, wie die amis das sagen, weil ich hab mich mal belehren
lassen in einem viewjs forum, dass wheat kommt von, kommt aus dem französischen, porgurs,
wahrscheinlich wheat oder so, ähm, und da spricht man halt nicht weit sondern wheat
aus, ne wheat heißt nicht leben, wheat heißt glaube ich sowas wie schnell oder so, ja,
wisst ihr, leute jetzt muss ich euch schon französisch beibringen, monarchs alter,
ich hatte vor zwei wochen ein vorstellungsgespräch für ein ausbilder und zwar fachinformatik
einwendungsentwicklung und der geschäftsführer war ein impfgegner und wollte mich überreden,
dass ich mich nicht impfen lasse, ach du scheiße, wisst ihr, es geht dem typ überhaupt nichts
an, ob du geimpft bist oder nicht, es ist leider mittlerweile so, dass man das auskunft
erteilen muss, aber ich bin immer noch der meinung, es geht den arbeitgebernen scheiß
an, ob man geimpft ist oder nicht, das ist reine private sache, auch wenn ich sinnvoll
halte, sich impfen zu lassen, aber man kann es davon abziehen, eigentlich sollte das
auf der arbeit keine rolle spielen und dann auch noch die leute quasi davon überzeugen
zu wollen, sich nicht impfen zu lassen, ist ja doppelt ppega, so, weiter gehts, so, wo
sind wir stehen geblieben, iconify, plus icon ist auch am start, nice, guck mal leute, es
ist doch viel viel cleaner jetzt als vorher, so progress, value, percent, funktioniert immer
noch alles, so, machen wir hier das icon auch mal weg, welches icon ist das hier nochmal,
höher, welches icon ist, ah hier das buch, also, nochmal, nochmal, icon, icon, nein, icon,
hero, hero icons, outline, und das war es, buch, nee, outline, buch, open, hey, ok, moment,
die größer ist falsch, ah, was hatten wir da für eine größer vorher, rückgängig,
ah ja, 6, klasse, ah, nice, guck mal, wie viel übersicht hier das jetzt ist, und warum
ist das hier display flex, ah, weil ich theoretisch mehrere items nebeneinander machen könne,
ne, genau, da will ich ja oben so eine kleine übersicht machen, dass man verschiedene, verschiedene
notizbücher machen kann, so, guck mal leute, wir sind aus 66 teilen runter, ist richtig
gut lesbar jetzt, so, was können wir hier noch modularer machen, aber es funzt noch
alles, ja, richtig nice, pockchamp, so, div, add to do, das lassen wir so, man, das wirst
ihr nicht viel kleiner kriegen, das ist der hinzufügen button, das ist die liste mit
den to do's, hier oben haben wir die, jetzt sag mal, ist es eigentlich in html standard
oder verbreitet, dass man bereiche kommentiert, dass man zum beispiel sowas sagt wie keine
ahnung, booklist, und dass man dann hier, dass man eben was für teile, start, ende oder
so, sowas, start, booklist, macht man sowas, ne, ne, aber ich mein, wer kommentiert schon,
wer kommentiert schon sein kram, das ist obvious, selbst dokumentieren fehlerfrei, ja, ich find's
aber trotzdem schwierig auf den ersten blick zu erkennen, ich mein, das eigentlich korrekterweise,
wollte ich grad sagen, eigentlich, t-tischbackus wollte ich nämlich auch grad sagen, eigentlich
würde das eher heißen, guck mal, wäre es nicht sinnvoll da eine extra custom component
draus zu machen, ja, wahrscheinlich schon, ne, also machen wir mal, machen wir extra component
draus, bam, copy, booklist, nehmen wir das mal einfach so, so weg damit, weg damit, das da rein, was
ist denn, hab ich was übersehen, flex, kann er das auch gleich importieren, ne, icon, alles
checkt er nicht, dass er das importieren kann, was, ähm, hätte noch eine idee, mach doch bei jedem
to do item noch eine box davor, wo du ein icon auswählen kannst, dann ist es visuell, das ist
ne wirklich gute idee, chat, das find ich gut, ich muss mal kurz die readme öffnen, wo sind wir
hier, readme, ja, ich truste der readme, teachers, custom icon pro to do, icon picker, icon picker,
da gibt es bestimmt schon fertige icon picker, den programmieren wir nicht selbst, ne, ne,
ne, oh, ne, da hab ich keinen Bock, icon picker selbst programmieren, na gut, es ist zum Lernen,
es ist zum Lernen, es ist ja zum Lernen, es ist ja nicht, dass da irgendwas sinnvolles rauskommen
soll am Ende, was, du hast heute eine Absage bekommen, feels batman, äh, batman, hä, also ging es gar
nicht darum, wo du dich beworben hast, du kannst count markieren und im context menu sagen to
separate component, ok, das testen wir jetzt mal, alter, exquisite the features hier, book, books,
oh, guck mal da, richtig big brain time und er insertet es hier an der stelle auch schon,
äh, das stimmt aber nicht, was der da gemacht hat, der hat das alte jetzt mitkopiert, ne,
das ist pains champ, das ist, don't save, das mache ich lieber von hand, don't save, nope, no pass,
also, was brauchen wir denn hier, eigentlich gerade gar nichts, weil es noch null dynamisches macht,
also, Sachen, import, äh, import, das stimmt ja auch so mit dem import gar nicht, es ist ja lip,
das stimmt ja gar nicht, es ist, äh, lip, booklist, macht man das jetzt so, ne, das ist die default so,
und jetzt kann man hier an der stelle sagen, booklist, bam, easy, oh, was haben wir hier 100%,
ach, swap, was interessiert mich, swap, du suchst einen wirtschaftsmanagement mit
sql big data fähigkeiten, excellent, excellent, das ist only for big brain, hi iq, Leute, richtig
hier in der chat wieder, so guck mal, jetzt haben wir eine eigene component für die bookliste,
das, wisst ihr, was das gute ist, wir haben jetzt einen public store für unsere to do's,
das heißt, wir müssen hier gar nichts übergeben, man könnte einfach, in der booklist, kann ich jetzt
einfach sagen, import to do's from store und kann dann quasi hier auf alle, es gibt hier noch keine
books drin, es gibt nur to do's, wohlgemerkt, es hat noch keinen sinn, kann ich dann hier drauf
zugreifen, das ist richtig nice, gut, also, ja, also komm, ich würde sagen, viel übersichtlicher
geht unsere index-seite jetzt nicht mehr, index-seite, dann haben wir einen header,
den header machen wir nicht wirklich als extra, als extra component, das macht ja überhaupt
keinen Sinn, an der Stelle sind zwei zeilen, wir haben den header, wir haben die bücherliste,
wir haben die percent-geschichte als extra-komponente, machst du da sql-zeugs rein,
das ist alles automatisch gespeichert, local storage, guck, deswegen merkt das sich ja auch
die sache, wenn die seite refreshed, wenn schon, kommt das hier, das hier kommt ins layout, kommt
das rein, weil kicks to do soll ja eigentlich immer oben stehen, das heißt eigentlich müsste
das eigentlich ins layout rein, guckt eigentlich müsste das ins layout rein, dass es immer oben
steht, auch falls wir mal eine andere seite haben, so, jetzt ist das index noch mehr geschrumpft,
remove to do kann in die to do-komponente, du meinst die funktion, du meinst das hier,
ja, das funktioniert jetzt tatsächlich, leute, das brauche ich jetzt gar nicht mehr binden,
weil ich kann doch einfach den store importieren, ne, 3ts, 3ts, was auch immer,
die js habe ich schon nie ausprobiert, stimmt, ihr habt recht, guck mal, on delete kann ich
eigentlich wegmachen, das hier kann ich auch löschen, so, und dann gehen wir in die to do
komponente und importieren den store, ach guck mal, hier müssen wir auch nochmal icons austauschen,
sieht auch eklig aus, store, hoffentlich funktioniert das jetzt, wie ich mir das vorgestellt habe,
weil hier löschen tut sich grad nix, aber wir können sagen, click on delete, wir brauchen
auch den dispatcher nicht mehr, weil es kein event mehr geworfen wird, so, on click machen
wir jetzt einfach, demove, die function machen wir hier oben rein, demove to do, to do all die,
so, bam, progas, so, und dann können wir noch das svg hier raushauen, klas, kopieren wir uns mal,
das ist ein, ja, das ist das Mülleimer icon hier hinten, das Mülleimer icon, das schmeißen wir
raus und sagen icon, das müssen wir erstmal importieren, icon, icon, icon, gleich, und was
war das jetzt, hero icons, outline, trash, zack, da sind wir, nice, so, und jetzt machen wir hier
die klas wieder rein, wunderbar, das ist, es wird ja langsam richtig übersichtlich, was wir hier
fabrizieren, oder, scrollbar, gut, das können wir nicht anders abfackeln, das ist eklig, weil du
es für browser zu browser unterschiedlich handeln musst, text area, können wir auch nix großartig
dran ändern, input, können wir auch eigentlich nix großartig dran ändern, meine extra checkbox
component muss aber bestenwillig nicht sein für so was kleines, und remove und add, funktioniert
auch wunderbar, das ist ja richtig gut, also man muss sagen, das ist jetzt echt übersichtlich,
richtig krasse optimization, ja, die icons laden nach erstmal am anfang, sollte das durch server
site rendern eigentlich nicht abgefangen werden, weil ich mein, dafür mach ich doch server site
rendering, was ungefähr, was ich mache ist, du kannst dir das angucken, ich deploy mal kurz,
ich deploy mal schnell, du kannst dir das live angucken, was wir machen, playbook, text deploy,
bam, icon pack wird lazy geladen, ich wills aber nicht lazy laden lassen, ich wills mit ausliefern,
so, guck mal, du kannst auf, du kannst auf todo.cagw.service das bei dir im browser gehen,
dann kannst du dir das angucken, wir üben svelte mit einer todo app, und todo apps sind ja quasi
die hello worlds des internets, aber die animation ist auch nice oder, lulw123, kappa golden,
kappa check, nice, das gefällt mir jetzt langsam echt gut, gut, das hier sieht noch ein bisschen
hässlich aus, aber ich glaube, das müssen wir jetzt erstmal nicht weiter optimalisieren,
gut, also ich würd sagen, aufgeräumt haben wir, jetzt können wir uns mal bei irgendwelchen
neuen features widmen, hübsch machen, haben wir gesagt, haben wir gemacht, wir können
jetzt suche oder dark und light theme implementieren, ich würd sagen, wir machen erstmal die suche,
weil dark und light theme ist eher so ne low brain design geschichte, die man dann am
ende vom stream machen kann, wenn man keinen bock mehr hat, sich gedanken zu machen, dann
sucht man sich einfach noch ein paar farben aus, ist svelte ein framework wie react angular
und view, ja und nein, die haben so einen kleinen trick dabei, wenn du sachen entwickelst,
fühlt sich das ähnlich an zu react angular und view, also du hast hier zum beispiel so
two way, two way data binding und sowas in der richtung, aber der unterschied ist, dass
die im build step alles was du benötigst für diese svelte magic umwandeln in vanilla javascript,
sodass von svelte nach dem build vorgang nix mehr übrig ist, also sprich svelte optimiert
sich quasi selbst weg, das übersetzt sich in vanilla javascript, sodass du nicht svelte
laden musst, damit du svelte webseiten ausführen kannst, so und das führt dazu, dass die seiten
angeblich 30 prozent kleiner sind und schneller laden, dazu kommt, dass du mit svelte kit
noch so eine kombination machen kannst aus client-seite rendering und server-seite rendering,
du kannst die seite quasi schon mal vorladen, du siehst das ja hier, ich krieg die seite
so vom server, oder wir können das ja mal angucken, network, nee man kann sich das nicht
gescheit angucken, hätte er led so viel scheiß, also man bekommt die seite vorgerendert vom
server und der client setzt dann bloß noch die sachen ein, die er braucht um die client-seite
anwendung render zu können, macht reject nicht das gleiche mit bubble, nee bubble hat damit
gar nichts mit bubble, bubble ist ein javascript, achso, eigentlich ist bubble ja ein javascript
transpiler für neue features, ich hab keine ahnung ob react nicht da auch irgendwelche
tricks machen kannst, aber du kannst, diese server-seite-rendering-geschichte kannst
du mit next.js kannst du auch sowas machen, aber dieses react entfernt sich selbst, glaube
ich nicht, weil das eines der quasi seller ist von svelte, wo die sagen, das ist der
verkaufs, das kauf-argument, auch wenn man es nicht kauft, also das aushängeschild von
unserem framework, so probieren wir es jetzt mal mit der suche, was nee express ist node.js
backend, das hat was ganz was anderes zu tun, ist was ganz was anderes, rückgängig button
machen wir gleich, da müssen wir ein papierkorb für einbauen, suchen kannst du ganz leicht
den itch-filter machen, ja wahrscheinlich, also wir brauchen, wo, wo, wo, wo, wo ist denn
ein suchfeld am besten aufgehoben, neben dem, neben dem progress bar oder, nicht drunter
neben der progress bar, weil die progress bar, die muss ja ehrlich gesagt nicht, sehr
gut, steuerung, steuerung f funktioniert aber auch nur bis zu, war in dem fall funktioniert,
ey steuerung f funktioniert sogar, wir brauchen eigentlich gar kein suchfeld, ich hätte jetzt
gedacht, das hat problemen hier mit, aber theoretisch kannst du auch mit steuerung f suchen, aber
wir bauen es trotzdem ein, looper icon, die dann einfeld öffnet, aber mehr in fancy,
nach so dass, wenn jemand außerhalb der textfelder text eintippt, es automatisch sucht, oh big
brain, looper icon neben default, ja, ich sehe schon, der chat hat unterschiedlichste
vorstellen, ok, also das können wir machen, neben dem, neben dem button hier unten, neben
dem add button, machen wir noch einen zweiten button, suche über der prozentanzeige, also
ich, also chat, ich hätte es eigentlich so gemacht jetzt, wenn ich euch nicht gefragt
hätte, hätte ich es jetzt so gemacht, ich hätte gesagt, progress, input, sollte er
das jetzt nicht eigentlich nebeneinander anzeigen, macht er doch, die progress bar ist plus, ist
plus klein, las, ne, die progress bar ist weg, progress bar hat sich verabschiedet, ich
hätte gesagt, cack wait, Leute, ich muss mal kurz, pippo puppu, gleich wieder da, dauert
5 min
Ich glaube, das war's für heute.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Schick, die zwei. Guckt mal, Leute.
Das ist schick. So was könnten wir auch bauen.
Guckt mal.
Kuri!
Das ist schick.
Okay, das machen wir.
Das bauen wir jetzt so was.
Es geht ja ums Lernen, nicht darum, dass das wahnsinnig sinnvoll ist.
So was bauen wir jetzt.
So was bauen wir jetzt. Okay.
Dann machen wir das anders.
Ähm...
Dann machen wir vielleicht doch...
Wir können das ja immer noch ändern.
Dann machen wir vielleicht doch hier unten...
einen Knopf mit Lupe.
Also, Icon.
Wahrscheinlich Lens oder so.
Nee, Zoom.
Search. So.
Oh Leute, ich hab Bauchweh.
Ich muss, glaub ich, gleich noch mal aufs Klo.
Der Köfteteller will raus, Leute. Ich sag's euch.
Gut, hier unten haben wir die Lupe.
So, und jetzt ist natürlich die Frage.
Also, onClick, add to, do...
Wie hat der das so geil hinbekommen?
Also, ich muss ja sagen, ich find das hier deutlich, deutlich cooler.
What is this field?
Button type input.
Der hat das komplett ohne JavaScript nur...
Nur mit CSS-Animations gemacht, oder wie?
Das ist nicht schlecht. Wie hat er das gemacht?
Hinten.
Button.
Active state. Alter, ich weiß gar nicht, wie das funktioniert.
Alter, das ist ja next-level CSS-shit.
Ich hätte jetzt gedacht, dass es da ein onClick-Event gibt,
und es passiert irgendwas. Wie funktioniert das überhaupt?
Nee, nee, nee, nee, wir machen nicht Control.
Okay, Bodyset. Search.
Also, der hat HTML.
Also, der hat Form-Action.
Okay, der braucht nur Form anscheinend. Form?
Ich transform.
Input? Pattern?
Was macht denn das? Pattern?
Ach, das ist, wann da angezeigt wird, was ich eintragen soll, okay.
Required, okay.
Aber standardmäßig zeigt er das Input gar nicht. Input.
Der hat das bestimmt hidden oder so. Input.
Search Bar. Focus. Aha. Input. Focus.
Search Button. Active.
Okay, der hat wirklich CSS durchgespielt, würde ich sagen.
Das ist wirklich next-level shit.
Ich mein, so cool das... Wo hast denn das her? Ich mein, so cool das ist.
Der Trigger? Das ist noch nicht mal durch den Button-Click.
Search Button. Types. Ah, Moment.
Das ist ein Submit-Button, das die Form auslöst, oder was?
Das ist ein Form-Button, und wenn die Form gesubmitted wird...
Ist da auch Erklärung zu? Nee.
Nee, ich will es ja einfach nur verstehen, was der Typ da macht.
Guck mal, das transformt dann irgendwie zum... Alter, das ist wirklich next-level shit.
Ich glaube, da bin ich nicht in der Lage, zu so krasses CSS-Stells zu machen.
Ich würde das jetzt anders machen. Ich würde jetzt quasi sagen...
OnClick... OnClick... Irgendwie fahren wir das aus.
Dass wir quasi, keine Ahnung, sowas sagen wie irgendwie...
Search Active oder sowas, und dann erscheint ein Overlay oder sowas.
Wisst ihr, wie ich meine?
Ey, das Check... Ich hab keine Ahnung, wie das hier funktioniert.
Wirklich nicht. Beim Besten will ich nicht.
Valid, SearchBar, Input, Focus.
Alter, ich hab keinen Plan, wie das funktioniert, man.
Guck mal, das animiert ja auch rüber.
Also ich gehe davon aus, dass das hier...
Was reicht doch?
Eine Active-Klasse mit anderer Breite und das Input wird dann angezeigt.
Aha, okay, okay. Ich hab da... Okay, also, sprich...
Wo sind wir denn?
Hier. Also wir haben quasi noch ein Input hier mit drin.
Und das sieht man normalerweise nicht.
Nee.
Nee, so einfach ist das nicht.
Oder?
Na gut, aber wie trigger ich das jetzt?
Ich mein, die JavaScript-Variante fällt mir ein, ja?
Keine Ahnung. Let searchActive gleich false.
Ja, so, und jetzt sag ich quasi, hidden kann man das binden.
Hidden gleich searchActive.
Oder auch nicht.
Was kann man bei hidden eigentlich alles drin anzeigen?
Geht da so was wie false?
True.
Ach nee, es ist einfach nur die Frage, ob es hidden ist.
Was muss ich...
Wie binde ich das denn jetzt richtig?
Svelte, bind, hidden, input.
Bind? Was?
Was?
Nee.
Deswegen was anderes.
Bind, checked, hidden.
Wie bindet man denn jetzt hier was hin?
Und jetzt searchActive?
Gucken wir mal, ob das überhaupt searchActive...
Ach, das switcht gar nicht um, searchActive.
Warum nicht?
Weil es ein Event sein muss.
Okay.
Aber...
Ja, hidden class binden.
Aber warum kann ich das...
Das kann man doch auch.
Muss ich irgendwie sagen, bind hidden?
Nee.
Ah.
Okay.
Einfach so.
Ich muss noch mal aufs Klo, sorry.
Okay, los.
Okay, los.
Okay, los.
Okay, los.
Okay, los.
Okay, los.
Okay, los.
Okay, los.
So, jetzt aber, ich hoffe jetzt ist aber gut.
So, weiter geht's.
Ähm...
Rocks, dankeschön für den Sub. Ich hoffe das war's jetzt.
Ich hoffe ich muss hier nicht gleich nochmal.
Aber das kann schon sein, also der Köfte-Teller ist wirklich ziemlich auf dem Weg nach draußen gerade.
The bomb has been planted.
So, also ich mein schön animiert ist was anderes, Leute, ne?
Schön animiert ist was anderes als was ich hier gebaut hab.
Usability gleich Null.
Was ist das für ein Betriebssystem? Das ist Manjaro mit i3-WM.
Nee, nee, das müssen wir irgendwie anders machen.
Ich mein von der Idee her,
uns das doch eigentlich.
Guck mal, wenn wir jetzt einfach sagen,
Hidden...
Wobei wir, wir können wirklich Hidden-Class nehmen einfach.
Wir können wirklich sagen,
Hidden-Class.
Oops, Hidden-Class.
Wenn Not-Active ist,
nee anders so.
Also,
nee anders so.
Eigentlich sollte es jetzt, sollte sich der Button jetzt heiden.
Warum heidet sich, warum heidet sich der...
Ach Moment, Moment.
Das ist das Icon, ich will nicht das Icon heiden.
Das ist ja Schwachsinn, was ich hier mache, warte mal.
Der Input muss eins oben drüber und da muss noch ein Diff drum.
So.
So.
What the fuck?
Was?
What is happening?
Hä?
Hä?
Nee.
Ja, das ist Schwachsinn, was ich gemacht habe.
Das ist Blödsinn, was ich gemacht habe.
Das war schon richtig der Input da unten.
Der Input, der Input schon richtig.
Aber,
ähm...
Ja, und Click ist auch in Ordnung.
Aber das hier sollte eigentlich hidden sein.
Hidden.
Ja, geht doch.
So, und warum kann ich nicht sagen Class,
hidden gleich
not
Classes can only be supplied to Dom-Elements,
not
not, hä?
Wie?
Aber ich kann doch hier auch Classes zu angeben.
Hä?
Muss ich das jetzt ernsthaft nochmal rappen,
oder was?
Oh, jetzt ist alles weg.
Hä?
Ich check's nicht.
Wo...
Wo ist mein...
Wo ist mein Icon jetzt?
Warum ist denn jetzt mein Icon weg?
Ah, ich hab immer noch hidden dran.
Lul.
So, guckt mal.
Wie kommt der Sache schon näher, Leute?
Seht ihr das?
Seht ihr das?
Wie kommt der Sache schon näher?
Ich mein, es ist bei weitem halt nicht so geil
wie das hier, aber
wie kommt der Sache näher?
Nur, ich hab keine Ahnung...
Alter, wie hat der Typ das so krass animiert?
Ich wüsste gar nicht, wie ich die...
Ich wüsste gar nicht, wie ich das jetzt animieren soll.
Er hat's ja auch komplett ohne Javascript gemacht.
Die...
Ich hab keine Ahnung, wie das funktioniert.
Alter, das sieht aber schon mega nice aus.
Also, ich...
Ich erkenne, der hat es in...
Ist es wichtig, dass es in einer Form drin ist?
Kann man das nicht editieren, ohne sich da anzumelden?
Kann man das nicht editieren, ohne sich da anzumelden?
Wie kann man das jetzt wieder starten?
Wie kann man das jetzt wieder starten?
Wie kann man das jetzt ausführen,
wenn sich's geändert hat?
Gar nicht, oder?
Muss sich anmelden, na geil.
Ich mein, der
animatet ja rüber von
einem zum anderen.
Content...
Before...
Content button before...
Ja, der hat...
Ich hab ja nichts, was ich transitionen kann.
Ich verstärke ein Element und
zeige eins an.
Ich glaube nicht, dass man das so ohne weiteres
animieren kann.
Was, du musst die View wieder klicken?
Hab ich doch hier.
Ich klick die ganze Zeit in die View.
Guck, aber da erinnert sich nichts,
wenn ich in die View klick.
Das ist wahrscheinlich, weil es
ein Link zu einem CodePen ist.
Ich müsste das jetzt quasi
mit einem eigenen Account für machen.
Das ist ja doof. Will man jetzt keinen Account für machen?
So, wie kriegen wir so
nice animiertes...
Animated CSS
Search Bar.
Foolish Developer, klingt gut.
Jawoll.
Jawoll, so was. So was ist gut.
Ohne JavaScript.
Komm her.
Moment, das ist doch einfach
ein Hover-Effekt, oder?
Das ist doch ein simpler
Hover-Effekt.
Moment.
Ich glaube, ich habe eine Idee, wie man das machen kann.
Sekunde.
Moment, Moment, Moment.
Das ist doch...
Warte mal, warte mal.
Das ist doch eigentlich gar nicht so
schwer.
Also das mit dem Hitten
und so, das lassen wir jetzt einfach mal komplett
weg.
So, jetzt haben wir den Kram
so. Jetzt müssen wir irgendwie noch dafür
sorgen, dass der Mist
nebeneinander ist.
So.
Und jetzt sagen
wir dem Breite
4.
Was auch immer.
Breite
8.
Jetzt verschiebt sich der ganze
Mist.
Overflow Hitten, okay.
Overflow.
Aha, aha, aha, aha.
Okay.
Ja.
Exzellent.
Warum bewegt sich jetzt
der Button eigentlich?
Weil es nicht breit genug ist.
Okay. Das heißt, das Icon
muss auf die linke Seite erst
machen, machen wir, machen wir so. Wir tasten,
wir tasten
wir tasten, wir tasten uns ran.
Ich glaube,
Flex ist keine so gute
Idee in dem Fall.
Wie kriegt man
das HTML technisch alles auf eine
Zeile?
Ne.
Das Linux ist in der VM, ja.
Also ja, wir brauchen es nebeneinander
auf einer Zeile.
Also ja, wir brauchen es nebeneinander
auf einer Zeile.
So.
Okay.
Warum ist denn dann das Icon weg?
Das Icon sollte doch eigentlich als allerletztes
wegkommen.
Ich will jetzt quasi haben so was wie
Ich will es jetzt abschneiden.
Macht das Icon
absolut auf rechts über dem Input.
Right.
Top.
Ne.
Na doch, okay, okay.
Was ist das Haussystem,
Winos?
Okay, da kann man also Flex
auch wieder rausnehmen.
Und jetzt
Breite 8.
Okay.
Jetzt schneidet er das aber auch nicht
mehr ab.
Oh Gott, CSS, man.
Alter.
Kann ich dem nicht einfach sagen,
render den Scheiß und
schneid's ab?
Was muss ich bei
FlexOptions hinstellen?
Das ergibt ja schon Sinn.
Ich könnte jetzt einfach die
Breite animieren von dem Ding.
Das ist ja richtig scheiße, man.
Ich hab keine Ahnung davon, wie das funktioniert.
CSS, ich brauche irgendein Blogartikel,
der mir das erklärt.
So, hier, das sieht doch
deutlich simpler aus hier.
Also was machen die dann hier?
So, Form,
Position Relative,
sonst was, Input,
Absolute.
Und das hier ist das Icon.
Form, Hover,
Breite, ja die machen
doch genau das.
Ne, ne, das
mach ich selbst.
Die machen genau das,
die machen das genauso, wie ich mir das
vorstelle.
Icon?
Das hier ist das Icon.
Und wo animieren die das?
Warte mal, wie animiert
sich das denn jetzt?
Check ich jetzt gar nicht, wo ist denn die Animation?
Ah hier, Transition.
Transition, hier.
Transition.
Also ich meine,
von der Idee her habe ich, ich habe
schon so eine, das glaube ich,
verstanden, wie die das machen.
Aber ich
check es nicht so ganz, die machen quasi sowas hier.
Äh,
die machen quasi,
die machen
quasi sowas hier. Hover,
und dann keine Ahnung.
Und dann ändern die an, on hover
irgendwelche.
So die ändern, also von der Idee her, die machen
on hover, machen die halt irgendwie
die, ändern die halt die Breite von diesem
gesamten Ding.
So und dann sagen sie noch dazu, Transition.
Äh,
Animate, ne.
Kogas, Alter.
Translate.
Oh ne, ich habe vergessen,
wie das mit den Transition funktioniert.
Ähm, warte mal, Transition,
Transition hatten wir doch hier oben bei der Textarea.
Transition.
So und jetzt wollen wir nicht die,
wollen wir nicht die Höhe, sondern die Breite
Transition.
Transitionen.
Witz, die Witz.
Guck hier,
jetzt animiert er nämlich schon ein bisschen.
Duration.
1000.
Von der Idee her ist das schon,
geht das schon in die richtige
Richtung. Ich bin bloß zu blöd
für, für CSS
Input-Geschichten.
Guck von der Idee her geht das schon in die richtige
Richtung.
Nur dass ich nicht den Button ein und ausfahren
will, sondern den Input
daneben ein und ausfahren
will.
Was passiert denn jetzt, wenn ich einen Input daneben mache?
Input?
Ja gut.
Dann bewegt sich der Input.
Na super geil.
Also müsste ich das
eigentlich,
also müsste das eigentlich
hier hin.
Alter ich bin zu dumm für CSS,
ich hab keine Ahnung wie das scheiß funktioniert.
Ich
versteh es prinzipiell,
was der da macht, aber nicht, dass
ich das irgendwie selbst machen könnte.
Das ist wirklich schwarze Magie hier.
Moment, der macht das auch,
der hat die Form außen drum herum.
Der macht
das äußere Element
breiter, der macht das schon
fast so
ähnlich wie ich.
Der macht das ähnlich wie ich, nur dass
meine Settings komplett nicht stimmen.
So.
Input?
So der hat einen Input
und einen Icon
direkt nebeneinander, so wie ich
auch.
Wie hat er das jetzt geschafft, dass der
Kram nebeneinander ist?
Ach hier guck mal,
Input, Position, Absolute.
So und die Form ist Relative.
Also das da muss
Relative sein.
Und der Input muss,
Class, Absolute.
Aha, aha.
Ah.
Es, es, okay
wir kommen, wir kommen der Sache näher.
Wir kommen der Sache näher, Leute.
So, da muss man natürlich,
gut, das ist um die Form in der Mitte
auszurichten, das ist für uns egal.
Input, Position,
Top Left, 100% Width,
okay.
Top,
Null,
Null,
Null,
Null,
Left,
Null,
100%
Breite.
Da muss man eigentlich gerade angeben.
Warum, ich muss hier rüber.
So, Borderboard,
das ist ja alles nur
Kosmetik.
Ne, Animation sind POG.
Vor allem so langsam, die Animation
wird ja im Endeffekt dann auch schneller.
Da machen wir dann irgendwie sowas hier.
Hauptsache es fährt auf.
Das ist schon nice, oder?
Hier, wie wir das gemacht haben, das fährt dann einfach
nur aus.
Mach das jetzt nur so langsam,
dass ich erkenne, was passiert.
So,
okay, jetzt haben sie,
jetzt haben sie den,
okay, das ist die Form.
So, der Input ist absolut ausgerichtet.
Der Rest passt eigentlich.
Display, None.
Okay, das ist...
Moment, wo sind wir hier? Display, None?
Hier da.
Das ist bestimmt hinten, oder?
Hin.
Hin, ja, hin.
Hin.
Hidden.
So, Input ist
hin.
So.
So, dann kommt jetzt
das Icon, das ist das Icon,
ist ja nur das Icon da.
Und jetzt
hover
über dem übergeordneten
Element. Okay, also nicht hier,
sondern oben
drüber.
Also da.
Mhm.
Ich mein...
So, und jetzt sagt der Input
Display Block. So, wenn
es on hover ist,
dann, dann wird der Input
Display wird auf Block
geschaltet.
Also sprich, sobald ich hier drüber
bin, wird das dann eingeplendet.
Wie krieg ich das jetzt?
Wie krieg ich das?
Okay, das, das krieg ich jetzt
in Tailwind nicht gebacken, das muss ich hier unten
irgendwie nachbauen.
Mhm.
Aber by the way, die Transition
ist auch nicht so ganz smooth,
ne?
Vmware oder Virtual Box Vmware.
Wir machen das mal,
ich mach jetzt die komische Transition weg.
Ich will jetzt einfach nur, dass das mit dem Input
funktioniert. Okay,
hover.
Okay, ich mein, ich mein wir nähern
unsere Sache. Jetzt, jetzt müsste das
in, warum geht das Ding jetzt eigentlich nach...
Moment, warum geht denn das
Icon jetzt, jetzt auf einmal
nach links?
Moment, geht das Icon da
auch nach links? Hier geht das Icon
nach rechts. Ja gut, das ist je nachdem, wo es
platziert ist. Das Icon ist ja bei dem auch umgedreht.
Hä?
Icon Position?
Okay,
Form Hover?
Da weiß ich nicht, wie ich das
in Tailwind mache, da muss ich hier unten
extra klassen. Weil ich will jetzt ja quasi
sowas hier sagen.
Wenn das hier Hover ist,
ist das Search Button
hier unten.
So, wir haben auch, wir haben neben Hover hat man
ja auch noch sowas wie Hover,
was? Peer Hover, Group Hover?
Es gibt
auch sowas wie Focus Within und sowas.
Group of Parent?
Group Hover, das habe ich doch nie
verwendet Alter. Group
Hover, nein Group
Hover, da lerne man noch was.
Group Hover?
I-Fat Time?
Group Hover?
Das heißt?
Ah, Group?
Ah, okay, das heißt ich mache
ich mache hier oben, schreibe ich
Group?
Einfach nur Group?
Ne, oder?
Pepega?
Pepega?
Kram?
Group?
Styling based on parent state?
Group?
Group Hover?
Okay?
Alles klar?
Okay, Group Hover W40
Okay, das funktioniert.
Obwohl ich das ja nicht so
haben will.
Ich will, ich will sagen
Group Hover
Lock
Okay, wenn ich drüber
gehe
Alles klar?
Aber wie hat er denn jetzt die
diese Animation
gemacht?
Wie hat er die Animation hier jetzt gemacht?
Transition All
Die Transition ist auf dem
Icon?
Alter, kann das mal weiter suchen?
Form
Ah, mit der, okay
Ich bin nicht in der Lage alles zu bauen
So, Form
Transition All
Das ist doch hier
Damit würde er doch eigentlich auch die Breite
Die Breite machen
Also probier das mal aus.
Ich bin nicht in der Lage
Ich bin nicht in der Lage
Ich bin nicht in der Lage das Scheiß zu animieren
Was? Du hast einen CodePen gepostet?
Okay, zeig mal her.
Excellent
Okay, BigBrain
BigBrain Time, Leute, hier im Chat
Fokus
Okay
Ach, ne
Das ist einfach das Generatede
So
Das hab ich
Diff Relative
Das ist einfach nur so, dass es über einen
kompletten Bildschirm geht, oder?
Das ist ja quasi nur der Hintergrund
Das Blaue, ne?
Und dass das in der Mitte ist
So
Input
So, das ist das Styling
Transition All
Aha, an dem Input kommt noch eine Transition hin
Und jetzt
help,
risking,
war keine Chance
hin.
Das hier ist ja im Prinzip nur das Bild, wenn ich das weg mache gehts immer noch aber
das ist halt kein Icon da. So und das hat ansonsten nix. Absolute Transform. Gut also
das hier ist, das hier ist mein Icon Ding. So und das hier ist, das hier ist mein Icon
Ding. Weißt was ich copy paste das jetzt einfach mal von dir Lul. Warum, warum einfach, warum
kompliziert wenns da einfach geht. So ok nice. So ich hab, ey das ist echt richtig
räudig die ganze Geschichte und da checkt doch keiner was. Aber das Gute ist danach hat
man was gelernt. So dann machen wir das ganze jetzt erstmal class, fixed und zwar fixed
ride bottom hier. Ne nicht fixed ride, fixed ride irgendwie 18 oder 20 oder. Ok nice.
So schön in der Mitte. So und wie funzt, wie funzt das jetzt? So das ist, dass er,
das ist, dass er das Input animiert. Moment dein Icon. Wo ist denn jetzt dein Icon wieder
hin? Eben hat das doch wieder übersetzt jetzt ist der Icon weg. Ok warum geht dein Icon
nach rechts und mein Icon geht nach links? Wenn ichs kopiere. Ach das ist hier wegen
ha? Ahja ok. Ich könnte auch einfach sagen ride. Aber Leute ich verstehs trotzdem nicht.
Keine Ahnung warum das funktioniert. Wenn ich drauf klicke was passiert dann? Dann gibt
es Fokus. Ok du klickst drauf er macht die Breite von 10 auf 32. Ne das ist ja das was
ich im Prinzip sowas ähnliches auch probiert habe. Ach das Icon ist, ja gut das Icon ist
einfach nur Overlayed über dem Input. Das Icon ist Overlayed, ja eigentlich ist es ganz
logisch das Icon ist Overlayed über dem Input und wenn man auf den Input klickt dann geht
der Input, geht der Input breiter. Steuerung F bringt dir aber nichts weil Steuerung F
einfach auch die completeten durchsucht. Ja das ist eigentlich ist das also dieses Beispiel
ist tatsächlich relativ simpel das habe ich jetzt glaube ich verstanden. Das Icon ist
über dem Input das passiert überhaupt nichts. Du klickst auf den Input durch das Icon durch
quasi und dann geht es an Fokus geht es einfach breiter. Ja das ist zum Durchklicken ok. Gut
so das heißt ich style das jetzt nochmal. Icon nehmen wir mal mein Icon Ding hier anstatt
dem Input. Ja gut das ist nicht so ganz richtig ausgerichtet. So absolut muss das. Absolut.
Kann ich es weg machen. Ja so jetzt muss ich nur noch. So jetzt muss ich das nur noch irgendwie
hinkriegen. Text was hatten wir oben für eine Textfarbe Text Cray 100. So jetzt braucht
es nur noch ein Icon für Zoom war das glaube ich Zoom. Search. Wir kriegen übrigens keine
Vorschraube angezeigt das Brocken. So und jetzt müssen wir den Input so verschieben dass der
Input quasi daneben anfängt. Wobei dann ist es ja wenn ich reinklicke. Ok warte mal Input.
Ja ja alles gut so. Y. Kann man noch eigentlich wegschmeißen oder. Kommt man nicht. Input.
Wie kriege ich den Input jetzt. Wie kriege ich den Input jetzt. Wie kriege ich den Input
gemovet. Der Input bewegt nicht. Wie kriege ich den Input bewegt. Der Das sind Hero Icons.
Du kannst aber ich benutze dafür das hier. Guck mal. Iconify da hast du Zugriff auf alle
nur erdenklichen Item Fonds inklusive Color Emojis. Das Margin. Aha. Aha. Guck mal da.
So ist natürlich das Problem. Jetzt klicke ich auf jetzt klicke ich auf das auf die Suche
und dann passiert nichts mehr. Weil weil ich muss ja ins Ding klicke. So und das könnte
ich jetzt ja machen indem ich ihm sage. Wenn ich wenn ich auf das Icon. Wie sage ich ihm
jetzt wenn ich auf das Icon. Das ist tatsächlich ganz einfach. Meine Güte ist das eklig. Ich
meine ich könnte mit Javascript machen wenn geklickt wird aber das muss ja auch css auch
gehen. Und zwar ich will jetzt ja nicht sagen Fokus sondern quasi. Ich müsste es ja hier
oben drüber machen jetzt. Aber das hier oben drüber klappt natürlich nicht. Ich will
jetzt quasi sagen. Da kommt es nur noch rechts wenn du Fokus. Dann machen wir das doch hier
oben drüber. Klicke. Hallo.
Ach das ist weil das eine Icon Komponent ist. Funktioniert das jetzt mit dem Klick nicht
oder was? Das ist aber doof. Da muss ich den Shit extra rappen oder was? Das kann doch
nicht so kann das jetzt nicht sein.
Warum geht das jetzt nicht? Wo ist denn das Problem jetzt schon wieder? Ich meine ich
muss es auch nicht hier auf dem Icon machen das ist eigentlich bescheuert. Ich könnte
das einfach hier oben sagen. Einfach on click. Ah. Ok on click. Ok das checkt er. So und
dann klick dann sagen wir ihm jetzt irgendwie search. Aber das müssen wir anders hinkriegen.
Achja Problem ist ja wieder. So. Gut das schaltet um. Und dann könnte ich ihm hier sagen. Ach
ich darf jetzt ja wieder hier drauf nix. Aber hier brauche ich auch gar nichts machen. So
wir machen jetzt nicht Fokus sondern wir sagen ihm im Endeffekt Klaas Klaas W32 gibt es wenn
search active ist. Was? Doppelpunkt Klaas? Hä? Moment das haben wir doch das haben wir
doch schon mal irgendwo gemacht. Das haben wir doch hier im to do. Klaas? Ach nee. Ah.
Ok das ist aber eklig. Das ist aber eklig jetzt das muss irgendwie schöner gehen. Ich
kann doch einfach sagen W0. Ah nee W0 geht nicht. Ich weiß nicht. Ich find das alles
doch nix halbes und nix ganzes. Ich mein viel cooler wäre das wenn ich da drauf klicke
und das stellst einfach so rüber. Nee das mach ich nur weil es mich interessiert. Das
ist komplett neues Framework wovon ich keine Ahnung hab. So wir genau wir machen jetzt
was anderes wir sagen jetzt Klaas. Klaas. Das muss aber irgendwie schöner gehen. Hitten
darf man das nicht machen. Warum? Warum darf man das nicht hinten machen und vor allem
warum funktioniert das Klic jetzt? Warum funktioniert das on Klic jetzt nicht mehr? Ich mein was
interessiert das on Klic auf dem Button denn jetzt dass das was mit dem Input dass das
Input jetzt hinten ist. Der Input hat doch überhaupt nix mit dem Kram zu tun. Weil das
Icon absolut ist vielleicht. Oh meine Güte. So. Ja gut dann bleibt es halt da. Dann verstecken
wir es hinter dem da verstecken wir es hinter dem äh hinter hinter dem Button. So. Kap.
Was schön ist was anderes ne. Mach doch das Textfeld wieder vor unter das Lupen Icon.
Die Sache ist die ich will eigentlich dass dieses Textfeld komplett weg ist wenn ich
nicht gerade drauf klicke. Das sieht aus wie nach äh ehrlich gesagt sieht es ein bisschen
nach Salami aus. Vor allem mit dass es auch nicht gleich groß ist. Ähm. Wir machen jetzt
noch was anders wir machen das wir machen das mal größer. Also Icon absolut top. Transform
vom Icon kann ich mir ja sparen im Endeffekt. Weil. Durchklicken will ich ja auch nicht
mehr. So. Top. Warum ist der Scheiß jetzt nicht in der Mitte. Warum hängt das jetzt
so komisch da. Weil ich zwei. Warum ist das jetzt nicht oben. Muss ich jetzt sagen Minus
top eins oder was. Jetzt stimmts. Auch dass ich nicht nicht. Ich ich hab's voll mit so
krassem Design. Ich will eigentlich dass es weg ist. Ich will dass es nicht angezeigt
wird. Das Teil. Wie ist wie die Salami rausfährt alter. So Höhe acht. Nee. Was zum. Zwölf.
Okay es. Was mache ich hier überhaupt. Jetzt stimmt hier wieder alles nett. Ich ich ja
ich will ich hab das mit hinten versucht das funktioniert nicht richtig. Wenn ich dem sage
wenn ich hier sage hinten. Dann funktioniert das Icon nicht mehr. Ah ne doch das Icon funktioniert
doch noch. Immer das Icon noch nicht funktioniert. Okay. Last. Hidden. Wenn nicht search active
ist. Jetzt jetzt. Aber dann dann funktioniert. Aber dann funkt die Animation nicht. Weil
funktioniert die Animation nicht. Wenn ich das jetzt erst wieder einblenden lasse. Ich
muss es jetzt. Das ist ja mega hängen geblieben. Und wie kriege ich das jetzt eins. So. Aber
warum ist das denn jetzt. Meine Güte. Jetzt kann ich nicht mehr verschieben. Was ist das
wollen die mich wollen die mich rollen alle oder was. Mit display none funktioniert es
nicht. Hast du eben gerade gesehen. So hinten ist das gleiche wie display none. Ich kann
diesen Scheiß nicht. Was ist das. Warum ist denn. Warum ist diese Ausrichtung auch so
scheiße. Warum kann ich nicht einfach gerade sein. Opacity 0. Big brain. Genau. Wir sagen
einfach klasse. Wie heißt das Ding heißt es Opacity. Opacity. Genau wir machen es einfach
unsichtbar. Five head time. All das so machen wir das. Zack. Haha. Big brain time hier wir
machen es einfach unsichtbar. So soll das aber nicht aussehen. Das sieht total beschissen
aus immer noch. Jetzt kann was aber. Jetzt kann was aber. Mal kurz weg. So.
Und jetzt kann man ihm einfach sagen das ist. Irgendwie. Wieder weiter weiter links sein
soll. Genau. Und jetzt. Nice. Was invisible gibt es auch noch. Visibel. Warum gibt es
hidden. Warum gibt es display none visibility hidden und opacity. Ok invisible. Beim animieren
zurück spackt es jetzt aber rum. Dann machen wir doch lieber opacity. Das ist auf jeden
Fall noch verbessern würde ich das Ding. Es ist auf jeden Fall noch verbessern würde
ich das Teil einer. So jetzt war das vielleicht nicht ganz so rounded. So war das war das
ein bisschen bisschen bisschen rounded. Vielleicht haben wir das rounded md. Ok. Aber es sieht
immer noch ziemlich beschissen aus. Das sieht immer noch mega beschissen aus. Na ja. Immerhin
kommt jetzt ein komisches Suchbündel über den Button raus. Immerhin sieht es nicht aus
wie Jep Kok. So wie kriege ich denn das jetzt überhaupt. Wie kriege ich denn das jetzt
eins nach unten. Ich muss das ja noch eins nach unten pappen. Bottom vier. Ne eins.
Ne. Drei. Jawoll. Hoi. Magic Alter. Magic. Können wir jetzt nicht sagen. Full das die
ganze Seite macht. Trace danke für den Sub. Ah Moment das geht ja nicht die ganze Seite
ist ja weil der Button Overlay ist. Können wir eben nicht sagen. Ja gut das mit dem Button
dass das nicht funktioniert weiß ich. Kann man dem nicht irgendwie sagen. Zwei Drittel
oder so. Was gibt es denn alles. W. W drei fünftel. Alles klar. Voll fett. Ja super
das ist an der Stelle nicht erlaubt. Das ist aber auch schon ein bisschen hakelig alles
gemacht oder. Wenn es keine ordentlichen Glass Bindings gibt und sowas. Ja weil das kann
man hier nur feste Größen eingeben das ist doch auch doof. Stell dir mal vor die Seite
ist klein dann wird die Seite. Jetzt geht es nicht richtig. Richtig weird Champ ja. Weird
Champing. Warum kann ich warum ist denn voll hier eigentlich an der Stelle nicht erlaubt.
Wird übersetzt zu. Hundert Prozent. Ja gut. Ich weiß nicht ob. Das ist eine gute gute
Sache. Das können wir ausprobieren. Jetzt animiert er jetzt animiert er das aber nicht
mehr sondern. Ja gut er animiert das nicht mehr weil es jetzt das eine prozentual ist
oder irgendwas und das andere. Moment. Warum hat er das vorher überhaupt animiert. Warte
mal. Warum animiert er das überhaupt. Normalerweise animiert er doch. Das gar nicht mit der Breite.
Warum animiert wegen Transition all oder was. Weil wenn man das wenn man das nicht haben
kann man auch sowas hier machen. Dann ist es nur die dann ist es nur die Breite. Ja guck
jetzt macht das einfach direkt weg. Was aber auch nicht schön ist. Ist alles ist doch alles
Müll. Was war das Visibili Visibili ne. Ja gut hinten hinten macht das Ding komplett
procken. Wenn ich sag hinten. Visible Visible. Sollte das nicht einfach weg weg sein. Ach
invisible nicht visible invisible. Na ja. Also schön ist es beim besten Willen was anderes.
Warum ist das eigentlich in der kleinsten Variante immer noch so dick. Warum ist das
in der kleinsten Variante nicht einfach fast unsichtbar. Ja ich müsste zuerst die Animationen
abspielen das stimmt. Leute ich hab da keinen Bock mehr drauf. Also ich glaube so geil
wie das hier werde ich das nicht hinbekommen. Wo hatten wir es denn hier. Hab ich das zu
gemacht. Das hatten wir eben. Es hat mir doch eben jemand was im Chat geschickt. Wo ist
das hin. Und warum ist das nicht mehr in meiner History drinne. Ja das ist das eine. Ne ach
hier. Alter ich mein so geil wenn ich es nicht hin bekomme. Vor allem der macht es auch komplett
ohne JavaScript. Das ist richtig Next Level Shit hier was der Typ da gebaut hat. Leute
ich hätte ja noch eine ganz andere Idee. Wisst ihr was wir auch machen könnten. Anstatt
dieses. Das ist jetzt ein bisschen. Das ist ein bisschen das Problem gedotcht. Ja. Aber
wisst ihr was wir auch machen könnten. Die die wahrscheinlich deutlich einfachere Variante.
Wir machen hier ein verstecktes Fenster. Was wir dann einfach ein und ausblenden. Wo das
drin ist. Also. Wisst ihr wie ich meine. Dass das das das das ist hier schon quasi fix
und fertig ist. Und das dann einfach nur ein und ausgeblendet wird. Ohne komischen komischen
Animationen. Da kann man das nämlich auch einfach so breit machen wie die. Wie das
Teil ist. Also. Ich doch ich doch ich doch ich doch das mal jetzt das eigentliche Problem.
So. Machen wir mal den hier wieder. Die ursprüngliche Geschichte. Etten. Das kommentieren wir mal
jetzt. Da muss bestimmt gleich noch was spicken. So. Search. Und. Das muss jetzt platzieren
glaube. Den oder so 16. Nee. 20. OK. So und jetzt. Einfach hier oben drüber. Wobei wir
vielleicht nicht in diesem. Das Klick. Gucken wir mal. So. Und hier oben drüber. Input.
Hier oben drüber machen wir eigentlich nicht nicht so. Glas. Absolut. So. Und das zentrieren
wir jetzt einfach hier oben drüber und planten es aus. Sonst wrapt das Input doch in ein
Diff mit Overflow hinten und lasst es auf Null schrinken. Ja das können wir auch noch
probieren. So aber noch mal wie man es. So. So. Minus 16. So. Und das lassen wir jetzt
einfach ein und ausfaden und Klick. Ich meine das ist bestimmt nicht bestimmt nicht schön
oder. Aber es würde funktionieren. Da kann man einfach sagen. Rounded. Rounded. Wenn wir
jetzt hier draufklicken dann dann fällt das einfach ein und aus. Und wir können sogar
fokussieren lassen. Man müsste da man müsste da halt noch irgendwie so eine Karte mit mit
Shadow drumherum machen. Diff. Glas. Shadow. Warte mal Warte mal. BG. Wir machen es mal
so. What. Der Chat ist genau davor. Oh. Chat. So. Wunderbar. Ähm. Äh warum ist da.
Ach nee Moment das Input ist nicht absolut. So. Ja. Ja passt. So. Jetzt ich weiß nicht
ob man jetzt was was erkennt. So ähm. Woah. Alter Massive CSS Skills hier wieder am Werke.
Warte. Zehn. Und. Zehn. Wo ist das denn. So. Ok. Eigentlich will ich moment um das Input
geht es doch jetzt halt gar nicht. Wir brauchen wir brauchen eine komische Box. Was ist denn
mit dem Button jetzt. Ach so. Ja hier. So. So. Also wir brauchen wir brauchen eine komische
Box. So. Shadow. Wie sieht das jetzt aus. Shadow. 2XL. Hat das jetzt ein Shadow. Ich
sehe davor nichts. Border. Border 2. Border. Ok wir haben einen Border. Background. Irgendwie
so ich mach jetzt mal irgendwas. Rounded. Ok. Shadow SM hat er ja schon. Shadow weg.
So. Ich will ich will so eine Karte bauen kriegt das schon nicht gewacken. Alter. CSS
Brute Force. Ok. Wunderbar. Excellent. CSS Brute Force erfolgreich. So noch ein bisschen
höher. Moment. Warum ist 16 da und 18 da. 20. What. 16 ist da. 18 ist da. Und 20 ist
da. Ach 18 gibt es nicht. Ach so. Heals Smartman. Exquisite Five Hat Time hier. Und da kommt
jetzt das Input rein. Oh. Sieht aber auch nicht besser aus. CSS Alter. Ich krieg's
einfach nicht gewacken. So schlecht. Ah guck mal jetzt hat ein Schatten Leute. Ich auch
mittlerweile. Seht ihr da ist ein Schatten dahinter. Ich sehe es genau. Ich wollte so
eine Karte bauen wo das jetzt drin ist. Aber es sieht einfach nur hardcore beschissen aus.
Ich ripp mir mal mein Textfeld. Genau der Chat drüber. Ist nicht der ganze Zeit schon.
Ist nicht die ganze Zeit schon der Chat drüber und ihr seht überhaupt nicht was ich eigentlich
mache. Ist ja nicht schon der ganze Zeit der Chat drüber. Ihr habt jetzt eine Stunde lang
nichts gesehen glaube ich. Muss einer was sagen. Da hab ich sich gerade gedacht dass
da der Chat drüber ist. Wo ist denn hier meine Text. Ich muss mal meine Textbox rippen.
Wie hab ich denn das gemacht. PgCray 900. So. So dieses komische Input kommt wieder
weg das diff. Das sieht mega hängen geblieben aus. Was ist jetzt los. Warum ist denn das
jetzt. Ah ok ich weiß woran das liegt. Das ist ja ja ok. Absolut. Muss dahin. Und das
diff muss wieder weg. Danke für den Sub. Sollte grad nichts laggen eigentlich. Sollte
eigentlich nichts laggen. So jetzt haben wir hier einen super schicke Inputbox drüber.
Schicke Inputbox aller Zeiten. Und die wird jetzt einfach angezeigt. Wenn hoffentlich
geht das jetzt. Ah Moment. Das Click Event ist wieder weg. In irgendwelchen Gründen geht
das hier mit dem Klicken nicht. On. Klick. Search. Search active. Jetzt sprocken. Ach
das muss man klammern. Jaja. Oh je. Ach ich hab die. Hab die geschweiften Klammern vergessen.
Boah guck mal hier. Huge. Wir haben es geschafft nach 50 Stunden. Moment ihr seht es ja gar
nicht. Wir haben es geschafft nach 50 Stunden. So aber die Animation fehlt ja noch. Und es
muss ja noch automatisch. Da kann man ja noch Autofokus nehmen oder. Autofokus. Nee. Jetzt
ist nicht Autofokus. So und jetzt müsste man nämlich noch eigentlich. Opacity. So.
Und wenn es active ist. Opacity 100. Ne Moment. Opacity 0 ist sichtbar. Eigentlich Schwachsinn.
Opacity 0 bei active und 100 bei not active. So und jetzt. All. Ah jetzt seh ich nichts
mehr. Transition. All. Boah. Huge. Massive Animations. Alter. Duration 500 dass man es
doch ordentlich sieht. Ui. Links neben der Lupe wäre es schöner. Ja das ist richtig.
Focus. Focus. Hier nicht on focus. Wie fokussier ich denn ein Element ins Welt? Ja das können
wir ruhig schneller machen klein. Das Welt. Focus. Element.
Use input. Bind. This. My. Input. To get the ref. Seriously gibt es. Es ist eine
nicer solution. Ja Moment. Autofokus. Newly added. Geht ja nicht. So. So. So. So.
Ja ja. Ref. Ref ist ins Welt sowas hier in der Richtung. Bind. This. Und dann kann man
sagen. Let. Search. Input. Da kann man das Binden. Irgendwie so zumindest. Ach so curly
braces. So. Was haben die eben vorgeschlagen. Was hatten die eben vorgeschlagen. Reference.
This. Input. To get a reference. Then call. Once the form is submitted. Nee. On click
wollen wir das. Also search. Jetzt sieht man wieder so viel. Nice gg. Search. Input.
Focus. Sowas da in der Richtung. Oje. Das darf man nicht in ein unexpected token. Monka
es. Nein. Was soll das hier. So. Ok geht das jetzt. Komm mal hier. Wie es gefokussiert
ist. Warum blinken das so dumm. Warum blinken das so dumm wenn ich hier klicke. Ach ja.
Weil ich es fokussiert. Search active. Und und. Falsch rum. Ich habe es falsch rum gemacht
kann das sein. Ja guckt. Ich mache das falsch. Nee. Was überlappt das Input für die Tools
wenn die Tools. Ja ja ja machts. Aber die Buttons auch. Vielleicht hätte ich es doch
wie ursprünglich gedacht. Vielleicht hätte ich es doch wie ursprünglich gedacht einfach
neben die progress bar machen sollen. Und es klappt dann aus und gut ist. Aber hey wir
haben wir haben den Input viel. Das mit dem überlagern wäre eigentlich gar kein Problem
wenn ich eine gescheite Karte hinbekommen würde. Na über der progress bar finde ich
ist ein bisschen verschenkt irgendwie. Weil wen interessiert die progress bar wenn wenn
die progress bar sagen wir so hier angezeigt wird und sich das Input dann ausfährt wäre
auch noch ok. Aber zumindest wir haben schon mal wieder was gelernt. Jetzt weiß ich auch
wie man sich eine ref holt. Ich mein so ein cooles so ein cooler Dialog hier halt wäre
was. Irgendwas was nach was aussieht. Und nicht so eine hässliche Box wie ich da gebaut
habe. Wir bräuchten eigentlich so ein so ein so ein so ein Menü was aus raus poppt
hier. Bei mir ist überall search active falsch rum ja. Wobei ne es ist 100% durchsichtig
wenn search nicht active ist und 0% durchsichtig wenn search active ist. Warum das hier umgedreht
sein muss. Achso ne ich muss das einfach falsch rum ich muss das einfach anders rum machen
oder. Weil hier dreh ichs ja rum. Wenn es active ist müsste es doch invisible sein.
Nee wenn search active ist müsste es visible sein. Zumindest an der Stelle ist es eh dumm
platziert. Ich bräuchte so ein cooles Menü Ding wie man das so kennt. Wo dann halt so
ein Menü aus ausfährt. Das wäre ja auch ganz nice. Aber ey wie schwer ich mir schon
getan hab so ein komisches so ein komisches Diff da jetzt hin zu sentern. So ein Menü
was dann hier rausfährt. Also was heißt rausfährt. War halt so ein Dialog. So was. Wenn bei dir
search active true ist ist es bei dir doch invisible. Nee opacity 0 ist doch sichtbar
und opacity 100 ist unsichtbar oder. Weil opacity ist ja durchsichtbar. Durchsichtig
also es ist 100% durchsichtig wenn es nicht active ist. Oder ist es umgedreht. Ach 100%
ist sichtbar. Ah dann stimmte das doch was wir hier gemacht haben. Warum ist opacity
100% nee ich dachte opacity heißt sowas wie durchsichtigkeit oder so durchguckbarkeit
oder so. Und 0 müsste doch eigentlich dann heißen. Es ist sichtbar. Keine Ahnung. Ich
muss da echt das das dass das ordentlich dass das ordentlich zu benutzen ist ich meine benutzen
tut es eh am ende keiner aber dass ordentlich zu benutzen ist ich muss da unbedingt noch
irgendwie so eine so eine so eine so eine karte drum herum machen so irgendwas mit hintergrund
und so weil einfach so dieses input in der luft sieht nicht nur kacke aus wenn da mehrere
tutus sind ist schlicht und ergreifend nicht mehr bedienbar. Guck mal ich schaue das mal
an. Es ist nicht mehr bedienbar alter. Also ich müsste da schon noch irgendwas drum herum
bauen aber ich habe keinen bock da wieder dran rum zu fuddeln. Weil eigentlich müsste
da sowas hier noch drum aus irgendwelchen gründen ist es jetzt. Ich meine wir könnten
wir könnten ja noch einbauen. Ich gehe übrigens eine halbe stunde was essen. Wir können jetzt
wenigstens mal einbauen dass er noch richtig sucht. Ich meine es sieht zwar scheiße aus
aber wenigstens wenigstens dass er das er noch mal sucht. So also da brauchen wir wie
macht man das jetzt input. Normalerweise also in view wüsste ich es jetzt da würde ich
nennen. Ja ja nennen gibt es nicht das weiß ich auch. So da schreibt mir jetzt was rein
und dann sollte eigentlich search text das können wir mal ausprobieren. Das da schmeiß
ich weg. Nein nein nein nein search text search text. Ja ok das funktioniert. So und da kann
ich jetzt eigentlich danach suchen lassen. Vielleicht einfach den input nach oben rechts
wie in visual studio code. Ja die haben halt auch so einen overlay. Ich bräuchte eigentlich
auch noch so einen overlay. Ne das ist nur zum lernen das muss nichts wirklich super
krasses rauskommen. So jetzt haben wir search input und da könnten wir jetzt einfach hier
in meinem filter für die to do's machen wir das jetzt am besten. Was machen wir überhaupt
wenn to do's gefunden wurden. Machen wir dann einen roten machen wir dann einen roten
kringel drum oder was. Was machen wir überhaupt wenn was gefunden wurde. Jetzt habe ich so
lange mit diesem kacke suchfil zu was machen wir überhaupt wenn was gefunden wurde. Also
wir durchsuchen auf jeden fall schon mal nicht Sachen die dann sind. Ach nur die anzeigen
die die ja natürlich genau. Und und und Sachen die nicht dann sind. Das machen wir genau
wir zeigen dass das ok das ist dann sogar relativ easy. Da können wir nämlich einfach
hier sagen filter. Filter. Das ist dann das to do hier. Filter. To do text. Was wie ging
das ja was contains oder so. Alter ich habe zu lange geschwätzt heute. Note was ist das
contains. Doch. Contains. Includes. Ach doch. Includes ist es. Alles klar. Na dann.
Includes. Includes. Searchtext. Was hat er mit dem Filter hier. Ich bin voll an der falschen
Stelle. Der Filter muss dahin.
Was will denn der von mir. Ist ja auch falsch was ich hier mache. So. Hey. Funktioniert.
Ok wir löschen den ganzen Shit mal. Anlegen. Eins. Zwei. Das sollten wir auch noch fokussieren
wenn es angelegt wird. Drei. So und zwei ist zu. Ich suche eins er findet eins ich suche
zwei er findet das muss ich noch filtern. Und er sagt drei. Ok das das klappt. So guck
mal wenn wir welche haben mit den gleichen. Dann findet er nur die drei. Ok das ist gut.
Das ist easy. As to do. Includes das. Und. Und. Das. Das müssen wir mal eine Funktion
auslagern. Hier ist er mal richtig abartig. Und. Not. Dann. Oh. Moment. Das will ich
nur. Ja was gibt logik. Das will ich nur wenn. Searchtext. Was drinnen steht. Moment. Was
zum. Nein. Warum macht das die Klammer wieder weg. Oh man. Ich will. Ich will. Ich will
ich will das aber nur machen. Ich will ich will das hier nur ausführen wenn das hier.
In search fields. Ach nee. Warte mal. Zur Schwachsinn. Ich will sagen. Search. Input.
Das da. Oder. Ich bin ja gerade zu blöd für. Ah. Search Text ist es ja auch. Gleich.
Genau. Jawohl. Ok. Funst. Genau. Nämlich wenn Search Text leer ist. Dann zeigt er alles
an und mit Search Text was drinnen zeigt er nur die die nicht dann sind an. Kriegen wir
den Kram irgendwie eine eigene Funktion ausgelagert. Ich meine das hier ist ja nur wirklich nicht
mehr feierlich hier oder. Schau ich das mal an. Können wir da sowas machen wie. Geht
da vielleicht sowas wie. Sorted to do's oder so. Warum sollte dann gefiltert werden. Weil
der Chat das gesagt hat. Sorted to do's. Wie funktioniert das jetzt einfach so. Wie das
geht jetzt einfach. Easy. Was ist das hier für ein komisches. Ok. Das sieht jetzt schon
mal deutlich deutlich schöner aus. Guck mal hier. Nice. Der Chat hat gesagt. Kann das
er wieder ausbauen. Brauche ich den Spaß hier schon mal gar nicht mehr. So. Zack. Funst.
So eins. Jetzt kann man auch die geschlossenen. Guck mal man kann die sogar bearbeiten während
man in der Suche drin ist. Wenn. Ich push mal Leute. Ich push mal. Da könnt ihr auch
mal. Playbook. Bam. Könnt ihr auch mal. Huge neue App ausprobieren. Da hier Kicks
to do's Leute. Oh. Der Button ist in groß nicht so gut gelungen. Der Button ist in groß
irgendwie ein bisschen broken. Aber die Suche funktioniert. Bin begeistert. Also eins haben
wir heute wirklich. Ihr merkt es im Hals. Wie schaffen das Leute. Acht Stunden zu streamen
am Tag. Das verstehe ich nicht. Aber man muss schon mal sagen. Das ist deutlich ordentlicher
jetzt alles. Als heute am Anfang. Da blickt man da blickt man schon mal viel besser durch.
Ich meine das mit dem Search Ding gefällt mir nicht. Aber da blickt man. Also es ist
viel ordentlicher. Guck mal. Wir sind jetzt bei 80 Zeilen. Am Anfang war 160 170. Die
Suche ist case sensitive. Ja. Stimmt. Können wir noch ausmachen. Search Texts. To. Lower
Case. Und dann auch den Text. To. Lower Case. Jetzt ist die Suche nicht mehr case sensitive.
Können wir ausprobieren. Title. To. To. Geht. Nochmal neu pushen. Bam. So und Massive Case
insensitive Suche am Start. Guck. Multiline. Multiline. Das ist die schönste Variante ist
Case insensitive Suche zu machen. Bin ich mir auch nicht sehe. Kann includes Case case
sensitive in Java direkt. Nö. Ja ich habe es genauso gemacht wie Stack Overflow sagt.
Ich quasi drei Stunden durch. Ja das stimmt schon. Ich sollte auch mehr trinken Leute.
Hydrated. Hydrated. Einfach Regex Magic. Ja das wäre kürzer aber wahrscheinlich nicht
schneller. So. Massive. Hi IQ. To do Programm. Also der Input Button. Leute wir können es
ja so machen. Ich pusht es jetzt noch auf GitHub. Wenn einer von euch sich berufen
fühlt. Einen coolen Input Button zu machen. Macht einen Merch Request. Ich werde es merchen.
Also einen coolen Search Button. Und nicht einfach nur sowas hier sondern schon das darf
ruhig was mit cooler Animation sein. Irgendwie auch ergonomischer angeordnet und nicht irgendwie
so hässlich wie bei mir. Also vielleicht hier oben neben dem. Wie auch immer. Habt
hier komplett freie Auswahl. Repo Link. Gibt es gleich. Also Repo Link kann ich dir schon
sagen. Repo Link ist das. Nein. Nicht exzellent. Wo habe ich denn. Wo bloß. Hui. Fast Handy
nochmal liegt. Was will denn GitHub hier wieder machen. Fast Handy nochmal liegt. Remind me
later. Letzten vier Stellen Handy nochmal liegt. Hui hui hui. So. Repo Link. Ja Kicks
to do. Das da. Wo bloß Kicks to do. Genau ich muss nochmal pushen. Status. Ah. Komm
mit. Komm mit. Omega Lul. Push. U kann mal weg. Kicks to do ist gepusht. Hat auch schon
ein. Außer Leute gestarrt. Ich starre jetzt einfach selbst nochmal. Selbst starren ist
so wie selbstfavoriten von YouTube Comments. Sieht man eigentlich wer gestarrt hat. Irgendwo
sieht man das. Guck mal hier jetzt erkennt sogar das das Welt ist. Poggers. Stars. Oioioi.
Wird immer mehr Leute hier. Allein schon sechs Leute haben jetzt gestarrt. PogChamp. Nicht
dass sich das irgendwie lohnen würde. Super innovatives. Nie da gewesenes to do List
wäre. Könnt ihr euch dran austoben wenn ihr wollt. Also wir machen weiter damit. Weil
ich muss sagen auch wenn CSS immer der richtig krasse Struggle ist. Wir machen weiter also
nicht alles heute. Aber wir machen da schon weiter. Leute irgendjemand hat letztens was
vorgeschlagen. Irgendwas mit Kritt. Irgendwas mit Kritt. Nicht Kritt Girl. Kritt wo man
so. Angeblich easy track und drop machen kann. Aber ich hab's vergessen. Nein nicht Bootstrap
CSS Kritt. Nein. Irgendeine JavaScript Kritt Library. Wo. Wo man hier vielleicht track
und drop mit easy machen kann. Irgendwie Kritt und dann kam noch ein zweiter zweiter Name
dran. Save die den Inhalt nicht. Hier was. Oh. Oh. Das ist ein Bug. Kritt Stack. Das
Procken. Der speichert den Inhalt nicht Leute. Guck mal. Irgendwas. Irgendwas ist kaputt.
Bugged. Bugged. Ich weiß aber nicht warum bugged. Ne ne ne ne. Kein Angular. Kritt
Stack. Kritt Stack könnte schon gewesen sein. Kritt Stack. Könnte sein dass sowas damit
gemeint ist. Warum. Warum speichert das denn nicht mehr. Ich mein es speichert sich. Moment
es speichert sich. Das muss an dem Filter liegen. Das muss an dem Filter liegen.
Ah. Hä. Ich push mal. Ich bin mir nicht ganz sicher woran es da jetzt.
So ich hab's jetzt gepusht. Jetzt geht's mir. Aber. Jetzt mal ernsthaft. Wenn ich's hier
rein schreibe. Geht's. Und wenn ich's hier oben auslagere geht es nicht. Hä. Guck mal.
Wenn es hier oben drüber geht dann geht's nicht aber wenn ich's inline reinschreibe
dann geht's. Das verstehe ich nicht. Weil ich mein spätestens wenn man mal bisschen
was längeres hat dann kann man das ja nicht inline reinschreiben. Muss ich das vielleicht
nicht Reaktiv machen sondern so. Nö. Da muss schon Reaktiv sein. Äh aber warum speichert
sich das denn jetzt nicht mehr. Warum speichert es wenn es inline ist aber wenn ich das da
oben mache speichert das nicht. Das verstehe ich nicht. Hä. Guck mal. Das geht. Das geht
nicht. Das. Das geht. Aber da oben geht's nicht wenn es in so eine extra Variable macht.
Das muss man nicht wirklich verstehen oder. Vielleicht soll ich mal Svelte updaten vielleicht
ist ein Bug. Weil ich mach's wahrscheinlich einfach nur falsch. Äh wie updatet man sowas
eigentlich. NPM update einfach so. Hä. Ach so wir sind ja auch falsch. NPM wie kann
man sich anzeigen lassen was installiert ist. NPM show installed packages. Show. Package
NPM list. So NPM update. So hier haben wir 344 und ähm. Guck mal.
So. Das hatten wir vorher schon. Aber guck mal. Jetzt haben wir ein anderes Weltkit Version
aber das wird es nicht. Wird es nicht gelegen haben. Ups. Äh ja mach nochmal auf. Ok ich
probier's jetzt nochmal. Hä. Ok das ist irgendeine Svelte Magic die ich nicht verstehe. Wenn
du es über eine Variable hier machst dann geht es nicht. Aber inline hier in dem each
funktioniert hat da irgendeine glorreiche Idee. Also das verstehe ich jetzt nicht. Vielleicht
muss ich das als Funktion machen. Also sowas wie funk. Sort to do's. Return. Der erstellt
eine neue Instanz ja aber dann müsste er das ja auch inline im each auch machen. Hab ich
doch da. Ach so. Sort to do's. Nee der speichert das einfach nicht. Hä. Warum funktioniert
es hier inline in der Schleife aber nicht im. Hä. Sehr merkwürdig sehr merkwürdig. Sorted
to do's. To do's gleich. Sort ich probier jetzt mal alles aus. Äh. Nö. Nö. Nö.
Nö. Aber sobald ich das inline in die Schleife schreibe funktioniert's. Zumal an sich geht's
ja. Weil sonst würde der ja auch hier die Sachen nicht aktualisieren. Also guck das
progress und so funktioniert ja auch. Und das progress funktioniert auf Grundlage von
to do's has changed. Das kann nur daran liegen, dass der Store das nicht mitbekommt. Der Store
bekommt das hier nicht mit. Nö. Nö. Nö. Das ist egal ob Filter oder Sort. Wenn es
hier steht funktioniert es nicht. Nämlich das gleiche. Nämlich das gleiche und schreibe
das inline hier unten rein dann funktioniert's. Also es kann nicht an der eigentlichen Logik
liegen. Das liegt am Store. Der Store bekommt es nicht mit. Aus irgendwelchen Gründen. Ja.
Guck mal der Store bekommt es nicht mit. Wenn das hier gesetzt wird. Aber der Store muss
das mitbekommen. Weil sich doch der. Weil sich auch die Prozentzeige und so aktualisiert.
Achso ihr seht nix ja. Ja gibt's aber nicht viel zu sehen. Guck der Store bekommt es
nicht mit. So und jetzt nehme ich das gleiche. Mach das hier raus. Und paste mir das hier
inline rein. Was? Jaja weg damit. Paste das hier inline. Was? Ja toller. So und jetzt
geht's. Guck jetzt bekommt's der Store mit. Wo ist denn jetzt der Unterschied ob ich das
da inline rein paste oder in irgendeine extra Funktion mach. Ey klar kann ich das so lassen
aber das kann ja nicht der Weisheitsletzter Schluss sein dass man sowas hier inlines ins
html schreiben muss. Zumal es der Store an sich doch ja mitbekommen müsste weil progress
aktualisiert sich weiter. Gibt's da noch mehr? Gibt's da nicht nur subscribe? Da vielleicht
auch update gibt's noch. Aber update ist update value using callback and inform subscribers
ne. Nö dann weiß ich nicht woran das liegt keine Ahnung. Guck mal Svelte, Pilter, Store
bind. Was? Benutzt mal irgendwo spread by change um neue Instanz zu generieren. Was
was soll ich machen? Häh? Is items in store data? Import was importieren die hier? Items
is from data. Items from data. Aber in data es gibt's überhaupt kein items. Wie kann
der items from data importieren wenn es dort items gar nicht gibt? Pil. Ja das ist default.
Und hier sagt er filtert list. Genauso wie ich das auch mache. Ich update ja nix von
hand. Das einzige was ich mache ist hier ich sage to do bind und to do bind macht automatisch
zum Beispiel hier sowas wie check. Wenn ich die checkbox drücke setzt er das automatisch.
Ich hab keinerlei Javascript wo irgendwas geupdatet wird. Die haben auch worum die
unten ok. Punkt, Punkt, Punkt. List item. What? Moment. Yeah. Warum hat er jetzt einfach
book eingesetzt? Nee das geht an der Stelle gar nicht. Das
geht hier überhaupt nicht. Na ohne bind. Ist auch nicht. Unexpected token. Ich kann
es hier komplett weg machen. Dann macht es aber was anderes. Dann nimmt das die Elemente
und versucht das bei der Komponente mit aufzurufen. Und das eh funktioniert ja dann so nicht.
Ne ne ne das war was anderes. Ey ich würd jetzt fast vermuten das ist ein bug. Weil
warum sollte das so gehen und bei dem anderen nicht? Ja. Man in each irgendwo each. How
to make a search filter ins world. Genau gib ihm. Store. What? Ich was ich muss den special
store machen dafür. Jetzt machen sie einem das Leben aber schwer. Vor allem warum funktioniert
es inline und oben als extra Funktion nicht. Das Binden muss überhaupt nicht auf die Funktion
zugreifen. Das Bein kriegt davon gar nichts mit. Das kriegt ja nur das to do was schon
fertig gefiltert ist. Warum macht der dann einen eigenen store? MonkaS? Ich mach das
jetzt auch. Ich will einfach nur wissen ob du es findest. Da. Also. Wir haben ja Filter.
Ich mach jetzt den eigenen store. Das wäre aber echt hardcore umständlich. Was weiß
ich. Pack W. Store. Derived. Wie geht das jetzt weiter? What? Ok da muss da muss ein
Store rein. To do's. Wenn wir jetzt noch die Dings richtig schreiben können. Return.
So. Nein. Passt. So. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok. Ok.
Ok. Der Pack W. Store. Pack W. Store Set ist nur eine Funktion. Ja wunderbar. Funktioniert
nicht. Dann kann ich nicht beinden da dran. Weil Set ist not a Funktion. Da kann man nicht
beinden. Aber das kann nicht Sinn und Zweck der Sache sein dass man das alles inline schreiben
muss dass es funktioniert oder? Nein. Noch ist es nicht so schlimm aber da kommt ja noch
mehr dabei. Das ist ja bescheuert. Also sobald ich das durch irgendeine Funktion durchschleuse
uns das irgendwie nicht mehr. Wir probieren mal was aus. Funktion. Was weiß ich. Pack
W. To do's. Nehmen wir mal T. So. Der einfach nichts anderes macht außer das durchzuschleusen
hier. Pack W. So. Ne. Guck nochmal. Sobald. Sobald das durch eine andere Funktion durchgeht.
Hört das auf Reactive zu sein. Ok. Na dann. Gg Eats. Ja aber. Kann es doch nicht sein
oder also man. Das wäre ja total hängen geblieben. Sobald dann auch kein Filter und so machen
kannst. Ich mein. Ich mein was man machen könnte ist. Dass man das sortieren irgendwie
aber das ist doch auch Mist. Ok ne da müssen wir mal ein bisschen suchen danach. Das Weltfilter
Store. Das ist doch eigentlich schon mal ganz gut. How to's Filters. Das ja ja das funktioniert.
Keine Ahnung was die intern machen. Aber es ist eigentlich auch egal. Weil es funktioniert
so exakt. Bloß wenn man das Inline ins Eat schreibt. Nur wenn man es über eine Funktion
mit Return macht funktioniert es nicht. Das ist egal was die Filter Methode. Vollkommen
egal. Das ist egal was Sorten macht. Das ist egal was Filter macht. Weil so funktioniert
das Inline. Nur wenn eine Funktion ausgelagert funktioniert das nicht. Das kann nicht daran
liegen was hier irgendwas. Es ist egal was Sorten und Filter macht. Das muss irgendwas
sein. Was das Welt an diese Objekte Attached oder so. Und was dann im Return Wert irgendwie
nicht da ist. Was auch immer das sein könnte. Können ihr einfach mal simple Beispiele posten.
Ich meine was ist das denn hier wenn es fertig ist. Wir sind anscheinend die einzigen Leute
Probleme mit haben. Was. Was ist das. Ach so. Ja das ist das ist dann so conditional Rendering.
Ja schön und gut. Aber das sollte es jetzt nicht sein. Kunst Filter. Moment was machen
die hier. Du kannst Filter. Jaja das machen wir auch. Was. Value. Was ist das für ein
komisches Beispiel. Filt. Ach der ruft die Funktion auf. Moment das soll das soll das
soll so funktionieren. Ja gut. Das ist die umständliche Variante von dem was ich oben
auch gemacht habe ja sortet. So dann nennen wir es ja wenn er es fehlt so wie er fehlt
meinetwegen. So. Filter. Wir nehmen das von hier unten. Sort. Du du es. Vielleicht liegt
es am Return. Sort. Wir machen neues Filt. Wenn du du keine Ahnung was du es geändert
sich gechanged hat war Filt. Was. Dollar Dollar du du es ist illegal. Nee. Nee. Uns
nicht. Geht nicht. Moment. Update der das macht er überhaupt Filt. Nee der macht Filt
gar nicht. Der macht schon mal Filt gar nicht. Ich verstehe aber nicht. Ach guck mal. Jetzt
geht die. Ach so. Was. Ach so. Das ist doch im Prinzip das gleiche was ich oben auch gemacht
habe. Nein das funktioniert nicht. Das müsste bei jedem bei jedem Mal ändern ausgegeben werden.
Was ich aber nicht. Hä warum ist denn jetzt die warum ist denn jetzt die die die die
die Prozentanzeige kaputt. Ach so ja klar die Prozentanzeige ist kaputt weil er das
nicht beinden kann genauso wie vorher nicht. Der Value Parameter ist falsch. Warum. Ach
so. Meinst du was ihr müsst ja beides gehen. Nee nee das ist. Theoretisch. Das ist nur
das Welt das ab pickt. Ist doch egal es funktioniert in beiden Richtungen nicht. Und außerdem warum
sollte ich das nicht machen. Das ist ein. Store ist dafür da um drauf zugegriffen
zu werden. Aber ich verstehe es immer noch nicht warum geht das in line und warum geht
das damit nicht. Und. Sehr merkwürdig äußerst äußerst merkwürdig. Sehr komisch. Das muss
irgendeine Logik sein die ich noch nicht so genau durchschaut habe warum das in line funktioniert
aber andersrum. Return zu einer Funktion was. Nee ich setze in der Funktion das hier was
dann unten wieder verwendet wird. Wie gesagt an sich ist das ja auch richtig so. Das funktioniert
ja auch genauso. Nur nicht. Ausgelagert sondern nur. Aus irgendwelchen Gründen. In line. Da
funktioniert es ohne Probleme. Ausgelagert in externer Funktion funktioniert nicht. Keine
Ahnung warum. Was ist weil das bind sonst. Also das ist ja das eigentliche Problem. Wenn
das durch irgendeine Funktion durchgeschleift wird. Dann funktioniert das bind nicht. Und
deswegen erkennt er auch nicht wenn sich was geändert hat. Aber. Warum exakt das gleiche
so geht. Und dann in eine andere Funktion. Ich mein. Keine Ahnung. Es kommt mir jetzt
aber auch nicht weiter an. Ich hab nix vergessen in der Funktion. Das ist doch genau das gleiche
copy pasted. So alles ist so alles richtig hier. Das values hier ist plus dafür da das
welt erkennt dass es das automatisch refreshen sollte bei to do Änderungen. Warte mal. Kann
das sein. Initial leer kann es ja auch nicht sein. Initial einmal ausgeführt wird es ja.
Aber dann klappt das bind nicht. Das bind funktioniert nicht. Wenn. Das array. Aus irgendwas
anderem. Außer diesem internen geschwuppel hier kommt. Ja. Muss man nicht verstehen.
Die noch einfache Variante die ich ausprobiert habe die funktioniert ja auch nicht. Und spätestens
das hier. Müsste eigentlich sofort funktionieren. Die einfachste und swell styleigste Variante
wäre das hier. Sorted to do's. Das funktioniert exakter gleiche code klappt. Nämlich jetzt
sorted sorted to do's. Geht nicht mehr. Das heißt exakt das gleiche durchgeschleust durch
irgendwie was anderes. Geht nicht. Inline im each drinnen geht. Das kann ich mir nur
so erklären dass der store irgendwelche internen sachen da attached dran. Die da nicht mit
weitergegeben werden. Das ist ein bug. Keine Ahnung. Was aber ziemlich scheiße ist. Weil
jetzt müsste man ja wirklich alles inline schreiben. Also mal angenommen ich will hier
noch 5 Filter unten dran machen was ja durchaus sein kann. Nee sowas kann ich hier gar nicht
angeben. Ich mein. Die haben ja auch irgendwelche Schmerzen.
Keine Ahnung. Reicht mir jetzt aber auch. Ich geh jetzt was essen Leute. Wir sehen uns.
Macht's gut. Bis dann. See you.
