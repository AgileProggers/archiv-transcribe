Hallo, ich bin am Start, wer hätte das gedacht?
Schon wieder!
What?
Und ich sehe, neun Leute haben auch Abobox, elf Leute, ich korriere elf Leute, haben
auch die Sub-Abobox, wie nennt man das in Twitch, den Twitchfeed gecampt, oder hatten
schon den Channel auf, man weiß ja nicht, Leute ich muss mal ganz kurz mein Headset entknoten.
So, also bin wieder da, also wir werden noch nix großartig kompliziertes machen, wir gucken
uns wieder ein paar Sachen, wir erzählen ein bisschen, was so aktuelle Sachen gibt,
wir gucken uns mal ein paar Sachen auf YouTube an, wir gucken uns heute das C-Sharp Video
an, was ich schon ne ganze Weile mir angucken wollte mit euch zusammen, wo kann ich meinen
Senf zugeben, und morgen wird da ein bisschen Hacker-Mensch-Zeug gemacht.
Ich probier jetzt, weil ich hab Urlaub bis 3.
Januar, für alle die es nicht mitbekommen haben ja, also ich hab jetzt erst mal dieses
Jahr, dieses Jahr ist Schluss mit Arbeiten, ich probier jetzt mal so ne Möglichkeit irgendwie
jeden Tag ein bisschen zu streamen, einfach, dass es nicht abreißt.
Warum so viel Urlaub, das ist ganz einfach, ich hatte das restliche Jahr über einfach
kein Urlaub, ist doch ganz logisch, also ich hab 24 Tage im Jahr, weil ich bloß 4 Tage
die Woche arbeite, also weniger Urlaub logischerweise, und ich hatte quasi, ich glaub ich hatte
nur 2 Tage das ganze Jahr über, glaub nur an Ostern, irgendwie, ne nicht an Ostern,
da wo irgendwie die Feiertage gut gefallen sind, Rest hatte ich, hatte ich nix, was aber
auch cool ist, also das fand ich wirklich gut, dort wo ich mich beworben hab, hab ich
euch glaub gar nicht erzählt, dass die gesagt haben, von sich aus so nach dem Motto hier
4 Tage alles kein Problem und ich kann auch Montag weiterhin meinen Teilzeit-Tag machen,
was ich gut finde, weil Montag hab ich ja nicht ohne Grund gewählt.
Hattest du nicht irgendwie 3 Wochen dieses Jahr mal, nö, ich hatte Corona, 2 Wochen,
fehlt dir die Urlaub nicht im Sommer, ne ich arbeite ja nur 4 Tage, ich hab quasi 3 Tage
am Stück immer frei, das reicht mir, also konntest du den Urlaub in den neuen Job mitbringen,
ne, ich arbeite nur 4 Tage, ich wär auch nur für 4 Tage bezahlt, das hat ja mit Urlaub
nix zu tun, ne ne, ne ne, hab ich eigentlich die Kategorie umgestellt, ja es ist, ja ja
just chatting, gute Musik, das ist Stinks Crypt of the Necrodancer Soundtrack, ist auch
schon ein bisschen älter das Game, Pippe please, wie sehen bei dir dann die Arbeitszeiten
aus 4x8, ne, äh 4x7,2 oder sowas, ja wir gucken mal ehrlich das C Sharp Video, da muss
ich ja warten bis Breese Rief da ist, der hat nämlich schon 50 mal gefragt, dann wird
es endlich gucken, gut, wenn er heute nicht da ist, kann man nix ändern, ja also 4x7,2
arbeite ich die Woche, gucken wir uns den jetzt an, in 7 Tagen zum Pro Gamer, selbst
Experiment, da hab ich so meine Zweifel, ob das in 7 Tagen funktioniert, kommt ein bisschen
drauf an welches Game, aber selbst dann in 7 Tagen, in 7 Tagen hast du, ja, also wenn
du dir wirklich viel Mühe gibst, kannst du in 7 Tagen ziemlich gut werden, das bezweifle
ich gar nicht, also du krebst da nicht mehr irgendwie in Silber rum oder so, wie gesagt
kommt auch das Game an, die ekelhafte Werbung von EliasN97, aha, gut, warum ist die ekelhaft,
weil Simplicissimus was sagt oder, was hat er gemacht, ich bin jetzt eigentlich interessiert
mich überhaupt nicht, ganz ehrlich ich guck mir eh kein deutsches YouTube an, ich weiß
nicht wie es euch geht, chat mal ne Frage, guckt ihr deutsches YouTube, also ich hoffe
ihr guckt bei mir ab und zu mal, ja, aber das mal außen vor, guckt ihr deutsches YouTube,
also ich muss sagen ich überleg gerade, was gibt es an deutschen Channels die ich gucke,
also wirklich regelmäßig quasi die meisten Videos, ich guck mir durchaus deutsche Channels
an ab und zu mal, aber was guck ich, ok, ja doch, tatsächlich ich guck regelmäßig deutschsprachige
Videos, stimmt, stimmt, sind aber meistens irgendwelche Technik Sachen, so was mich überhaupt
nicht interessiert ist so diese Sache mit Drama, so TikTokerinnen geht fremd mit, keine
Ahnung, Coach von sonst wie, ey, das juckt mich so überhaupt nicht, YouTube Drama, Alter,
das geht mir so am Arsch vorbei, Seven versus Wild guck ich auch nicht, ich weiß, dass das
ein riesen Erfolg ist, aber es interessiert mich nicht, den Bauer guck ich tatsächlich
ab und zu mal, das ist richtig, ich gucke aber noch ein paar mehr Technik-Channels, aber
das ist teilweise wirklich richtig Big Brain-Gramm, also nichts was wir jetzt hier gucken, GCN
auf Deutsch, ist das nicht das Fahrrad, das Cycling, die Fahrradvideos, guck ich tatsächlich
auch manchmal, aber wusste ich gar nicht, dass es die auf Deutsch gibt, ich hab mich
früher relativ viel interessiert für Radsport, also früher ist wirklich früher, sehr viel
früher gemeint und ich gucke immer noch mal ganz gerne so die ein oder anderen Sachen,
auch wenn ich überhaupt nicht auf dem aktuellen Stand bin, kurz gesagt, ja, kurz gesagt guck
ich tatsächlich ab und zu, sowohl auf Deutsch als auch auf Englisch, meistens auf Englisch
aber auch ab und zu die ein oder anderen Videos auf Deutsch, ja, ich bin ErnoTricksEnjoyer,
muss ich euch ehrlich sagen, ich glaube ich hab noch nicht ein Stream von ErnoTricks geguckt
und auf seinem Channel macht er ja nichts mehr, großartig, da kam ja schon ewig nichts
mehr, zumindest das letzte Mal als ich reingeguckt hab, kamen da nicht viele Videos, aber wie
gesagt, deutsches Twitch guck ich so gut wie gar nicht, ich guck ab und zu mal beim Lost
rein, ich guck mir ab und zu mal ein paar Warzone Streams an, aber ansonsten, ich guck
auf Deutsch keine Twitch-Channels, wenn ich hier durch scrolle, da ist wirklich nichts
dabei gerade, ich hab hier grad mal, hier, du folgst, mal gucken, mal gucken ob da ein
deutschsprachiger Channel, Moment, ich guck mal, man kann doch irgendwie Kanäle sortieren,
oder?
Kann man nicht sagen, du folgst Kanälen auf Deutsch oder sowas, ne, das geht natürlich
nicht, dass man das an der Stelle filtert, ne, nichts dabei, was ich regelmäßig Stundenlang
an hab, ok, doch ein Channel ist dabei, das ist von einem deutschen, allerdings das ist
ein englischsprachiger, englischsprachiger Channel, ansonsten ist nichts dabei, wenn ich
so durch scrolle hier, also das wo ich wirklich viel gucken würde, ne, nix, naja, Live-Aufruf,
da hab ich tatsächlich ab und zu schon reingeguckt, wie findest du den Friseur, der Kerl müsste
mal wieder ein bisschen, war der mal wieder on in letzter Zeit, der müsste mal wieder
ein bisschen, ein bisschen streamen, ne, macht er nicht, letzter hat irgendwelche Weep-Games
gestreamt, und er müsste auch mal Kreisel-Crime machen, richtig, ja, na gut, so, alles klar,
dann, ich würd sagen, komm wir geben uns das hier gleich mal, wir kommen uns das jetzt
gleich mal an, zeig mal hier, wo war's dann, in sieben, das interessiert mich einfach was
da rauskommt, in sieben Tagen, tatsächlich, von ihm hab ich schon ein paar Videos geguckt,
der macht ja oftmals hier solche, ja, Selbstexperiment, es klingt teilweise übelst advanced, aber
Videos in dieser Richtung, find ich meistens tatsächlich ziemlich gut, OnkS, nicht sterben
hier, war das nicht auch der Typ mit der Influencer-Creme, oder war das ein anderer, wer war das mit
der Influencer-Creme, mit dieser Creme vor ein paar Jahren, wisst ihr, da war doch was,
aber das war Mafi, ach ne, das ist ein anderer, stimmt, ihr habt recht, das ist ein anderer,
ja das ist ein anderer, stimmt, stimmt, stimmt, die sehen sich aber ähnlich, oder, oder vielleicht
nur weil ich nicht oft gucke, ja, keine Ahnung, aber das ist das erste, was mir jetzt im Kopf
gekommen ist, die Influencer-Creme, aber gut Chat, gut, ich bin zufrieden mit euch, wenigstens
ihr blickt durch bei dem ganzen Kram, was ich erzähle, das ist ja schonmal was, muss
ich nicht selbst überall durchblicken, so, hören wir uns das mal an, in sieben Tagen
zum Pro Gamer, ein Selbstexperiment, lass mal kurz in die Beschreibung lurken, regelmäßig
es zocken soll viele Vorteile haben, man bekommt eine bessere Reaktion und Konzentrationsfähigkeit,
schnellere Informationsverarbeitung, ja, außer man hat das Uralt-Boomer-Hirn wie ich, da
ist alles verloren, und es soll sogar insgesamt glücklicher machen, ja, ja gut, kommt, kommt
auf das Game an, wenn man Toxic Overwatch ranked, Spiele Toxic Dota ranked, generell
Toxic ranked und verliert, dann bezweifle ich, dass das glücklich macht, wenn man aber
gut die Noobs wegbashed, dann macht es Bock, generell wenn man gewinnt, macht es eigentlich
Herr Bock, MSI Placement Erbe, Leute, man muss gucken, wo man bleibt als Influencer heutzutage,
sogar ich mache mittlerweile Werbung, ich habe eine Woche jeden Tag intensiv gezockt,
um herauszufinden, was Gaming immer, mich würde interessieren, was intensiv gezockt
ist, weil ehrlich gesagt, wenn man wirklich gut werden will in einem Game, also wenn man
wirklich den, den, den, den, den, den, den Crying startet, ne, dann bin ich der Meinung,
musst du eigentlich sechs Stunden plus am Tag des Games spielen, also wenn du wirklich
vor hast, in kurzer Zeit gut zu werden und das alleine reicht wahrscheinlich auch nicht
mal, dann musst du es auch mit einem gewissen, wie soll ich sagen, mit einem gewissen System
machen, ja, wenn man noch einen Coach hat, natürlich noch besser, hat er anscheinend,
habe ich hier gesehen, aus dem Augenwinkel, der hat Highscore Heroes am Start, weiß ich,
was er aktuell für einen Rank hat, den kenne ich noch flüchtig aus der Overwatch Zeit
und der ist bestimmt nicht schlechter als Coach, gerade wenn man anfängt, wenn man anfängt,
braucht man gar nicht den Ultra Pro, der einen irgendwie coacht oder so, so, schauen wir
mal, mal gucken, sieben Tagen, in sieben Tagen zum Pro Gamer, auf geht's Leute.
Das ist so groß wie nie zuvor, allein 2021 wurden 9,7 Milliarden Euro umgesetzt und mittlerweile
zölten in Deutschland 35 Millionen Menschen, das sind 42% der Gesamtbevölkerung, ich muss
sagen, ich gehöre eher zu den anderen 58%, das ist zum Beispiel nicht mal in der Lage,
das richtig einzustellen, okay, er spiel Overwatch ist schon mal gut, okay, auf geht's, fangen
wir von vorne an.
Du bist ab deinem Stück für den Sub, jetzt bin ich mal gespannt, also sieben Tagen zum
Pro Gamer, auf geht's, ich predikte mal OBS Desktop Audio User, warum nicht, ich predikte
Nein, in sieben Tagen bist du kein Pro-Gamer, aber wenn er sich richtig reinhängt,
kann er durchaus ganz gut werden in sieben Tagen.
Der Gaming-Markt in Deutschland ist so groß wie nie zuvor.
Allein 2021 wurden 9,7 Milliarden Euro umgesetzt.
Und mittlerweile zocken in Deutschland knapp 35 Millionen Menschen.
Das sind 42 Prozent der Gesamtbevölkerung.
Ich muss sagen, ich gehöre eher zu den anderen 58 Prozent.
In meiner Jugend habe ich natürlich schon gespielt, aber in den letzten Jahren...
Von den 35 Millionen zocken bestimmt ganz viele auch Mobile-Crap.
Raid Shadow Legends oder...
Wie ist das Ding, was ich letztens beworben habe?
Ich habe es schon wieder vergessen.
Matchmasters gegen irgendwelchen Mobile-Crap.
Mamas mit Candy Crush, genau.
Gut, was auch immer. Ist eine Statistik.
Hat jetzt mit dem Video nichts zu tun.
Eigentlich gar nicht mehr. Und ich bin auch ziemlich schlecht, vor allem in Shootern.
Dabei soll regelmäßiges Zocken ja viele Vorteile haben.
Man bekommt eine verbesserte Reaktions- und Konzentrationsfähigkeit,
schnellere Informationsverarbeitung und es soll insgesamt glücklicher machen.
Deswegen will ich herausfinden, was Gaming mit mir macht.
Ich werde die nächste Woche jeden Tag intensiv zocken,
werde vorher und nachher verschiedene Tests machen...
Gute Maus hat er schon mal. Gute Maus.
Und dann schauen wir mal, wie gut ich in so kurzer Zeit werden kann.
Ich hoffe, ich hoffe, sie erzählen noch ein bisschen, was jetzt intensiv zocken heißt.
Wie gesagt, ich bin der Meinung, sechs Stunden am Tag plus muss das sein,
wenn du wirklich gut werden willst.
Man hat jeder so ein bisschen da durch andere Vorstellungen,
wie viel Zeit er reinstecken will.
Aber wenn du sagst, hey, sieben Tage voll durch, sechs Stunden plus am Tag,
besser acht Stunden plus am Tag, sollte das schon das Mindeste sein.
Weil gerade wenn du neu bist und sonst nicht viel spielt,
du musst einfach so ein bisschen, wie nennt man es so schön,
ein bisschen Muscle-Memory aufbauen, wie man so schön sagt.
Ja, du musst voll im Gameplay drin sein, musst voll so im Plus drin sein.
Am besten ist natürlich auch, wenn du regelmäßig das analysierst, was du machst.
Wenn du richtig Glück hast und noch einen hast dabei, der dich coacht, ist natürlich noch besser.
Und was man machen muss, ist, man muss sich gezielte Punkte zum Verbessern raussuchen.
Also so nach dem Motto, was weiß ich, die nächste Runde versuche ich jetzt dran zu denken,
immer auf meine Cooldowns zu achten und das alle 30 Sekunden einzusetzen und so was,
damit sich ein bisschen Routine aufbaut.
Jetzt sag ich jetzt einfach mal so, ohne der, der je Pro Gamer gewesen ist.
Die Frage, welches Spiel ich denn spielen möchte,
und deswegen habe ich einfach mal geschaut, was gerade so neu und beliebt ist.
Und eines der gehyptesten Spiele scheint gerade Overwatch 2 zu sein,
habe ich noch nie gespielt.
Da haben mir auch ein paar Freunde gesagt, dass das wohl relativ einsteigerfreundlich ist,
was ja auf dem Fall ganz gut für mein Selbstexperiment ist.
Das stimmt, Overwatch ist einsteigerfreundlich, das ist definitiv einsteigerfreundlich.
Ich meine, ich weiß nicht, wie einsteigerfreundlich Overwatch 2 ist,
aber Overwatch 1 war definitiv einsteigerfreundlich.
Es ist übrigens gut, dass er Overwatch spielt, da kann ich wenigstens was zu sagen.
Also ich quasi als ehemaliger deutscher Meister in Overwatch.
Manche Leute tun sich ja immer schwer, das war ein Witz, Leute.
Also wenn jetzt wieder einer ankommt, Alter, der Max erzählt uns hier was anderes.
Nein, ich war nie deutscher Overwatch-Meister, sowas gab es auch gar nicht.
Ich war Season 1 Top 500 als Supportspieler.
Wir haben einmal ein deutsches Weekly gewonnen damals.
Ich würde sagen, wo wir richtig gut dabei waren damals mit meinem Overwatch-Team, waren wir Tier 2.
Nicht wirklich mega gut, aber ganz okay.
Und wir haben auch mal gegen ein paar Pro-Teams gewonnen.
Wir haben gegen, wie hießen die, LG Red oder so, glaube ich, gewonnen damals.
Die waren sogar auf der ersten Offline-Lade.
Die ist die in Deutschland nie gegeben hat, zu Overwatch eingeladen.
Und wir haben damals ganz gut gespielt gegen dieses russische Team von Kula und Cypher.
Da haben wir auch ein paar Matches gewonnen.
Wir waren ganz okay.
Mittlerweile habe ich keinen Plan mehr von dem Game.
Deswegen werde ich jetzt einfach das nehmen.
Da ich ja eigentlich nicht zocke, habe ich auch kein wirkliches Gaming-Setup am Start.
Wobei man halt sagen muss, das muss ich jetzt noch kurz loswerden,
ich finde es gut, dass er Overwatch nimmt, weil Overwatch, da gehört halt ein bisschen mehr dazu als nur Aim.
Also, das ist jetzt nicht so das krasseste Mechanics-Game.
Es gibt wenige so pure Aim-Skill-Hellen.
Man, du hast natürlich sowas wie Widowmaker oder McCree oder...
Nee, wie heißt der jetzt?
Cassidy.
Zum Teil auch sowas wie Soldier als Ana mit Support.
Und er muss schon aim, so ist das nicht.
Aber es gibt halt auch viele, sagen wir mal, so recht ausfrauenfreundlich.
Das darf man wahrscheinlich so nicht sagen.
Ja, Presarif, ich warte auf dich.
Ich habe gesagt, wir können das.NET-Video gucken, wenn du da bist.
Ja, also es gibt schon auch recht einsteigerfreundliche Helden, wo man sich das alles so ein bisschen angucken kann.
Ich meine, das Mercy-Meme ist real.
Das ist aber in Overwatch tatsächlich ganz gut.
Wenn du in CS tatsächlich gar nichts auf die Reihe kriegst, nicht gerade ausschießen kannst,
dann ist es egal, was du spielst, du kriegst nur noch auf den Sack permanent.
In Overwatch kannst du quasi Mercy spielen und der Nase bohren dabei.
Das funktioniert und ein bisschen nur das Spiel und den Spielfluss angucken, dass es nicht verkehrt.
Deswegen ist es ganz gut, dass er Overwatch nimmt.
Ja.
Und Overwatch ist halt auch ein Game, da kommt sehr viel auf Spielverständnis, Map-Kenntnis
und, sagen wir mal, sowas wie Intuition irgendwie an.
Ich möchte mich an dieser Stelle bei MSI bedanken.
Ah, Placement, sehr laut Modus.
Aber gut, easy Placement muss sein.
Auf dem MSI Katana GF66 spielen, das ist ein kompakter Gaming Laptop.
Muss gucken, wo man bleibt.
Das heißt, einer GeForce RTX 3060 Grafikkarte von Nvidia, einem Intel Core i7 Prozessor
und einem 144-Hertz-Bildschirm mit 15,6 Zoll.
Das Katana gibt es aber auch in vielen anderen Ausstattungen.
Wie viel?
Wie viel Herz hat denn das Display?
144, okay.
Ja, da kann man definitiv drauf spielen, denke ich.
Der neuesten Generation und je nach Konfiguration von knapp unter 1000 Euro bis circa 1800 Euro.
Da ist was für alle Ansprüche dabei.
Die aktuell besten Deals habe ich euch in der Videobeschreibung verlinkt.
Damit sollte ich jetzt auf jeden Fall von überall aus bequem zocken können.
Und ich bin mega gespannt, das Ganze jetzt einfach mal auszuprobieren.
Ich werde jetzt das allererste Mal Overwatch 2 spielen.
Ich habe schon so lange keinen Shooter mehr gespielt.
Deswegen bin ich sehr gespannt, wie ich mich da schlagen werde.
Ja, let's go.
Okay, was muss ich jetzt machen?
So geht es jedem am Anfang.
Spielt er mit dem Trackpad?
Nee, oder?
Er spielt schon mit einer Maus.
Ja, geil.
Hey Leute, so geht es jedem am Anfang.
Ich bin immer sehr schnell zu sterben.
Aber ich weiß auch ehrlich gesagt noch gar nicht so richtig, wie dieses Spiel funktioniert.
Okay, also mein Team hat offensichtlich verloren.
Ob er jetzt so viel glücklicher ist, nachdem er gespielt hat?
An mir.
Hier sind die Statistiken von meinem ersten Spiel.
Ich bin insgesamt fünfmal gestorben und habe niemanden eliminiert.
Ich glaube, das ist jetzt schon mal nicht so ganz gut.
Also wenn ich da jetzt nicht in einer Woche besser werde, dann weiß ich auch nicht.
Noch kann ich mir ehrlich gesagt nicht so richtig vorstellen, warum zocken so viele Vorteile haben soll.
Und um mehr darüber zu erfahren.
Jax, hast du die Grafik-Settings gesehen? Der muss auf jeden Fall runter stellen.
Das ist auch ein Ding.
Das erste, was du machen musst, wenn du nur daran denken willst, halbwegs competitive zu spielen.
Settings runter bis bodenlos und dann auch ein Stück weiter runter.
Quasi noch zwei Level unter bodenlosen Grafik-Settings.
Das muss komplett unten sein.
Am besten noch die Konfig von Hand anpassen.
Dass es noch schlechter aussieht.
Und das ist gut. Das ist gerade richtig.
Dr. Jens Junge verabredet.
Das ist der Leiter des Instituts für Ludologie in Berlin.
What? Institut für was?
Er beschäftigt sich wissenschaftlich mit Spielen.
Was würdest du sagen, welche Vorteile haben Videospiele?
Wir haben ja ganz viele Vorteile.
Fangen wir mal damit an, dass sie uns grundsätzlich erfreuen.
Dass sie uns unterhalten, dass sie Spaß bringen.
Neben dem Spaß ist es auch natürlich das Abenteuer.
Die Herausforderung und die Anstrengung, die uns immer an die Grenzen bringt.
Was lernt man denn vielleicht für Fähigkeiten beim Zocken, die man auch so auf das echte Leben übertragen kann?
Teamwork. Teamwork.
Beispiele heraus, dass wenn ich am PC spiele, ich dem irgendwie konfigurieren muss.
Dass ich weiß, was da passiert.
Ich habe ein technisches Grundverständnis, was mich eben auch um einen zukünftigen Beruf an so einer Kiste vorbereitet.
Ich bin, wenn ich dann mit Multiplayer Games unterwegs bin, oft eben mit Teams in der Interaktion.
Ich muss die anderen Rollen kennen. Ich muss halt bereit sein.
Das ist aber ohne Scheiß. Das ist wirklich so. Man merkt das richtig.
Gerade jetzt in der Zeit, wo alle im Homeoffice arbeiten, du merkst das sofort.
Leute mit MMO und Raid-Erfahrung, die können es einfach. Mit denen funktioniert das.
Die wissen, wie man einen Chat bedient. Die wissen Push to Talk.
Leute, der 0815 am PC sitzt Boomer, der sein Mikrofon halb im Popper stecken hat.
Der weiß noch nicht mal, was Push to Talk ist.
Geschweige denn, dass er das irgendwie auf die Reihe kriegt, sich zu muten, wenn im Hintergrund gerade die Frau staubsaugt oder sowas.
Kannste komplett knicken.
Leute mit MMO und Raid-Erfahrung, das sind im Homeoffice die besten Arbeiter.
Du kannst mit denen wunderbar kommunizieren. Die wissen, wie sie was im Chat schreiben müssen.
Die schreiben dann nicht.
Sehr geehrte Damen und Herren, seit gestern nach zwölf gibt es Probleme im System.
Bitte schnellstmöglich die Entstörung einleiten. Mit freundlichen Grüßen ihre Support-Abteilung.
Das schreiben nur die Leute, die keinen Plan haben, wie man online zusammenarbeitet.
Leute mit MMO und Raid-Erfahrung, die sagen, Max bist du gerade da, guck mal please auf System ABC.
Da geht was nicht. Fertig.
Da sag ich, ah ok, ich guck schnell.
Das ist einfach riesen Unterschied wie Tag und Nacht, Leute.
Glaubt's mir. Ich merke das täglich.
Leute, die MMO und Multiplayer generell Teamplay-Erfahrung haben, am Computer mit Online-Spielen, ist wie Tag und Nacht der Unterschied.
Ok, warte mal. Das hab ich vergessen, wo wir aufgehört haben. Wir sind immer stehen geblieben.
Ich muss halt bereit sein, mit einem Trainer zusammenzuarbeiten, mich anzupassen, mein Verhalten zu variieren,
sodass ich in dem Team auch gut funktionieren kann. In jeder Stellenbeschreibung steht heute Teamfähigkeit drin.
Dann haben wir natürlich noch die individuellen persönlichen Skills, dass ich natürlich durch Hand-Auge-Koordination,
durch Reaktionsmöglichkeiten im Spiel auch einfach Fähigkeiten bekomme, die mich auch natürlich für andere Softwareprodukte
oder für andere Sportarten schulen und trainieren. Es gibt eine wunderbare Studie für Counter-Strike,
zum Beispiel das Chirurgen, die dann, bevor sie in eine richtige OP gegangen sind...
Alter, erst mal Rush B. Rush B. im OP.
Die sollen lieber Battlefield spielen, ein paar Leute wieder beleben. Rush B.
...viel, viel besser operieren können. Die nehmen halt diese Hochkonzentrationsphase direkt in den OP mit und sind dann besser.
Bevor ich mit dem Selbstexperiment loslege, werde ich jetzt noch ein paar Tests machen,
um meine Skills zu überprüfen und das Ganze werde ich hinterher nochmal machen.
Dann schauen wir mal, ob ich besser geworden bin.
Ich bin jetzt mit meinem Team verabredet und wir haben vor, einfach mal ein bisschen zusammen zu zocken.
Das macht, glaube ich, schon ein bisschen mehr Spaß, wenn man dabei noch ein bisschen quatschen kann,
als wenn ich hier nur alleine sitze. Ich bin gespannt, wie es wird.
Übrigens finde ich nicht sinnig, direkt am Anfang mit dem Team zu spielen.
Gerade wenn man noch komplett die Basics lernen muss, dann fackt ein eher das Gelaber ab der anderen Leute.
Vor allem, wenn man verliert, dann sind die Leute alle mega tilted und man lernt nichts und fackt sich gegenseitig ab.
Wenn man wirklich noch, wie war das, wenn man die Basics lernen muss, damit man auf den Mold Everest kommt,
dann macht man das erst mal am besten solo. Finde ich.
Die Basics im Spiel am besten erst mal solo lernen. Das ist meine Meinung dazu.
Sehr gut.
Scheiße.
Was ist denn heute los?
Siehst du, die sind komplett alle tilted direkt.
Das darf nicht wahr sein.
Der hat nichts gelernt, nichts gelernt in der Zeit.
Ich habe gerade eine Stunde Overwatch gespielt und ich habe einfach eine Stunde lang am Stück verloren.
Jedes Spiel nur verloren mit unserem Team. Das ist schon ziemlich frustrierend.
Mann ey, das habe ich keinen Bock mehr.
Verstehe, ist normal.
Ich habe das Gefühl, ich stelle mich ja gar nicht super kacke an, aber irgendwie funktioniert es trotzdem noch nicht so richtig.
Salty.
Deswegen habe ich mir professionelle Unterstützung gesucht.
Leute, aber abgefuckt sein ist vollkommen normal.
Ach guck mal, da ist ja der Sascha. Abgefuckt sein ist da vollkommen normal.
Ich bin auch immer gerne mal mega tilted und flamet an Runden, wenn es irgendwie nicht so läuft.
Aber ey, das ist normal.
Deswegen am Anfang die Basics alleine lernen, bin ich der Meinung.
Ich habe mit Sascha verabredet. Der macht auf seinem YouTube-Kanal Highscore Heroes hauptsächlich Content rund um Overwatch.
Das heißt, er kennt sich mega gut mit dem Spiel aus.
Und ich hoffe einfach, dass er den einen oder anderen Tipp für mich hat, damit ich besser werden kann.
Sascha, seit wann spielst du Overwatch?
Ich spiele seit, ich glaube Release war 2016. Ich spiele eigentlich jeden Tag.
Ich ertappe mich dann schon mal wieder, wie ich abends so mal drei, vier Stunden mit Freunden spiele.
Jetzt will ich ja gucken, wie gut ich innerhalb von einer Woche werden kann.
Dazu musst du erst mal sechs bis acht Stunden am besten mehr am Tag den krassen Kreiselcrime starten. Sonst wird das nichts.
Glaubst du, es ist in einer Woche möglich, nur annähernd so gut wie du zu werden?
Es kommt so viel dazu, was wichtiger ist als reines Aim.
Aber ich bin mir sicher, du kannst da relativ gute Fortschritte innerhalb von einer Woche machen.
Okay, cool. Was würdest du sagen, wie kann ich mich verbessern?
Also kannst du mir da irgendwelche Tipps geben für das Spiel?
Wir können gerne mal eine Runde reingehen.
Übrigens, ich finde es gut, ich finde es gut. Ich wette mit euch, wir gucken uns gleich mal die Kommentare an.
Ich wette mit euch, da kommen wieder die super angepissten Leute.
Und ich dachte, Sascha ist doch nur, weiß ich was, er ist Master oder so.
Hättest du mal einen richtig guten Spieler genommen oder irgendwie sowas?
Vollkommen egal. Er ist komplett neu in dem Game.
Und man muss ihm wirklich mal ein bisschen die ganz grundlegenden Sachen coachen und erklären.
Da brauchst du keinen Pro, der ihm krass advances Zeug erzählt.
Deswegen ist es gut, dass er ihn genommen hat und nicht wirklich einen richtig Top Ten Spieler oder sowas,
für sowas in Deutschland überhaupt gerade haben, der ihm dann sonst was erzählt.
Ich glaube, da kann er es nämlich deutlich besser als ein richtiger Pro.
Die Kommentare sind voll, das dachte ich mir.
Leute, ich kenne die Jungs doch in den YouTube Kommentaren.
Wir gucken gleich mal rein dann.
Ich mache den Supporter. Grundsätzlich sollten wir immer beim Team bleiben.
Für uns gerade zählt, dass du einfach positionell ein bisschen vielleicht besser wirst.
Immer in Bewegung bleiben, auch eine ganz wichtige Sache.
Im besten Fall so ein bisschen die Bewegung.
Leute, ich habe es schon wieder vergessen.
Ich kenne die Map. Ich habe die Map-Namen schon wieder vergessen.
Ich habe das fast ein Jahr jeden Tag durchgegrindet.
Das ist dieses Tempel-Ding.
Nepal! Jawoll, Nepal.
Das ist der zweite Punkt.
Der erste ist innen drinnen oder ist der dritte?
Nee, der dritte ist innen.
Der erste ist Outdoor, da wo man rechts runterfallen kann.
Das hier ist der zweite.
Und dann kommt in dem Tempel innen drin, in der Mitte.
Oder? Ich weiß gar nicht mehr genau.
Schon so lange her.
Jetzt gehen wir hierher.
Hier oben haben wir High Ground.
Hier oben kannst du deutlich besser Schaden machen.
Du siehst deutlich besser, wo deine Gegner sind.
Im besten Fall suchst du dir immer die kleinen Ziele.
Zum Beispiel die Heiler.
Als Soldier, ganz wichtig.
Wisst ihr, was er als Soldier machen muss?
Er muss komplett, keine Ahnung, wie als hätte er sich was gespritzt,
muss er AD AD spammen, Leute.
AD AD spammen, das allerwichtigste in Overwatch.
Ihr müsst einfach komplett hirnlos die ganze Zeit AD AD spammen.
Und gerade als Soldier, wie von der Tarantel gestochen, genau.
AD AD spammen.
Und crouchen, und crouchen, nicht vergessen, ja.
Das sind Teamfights zu gewinnen, weil die keine Heilung mehr haben.
Ja, cool.
Was würdest du sagen, wie habe ich mich bisher geschlagen?
Was dir noch aktuell fehlt, ist einfach zu wissen, wo Gegner herkommen.
Einfach mal umdrehen.
Das ist ein Fehler, den machen super viele Overwatch-Spieler, die neu sind.
Wie gesagt, das ist dein zweiter Tag oder sowas.
Dahingehend würde ich da jetzt gar nicht zu hart urteilen.
Du hast gesehen, du hast einige Leute hier und da dann auch wirklich bedrängt mit deinen Schüsten.
Das ist, glaube ich, ganz gut.
Also so ein grundlegendes Aim ist da.
Es ist so viel Content in diesem Spiel einfach schon drin, den du noch nicht kennst.
Ja, gerade die Maps.
Aber glücklicherweise muss man ehrlich sagen, die Overwatch-Maps sind eigentlich ziemlich simpel zum größten Teil.
Schwieriger für dich.
Weil Blizzard ja die Wahnsinnseingebung hatte.
Chokepoint-lastiges Map-Design ist das einzige, was geht für das Game.
Heute werde ich einfach weitermachen und intensiv zocken.
Also ich glaube, ich brauche einfach super viel Training, um besser zu werden.
Das ist richtig.
Das ist richtig.
Das ist doch gut.
Wenn du keinen Bock hast auf sowas, dann klappt es auch nicht.
Ein bisschen ist das vielleicht so.
Ja, gewonnen.
Und jetzt, Moment.
Er hat eine Sache, hat er noch nicht gelernt.
Wenn du gewinnst und umso knapper es war, umso mehr musst du da schreiben, GG Eats.
Also wenn du wirklich nur 1% oder so gewonnen hast, GG Eats.
Es ist prinzipiell, wenn du gewinnst, immer GG Eats.
Aber umso knapper es war, umso easier war das.
Also umso knapper, dann ist es easiest Game of my life.
Das ist das Aller-easieste, umso knapper es ist.
Und wenn du verlierst, kannst du die Gegner beleidigen.
Also von Hacker bis was auch immer, kann man sich irgendwas ausdenken.
Aber prinzipiell, wenn du gewinnst, GG Eats.
Und das muss er als angehender Pro-Gamer auf jeden Fall noch lernen.
Ich habe echt das Gefühl, es wird immer besser.
Naja, wisst ihr warum er jetzt was killt?
Ist ganz einfach.
Erstens, natürlich ist er besser geworden in den paar Tagen.
Ja, mit Sicherheit, er gibt sich ja auch Mühe und strengt sich an.
Wurde ein bisschen gecoacht, definitiv ist er besser geworden.
Aber SBMM, Leute.
Das ist der Hauptpunkt.
Ja, er ist besser geworden, aber SBMM.
Weil auch im Quickplay, das Game hat ihn jetzt ungefähr eingerankt.
Nach 2-3 Tagen.
Das Game weiß jetzt ungefähr so grob, in welches Skillbracket sie ihn stecken können.
Und dementsprechend kriegt er jetzt auch Leute gematcht, die auf ähnlichem Niveau spielen.
Und dann gibt es nicht mal so mega auf den Sack wie die ersten 2 Tage.
Noch jemanden getötet, ganz knapp.
Aber währenddessen auch selber gestorben.
5 Kills und 5 mal gestorben.
So langsam habe ich schon das Gefühl, das Spiel zu verstehen und so leicht besser zu werden.
Aber ich sterbe auch noch ziemlich oft.
Und ich glaube, da ist noch sehr viel Luft nach oben.
Also ich weiß nicht.
Das Game ist jetzt ja auf 5 versus 5.
Aber es macht Spaß.
Und das ist ja eigentlich die Hauptsache.
Was würdest du denn sagen?
Das ist auf 5 versus 5 jetzt.
Die haben das doch umgestellt mit dem Release von Overwatch 2.
Wenn ich das richtig im Kopf habe.
Also wie gesagt, Leute, ich habe keinen Plan von Overwatch 2.
Ich habe Overwatch 2 nicht gespielt.
Das Einzige, was ich in Streams gesehen habe, was mir aufgefallen ist, als jemand, der mal ganz brauchbar Overwatch 1 gespielt hat.
Mir kam das alles ein bisschen langsamer.
Und mir fällt jetzt kein gescheit deutsches Wort.
Also ein bisschen mehr Bullet-Sponge-mäßig vor.
Also ich habe beispielsweise einen Stream gesehen.
Da ist einer mit Reaper auf diesen neuen Tank.
Was ist das? Junker Queen ist das, glaube ich.
Alter, der hat zweimal nachladen müssen, bis der Tank down war.
Okay, entweder hat der Typ einfach nicht getroffen.
Aber ich habe es ja gesehen.
Und das war auch ein guter Spieler.
Also es kam mir so vor, als ist das Spiel Träger.
Und ein bisschen mehr Health und Helden halten mehr aus.
Ein bisschen stationärer, könnte man vielleicht sagen.
Gewonnen im Vergleich zu 1.
Schwer zu sagen.
Ich habe keine Ahnung von Overwatch 2.
Ich habe es nicht gespielt.
Ich habe eigentlich keinen Bock drauf.
Was passiert mit uns, wenn wir Videospiele spielen?
Wir sind dort in einer anderen Realität.
Und blenden alle anderen Dinge um uns herum aus.
Das war eine blöde Frage.
Was genau hat der Psycho-Dude jetzt mit Progamer werden zu tun?
Das ist doch ein komplett anderes Thema.
Ich sage nicht, dass es nicht stimmt oder so.
Und das ist sicherlich auch Fragen, die man sich stellen kann.
Aber was hat er mit Progamer werden uns relativ wenig zu tun.
Das ist eine künstliche Herausforderung,
auf die wir uns so derartig fokussieren,
dass wir alle Probleme und Sorgen gerne ignorieren.
Das brauchen wir Menschen.
Wir müssen halt, und das machen andere Menschen halt auch dadurch,
dass sie vielleicht nur eine Stunde durch den Wald jocken.
Wir machen es immer wieder, dass wir uns einen Zeitraum suchen,
indem wir eben was anderes tun, als eben nur zu malochen.
Was würdest du denn sagen, wann wird spielen problematisch?
Wenn man sein ganzes Erspartes in Microtransactions steckt
oder sein ganzes Erspartes an irgendwelche Pool-Streamer raushaut auf Twitch
oder wie dieser eine Typ früher bei der in irgendwelchen Dota-Streams
und damals Overwatch-Streams, da gab es einen Typ,
ich habe den Namen vergessen, wir müssen mal nachgeben, wie der heißt.
Das war irgendwie einer, der hat gesagt, der ist irgendwie ein reicher Saudi oder so
und hat überall massig getippt und gespendet und sonst was.
Und am Ende kam raus, das ist irgendein Ami,
der sein komplettes Erspartes quasi in so eine Fake-Twitch-Identität gesteckt hat.
Noch nicht mal als Streamer selbst.
Der hat quasi sein ganzes Vermögen gespendet an Streamer
und hat sich dafür feiern lassen, dass er so ein Gönner ist
und hat im Prinzip sein ganzes Vermögen rausgehauen, hat dann sein Haus verloren,
hat, ich weiß nicht, ob ihn die Frau verlassen hat,
sogar seine Versicherung und alles geplündert und so,
nur dass er auf Twitch donaten kann, meine Güte.
Dann hast du echt die Kontrolle verloren.
Apropos mit deinem Wandern, wirst du das auch im Winter durchziehen?
Ich bin quasi seit März täglich Fahrradkann, habe auch viel Gewicht verloren.
Ja, mache ich, ich bin heute auch wieder zwei Stunden gelaufen.
Ich auch die realen Herausforderungen des Lebens komplett vernachlässigen.
Wir werden halt als Menschen immer danach halt auch suchende Balance hinzukriegen.
Wir wissen ja, was uns gut tut.
Und das nennt man dann auch die Kontrolle, die man halt hat
und diese Kontrollüberzeugung, die man halt hat, dass man das im Griff hat.
Deswegen ist es viel besser, wenn wir gerade dabei sind, deswegen ist es viel besser,
anstatt irgendwie großartig zu donaten oder sonst was,
wenn man einen Twitch Prime-Sub hat, den auch einmal im Monat zu verwenden
und nicht vergammeln zu lassen.
Ist so wichtig für unser Leben.
Und solange wir alles unter Kontrolle haben, dann passt es.
Und es ist eine wunderbare Ergänzung und Bestärkung des echten Lebens.
So, letzter Tag, ich gehe einfach sofort und spiele.
Let's go.
Oh, aber trifft schon deutlich besser als am Anfang.
Ich darf ja nichts sagen.
Ihr habt in meinem Pepega-Aim die letzten zwei Tage gesehen.
Ich darf da nichts sagen, aber das ist schon echt ganz brauchbar jetzt im Vergleich zum ersten.
Am ersten Tag war ja gar nichts.
Am ersten Tag war ja, wo man hier gesehen hat,
da hatte ich den Eindruck, er hat quasi seine Sensitivity auf 1% gestellt.
Das hat sich kaum das Fadenkreuz bewegt.
Aber jetzt hat er ja schon so ein bisschen was wie,
so ein bisschen was wie Tracking, könnte man es schon nennen.
Also ist schon in Ordnung.
Boah, man, das geht doch klar jetzt mittlerweile.
Richtig, ich habe das Gefühl, dass mein Spielverständnis einfach deutlich besser geworden ist.
Das ist auch wichtig in Overwatch.
Ich setze mich jetzt von Sascha um und achte voll darauf, wo ich in der Map stehe, welche Ziele ich groß wähle.
Und ich ziehe mich auch mal zurück, wenn mein Team gerade nicht da ist.
Und ich muss sagen, es macht einfach immer mehr Spaß.
Also ich denke auch so voll viel über Overwatch nach, selbst wenn ich gerade nicht spiele.
Das ist schon ein bisschen verrückt.
Jetzt bin ich mega gespannt, ob es auch irgendwelche messbaren Ergebnisse gibt.
Es ist jetzt genau eine Woche her, seitdem ich mit dem Experiment begonnen habe.
Das heißt heute...
Jetzt erst mal zum MLG Open Bracket anmelden.
Auf geht's, in your face.
Ach nee, ich vergaß.
Es gibt ja keine offiziellen Turniere, außer die von Blizzard.
Noch mal die ganzen Tests wiederholen.
Und ich bin mega gespannt, ob sich tatsächlich irgendwas verbessert hat.
Let's go.
Tempelritter, danke schön für den Zap.
Oh guck mal, Human Benchmark.
Da bin ich gespannt, wie er abschneidet, Leute.
Das habe ich nicht geguckt.
Da bin ich gespannt.
Also erinnert euch dran.
Der Ultra-Boomer wie ich hat ungefähr 170 Millisekunden gehabt im Reaction-Test.
229 Millisekunden.
Dann als nächstes der Aim-Test.
Bin sehr gespannt, ob ich mich da zumindest verbessern kann.
Der muss besser sein als 230 Millisekunden.
Das liegt am Notebook.
Oder an irgendwas.
Der muss besser sein als 230 Millisekunden.
Das kann ich mir nicht vorstellen.
Vielleicht eine kabellose Maus.
Ich meine, ich habe auch eine kabellose Maus.
Vielleicht eine alte kabellose Maus.
Wobei es sah aus wie eine Razer-Maus.
Am Anfang sah es nach einer brauchbaren Maus aus.
Das kann nicht sein.
Das glaube ich nicht, dass er 230 Millisekunden hat.
Vielleicht hält er die Maus auch irgendwie komisch,
dass er den Finger nicht schnell genug draufkriegt.
Keine Ahnung.
Das muss am Notebook liegen.
Ich weiß, MSI Placement und sonst wie.
By the way, MSI hat mich immer noch gebannt auf Twitter.
Ich weiß bis heute nicht warum.
Doch indirekt weiß ich warum.
Weil ich habe mich über RGB auf eine Mainboard lustig gemacht.
Und dann haben sie mich instant gebannt danach.
Und bis jetzt wollten sie mich nicht mehr entblocken.
Falls einer von MSI zuguckt, Leute.
Ihr könnt mich ruhig anbannen auf Twitter.
Ich werde nie wieder über eure RGB-Beleuchtung lästern.
Vielleicht über eure LEDs.
Aber ohne sonst was.
Ah ja.
Ich weiß echt nicht warum sie mich gebannt haben.
Kann doch nicht sein.
Dass man erst mal gebannt wird, weil man sich lustig macht über RGB-Beleuchtung.
Gut, wie dem auch sei.
Also 230 Millisekunden ist auf jeden Fall zu schlecht.
Ich mache mich jetzt nicht über die RGB-Beleuchtung lustig.
Ich mache mich höchstens über das Notebook lustig.
Weil das muss am Notebook liegen.
Er hat garantiert bessere Reactions.
Als das.
Liegt von aus.
Aber QDL, ich habe 170.
Ich bin 38.
Er ist, keine Ahnung, 23.
Der muss bessere Reaktionszeit haben.
Also mindestens Reaktionszeit wie ich.
Dann als nächstes der Aim-Test.
Ich bin sehr gespannt.
Aim-Test ist 100 pro besser geworden.
Safe.
Okay, mein Aim ist auf jeden Fall besser geworden.
Hast du 170 im Durchschnitt, ja?
Habe ich euch doch gestern gezeigt.
Sondern hat sich sogar ein klein wenig verschlechtert.
Aber damit liege ich immer noch im Durchschnitt.
Es gibt ein Video von Profi-E-Sportlern, die den gleichen Reaktionstest gemacht haben.
150 ist heftig.
Das heißt, wenn man viel spielt, dann kann man hier wahrscheinlich wirklich schneller werden.
Anders sieht es aus beim Aim, weil da habe ich mich in der Woche wirklich verbessert.
Sicher cheated.
Ich habe es live gestern im Stream gemacht, Mann.
Wie soll ich das cheaten?
Und habe 109 Treffer gemacht.
Und jetzt waren es 93% mit 125 Treffern.
Und dabei war ich auch noch deutlich schneller.
Videoaufzeichnung, alles klar.
Besonders in Overwatch 2 habe ich mich krass verbessert.
Also wenn ich mir mein erstes Spiel anschaue und mein letztes, dann sind das nicht riesige Unterschiede.
Insgesamt kann man sagen, in einer Woche wird man natürlich nicht vom Noob zum Pro-Gamer.
Aber man kann gut werden in einer Woche.
Aber man kann echt krasse Fortschritte machen.
Schreibt mir gerne mal in die Kommentare, wie viel ihr so zockt.
Vielen Dank nochmal an MSI für die Unterstützung bei diesem Video.
Es hat echt Spaß gemacht, auf dem Katana zu zocken.
Und ich bin echt super zufrieden mit der Performance.
Den Link dazu, wie gesagt, in der Videobeschreibung.
Wenn ihr jetzt sehen wollt, wie ich versucht habe, meine getragenen Socken zu verkaufen,
dann schaut euch mein letztes Set...
Was?
...macht, auf dem Katana zu zocken.
Und ich bin echt super zufrieden mit der Performance.
Den Link dazu, wie gesagt, in der Videobeschreibung.
Wenn ihr jetzt sehen wollt, wie ich versucht habe, meine getragenen Socken zu verkaufen, dann schaut...
Was?
Jetzt gucken wir uns jetzt nicht an.
Auch wenn es mich tatsächlich interessieren würde, warum er seine getragenen Socken verkaufen will.
...euch mein letztes Selbstexperiment an.
Abonniert den Kanal, um keine Videos mehr zu verpassen.
Und bis zum nächsten Mal.
Wie reich werde ich mit getragenen Socken?
Ja, wenn die getragenen Socken von ihm sind, ist das wahrscheinlich jetzt nicht so der Wahnsinn.
Wenn er irgendwie Hottes Hottes Gamer Girl wäre, dann würde das anders aussehen.
Passen Fußfotos dabei, da gehen die Leute drauf ab.
Welche Seite war das mit dem Reaktionstest? Human Benchmark.
Das da.
Leute, meine Hände sind kalt, aber ich probiere es jetzt trotzdem nochmal, okay?
Weil es mir keiner glaubt.
Getting started.
Reaction time.
Gestern habe ich das gemacht nach zwei Stunden Spielen.
Gerade die Hand, wo ich auf die Maus drücken muss, ist eiskalt, aber egal, probieren wir es mal.
Guck mal.
Sogar besser als gestern.
Heute geht es ab?
On point.
Okay, der letzte war nicht richtig.
On point, überhaupt kann es nichts sagen.
In human reactions.
Also ich muss sagen, für 38 geht das echt klar.
Trotzdem gutes Video.
Ich hätte mir tatsächlich noch ein bisschen mehr fokussieren aufs Verbessern im Spiel gewünscht.
Wie gesagt, du kannst ja unglaublich viel machen.
Dass er sich coachen lässt, finde ich schon mal gut.
Aber du musst halt wirklich richtig grinden, wenn du gut werden willst.
Und dich dann auch auf gewisse Punkte konzentrieren, wo du dich verbessern willst.
Auf cooldowns achten.
Okay, jetzt achte ich da und da drauf.
So wirklich die anderen Punkte abarbeiten, musst dir selbst auch Notizen machen.
So nach dem Motto, ah mir ist aufgefallen, ich habe hier jetzt beispielsweise die Entscheidung falsch,
war falsch, den Spawn zu pushen, was auch immer.
Und du musst grinden, dir bleibt nichts anderes übrig.
Grinden und analysieren.
Dann wirst du besser.
Also ein bisschen mehr auf die Gaming, auf die Gaming Aspekt.
War ja kaum, obwohl es darum ging, war relativ wenig eigentlich etwas Gaming zu sehen.
Chat, ich bin ja froh, dass ich wenigstens mal eine Sache besser kann als ihr.
Aber ansonsten wissen wir ja, ansonsten kann der Chat prinzipiell alles besser.
Naja, ich glaube CS hätte eher in der Woche absolut keinen Spaß gehabt.
CS kriegst du, gerade wenn du komplett ohne jegliches Aim anfängst,
du kriegst einfach nur unglaublich auf den Sack.
Und du weißt gar nicht, was dir passiert.
In CS läufst du einen Gang lang und auf einmal macht es...
Wisst ihr diesen Headshot auf Armor Sound von CS?
Und du bist tot und denkst dir, hä?
Was?
Ich habe noch nicht mal einen Pixel vom Gegner gesehen.
Was war denn jetzt?
Du respawnst, läufst weiter...
Tot.
Also ich glaube, CS ist gerade an der Stelle nichts.
Ich finde es gut, dass er Overwatch genommen hat.
Overwatch kannst du...
Weil gut, er spielt Soldier, dürfte mit der einsteigerfreundlichsten DPS-Held sein.
So quasi der klassische Call of Duty-Held.
Nur, dass du noch einen Self-Feel hast.
Ich weiß nicht, wie sind Overwatch 2s, by the way,
wie da die Helden-Kids aussehen.
Vielleicht wäre es tatsächlich besser gewesen,
er hätte am Anfang ein bisschen auf Support geguckt.
Weil ich finde, ein Vorteil hat das, wenn man ein bisschen Support spielt.
Man lernt den Fluss aus,
ich nenne es mal so den Flow von Overwatch, finde ich besser,
als wenn man direkt am Anfang DPS spielt und quasi immer drauf rennt
und versucht zu killen und versucht Damage zu machen.
Weil Overwatch hat schon, auch ein bisschen abhängig von den Maps,
so einen gewissen Fluss.
Und gerade Leute, die neu sind in dem Spiel,
tun sich da immer schwer,
sterben beispielsweise noch unnötig,
obwohl man sie jetzt eigentlich bräuchte,
um dann wieder gegenpushen zu können und sowas.
Das ist natürlich ein bisschen ein Problem,
als Support. Als Tank würde ich nicht unbedingt anfangen,
weil gerade, wenn du so ein bisschen was Halbwegs Offensives
wie Winston nimmst und springst dann rein,
hast du keinen Plan, wohin du dich positionierst
und wo du zurück kannst, wo Medipacks sind,
wo du schön deinen Schild stellen kannst,
dass du wieder um die Ecke gingst,
kriegst du ja nur noch auf den Sack.
Und wenn du Tank spielst, ist halt eine Sache ganz extrem,
du wirst von Anfang an lernen, dein Team zu hassen,
weil du gar nicht weißt,
was dein Team macht.
Weil du gleich denkst, alter, was macht mein Team?
Als Tank kannst du in Overwatch,
von Reinhardt aus oder so,
du bist da jetzt nicht unbedingt der,
der das krass carried mit deinem Nahkampfzeug.
Du bist unglaublich wichtig für das Team,
dass es überhaupt pushen kann und funktioniert.
Und gerade wenn Tank gegen Tank ist,
wäre er quasi den anderen Outplayed,
der gewinnt letztendlich den Fight.
Aber im Prinzip bist du darauf angewiesen,
dass dein Team daraus was macht.
Und ich denke gerade im unteren Skillsegment
bist du permanent angepisst auf dein Team.
Deswegen ist vielleicht als DPS
bzw. gerade als Supportstatten gar nicht mal so blöd.
So, also so viel, so viel.
Mein Senf dazu.
Wir gucken uns jetzt nicht,
wie er seine Socken verkauft hat an.
Wieso VR-Games nicht funktionieren?
Funktionieren doch.
Du spielst keine VR-Games, das stimmt,
wenn ich eine VR-Headset habe.
Das ist korrekt.
Oh.
Mal eine technische Frage am Rande.
Auf welche Technologie würdet ihr setzen,
wenn ich ein klassisches MVC benötige?
Alles Internet?
Oder würdet ihr auch PHP im Jahr 2022 empfehlen?
Ich wäre halt schon...
MVC, das kannst du...
Jede Sprache hat doch irgendein MVC-Framework, ja?
Also, das Klassischste dürfte wohl Ruby on Rails sein.
Ansonsten kannst du auch PHP nehmen.
Laravel ist auch MVC.
Ist halt die Frage,
willst du wirklich auch den View in dem Framework machen
oder willst du eigentlich nur quasi Controller haben?
Weil den View machen, ganz ehrlich,
in der heutigen Zeit will man wirklich noch
den View in dem Framework machen?
Will man da nicht irgendwas JavaScript-basiertes nehmen?
Muss ja nicht ein Single-Page-Application sein.
Ja, wobei, kann man ja schon machen.
Also, ich würde es tatsächlich in.NET machen,
weil ich.NET mag.
Und ASP.NET Core, meiner Meinung nach,
auch mit das beste Web-Framework ist.
ASP.NET Core ist außerdem schnell.
Du hast für alle Technologien,
außer für Node.js Eigen-Krempel,
hast du Implementierung von gRPC bis GraphQL und so.
Das heißt, es gibt alle möglichen Sachen dabei.
Man darf sich von einer Sache nicht planten lassen.
Microsoft bewirbt ASP.NET Core immer mit,
dass es quasi das schnellste Web-Framework überhaupt ist.
Guck mal, wir können zum Beispiel.NET Conf-Keynote angucken.
Ich muss kurz mal raussuchen, wo sie das zeigen.
Microsoft erzählt ja auch ein bisschen viel Shit,
wenn der Tag lang ist.
Performance, wo erzählt man was von der Performance?
Performance.
Ja, also, das ist ziemlicher Blödsinn,
was sie da teilweise erzählen.
Blazingly fast, das kann ja schon mal nicht sein.
Das ist nicht written in Rust.
Und alles, was nicht written in Rust ist,
kann ja überhaupt nicht blazingly fast sein.
Das wissen wir ja.
Das ist aber auch ziemlicher Blödsinn.
Die wollen wir noch nicht ernsthaft erzählen.
Ich sage auch gleich, warum das Blödsinn ist.
Die wollen wir noch nicht ernsthaft erzählen,
dass, wenn du eine Web-Anwendung baust
und ein Backend für eine Web-Anwendung,
dass Node.js 0,6 Millionen Requests durchkriegt
und ASP.NET Core 7 Millionen Requests,
wenn man halbwegs vergleichbare Features verwendet.
Das ist ja immer das Wichtigste.
Du kannst ja nicht Äpfel mit Birnen vergleichen.
Du kannst ja nicht auf der einen Seite
Express oder irgendwas verwenden,
was dir das Leben relativ einfach macht,
und auf der anderen Seite Raw Socket programmieren.
Das ist kein Wunder, dass, wenn man Raw Sockets verwendet,
das komplett das andere in die Tasche steckt.
Aber dafür ist es auch 5-mal so viel Code
und keine Sau blickt mehr durch.
Als ich das gesehen hab,
hab ich mir ganz absoluter Schwachsinn erzählt.
Das kann nicht sein.
Dann hab ich mal nachgeguckt.
Es gibt, das ist ja glücklicherweise schön,
an.NET ist alles Open Source.
Microsoft hat getrickst wie Sau.
Wir gucken uns mal kurz diesen Benchmark an.
Moment hier.
Tech Empower.
Und dann zeige ich euch, was Microsoft da treibt.
Ja.
Data Section 21.
So.
ASP.
Also man sieht, das ist relativ oben.
ASP.net.
Node.js ist relativ weit unten.
Aber was euch jetzt wahrscheinlich schon auffällt ist,
wobei die haben ja noch was anderes.
Plain Text haben die ja hier.
Plain Text.
Ihr seht hier, ASP ist ziemlich weit oben.
Aber guckt mal.
Es gibt ASP.
Es gibt ASP Core of Mono.
Es gibt ASP MW.
ASP.NET Core.
Es gibt ganz viel unterschiedliches Zeug.
MVC.
Das ist auch schon gar nicht mehr so gut.
So.
Microsoft hat das folgendermaßen gemacht.
Die bescheißen.
Ja, genau.
Die bescheißen ja nicht wirklich.
Die machen den Benchmark schon.
Allerdings, die Sache ist halt die,
die verwenden ASP.NET Core nicht,
wie man normalerweise eine ASP.NET Core Web-Anwendung
programmieren würde.
Nee, nee.
Die haben quasi explizit eine,
für diesen Benchmark optimierte Web-Anwendung entwickelt,
die so gut wie nichts aus ASP.NET Core verwendet.
Die verwenden keine Controller.
Die verwenden nicht die normale Request-Pipeline.
Ich glaube, RawSocket benutzen sie nicht.
Aber die machen wirklich super krass optimiertes Zeug
nur für diesen Benchmark,
so wie niemand eine ASP.NET Core Web-Anwendung schreiben würde,
mit handoptimierten Klassen für die Responses.
Also, das ist einzig und allein dafür da,
dass die und ihr wisst, ich bin.NET-Fan
und auch das Framework mag ich.
Aber das ist kompletter Bullshit, was sie uns hier erzählen.
Das ist Blödsinn.
Das Gute ist, das ist Open Source.
Man kann sich das alles angucken auf GitHub,
wenn man es dann findet.
Also hier, im Beispiel, wer jetzt hier denkt,
jeder dahinter würde eine Art
eine normale ASP.NET Core Web-Anwendung stecken, nicht.
Das ist auch nicht mal Minimal-API.
Das ist wirklich handoptimiertes Zeug
mit statisch zur Kompilzeit erzeugten Strings
für die Responses.
Also, das ist wirklich nicht mit der Realität zu vergleichen.
Man müsste mal kurz gucken, ob man diese Benchmarks
irgendwie findet.
ASP.NET Benchmarks, Szenarios, Source.
Ich weiß nicht, wo die...
Ach gut, das ist ja so unübersichtlich.
Da kann es ja nicht hier...
Ah, das ist noch der normale.
Ich weiß gar nicht, ob das das Richtige ist, doch.
Wenn man hier durch...
Hier durch...
Habe ich denn das gesehen?
Die verwenden, by the way, noch nicht mal, glaube ich,
den eingebauten Web-Server von.NET.
Oder nicht eigentlich die normale Request-Pipeline.
Nee, das ist nicht das, was ich meine.
Benchmarks, ja, hier kommen wir der Sache näher.
Guck mal, die haben...
Irgendwelche...
Buffer-Klassen dafür erstellt und sowas.
Hier sieht man es.
Guck, das hier. Das ist der Benchmark.
Das hat nichts mit einer normalen
ASP.NET Web-Anwendung zu tun.
Use Benchmarks, Configuration, Create IP, Endpoint.
Das hat nichts...
Allein schon hier durchzublicken ist nicht so ohne.
Guck, im Startup steht beispielsweise auch gar nichts drin.
String-Builder, Cache, es wird...
Also es ist wirklich... Guck mal.
Eine normale.NET Web-Anwendung
hätte beispielsweise
ein paar Minimal-API-Endpunkte
hier in Program.cs.
Die brauchen das alles,
damit das funktioniert.
Guck mal hier.
Die encoden, irgendwelche Sachen machen.
Buffer werden von Hand gelesen, von Hand befüllt.
Keine normale Handle-Requests
mit irgendwelchen komischen
Writer-Readern von Hand.
So sieht keine normale ASP.NET-Anwendung aus.
Guck mal.
Das sieht...
Das ist ja fast schon socket-
von Hand programmiert, wenn du es so willst.
Ist es nicht wirklich, aber
geht in die Richtung.
So sieht keine normale ASP.NET-Anwendung aus.
Deswegen muss man ganz ehrlich sagen,
das ist ziemlicher Blödsinn,
was wir uns hier verkaufen wollen bei Microsoft.
Nichtsdestotrotz,
um mal auf die eigentliche Frage zurückzukommen,
von der ich drauf gekommen bin,
ich mag ASP.NET Core trotzdem.
Es ist immer noch mein Lieblingsweb-Framework.
Und ich persönlich mag ja die Kombination aus
API-Endpunkte in.NET Core
und irgendeine Single-Page-Swelt-Application
fürs Frontend.
Wobei man halt sagen muss,
Single-Page-Application will ja auch nicht jeder haben.
Und, gut,
du bist bei jeder Programmiersprache von irgendwas abhängig.
Benutzt du Go, bist du quasi von Google abhängig.
Benutzt du Swift, bist du quasi von Apple abhängig.
Gut, bei PAP weiß ich nicht.
Aber ganz ehrlich,
.NET ist nicht morgen weg.
Das ist mit eines der größten Projekte auf GitHub.
Und das verschwindet nicht einfach.
Also du hast jetzt da keine...
Also da würde ich mir echt keine Gedanken machen,
dass.NET morgen weg ist oder Microsoft da irgendwas wildes damit macht.
Mal C++ machst du dich abhängig von den komischen Entscheidungen,
die das C++-Gremium trifft.
Chain-Lore, da bist du ja.
Guckst du Privat 7 vs. Wild? Nee.
Das Lachen alle über PAP gibt eigentlich gar keinen Grund mehr.
Modernes PAP ist schon in Ordnung.
Über PAP hat man halt früher gelacht,
gerade weil die Leute, die das programmiert haben,
dann irgendwelches Cookie- und Header-Handling von Hand gemacht haben
und rein weiß Sicherheitslücken eingebaut haben.
Mittlerweile ist PAP schon in Ordnung.
Wie hängt C-Sharp mit ASP.NET?
Gar nicht.
Das sind zwei unterschiedliche Paar Schuhe.
Also C-Sharp ist die Programmiersprache.
Die einzig nennenswerte Implementierung basiert halt auf.NET Core
beziehungsweise.NET 7 ist es jetzt ja mittlerweile von Microsoft.
Es gibt zwar andere Implementierungen von ASP.NET,
es gibt zwar andere Implementierungen von einem C-Sharp
beziehungsweise.NET Compiler,
aber es ist nicht relevant.
Also insofern hängen die zusammen.
Beides ist von Microsoft und C-Sharp ist quasi die Microsoft Sprache schlechthin
für das.NET Framework.
Hat nicht direkt was miteinander zu tun.
C-Sharp ist die Sprache,.NET ist die Runtime
und die Standard Library und halt das, was halt standardmäßig mit dabei ist.
Und ASP.NET Core ist ein Web Framework auf.NET Basis.
Der Zusammenhang ist, es kommt alles von Microsoft
und es wird sicherlich auch Überschneidungen bei den Entwicklern geben.
Aber im Prinzip hat es erstmal wenig miteinander zu tun.
Du kannst ASP.NET Core auch in anderen Sprachen programmieren als in C-Sharp.
Man könnte wahrscheinlich auch in F-Sharp oder sowas machen
oder in irgendeiner beliebigen VB.NET zum Beispiel.
Man könnte es in einer beliebigen.NET-Programmiersprache machen.
Aber meistens ist es halt C-Sharp.
Und das Prinzip jetzt, du abhängig immer von irgendwen bist, ist klar.
Guckt euch die Sicherheitslücken an, die wir da in letzter Zeit haben.
Ich sag nur Log4.
Was war das?
Log4Shell war das, wo irgendwo ein paar Maintainer am Start waren
und was nicht gesehen haben.
Das kann allen passieren.
Also da ist die Chance wahrscheinlich sogar noch höher,
dass dir jetzt mit sowas Kleines passiert,
wo ein paar Leute hobbymäßig dran sitzen.
Aber so hängt das Ganze zusammen.
Kennst du ein gutes Online-Menu?
WPF.
Ich hab ein WPF-Buch hier.
Das hat 1200 Seiten oder so.
Ein richtig fettes Ding.
Hab ich nie richtig gelesen.
Ich wollte vor Jahren mal WPF mich ein bisschen mehr mit beschäftigen,
aber hab aber keinen Bock drauf.
Ich muss sagen, also kenn ich nicht.
Und ich weiß auch nicht, ob man wirklich neue Anwendungen
ernsthaft mit WPF noch machen will.
Das ist ja tatsächlich Windows-only.
Und ja, wenn man es in.NET machen will
und es soll Windows-only sein,
dann ist WPF eventuell tatsächlich immer noch das Beste.
Wobei ich es auch nicht so sagen würde.
Also Windows Forms ist halt hoffnungslos veraltet.
WPF aber auch.
WPF ist zwar ein bisschen neuer,
aber WPF ist auch hoffnungslos veraltet.
Windows Forms hat noch mal eine ganze Ecke älter.
WPF hat halt viele neue Sachen eingeführt,
die sich im Nachhinein dann auch etabliert haben,
gerade dass du beispielsweise dein UI in extra Sprache designs,
Two-Way-Data-Binding hast und sowas.
Das war im WPF relativ früh mit dabei,
dass die sowas hatten.
Deswegen fühlt sich WPF nicht so alt an.
Aber WPF ist im Kern auch alt.
Und es ist halt rein Windows-only.
Neuer wäre WinUI,
was du auch mit XAML programmieren kannst.
Da ist halt die Frage, muss auch nicht UWP sein.
Ist halt die Frage, wie weit die da mittlerweile sind.
Was anderes wäre Avalonia.
Avalonia ist quasi ein Cross-Plattform-WPF-Nachbau,
den ich persönlich deutlich sympathischer finde,
als jetzt noch was mit WPF anzufangen.
Ansonsten, ja, eines der großen Probleme,
die dort net hat, ist,
dass es kein gescheites UI-Framework gibt.
Ich weiß jetzt, wenn die Leute sagen,
ja, aber es gibt Maui.
Aber Maui ist meiner Ansicht nach auch nicht so das wahre.
Auf der einen Seite ist es eine Weiterentwicklung von Xamarin.
Das hatte schon so die ein oder anderen Problemchen.
Und es ist meiner Meinung nach
der falsche Ansatz, ein UI-Framework zu bauen.
War Xamarin auch schon.
Und Maui ist es auch.
Weil, ich sage das jetzt, ich versuche es mal zu begründen.
Weil, also erstens unterstützen sie schon mal gar nicht alle Plattformen.
Linux wird schon mal außen vor gelassen.
Kann ich irgendwie noch verstehen.
Linux Desktop-Unterstützung tut sich keiner freiwillig an.
Ist natürlich blöd, ja.
Weil elektronbasierte Sachen oder Qt-basierte Sachen,
die können halt auch ohne Probleme auf Linux laufen.
Wir schauen das C-Sharp-Video gleich, ja, gucken wir gleich an.
Aber eine Sache, die ich in Xamarin schon nicht gut fand
und in Maui auch nicht gut fand, ist,
dass sie ihre Controls nicht selber malen.
Die benutzen Native Controls.
Das ist so ein bisschen Philosophiefrage, was man besser findet.
Ja, ich finde es selbst...
Nee, WPF ist nicht Avalonia.
Avalonia ist... Moment.
Avalon oder Avalonia war mal der Codename für WPF.
Jetzt ist WPF WPF.
Und das Projekt, was du auf GitHub hast, Avalonia UI,
das ist quasi ein Open Source...
Es tut ihnen fast schon unrecht, wenn ich das so sage.
Das ist quasi ein Open Source Cross-Plattform-WPF-Nachbau.
Es ist kein WPF-Nachbau, weil es viele Bereiche deutlich besser macht
und viel moderner ist als WPF.
Es ist eigentlich das bessere WPF mittlerweile.
So, aber ich bin der Meinung,
UI-Frameworks, die ihre Controls nicht selber malen, sind blöd,
weil du kannst dir einfach nicht sicher sein,
dass der Krempel ordentlich aussieht auf allen Plattformen.
Zur anderen Seite hast du dann halt immer wirklich Native UI,
was auch native aussieht, bis ins Kleinste,
weil es ja eben die Elemente von der jeweiligen Plattform nimmt.
Aber du hast ja dann im Prinzip immer nur so den kleinsten gemeinsamen Nenner.
Jetzt stellt euch mal vor, ihr habt irgendein UI-Element, irgendein Button zum Beispiel.
Der Button ist auf der einen Plattform standardmäßig rund,
auf der einen standardmäßig eckig,
auf der einen hat er Rechtsklick-Fähigkeiten, auf der anderen nicht.
Auf der einen Plattform kannst du beispielsweise die Menüpunkte standardmäßig sortieren
und bei der anderen nicht.
So, und wie machst du das jetzt gescheit?
Entweder baust du tatsächliche Native UI für jede Plattform.
Dann ist die Frage, warum du so ein Metaframework überhaupt brauchst,
was dir das Leben eigentlich einfacher machen sollte.
Oder du musst den kleinsten gemeinsamen Nenner benutzen.
Also sprich, du benutzt halt einen Button, auf den man klicken kann.
Die jeweiligen plattformspezifischen Sachen unterstützt du dann halt einfach nicht in deiner Anwendung,
weil dann hast du ja Probleme, ein Framework für alles zu verwenden,
weil dann müsstest du ja wieder für die jeweilige Plattform was programmieren.
Deswegen ist der Vorteil von UI-Frameworks, die ihre Elemente selbst zeichnen,
dass du dieses Problem nicht hast.
Es sieht überall gleich aus, es sieht vielleicht nicht native für diese Plattform aus,
aber es sieht überall gleich aus, es ist überall auch gleich angehaut, anderenfalls gleich gerendert wird.
Und du kannst halt das einbauen an Funktionen, was du haben willst, was du unterstützen willst,
und geht das auch überall.
Also ich bin da meine UI-Frameworks, die ihre Elemente selbst malen, ist so wie man sagen soll,
the way to go.
Ich weiß, dass du mit Maui da verschiedene Extensions machen kannst pro Plattform,
dass du es dann doch irgendwie unterstützen kannst.
Ich mag Maui nicht, ich mochte Xamarin schon nicht,
ich finde es doof, dass sie keine Leerungsunterstützung haben,
und ich finde den Ansatz nicht gut.
So, deswegen ist Maui nicht meins.
Dann lieber Avalonia.
Ne, wie gesagt, das ist das, wie ich es machen würde.
Also das klassische MVC, dass du quasi einen Controller hast,
also einen Model hast du ja nach wie vor, ein Model ist ja im Prinzip die Datenbank-Abstraktion,
nennen wir es mal so, das was quasi aus der,
die ganze SQL-Sache ein bisschen besser verpackt.
Du hast da eine Tabelle in der Datenbank, aber bei dir ist es dann halt ein Model für das,
was in der Datenbank drinne steht, zum Beispiel ein User.
In der Datenbank sind es dann unter der Haube halt irgendwelche Felder mit Index und sonst was,
du hast da ein Model mit User, Vorname, Nachname, und Datenbankgeschichte ist das Model.
Controller ist das quasi dein AP-Endpunkt.
Der View ist halt das, was im Browser angezeigt wird,
und das ist der View in MVC ist halt normalerweise klassisches Server-Site,
also relativ statisches Server-Site-Rendering.
Du hast dann irgendeine Templatesprache, bei.NET ist es Razor,
bei Ruby, bei Ruby on Rails ist es ERB,
und dann rendert das Server halt diese Seite einmalig,
mit dem Content, der rein soll, schickt es an Client.
Du kannst selbstverständlich da drinne dann im Browser auf dem Client JavaScript Zeug machen,
das ist kein Ding, aber der modernere Ansatz ist eigentlich,
dass du ein AP, weil man das nicht sagen kann,
der Trend geht ja gerade ein bisschen wieder hin,
dass man mehr Server-Site-Rendering macht,
einfach weil du es besser durchsuchen kannst in Suchmaschinen,
und weil die Page-Ladezeiten schneller sind,
aber das ist so ein Hybrid, wie man das aktuell macht,
so ganz klassisches statisches Server-Site-Rendering ist jetzt eigentlich relativ out.
Entweder machst du es halt sehr JavaScript-heavy,
dass du nur AP-Endpunkte baust, dass du quasi nur Model und Controller benutzt,
du baust halt AP-Endpunkte, und Frontend lieferst du halt aus,
mit quasi dem JavaScript-Package,
was sich dann erstmal beim ersten Seitenaufrufen von deiner AP
die Daten lädt und die Seite aufbaut,
oder du nimmst halt sowas wie SvelteKit,
oder andere Dinge in dieser Richtung,
die so das Hybrid-mäßig machen,
also die rendern schon die Seite mal vor,
auf dem Server schicken sie dir rüber,
aber dann übernimmt dein Client wieder.
Aber wenn du rein Daten-heavy-Anwendungen hast,
zu irgendwas einfach mit elendlangen Tabellen,
Inventarslisten oder sowas,
dann kannst du natürlich auch dein HTML auf dem Server rendern lassen
und deinen Client rausschicken.
Aber es ist jetzt vielleicht nicht mal so das Angesagteste,
das so zu machen.
Ist Qt heutzutage noch relevant?
Ja, ist es.
Es ist erstaunlich viel in Qt,
nicht nur an cross-Plattform.
Origin, das Origin ist ganz zum Beispiel
zum größten Teil in Qt.
Ist das EA-Ding, was sie jetzt abgeschafft haben.
Wahrscheinlich das neue auch.
Ich mein, Origin ist zum größten Teil ein Browser,
aber der Rest ist Qt und der Browser-Wrapper auch.
Ja, es ist relativ viel Qt.
Darum ist halt C++.
OBS, ja genau, OBS auch, habe ich ganz vergessen, richtig.
So, nee, habe ich nicht.
So, und zwar, jetzt wo Preserif auch da ist,
wir wollten doch noch dieses.net-Video gucken,
acht Gründe, warum es die Sharp doof ist oder sowas.
Ne, fünf Gründe, okay, oder 30 Minuten.
Da schwätze ich ja wieder ewig zu.
Fünf Gründe, warum es die Sharp mooks ist
und nicht mehr so ganz zeitgemäß.
Also ich gucke seine Videos gerne.
Ich weiß, dass er früher,
ich weiß nicht, ob er mal Beispiele zeigt.
Erzähl da wirklich, 30 Minuten durchgehen.
Okay, das wird was.
Ich weiß, dass er früher.net,
wie nennt sich das bei Microsoft?
So.net Experte oder irgendwie sowas.
Ne, wie heißt das?
Microsoft, wie heißt denn dieses Programm?
MVP, MVP.
Er war früher Microsoft MVP für.net oder für C-Sharp.
Hat sich dann irgendwie mit Microsoft in den Haaren gehabt,
weil er sich wohl öffentlich kritisch über.net geäußert hat.
Und dann hat Microsoft zu ihm gesagt,
du bist jetzt kein.net Experte mehr.
Und dann hat er gesagt,
gut, dann mache ich mit Microsoft nichts mehr
und jetzt was anderes.
Also er hat so ein bisschen in der Vergangenheit
Probleme mit Microsoft gehabt.
Mal gucken, ob das da jetzt mit was zu tun hat.
Mal schauen.
Ansonsten gucke ich seine Videos wirklich gerne,
weil die sind in der Regel,
hat das Hand und Fuß, was er sagt.
Aber gucken wir mal,
was er uns denn zu.net erzählt.
Vergangene Woche ging es in unserem Video darum,
dass ich nach vielen, vielen Jahren
wieder mit C-Sharp und.net in Berührung gekommen bin
und aktuell mit dieser Sprache
Plattform entwickle.
Ich habe erzählt,
wie sich das nach all den Jahren für mich anfühlt,
was mir auffällt und was man da...
Was er hat auch auf Twitter Mastodon
für ihre Ruby on Rails Basis kritisiert.
Kann man ja auch im Jahr 2023 machen.
...als Entwicklerin oder als Entwickler lernen kann.
Ich habe auch erzählt...
Bisschen leise.
... ohne mich jetzt auf den Podest stellen zu wollen,
doch in einem gewissen Sinne von mir selbst überrascht war,
wieviel ich von C-Sharp und.net nach all der Zeit noch wusste...
Okay, wo gehen die Gründe los?
... dass es schön wäre,
dass ich endlich wieder eine vernünftige Sprache nutzen würde,
aber dass es doch schade sei,
dass ich nicht sehen würde...
Naja...
Go ist auch cringe.
... was im Jahr 2022 mit C-Sharp und.net alles möglich sei,
und ich müsste mich nur mal vernünftig
und ausgiebig damit befassen,
und ich solle C-Sharp doch einfach
mal eine Chance geben.
Dann würde sich auch meine Kritik
ganz sicher ganz schnell erübrigen.
Und weil ich außerdem von vielen anderen Entwicklerinnen und Entwicklern
gefragt worden bin,
was mich denn konkret an C-Sharp und.net stört...
Dann erzähl mal.
Also...
Ich muss dazu sagen,
ich finde auch nicht alles toll, ja.
Gerade auch was die letzten Jahre
alles in.net bzw. C-Sharp eingebaut wurde,
kann man sich drüber streiten,
ob das so überlegt ist an vielen Stellen.
Ich habe ja mittlerweile 50 neue Features eingebaut,
wo die meisten davon gar nicht...
Ja, ich finde auch nicht alles gut.
Warum ich es nicht mehr so ganz zeitgemäß fände,
deshalb besprechen wir das heute mal ausführlich im Detail.
Jawoll.
Ganz wichtig ist mir dabei noch vorneweg darauf hinzuweisen,
dass mir an C-Sharp nicht alles missfällt.
Es gibt auch durchaus einige...
Alter, schon mal sehr persönlich gesagt.
Konzepte und Features, die ich mag
und die ich als gelungen bezeichnen würde.
Nur um die geht es eben heute nicht,
weil ja gezielt die Frage war...
Heute wird geflamed, so muss das sein.
Also insofern,
take it with a grain of salt,
wie man im Englischen so schön sagt,
und damit können wir dann nun auch endlich loslegen.
In diesem Sinne,
hallo und herzlich willkommen
zu unserem neuen Developers Diction.
Hallo und herzlich willkommen.
Wer war das?
War das der Krieger früher?
Ja, ich glaube schon.
Weil das Thema ein bisschen umfangreicher ist,
wird das Video heute ein bisschen länger.
Und deshalb möchte ich dir vor...
Nee, Semper Video ist anders.
Semper Video ist in diesem Video nur ganz kurz.
...ab kurz einen Überblick geben,
was dich im Detail so ungefähr erwartet.
Erzähl, bin ich gespannt.
Wir schauen uns C-Sharp aus insgesamt 5 verschiedenen...
Oh, hat nicht so gute Bewertungen.
Normalerweise haben die wie so eine Top-Bewertung.
Aber gut, das sind die getriggerten C-Sharp-Fanboys.
...Perspektiven an.
Wir beginnen damit,
wie sich C-Sharp im Lauf der Jahre weiterentwickelt hat
und welche Inkonsistenzen dabei entstanden sind.
Oh, da gibt es ein paar, ja.
Danach gucken wir uns ein paar Features an,
die zwar ursprünglich mal gut gemeint waren,
die aber unterm Strich mehr Schaden als Nutzen anrichten.
Als drittes geht es dann um Dinge,
die einfach nicht funktionieren,
wo man sich fragt,
wieso kann C-Sharp das nicht?
Danach geht es als viertes noch um ein paar Altlasten.
Und zum Abschluss, als fünftes,
erzähle ich dir dann noch,
was mein ganz persönliches Highlight
oder vielleicht sollte ich eher sagen,
Downlight ist.
Also, was für mich die größte Niveau...
Gibt es das Wort überhaupt?
...über was schon mit C-Sharp war.
Und bevor wir jetzt mit dem ersten Punkt...
Ich hätte gesagt,
mein persönlicher Abfuck oder sowas,
aber er drückt das natürlich deutlich gewählter aus.
Und falls du dich fragst,
wie ich überhaupt dazu gekommen bin,
dass ich mich wieder mit C-Sharp und.NET beschäftige,
dann möchte ich an der Stelle
noch einmal auf das Video von voriger Woche verweisen,
wo ich das ausführlich erklärt habe.
Und falls du das verpasst hast,
oder falls du es dir einfach noch mal...
...Inkonsistenzen in der Sprache.
C-Sharp wurde ja ursprünglich...
Oh, ich habe schon das Intro vergessen.
Ich hätte doch nicht skippen sollen.
Kommen wir zur ersten Kategorie.
Okay.
Kommen wir zu den Inkonsistenzen in der Sprache.
Da gibt es ein paar, ja.
...ursprünglich auf der Basis der Erfahrungen mit Java geplant.
Und man merkt,
dass C-Sharp viele der Konzepte aus Java übernommen,
diese aber vor allem weiterentwickelt und weitergedacht hat.
Und C-Sharp wirkte, als es 2002 auf den Markt kam,
in sich deutlich schlüssiger und konsistenter als Java,
weil Microsoft sich damals...
Ja, weil Anders Heilsberg high IQ ist.
...in Ruhe hat anschauen können,
welche Konzepte und Sprachmerkmale von Java gut funktioniert haben
und welche eher weniger.
Und darauf dann eben aufbauen konnte.
Und das ist auch tatsächlich einer der Punkte,
die mich vor vielen, vielen Jahren an C-Sharp sehr fasziniert haben.
Die Sprache wirkte damals sehr aus einem Guss.
Das stimmt.
Heute sieht das an vielen Stellen leider anders aus.
Da gebe ich ihm recht.
Wie gesagt, es sind über die letzten Jahre
durchaus ein paar Sachen reingekommen,
wo ich mich auch frage, so, muss das sein?
Von Default...
Ich muss mir mal die Liste angucken.
Ja, von Default Interfaces,
die ich bis heute nicht verwende.
Ich verstehe, warum es diese gibt.
Aber ja, es sind schon ein paar Dinge drin,
wo ich mir denke, so, hm,
scheint mir nicht alles so wirklich überlegt zu sein.
Einfach typisches Beispiel ist der Umgang mit leeren Zeichenketten.
Da gibt es nämlich inzwischen drei Möglichkeiten,
wie man das Ganze schreiben kann.
Nämlich...
Umgang mit leeren Zeichenketten.
Was meint er denn?
Meint er...
Ah, ich glaube, ich weiß, was er meint.
String ist...
String ist white space empty
und String ist empty und String ist white space or null
und solche Dinger.
Wahrscheinlich das.
Einmal klassisch mit zwei doppelten Anführungszeichen,
dann String.empty
und dann String.empty.
Ja, das ist bescheuert.
Ich glaube, es gibt keinen.
Du kannst sowohl groß als auch klein schreiben.
Ach so, ja.
Es gibt nämlich String klein geschrieben als Typ in C-Sharp.
Ich glaube, das ist gar kein Unterschied.
Groß geschrieben als Typ in.NET.
Und das ist am Ende derselbe Typ.
Ich glaube String.empty ist quasi so eine Konstante
für Lehrer String.
Also eigentlich quasi so eine Art globale Variable
für Lehrer String.
Ja, ich glaube, es macht überhaupt keinen Unterschied.
Weil String mit kleinem S einfach nur ein Alias
auf String mit großem S ist.
Trotzdem gibt es aber halt zwei Schreibweisen.
Ja, bestimmt.
Und wenn man nun eine leere Zeichenfolge angeben möchte,
dann stellt sich die Frage, was man denn dann nimmt.
Eigentlich lägen die beiden doppelten Anführungszeichen
ja sehr nahe.
Also es geht ihm jetzt, wenn ich das richtig verstanden habe,
es geht ihm jetzt darum, quasi,
hier, war, blub,
so
und jetzt quasi,
if, blub,
gleich, gleich, so
oder
ja, ich machs, ich machs hier.
Ist gut, Leute, ist ja.
Ich, ich, ich, ich
mach was anderes auf.
Keine Flashbang, ist okay, ist gut.
So, hier.
Also eben gehts glaub ich um so was hier.
Ist gleich, gleich, oder ist
String.empty?
Ich vermute mal, dass es eben darum geht.
Das oder das. Find ich persönlich
jetzt nicht so schlimm.
Mach eigentlich immer das, aber
ja, warum es noch drin ist,
keine Ahnung.
Das ist wohl so der gängige Standard in praktisch
jeder Programmiersprache, aber es
gibt tatsächlich einen historischen Grund für die
anderen beiden Schreibweisen.
In.NET 1.0 und 1.1
wurde durch zwei doppelte Anführungszeichen
nämlich jeweils ein neues Stringobjekt
im Speicher erzeugt. Ach, das wusste ich nicht.
Das ist mir neu.
Und deshalb
wurde als Ausweg dann String.empty
eingeführt, was ein statisches
Read-Only-Feld der String-Klasse ist.
Das dadurch immer
denselben, also den identischen Wert repräsentiert.
Ok, das wusste ich nicht.
Anfangs war es also tatsächlich empfehlenswert String.empty zu verwenden.
Das ist schon ein bisschen her.
Das ganze gilt aber bereits seit.NET 2.0 nicht mehr,
denn ab dieser Version greift das sogenannte
In-Turning und gleiche Strings werden
im Speicher einfach dedupliziert.
Nun könnte man meinen, dass String.empty
in den 16 Jahren seit der Veröffentlichung
von.NET 2 irgendwann
mal als veraltet deklariert wurde.
Ok, nochmal was zu der Benamung.
16 Jahre.NET 2
er meint.NET Framework 2
nicht zu verwechseln
also.NET Framework
gibt es bis.NET Framework
4.8
nicht zu verwechseln mit.NET 5
oder.NET 6 oder.NET 7.
Weil.NET
5 ist quasi ein unbenanntes
.NET Core
3.1
Also sprich.NET Core
also.NET Core
ist quasi die Neuentwicklung
die nichts mehr mit dem.NET Framework
zu tun hat. Allerdings hat sich Microsoft
gedacht nach.NET
Core 1,.NET Core 2
.NET Core 2.1
und so weiter und so fort
dass sie zu
.NET 3.1
dann quasi zu.NET
Core 4 quasi das ganze
unbenannt in.NET 5
und warum haben sie das
gemacht? Weil es sonst Probleme
gegeben hätte mit.NET Framework
4.8
weil die logische neue Benamung
wäre gewesen.NET Core
4. Microsoft hat sich
aber gedacht 4 ist ganz schön doof
wir benennen das ganze
jetzt.NET 5
und daraus resultiert jetzt das nächste
Problem. Jeder der keine Ahnung
von der Versionshistorie von.NET hat
wird sich denken.NET 5
ist der Nachfolger
von.NET 4.8
von.NET Framework 4.8
das stimmt aber überhaupt
nicht..NET Framework 4.8
ist das ganz alte
und.NET 5 beziehungsweise
mittlerweile.NET 7 ist die
Weiterentwicklung von.NET Core und das
neue
nur mal so angemerkt ja
ich hoffe man hat alles verstanden
jetzt
Wechselt zu.NET Core und dann wieder
zurück ohne Hinbrüche in der Codebase
gab aber dem ist nicht so
und deshalb streiten Entwicklerinnen und
Entwickler auch im Jahr 2022
immer noch darüber was denn nun
besser lesbar sei und das Schlimme ist nun
dass es eine nicht zu vernachlässigen
Anzahl streiten sich die Leute wirklich da
immer noch drüber die Stringpunkt Empty
den Vorzug geben. Echt?
Wer macht denn sowas? Seriously
wer schreibt Stringpunkt Empty?
Warum ist das schlimm?
Ich weiß jetzt sagt die Hälfte vom Chat ich
funktioniert weil es erst zur Laufzeit
ausgewertet wird und überall dort
wo eine Compile Zeit Konstante benötigt
wird muss man dann halt doch wieder auf die
Doppelten Anführungszeichen ausweichen
was zum Beispiel bei Standardwerten für
optionale Parameter der Fall ist. Was aber
auch innerhalb von der Switch Anweisung
der Fall ist oder bei Parametern
für Attribute. Aber selbst wenn man nun
sagt ist mir egal ich verwende generell
ausschließlich die Doppelten Anführungszeichen
damit es einheitlich ist dann funktioniert
das wieder nicht. Denn für den Test
ob eine String Variable leer ist
soll man in C-Sharp nicht deren
Inhalt mit dem Leerstring vergleichen
sondern ihre Länge auf Null prüfen
weil und da wird... What?
Wer macht denn sowas?
...absurd das Performanter ist
Ok also was er meint ist
nur mal so für alle die der Sache nicht folgen
konnte ich glaube er meint man sollte hier folgen
das nicht machen also man sollte also
man sollte das hier nicht machen sondern
man sollte
so machen
What?
But why?
Das finde ich
Ok Microsoft sagt
viel wenn der Tag lang ist man muss es ja nicht machen
Ich fällt das ganz klar
unter Microoptimierung aber ich finde es
erschreckend dass solche Themen tatsächlich im Jahr
2022... Das ist bestimmt
Das ist bestimmt auch nicht
Performanter unter der Haube kommt da bestimmt
das gleiche raus und wenn nicht dann ist es
echt ein Fail von Microsoft
Ja würde ich eigentlich erwarten dass er das macht
Aber dieses Beispiel steht stellvertretend
für das was in C-Sharp seit etlichen Jahren
Aber ich würde es echt wundern wenn das immer noch
so ist also
keine Ahnung ich weiß es nicht
Müssen wir jetzt mal irgendwie in Sharp Lab oder so gucken
was da rauskommt
Wollen wir mal gucken?
Wollen wir mal gucken was da
rauskommt?
So das da
Das da
Versus
Das da versus
Versus
Das da
Was?
Aber nicht das gleiche
Und
Alter das kenne ich mir jetzt nicht
Keine Ahnung was da
Auf IL habe ich jetzt wirklich keinen
Keine Ahnung ob da wirklich ein Unterschied ist
Ich hätte jetzt eigentlich gedacht es kommt
beim beiden mehr oder weniger unter der Haube
Das gleiche raus aber vielleicht doch nicht
Das wäre auf jeden Fall Fail
wenn das Unterschiede macht
Zweites Beispiel
immer noch Thema Inkonsistenz
dieses mal in Bezug auf die Klassenbibliothek
denn die gehört zwar nicht direkt zur Sprache
aber das Ökosystem kann man natürlich nicht einfach
ignorieren es gibt in.NET sage
und schreibe 5 Klassen
um Timer zu implementieren
Ne es gibt mehr
Leute ich wette mit euch es gibt mehr
Threading Timer
System Windows Forms Timer
System Web UI Timer
und mein Liebling
System Windows Threading Dispatcher Timer
und die machen im Prinzip
alles gleiche
verhalten sich aber natürlich in den Details ganz geringfügig anders
By the way
er ist nicht auf dem aktuellen Stand Leute
es gibt mindestens noch einen sechsten Timer
nämlich
C Sharp Periodic Timer
der ist jetzt neu
seit.NET 6
oder.NET 5
der ist jetzt neu die haben noch nicht genug
Timer gehabt guck seit.NET 6
ist der neu
das ist das erste mal das man den wirklich
Async verwenden kann ordentlich
ja die Microsoft Hilfe
ist auch so ein Ding die ist auch kacke
der eine verwendet Events
der andere Core wächst den einen kann man
Multithreaded nutzen den anderen nicht
und so weiter
ja das ist schon das ist schon das hat er schon recht
das ist Fail
Schlimm genug wäre kommt dann in Form der MSDN auch noch
naja
eher nicht so gelungen
hier haben wir ja gerade gesehen die Hilfe
ist oftmals ziemlicher Shit
da steht einfach gar
nichts dazu da
ups what was hat das mit Battlefield zu tun
Moment
ah
ja
Kommentation hinzu
um es mal so zu sagen
wenn ich nämlich zum Beispiel dort nachschlagen
möchte was genau denn der
System Windows Threading Dispatcher Timer
ist dann steht da als Erklärung
ernsthaft ein Zeitgeber der in die
Dispatcher Warteschlange integriert ist
ja obviously ist doch klar
das hilft mir ehrlich gesagt nicht
weiter wenn ich nicht weiß was die Dispatcher Warteschlange
ist und wenn ich das weiß dann brauche ich die Erklärung nicht
und eigentlich wollte ich ja nur
dass irgendwas mal periodisch
alle x Millisekunden ausgeführt wird
aber das scheint in.NET tatsächlich ein
größeres Problem zu sein wenn es dafür 5
Varianten von Timern braucht
Periodik Timer nicht vergessen
in TypeScript ruft man da halt einfach Set Intervall auf
gibt den Callback mit, gibt die Millisekunden
an und ist fertig. In Go ruft man
time.tick auf, gibt die Millisekunden
an und ist fertig. Also wo liegt
das Problem? So schwer kann das
doch eigentlich nicht sein einen Timer
bereitzustellen. Ach ja und der Ausgangspunkt des
ganzen war übrigens dass wir einen Timer
gesucht haben den man zurücksetzen kann also
so was wie die Reset Funktion die
man in Go zum Beispiel auf dem Timer aufrufen
kann in.NET
scheint aber niemanden Timer zurücksetzen
zu wollen dort gibt es nämlich keine Reset Funktion
wenn man danach sucht dann
findet man genau gar
valide Kritikpunkte ja
außer jede Menge Stack Overflow Artikel die
sich damit beschäftigen wie man eine Reset Funktion
am besten von Hand schreibt
wurde gemerkt von verschiedenen Varianten
und auch
da fragt man sich ist das wirklich
das Abstraktionsniveau mit dem ich
mich als Anwendungsentwicklerin oder als
Anwendungsentwickler heutzutage
auseinandersetzen sollen müsste
wenn ich einfach nur eine Anwendung entwickeln
will oder ist das nicht ein bisschen zu technisch
und vielleicht ein bisschen zu viele
unter der Haube Details die irgendwie
falsch abstrahiert wurden
und solche Beispiele. Ja da tut sich
das stimmt schon da tut sich Microsoft ein bisschen
schwer manchmal verstehe ich auch nicht so genau
es ist wie Sand am
Meer
da will ich jetzt nicht auf alle näher eingehen
aber um einfach noch ein paar Stichpunkte zu nennen
warum gibt es isnull und
gleichgleichnull wenn ich auf null testen will
weil Pattern
Matching. Using als Statement
und Using als Blog und so weiter
weil
Using im Blog
uu alt ist und
Using quasi im Statement
die
neuere Variante die das für dich rappt
die ich persönlich deutlich schöner finde
wie Using als Blog
und du
konntest das alte halt nicht rausschmeißen weil Rückwärts
Kompatibilität. Das ist auch ein Punkt
finde ich da übertreibt es Microsoft
tatsächlich ein bisschen
ich finde man könnte durchaus mal
alle 5 Jahre
oder so hergehen
und ein paar so gut wie nicht verwendete Legacy Sachen
wieder rausschmeißen
Konsistenzen bzw.
unterschiedliche Wege die historisch bedingt sind
die alle jeweils mehr oder weniger
zum gleichen Ziel führen
oder zumindest die vollmäßig
deaktivieren
ihre Syntax unterscheiden aber letztlich das
gleiche bewirken die sich in der Regel aber dann
doch durch feine Kleinigkeiten unterscheiden
und das ist fehleranfällig
und das führt wenn man diese Feinheiten ernst nehmen
möchte zu vielen technischen Diskussionen
die einen beim lösen des eigentlichen
fachlichen Problems nicht weiter
helfen. Ich finde man sieht an diesem
Beispiel eigentlich schon ganz schön dass man
eben sieht das C-Sharp historisch gewachsen ist
dass es sich weiterentwickelt hat
und dass es über den Initial am Reißbrett mal
geplante Sprache inzwischen längst hinaus
gewachsen ist. Und das ist einerseits
gut aber es sind halt viele Punkte wo ich mich
frage. Man muss aber auch sagen Microsoft
legt da wirklich ein ordentliches Tempo vor
also ich meine die haben
jedes Jahr eine neue.NET Version die haben
quasi jedes Jahr eine neue C-Sharp Version die legen
schon ordentliches Tempo vor. Ich finde auch
manche Sachen müssten echt nicht sein
es sind die letzten Jahre einige Sachen in die
Sprachen gekommen
mir fehlen jetzt so aus dem Kopf raus
leider wie gesagt mir fallen bloß jetzt gerade die
Default Interfaces ein und sowas
wo man sich so fragt wa gut
hätt's das jetzt wirklich
sein müssen
ja also
da kann man sich über viele Sachen sicherlich
streiten
wie stellt man denn im Laufe der Jahre
fünf Timer Klassen zur Verfügung
statt die erste davon zu verbessern
und weiterzuentwickeln? Ich vermute
mal das liegt daran weil die erste
irgendein Rapper um Windows Timer war
für Windows Forms. Das nächste als
andere Ding ist für WPF
und dann gab es irgendwie noch
mal einen Threading Timer als Unabhängigen
und der war halt kacke
und irgendwann hat man gesagt mir
macht es jetzt richtig und hat diese Periodic
Timer Klasse eingeführt
wobei ich die auch nicht gut finde
das ist irgendwo nicht
zielführend und das ist ganz sicher
alles aber nicht keep it simple
wobei ich persönlich
diese Sachen gar nicht verwende
wenn es nicht sein muss
ich benutze die Reactive
Extensions für solche Sachen
und die finde ich ziemlich nice
Kategorie den wie ich sie vorhin glaube ich
genannt habe den Verschlimmbesserungen
C Sharp liegt aktuell in Version 10
vor. Im November erscheint Version 11
und wenn wir uns die Versionsgeschichte anschauen
dann war die bis zur Version 5
relativ klar strukturiert. Version 1
war halt die erste Version
Version 2 hat generische Datentypen
eingeführt. Version 3 war dann
Link also die language integrated
Das stimmt schon. Da hatten wir es ja gerade die Sprache
und Framework sind zwar unterschiedlich paar Schuhe
aber wie soll er den Titel denn sonst
anders schreiben? Zumal das bei Microsoft auch
alles relativ eng miteinander
verheiratet ist. Neues
Release ist auch das Release
wo dann eine neue C Sharp Version kommt
sind zwar unterschiedlich paar Schuhe
aber Microsoft ist alles so ein Sack
und die damit verbundenen
Sprachmerkmale Version 4 war
im wesentlichen die Erweiterung mit Dynamic
und Version 5
3 war Link oder?
hat er glaube ich gesagt
Version 2 hat generische Datentypen
eingeführt. Version 3 war dann Link
also die language integrated Query Syntax
und die damit verbundenen Sprachmerkmale
Version 4 war im wesentlichen die Erweiterung
Link vermisse ich ja in Go ein bisschen
muss ich sagen
es gibt jetzt ja Generics in Go und es gibt
jetzt ein paar Sachen quasi mit den Go Generics
Link ein bisschen nachzubauen. Link finde ich das eine coole
Sache. Hätte ich gerne in mehr Sprachen
mit Dynamic und in Version 5
kamen Async und Await
hinzu. Danach also ab C Sharp 6
haben die Version jeweils
nicht mehr so einen klaren Schwerpunkt. Es war dann
eher so ein bisschen was mal hier
ein bisschen was da. Das war auch das wo sich anders
wie spricht man den Kerl eigentlich
korrekt aus. Man spricht ihn ja
gar nicht anders an das Halsberg
aus. Wahrscheinlich irgendwie norwegisch
spricht man ihn aus.
Der ist ja dann weg. Der hat
später dann Typescript erfunden
der ist weg und ich glaube
das war halt auch die Zeit wo dann
bisschen so die Feature Rittes angefangen
hat für C Sharp und
nicht alles mal bis zu Ende gedacht war.
ein bisschen
funktionale Konzepte, ein bisschen was aus der
Community vielleicht noch
den ein oder anderen neuen Operator
was halt gerade irgendwie so
halbwegs gepasst hat. Und auf der einen
Seite ist das natürlich auch schön
weil auf die Art ja auch interessante Features
ihren Weg in C Sharp hineingefunden waren. Und Timer
neue Timer. Zum Beispiel das Pattern Matching
was ich persönlich sehr gelungen finde. Pattern Matching
gerade, gerade
seit der letzten Version Pattern Matching ist wirklich
nice mittlerweile. Doch auch sehr deutlich
es ist leider nicht so richtig intuitiv
für
mich oftmals benutzbar. Also
ich tue mir da teilweise noch schwer
weil ich jetzt and oder or oder und und
und so verwenden muss.
Es ist aber Gewöhnungssache. Pattern Matching
ist wirklich eine äußerst nice Sache.
Version 6 irgendwo der rote Faden fehlt
und es zeigt sich auch, dass nicht jede
wenn auch vielleicht gut gemeinte
Veränderung auch tatsächlich eine
gelungene Verbesserung in der Praxis
darstellt. Inzwischen gibt es in C Sharp
nämlich eine ganze Reihe an Sprachkonstrukten
die zwar dazu führen, dass man weniger Code
machen muss, aber halt das Ganze geht
halt in der Regel leider zulasten der Lesbarkeit.
Prominentes Beispiel dafür in C
Sharp sind die Global Usings.
Die Idee ist... Ja das ist unsinnig.
Das verstehe ich auch nicht warum
es das gibt.
Verwende ich auch nicht.
Also ja macht es theoretisch ein bisschen übersichtlicher.
Ganz ehrlich könnte mir nicht
egaler sein das Feature.
Wo man halt sagen muss Go ist
da auch so. Go
ist das andere Extrem.
In Go machst du dann
kein Array
Filter, sondern machst zwei
Nested Schleifen und sowas.
Das ist dann schon wieder zu viel das Guten.
In diesem Namespace enthaltenen
Typen automatisch projektweit
zur Verfügung stehen. Das
reduziert wie gesagt den Schreibaufwand
verschleiert aber völlig was eigentlich
alles importiert wird, was woher
kommt, was wo zur Verfügung steht. Ja das stimmt.
Global Usings ist auch so ein Ding was ich
verstehe warum man das braucht.
Das bedeutet man das nun vor dem Hintergrund
dass praktisch jeder Editor und jede IDI
ja ohnehin Unterstützung für das Verwalten
der Usings enthält, sodass man sich da
Alt Enter Import fertig.
Dann ergibt das Feature irgendwie nicht so unglaublich
viel Sinn.
Ein zweites Beispiel dafür ist
Using Static. Das ist quasi das gleiche in grün.
Importiere ich eine Klasse auf dem Weg
führt das dazu, dass ich die in ihr
enthaltenen statischen Methoden direkt
aufrufen kann, ohne sie mit dem Namen
der Klasse prefixen zu müssen.
Habe ich glaube ich legit
noch nie verwendet. Kann man zum Beispiel
einfach WriteLine anstatt
Konsolerein schreiben.
Auch da gilt wieder. Keine Ahnung, verwende ich nicht.
Aber ganz ehrlich wozu?
Wo liegt denn da der große Ding? Das ist was das
Microsoft in den Demos zeigen kann.
Wie cool sie sind. Auf mich persönlich
wirkt das ein bisschen wie der schlechte Workaround
dafür, dass man Funktionen in C
Sharp nach wie vor nicht einfach auf
der grünen Wiese, also ohne umgebende
Klasse definieren kann, sondern dass
man sie halt immer in eine zweifelsfall
statische Klasse stecken muss und
das wird jetzt dadurch halt irgendwie so ein bisschen
verschleiert. Und das ergibt sogar irgendwo
Sinn vor dem Hintergrund, dass
Microsoft ja versucht mehr funktionale
Elemente in C Sharp hineinzubringen.
Das stimmt, aber das finde ich nicht schlimm.
Ich meine, wenn du wirklich einfach
nur so eine Funktionssammlung
haben willst, die du untereinander schreiben würdest,
dann machst du genau, machst du halt eine
statische Klasse, nennst die
im Zweifelsfall Functions, wenn dir nichts
besseres einfällt,
und schreibst
den Kram da untereinander rein.
Also,
da kannst du die statische Klasse ein bisschen wie den
Namespace drum herum sehen. Das finde ich jetzt nicht so wild.
Funktionalen
Sprache kann man natürlich Funktionen
einfach so ohne Klassen definieren,
deswegen heißt es ja auch Funktionale
Programmierung, aber irgendwie fühlt sich das halt
eher so an, als wenn man das Pferd von hinten aufzog.
Gut, man kann Local Functions mittlerweile machen.
Es ist ein merkwürdiger Workaround für ein eigentlich tiefer liegendes
und konzeptionelles Problem der Sprache,
und dieses Problem wird halt nicht gelöst,
es wird einfach nur verschleiert. Und ganz
schlimm wird es meiner Meinung nach, wenn man dann Global
Using und Using Static auch noch zu
Global Using Static kombiniert,
was auch noch möglich ist. Ah gut, ganz ehrlich,
ich habe beides glaube ich noch nie
verwendet und hab's auch nicht vor. Ob das nicht genügen
würde, das Ganze muss dann noch nicht mal
mehr im Code stehen, man kann es auch
mit Projektdatei als XML
eintragen, und das ist so der Punkt, wo ich mich
halt unwillkündig... Also,
das ist dann schon
obfoscated C-Sharp
Contest, den du damit
gewinnen kannst, mit
Imports in
diesem Project
XML-Ding.
Also wer das macht, weiß ich, hab ich noch nicht
gesehen. Wenn ich tatsächlich
frage, wer um alles in der Welt
hat denn bei Microsoft gedacht, dass das
eine gute Idee wäre. Ja, das stimmt schon.
Das ist unsinnig. Das dritte und letzte
Beispiel für die Verschlimmbesserungen,
für ihre Demos vielleicht.
Diese ermöglichen, dass man keine Main-Funktion mehr
schreiben muss, sondern den eigentlich darin
enthaltenen Code nun einfach so
in der C-Sharp-Datei schreiben kann. Das Ganze
soll den Einstieg erleichtern, denn
auf dem Weg fühlt sich C-Sharp ein bisschen mehr
wie eine Skriptsprache an, auch wenn
es das im Hintergrund natürlich eigentlich
nicht ist. Und das Problem dabei ist...
Ich mag Top-Level-Statements auf der einen Seite und
auf der anderen Seite nicht.
Also Top-Level-Statements ist zum Beispiel,
dass wenn ich
Konsolenanwendungen
anlege,
ich direkt quasi
Console-Write-Line-Hello-World schreiben kann,
anstatt
dass
ich
Program, Main und was auch immer
machen muss. Ist auf der einen Seite
ganz gut, weil für kurze Sachen
übersichtlicher.
Auf der anderen Seite ist es relativ viel
Magic.
Was ist denn jetzt schon wieder?
Toss. Leute, was habe ich
vergessen? Was ist Toss?
Auf der anderen Seite ist es ein bisschen Magic, weil es gibt
diese Datei nur einmalig.
Und du kannst sie auch nicht doppelt anlegen,
da gibt es einen Fehler.
Letztendlich finde ich es auch nicht so wild,
wenn man
Static-Main
hinschreibt.
Also, ja, weiß nicht.
Damit das funktioniert,
im Hintergrund ganz viel böse
Compiler-Magie laufen muss,
dass der Compiler erkennt, was von dem Code
in der Datei gehört denn nun in die Main-Funktion,
was nicht. Und dann separiert
er das Ganze mehr oder weniger intelligent
und natürlich, wie sollte es auch
anders sein, stößt man dabei über kurz
oder lang an gewisse Grenzen.
Als Einsteigerin oder als Einsteiger
verwirrt das Ganze dann viel eher, als dass es
nützt. Und für jemanden mit fortgeschrittenen
Kenntnissen und Fähigkeiten ist das Ganze
eher lästig, weil man dann unter Umständen
umständlich erstmal all das umbauen
muss, was man sich vorher vermeintlich
gespart hat. Ich glaube,
der Grund ist, warum es das gibt,
weil Microsoft quasi so
cool wie Python sein will und das
aktuell eine der Hype-Sprachen ist.
Und die wollten einfach in Demos zeigen,
guckt mal, wir können das jetzt auch in einer
Zeile. Gebraucht
hätte es echt keiner.
Es ist auf der einen Seite nice, aber auf der
anderen Seite auch irgendwie
nicht. Also
ich benutze es, weil es defaultmäßig
so eingerichtet ist. Gebraucht
hätte ich es ehrlich gesagt auch nicht.
... dass man eigentlich gar nichts spart,
sondern das Feature, wenn man nicht gerade nur
ein Hallo-Welt-Programm schreibt, eher
lästig ist. Und das Schlimme ist auch
hier wieder, das Feature verschleiert
das eigentliche Problem, denn
es ist nicht schwierig, wenn man
anfängt zu programmieren, eine Main-
Funktion zu definieren. Was schwierig
ist, das sind die ganzen Konstrukte, die man
in C-Sharp zusätzlich noch benötigt.
Eine Klasse, eine Namespace,
das Static-Keyword, weil die
Main-Funktion Static sein muss und so weiter.
Trotzdem, ich muss sagen, für mich
ist C-Sharp immer noch die angenehmste
Sprache überhaupt. Also ohne Klassen
definieren, dann wäre das sehr viel einfacher.
Auch für mich angenehmer als Go. Dann bräuchten wir auch keine Top-Level-Statements,
weniger Compiler-Magie und
es würde zugleich auch solche Konstrukte
wie Using Static überflüssig machen.
In Go funktioniert das ja schließlich auch.
Oder in JavaScript.
Oder in TypeScript. Oder in C.
Oder in Python. Oder in so ziemlich
jeder anderen Sprache. Warum
Microsoft da so hartnäckig dran festhält,
dass in C-Sharp jede Funktion
immer zwingend innerhalb
einer Klasse definiert werden muss, auch wenn das
überhaupt keinen Sinn macht, das erschließt
sich mir persönlich einfach nicht.
Apropos, erschließt sich mir nicht,
das ist die perfekte Überleitung zur Kategorie
3, nämlich warum
zum Kuckuck funktionieren
gewisse Dinge in C-Sharp eigentlich nicht.
Und da ist das erste Beispiel relativ einfach.
Warum kann ich in C-Sharp keinen
Yield-Return innerhalb eines
Try-Catch-Blocks ausführen? Wieso geht das nicht?
In anderen Sprachen ist das problemlos
möglich. Gute Frage.
Zum Beispiel in JavaScript und in TypeScript.
Es kann also kein grundsätzlich konzeptionelles
Problem sein. Und natürlich gibt es auch
Workarounds. Man merkt sich... Also der
meint im Prinzip sowas hier.
Also wenn ich irgendeine Funktion habe,
da drin habe ich irgendwie eine Schleife
for each, keine Ahnung,
var, blub in
blubs.
Oder machen wir anders,
wir machen eine Vorschleife.
Alter,
ich habe keine...
Was ist das? Keine
Snippets oder was? Jetzt muss ich das vorne
von Hand machen. Ich habe glaube ich seit 5 Jahren
keine Vorschleife mehr von Hand. Wie sieht das
jetzt aus? I, kleiner, 10,
I++, irgendwie so, gell?
So,
Ehm,
Eield-Return, I, so,
sowas in der Richtung weiter. So, und wenn jetzt dieses
I, sagen wir vielleicht nicht aus der
Schleife kommt,
sondern von irgendeinem
HTTP-Request.
Also sagen wir mal
Try-Catch.
Wie sieht denn das
aus? Exceptions.
Alter, ich muss jetzt ohne Sünder, ohne Completion
und alles, gar nicht mehr gewohnt.
So, also man kann jetzt beispielsweise
nicht sowas hier machen anscheinend.
Ist mir bis jetzt noch nicht
aufgefallen, aber ist eine gute
Frage, warum das nicht geht.
Also, wahrscheinlich möchtest du dann
was anderes machen. Wahrscheinlich möchtest du hier
keine Ahnung, Get-Request
gleich
irgendwie was, ja, und dann willst du hier
quasi den Get-Request machen.
Am besten noch Async oder so, das
Ganze. Und
dann willst du hier Return und hier willst du wahrscheinlich
mal angenommen, man will irgendwie sowas machen.
Da wusste ich nicht, dass das nicht geht.
Ich war doch nicht in der
Situation jetzt, dass ich
gebraucht habe, aber kann ich verstehen.
Also ich erkenne den Anwendungszweck, ja.
Einfach innerhalb des Try Blocks den gewünschten
Wert und fühlt das Yield-Return dann
danach aus. Aber das ist halt so
unnötig umständlich. Und ich habe eine ganze Weile
gesucht, ob ich Gründe finde, warum
das in C Sharp konzeptionell nicht funktionieren
sollte. Ich habe aber nichts
gefunden. Und auf mich wirkt das Ganze
ehrlich gesagt eher so, als ob das nicht
gewünscht wäre und weniger
als dass es dafür einen triftigen, technischen
Grund gäbe. Wie gesagt, das würde
mich in Anbetracht der Tatsache, dass es in anderen
Sprachen ja anstandslos funktioniert, auch sehr wundern,
wenn es dafür technische Gründe gäbe.
Aber das macht es im Grunde genommen nur umso
ärgerlicher. Und es mag sein,
dass das viele Entwicklerinnen und Entwickler,
die mit C Sharp arbeiten, überhaupt
nicht stört. Muss ich sagen, ja.
Weil sie einfach nicht mehr mit Yield arbeiten.
Aber bei uns war bzw.
bei uns ist das der Fall.
Und dann ist so eine künstliche und im Prinzip
völlig unnötige Einschränkung halt
doch sehr lästig und führt
zu länglichem und schlecht lesbarem Code.
Das zweite Beispiel
für wieso zum Coco geht das nicht,
ist das komplette Fehlen von algebraischen
Datentypen in C Sharp. Man kann
nicht ausdrücken, dass eine Variable vom Typ
X oder Y ist. Zum Beispiel um eine
Liste zu definieren, die Werte vom Typ
String oder Int enthält.
Wofür braucht man das?
Ich glaube, genau
das, was er
jetzt sagt, geht nicht.
Aber
seit.NET 7
gibt es jetzt ja diese
neue Interface-Geschichte,
dass du zumindest mal
Listen und Typen definieren
kannst, die Zahlen enthalten.
Und dann ist es egal,
ob das ein Int ist oder ein Float
ist oder sowas. Das ist jetzt neu
seit.NET 7..NET 7
iNumeric
oder irgendwie sowas. Ich weiß gar nicht, wie das heißt.
iNumber oder sowas?
Ja, List Object, klar.
Das kannst du natürlich machen.
Das ist jetzt
übelst umständliches Beispiel,
aber okay.
Also du kannst jetzt,
die haben jetzt eine Reihe neue Interfaces,
sieht ja fast schon ein bisschen wie C++ aus,
die haben eine Reihe neue Interfaces,
wo du dann zum Beispiel so Sachen machen kannst,
wie eine Funktion, die sowohl
für Ints als auch
für Floats funktioniert
und solche Geschichten.
Da muss man sich mal gucken,
was es da alles gibt. Hab ich mir im Detail noch nicht angeguckt,
aber die sind da, die sind da
auf dem Weg,
dass sowas in der Richtung geht.
Wofür braucht man das denn?
Naja, überall da,
wo was dynamisch ist,
würde ich sagen.
Also, ich, wenn du...
Lass mal überlegen, was es gibt.
Irgendwo, wo du halt nicht weißt,
genau was der Input ist,
oder der Inhalt.
Zum Beispiel,
zum Beispiel Webrequest.
Du machst ein Webrequest, so.
Du möchtest jetzt 1000 Webrequests machen.
Es ist jetzt ein bisschen konstruiert das Beispiel,
mir fällt gerade nichts besseres ein.
Wahrgenommen, du willst 1000 Webrequests
machen
und willst die Antwort in der Liste
speichern.
So, jetzt kann es ja sein,
dass es mal
nicht geht.
Sag mal, 90% der Fälle
geht der Request durch und du kriegst
eine Antwort und dann speicherst du dir
den String vom Response
und gut ist. Aber es kann ja auch mal
sein, dass es nicht geht.
Vielleicht möchtest du einfach in der Liste
auch irgendwie
die String-Response
oder eben die Fehlermeldung
als Exception speichern.
Was auch immer. Dann bräuchts eine Liste, die Strings
und Exceptions nimmt oder sowas in der Richtung.
Oder mal angenommen, du bekommst
eine Antwort
von einer Api
und je nachdem
was für
ja, keine Ahnung
was du für ein Auto hast,
ist die Response unterschiedlich.
Also mal angenommen, du hast
eine Api, Get, Vehicle,
Status und du hast
ein Motorrad und dann sieht die Antwort
anders aus als die Antwort
bei einem Auto
und
da musst du das
irgendwie
dann JSON deserialisen
in eine Klasse und du hast da
eine Klasse für Auto und du hast eine Klasse für Motorrad
aber der Request ist der
gleiche.
Da kannst du jetzt nicht einfach sagen, hier
wir machen da eine
Liste mit Autos, weil
das können ja auch Motorräder sein.
So wirklich, so ein 100%
gutes Beispiel fällt mir, mal gucken, vielleicht
fällt mir eins ein.
Doch, doch, das könntest du machen.
Das könntest du machen.
Das könntest du machen.
Wobei es dann halt auch wieder,
dann hast du irgendwann mal so dieses Problem
mit
ist eine Ellipse ein Kreis
oder ist ein Kreis eine Ellipse und solche Geschichten?
Das ist wieder so ein typischer Fall von
ich kann mir durchaus vorstellen,
dass jemand ein Problem hat,
wozu er das braucht, mir fällt jetzt aber
aus dem Bauchhaus kein
richtig gutes Beispiel ein, mal gucken, was er dazu sagt.
Also wie gesagt,
dynamische Inhalte ist so eins, wo ich mir denke
ja, da kannst du das Problem haben.
Okay, er erklärt es jetzt
ja auch, was er für ein Problem hat.
...definieren die Werte vom Typ String
oder Int enthält. Wofür braucht man
das? Naja, wenn man zum Beispiel eine Liste
von Objekten über eine Http
API geschickt bekommt und diese
Objekte können von unterschiedlichen Typen sein.
Ist ja ein ähnliches Beispiel zu dem, was ich mir gerade
aus den Fingern gesaugt habe.
Die haben aber keine gemeinsame Basis-Klasse,
dann wäre es halt schon schön, wenn das ginge,
um nicht auf sowas wie Object
zurückgreifen zu müssen. In TypeScript
ist das zum Beispiel überhaupt kein Problem, dort gibt es
Union Types, mit denen man genau das
ausdrücken kann. In C Sharp hingegen
hat man da schlichtweg Pech gehabt.
Also ich muss euch ehrlich sagen, ich war jetzt
nicht
wissentlich in einer Situation bisher, wo ich
es gebraucht hätte, ich habe aber bestimmt
schon die ein oder anderen Male List
Object gemacht, weil ich vielleicht so ein
Problem hatte, es aber nicht realisiert habe.
Also ich kann die Kritik schon nachvollziehen.
Den Objekten zugrunde liegende gemeinsame
Basis-Klasse oder ein gemeinsames Interface
zur Not kann man sich da natürlich auch
mit einem Marker-Interface behelfen,
was dann allerdings ironischerweise
von der Code-Analyse angemarkert
wird.
Dass man doch bitte keine leeren
Interfaces definieren sollte.
Und wenn man das ganze Problem mit eingebauten
Datentypen wie String und Int angehen möchte,
dann gibt es überhaupt keine Lösung, weil die
schlichtweg keine gemeinsame Basis besitzen.
Aber Microsoft macht das schon.
Microsoft ist da schon
auf dem richtigen Weg. Wie gesagt,
mit.NET 7 gibt es jetzt diese Geschichte mit
iNumber und so was und noch ganz viel
mehr, was man sich auch mal im Detail angucken
muss.
Da tut sich was.
Ja, aber so richtige Union-Types
gibt es noch nicht. Sogar in C++
gibt es sowas. Das heißt schon was.
Gut, in C++ gibt es vieles.
Es gibt so vieles, dass keiner mehr versteht.
Was gibt's, Chet?
Eine Frage habe ich noch..NET nutzt ja
HTML-Attribute. Das ist Razor-Templates.
Benutzen das?
Verwende ich nicht. Keine Ahnung.
Razor-Templates...
Ich guck grad, wo ich das Emote
hab. Ich wollte so
ein Emote, wo es was auf die Tür zeigt.
Razor-Templates out.
Benutz ich nicht.
Ich habe keine Ahnung, wie
Razor-Templates funktionieren.
Wenn du mich fragst, gar nicht.
Ich würde was anderes benutzen.
Und das ist dann
aus naheliegenden Gründen doch eher
suboptimal, um es mal vorsichtig
auszudrücken.
Das dritte Beispiel für warum geht das
nicht? Und das hat mich wirklich schockiert,
denn das Problem besteht bereits
seit C-Sharp 2.0.
Das ist, dass man bei generischen Datentypen
tatsächlich immer noch mit Co- und
Contra-Variants zu kämpfen hat.
Und das generische Typen
oftmals immer noch einen Haufen
Probleme mit sich zieht.
Wir hatten ein ganz einfaches Szenario.
Eine generische Klasse namens
Event von T. Und T sind
irgendwelche Nutzdaten. Und was wir
haben wollten, war einfach nur eine Liste
von Events, die jeweils ein anderes
T haben können. Also quasi
eine Liste von Events von
Any. Und Überraschung, das geht nicht,
weil C-Sharp keinen Any-Typ oder so was
in der Richtung hat. Jetzt könnte man ja
meinen, man nimmt einfach List von Event von Object,
aber das klappt auch nicht. Da beschwert sich der
Compiler bei Konvertierungen. Und am Ende läuft
es dann tatsächlich auf List von Object hinaus.
Das heißt, die Information, dass es sich bei den
Listenelementen eigentlich um Events handelt,
die ist halt einfach weg. Und das war
wie gesagt in C-Sharp 2.0 schon ein Problem.
Und dass das heute, 16 Jahre später
in C-Sharp 10 immer noch haargenau dasselbe
Problem ist, das ist schon ziemlich traurig.
Bevor wir zum Abschluss zu meinem
persönlichen, wie gesagt, Highlight
oder Downlight kommen, kommen wir erst noch
zur vierten Kategorie, nämlich den
Alplasten. Es gibt so ein paar Dinge in C-Sharp,
die haben sich tatsächlich kein bisschen verändert,
die waren... Ja, wie gesagt,
da bin ich auch der Meinung, paar richtig, richtig
altes Zeug, oder auch so
im 5-Jahres-Rhythmus oder so, man könnte
durchaus mal was deprecateen und rausschmeißen.
Oder zumindest es standardmäßig
eben deaktivieren.
Dass die Leute halten
besseren Anhaltspunkt damit, okay,
was ist denn jetzt der Weg, wie man es machen sollte?
In C-Sharp 1 schon nicht besonders gelungen
und heute
wirken sie eigentlich umso mehr
aus der Zeit gefallen. Und das
erste, was mir in der Hinsicht aufgefallen ist,
ist iDisposable.
Da habe ich mich ernsthaft gefragt, wie es sein kann,
dass Microsoft innerhalb von 20
Jahren, die es C-Sharp nun gibt, das ist fast
ein Vierteljahrhundert, wie sie
nicht geschafft haben, zumindest
mal eine Alternative zu schaffen, die nicht ganz
so umständlich ist und die sich nicht ganz
so gruselig anfühlt. Das Gute
war, dass ich das, was ich vor 20 Jahren mal
gelernt habe, über Finalizer,
die Dispose-Funktion in ihren verschiedenen
Überladungen, die Garbage Collection
Klasse, Suppress Finalize und so weiter,
dass ich den ganzen Quatsch immer noch anwenden
konnte, aber das kann doch nicht
State of the Art im Jahr 2022 sein,
wenn ich in der Klasse Aufräumcode unterbringen will,
dass ich nach wie vor ausgerechnet
dieses Konstrukt umsetzen muss, was
kaum jemand und schon gar nicht aus dem Kopf
richtig umsetzt.
Gut, bei Rider ist das einfach, da sagst du
Implement iDisposable und er macht das für dich.
So wild,
muss ich ehrlich sagen,
sehe ich das nicht.
Ich finde das eigentlich
gar nicht so übel, wie das gemacht ist.
Du kannst iDisposable
implementieren, wenn du entweder
manuell aufräumen willst, zu
Haltpunkt x,
oder du setzt das in den Using,
dann weißt du am Ende des Blocks, wenn das
out of scope geht, wird es automatisch
aufgeräumt.
Das ist doch eigentlich
nicht schlecht.
Und wenn du willst, dass der Garbage Collector
das macht, dann musst du
ein Finalizer einbauen.
So schlimm finde
ich das eigentlich gar nicht, finde ich das eigentlich ganz gut.
Immer noch der gleiche Mist ist wie in C Sharp 1,
da fällt mir nicht mehr viel zu ein.
Und das tatsächlich Einzige,
was sich daran überhaupt geändert hat, ist,
dass man Using nun als Statement
statt als Blog schreiben kann.
Das ist das Einzige, was daran nicht schwierig
und kompliziert ist.
Aber toll, dass sich ausgerechnet da
etwas getan hat.
Das ist aber nicht das Einzige. Was ebenfalls
sehr stark von Altlasten geprägt ist, ist die Code-Analyse.
C Sharp gibt es nämlich anders, als
in so ziemlich jeder anderen modernen Sprache,
nicht einfach einen Linter, den man
über eine bestimmte Datei konfigurieren kann,
sondern es gibt eine ganze Reihe
von Regeln, die über die Editor-
Konfig-Datei konfiguriert werden.
Eigentlich sollte diese Datei ja
lediglich Editor-spezifische Einstellungen
enthalten und keine Regeln für
Code-Analyse, die projektweit gelten.
Ihr wisst, Chat, wir machen hier keine Tests
und keine Kommentare, weil wir machen
keine Fehler und deswegen braucht man natürlich
auch keine Analyse. So logisch.
Macht man das halt so, dann ist diese Datei
nicht wie sonst zehn Zeilen lang, sondern
500. Wenn das wenigstens die einzige Datei
wäre, die man anfassen müsste, dann wäre
das ja vielleicht noch zu verschmerzen,
aber zusätzlich muss man auch noch die Projekt-
Datei editieren, dort werden nämlich die Roslin
Analyzer konfiguriert. Das heißt, man
editiert von Hand... Ich mach das gar nicht,
wenn überhaupt, mach ich das,
wenn das
in Rider
gelbe,
ja,
gelb unterkringelt ist, dann mach ich
die Hilfe-Funktion auf und sag,
ah ja, ok, bitte hier hinzufügen.
... und eine XML-Datei
und spätestens
sehr nach Mitte der 90er Jahre
an. Allerdings ist das auch nicht
die einzige XML-Datei, die man bearbeiten
darf, wenn man nämlich möchte... Oder Rider
sagt mir, aha, ich sehe, sie verwenden
irgendwelche Logging-Frameworks, sollen wir jetzt
die Analyzer für Logging hinzufügen? Da sag ich, ja,
mach.
... Einstellungen für mehrere Projekte
innerhalb einer Solution gelten,
dann muss man zusätzlich noch eine Datei mit dem
tollen Namen directory-build-
props anlegen.
Microsoft und Benamung, das kannst du eh schon immer
vergessen. Und vergleicht man das alles
mal mit dem, zum Beispiel
mit es-lint für JavaScript oder TypeScript,
dann liegen halt zwischen diesen beiden ansetzten Welten
und das leider nicht zu Gunsten
von C-Sharp. Und damit
kommen wir zur Fün... Dafür braucht's
den Java-Script ist odd und ist even
und musst einen NPM für installieren.
Das waren alles meine
Vor-Nachteile. Oder du musst
sowas ekliges wie Webpack verwenden.
Ich hätte wetten können,
dass das kommt.
Ja.
Die
JSON-Unterstützung ist mittlerweile
besser, aber die haben
halt lange Zeit, lange Jahre nichts gemacht.
Es gab jason.net
und
das
konnte einfach alles,
was man so gebraucht hat. Und
Microsoft hat es selbst verwendet.
Irgendwann haben sie dann den Creator
von jason.net eingestellt
und
jetzt haben sie einen eigenen JSON-Serializer
und die Serializer im
Framework. Der ist mittlerweile
system.txt.json
ist das jetzt?
Der ist ganz
okay mittlerweile.
Aber ich muss ehrlich sagen, ich verwende
am liebsten immer noch jason.net.
Ja, das da hat er recht.
Das haben die
lange stiefmütterlich behandelt.
Und eigentlich fängt das Ganze zunächst
auch ganz vielversprechend an.
Wenn man sich zum Beispiel den ASP.NET Core mal anschaut,
wie die Minimal API das Thema umsetzt,
dann geht da schon einiges. Aber das Ganze
funktioniert halt nur so lange gut,
wie man es lediglich mit 0.8.15 Datenstrukturen
zu tun hat. Sobald es nämlich
Variants in der JSON-Struktur geben
kann, fangen die Probleme an.
Und da sprechen wir noch nicht über besonders ausgefallene
Situationen, sondern über
eigentlich sehr einfache und vor allem auch
durchaus gängige Patterns, die sich
aber in C Sharp als riesen Problem erweisen.
Zum Beispiel, ich möchte als
Payload ein Objekt schicken, aber je nach
Kontext hat das Objekt die eine
oder die andere Struktur. Ganz
einfach. Ganz einfach.
Gar nicht parsen. Einfach
Dynamic benutzen.
Und das sich rausholen,
was man braucht.
Okay, ich gebe zu, die schönste
Lösung ist das nicht.
Das ganze Typ sicher und mit IDE-Support
wäre natürlich besser. Aber wenn gar nichts hilft,
das einfach Dynamic machen und
das rausziehen, was man
braucht und dann in eine Klasse
schreiben, die die ganzen Daten
beinhaltet.
Ein Feature namens polymorphische
Deserialisierung. Und das
kann doch nicht einfach nicht. Wow, high IQ.
Und der Grund dafür ist relativ einfach.
Man müsste dafür nämlich in der Lage sein,
einen Typen zu definieren, der wahlweise
einer von zwei Strukturen entspricht.
Das geht ja nicht, haben wir ja gerade gelernt.
Das ist gar nicht so abwegig, wie das zunächst vielleicht mal klingt.
Das ist in der funktionalen Programmierung
durchaus gängig und das Konzept dahinter,
das habe ich vorhin schon mal erwähnt, nennt sich
algebraischer Datentyp.
Da war doch aber vorhin auch schon genau,
was das C-Sharp halt das
einfach nicht kann, dass das das nicht unterstützt.
Und da kommt dann ganz schnell der Hinweis,
dass man für JSON-Parsing doch lieber
JSON.NET von Newtonsoft als
externe Bibliothek. Ja, benutze ich auch am liebsten.
Klar, das kann man auch machen, aber mal
im Ernst. Was ist das denn für eine Plattform,
wo ich im Jahr 2022 eine externe
Abhängigkeit benötige, um
JSON vernünftig parsen zu können?
Da findest du in Go aber auch
ja, er hat Recht, das macht
C-Sharp nicht besser.
Da hat Go allerdings auch so seine Dinge.
Wie gesagt, warum muss ich in Go zwei
Nested Schleifen machen, um irgendwie den Array ordentlich zu
filtern und sowas. Gibt alles
mögliche. Kannst dich bei allem irgendwie
in mehrere Richtungen beschweren.
Ich persönlich mag JSON.NET,
einfach weil ich es Jahre schon verwende
und länger als die Default Implementierung.
Dass es nicht in der Standard Library
ist, sagen wir, dass
ein nicht so umfangreicher
JSON Serializer in der
Standard Library ist. Ja, gut,
ich kann die Kritik verstehen. Es wird besser.
Es wird besser.
Du hast Recht, man braucht gar nicht zwei
Nested. Brauchst nur eine normale Schleife,
nicht zwei Nested Schleifen.
Brauchst du nicht.
Wieso kann.NET das nicht von Haus aus
auf eine vernünftige Art?
Das ist aus meiner Sicht ein völliges
... Ja, das mag ich mich bei JavaScript und Go auch bei
vielen Sachen, aber das kannst du nicht
in alle Richtungen kannst du das
drehen und wenden. Ja, da hat schon Recht.
Warum ist das in C-Sharp so?
Könnte sicherlich besser sein.
Könnte aber auch deutlich schlechter sein, wenn man mal
zu C++ guckt, die ja bis heute nicht mal
Webrequest in der Standard Library machen können.
Hat alles seine Vor- und Nachteile.
Das zeigt einfach, dass.NET an manchen
Stellen nicht auf der Höhe der Zeit ist.
Ja, ist so.
Ja, natürlich. Wie gesagt,
kannst du dir irgendwie so
in jeder Sprache Dinge raussuchen.
Ist in dem Fall schon so.
Hat er ja schon Recht, so ist das net.
Das Standard Jason
Handling im Framework
konnte durchaus besser sein.
Gab es ja bis zu.NET 6, glaube ich,
gar nicht richtig. Ich weiß nicht,
wann die System-
Texts Jason eingeführt haben, ob es.NET
5 oder.NET 6 war. Ist auf jeden Fall
noch nicht so lange her. Ich glaube,.NET 5 war es
quasi unbenutzbar.
In.NET 6 wurde es besser und in.NET 7
haben sie es ja noch ein bisschen besser gemacht.
Ich verwende jason.net ganz gern.
Das gibt es auch schon länger.
Kommt damit eigentlich gut klar, aber
könnte durchaus
in der Standard Library was besseres sein.
Das ist kein Spezialfall, der nur einmal
in fünf Jahren vorkommt, sondern über die
Basis dessen, wie HTTP-APIs
heutzutage funktionieren.
Das Allerschlimmste an der ganzen Sache
kommt aber erst noch. In der MSDN steht
nämlich wortwörtlich, dass das
polymorphische Deserialisieren mit
Wortmitteln von.NET nicht möglich sei.
Und das Traurige ist, das ist falsch.
Es geht nämlich sehr wohl,
wenn man die Klasse System-Text-
Jason-Nodes-Jason-Node verwendet.
Obviously. Und sich mit der GetValue
die Parse-Methode von Hand
von Property zu Property durchhangelt.
Denn man kennt die Struktur ja.
Man weiß ja, was man erwartet.
Das ist ja nicht irgendwas. Ja gut.
Da kann man aber auch einfach Dynamic verwenden, oder?
Liebig ist, es gibt einfach nur
verschiedene Möglichkeiten, was da kommen kann.
Wenn man es so halbwegs
typ-sicher haben will, kann man es auch
deserialisieren
in ein Objekt,
soweit man es weiß.
Und ab dort, wo man es nicht mehr weiß,
kann man es eben dann als J-Object
oder ab dann Dynamic weiter.
Das geht ja auch.
Ob man dann direkt Dynamic da drin dann wiederum machen kann,
weiß ich nicht. Aber du kannst auf jeden Fall
ein J-Object nehmen,
wo du dann mit Array-Syntax auf die
unterelemente zugreifen kannst.
Oder halt direkt Dynamic nehmen.
Aber gut, man könnte es schöner machen.
Für Stück parsen.
JavaScript und TypeScript überhaupt kein Problem,
ist das klar. An der Stelle allerdings
meiner Meinung nach ein sehr schwaches Argument.
Denn dort kann man ja auf ein dynamisches
Typ-System zurückgreifen, was C-Sharp nicht kennt.
Insofern lässt sich das dort naturgemäß
weitaus einfacher umsetzen. Aber,
und das ist dann der Punkt, wo ich bei.NET aussteige,
warum das in Go,
was ja wie C-Sharp ebenfalls ausschließlich
ein statisches Typ-System kennt,
mit zwei Zeilen Code erledigt ist,
und in.NET ein riesiges Problem
darstellt, was zu hunderten
Zeilen Code führt, das erschließt sich mir nicht.
In Go ist das einfach derart gelöst,
dass man beim Parsen von Jason festlegen kann.
Na, Go hat auch schon so ein bisschen
Magic-Sachen.
Also gerade diese Sache,
wenn du Structs in Go definierst
und dann kannst du ja dahinter schreiben
als String,
in so komischen Backticks
irgendwie,
was es da wie wo genau machen soll,
ist auch schon ein bisschen Magic dabei.
Dass nur bis zu einer gewissen
Ebene geparsst wird und der Rest einfach
als Raw Jason zurückgegeben wird.
Und dann kann man zum Beispiel abhängig von dem
bereits gepaarsten Teil entscheiden,
wie und was das ist.
Also das funktioniert. Du kannst
eine Klasse machen in
C-Sharp. Ja, keine Ahnung.
Was war ich hier? Public Class
Response
oder so.
Gehen wir mal davon auf, wir verwenden
jason.net. Und da drin
gibt es jetzt, boah, ich will das nicht
alles von Hand schreiben. Wir machen das einfach so.
So, da drin gibt es jetzt StringName
und String,
keine Ahnung, Age
oder sowas.
Und da drunter gibt es dann irgendwie noch
ein j
Object
Details
oder sowas. Das geht.
Du kannst das, du kannst das
das hier parsen lassen, deserialisieren
lassen.
Dann füllt er das mit allem,
was du haben willst, an der Stelle.
Und den anderen Kram macht er
halt als jObject, wo du dich
dann quasi lang hangeln musst.
Ich mach nix in Visual Studio Code, das ist ja bloß
Beispiel. Ich hätte auch Notepad
verwenden können.
Normalerweise würde ich dann quasi sagen Response
Punkt Name, wäre alles okay.
Und hier müsste ich dann sagen Detail
und dann, je nachdem, was es ist,
was dann
dann auch immer drunter kommt.
Also ich root
keine Ahnung.
Socken.
Also das, das, das, das geht
schon. War nicht so schön wie in Go,
daher gebe ich ihm ja recht.
Warum es dafür in.NET
nicht von Haus aus eine vernünftige
Abstraktion gibt, sondern warum ich das alles
von Hand machen muss, wie gesagt,
das erschließt sich mir überhaupt nicht. Und das ist so
ein Punkt, wo ich mir denke, das
kann es irgendwie nicht sein. Das ist tatsächlich
schlecht umgesetzt.
Ja, wenn man das
alles jetzt mal zusammennimmt, dann wird vielleicht
klarer, warum ich gesagt habe, dass ich auch nach
zehn Jahren, in denen ich mich nicht mit C-Sharp
und.NET beschäftigt habe, relativ schnell
wieder mit der Sprache und der Plattform
zurechtgekommen bin. Aber warum ich
auch sage, vieles fühlt sich einfach nicht
mehr gut an. Beziehungsweise vieles
fühlt sich einfach nicht mehr zeitgemäß an.
Und da ist, wie gesagt, gerade das Jason
Parsing ein unglaublich gutes Beispiel.
Und da schneiden C-Sharp und.NET
im Vergleich zu anderen Sprachen und Plattformen
extrem schlecht ab.
Aber das ist eben nur ein Beispiel. Das ist sozusagen
nur die Spitze des Eisbergs. Als wir im Frühjahr
angekündigt haben, zukünftig
auch Go zu nutzen, kam ebenfalls
relativ häufig die Frage auf,
warum wir uns denn nicht für.NET entschieden hätten.
Und ich glaube, diese Frage habe ich jetzt
heute ausreichend beantwortet. Und natürlich,
das muss man der Fairness halber noch
dazu sagen, ist auch in Go
oder auch in JavaScript oder...
Ich denke immer auch, weil er wahrscheinlich noch ein bisschen angepisst
von Microsoft ist.
Auch dort gibt es Stolperfallen und Dinge,
die unlogisch oder inkonsistent sind.
Aber insgesamt finde ich, dass man
C-Sharp sein Alter halt leider doch sehr
anmerkt, weil es die vor 20
Jahren eingeschlagenen und inzwischen
vorgetrampelten Pfade nicht verlässt,
sondern an zu vielen Stellen im Gestern verharrt
und zwar irgendwie versucht neue Dinge
aufzugreifen. Finde ich gar nicht mal so
extrem. Also die legen
in der Entwicklung, wie gesagt,
ist ja schon richtig, was er sagt.
Das ist alt. Und für das, dass die Sprache
so viele Jahre auf den Buckel hat,
legen die echt ein beachtliches
Tempo vor mit ein
Jahr pro Release.
Ich fände es auch besser, wenn man manche Sachen
fertiger machen
würde, wenn sie reinkommen.
Auch wenn es zwei, drei Jahre länger dauert.
Dabei aber halt auf den roten Faden verzichtet.
Insgesamt immer mehr zu einem
zusammengewürfelten Stückwerk wird,
wo von Version zu Version einfach nur
noch mehr neue Schlüsselwörter hinzukommen
für Spezialfälle. Und das ist eigentlich
sehr schade, denn ich bin ja wie gesagt mit C-Sharp groß
geworden. Und gerade die Konsistenz,
die innere Schlüssigkeit, das war
mal die große Stärke von C-Sharp.
Und davon ist irgendwie nicht allzu viel
geblieben. Und um es nochmal zu sagen,
ich habe es am Anfang schon gesagt, aber es geht
mir nicht darum, C-Sharp niederzumachen.
Dieses Video ist einfach nur die Sammlung von
den Punkten, die mir in den vergangenen Monaten
an C-Sharp immer wieder negativ
aufgefallen sind und die man vielleicht auch nur
dann als so störend empfindet, wenn man weiß,
wie es in anderen Sprachen aussieht,
wie die Welt sein könnte. Und da das
immer wieder gefragt wurde, haben wir
das eben in diesem Video zusammengefasst.
Er hat ja
viel erzählt, das kann ich...
Das meiste ist valid, würde ich sagen, das kann ich schon
nachvollziehen.
Vielleicht stört mich auch vieles nicht,
weil ich es halt eben öfters verwende.
Ich denke unterm Strich kann man sagen, das hat alles so
seine Vor- und Nachteile. Es gibt auch genug, was mir
ein Go auf den Keks geht.
Es gibt genug Sachen auch, die mich an C-Sharp
nerven.
Insgesamt, und wir haben
im Stream schon alles Mögliche gemacht, ja,
von
WebAssembly, C++,
.NET, teilweise sogar ein bisschen
Rust, alle möglichen Sachen. Wir haben uns wirklich schon
viel angeguckt, also ich denke, man kann sagen,
wir haben da hier einen breiten Einblick
in vielen Sprachen gehabt.
Für mich persönlich
ist C-Sharp
immer noch die Sprache, wo ich
am besten mit zurecht komme und am liebsten Sachen
drinne mache. Neben Ruby
vielleicht, was ja
nicht mehr so richtig angesagt ist.
Leider, nachdem Rails so
abgekackt ist.
Boah, Alter, Wall of Text, Mann.
Aber ich kann es nachvollziehen.
Man muss ja auch nicht bei der
gleiche Ansicht sein.
Jeder hat so seine Vorzüge
vor vorzugten Sachen.
Was ist das Memereview?
Jetzt nicht.
Java Script for the Haters.
Ja, das können wir uns tatsächlich angucken.
Wir gucken jetzt in der Runde Fireship an.
Geht schon wieder hier los.
Rust ist doch ein Game, auch.
Aber Rust ist auch eine Programmiersprache.
Es ist denen aber auch aufgefallen,
dass es keine allzu gute Idee ist,
dass die Sprache
nur Rust heißt, deswegen
macht man da oftmals
auch Language oder sowas dahinter,
dass es nicht
doppel ist. Es war eine Zeit
lang so, dass, wenn man
Reddit Rust gesucht hat,
dass das Game zuerst kam.
Mittlerweile, wahrscheinlich
auch, weil Google gelernt hat, was ich mir
hauptsächlich angucke,
kommt tatsächlich die Programmiersprache
zuerst.
Ja, Go ist komplett lost.
Nach Go kannst du überhaupt nicht suchen
mit einfach nur Go.
Selbstverständlich ist bei Go ähnlich.
Bei Go stand lange Jahre immer, bei allem
written in Go, wobei das ein bisschen
abgenommen hat, aber in Rust ist das ganz
schlimm. In Rust ist wirklich
der 500.
LS-Nachbau.
Written in Rust.
Amazingly fast.
Ok, wir gucken jetzt Javascript vor der Haters an.
Was macht Himen da?
Ja gut.
Wisst ihr, warum das in sieben Tagen entworfen
wurde Javascript? Das haben wir sogar letztens
in einem Video gesehen, weil die eben gesagt
haben, er soll mal eine Programmiersprache,
also so eine Skriptingsprache in den Browser
machen, die wird aber später eh nicht
benutzt.
Nur zu Demozwecken, bau mal irgendwas ein,
die wird später eh nicht benutzt.
Tja.
Und jetzt haben wir Javascript.
Ja und jetzt hat er Deno am Start.
Richtig.
Das ist wichtig.
Amazingly fast. Aber
Amazingly fast können eigentlich nur Rust-Programme
sein.
Wie wärs denn was mit
Insanely fast?
Hab ich jetzt selten gehört.
Insanely fast.
Man gibt doch bestimmt noch irgendwelche Steigerungen
davon.
Ohje.
Twitter ist schon unterwegs.
Ok, ja es ist Javascript.
Javascript ist doch die einzige Sprache, wo du so viele Dinge
machen kannst.
Wir wissen ja, was
not a number plus not a number ist in Javascript,
oder?
Wer weiß es, was ist not a number plus
not a number?
Falsch. Falsch. Falsch. Das ist Falsch.
Das ist halt
Javascript.
Das ist Javascript.
Das ist Javascript.
Ja, Javascript passt
eigentlich gut jetzt
als Ergänzung zu letztem.
Es hat alles seine Vor- und Nachteile.
Pech. Lange ist es.
Kurz davor.
Jetzt wissen wir Bescheid.
Haben wir noch was, was wir uns geben können?
Ich bin blind.
Watercooling my house.
Das ist ein guter Channel,
wer sich ein bisschen mit
.net und C-Sharp beschäftigen will.
Nichts, was wir hier im Stream gucken müssten,
aber der macht gute Videos.
Der GameStar Test zu Warzone 2.
Da bin ich ja tatsächlich mal
gespannt, was die GameStar dazu sagt.
Wir hatten das
Manscaped Bewerbung, alles klar.
Wir hatten das.
Ja, der Titel ist nicht schlecht,
aber ich bin sehr gespannt,
was in dem Zustand des Games geht.
Schau dir nochmal sowas Langes an.
Muss richtig viel repetitive Arbeit machen.
Grad ist perfekt für den Ball.
Ich bin nicht mal lange da.
mal eins an. Wer? Na toll. Bei der Musik, ah ja. Okay, hab ich noch nie gehört. Was
bei der Musik geht? Pepo Dance geht da gerade ab. Das ist wirklich ein guter Soundtrack von dem
Game. Crypt of the Necrodancer. Das ist ein uraltes, 2015, das ist ein uraltes Game. Ein
guter Ding auf No Man's Sky, das haben wir schon geguckt vor drei Jahren oder so,
als das rausgekommen ist. Okay, komm, wir gucken uns jetzt an, was die GameStar zu Warzone 2 sagt.
Immer gespannt. Mein Eindruck von Warzone war ja kurz und knackig. Ich hab nicht viel gespielt,
hab auch überhaupt keinen Bock mehr drauf. Tommy, nur für dich. Du meinst das hier. Das
hier willst du hören, oder?
Ein Durchgang, hören wir uns an. Also nicht zehn Stunden, sondern ein Durchgang des Songs.
Zehn Stunden, hören wir uns nicht an. Okay, einmal durch. Banger, richtiger Banger. Okay,
also was sagt denn die GameStar zu Warzone? Zeig mal her. Kommen wir uns jetzt mal an. Schauen wir mal.
Warzone 2 ist im Grunde genauso gestartet. Das Warzone Grill. Wieder Multiplayer von
Modern Warfare 2 und davor auch die Singleplayer Kampagne vom 2022. Nee,
das ist Petra Schmitz. Die ist uralt bei der GameStar schon dabei. Ich will nicht sagen,
nein, sorry, ich will nicht sagen, die ist uralt. Die ist schon sehr lange bei der GameStar dabei.
Ich glaub, so alt ist die gar nicht. Wahrscheinlich ein bisschen älter als ich oder so. Die ist schon
ewig bei der GameStar dabei. Als ich die GameStar abonniert hatte, gab's die schon. Die ist uralt,
also bei der GameStar. Das wollte ich damit sagen. Schon richtig lange dabei. So lang nicht im
direkten Vergleich mit Battlefield 2042. Der Gulag mit zwei Leuten hat mir überhaupt nicht
gefallen. Und auch ansonsten technisch wirkt das sehr holprig noch. Übrigens,
könnt ihr euch dran erinnern, wir haben doch letztens ein Video geguckt. Hier, von ihm. Haben
wir doch letztens ein Video geschaut. Nicht dice please nerf. Wir haben so letztens ein Video
von ihm angeschaut zu Warzone, wo er richtig über die Entwickler hergezogen hat. Und guckt mal,
das Video ist weg. Ich weiß nicht, ob er das Video selbst gelöscht hat oder ob das Leute,
ob das irgendwelche Warzone-Fanboys gemeldet haben und es wurde gesperrt. Keine Ahnung. Würde
mich echt mal interessieren. Wir haben Warzone 2 in den letzten Tagen hoch und runter gespielt,
uns über furchtbare Menüs, Performance-Probleme und Interface-Pucks geärgert und dennoch zahlreiche
spannende Gefechte erlebt. Neuerungen wie der Proximity-Chat, mit dem wir die Stimmen
unserer Gegner in der Nähe hören können, sorgen für Überraschung, Panik. Massive Controller Auto
Aim, nice. Erfolgreichen Kills auch mal für Schadenfreude, sofern man diese Funktion aktiviert
hat natürlich. Und der neue DMZ-Modus bringt vielleicht Spieler und Spielerinnen zum ersten Mal. Hat mir
auch nicht, ganz ehrlich, DMZ hat mir überhaupt nicht gefallen. Ich habe Bots gekillt, auf einmal
sehe ich im Killfeed, das war ein echter Gegner. Also so Modi, wo das gemischt wird, ich weiß nicht,
ist nicht meins. Vielleicht ist es ja super High-IQ-Spielmodus, ich habe die Generalität noch
nicht gecheckt, kann sein. Mein Fall war es nicht. Den Kontakt mit dem Extraction-Gameplay von Genre
Hits wie Hunt Showdown oder natürlich Escape from Tarkov. Leute, Hazard Zone. Wer weiß,
vielleicht wird DMZ sogar das Sprungbrett, das dieses Genre braucht, um mal so ganz groß durch
zu starten. Ich weiß das. Wenn die Entwickler herausgefunden haben, wohin die Reise damit gehen
soll, denn aktuell ist DMZ noch in einer Beta und das zu Recht. Aber fangen wir doch mal mit
Warzone 2 und seiner gigantischen Karte an. Nach Verdansk und Caldera, die ersten Warzone,
geht es dank Almazra in Warzone 2 nun in die Wüste und die ist riesig und gar nicht so...
Endlich! Ich war nehme ich doch nie in einer Wüste. Öde, wie man beim Wörtchen Wüste
zunächst meinen sollte. Auf der Karte finden wir x kleinere und größere Siedlungen mit Almazra City,
sogar eine recht moderne Ortschaft inklusive Hochhäusern, wobei weitem nicht so viele Sniper
rumlungern, wie man das vielleicht vermuten würde. Denn, und das ist in diesem Fall Segen und Fluch
zugleich, die Häuser sind nicht nur als Häuser getarnte Türme, sie haben auch Stockwerke,
verschachtelte Gänge, Aufzüge, viele kleine und große Räume. Allein die Fläche, die dadurch in
dieser City entsteht, ist riesig. Da verlaufen sich die Spieler schon mal und Sniper können
gefühlte Wochen auf den Dächern rumlungern, ohne auch nur einen Gegner zu sehen. So ist halt Battle
Royale Gameplay. Da kannst du theoretisch, wenn du Glück hast mit der Zone, auch mal 20 Minuten auf
einem Flag liegen und dir passiert nichts. Du reißt aber auch nichts. Und diese süde Wahrheit lässt
sich auf viele andere Abschnitte der Karte übertragen. Was uns nun wieder mal wünschen lässt,
es würden nicht nur 150, sondern 200 Menschen Platz in einer Partie finden. Insbesondere wenn
man in einer Partie landet, in der sich nicht nur ein großer Kreis von Beginn anschließt,
sondern zunächst drei separate, die erst später miteinander verschmelzen. Dann kann es passieren,
dass man in seinem Kreis nahezu alleine unterwegs ist. Hallo, ist hier jemand? Besser? Hey, Leute,
ich erinnere nur mal an den Halo Battle Royale Modus, wo der Endkreis noch nicht mal random ist
und so gelegt ist, dass du teilweise im Aussitzen, also fast im Aussitzen kannst, wo keiner zu dir
kommen kann und sowas. Also das ist das hier ja mal richtig high IQ dagegen. Mr. Moogame,
Dankeschön für den Sub. What the fuck? Okay, die schiere Größe der Map und die Zufallskreise
haben auch Vorteile. Nämlich für alle, die es lieber ruhig angehen, für alle die Gefechte
lieber vermeiden, als sie zu suchen, um sich erst einmal in Ruhe auszurüsten. Das ist auch
so ein Ding, wo ich bedenke, und das war teilweise im ersten schon so, dass diese Dinge, aber wer
hat sich gedacht, das sieht gut aus. Aber irgendwann wird auch diese Spieler und Spielerinnen das
Schicksal in Form der Gaswolke ereilen, die die Karte schrumpfen und damit Auseinandersetzung
unausweichlich werden lässt. Was ich meine, naja guck mal, diese weiße Kontur, das sieht einfach
kacke aus. Das sieht aus wie nicht richtig geladen. Auseinandersetzung unausweichlich werden lässt
Battle Royale eben. Wer aber nun von Warzone 1 rüber gemacht hat, wird sich nicht nur in Sachen
Kreismechanik und Webgröße umstellen müssen. Das neue Loadout-System hat nämlich auch so seine
Tücken. Das stimmt, ich verstehe, dass ganz viele Warzone-Spieler das Loadout-System Scheiße
finden, weil sie halt sagen, ok, bei Caldera, wie gesagt, ich habe nur Verdant gespielt, ein
bisschen als es rausgekommen ist, wie es auf Caldera war mit dem Loot, weiß ich ehrlich gesagt nicht,
ich gehe mal davon aus ähnlich. Dass sie das Scheiße finden, verstehe ich, früher hast du
dein Loadout gecalled, nach einer Weile, da hat es seine Klasse und alles war gut. Es macht das
Ganze aber etwas Battle Royaleiger, mit dem mehr Looten und an den Stationen erstmal noch die
Primary Waffen kaufen können. Dass es jetzt diese Bot-Base-Dinger da gibt, mit Quests quasi für
das Loadout, ja, durftest du das brauchen? Das macht es zumindest etwas Battle Royaleiger,
mit dem Looten finde ich. Während man in Warzone 1 nach ein paar Minuten mit einem privaten Loadout
Drop mit zuvor hochgelevelten, akribisch zusammengestellten und optisch personalisierten
Waffen sowie Gadgets und Perks rechnen konnte, muss man sich nun anstrengen, um an den Krempel zu
kommen. Es gibt zwei recht gefährliche Möglichkeiten. Erstens, man wartet, bis die
Map sogenannte Strongholds ausweist. Diese Festungen sind von zig irrsinnig gut treffenden
und teilweise ekelhaft gepanzerten KI-Soldaten bewacht. Die Mischung finde ich auch nicht gut.
Ganz ehrlich, Bots passen da irgendwie nicht rein. Also das, was ich bisher davon gesehen habe,
hat mich nicht überzeugt. Dass an den Festungen aber nicht nur zig KI-Soldaten und man selbst drum
hängt, dürfte nachvollziehbar sein. Immerhin ist eine Festung mal offen. Ja und du siehst
auf den ersten Blick noch nicht mal, wer Gegner ist und wer Bot ist. Klar, am Movement und
letztendlich wahrscheinlich erkennst du es auch ganz gut, wenn du da einen Blick für hast an der
Optik. Aber für mich als Noob, der es noch nicht viel gespielt hat, ich habe erst mal gedacht,
ja wie? Ach, das war jetzt ein echter Gegner. Ist mir erst mal gar nicht aufgefallen. Ist mir erst
nach dem Kill aufgefallen, dass es ein echter Gegner war. Und sich bedienen, sofern sich der Kreis
nicht schon zu weit geschlossen hat. Aber die Design-Entscheidung, starke KI in ein Battle Royale
zu packen und sie obendrein noch ans eigene Loadout zu koppeln, sorgt wesentlich öfter für Frust
als für Spielspaß. Okay. Zweitens, im letzten Drittel einer Partie fallen dann auch Loadout-Drops,
die allerdings alle Spieler plündern können. Auch hier nachvollziehbar, dass man nur selten
die Chance bekommt, sich dort unbehelligt zu bedienen. Alternativ kann man immerhin noch
seine Primärwaffen aus seinen Custom-Loadouts an den typischen Kaufstationen erstehen,
sofern man zuvor genug Kohle eingesammelt hat. Aber das wundervolle, wenn auch trügerische
Gefühl der Sicherheit, das mit dem eigenen Krempel kommt, wird man als normalsterblicher
trotzdem vergleichsweise selten erleben. Also nur logisch, dass das eigene Loadout auch im
Pre-Match keine... Mal gucken. Sie haben ja in Warzone 1 auch die ein oder anderen Anpassungen
gemacht. Vielleicht kommen sie den Warzone-Fans noch ein bisschen entgegen. Und eine Sache,
die ich auch schon bei Verdansk nicht hübsch fand, ist, die Map ist zwar groß, die Map ist
spielerisch sicherlich auch für Battle Royale gut gemacht und in gewisser Weise auch ein
bisschen abwechslungsreich mit den unterschiedlichen Arealen. Aber eins muss man echt sagen, wirklich
schön fand ich Verdansk nicht, Caldera, keine Ahnung, habe ich nicht gespielt und schön
finde ich jetzt auch die Map nicht. Da muss ich sagen, da fand ich fast die... Wie hieß
das Ding? Weiß noch jemand, wie der Kram in Black Ops hieß? Die ja quasi zur Hälfte
aus alten Black Ops Maps bestanden haben. Also da fand ich tatsächlich die Map in diesem
Black Ops Battle Royale, ich rede nicht vom Gameplay, rein von der Optik her, sogar noch
irgendwie schöner. Also vom Hocker reißen die mich nicht. Gut, dass große Maps noch
liebloser sein können, sieht man bei Battlefield 2042. Blackout, ja. Hier sind ja auch, sieht
man ja, das ist ja auch eine MW2 Map, wo man da gerade drauf ist. Es sind viele Stellen,
sind alte Maps, aber so die Verbindungen dazwischen, es sieht irgendwie nicht, weiß nicht, es sieht
jetzt optisch nicht so ansprechend aus, da ich sage, oh das ist aber eine schicke Map.
Über Abschüsse im Pre-Match, wer aber hofft hier seine Lieblingswaffe gezielt hochspielen
zu können, schaut in die Röhre. Das ist insbesondere für Free-to-Play-Spieler doof, die nicht schon
im Multiplayer von Modern Warfare 2 ihre bevorzugten Waffen hochleveln konnten. In diesem Kontext
die Frage, ist das für ein Free-to-Play-Spiel der richtige Ansatz? Warum sollte ich Kohle
in Fancy-Waffen-Blueprints und Co. investieren, wenn ich den Kram ohnehin nur alle 3-4 Matches
zu Gesicht bekomme? Gute Frage. Ihr mutmaßen, dass Activision hier über kurz oder lang
noch einmal anpassen wird, sowohl in Sachen Pre-Match als auch beim Loadout-System. Nun
ja, wer seinen Kram gar nicht oder erst sehr spät im Spiel bekommt, der muss wirklich
noch Money optimiert werden. Wie gesagt, das macht es insgesamt etwas Battle-Royaliger,
dass man nicht so direkt nach dem ersten Drittel auf jeden Fall seinen Loadout am Start hat.
Ja, kann man jetzt gut finden oder nicht? Ich verstehe, dass es viele alte Warzone-Spieler,
also die letzten Teil lange gespielt haben, nicht gut finden. Ich könnte mir aber wiederum
vorstellen, dass viele Battle-Royal-Liebhaber an sich das mögen werden.
Nicht mehr nur in den typischen Kisten oder einfach auf dem Boden, sondern auch in Regalen
oder gar Schränken. Das vermittelt einen mild gesteigerten Realismus gegenüber dem
ersten Warzone. Das Spiel versucht sich auch andernorts an Realismus. So verbrauchen Fahrzeuge
oder Helikopter oder Boote Benzin und müssen wieder aufgetankt werden, sobald sie leergefahren
sind. Kommt selten genug vor, ist aber drin. Und auch die Batterie des Herzschlag-Sensors
leert sich nun nach und nach, was durchaus ärgerlich am Ende einer Partie sein kann.
Und wie füllt man die wieder auf? Gar nicht neues Attachement einsammeln oder wie?
Noch einen zweiten Sensor im Gepäck. Warzone 2 arbeitet nun mit zusätzlichen Rucksäcken
in unterschiedlichen... Ja, macht es auch ein bisschen Battle-Royaliger.
Wie gesagt, das ist das, was mich hier die Leute nach dem Tag gefragt haben, was ich
davon halte. Das Erste, was mir eingefallen ist, ist, dass das durch viele Sachen eben
etwas mehr klassischer Richtung Battle-Royal geht. Auch mit dem Inventory und dem Looten
und dass du nicht direkt ein Loadout hast. Es ist ein Hauch mehr Battle-Royal als die
letzten Warzones. Im Grüßen. Als das letzte Warzone, aber es sind ja im Prinzip trotzdem
mehrere Ausgaben davon gewesen. Darin kann man beispielsweise eben einen zweiten Herzschlag-Sensor
packen, Munition oder auch aufgesammelte Killstreaks. So toll das ist, so fummelig kann es in der
Hitze des Grafenflieger werden, sich die Rosinen aus den Hinterlassenschaften anderer zu glauben.
Ja, das war vorher noch schlimmer. Das war ja vorher noch schlimmer. Da hast du immer
Sachen aufgehoben, die du nicht haben wolltest. Wenn Waffen nach einer zünftigen Ballerei
auf dem Boden rumliegen und man etwas aufheben will, passiert es gerne mal, dass insbesondere
Rucksäcke die darunter liegenden Waffen blockieren. Das muss dringend entschlackt beziehungsweise
entbackt werden. Null. Damit nix entbackt. Wer in Warzone 2 den Löffel abgibt, wandert
nach wie vor in dem Spiel. Die Leute haben sich dran gewöhnt, also die Entwickler dort
haben sich dran gewöhnt, dass sich die Spieler so mit half-assed, halb-fertiges Zeug zufrieden
geben. Die werden da nichts verbessern, solange es nicht negative Auswirkungen irgendwie auf
das Spiel und letztendlich auf das Geld hat. Solange die Spieler da spielen, bauen die
lieber neue Sachen und verschwenden ihre Zeit darauf, als Sachen zu fixen, wenn die Spieler
doch das akzeptieren, dass es kaputt ist. Ja, das hat mir auch nicht gefallen, 2 versus
2. Ich nicht. Ja.
Jetzt haben wir schon eine Menge Dinge beschrieben, die Warzone 2 im Vergleich zum ersten Teil
in unseren Augen nicht ganz so elegant löst. Aber was macht das mit dem Spielgefühl? Eine
Menge. Und dann auch wieder in der Hitze des Gefechts vergleichsweise wenig. Denn das
Schussgefühl ist grandios. Das Movement macht einfach Laune. Die Spannung ist zum Ausflippen
spannend. Ausflippen. Und durch die Häuserschluchten von Almazra zu laufen, vermittelt tatsächlich
ein, um es im Marketing Englisch zu sagen, super excited, stellenweise intensiveres
Gefühl, als über die Weiten von Caldera zu fetzen. Weil ja wirklich überall jemand
lauern könnte. Das ist eine typische GameStar Formulierung. Da merkste, dass sie das schon
lange macht. Das ist wie die GameStar bei Hack'n'Slay-Spielen früher geschrieben hat,
die wilde Monster-Huts geht wieder los oder solches Zeug. Irgendwo hinter einem Fenster.
Und wenn diese Anspannung dann darin gipfelt, dass man unter den letzten Menschen auf der
bald winzigen Map ist und man zu guter Letzt auch noch gewinnt, das ist wirklich diese
einzigartige Stärke eines guten Battle Royale. Ja, das ist auch das, was es im Stream auf
Twitch so beliebt macht. Und der Weg zu einem ausgezeichneten ist gar nicht so weit, wie
es vielleicht jetzt noch wirken mag. Das Spiel hat nur das Pech, sich mit seinem Vorgänger
messen zu müssen. Ach ja und Bugs. Bugs hat es auch.
Abschließend noch ein paar Gedanken zu DMZ, das wie gesagt aktuell noch in der Beta steckt.
Darin wird die Map von Al-Masra zu einem Gebiet, in dem sich überall KI-Soldaten aufhalten,
aber auch Spieler und Spielerinnengruppen. Ja, hat mir nicht wirklich gefallen.
Die müssen vor festgelegte Aufträge und in der Partie getriggerte Einsätze...
Alter, was? Was ist das für Pepega-Aim hier? Das ist ja noch schlimmer als meins und ich
hab's die letzten Tage schon verkackt.... um weitere Aufträge freigeschaltet zu bekommen
und so weiter und so fort. Das ist auch noch Controller.
Hier levelt man Waffen und seinen grundsätzlichen Rang. Und wer sich richtig reinkniet, kann
außerdem Waffen-Blueprints freispielen. Aber das alles nur, wenn man es wie eben in
Hand Showdown oder Escape from Tarkov schafft, am Ende von der Map zu entkommen.
Wem das nicht gelingt, der hat nicht einfach nur eine Partie in den Sand gesetzt, sondern
verliert auch die Waffen. Denn das Spiel weist uns zuvor ein Pool von Knarren zu, aus dem
wir wählen können. Sterben wir, gehen die gewählten Waffen verloren und am Ende...
Also, bisschen wie Hazard Zone, nur hoffentlich besser.
Am Ende können wir nur alle paar Stunden auf unsere Backup-Wumme zugreifen oder müssen
schlicht und ergreifend zunächst mit langen Fäusten in ein Match. Grundsätzlich sollte
man sich für die MC eine feste Gruppe suchen, in der alle Teilnehmer die gleichen Aufträge
erfüllen müssen. Andernfalls haben im schlimmsten Fall drei Leute neun unterschiedliche Ziele
auf der Karte und das artet schnell... Ja, mit random Leuten kannst du sowas eh
prinzipiell nicht spielen. Und wo wir gerade bei Zielen sind, wir wissen
noch nicht, was das große Ziel von DMZ sein soll. Weil die Map so riesig ist und die echten
Gegenspieler so wenig, es sind nur 66 Menschen in einer Lobby, weil die Aufträge nicht sonderlich
einfallsreich und die KI-Gegner ab Punkt X nur noch nervig sind, haben wir recht schnell
die Lust an diesem Spielmodus verloren. Ja, ich hab's einmal gespielt, kein Lob mehr
gehabt. Eine erfolgreiche Extraktion aus DMZ ist
nur halb so befriedigend wie eine aus Hunt Showdown. Außer vielleicht man hat die begehrte
Waffe des Chemikers retten können. Aber wie schon gesagt, DMZ ist offiziell noch
in einer Beta. Ich hoffe der Chemiker ist auch ein Chineser.
Genau neben ist das Warzone 2 auch noch. Vieles funktioniert noch nicht einwandfrei, einiges
ist schlichtweg nicht zu 100% gelungen. Und kleinere Varianten wie zuletzt in Warzone
1, die fehlen uns übrigens auch. Und trotzdem macht Warzone 2 jetzt schon wahnsinnig viel
Laune. Wenn die Entwicklungsteams in den kommenden Wochen auf die Kritik der Spielerinnen und
Spieler hören, werden die Gefechte auf Almasra zu einem Battle Royale.
Das ist ja nun wirklich nicht ihre Stärke. Auf Kritik bzw. Feedback zu hören.
Da sind wir uns sicher. Okay. Jetzt wissen wir auch was die GAMES
auch dazu denkt. Schlauer bin ich jetzt nicht danach. Hat hier mal ein Axis Point & Switches
von TP-Link im Einsatz? Nope. Hab ich nicht. TP-Link hatte diese Omada-Geschichten, die
so ein bisschen Unify-Interface-Clones sind. Aber bessere Features zum größten Teil unterstützen
als Unify. Warum Unify so beliebt ist? Kannste nicht mehr ganz nachvollziehen.
Gut, Mundpropaganda letztendlich. Viele auf YouTube haben das vorgestellt und es funktioniert
ja auch ganz brauchbar. Weil ich sagen muss, weder Preis-Leistungstechnisch noch von Features
her finde ich das so überzeugend. Es sieht halt cool aus. Also Leute die auch Apple-UIs
mögen oder so, die mögen wahrscheinlich auch das Unify-UI, weil das so clean aussieht.
Ja, PPSK, genau, das kann ja Unify nicht. Na gut, Cisco ist ja wieder eine ganz andere
Axis Point nach 1500 Euro. Aber TP-Link ist von Features her tatsächlich besser. Leute,
bald ist es soweit, bald bestelle ich den neuen Rechner, wenn ich den Lade-Teile bekomme
und nicht ein Teil davon wahnsinnig überzogen teuer ist. Dezember wird der Rechner gebaut.
13900k, vielleicht auch in 13700. Mal gucken. Wahrscheinlich zum ersten Mal eine Wasserkühlung,
also all in one, Wasserkühlung. 4090, 32G RAM, DDR5, das wird teuer. Das wird auf jeden
Fall nicht billig. Das wird ein teurer Dezember. Ich brauche ein neues Handy, ein neuer Rechner,
ein Capture-Card, bin wahrscheinlich den Dezember irgendwie 6000, 7000 Euro los für Technikspielerei
quasi insgesamt. Das wird nicht billig, aber man gönnt sich ja sonst nichts. Warum Wasserkühlung?
Weil das Ding verdammt viel Abwärme erzeugt. Was für ein Handy, ich kaufe mir wahrscheinlich
ein iPhone 14 Pro, kein Plus, ist mir zu groß. Ist auch unsinnig teuer. Ja, wird wieder ein
neuer Rechner. Was ist eigentlich aus dem Bewerbungsgespräch geworden? Ich hatte letzte Woche Montag Vorstellungsgespräch.
Was diese Woche Montag? Nee, letzte Woche Montag. Lief gut, haben sich auch gleich gemeldet
bei mir und nächste Woche fahre ich da mal hin und gucke mir das vor Ort an. Leute, kennt
sich jemand in Würzburg bei euch aus am Bahnhof? Da muss ich demnächst hinfahren. Wo sind denn
da die Busse? Wie muss man da laufen? Kein Ding, wenn ihr es nicht wisst, ich kann mir
jetzt einfach Google Maps angucken oder beziehungsweise im Routenplaner. Vielleicht weist aber einer
aus dem Kopf, wie es da so ausschaut. War schon ein Gespräch mit einem aktuellen Arbeitgeber?
Sponsor der den Rechner, wenn du bleibst. Nein, machen sie nicht. Aber ein Gespräch mit aktuellem
Arbeitgeber war schon, ist nichts rausgekommen. Also ich bin wohl Ende des Jahres dort weg.
Ne, ne, ne. Also eine Wasserkühlung ist auf jeden Fall jedem auch eine teure Noctur oder
sonst was überlegen. Die können ja auch die Physik nicht überlisten. Die können schon
mithalten. Aber der 13900K, der verbraucht halt richtig viel Strom, verzeugt richtig
viel Abwärme. Wenn man okay ist, dass der runter taktet bei ordentlicher Last. Ja. Ich
hatte noch nie eine Wasserkühlung. Ich bin da echt mal gespannt. Ohne Kündigungsfrist,
ne. Kündigungsfrist habe ich. Mag es eine Frage mal alle hier? Wie sieht es mit Tattoos
im IT Bereich aus? Juckt keinen. Je nachdem wo du die hast, wirst du vielleicht schepp
angeguckt. So wie auf der Straße auch. Wenn es gar so offensichtlich oder zu ausgefallen
oder zu groß oder an komischen Stellen ist. Aber ansonsten juckt das keinen. Zumindest
habe ich noch nie mitbekommen, mitgekriegt, dass es irgendjemand jucken würde. Du gehst
aus dem Hauptbahnhof Main Exit raus, gehst in Richtung der Tram und dort müssen die
Busse auch sein. Okay. TAX. Oh. FeelsBatman. Ja, werde ich mir da mal angucken. Wenn du
das hast, dann hast du so viel Geld, da musst du dir keine Gedanken mehr drüber machen,
ob das in deinem Job gut ankommt oder nicht. Ja. Vier Tage. Vier Tage. Weiß ich wie hoch
die Chance auf einen Wasserschaden, weil er all in one Wasserkühlung ist. Weil die gehen
nicht umsonst da fünf Jahre Garantie drauf. Also die haben da schon gewisse. Ja, gewisse
Zuverlässigkeit muss das ja schon haben. Wissen die, dass die YouTube macht nicht wirklich?
Also einer weiß es, weil den kannte ich ja vorher schon. Geht ja auch kein was an großartig.
Oder meinst du dort, wo ich jetzt arbeite? Doch, doch, wo ich jetzt arbeite, die wissen
das. Meinem Chef wurde witzigerweise vor nicht allzu langer Zeit mein Schnee Video durch
den Gartenstells Video empfohlen auf YouTube von YouTube, vom YouTube Algorithmus. Da hat
ihm gesagt, hier guck dir mal vom Max das Gartenstells Video an. Viel Spatmen, weil du
es nicht gekriegt hast. Ach du wolltest es gar nicht machen oder was? Oder du bist da
hingegangen und hast dann dort festgestellt, dass es nicht das ist, was du machen willst?
Ach so. Was sind denn möchte gern Beamte? Muss den gleichen Krempel machen, bist aber
kein Beamter oder wie? Ist das Video nicht zehn Jahre alt? Doch. Das Video ist fast zehn
Jahre alt. Nicht ganz. Neun Jahre alt. Nächstes Jahr ist es zehn Jahre alt.
Das ist gut, das finde ich. Das finde ich nice. Ist geendet. Keck JavaScript beste.
Zu Top Top E-Mode. Warum bin ich der Einzige, der das geendet hat bisher? Hast du das gerade
hochgeladen oder wie? Ich muss noch refreshen. Vielleicht geht es dann schon, aber dauert
immer ein bisschen. Alter Flashback dauert ein bisschen, bis es gesüngt hat. Gehe nicht
davon aus, dass es probiert mal aus. Keck JavaScript. Nee, geht noch nicht. Geht noch nicht. Gibt
noch kein Keck JavaScript. Kein Keck JavaScript. Das dauert meistens. Ich habe hier FFZ und
das ist bei der Twitch TV. Das kann durchaus mal eine Viertelstunde dauern, bis es gesüngt
ist. Bei dir geht es? Ja, du hast wahrscheinlich bei der Twitch TV nicht FFZ. Oder ist das
jetzt schon gesüngt? Alter, warum merkt sich das Ding nicht? Nee, noch nicht drin. No-Pass.
Beides, nee beides. Also, braucht man nicht. Kann schon sein, dass du beides interessiert
hast. Beides installiert hast, aber eigentlich reicht eins davon. Tja Leute, ihr wisst was
jetzt ist oder? Boomer müde. Auch wenn es bei der Musik schwierig wäre, müde zu sein.
Was ist LULW? Bestes Emote. Guck hier, bestes Emote. Eindeutig. Ich glaube, da sind wir
uns alle einig, dass LULW größer KeckW ist. Und auch größer Keckl. LUL3D auch nicht
verkehrt. Wir haben zur Not auch Keck4D oder sowas. Haben wir auch noch. In Chatterino
geht es. Sekunde, ich reloade mal kurz. Nee, bei mir geht es noch nicht. Hat noch nicht
gesüngt. Alter, der Flashbang ist krass. Warum merkt er sich das jetzt eigentlich nicht?
Dark Mode Design. Was? Automatisches, dunkles Design deaktivieren? Nee, nee. Irgendwie kaputt.
Keck4D ist was anderes. Keckium ist das. Keck4D. Ja, guckt. Barry, danke schön für den Sub.
Sorry an alle, die ich heute übersehen habe im Eifer des Gefechts wieder. Guck mal kurz
rein, bevor ich off gehe. Kallumina. Danke schön für den Sub. Waterline. Mr. Moogame.
Temple Ritter. Danke schön Leute für die massive, huge Subscriptions. Wir haben eindeutig
zu viele Keck Emotes, oder? Was braucht man davon nicht mehr? Ernsthaft? Das benutzt doch
keiner, oder? Niemand benutzt KeckU. Den Rest, der Rest wird tatsächlich ab und zu mal benutzt.
Den Rest, den Rest kann ich nicht löschen. Der Chaelor mag KeckBald. Ich glaube wegen
Ema war es auch der Einzige, weshalb wir das hinzugefügt haben. KeckBald. KeckAlu.
Gut Leute. Schön, dass ihr da wart. Oh, was? Frage. Wohner Pflegeheim hat eine Prepaid
Karte und nun ein Samsung S5 Handy, sagt immer Netzwerkbetreiber oder so ähnlich verbinden.
Das funktioniert aber nicht. Ich habe nicht den plastesten Hauch einer Ahnung. Mit der
Beschreibung kann man da aber auch nicht viel debacken. Gut, Bettgeteim. Boomer müde.
Jetzt schlafen. Den Proviner fragen, das dürfte das Beste sein. Machts gut, C.U.
