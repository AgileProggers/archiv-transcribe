WEBVTT

00:00.000 --> 00:15.240
So Leute, da sind wir.

00:15.240 --> 00:18.580
Es ist echt warm heute, soll ich das mal sagen.

00:18.580 --> 00:24.280
Es ist 24,9 Grad hier bei mir gerade im Arbeitszimmer und ich hatte vorhin schon die Klimaanlage

00:24.280 --> 00:25.280
laufen.

00:25.280 --> 00:26.280
Die muss ich jetzt erstmal wieder anmachen.

00:26.280 --> 00:28.280
Viel zu warm.

00:28.280 --> 00:33.920
Gut, ich will auch gerade zweite mal Sport machen heute.

00:33.920 --> 00:34.920
Peppofett.

00:34.920 --> 00:40.480
Vielleicht bald nicht mehr oder vielleicht noch mehr.

00:40.480 --> 00:47.560
Man weiß ja nicht, soll ich mal erstmal die Klimaanlage an kurz.

00:47.560 --> 00:54.360
So, das reicht schon, wie gesagt es ist gerade 24,9 Grad hier drin.

00:54.360 --> 00:58.920
Gut, ich habe jetzt hier Tür zugemacht, Rechner an, zweiter Rechner an, das heißt es wird

00:58.920 --> 01:01.560
jetzt hier relativ schnell warm drin.

01:01.560 --> 01:06.400
Aber wenn ich jetzt die Klimaanlage anmache, ich habe es auf 23 Grad gestellt, das ist

01:06.400 --> 01:09.560
ein riesen Unterschied, ob 25 Grad oder 23 Grad.

01:09.560 --> 01:14.320
Das ist wirklich, 23 Grad ist top angenehm, fast schon ein bisschen kühl, wenn die Klimaanlage

01:14.320 --> 01:17.560
pustet und 25 Grad mit stehender Luft ist viel zu warm.

01:17.560 --> 01:26.000
Ich weiß ja auch nicht, warum mir das jetzt gerade einfällt, aber das musste mal gesagt

01:26.000 --> 01:27.000
werden.

01:27.000 --> 01:28.000
Keckweight.

01:28.000 --> 01:32.360
Warum habe ich eigentlich kein hochauflösendes Keckweight?

01:32.360 --> 01:42.240
Man, warum habe ich kein Keckweight?

01:42.240 --> 01:43.240
Keckweight.

01:43.240 --> 01:55.400
Ich brauche ein hochauflösendes Keckweight, Keckweight, kein Keckweight, Images, Keckweight.

01:55.400 --> 02:03.720
Moment, Color, Transparent, Keckweight, warum gibt es kein transparentes Keckweight?

02:03.720 --> 02:06.720
Was ist denn das?

02:06.720 --> 02:08.440
Was soll denn das hier?

02:08.440 --> 02:09.440
Kein Keckweight.

02:09.440 --> 02:13.280
Hoffentlich hat Teams mein Mikrofon hier wieder umgestellt.

02:13.280 --> 02:24.760
Äh, nee, Moment, Recording, nee, nee hat es nicht, ich brauche ein ordentliches Keckweight

02:24.760 --> 02:25.760
in der Auflösung.

02:25.760 --> 02:28.920
Keckweight, Size, Medium.

02:28.920 --> 02:41.800
Das ist ja mal absolut schlechte Kack-Quali, Keckweight.

02:41.800 --> 02:47.400
Da ist das, da ist der hier schon besser.

02:47.400 --> 03:05.440
Na gut, um euch zu erfreuen, Chat, habe ich einen neuen Sound-Effekt, Stripes 007, 12

03:05.440 --> 03:06.440
Monat.

03:06.440 --> 03:09.560
Aja ja, Exzellenz aufs Köpchen hier, geht gut los.

03:09.560 --> 03:16.440
Ich habe, ich habe, ich habe zwei neue Sound-Effekte drinne und zwar, oh, einmal.

03:16.440 --> 03:42.320
So und ganz wichtig, den brauchen wir auch noch, den kann man sicherlich immer mal gebrauchen.

03:42.320 --> 03:46.600
So und das Problem ist nur, ich habe die Sachen gleich genannt.

03:46.600 --> 04:01.800
Das hier ist, das hier ist eigentlich Edu, oder was auch immer, er da genau sagt, Edu,

04:01.800 --> 04:29.720
nicht Bitconnect, Edu, Edu, ich muss mal kurz Updates anschmeißen, falls ich die noch letztes

04:29.720 --> 04:41.880
Mal nicht habe durchlaufen lassen.

04:41.880 --> 04:42.880
Exzellent Musik hier.

04:42.880 --> 05:09.080
Exzellenz aufs Köpchen hier.

05:09.080 --> 05:39.040
Das ist Mario Galaxy Musik, das ist, das ist auch, das war aus dem offiziellen Soundtrack

05:39.040 --> 05:41.920
aber ich glaube, das ist eine der Stücke, die sie sich irgendwo abgeguckt haben.

05:41.920 --> 05:48.000
Also ich glaube, das ist nicht original, mit ein bisschen Zeug drumherum.

05:48.000 --> 05:54.080
So heute waren mal richtige Hacker-Mind-Sachen und zwar, ich weiß nicht mehr, wer es gewesen

05:54.080 --> 06:01.280
ist, aber im letzten Stream hat mich irgendjemand auf die Idee gebracht, nämlich folgendes

06:01.280 --> 06:02.280
zu machen.

06:02.280 --> 06:07.760
Das da, so, wir werden das ein bisschen anders machen.

06:07.760 --> 06:14.520
Neunter Monat, Tibidius, oh das Kind kommt von KS, wer ist denn schwanger?

06:14.520 --> 06:24.360
Also ich meine, bei mir sieht es vielleicht so aus, aber das ist anders gelagert.

06:24.360 --> 06:40.360
Die fehlt das Wombo-Kombo, ne, das glaube ich durfte, sag mal, achso, ne, oder, ah,

06:40.360 --> 06:44.840
ich kann kein Sound hören auf meinem zweiten Rechner, weil das Audio-Interface wiederum

06:44.840 --> 06:45.840
spackt.

06:45.840 --> 06:58.480
Na ja, so, das ist der Mario Galaxy-Soundtrack, ups, ne, das ist meine Domain, das ist der

06:58.480 --> 07:11.080
Mario Galaxy-Soundtrack, den ich irgendwo, wo habe ich ihn denn, da, also wir machen

07:11.080 --> 07:14.080
heute Big Brain Stream, wie gesagt, mich hat hier jemand auf die Idee gebracht, dass wir

07:14.080 --> 07:15.080
das hier machen.

07:15.080 --> 07:18.760
Ich muss euch jetzt allerdings mal was fragen, Chat, und das ist nicht, das ist nicht so

07:18.760 --> 07:19.760
einfach.

07:19.760 --> 07:28.240
Und zwar, also was wir jetzt machen ist, wir gucken uns die Kombination an, aus einer

07:28.240 --> 07:33.960
eigenen Domain, Let's Encrypt Zertifikaten, das steht ja schon im Titel, allerdings an

07:33.960 --> 07:39.960
sich wäre das Sache von 5 Minuten, ähm, es ging ja darum, dass jemand gefragt hat, wie

07:39.960 --> 07:44.160
man eine Reverse-Proxy aufsetzt, und das werden wir machen, wir werden irgendwelche Anwendungen,

07:44.160 --> 07:47.160
wir nehmen erstmal so eine Hallo-Welt-Container, vielleicht hier so ein Git oder eine Next

07:47.160 --> 07:52.080
Cloud, in einem Docker-Container laufen lassen, und davor eine Reverse-Proxy stellen, der

07:52.080 --> 07:58.120
für uns Zertifikate und DNS, ne, ne, ne, ich versprache es hier nicht, DNS, äh, Zertifikate

07:58.120 --> 07:59.120
über DNS-Challenge macht.

07:59.120 --> 08:04.760
So, also soweit, soweit der Plan, und jetzt, Chat, jetzt kommt, äh, die, äh, schwierige

08:04.760 --> 08:05.760
Frage.

08:05.760 --> 08:07.000
Wie wollen wir das machen?

08:07.000 --> 08:14.880
Also, ich kann das intern bei mir auf dem Raspberry Pi machen, das ist dann relativ

08:14.880 --> 08:21.200
ähnlich zu dem, was man daheim auch machen würde, oder, ich habe überlegt, das wäre

08:21.200 --> 08:26.680
vielleicht auch mal ganz gut, wir können das auf einer Digital-Ocean-VM machen, öffentlich

08:26.680 --> 08:27.680
zugänglich.

08:27.680 --> 08:33.880
Das heißt, ihr könnt dann sogar euch drauf connecten und gucken, ob alles funktioniert.

08:33.880 --> 08:40.480
Natürlich muss ich da ein bisschen aufpassen, dass ich nicht irgendeinen Mist konfiguriere,

08:40.480 --> 08:44.520
was aber auch nicht so schlimm ist, weil Digital-Ocean-VM kann ich mit einem Klick

08:44.520 --> 08:45.520
wieder löschen.

08:45.520 --> 09:02.960
Was gebrauchte Grafikkarte in der Reichweite von 100 bis 150 Euro, ja, nehm ich, wäre

09:02.960 --> 09:07.080
auf dem Pi nicht besser, falls es jemand zuhause nachmachen möchte, naja, es ist ja eigentlich

09:07.080 --> 09:12.640
kein großer Unterschied, also sprich, das, was ich mache, ist mehr oder weniger das gleiche

09:12.640 --> 09:16.600
auf einem öffentlichen Server oder auf dem Raspberry Pi, nur, dass man sich das Ergebnis

09:16.600 --> 09:17.600
mal angucken kann.

09:17.600 --> 09:28.600
Wir können ja, wo habe ich eigentlich meinen Raspberry Pi, äh, ah, hier, da ist er, also

09:28.600 --> 09:35.640
den Raspberry Pi hätte ich am Start, das könnte man machen, ja, also, wie ihr wollt,

09:35.640 --> 09:41.600
wie ihr wollt, ja, also könnt ihr euch aussuchen, ob wir es intern auf den Raspberry Pi machen

09:41.600 --> 09:47.400
sollen, oder ob ich das mal extern auf einer Digital-Ocean-VM machen soll, ähm, ich leg

09:47.400 --> 09:53.040
meine Digital-Ocean-VM an, weil ich mal gucken will, ob ich überhaupt meinen SSH-Key hier

09:53.040 --> 09:54.040
auf der VM hab.

09:54.040 --> 09:57.040
Wenn ich nämlich meinen SSH-Key gar nicht auf der VM hab, dann können wir uns das Ganze

09:57.040 --> 09:58.040
eh sparen.

09:58.040 --> 09:59.040
Externis.

09:59.040 --> 10:09.640
Okay, da machen wir, da machen wir Kompromiss, easy killer, neun Monate, exzellent, dankeschön,

10:09.640 --> 10:17.800
five head, big brain, wo habe ich denn hier, wo ist mein big brain?

10:17.800 --> 10:31.760
So, ähm, das wäre auch mal was für den Stream, ist das, soll auch, oh, das ist eine gute

10:31.760 --> 10:41.520
Idee, Sebaro, das finde ich gut, das ist, das ist sehr nice, das, ähm, schreibe ich

10:41.520 --> 10:46.240
mal auf, da können wir echt mal reingucken, das ist bestimmt ganz witzig, also, was wir

10:46.240 --> 10:50.040
jetzt mal machen, da legen wir das Ding extern an, wir können ja, wir können ja so ein Kompromiss

10:50.040 --> 10:57.240
machen, es, wir installieren das Ganze extern erstmal, allerdings die Sachen, wo es dann,

10:57.240 --> 11:00.800
wo man auch wirklich was mit machen kann, sei es jetzt irgendwie eine Nextcloud oder

11:00.800 --> 11:06.280
sonst was, das mache ich dann vielleicht intern, weil, das gebe ich euch eh extern kein Zugriff

11:06.280 --> 11:07.280
drauf.

11:07.280 --> 11:13.640
Also insofern bringt es das nichts, dann machen wir das Basic Setup, das Basic Setup machen

11:13.640 --> 11:18.600
wir auf der Digital-Ocean-VM, da könnt ihr nämlich Hello World sehen, dass es funktioniert

11:18.600 --> 11:24.640
und, ähm, dann ist es auch besser, so ein bisschen die Sachen drumherum anzugucken und

11:24.640 --> 11:28.320
die anderen Sachen machen wir dann vielleicht auf dem Raspberry Pi später, mal gucken,

11:28.320 --> 11:33.120
wie wir von der Zeit her hinkommen, ja, und wenn es jetzt 18.30, 22 Uhr ist wieder Schluss,

11:33.120 --> 11:36.840
aber dann haben wir noch ein bisschen Zeit bis dahin, also ich lege erst, ich lege erst

11:36.840 --> 11:43.000
mal eine Digital-Ocean-VM an, ich mag aus irgendwelchen Gründen Digital-Ocean, ich

11:43.000 --> 11:46.920
weiß, dass die Hetzler-Cloud viel billiger ist, aber ich habe mich irgendwie auf Digital-Ocean

11:46.920 --> 11:52.800
eingeschossen, also, das ist die einfachste Variante, sich, ähm, irgendwelche Linux-VMs

11:52.800 --> 11:56.400
zu erstellen, online, die man einfach wieder löschen kann, die sind sau schnell wieder

11:56.400 --> 11:59.880
da und die kann man sau schnell wieder löschen, überhaupt kein Problem, ja, da geht man einfach

11:59.880 --> 12:06.400
auf Droplets, Create und dann sucht man sich eins aus, was man haben will, also sagen wir

12:06.400 --> 12:12.520
hier, wir wollen Ubuntu 20.04, Standard übrigens, das hier ist Gbait, das ist die größte Gbait-Anzeige

12:12.520 --> 12:20.120
überhaupt, ihr müsst hier hin, 5 Euro im Monat oder 0,7 Cent die Stunde, also Stream,

12:20.120 --> 12:25.960
das kostet euch, so wie es aussieht, heute einige Prime-Subs mit 0,7 Cent die Stunde,

12:25.960 --> 12:30.880
ja, und trotzdem reicht es für alle Testzwecke, ich meine, man hat einen Gigabyte RAM, man

12:30.880 --> 12:36.520
hat eine CPU, man hat 25 Gigabyte SSD und genug Transfervolumen, wenn du das einfach

12:36.520 --> 12:40.280
findest, musst du dir unbedingt einmal Scaleway anschauen, da war ich sogar, glaub mal drauf

12:40.280 --> 12:47.800
schon auf Scaleway, da war ich glaube ich schon mal drauf, aber die Preise waren noch

12:47.800 --> 12:53.720
gar nicht so groß oder so unterschiedlich, ich hatte es mir auf jeden Fall mal angeschaut,

12:53.720 --> 13:09.440
da sind die mit diesem lila Logo, ne, ja, da sind die mit diesem lila Logo, ja, also

13:09.440 --> 13:18.560
die Hetzner, Hetzner Cloud ist viel günstiger, hallo Wasserfreak, Hetzner Cloud ist viel

13:18.560 --> 13:33.760
günstiger, guck, da sind wir bei, naja, 0,02 Cent, aber kostet halt nur die Hälfte, ungefähr

13:33.760 --> 13:40.600
im Monat, bis weniger als die Hälfte, und man kriegt sogar mehr RAM, also an sich ist

13:40.600 --> 13:45.240
gar nicht so verkehrt, ist das gleich wie bei NetCup, vielleicht sind die ja sogar im

13:45.240 --> 13:56.200
gleichen RZ, man weiß ja nicht, ne, kann ja sein, oh, das ist eine schöne Statistik,

13:56.200 --> 14:04.080
hier guckt mal, bestprices, Scaleway ist angeblich bestprices, na gut, wundert mich jetzt nicht,

14:04.080 --> 14:08.480
wenn das von Scaleway.com kommt, dass sie hier sich in dem Vergleich als bestprices

14:08.480 --> 14:20.480
hinstellen, gut, Azure ist teuer, also Azure, AWS, wo ist Google, hier, Google, ne, Moment,

14:20.480 --> 14:27.160
da, Google, also Google ist bei vielen Sachen ziemlich teuer, wenn man das freikontingent

14:27.160 --> 14:36.080
überschreitet, aber AWS und Azure nimmt sich meistens auch relativ teuer, und dafür kann

14:36.080 --> 14:39.360
man halt noch viel mehr Sachen machen, egal, wir legen uns jetzt einfach mal hier eine VM

14:39.360 --> 14:42.840
an, ich weiß nicht, ob ich euch das schon mal im Stream gezeigt hab, das ist wirklich

14:42.840 --> 14:49.760
total einfach, solltet ihr mal wirklich einen Linux Server auf die Schnelle brauchen, geht

14:49.760 --> 14:53.360
auf Digital Ocean oder auf Scaleway oder auf Hetzner Cloud oder sonst was, die sind alle

14:53.360 --> 14:58.200
mehr oder weniger ähnlich, wählt das Betriebssystem aus, was ihr haben wollt, geht auf die kleinste

14:58.200 --> 15:04.480
VM, die es gibt, und sucht euch ein Datacenter aus, wählt euren SSH Key aus, ihr könnt es

15:04.480 --> 15:10.080
auch mit einem Passwort machen, aber SSH Key würde ich euch empfehlen, dann ist das von,

15:10.080 --> 15:17.200
dann ist das standardmäßig secure eingerichtet, und ja, Sebaro mach ich, so, und dann klickt

15:17.200 --> 15:21.600
man auch anlegen, und das war's, mehr muss man nicht machen. Was hast du bereits gemacht?

15:21.600 --> 15:23.720
Keine Ahnung, ich bin letztes Zeit, ich bin seit einer Viertelstunde online, noch gar

15:23.720 --> 15:32.080
nix, ich leg grad ne Digital Ocean VM an. So, dann guckt man dem ganzen zu, wie der,

15:32.080 --> 15:36.880
wie die VM provisioned wird, und wenn das fertig ist, kriegt man ne IP und kann sich

15:36.880 --> 15:44.040
drauf einloggen, also so einfach kriegt man ansonsten nur lokal irgendeine VM, also einfacher

15:44.040 --> 15:51.920
kann es eigentlich nicht mehr gehen. So, und was man jetzt als nächstes machen muss,

15:51.920 --> 15:56.760
ist folgendes, also was wir machen, ich, ich mal das nochmal auf, ich hab's ja gestern

15:56.760 --> 16:02.600
schon mal aufgemacht, ich mal das nochmal kurz auf, was wir machen, also, machen, Drive,

16:02.600 --> 16:17.280
Device, Create New, Blank, also, wir haben hier nen Ubuntu Server, äh, kann man die

16:17.280 --> 16:32.560
Schrift nach oben machen, Top, ok, also, kann man auch Top-In machen, Top-Right, Left, ne,

16:32.560 --> 16:38.320
also wir haben hier nen Ubuntu Server, da kommt rein, da kommen mehrere Container rein,

16:38.320 --> 16:43.160
es ist jetzt erstmal egal welche, wir schreiben einfach mal Container hin, Service 1, Service

16:43.160 --> 16:54.400
2, Service 3, oder irgendwie sowas, so, Service 1, so, Service 2, Service 3, das kann zum

16:54.400 --> 17:04.480
Beispiel, der Soundtrack kann sich nicht entscheiden, ob er zu laut oder zu leise sein soll, ähm,

17:04.480 --> 17:08.280
das kann zum Beispiel, dann schreiben wir mal was hin, Nextcloud zum Beispiel rein,

17:08.280 --> 17:14.680
dann haben wir noch nen Git-Server, äh, sowas, sowas in der Richtung, und dann noch irgendwie

17:14.680 --> 17:22.480
irgendwas anderes, keine Ahnung, irgendeinen Web-Server oder so, es ist auch vollkommen

17:22.480 --> 17:37.880
wurscht, so, davor machen wir nen Reverse-Proxy-Loud-Balancer-Hybrid-Ding, also, so, das ist in dem Fall ist das,

17:37.880 --> 17:42.840
ich kann das nicht richtig schreiben, ich glaub, so schreibt man das, drei, was, was

17:42.840 --> 17:54.760
ein Wort, wer hat sich das ausgedacht, das ist total, äh, ich hab was im Auge, so, dann

17:54.760 --> 18:01.360
machen wir den hier davor, als Reverse-Proxy, das klingt wirklich was wie von Okia, ne,

18:01.360 --> 18:08.600
von Nginx, ähm, und das ganze, hab ich ja noch, hab ich ja noch vergessen, das da sind

18:08.600 --> 18:25.560
jeweils Docker-Container, also sprich, Doxor, ähm, Text, Position, Top, das da sind eigentlich

18:25.560 --> 18:53.040
Docker-Containers, äh, Moment, ähm, Range, To Back, äh, To Back, exellent, Big Brain-Zeichen-Programm

18:53.040 --> 18:59.800
hier, so, das ist das, was wir bauen, also sprich, das ist die logische Aufteil, was

18:59.800 --> 19:05.560
wir auf unserem Ubuntu Server machen, und, oh, man kann das ganze speichern, das wusste

19:05.560 --> 19:10.920
ich gar nicht, dass das funktioniert, so, dann haben wir hier außen, das hab ich sowas

19:10.920 --> 19:15.760
ähnlich, das hab ich ja gestern schonmal gemalt, hier außen haben wir Let's Encrypt

19:15.760 --> 19:28.000
für SSL-Zertifikate, so, oh, ok, FOD, komischer Pfeiler, weg, das sind Zertifizierungsstelle,

19:28.000 --> 19:39.920
die stellt uns SSL-Zertifikate raus, und unser Reverse-Proxy macht Big Brain Moves, und ruft

19:39.920 --> 19:45.520
sich immer neue Zertifikate ab, und das Schöne an dieser Kombi ist, dass Traffic checkt,

19:45.520 --> 19:52.080
dass alles angelegt ist, also sprich, welche Container hier existieren, und er macht intern

19:52.080 --> 19:58.960
das Handling, sprich, das, äh, das Proxying, oder eventuell auch Loadbalancen, je nachdem,

19:58.960 --> 20:02.920
auf die Container automatisch, also sprich, man muss sich nicht hier drum kümmern, man

20:02.920 --> 20:07.360
muss auch nichts anlegen, außer einmal diesen Server im DNS einrichten, das ist alles,

20:07.360 --> 20:08.360
mehr muss man nicht machen.

20:08.360 --> 20:19.080
So, und das heißt, davor hat man halt irgendwie einen ordentlichen Router, ordentlichen Router,

20:19.080 --> 20:27.680
wobei, die Cisco-Fans, bei denen ist ein Router sowas hier, ein Router, da haben wir hier

20:27.680 --> 20:34.640
Cloud, ganz wichtig, brauchen wir auch noch hier, Cloud, das ist das Internet, Big Brain,

20:34.640 --> 20:49.960
oder Wolke, das ist euer Provider, und das seid ihr, oder irgendjemand, und das Schöne

20:49.960 --> 21:03.840
ist, dass man von hier, nach hier, also von euch daheim, zu eurem Server, ist jetzt erstmal

21:03.840 --> 21:08.040
egal, ob der in der Cloud irgendwo steht oder bei euch daheim, wenn er bei euch daheim steht,

21:08.040 --> 21:09.040
fällt halt die Internetgeschichte weg.

21:09.040 --> 21:14.760
Man muss nur einmal, oh, was ist denn das hier, was macht die Wolke hier in der Mitte,

21:14.760 --> 21:20.520
man muss die Sache nur einmalig konfigurieren, richtig, also das Handling von Zertifikaten

21:20.520 --> 21:26.760
und diesen Weg hier, das muss man nur einmal richtig konfigurieren, danach lassen sich

21:26.760 --> 21:33.280
relativ easy, ohne größere Config-Aufwände, oder ohne Big Brain-Geschichten, weitere Services

21:33.280 --> 21:37.680
hier dahinter betreiben, ohne dass das großartig unsicherer wird, und ohne dass man großartig

21:37.680 --> 21:38.680
was machen muss.

21:38.680 --> 21:45.320
Warum nicht Serverless, das passt, gute Frage, das ist nämlich auch gut in Kombination mit

21:45.320 --> 21:49.800
das, was dann draufkommt, ich kapiere immer noch nicht, was Serverless ist, was sollte

21:49.800 --> 21:55.280
jetzt ohne Server funktionieren, gar nicht, Serverless ist der größte Jebait überhaupt,

21:55.280 --> 21:59.880
Serverless hat mit dem Namen Serverless überhaupt nichts zu tun, das einzige, was Serverless

21:59.880 --> 22:03.520
meint ist, dass die Server nicht bei dir stehen, sondern dass die Server bei jemand anderem

22:03.520 --> 22:04.520
stehen.

22:04.520 --> 22:14.360
Das alles, also Serverless ist exakt das Gegenteil von Serverless, weil ohne Server geht's halt

22:14.360 --> 22:15.360
nicht.

22:15.360 --> 22:22.640
Es ist, naja, Synonym für Cloud, kann man so nicht sagen, Synonym bedeutet, als heißt

22:22.640 --> 22:29.840
mehr oder weniger das gleiche, Cloud ist ja so ein wager Begriff für Rechner, die irgend

22:29.840 --> 22:30.840
wo stehen.

22:30.840 --> 22:39.560
So und Serverless ist quasi eher, jemand bietet mir einen Service an, den ich verwende, sodass

22:39.560 --> 22:45.960
ich keine Server mehr brauche, zum Beispiel, wenn ich irgendwas berechnen will, und dazu

22:45.960 --> 22:52.520
brauche ich drei verschiedene Services, und die Services miete ich mir in der Cloud und

22:52.520 --> 22:58.160
verbinde die in der Cloud zusammen, und ich liefere dann vielleicht bloß noch einen Frontend

22:58.160 --> 23:04.040
aus, dann ist das insofern Serverless, weil ich halt keine Server mehr betreibe.

23:04.040 --> 23:08.520
Serverless letztendlich gibt's eh nicht, im eigentlichen Sinne, weil irgendwo muss

23:08.520 --> 23:13.440
die Webseite ausgeliefert werden, von irgendeinem Webseiter wird eine Webseite ausgeliefert.

23:13.440 --> 23:17.240
Also komplett Serverless ist Blödsinn, in der Regel ist damit nur gemeint, der Scheiß

23:17.240 --> 23:19.120
steht halt einfach nicht bei mir.

23:19.120 --> 23:25.400
Genau, Microservices kommt auch noch dazu, in der Regel spricht man bei diesen Diensten,

23:25.400 --> 23:35.440
die man entweder sich mietet, oder die man eventuell sogar selbst betreibt in der Cloud,

23:35.440 --> 23:41.360
dann von Microservices, weil das ist halt kein großartiges Ding, sondern funktionell relativ

23:41.360 --> 23:46.280
beschränkt auf eine Sache, was weiß ich, das eine macht nur Authentifizierung, da habe

23:46.280 --> 23:49.760
ich irgendeinen Key-Cloak-Service laufen, das macht nur Authentifizierung, dann habe

23:49.760 --> 23:55.640
ich vielleicht irgendwie die Azure Cosmos DB für ein bisschen Datenbankgedöns und sowas,

23:55.640 --> 24:01.920
und das verbinde ich dann zusammen in der Cloud, dann ist das quasi Serverless Microservices

24:01.920 --> 24:03.400
in der Cloud, die ich verwende.

24:03.400 --> 24:10.360
Und dann kann man sich als Stonks-Mann einen darauf abrubbeln, wie hip man ist.

24:10.360 --> 24:22.560
Was machen wir heute?

24:22.560 --> 24:27.800
Das hier machen wir heute, ich habe es gerade aufgemalt, wo habe ich es, da, wir bauen

24:27.800 --> 24:34.400
ein Reverse-Proxy mit Traffic für unsere eigene Domain, ich habe mir extra eine Domain

24:34.400 --> 24:40.320
gekauft, damit ich hier im Stream ein bisschen Zeugs basteln kann, nämlich proggers.exe

24:40.320 --> 24:48.080
x, y, z, und wir werden folgendes machen, wir nehmen die Domain, konfigurieren bei Digital

24:48.080 --> 24:53.000
Ocean, ich habe das hier, ich habe mich schon überall eingeloggt im anonymen Tab, also

24:53.000 --> 24:58.440
wir konfigurieren auf Cloudflare, also ich muss alles anfangen, wir machen uns zum Einstieg

24:58.440 --> 25:03.240
auf Digital Ocean eine VM, das heißt, da ist er am Start, zwei Monate, exzellent, Subscription,

25:03.240 --> 25:12.000
also wir machen uns auf Digital Ocean, wir machen uns auf Digital Ocean eine VM, jetzt

25:12.000 --> 25:17.760
erstmal zum Ausprobieren, die Sachen, wo Leute was mit anstellen können, die machen wir

25:17.760 --> 25:23.200
dann auf dem Raspberry Pi, aber wir machen das erstmal öffentlich diesmal, also sprich,

25:23.200 --> 25:27.600
dass ihr auch prinzipiell seht, dass es funktioniert, ihr könnt euch dann auf die IP später connecten

25:27.600 --> 25:31.640
oder eben auf die Domain, was ja eigentlich der Sinn ist, und euch angucken, dass dann

25:31.640 --> 25:36.720
da Hallo Welt steht, oder ne, da steht nicht Hallo Welt, da steht dann Willkommen im Who-Is-Container

25:36.720 --> 25:42.040
oder im Who-Am-I-Container oder sowas, irgendein Exempel-Container machen wir dann, also wir

25:42.040 --> 25:47.880
legen uns eine VM bei Digital Ocean an, mit der wir heute den ganzen Kram machen, zumindest

25:47.880 --> 25:54.680
bis zum gewissen Teil, dann gehen wir als nächstes zu Cloudflare, legen dort meine,

25:54.680 --> 26:01.160
übrigens die E-Mail-Adresse ist nicht leaked, das ist meine offizielle Business-Kontakt-E-Mail-Adresse,

26:01.160 --> 26:04.200
die überall steht, sowohl auf Twitch als auch auf YouTube, falls mir da irgendjemand

26:04.200 --> 26:09.440
ankommt, Max, leaked, leaked, leaked, ich hab's genau gesehen, leaked, alter, leaked, so,

26:09.440 --> 26:19.120
dann legen wir uns unsere Domain bei Cloudflare an, Cloudflare sorgt in dem Fall dafür, dass

26:19.120 --> 26:26.200
die Leute die Domain auflösen können, warum auch eine Max-FPS-TV-Adresse nehmen, hätten

26:26.200 --> 26:31.920
wir auch machen können, Seba, richtig, ja, aber ich hab den Cloudflare-Account schon

26:31.920 --> 26:37.920
eine Weile, aber vielleicht nehme ich auch eine Max-FPS-TV-Adresse, genau, dann gehen

26:37.920 --> 26:44.480
wir in Cloudflare, legen unsere Domain an, also unsere Domain ist proggers.xyz, da ist

26:44.480 --> 26:50.200
gerade noch gar nichts dabei und man sieht auch, DNS-Auflösung geht nicht, so, damit

26:50.200 --> 26:53.800
Cloudflare funktioniert, müssen wir zu unserem Host da gehen und ich glaube, das ist ganz

26:53.800 --> 26:57.040
gut, wenn man mal die einzelnen Schritte gesehen hat, die man da unternehmen muss, dass das

26:57.040 --> 27:04.200
funktioniert, da müssen wir zu unserem Domain-Registrar gehen und dort die DNS-Serve ändern, so und

27:04.200 --> 27:08.640
das werden wir jetzt alles machen, wenn wir das gemacht haben, dann gehen wir auf unsere

27:08.640 --> 27:15.080
Digital-Ocean-VM, installieren Docker, Docker-Compose, Traffic und starten den Hello-World-Container

27:15.080 --> 27:18.920
oder so Who-Am-I-Container ist das und den könnt ihr dann im Stream ausprobieren, ob

27:18.920 --> 27:25.640
das funktioniert. Warum Cloudflare? Weil Cloudflare kostenlos ist für kleine Sachen und Cloudflare

27:25.640 --> 27:33.140
eine gute API-Unterstützung hat und auch gute Plugins, die überall funktionieren. Ich hätte

27:33.140 --> 27:45.920
eine Idee für ein Abstimmen, bevor es losgeht, oje Sebaro, was denn? Was willst du für eine

27:45.920 --> 27:57.600
Abstimmung Sebaro? Wer ist der cutest Mod im ganzen Land? Wird dieser Stream später noch

27:57.600 --> 28:04.480
als Watt verfügbar sein oder nicht, ja? Achso, wird was geleakt, ja das weiß ich doch jetzt

28:04.480 --> 28:09.840
noch nicht. Woher soll ich das denn jetzt schon wissen, ob was geleakt wird? Ich bin

28:09.840 --> 28:32.280
ja kein Hellseher. Ja, E-Mail ist nicht geleakt, E-Mail ist öffentlich. So, also, auf geht's.

28:32.280 --> 28:44.760
Gut, fangen wir mal an, also Sebaro. Wir können es auch im nächsten Stream machen. Okay, also

28:44.760 --> 28:49.660
jemand hat gefragt, was die Domain kostet. Die kostet, ich muss aufpassen, weil hier kann

28:49.660 --> 28:53.440
ich wirklich was liegen, da muss ich aufpassen. Das ist nämlich dort, wo ich meine ganzen

28:53.440 --> 28:58.400
Domains, also meine ganzen, ganzen Domains, meine zwei Domains registriert habe. Das ist

28:58.400 --> 29:02.320
die, die ich für meine Heimautomatisierung verwende, daheim, da ist nichts öffentlich

29:02.320 --> 29:09.600
von. Und das hier ist der Kram, den ich verwende. Die Domain habe ich mir extra gekauft, nur,

29:09.600 --> 29:14.640
damit ich im Stream Sachen zeigen kann. Chat. So, und ich weiß leider nicht genau, was es

29:14.640 --> 29:18.880
kostet, wir gucken mal. Ich muss aber aufpassen, dass ich keine E-Mail Adresse und Namen leake

29:18.880 --> 29:31.320
und sowas. Okay, für neun Dollar im Jahr könnte ich sie renewen. Also, Prime Subs, bam, bam,

29:31.320 --> 29:36.400
bam, neun Euro im Jahr müssen reinkommen, neun Dollar, neun Dollar achtzehn im Jahr.

29:36.400 --> 29:43.920
Any primers. Und, ähm, mit der Domain können wir ein bisschen rumsaunen, im Endeffekt,

29:43.920 --> 29:51.280
danach schmeiße ich das eh alles wieder raus. So, also, dann würde ich sagen, fangen wir

29:51.280 --> 29:58.680
mal an. MaxMarketing, exellent. PepofetMarketing. So, ähm, so, damit wir das Ganze hier hinkriegen,

29:58.680 --> 30:04.680
was ich da aufgemalt hab, müssen wir jetzt erstmal schauen, was ist denn das Ziel? Also,

30:04.680 --> 30:09.240
sprich, was wollen wir? Wir wollen, dass, jetzt müssen wir ein bisschen DNS-Zeug machen,

30:09.240 --> 30:17.120
wir wollen, dass Progasp, also, unsere Domain, ist Progasp XYZ. Hat das einen bestimmten

30:17.120 --> 30:21.800
Grund, wieso du deine Domains da hast? Ja, weil es die billigsten waren. Die mit Abstand

30:21.800 --> 30:27.120
billigsten. Und, weil die sich absolut nicht für interessieren, ob man sich mit Fake-Daten

30:27.120 --> 30:36.560
registriert. Ich heiße irgendwie, ähm, äh, Peter K. Wupplor, äh, wohne, wohne in Frankfurt

30:36.560 --> 30:53.160
am Hauptbahnhof und in der Unterführung oder so. Am oder im Hauptbahnhof. Ich weiß nicht,

30:53.160 --> 31:00.320
was ich da eingetragen hab. Hast du Angst, dass du den Namen liegst? Naja, ähm, bis

31:00.320 --> 31:04.120
vor nicht allzu langer Zeit konnte jeder eine WhoIs-Anfrage machen und man hat das

31:04.120 --> 31:10.000
rausgekriegt. Mittlerweile rücken die das ja gar nicht mehr raus. Deswegen Fake, Fake-Daten.

31:10.000 --> 31:15.840
So, also das Ziel ist, die Domain, die wir haben. Ich glaub übrigens, dass der jung

31:15.840 --> 31:20.880
Snorlax, der gerade im Chat gekommen ist, das war, der sogar gefragt hat, wie man das

31:20.880 --> 31:25.680
macht. Ich bin mir aber nicht mehr ganz sicher. Irgendeiner hat gestern im Stream gefragt,

31:25.680 --> 31:42.480
wie man das macht. Ich glaub, das war er. Frage liegt. War Matze2090, da kann ich mich

31:42.480 --> 31:47.440
jetzt nicht mehr dran erinnern. Aber es ist ja so, es ist ja so im Trend auf Twitch,

31:47.440 --> 31:56.960
dass man immer sagt, I did this. Und da muss Vertöner und Smiley dahinter machen. Yep,

31:56.960 --> 32:02.200
yep, gibt's hier nicht als E-Mode. Die Geschichte mit Reverseproxy einrichten. Wer war denn

32:02.200 --> 32:06.360
das? Ist ja auch egal, wir machen's trotzdem. Also, so, damit wir jetzt ein bisschen, als

32:06.360 --> 32:08.520
hab ich lange geschwätzt, dass man jetzt ein bisschen Vorstellungen hat, was man bei

32:08.520 --> 32:13.760
der ganzen Geschichte machen muss. Also, Ziel ist ja, sowohl wenn ihr das intern bei euch

32:13.760 --> 32:20.880
habt, daheim, für interne Container, Services, was auch immer, oder ob ihr das extern macht,

32:20.880 --> 32:27.480
euer Ziel ist ja, dass wenn ihr auf eure Domain geht, dass ihr irgendwo rauskommt. So, aktuell

32:27.480 --> 32:34.120
passiert bei progas.xyz schon mal gar nichts. Und das liegt daran, weil bei meinem Domain-Anbieter

32:34.120 --> 32:41.080
nichts hinterlegt ist. Da sind keine DNS-Einträge. So, allerdings möchte ich den DNS von meinem

32:41.080 --> 32:45.920
Domain-Registrar nicht verwenden. Und zwar aus folgendem Grund, weil die keine API für

32:45.920 --> 32:50.480
DNS-Änderungen haben. Und ich hab ja schon mal die Story erzählt, dass ich's geschafft

32:50.480 --> 32:56.800
habe, dass die mich zweimal gesperrt haben. Also, da hab ich schon erzählt, oder? Dass

32:56.800 --> 33:03.880
mich mein Domain-Registrar zweimal gesperrt hat. Also, ja, hab ich. Nur mal ganz kurz

33:03.880 --> 33:12.000
für alle, die sich mitgekriegt haben, ich hab versucht, die DNS-Einträge automatisch

33:12.000 --> 33:20.600
zu ändern. So wie man das hier über die Cloudflare API machen kann. So, und über die Cloudflare

33:20.600 --> 33:25.200
API ist es total einfach, sowas zu machen. Bei meinem Domain-Registrar, die haben keine

33:25.200 --> 33:32.560
API für DNS-Änderungen. Und für Zertifikate, DNS-Challenge, brauchst du gewisse DNS-Einträge,

33:32.560 --> 33:37.120
das letzte Encrypt der Zertifikate gibt. Deswegen hab ich mir gedacht, ich mach jetzt einfach

33:37.120 --> 33:42.240
Next Level Big Brain Move und ich hab ein Skript gebastelt, was im Hintergrund in Chrome

33:42.240 --> 33:50.240
startet, sich bei meinem Domain-Registrar einloggt und im Web-Interface DNS-Änderungen

33:50.240 --> 33:59.040
quasi eintippt, auf Enter drückt und das speichert. Also ich hab quasi Webseiten, User-Interaktionen

33:59.040 --> 34:05.960
gefaked über den unsichtbaren Chrome. Das Problem war nur, dass ich es ein bisschen

34:05.960 --> 34:11.480
verkackt habe und hab das Skript quasi gebotet, ja, wenn du es so willst, im Prinzip richtig

34:11.480 --> 34:16.800
Hacker-Mans-Geschichten. Und das Problem dabei war nur, ich hab es dann irgendwann verkackt

34:16.800 --> 34:23.080
und hab das Skript ein bisschen fail programmiert, ich hab an einer Stelle wahrscheinlich einen

34:23.080 --> 34:27.560
Exit oder einen Break oder sonst was vergessen und dann hat sich das halt versucht, 500 mal

34:27.560 --> 34:34.840
anzumelden. Und dann haben die meine IP blacklisted. Weil die sich gedacht haben, okay, das ist

34:34.840 --> 34:41.000
definitiv kein normaler Traffic. Monarch-S. Und dann haben die meine IP geblacklisted.

34:41.000 --> 34:45.400
Da hab ich dahingeschrieben und hab gesagt, oh nee, ich hab mich vertan, ganz schlimm.

34:45.400 --> 34:49.440
Und hab die bei der Gelegenheit auch gefragt, ob die einen DNS-AP haben und die haben halt

34:49.440 --> 34:53.640
geantwortet, nee, sie haben keine DNS-AP, aber sie mögen das auch nicht, wenn man quasi

34:53.640 --> 34:58.200
die Webseite crawlt, das finden sie nicht so toll. Ja, ja, kommt nicht wieder fair, kommt

34:58.200 --> 35:03.760
nicht wieder, kommt nicht wieder vor. Hi Noob, ein bisschen Jammel werden wir wahrscheinlich

35:03.760 --> 35:08.440
machen müssen denke ich, ja. Tommel mache ich nicht, Jammel. Können auch Tommel machen

35:08.440 --> 35:14.600
meinetwegen. Und da hab ich eigentlich gesagt, ja, kommt nicht wieder vor, mach ich nicht

35:14.600 --> 35:21.040
und dann haben die mich freigeschaltet. So und dann hab ich das Skript genommen und

35:21.040 --> 35:28.600
hab mir gedacht, scheiß drauf, du machst es jetzt trotzdem. Beziehungsweise ich wollte

35:28.600 --> 35:35.960
das Skript dann auch zweckentfremden für eine andere Seite. Und das Problem war, dass

35:35.960 --> 35:41.480
ich das umgebastelt hab, aber an einer Stelle noch mein Domain-Registrar drinne stehen hatte.

35:41.480 --> 35:46.640
Da hab ich's ausgeführt und dann wurd ich nochmal gebannt. Und da hab ich ihnen das

35:46.640 --> 35:50.160
nochmal erklärt, so nach dem Motto, ja, ich hab aus Versehen mein Skript nicht richtig

35:50.160 --> 36:01.400
angepasst, kommt nicht wieder vor, da haben sie mich halt wieder freigeschaltet. Ja also

36:01.400 --> 36:11.440
von wegen, ne, also ich programmier auch öfters totalen Crap zusammen. So und zumindest

36:11.440 --> 36:18.080
hab ich mir dann gesagt, ok, mein Domain-Registrar bietet keine AP an, um DNS-Änderungen zu

36:18.080 --> 36:23.200
machen und ich lauf Gefahr, dass die mich permanent bannen, wenn ich so weitermache.

36:23.200 --> 36:28.120
Also was mach ich? Ich verwende einfach nicht den DNS von meinem Domain-Registrar, sondern

36:28.120 --> 36:32.600
ich verwende das, was die meisten anderen in dem Fall auch verwenden, Cloudflare. Und

36:32.600 --> 36:37.240
das ist total einfach, das zeig ich euch jetzt mal. Also von der Logik her geht das ja so.

36:37.240 --> 36:43.500
Wenn ihr eine Namensauflösung für ein Domain macht, so dann guckt, dann guckt, ganz grob

36:43.500 --> 36:51.120
und einfach gesagt, dann geht euer Rechner an den DNS-Server, der bei ihm hinterlegt

36:51.120 --> 36:55.800
ist. Die meisten Leute haben den DNS-Server zugewiesen bekommen mit ihrer DHCP-Adresse,

36:55.800 --> 37:00.440
die meisten Leute haben ja keine IP und DNS und Gateway-Geschichten selbst mal vergeben,

37:00.440 --> 37:04.120
die kriegen per DHCP, kriegen die eine IP, kriegen eine Gateway vom Router und kriegen

37:04.120 --> 37:08.560
einen DNS. Meistens wird dann der interne DNS vom Router verwendet und der selbst kriegt

37:08.560 --> 37:15.800
bei der Einwahl einen DNS vom Provider. Deswegen, Telekom-Kunden kennen das vielleicht, wenn

37:15.800 --> 37:23.800
ihr euch vertippt bei einer URL, die es nicht gibt, dann kriegt man bei der Telekom manchmal

37:23.800 --> 37:29.600
Werbung angezeigt. Und wie machen die das? Genau über die DNS-Anfragen, die beim Google

37:29.600 --> 37:38.480
DNS kommen. Wenn beim Telekom DNS eine Anfrage ankommt mit einem Domain, die es nicht gibt,

37:38.480 --> 37:42.240
dann redirecten die das auf den Server von ihnen und da ist halt zufälligerweise eine

37:42.240 --> 37:48.520
Suchmaschine mit Werbung. Ich halte das für fragwürdige Praxis, was die Telekom da treibt,

37:48.520 --> 37:52.360
aber ja, ich weiß, man kann es deaktivieren, aber es macht die Telekom. Dann sieht man,

37:52.360 --> 37:57.600
normaler Weg ist von eurem Rechner zu eurem Router, von eurem Router zu eurem Provider-DNS.

37:57.600 --> 38:04.800
Euer Provider-DNS hat so ziemlich alles, was es so gibt, größere Sachen weltweit gecached

38:04.800 --> 38:11.080
und wenn euer Provider-DNS das nicht gecached hat, dann geht er zur Top-Level-Domain und

38:11.080 --> 38:15.120
von dort wird dann geguckt, okay, wer ist denn für Progas zuständig, also wird erstmal

38:15.120 --> 38:20.280
geguckt, wer ist für XYZ zuständig, dann wird geguckt, wer ist für Progas zuständig

38:20.280 --> 38:26.240
und so wird sich quasi an den Domain-Namen abgearbeitet, bis man irgendwann dazu kommt,

38:26.240 --> 38:34.400
dass Progas XYZ bei PorkBan registriert ist und PorkBan eben die Standard-DNS-Server,

38:34.400 --> 38:41.920
die sie hier verwendet. So, so funktioniert das bei einem Name Lookup. Das kann man sich

38:41.920 --> 38:48.040
auch einfach angucken, wenn man jetzt hier mal auf Linux geht und sagt Dick Progas, ne,

38:48.040 --> 38:53.840
XYZ, es kann auch sein, dass es überhaupt nicht funktioniert, wie? OK, es, yep Dick,

38:53.840 --> 39:02.480
warum hab ich keinen Dick installiert, was man DNS-Utils oder sowas, was muss man dafür

39:02.480 --> 39:15.240
installieren? Beides fehlt man schon, NS-Lookup fehlt auch, Bind-Tools, Bind-Utils, Bind-Utils,

39:15.240 --> 39:28.240
Bind-Tools, Bind-Tools, ist exzellent. So, das kann man auch überprüfen, Progas.xyz

39:28.240 --> 39:35.200
gibt es nicht. Wir fragen den Google-DNS, das ist 8.8.8.1 und der Google-DNS sagt, aha,

39:35.200 --> 39:45.080
guck mal da, keine Ahnung was es ist, allerdings, ich weiß, dass diese DNS-Server dafür zuständig

39:45.080 --> 39:48.760
sind. So, wir können jetzt noch Cloudflare fragen, Cloudflare könnte sein, dass sie

39:48.760 --> 39:52.360
das gecasht haben, weil ich hab das vorher mal kurz ausprobiert, nein, haben es auch

39:52.360 --> 39:58.720
nicht gecasht. So, und was ich jetzt machen muss, dass das funktioniert, also sprich,

39:58.720 --> 40:03.920
dass Cloudflare für mein DNS zuständig ist und nicht mehr mein Domain-Registrar, muss

40:03.920 --> 40:11.800
ich hier die autoritiven, die Nameserver ändern, die für meine Domain zuständig

40:11.800 --> 40:16.240
sind. Dort muss ich jetzt Domains, also das sind die Server, die letztendlich auch in

40:16.240 --> 40:21.160
der Kette gefragt werden, wer für was zuständig ist und die muss ich umbiegen auf Cloudflare.

40:21.160 --> 40:24.840
Das funktioniert folgendermaßen, das ist in Cloudflare ziemlich gut gemacht, man sagt

40:24.840 --> 40:29.920
einfach, hallo Cloudflare, ich möchte bei euch eine neue Domain anlegen, also nicht

40:29.920 --> 40:34.160
eine neue Domain registrieren, sondern sagen, Cloudflare, kümmere dich mal um folgende

40:34.160 --> 40:40.520
Domain. So, äh, Moment, nicht Support, was mache ich denn bei Support? So, genau, you

40:40.520 --> 40:47.600
don't have any websites, add website, sag mal, progress.xyz, das geht dementsprechend ja

40:47.600 --> 40:54.400
auch nur, wenn mir die Domain gehört, also ich könnte da reinschreiben, google.de, aber

40:54.400 --> 40:59.720
ich bin nicht in der Lage, die DNS-Server, die für Google, also in dem Fall hier für

40:59.720 --> 41:06.840
Google.de zuständig sind, umzubiegen auf Cloudflare. Dazu müsste ich bei Google sein. Ich könnte

41:06.840 --> 41:10.640
Cloudflare zwar sagen, ich möchte google.de anlegen, aber nachdem ich die Domainserver

41:10.640 --> 41:20.280
nicht umbiegen kann, wird das nicht funktionieren. So, also legen wir mal meine Domain an, progress.xyz,

41:20.280 --> 41:34.040
add site, so, dann wird Cloudflare jetzt ein bisschen rumrödeln, drei Stunden später,

41:34.040 --> 41:39.640
dann muss man den free plan selecten, weil sonst kostet Geld, und das wollen wir nicht,

41:39.640 --> 41:44.360
was auch übrigens reicht, Cloudflare ist komplett kostenlos in der Basic-Variante, wenn man

41:44.360 --> 41:50.680
einfach nur DNS machen will, und auch das Basic-Proxying kostet glaube ich nichts, erst

41:50.680 --> 41:56.160
wenn man eine gewisse Anzahl von Traffic-Domains hat und sonst was, also man kann Cloudflare

41:56.160 --> 42:03.000
ohne Probleme kostenlos verwenden, und zum Glück ist Cloudflare so nett und erlaubt

42:03.000 --> 42:10.120
das verwenden des Dienstes ohne dass man ein Konto hinterlegen muss, also sprich bei AWS

42:10.120 --> 42:18.880
und bei Azure ist es so, dass man immer, auch wenn man im Free-Kontingent bleibt, bei Azure

42:18.880 --> 42:22.320
weiß ich gar nicht wie hoch das Free-Kontingent ist, aber bei Google beispielsweise ist es

42:22.320 --> 42:28.160
glaube ich 300 Dollar im Monat, und man muss trotzdem eine Payment-Option hinterlegen,

42:28.160 --> 42:33.600
obwohl man im Free-Kontingent ist, das ist bei Cloudflare nicht so, ich kann einfach

42:33.600 --> 42:44.320
sagen, ok, oh, habe ich jetzt Free angeklickt, ja sonst müsste ich ja was bezahlen, so,

42:44.320 --> 42:52.680
dann guckt Cloudflare jetzt nach, ob es da schon DNS-Einträge für gibt, und die werden

42:52.680 --> 43:01.600
festgestellt, naja, da gibt es nix für, es gibt aber halt, ja gibt es nix für, Progress

43:01.600 --> 43:07.440
XYZ, gibt es nix, wir legen auch erstmal nix an, wir wollen ja erstmal nur die Seite

43:07.440 --> 43:13.160
adden, DNS-Records können wir später adden, so, und jetzt kommt das, was ich machen muss,

43:13.160 --> 43:20.400
der sagt mir, ok, who is, sagt, mein Domain-Registrar ist dafür zuständig, ich muss jetzt bei meinem

43:20.400 --> 43:24.960
Domain-Registrar hinterlegen, dass ich nicht mehr die hier verwenden will als DNS-Server,

43:24.960 --> 43:30.320
sondern die hier, nämlich den Lars und Nia von, das sind halt die Nameserver-Namen von

43:30.320 --> 43:37.840
Cloudflare, so, probieren wir uns das mal, Lars und was hier, Nia, nehmen wir mal Copy

43:37.840 --> 43:52.920
Pasta und machen das dort rein, so, und das dauert jetzt eine halbe Stunde, ungefähr,

43:52.920 --> 43:59.120
so, und jetzt habe ich bei meinem Domain-Registrar umgebogen, dass ich nicht mehr seine, dass

43:59.120 --> 44:08.880
nicht mehr seine Server für zuständig sind, sondern, also für meine Domain, sondern die

44:08.880 --> 44:13.800
Nameserver von Cloudflare, das dauert jetzt noch ein bisschen bis das ganze propagiert

44:13.800 --> 44:18.360
ist, also sprich, wenn ich hier abfrage, werdet ihr sehen, ok, es ist immer noch, es ist immer

44:18.360 --> 44:24.840
noch Porkban, das dauert so 10 Minuten, Viertelstunde, halbe Stunde oder sowas, dann ist das propagiert,

44:24.840 --> 44:32.760
das sieht man dann auch hier in Cloudflare, wenn das alles funktioniert hat, dementsprechend

44:32.760 --> 44:37.560
warten wir jetzt mal ab, ist eigentlich ziemlich easy, ich gucke hier alle paar Minuten mal

44:37.560 --> 44:42.720
nach, bis das sich geändert hat und in der Zwischenzeit, bis die DNS-Geschichten aktiv

44:42.720 --> 44:47.680
sind, können wir anfangen mit unserer VM, so, wir haben uns nämlich bei Digital Ocean,

44:47.680 --> 44:55.320
eine Linux Ubuntu 20.04 angelegt, ja, das könnte man tatsächlich machen, das ist eine

44:55.320 --> 45:05.400
gute Idee, können wir hier zugucken, wobei ich gar nicht weiß, ob das so eine gute Idee

45:05.400 --> 45:11.920
ist, IP leaked, MonkaS, schau mal da, ich weiß gar nicht, ob das so eine gute Idee ist,

45:11.920 --> 45:18.400
weil dann reflechst sich ja auch jedes Mal mein DNS-Cache, vielleicht lass ich mal alles

45:18.400 --> 45:23.040
timeouten, wobei, nee, wenn ich direkt gegen 8888 gehe, hat ja mein DNS-Cache nichts damit

45:23.040 --> 45:28.080
zu tun, da können wir uns tatsächlich, komm, bevor mich Google noch irgendwie blacklistet,

45:28.080 --> 45:35.200
weil ich zu viele DNS-Anfragen spam, wir warten einfach mal ab, wenn wir können n sagen,

45:35.200 --> 45:38.560
sonst, wir gucken einfach mal nachher weiter, wir machen jetzt hier, wir machen jetzt erstmal

45:38.560 --> 45:44.840
weiter mit der Linux-Kiste, so, wir haben uns bei Digital Ocean, die billigste Linux-VM

45:44.840 --> 45:58.520
ever angelegt, 0,7 Cent die Stunde, also wahnsinnige High-Performance-Kiste, die man bekommt für

45:58.520 --> 46:03.680
0,7 Cent die Stunde und da fangen wir jetzt schon mal an, drauf Zeugs zu installieren,

46:03.680 --> 46:06.840
was wir später für brauchen, wir können jetzt ja mit Cloudflare und Domains nicht

46:06.840 --> 46:12.800
großartig weitermachen, weil wir noch drauf warten, bis die DNS-Geschichte durch ist, bis

46:12.800 --> 46:21.240
die Änderungen durch sind, Tainser verschenkt 3 Subscriptions, gehts wieder los Leute, exzellent,

46:21.240 --> 46:29.800
Dankeschön, wer kriegt denn was, wer kriegt denn was, Rionikfire kriegt eins, Yannik00000,

46:29.800 --> 46:37.400
Phantimbo, exzellente Subscriptions hier, da platzt der Kopf gleich wieder, Stonks, also

46:37.400 --> 46:47.240
was von, das ist die IP von unserer Linux-Kiste, wir können da später auch per Progas XYZ

46:47.240 --> 46:57.000
drauf, allerdings aktuell noch nicht, weil die Namensauflösung nicht funktioniert, yes,

46:57.000 --> 47:05.360
exzellent, so, okay mein Key ist im Invalid-Format, aber Connecten geht trotzdem, so das wichtigste

47:05.360 --> 47:11.600
was man erstmal machen muss, man muss erstmal den Server umbenennen, ohne gehts nicht,

47:11.600 --> 47:19.880
also als erstes ist, wir gehen mal nach etc-hostname und der Server heißt ab jetzt Qt-Chat, das

47:19.880 --> 47:23.800
ist schonmal das allerwichtigste, so was man auch nicht vergessen darf, wenn man den Server-Namen

47:23.800 --> 47:35.240
ändert, wenn man den Server-Namen ändert, dann muss man auch hier das ganze anpassen,

47:35.240 --> 47:46.160
Qt-Chat, sonst packt Ubuntu rum, muss den Cooldown rausnehmen, Hä, Sebaro, was hast

47:46.160 --> 48:01.680
du gemacht, hast du irgendein Nightbot-Kommando angelegt, ja ich sehs, weißt du was FRA 1,

48:01.680 --> 48:05.840
FRA bedeutet, dass die Kisten in Frankfurt stehen, das ist irgendeine interne Bezeichnung

48:05.840 --> 48:11.680
von Digital Ocean, aber das ist Standort Frankfurt, so und jetzt machen wir was, was man bei Linux

48:11.680 --> 48:18.480
machen muss, das muss man nicht unbedingt machen, also, man kann glaub ich auch hostname-f machen

48:18.480 --> 48:22.440
oder sowas, aber wir rebooten mal, dann übernimmt der alles und fährts Netzwerk neu hoch und

48:22.440 --> 48:35.600
gut ist, wir gucken mal was unser Dick macht, unser Dick geht immer noch auf die Digital

48:35.600 --> 48:47.080
Ocean, äh auf die, auf die PogPan und nicht auf Cloudflare-DNS, hat man bei Digital Ocean

48:47.080 --> 48:51.880
auch IPv6, ja, hab ich noch nie ausprobiert, aber ziemlich sicher, muss ich hier vielleicht

48:51.880 --> 49:05.840
erst noch OK klicken, dass das funktioniert, dann Check Name-Servers, oh Setup Later, ja

49:05.840 --> 49:11.920
Progress is not, Progress is not yet active, ok, dann hat es noch nicht funktioniert, da

49:11.920 --> 49:15.680
müssen wir wie gesagt, das dauert ne halbe, das dauert bis zu ne halbe Stunde bis das

49:15.680 --> 49:20.640
propagiert ist, dass die Name-Servers sich geändert haben, aber wir sehens ja hier bei

49:20.640 --> 49:28.000
meinem so Main-Registrar, ähm, können wir das Ganze mal refreshen, ich hab's ja geändert,

49:28.000 --> 49:40.600
also sprich das passt, Progress XYZ zeigt jetzt auf Last NS Cloudflare, Nier NS Cloudflare,

49:40.600 --> 49:44.680
schreiben wir ja hier, dass man das machen soll, dann warten wir mal ab, bis das Ganze

49:44.680 --> 49:48.920
hier funktioniert, wir können mal gucken, ob Cloudflare selbst es schon gecheckt hat,

49:48.920 --> 49:54.320
ne, Cloudflare selbst ist auch nicht gecheckt, wahrscheinlich hat es mein Domain-Provider

49:54.320 --> 50:01.360
auch noch gar nicht gecheckt, ok, also weiter im Text, wir haben jetzt den Server gerade

50:01.360 --> 50:06.720
neu gestartet, hier haben wir meinen PSSH wieder drauf, und das erste was wir erstmal

50:06.720 --> 50:13.160
machen ist ein Update, das was wir machen ist ein Update gefolgt von einem Upgrade,

50:13.160 --> 50:16.960
das macht man bei allen Servern, wenn man sie frisch installiert hat, dass man auf dem

50:16.960 --> 50:21.600
aktuellen Stand ist, und gerade bei Servern die public im Internet erreichbar sind, weil

50:21.600 --> 50:26.200
ansonsten ist das ziemlich fail, installierst du dann alles schön mit Kubernetes, ne, wir

50:26.200 --> 50:32.640
machen das für einen Heimgebrauch, äh, passender, wir nehmen, ich will nicht sagen oldschool,

50:32.640 --> 50:36.840
weil oldschool ist es nicht, wir nehmen die klassische Variante aus Docker und Docker

50:36.840 --> 50:45.800
Compose, das ist nämlich deutlich praktikabler für Leute daheim als irgendwelche Kubernetes-Geschichten,

50:45.800 --> 50:50.480
unten ist ein Recheck-Button, ja das bringt aber nichts zu rechecken solang es mein Domain-Registrar

50:50.480 --> 50:55.240
noch nicht umgeschrieben hat, das wie gesagt, das kann durchaus mal eine halbe Stunde dauern,

50:55.240 --> 51:05.440
aber nicht viel länger, so, jetzt lassen wir den erstmal updaten, die Ubuntu-Kiste,

51:05.440 --> 51:10.720
wie funktionieren Hausnamen im Netzwerk, kennt der Router immer alle Hausnamen, ne, also

51:10.720 --> 51:16.040
dein Router, wenn der ein DNS drauf hat, dann, äh, hat er einen DNS-Cache für, was, was

51:16.040 --> 51:23.560
ist die Fault, acht Minuten oder so bei DNS, fünf Minuten, ähm, ok, also, der möchte

51:23.560 --> 51:29.960
nicht updaten, weil meine SSHD-Config sich geändert hat, warum, showdiff, äh, permit

51:29.960 --> 51:33.560
rootlogging, yes, permit rootlogging without password, ja, das will ich auf jeden Fall

51:33.560 --> 51:44.200
haben, nicht, dass da noch einer mein, rootpassword, äh, hacksword, ja, rootlogging ohne Passwort,

51:44.200 --> 51:50.800
vollkommen ok, das rootpassword zu hacksel mit ein bisschen schwierig, ich glaub das ist

51:50.800 --> 52:01.920
standardmäßig irgendwie 28-stellig oder so, was macht Digital Ocean, immer noch nicht,

52:01.920 --> 52:24.520
du, du, du, du, du, I'm in, ist klar Leute, glaubt euch nicht, denied, ne, Passwort aus

52:24.520 --> 52:30.280
ist nicht deaktiviert gewesen, jetzt ist Passwort aus deaktiviert, bis eben war es noch aktiviert,

52:30.280 --> 52:39.040
zumindest laut config, weil er hat eben gesagt beim Update, er möchte permit rootlogging,

52:39.040 --> 52:45.240
yes zu permit rootlogging without password, hast du schon mal Artix Linux ausprobiert,

52:45.240 --> 52:57.600
ne, oder Antix, meinst du Antix, Debian ohne Systemd, oh, jetzt fangen die wieder mit sowas

52:57.600 --> 53:11.560
an, ich dachte, das haben wir hinter uns, ich dachte, Artix, nein, auf Artstellung basiert,

53:11.560 --> 53:20.320
mit OpenRC, das sind die Systemd Hater, ja, ich weiß nicht, ich hab mich da mittlerweile

53:20.320 --> 53:26.040
eigentlich gesagt dran gewöhnt, ich find auch vieles ein bisschen zu magic unter Systemd,

53:26.040 --> 53:29.320
oh, ich hab jetzt da keine großartigen Schmerzen mit, so, wir haben ein Update gemacht, wir

53:29.320 --> 53:32.640
müssen noch einmal neu starten, dass die Updates geladen werden, und dann können wir anfangen,

53:32.640 --> 53:38.080
dann müssen wir docker compose, docker, und konfigurieren vielleicht schon ein bisschen

53:38.080 --> 53:46.280
was, was macht Systemd, also die einfachste Erklärung ist dein System starten, allerdings

53:46.280 --> 53:51.920
macht Systemd noch gerade mehr als dein System starten, also früher war das so, du hast

53:51.920 --> 53:57.040
unter Linux jede Menge Shell-Skripte gehabt, die wurden nach und nach abgearbeitet und haben

53:57.040 --> 54:01.360
halt alles gestartet, was man gebraucht hat, dass das System lauffähig ist, da war da so

54:01.360 --> 54:10.760
was drinne wie in den Multi-User-Mode switchen und Netzwerk hochfahren und Login-Geschichten

54:10.760 --> 54:16.120
starten und sowas, war da halt in einem Startup-Skript drinne, und das war relativ viel, also wenn

54:16.120 --> 54:20.080
du ein Linux-System gebootet hast, mit dem alten Init, war das relativ viel Skripte und

54:20.080 --> 54:26.840
das hat auch eine Weile gedauert, Systemd hat gesagt, ok, wir machen was ähnliches,

54:26.840 --> 54:31.760
nur, dass wir noch Abhängigkeiten definieren können und keine klassischen Shell-Skripte

54:31.760 --> 54:37.360
untereinander mehr verlinken, und dementsprechend kann Systemd dein System quasi parallelisiert

54:37.360 --> 54:42.520
starten, und ist eigentlich auch das, wofür Systemd grundsätzlich da ist, dein System

54:42.520 --> 54:48.840
starten, die Sache ist bloß die, dass Systemd mittlerweile noch viel mehr Aufgaben übernommen

54:48.840 --> 54:57.880
wird, von Hardware-Erkennung teilweise bis DHCP fürs Netzwerk, Bootmanager für Systemd

54:57.880 --> 55:05.240
gibt's auch noch, also Systemd breitet sich aus überall hin, das ist auch so das, wo

55:05.240 --> 55:10.160
die Leute, die hauptsächliche Kritik immer an Systemd ist, dass Systemd das zu viel machen

55:10.160 --> 55:14.360
würde, wobei Systemd selbst recht modular ist, also man muss den ganzen Kram nicht verwenden.

55:14.360 --> 55:22.880
So, jetzt haben wir unsere Ledungskiste am Start, und wir gucken mal kurz, was Cloudflare

55:22.880 --> 55:32.360
macht, ob's Cloudflare schon hinkriegt, immer noch nicht, ah, guck mal, es propagatet, langsam

55:32.360 --> 55:39.160
aber sicher, je nachdem auf welchem DNS-Server du rauskommst, ist es schon das alte und ist

55:39.160 --> 55:45.320
es mal das neue, guck's, also bei der Google DNS 8888, das ist ja irgendein Loadbalancer,

55:45.320 --> 55:49.280
wo man rauskommt, wo unter der Haube unterschiedliche DNS-Server sind, die haben ja nicht einen

55:49.280 --> 55:56.840
DNS-Server da stehen, für alle Anfragen, die das Ding kriegt, also, das müssen wir

55:56.840 --> 56:00.400
noch 2-3 Minuten warten, dann haben's alle Server drinne und alle Server kapiert, dass

56:00.400 --> 56:02.400
wir jetzt Cloudflare für unsere Domain verwenden wollen.

56:02.400 --> 56:07.960
Gut, also wir installieren jetzt mal, damit wir das hier machen können, wie gesagt, wir

56:07.960 --> 56:12.640
sind jetzt auf dieser Kiste hier in der Zeichnung, da, auf dem Ubuntu-Server, wir installieren

56:12.640 --> 56:17.200
jetzt Docker drauf, damit wir unsere Container starten können und Docker Compose, dass wir

56:17.200 --> 56:23.880
Docker reproduzierbar konfigurieren können, das ist ne Sache, wenn man das im Heimbereich

56:23.880 --> 56:27.960
macht, ist das nice to have, ich zeig da euch gleich mal auch mal, was die Vorteile davon

56:27.960 --> 56:34.240
sind, aber man lernt dafür einiges, was man auch auf der Arbeit verwenden kann, weil,

56:34.240 --> 56:38.640
es mag jetzt banal aussehen, man hat ein Konfig-File und dann sagt man Start und Docker Compose

56:38.640 --> 56:42.640
macht alles, was in diesem Konfig-File steht, allerdings, wir wären nicht in der IT-Welt,

56:42.640 --> 56:48.040
wenn's dafür nicht einen super krassen Buzzword-Namen gäbe und das Ganze läuft unter Infrastructure

56:48.040 --> 56:54.960
as Code, klingt natürlich toll, ja, das natürlich dann noch gepaart mit Serverless Microservices

56:54.960 --> 57:05.080
in der Cloud, dann platzt der Kopf, mehr Buzzwords, also installieren wir erstmal Docker Compose,

57:05.080 --> 57:09.800
ihr werdet auch gleich sehen, was was macht, ich installiere jetzt erstmal, dass man sieht

57:09.800 --> 57:17.160
und Blockchain natürlich noch, richtig, Idee für den nächsten Stream Twitch-Statistiken

57:17.160 --> 57:35.840
analysieren. Ja, weil's mir besser gefällt. Ja, kann man, kann man, also es funktioniert

57:35.840 --> 57:42.480
grundsätzlich anders, aber es ist sowas ähnliches wie Ansible für Docker-Container, das betrifft,

57:42.480 --> 57:47.240
beschreibt's eigentlich ganz gut. Mir gefällt Ubuntu als Serversystem schlicht und ergreifend

57:47.240 --> 57:51.840
besser als die anderen. Auf der Arbeit verwenden wir nur Red Hat, also als CentOS in dem Fall

57:51.840 --> 58:02.680
und dementsprechend, ich verwende privat halt dann für alles, was ich so hab, Ubuntu Server.

58:02.680 --> 58:12.760
Jungen Sieben Snorlax abonniert Stufe 1 zum ersten Mal Subscriber, hei hei hei. Nein,

58:12.760 --> 58:21.080
Moment, ist doch gar kein Prime, ist ja, ist ja ein richtiger, echter. Exzellent, exzellent,

58:21.080 --> 58:35.720
wahrlich exzellent. So, das war jetzt genug Huldigung für den ersten Sub. Du hast gesagt,

58:35.720 --> 58:39.560
dass du Subs, siehste, da warst du das doch gestern, der das gesagt hat. Hab ich doch

58:39.560 --> 58:46.040
richtig in Erinnerung gehabt, war ich doch nicht so low-brain. Hat deine Anfrage bezüglich

58:46.040 --> 58:50.240
Programmierprojekte auf der Arbeit Erfolg gehabt? Gut, dass du mich dran erinnerst,

58:50.240 --> 58:52.840
ich hab das schon wieder voll vergessen und mein Chef hat das auch wieder voll vergessen.

58:52.840 --> 58:57.520
Weil wir hatten schon unsere nächste Rücksprache und wir haben beide nichts mehr dazu gesagt.

58:57.520 --> 59:02.400
Gut, der Twitch Chat, Twitch Chat ist halt Big Brain, der erinnert mich an solche Sachen.

59:02.400 --> 59:12.800
Klassiker, ja. So, also, ähm, wir haben Docker Compose installiert, jetzt können wir anfangen

59:12.800 --> 59:17.800
das Ganze zu benutzen. Also unser Ziel ist ja, dass wir jetzt auf diesem Ubuntu Server

59:17.800 --> 59:23.800
einen Docker Container, also Docker zum Laufen bekommen und darin einmal Traffic starten

59:23.800 --> 59:31.880
als Load Balancer bzw. Reverse Proxy und so einen Hallo Welt Container oder sowas. So,

59:31.880 --> 59:35.680
und das ist tatsächlich ziemlich simpel, allerdings, vorher müssen wir noch ein paar Kleinigkeiten

59:35.680 --> 59:40.640
erledigen, dass das Ganze, dass das Ganze gut funktioniert. Wir fügen erstmal den User

59:40.640 --> 59:46.320
hinzu, weil man Container und das ganze Zeug als Root machen ist jetzt nicht unbedingt

59:46.320 --> 59:52.800
so, wie sagt man so schön, best practice. Ähm, deswegen machen wir jetzt erstmal add

59:52.800 --> 01:00:04.080
user, Max, new password 123456, click w. Wobei sollte ich das lieber, sollte ich das machen?

01:00:04.080 --> 01:00:11.680
Moment, ich muss mal kurz was checken. Ist Password Login aktiviert? Nicht dass jetzt

01:00:11.680 --> 01:00:18.320
gleich sich wirklich einer einloggt, Alter. Max, Perperition Denied Public Key. Ok, dann

01:00:18.320 --> 01:00:24.280
ist alles gut, dann kann ich das machen. Oh, jetzt hab ich's verkackt, jetzt hab ich abgebrochen.

01:00:24.280 --> 01:00:31.000
Äh, su, Max, ok. Wir machen jetzt allerdings noch eine Sache, wir disablen den User auch

01:00:31.000 --> 01:00:40.200
gleich wieder und sagen PassWD minus L ist es glaube ich, Max und das disabelt den interaktiven

01:00:40.200 --> 01:00:45.040
Login und das Anmelden mit dem User. Allerdings als Root können wir immer noch dieser User

01:00:45.040 --> 01:00:51.400
werden und es ist ja best practice, dass man nicht Docker und Zeugs als Rootlauf lässt.

01:00:51.400 --> 01:00:55.600
Warum nicht Nginx? Hat den einfachen Grund, weil Traffic eine super Docker Integration

01:00:55.600 --> 01:01:00.240
hat. Das kann sich automatisch auslesen, was für Docker Container laufen, gucken mit welchen

01:01:00.240 --> 01:01:05.200
Domains die konfiguriert werden sollen, automatisch Zertifikate dafür holen und dann intern noch

01:01:05.200 --> 01:01:12.800
das Proxen auf die Container automatisch machen. Kann man da alles mit Nginx machen? Gut, Docker

01:01:12.800 --> 01:01:18.920
PS, guck mal mal, geht nicht, weil ich muss meinen User noch in die Docker Gruppe hinzufügen.

01:01:18.920 --> 01:01:28.360
Ah, minus G, Docker Max, passt das? Docker PS, exellent. So, wir sind auf dem Ubuntu

01:01:28.360 --> 01:01:32.320
Server drauf, Docker läuft und wir können jetzt ein paar Sachen anlegen. Wir machen

01:01:32.320 --> 01:01:38.640
uns mal ein Ordner, nennen wir mal Compose, Compose und da erstellen wir jetzt einen Docker

01:01:38.640 --> 01:01:46.080
Compose Jammel oder Jimmel oder so, je nachdem, wie man es will. So, und in diese Konfig-Datei

01:01:46.080 --> 01:01:51.120
schreiben wir jetzt rein, was wir für Services verwenden wollen und wie die konfiguriert

01:01:51.120 --> 01:01:59.600
werden sollen. Der große Vorteil davon ist, also, man wird es gleich im Detail sehen,

01:01:59.600 --> 01:02:06.840
wie das funktioniert. Der große Vorteil davon ist, man hat jegliche Konfig, was Container

01:02:06.840 --> 01:02:13.840
und Load Balancing und Zertifikat angeht, in einem Konfig-File. Das kann man versionieren

01:02:13.840 --> 01:02:20.800
in Git und wenn man einen neuen Server installiert, clone man sich einfach sein Git-Repo, sagt

01:02:20.800 --> 01:02:26.240
Docker Compose ab und es ist wieder alles wie vorher. Soweit die Theorie. Es gibt ein paar

01:02:26.240 --> 01:02:30.160
Falschschritte bei, nicht so einfach, wie es sich jetzt anhört, aber das ist prinzipiell

01:02:30.160 --> 01:02:33.960
der riesen Vorteil davon, dass man alles schön in einem Konfig-File hat und nicht, dass man

01:02:33.960 --> 01:02:38.280
anfangen muss, die Sachen von Anfang an zu konfigurieren. Das nächste ist, was wir hier

01:02:38.280 --> 01:02:46.280
bauen werden, das mit dem Reverse-Proxy, ist der Vorteil, dass man nach außen hin nur einen

01:02:46.280 --> 01:02:52.680
Einstiegspunkt hat. Infrastructure als Code sein Vater. Ja, das trifft es eigentlich

01:02:52.680 --> 01:02:57.720
ganz gut. Ist ja so das Hype-Wort aktuell, aber das ist schon recht Oldschool-Variante.

01:02:57.720 --> 01:03:02.400
Gibt es schon lange, aber im Heimbereich finde ich, ist immer noch das Beste, was man machen

01:03:02.400 --> 01:03:06.880
kann. Jaml-File, Docker Compose und gut ist. Da muss man gar nicht mit irgendwelchen überladenen

01:03:06.880 --> 01:03:11.360
Dingern anfangen, die eher dafür sorgen, dass man sich Sachen kaputt macht und nicht wieder

01:03:11.360 --> 01:03:15.400
repariert bekommt daheim. So und das Schöne ist, wenn man das mit einem Reverse-Proxy

01:03:15.400 --> 01:03:19.040
vor den einzelnen Servicers macht. By the way, da fehlen nämlich noch ein paar Pfeile

01:03:19.040 --> 01:03:27.680
zwischen dem hier und dem. Kann ich denn von hier? Er ist übrigens umgedreht. What the

01:03:27.680 --> 01:03:39.920
fuck macht das? Kann ich nicht von hier, ich will von hier einen Pfeil machen. Das ist

01:03:39.920 --> 01:03:49.920
Low-Brain-Software. Also so ist es ja eigentlich. Das heißt, ich hab von außen nur einen Einstiegspunkt.

01:03:49.920 --> 01:04:02.400
Das führt dazu, dass man einen sicheren Einstiegspunkt hat, wo man weiß, dass der auch für sowas

01:04:02.400 --> 01:04:08.440
ausgelegt ist. Also sprich, da muss man sich keinen, also setz mal einen gehärteten Einstiegspunkt,

01:04:08.440 --> 01:04:13.080
also sprich, die Leute connecten sich nicht da drauf, da drauf, da drauf, die Leute connecten

01:04:13.080 --> 01:04:19.240
sich da drauf und werden hierhin weitergeproxied. Das heißt, die müssen erstmal hier durch

01:04:19.240 --> 01:04:24.000
und wenn man hier beispielsweise eine Basic-Authentifizierung mit Passwort konfiguriert hat, kommen die

01:04:24.000 --> 01:04:28.520
Leute auch erst da raus, wenn sie hier das richtige Passwort eingegeben haben. Also sprich,

01:04:28.520 --> 01:04:34.120
man kann dahinter auch Dienste betreiben, die keinerlei Authentifizierung haben und

01:04:34.120 --> 01:04:40.360
ihnen damit relativ einfach eine Authentifizierung verpassen und von außen ist nichts erreichbar

01:04:40.360 --> 01:04:48.600
dieser Sachen, nur hier über den Reverse-Proxy. Was, wenn ich Traffic lokal mache mit dem

01:04:48.600 --> 01:04:53.680
Proxy, ist die Domain nur lokal rootbar oder auch im Internet, also Domains sind prinzipiell

01:04:53.680 --> 01:04:59.000
nicht rootbar, IP-Adressen sind rootbar und Domains lösen zu IP-Adressen auf und wenn

01:04:59.000 --> 01:05:06.800
die IP-Adresse rootbar ist, dann funktioniert's. Kann Traffic auch loadbalancing? Ja, aber

01:05:06.800 --> 01:05:16.640
habe ich noch nie gemacht. Ein weiterer Vorteil ist, dass die Konfiguration weiterer Services,

01:05:16.640 --> 01:05:19.560
also mal angenommen, ich will hier dann noch einen Fileserver, okay Fileserver ist ein

01:05:19.560 --> 01:05:23.000
doofes Beispiel dafür, ich will hier irgendwie noch einen zweiten, noch einen dritten Webserver

01:05:23.000 --> 01:05:27.280
haben, ich will hier noch irgendwelche Dashboards haben, ich will hier noch einen Grafana haben,

01:05:27.280 --> 01:05:35.680
ein Prometheus, was auch immer, solche Service-Container dahinter sind extrem easy erstellt und ich

01:05:35.680 --> 01:05:41.680
muss mir keine Gedanken machen, dass ich irgendwie mein System zerschieße oder angreifbar mache,

01:05:41.680 --> 01:05:45.560
weil ich hier an meinem Reverse-Proxy-Config gar nichts großartig ändere, ich starte einfach

01:05:45.560 --> 01:05:50.920
einen neuen Backend-Container und der wird dann geproxied und gut ist. Und ein weiterer

01:05:50.920 --> 01:05:55.440
riesiger Vorteil davon ist auch, man kann die Dinge hier relativ einfach updaten, es gibt

01:05:55.440 --> 01:06:01.320
sogar einen fertigen, es gibt sogar ein fertiges, fertigen Docker-Container, der andere Container

01:06:01.320 --> 01:06:14.120
updatet, nach Regeln, die man vorgibt. Anno schreibt, endlich Feierabend, heute Prot-Deployment

01:06:14.120 --> 01:06:21.240
war bei uns, äh warte mal, was ist heute Mittwoch, war bei uns gestern, ähm, bei dem so ziemlich

01:06:21.240 --> 01:06:26.200
alles schief ging, Q hat gefehlt, wodurch wir dann einen ungewollten Festplatten-Benchmark

01:06:26.200 --> 01:06:34.520
hatten, 16 GB Log-File in 4 Minuten, ach ja, einfach mal ein paar SSDs kaufen, ne, aber

01:06:34.520 --> 01:06:40.320
am Ende ist doch hoffentlich alles gut gegangen, oder? Ich sag mal, kann das sein, dass die

01:06:40.320 --> 01:06:46.800
Playlist vorbei ist? Was ist hier los, gleich nochmal, excellent Playlist, ähm, genau und

01:06:46.800 --> 01:06:51.000
Auto-Update ist auch ein Vorteil davon. So und damit ihr jetzt mal eine bessere Vorstellung

01:06:51.000 --> 01:06:55.400
bekommt davon, was man, wie das Ganze funktioniert. Ich muss dazu sagen, ich guck ein bisschen

01:06:55.400 --> 01:07:00.000
ab, ich schreib jetzt diese Config-Datei nicht blind oder so, ähm, weil ganz aus dem Kopf

01:07:00.000 --> 01:07:04.880
krieg ich's auch nicht, ich guck ein bisschen ab. Ähm, kann alles easy in einem Docker-Container,

01:07:04.880 --> 01:07:08.800
also Wasserfreak fragt, kann alles easy in einem Docker-Container installiert werden,

01:07:08.800 --> 01:07:15.400
insbesondere TS-Server, Minecraft-Server? Zum größten Teil kann alles, also das meiste

01:07:15.400 --> 01:07:19.320
kann in einem Docker-Container installiert werden. Es gibt ein paar Ausnahmen, es gibt

01:07:19.320 --> 01:07:23.160
ein paar Ausnahmen. Zum Beispiel, wenn du spezielle Kernel-Modulo brauchst, dann geht

01:07:23.160 --> 01:07:30.600
das im Docker-Container nicht. Weil Docker-Container können, also Docker-Container sind ja, das,

01:07:30.600 --> 01:07:34.440
Container ist eben ein total doofes Wort. Container suggeriert ja irgendwie, als wäre

01:07:34.440 --> 01:07:38.080
das ein eigenes System oder so, ist das ja gar nicht richtig. Also es ist ein ganz normaler

01:07:38.080 --> 01:07:42.520
Prozess im Host-Kernel, wie alles andere auch, nur dass noch ein paar Namespaces und

01:07:42.520 --> 01:07:46.360
Seagroups drumherum sind, also Container in dem Sinn ist das ja eigentlich gar nicht,

01:07:46.360 --> 01:07:50.800
wir nennen es halt nur so. So, und nachdem das ein ganz normaler Prozess ist, der auf

01:07:50.800 --> 01:07:59.040
dem Host-Kernel läuft, kannst du auch keine Software im Docker-Container verwenden, das

01:07:59.040 --> 01:08:01.560
irgendwelche Kernel-Module laden will oder so, das funktioniert nicht.

01:08:01.560 --> 01:08:08.640
Lass dir den Code vom Chat ansagen. Wenn ich mir vom Chat sagen lasse, was ich programmieren

01:08:08.640 --> 01:08:16.280
soll, dann wird das eher Monarch-S. So, und das was du vorhast, TeamSpeak und Minecraft

01:08:16.280 --> 01:08:20.840
geht ohne Probleme im Docker. Du hast sogar ein paar Vorteile dadurch, du kannst das Ding

01:08:20.840 --> 01:08:32.360
Memory, relativ gut Memory und CPU beschränken. Also es geht eigentlich alles, es geht eigentlich

01:08:32.360 --> 01:08:40.600
alles in einem Docker-Container, was jetzt nicht Kernel-Module braucht. Es gibt bestimmt

01:08:40.600 --> 01:08:45.680
die ein oder anderen Ausnahmen, die mir jetzt gerade nicht wirklich viele einfallen. Kernel-Module

01:08:45.680 --> 01:08:48.800
ist das, was mir als erstes einfällt, wo es nicht im Docker-Container geht. Ich mein

01:08:48.800 --> 01:08:53.640
klar, man könnte im Host-Kernel das Modul laden und dann wird es wahrscheinlich auch

01:08:53.640 --> 01:08:56.520
im Docker-Container gehen, aber vielleicht will man das Ganze ja nicht.

01:08:56.520 --> 01:09:01.520
Zumindest wenn das Programm irgendwie versucht oder irgendwie ein Kernel-Modul braucht, was

01:09:01.520 --> 01:09:06.240
nicht geladen ist, dann geht das nicht im Docker-Container. Also du kannst beispielsweise schlechten

01:09:06.240 --> 01:09:15.440
Virtual-Box in Docker verwenden. Soll ich sagen. Aber ansonsten geht nahezu alles in

01:09:15.440 --> 01:09:21.600
Docker. Im Umkehrschluss, was aus irgendwelchen Gründen mit dem Host-Kernel nicht läuft, läuft

01:09:21.600 --> 01:09:29.920
allerdings auch im Docker-Container nicht. So, also jetzt so, dass ihr eine bisschen

01:09:29.920 --> 01:09:34.280
bessere Vorstellung kriegt davon, was hier eigentlich läuft. So, wir haben Docker-Compose

01:09:34.280 --> 01:09:38.640
installiert. Als Abhängigkeit wurde Docker installiert, allerdings Docker selbst werden

01:09:38.640 --> 01:09:42.920
wir gar nicht verwenden. Ich habe ja gesagt, wir wollen eine Config-Datei erstellen, die

01:09:42.920 --> 01:09:48.680
dann mit Docker-Compose am Ende die Container so aufbaut, wie wir das haben wollen. Und

01:09:48.680 --> 01:09:53.960
was wir verwenden werden, ist das Kommando Docker-Compose. Und das kennt eigentlich nur

01:09:53.960 --> 01:09:58.760
zwei Sachen. Docker-Compose ab, dann wird alles, was in der Docker-Compose-Yaml-Datei

01:09:58.760 --> 01:10:04.520
drinne steht, angelegt und Docker-Compose down, dann wird alles, was in Docker-Compose

01:10:04.520 --> 01:10:08.960
definiert ist, gestoppt. Es gibt noch Sachen wie Force stoppen und auch Images löschen

01:10:08.960 --> 01:10:14.040
oder so. Aber das sind so die standardmäßigen Sachen. Also, man hat eine Docker-Compose-Datei,

01:10:14.040 --> 01:10:18.400
da steht alles drin, was man konfigurieren will. Man geht in den Ordner rein, sagt Docker-Compose

01:10:18.400 --> 01:10:23.920
ab. Und dann, ne, die Datei ist jetzt leer, deswegen geht's nicht. Dann startet er alles

01:10:23.920 --> 01:10:28.720
und mit down macht er alles weg. So, dann machen wir jetzt mal testweise ein Container rein.

01:10:28.720 --> 01:10:32.480
Und das erste, was man machen muss in so einem Docker-Compose-File, kurz überlegen, habe

01:10:32.480 --> 01:10:42.720
ich alles gemacht, was ich machen wollte? Ich glaub schon. Genau, also wir legen jetzt

01:10:42.720 --> 01:10:49.560
mal einen, den minimalsten Container an in Docker, den es so gibt. Das erste, was man

01:10:49.560 --> 01:10:55.240
in einer Docker-Compose-Datei machen muss, oder macht Max das für sich? Ne, nachdem

01:10:55.240 --> 01:10:58.680
ich das auf dem Digital-Ocean-Server mache, mache ich das nicht für mich. Das habe ich

01:10:58.680 --> 01:11:04.920
bei mir schon laufen. Das erste, was man machen muss in einer Docker-Compose-Yaml ist eine

01:11:04.920 --> 01:11:12.320
Versionsnummer angeben. Zum Beispiel 3.3. Das muss man bei den meisten Config-Dateien

01:11:12.320 --> 01:11:18.120
nicht. Ich finde, die machen das mit Docker-Compose aber relativ clever. Wenn die neue Version

01:11:18.120 --> 01:11:25.360
rausbringen, die neue Parameter unterstützen oder ändern, dann machen sie das nicht einfach,

01:11:25.360 --> 01:11:30.560
updaten sie das nicht einfach, sondern sie sagen, okay, das braucht eine neue Version.

01:11:30.560 --> 01:11:40.640
Was verkürzt heißt, dass eine Docker-Compose-Datei immer funktioniert, egal mit welcher Docker-Compose-Version

01:11:40.640 --> 01:11:45.920
man sie verwendet. Hauptsache sie ist neuer als die, mit der ich es ursprünglich angelegt

01:11:45.920 --> 01:11:51.840
habe. Das heißt, ich gebe jetzt hier an Version 3.3 und selbst wenn wir mal Docker-Compose

01:11:51.840 --> 01:11:59.520
in 10 Jahren haben, dann wird die Config-Datei immer ausgeführt mit dem Config-Befehlssatz,

01:11:59.520 --> 01:12:05.520
der zu Version 3.3 aktuell war. Das heißt, bei einem Docker-Compose-Update kann es nie

01:12:05.520 --> 01:12:12.240
sein, dass meine Config nicht mehr funktioniert. Und das ist natürlich ne wichtige Geschichte.

01:12:12.240 --> 01:12:18.480
Ich möchte vielleicht mal neue Parameter verwenden, dann mach ich die Version ein bisschen höher

01:12:18.480 --> 01:12:21.480
und verwende eine neue Docker-Compose-Version, dann kann ich die verwenden, aber ich kann

01:12:21.480 --> 01:12:26.200
mir immer sicher sein, dass der Kram, wenn die Docker-Compose-Version, die ich verwende

01:12:26.200 --> 01:12:30.800
mindestens so alt ist, wie die Version, die ich benutzt habe, um das zu erstellen, immer

01:12:30.800 --> 01:12:36.560
funktioniert. Das ist ganz wichtig bei sowas, weil ich hab ja keinen Bock. Stellt euch mal

01:12:36.560 --> 01:12:42.640
vor, ich hab jetzt hier meinen Server laufen, mit Docker-Compose von Ubuntu 16.04 oder 14.04.

01:12:42.640 --> 01:12:49.080
So, ich update den Server auf Ubuntu 20.04, hab jetzt Docker-Compose, was 4 Jahre neuer

01:12:49.080 --> 01:12:53.160
ist, und es unterstützt die Hälfte nicht mehr, und ich kann meine ganze Containerumgebung

01:12:53.160 --> 01:12:59.440
nicht benutzen. Das wäre natürlich kacke. So, und durch diese Versionsgeschichte ist

01:12:59.440 --> 01:13:06.880
ganz einfach, die aktuellste Docker-Compose-Version benutzt weiter den uralt-config-Satz und gut

01:13:06.880 --> 01:13:10.960
ist. Und es funktioniert auf jeden Fall. So, also was wir jetzt machen mussten, wie gesagt,

01:13:10.960 --> 01:13:15.080
als erst mal ne Version angeben. Das wollte ich jetzt bloß mal zur Version erklären.

01:13:15.080 --> 01:13:19.960
Und dann ist ein Docker-Container anzulegen ziemlich einfach. Man sagt einfach Services,

01:13:19.960 --> 01:13:23.920
und unter Services kann man alles, kann man die unterschiedlichen Container definieren,

01:13:23.920 --> 01:13:30.080
die man haben will. Zum Üben, wenn man einfach nur nen Test-Docker-Container braucht, ist

01:13:30.080 --> 01:13:37.080
der hier immer ziemlich gut. Das ist quasi nen Hello-World, nen Hello-World-Docker-Container,

01:13:37.080 --> 01:13:42.800
wenn man es so will. Der macht nichts anderes, wie wenn man draufgeht zu sagen, hallo, ich

01:13:42.800 --> 01:13:48.160
bin ein Docker-Container. So, und in dieser Docker-Compose-Datei kann man verschiedenste

01:13:48.160 --> 01:13:54.040
Sachen anlegen. Das Einfachste ist nen Service, und nen Service ist unterm Strich nen Docker-Container.

01:13:54.040 --> 01:13:59.040
So, das heißt wir wollen jetzt einen Who-Am-I-Docker-Container anlegen. Warum ist die Standard-Einrückung

01:13:59.040 --> 01:14:03.880
bei Wim eigentlich Tabs? Wer hat sich das ausgedacht? Das ist total aberlich. So, da

01:14:03.880 --> 01:14:08.600
muss man sagen, welches Image verwendet werden soll. Das hatten wir hier grad schon. Dieses

01:14:08.600 --> 01:14:17.600
Image wollen wir verwenden, als Who-Am-I-Container. Dann wollen wir sagen, muss man nicht machen,

01:14:17.600 --> 01:14:23.880
mache ich aber immer ganz gerne. Container-Name, das Ding soll Who-Am-I heißen. Und das war's,

01:14:23.880 --> 01:14:29.400
erst mal, erst mal war's das. Und wenn man jetzt, also das ist das Simpelste, was man

01:14:29.400 --> 01:14:34.680
machen kann, man wird nicht viel von haben, aber ich zeig's euch mal, dass es funktioniert.

01:14:34.680 --> 01:14:39.000
Also sprich, ich hab jetzt in Docker-Compose gesagt, ok, ich möchte Docker-Compose Version

01:14:39.000 --> 01:14:45.040
3.3 verwenden und ich möchte einen Service anlegen, der sich Who-Am-I nennt und dieses

01:14:45.040 --> 01:14:52.960
Container-Image verwendet. So, an Visual Studio Codeserver, oh, das ist eine gute Idee, das

01:14:52.960 --> 01:14:59.960
probieren wir gleich mal aus, später. Codeserver, ja, gute Idee. So, und wenn ich jetzt Docker-Compose

01:14:59.960 --> 01:15:09.640
abmache, dann startet der, diesen Who-Am-I-Container. So, und man sieht, Docker-Compose ist gestartet,

01:15:09.640 --> 01:15:14.680
hat den Container gestartet und hat die Umgebung so konfiguriert, wie ich das haben will. Mach

01:15:14.680 --> 01:15:20.720
mal minus D, dann kann ich weiter was tippen. Also, wenn ich Docker-Compose ps mache, sehe

01:15:20.720 --> 01:15:25.360
ich, ok, es läuft halt ein Container, Docker-PS läuft auch ein Container, hat funktioniert.

01:15:25.360 --> 01:15:31.520
Also sprich, ich hab meine Config-Datei, wo drin steht, wie die Umgebung aussehen soll,

01:15:31.520 --> 01:15:35.720
meinten, wie mein Environment aussehen soll und Docker-Compose konfiguriert das quasi

01:15:35.720 --> 01:15:40.680
so, wie ich sie in meiner Config-Datei beschrieben habe. Deswegen nennt man diesen Ansatz auch

01:15:40.680 --> 01:15:47.160
Infrastructure as Code. Also sprich, man definiert in der Config-Datei, wie seine Infrastruktur,

01:15:47.160 --> 01:15:53.160
wie seine Umgebung, wie sein Environment aussehen soll und dann hat man irgendein Config-Management-Programm,

01:15:53.160 --> 01:15:57.680
was das umsetzt. Das ist ein anderer Ansatz zu früher, wo man quasi in den Linux-Server

01:15:57.680 --> 01:16:05.400
installiert hat, dann sich PSSH drauf eingeloggt hat, sich Programme installiert hat, sondern

01:16:05.400 --> 01:16:09.400
jetzt definiert man einfach nur, wie soll die Umgebung aussehen und sagt dann Docker-Compose,

01:16:09.400 --> 01:16:17.840
ach, war nicht bei Ubuntu auch die Netzwerk-Config in Jaml. Ja, mittlerweile schon. Da gab es

01:16:17.840 --> 01:16:22.560
verschiedene Zwischenschritte, es gibt sowas auch für nackische Linux-Server, sowas wie

01:16:22.560 --> 01:16:28.440
Puppet oder Ansible gibt es noch, Chef gibt es auch noch, Saltstack und was es nicht alles

01:16:28.440 --> 01:16:33.400
noch gibt. Ist aber jetzt in dem Fall wurscht, wir benutzen Docker und das können wir auch

01:16:33.400 --> 01:16:43.640
mit dem Docker-Config-Tool nehmen. Das ist so die grundsätzliche Funktionsweise von Docker-Compose.

01:16:43.640 --> 01:16:48.320
Also man hat eine Config-Datei, in der man sagt, wie soll das Ganze aussehen und mit

01:16:48.320 --> 01:16:56.200
Docker-Compose startet und stoppt man dann die Umgebung. So, soweit von der TUI hier.

01:16:56.200 --> 01:17:00.200
Natürlich bringt uns das jetzt nicht sonderlich viel, wenn wir dann Hallo-Welt-Container haben,

01:17:00.200 --> 01:17:09.200
ich kann euch übrigens mal zeigen, dass der Hallo, oh, bye. Ne, gucken wir uns später

01:17:09.200 --> 01:17:13.600
an, ob der Hallo-Welt-Container wirklich funktioniert. So, und jetzt ist ja unser Ziel nicht, dass

01:17:13.600 --> 01:17:17.480
wir einen Hallo-Welt-Container gestartet haben. Machen wir mal hier, schreiben wir den mal

01:17:17.480 --> 01:17:21.720
hin. Den haben wir gerade gestartet, den Container. Allerdings, ihr werdet sehen, wenn ich den

01:17:21.720 --> 01:17:30.240
jetzt starte, ihr kommt da nicht drauf. Warte mal, "-d", ihr kommt da nicht drauf. Also sprich,

01:17:30.240 --> 01:17:36.960
hier meine IP von dem Server. What the fuck, wo ist mein Server-IP? Da. Also da könnt

01:17:36.960 --> 01:17:40.760
ihr ja mal mit dem Browser hingehen und das aufmachen. Wir feststellen, ne, geht nicht.

01:17:40.760 --> 01:17:47.200
Und selbst wenn man einen Nmap macht, ich komm wieder, die Hexer geschickt, wie? Kein

01:17:47.200 --> 01:17:53.960
Nmap am Start. Nmap installieren. Nmap ist ein Portscanner, der guckt, was auf dem Server

01:17:53.960 --> 01:18:00.000
alles läuft. Selbst wenn ich jetzt mal einen Portscan mache auf die IP. Chat, big brain,

01:18:00.000 --> 01:18:09.280
was schmeißt der Portscan aus für ein Port oder für Ports? Hat jemand eine Idee? Ja,

01:18:09.280 --> 01:18:15.560
22, korrekt. Das Einzige, was auf dem Server laufen sollte, ist, offen sein sollte, ist

01:18:15.560 --> 01:18:21.480
Port 22. Port 22 ist SSH, das ist, worüber ich mich auf den Server verbunden hab. Und

01:18:21.480 --> 01:18:29.600
ihr seht, kein Port 80, obwohl Docker Compose sagt, es läuft auf Port 80. Das liegt daran,

01:18:29.600 --> 01:18:36.360
es läuft nicht auf Port 80 auf irgendwie meinem externen Interface, sondern auf einem internen

01:18:36.360 --> 01:18:43.400
Docker Interface. So, und das ist das, wozu ich jetzt meinen Reverse-Proxy brauche, sprich,

01:18:43.400 --> 01:18:51.080
diese Service-Container, die sind nicht von außen zugänglich, die laufen auf einem internen

01:18:51.080 --> 01:18:57.400
Interface und der Reverse-Proxy, der ist von außen zugänglich und der Proxy, die jetzt

01:18:57.400 --> 01:19:04.760
anfragen, die von außen kommen, auf die jeweiligen Container dahinter. So, und wir legen jetzt

01:19:04.760 --> 01:19:08.720
mal, wir starten jetzt mal ein Reverse-Proxy und dann könnt ihr in eurem Browser auf

01:19:08.720 --> 01:19:17.800
die Seite gehen und das Ganze aufmachen und gucken, ob das funktioniert. So, und das Ganze

01:19:17.800 --> 01:19:23.880
machen wir mit Traffic. Wir machen das ohne HTTP, erst ohne SSL, einfach ganz stinknormales

01:19:23.880 --> 01:19:33.880
HTTP. Also dann sagen wir jetzt erstmal, wir wollen noch einen, wie gesagt, ein bisschen

01:19:33.880 --> 01:19:40.400
abgucken muss ich. Wie gesagt, wir wollen noch einen Traffic-Container haben. Wim-Eindrückung

01:19:40.400 --> 01:19:47.040
standardmäßig, MonkaS. DNS-Records einrichten, mal mal gleich. Wir gucken uns das erst mit

01:19:47.040 --> 01:19:57.680
der IP an, dass es funktioniert und dann richten wir DNS-Records ein. DNS-Records, wo war

01:19:57.680 --> 01:20:06.960
man denn hier bei DNS-Records? Hat's Cloudflare jetzt eigentlich gecheckt? Great News, Cloudflare

01:20:06.960 --> 01:20:14.600
is protecting your site. Sehr gut, dann hat's funktioniert. Poggers. Genau, also wir legen

01:20:14.600 --> 01:20:19.520
den Traffic-Container an, das ist das, was denn die Reverse-Proxy-Geschichte im Ende

01:20:19.520 --> 01:20:22.920
macht. So, und damit das Ganze funktioniert, muss ich ihm erstmal das Image sagen, was

01:20:22.920 --> 01:20:29.840
er verwenden soll. Image ist, da kann man hier auf Docker Hub gucken, was man da für

01:20:29.840 --> 01:20:33.880
Versionsnummern verwenden möchte. So, wenn wir jetzt mal auf Docker Hub gucken, was es

01:20:33.880 --> 01:20:41.520
für Tags gibt, dann sieht man hier, Latest ist immer das Aktuellste. Was ich empfehlen

01:20:41.520 --> 01:20:46.440
würde, ist nicht unbedingt Latest zu verwenden bei sowas Wichtigem wie eurem Loadbalancer

01:20:46.440 --> 01:20:56.840
beziehungsweise Reverse-Proxy, sondern vielleicht die letzte Major-Version. Sowas hier, V2.2

01:20:56.840 --> 01:21:05.880
oder hier 2.2. So, und wenn ihr diese Version nehmt als Tag, also sprich, welches Image

01:21:05.880 --> 01:21:15.040
ihr verwenden möchtet, dann ist es meistens so, dass Version 2.2 auch 2.2.1 einschließt

01:21:15.040 --> 01:21:23.480
und erst 2.3 oder 3.0 nicht mehr, je nachdem, wie das gemacht ist. Und Latest mit Auto-Update

01:21:23.480 --> 01:21:31.720
kann man machen, würde ich aber bei meinem Eingang zu meiner Infrastruktur nicht unbedingt

01:21:31.720 --> 01:21:35.440
machen, weil wenn ihr das mal updatet und euer Konfig da nicht mal funktioniert oder

01:21:35.440 --> 01:21:39.600
nicht mal startet oder kaputt ist, dann geht alles dahinter auch nicht mehr. Also, die

01:21:39.600 --> 01:21:48.520
letzte Major-Version ist schon nicht verkehrt. Also, Traffic, nehmen wir mal 2.2. Den Container

01:21:48.520 --> 01:21:52.440
wollen wir anlegen, machen wir hier ein Leerzeichen dazwischen. Dann sagen wir mal, wir wollen

01:21:52.440 --> 01:21:56.440
dem Ding noch einen Namen geben, Container Name. Wir können übrigens, ich zeig euch

01:21:56.440 --> 01:22:15.120
mal Big Brain Vim Magic. Habt ihr das gesehen? So, Monka ist Monka Vim, Alter. So, das Ding

01:22:15.120 --> 01:22:20.560
Container nennen wir Traffic. Und jetzt kommt ein bisschen Magic. Das kann man übrigens

01:22:20.560 --> 01:22:26.840
Docker Traffic Docs, kann man sich bei denen auf der Seite auch angucken. Wer genau wissen

01:22:26.840 --> 01:22:31.480
will, was die einzelnen Sachen machen und dem meine Erklärung nicht reichen, der kann

01:22:31.480 --> 01:22:46.480
sich auch Compose, der kann sich auch die Docs auf der offiziellen Seite angucken. Also,

01:22:46.480 --> 01:22:50.760
wir müssen jetzt, also was der jetzt machen würde, wenn ich jetzt sage, Docker Compose

01:22:50.760 --> 01:22:54.040
leg los, dann legt er mir einen Container an mit Traffic drauf und einen Container an

01:22:54.040 --> 01:23:00.720
mit Who Am I. Allerdings, ohne Config für mein Reverse Proxy, Ateez, da hast du recht,

01:23:00.720 --> 01:23:08.160
die V1 Docs und auch die Config für V1 fand ich persönlich viel schöner als für V2.

01:23:08.160 --> 01:23:14.160
V2 musst du so krass rum suchen, bis du irgendwas findest. Allein, wie kompliziert das ist,

01:23:14.160 --> 01:23:19.280
um Redirect zu machen von HTTP auf HTTPS, da kriegste Anfälle. Das steht noch nicht

01:23:19.280 --> 01:23:23.240
bei den offiziellen Docs drinne. Das ist so ein typischer Fall von, sie haben relativ

01:23:23.240 --> 01:23:29.800
viele Docs, aber das, was du wissen willst, steht nicht drinne. Ja, also da kann ich auch,

01:23:29.800 --> 01:23:34.200
die darf ich nicht zu sehr loben für ihre Docs. Aber ich bin ja froh, dass ich nicht

01:23:34.200 --> 01:23:39.960
der einzige bin, der das so sieht. Also wäre Nginx einfacher, wenn man keinen Docker machen

01:23:39.960 --> 01:23:44.640
will. Ja. Allerdings, wenn man keinen Docker machen will, würde ich wahrscheinlich Caddy

01:23:44.640 --> 01:23:51.360
nennen, weil Caddy ist wirklich idiotensicher. Caddy ist absolut Low-Brain-Reverse-Proxy,

01:23:51.360 --> 01:23:57.880
den jeder verwenden kann. Aber persönlich würde ich wahrscheinlich auch Nginx verwenden,

01:23:57.880 --> 01:24:02.000
wenn es wirklich drauf ankommt. Auf unserem Server, wo ich habe ja schon ein paar mal

01:24:02.000 --> 01:24:05.160
erzählt, dass ich ja gerade so ein Projekt laufen habe mit einem Arbeitskollege, wo

01:24:05.160 --> 01:24:13.240
wir so eine Routenplanning-Software programmieren bzw. testen für Handwerker, da läuft auch

01:24:13.240 --> 01:24:21.800
ein Caddy davor. Caddy pro User, eine Domain und dann balancet auf eine eigene Instanz

01:24:21.800 --> 01:24:29.520
von der Anwendung dahinter. So, also, jetzt müssen wir den Traffic-Container, wie schreibt

01:24:29.520 --> 01:24:40.480
man das? Caddy. So schreibt man Caddy. So wie der, ja, aber Proxy. Der da. Caddyserver.com.

01:24:40.480 --> 01:24:51.600
So, also, was wir jetzt machen ist, wir müssen unseren Reverse-Proxy konfigurieren. Und was

01:24:51.600 --> 01:24:59.840
ich ja schon gesagt habe, der große Vorteil von Traffic ist, der kapiert Docker-Config.

01:24:59.840 --> 01:25:04.240
Man kann ihm jetzt sagen, Commands ist das, was beim Starten dem Container als Parameter

01:25:04.240 --> 01:25:09.400
mitgegeben wird. Also sprich, das Kommando, was in dem Container gestartet wird, was das

01:25:09.400 --> 01:25:14.920
für Argumente mitkriegt. So, und jetzt können wir den Traffic-Container konfigurieren. Als

01:25:14.920 --> 01:25:21.920
erstes sagt man Folgendes, das Copy-Paste ich mir jetzt von der offiziellen Webseite. Nein,

01:25:21.920 --> 01:25:29.600
das sagen wir übrigens nicht. Als erste sagt man, als Provider, also sprich als Info-Quelle,

01:25:29.600 --> 01:25:36.480
als Source, wo er sich quasi Informationen herholen kann, wollen wir unter anderem Docker verwenden.

01:25:36.480 --> 01:25:41.640
Also sprich, damit sagen wir eben, du kannst, guck mal bei Docker nach, was da für Container

01:25:41.640 --> 01:25:45.600
laufen, ob du die nicht irgendwie balancen kannst. Also der kennt die dann schon. So,

01:25:45.600 --> 01:25:51.320
das ist das erste Parameter, was wir ihm übergeben müssen. Dann ein Parameter, den ich immer

01:25:51.320 --> 01:25:58.040
verwende, ist der hier, den Copy-Paste ich mir jetzt mal, Exposed by Default False. Das

01:25:58.040 --> 01:26:05.320
bedeutet, dass, wenn man das hier weglässt, wird der jeden Container, den man hier unter

01:26:05.320 --> 01:26:11.280
Services stehen hat, also jeden Container, den man hier einträgt, automatisch Proxien

01:26:11.280 --> 01:26:15.480
beziehungsweise balancen. Und das will ich nicht, ich will bei jedem Container von Hand

01:26:15.480 --> 01:26:22.680
sagen, ja, den möchte ich Exposen nach außen. Das heißt, ich muss dann bei diesem Container

01:26:22.680 --> 01:26:27.160
unten auch konfigurieren, dass ich das machen möchte. So, dann muss ich ihm als nächstes

01:26:27.160 --> 01:26:34.120
sagen, wir brauchen Ports. So, und dann nehmen wir mal standardmäßig die Ports hier, die

01:26:34.120 --> 01:26:43.920
Copy-Paste ich mir jetzt rein. Set Paste, das da. Also sprich, Einstiegspunkte Port 80

01:26:43.920 --> 01:26:53.080
und Port 443. Warum? Weil Port 80 HTTP und SSL halt 443 ist. Äh, Extreme Nerd, fragt

01:26:53.080 --> 01:26:57.000
kann man damit auch zwei verschiedene Domains auf einen Host wenden? Ja, das ist ja grad

01:26:57.000 --> 01:27:01.440
der Sinn und Zweck, warum man sowas macht. Ich werd's euch gleich zeigen, wie schön

01:27:01.440 --> 01:27:07.920
einfach und unglaublich praktisch das ist im Betrieb. Übrigens, ich glaube, ich hab

01:27:07.920 --> 01:27:19.160
das hier verkehrt eingerückt. Wow, Wim, was machst du da? Please. Alter, geh fort, Wim,

01:27:19.160 --> 01:27:33.640
please. Mach keinen Scheiß, Alter. Ah. Okay, haben's gefixt. Äh, okay, also, wir haben

01:27:33.640 --> 01:27:43.240
ihm jetzt gesagt, wir wollen als Einstiegspunkt Port 80 und Port 443 haben. Als nächstes

01:27:43.240 --> 01:27:48.760
müssen wir ihm die Ports sagen, die Docker weiterleiten soll. So, und als Ports ist in

01:27:48.760 --> 01:27:56.200
dem Fall relativ klar, wir wollen Port 80 von außen auf Port 80 von Traffic weiterleiten,

01:27:56.200 --> 01:28:01.680
weil also, Traffic startet mit Port 80 und Port 443. Was wir in der Ports-Konfig sagen

01:28:01.680 --> 01:28:10.440
ist, was ist von außen erreichbar? Äh, Vhost. Ein bisschen wie Vhosts, ja, ein bisschen.

01:28:10.440 --> 01:28:15.640
Zumindest ein Teil von Vhosts, so. Und wir wollen Port 443 von außen auf Traffic Port

01:28:15.640 --> 01:28:24.280
443 weiterleiten. Das machen wir mal. Ähm, machen wir sonst noch irgendwas? Ah ja, eine

01:28:24.280 --> 01:28:29.760
Sache muss man noch sagen, wir müssen dem Traffic-Container Zugriff geben auf unsere

01:28:29.760 --> 01:28:35.680
Docker-Instanz. Das macht man normalerweise nicht, weil was man damit macht ist, man gibt

01:28:35.680 --> 01:28:42.560
die, quasi, man gibt einem Container die Kontrolle über den Container-Manager, was

01:28:42.560 --> 01:28:47.200
ja irgendwie sich ein bisschen wirr anhört, aber in dem Fall ist es sinnvoll, weil der

01:28:47.200 --> 01:28:52.360
soll ja abfragen können von Docker, was für Container alles laufen. Das muss man aber

01:28:52.360 --> 01:28:58.840
sich Gedanken zu machen, das sollte man nicht standardmäßig irgendwie einfügen, ja. So,

01:28:58.840 --> 01:29:04.600
jetzt geben wir Traffic Zugriff auf unsere Docker-Instanz. Read-Only. Wohlgemerkt, also

01:29:04.600 --> 01:29:09.520
er kann da nichts ändern, er kann aber auslesen, was man vielleicht auch unbedingt will. Und

01:29:09.520 --> 01:29:15.960
als letztes müssen wir jetzt noch dem Who-Am-I-Container sagen, dass Traffic ihn verwenden soll. Und

01:29:15.960 --> 01:29:24.880
das funktioniert folgendermaßen, wir gehen bei Who-Am-I in und sagen Label, äh, Labels

01:29:24.880 --> 01:29:29.800
und als erstes mal sagen wir eben, ich kopiere mir das jetzt einfach mal, ist glaube ich

01:29:29.800 --> 01:29:38.280
einfacher. So, also als erstes sagt man ihm, dass Traffic diesen Container balancen soll,

01:29:38.280 --> 01:29:42.640
ich sag übrigens lieber mal balancen, ist es in dem Fall Proxyn, aber balancen kommt

01:29:42.640 --> 01:29:48.160
mir einfach einfacher über die Lippen, ja. Ähm, also als erstes sagt, weil hier oben

01:29:48.160 --> 01:29:53.600
haben wir ja gesagt, exposed by default, false. Das heißt, wir müssen jetzt jeden Container,

01:29:53.600 --> 01:29:58.640
den wir nach außen hin anbieten wollen, müssen wir jetzt explizit sagen, diesen Container

01:29:58.640 --> 01:30:05.080
soll nach außen hin angeboten werden. Dann sagt man hier die Domain, G-Stalls 90, Juhu

01:30:05.080 --> 01:30:11.280
weiter, so exzellent, drei Monate, Dankeschön. Ähm, hier sagt man die Domain, die man verwenden

01:30:11.280 --> 01:30:19.480
möchte, in dem Fall nehmen wir mal ping, ping.broggers.xyz. Domains müssen wir gleich noch einrichten,

01:30:19.480 --> 01:30:28.360
haben wir noch nicht gemacht, ne. Ähm, und unten drunter als letztes sagen wir Entry

01:30:28.360 --> 01:30:35.200
Points Web, Entry Points Web ist Port 80, kein HTTPS oder sonst was. So, das ist unsere

01:30:35.200 --> 01:30:39.800
Standard-Config, speichern wir und sagen, ich kann euch jetzt schon gleich sagen, funktioniert

01:30:39.800 --> 01:30:49.440
noch nicht, weil unser DNS noch nicht funktioniert, wir sagen docker-compose ab. So, und der konfiguriert

01:30:49.440 --> 01:30:54.600
jetzt komplett unsere Container, unsere Infrastruktur so, wie wir das haben wollen, docker-compose

01:30:54.600 --> 01:31:01.720
HTTPS, es laufen zwei Container, dann Traffic nach außen hin, von außen erreichbar auf

01:31:01.720 --> 01:31:08.320
ähm, ah, Port, Port, Port und der hier hinterlauft Port 80. So, wie gesagt, ich weiß, dass es

01:31:08.320 --> 01:31:10.640
noch nicht funktioniert, aber ich erkläre euch noch gleich, warum es nicht funktioniert.

01:31:10.640 --> 01:31:15.080
Ähm, wenn man sich die Logs anguckt, wird man auch sehen, naja, passiert nicht allzu

01:31:15.080 --> 01:31:21.360
viel. So, ähm, was ich jetzt machen kann ist, ich kann noch mal auf die IP gehen, wenn

01:31:21.360 --> 01:31:27.200
ich die IP finde, ja, wenn ich jetzt auf die IP gehe, sehe ich schon mal, aha, ist schon

01:31:27.200 --> 01:31:32.400
ein bisschen mehr wie vorher, da läuft jetzt was, da läuft jetzt was, was mir sagt, aha,

01:31:32.400 --> 01:31:37.040
Seite nicht gefunden. Warum Seite nicht gefunden? Naja, der weiß ja gar nicht, wo ich hin will.

01:31:37.040 --> 01:31:44.280
Im Prinzip passiert jetzt folgendes, es schlägt irgendwas auf dem Reverse-Proxy auf, aber

01:31:44.280 --> 01:31:48.680
der Reverse-Proxy, das ist ein Proxy, der weiß ja nicht, wohin, also sprich, der Reverse-Proxy

01:31:48.680 --> 01:31:53.480
hat bei diesem Request keinen plassen Schimmer, auf welchen der Container dahinter der Request

01:31:53.480 --> 01:31:59.880
weitergeleitet werden soll und deswegen sagt der, nö, gibt es nicht. Und warum weiß er

01:31:59.880 --> 01:32:11.080
das nicht? Naja, ich hab ihm gesagt, es kommen Requests mit Host ping.progas.xyz und 10.61.35.197.113

01:32:11.080 --> 01:32:20.040
ist halt nun mal nicht ping.progas.xyz, deswegen kann das Ganze nicht funktionieren. So, deswegen

01:32:20.040 --> 01:32:26.160
machen wir das Ganze nochmal down und jetzt richten wir, nee, am Port erkennt das nicht,

01:32:26.160 --> 01:32:30.680
weil da könnte ich ja nur eine Sache betreiben. So und jetzt richten wir mal unsere Domains

01:32:30.680 --> 01:32:36.200
ein bei Digital Ocean und wir müssen da gar nicht sonderlich viel machen, wir müssen nur

01:32:36.200 --> 01:32:41.200
noch mal die IP-Adresse kopieren von meinen, wobei ich hab sie doch hier irgendwo gehabt.

01:32:41.200 --> 01:32:48.480
Da. Wir gehen jetzt nochmal zu Digital Ocean rüber, äh, Moment, falsch, wir gehen nochmal

01:32:48.480 --> 01:32:57.720
zu Digital Ocean rüber, zu DNS und wir sehen, es ist noch nichts eingerichtet für progas.xyz.

01:32:57.720 --> 01:33:01.560
Wir machen es uns jetzt total einfach, wir machen einen Wildcard-Eintrag, also wir sagen

01:33:01.560 --> 01:33:16.920
Add Record, Wildcard und alles geht auf diese IP. Safe. Ähm, das bedeutet, jegliche Subdomain

01:33:16.920 --> 01:33:22.520
progas.xyz wird jetzt immer auf diese IP aufgelöst. Wir können mal gucken, ob das funktioniert,

01:33:22.520 --> 01:33:27.120
also gucken wir erstmal dick an. Dick funktioniert nicht, weil wir haben ja die Domain selbst

01:33:27.120 --> 01:33:32.480
nicht eingetragen, nur die Subdomains. Sagen wir zum Beispiel mal test.progas.xyz und siehe

01:33:32.480 --> 01:33:40.240
da die IP von meinem Server. Ähm, ping.xyz, die IP von meinem Server. Äh, keine Ahnung,

01:33:40.240 --> 01:33:45.880
QtChat, die IP von meinem Server. Also im Prinzip scheißegal, was ich eintrage, die IP von

01:33:45.880 --> 01:33:50.040
meinem Server. Das heißt, das ist alles an DNS-Config, was wir tatsächlich machen müssen.

01:33:50.040 --> 01:33:56.320
Mehr müssen wir an DNS-Config nicht machen. Wir brauchen einen Wildcard-Eintrag, der auf

01:33:56.320 --> 01:34:03.800
meinen Server zeigt. So, und wenn ich jetzt Docker Compose abmache, so, und jetzt auf

01:34:03.800 --> 01:34:16.240
ping.progas.xyz gehe, dann werdet ihr sehen, funktioniert. Wenn ihr es ausprobieren wollt,

01:34:16.240 --> 01:34:21.800
könnt ihr machen. Ihr könnt bei euch im Browser eingeben ping.progas.xyz und ihr kriegt eine

01:34:21.800 --> 01:34:42.880
Antwort. So, und was jetzt passiert ist, ähm, übrigens mein Domain-Registrar kann ich eigentlich

01:34:42.880 --> 01:34:46.240
wobei, ich lass mal lieber auf, vielleicht brauchen wir das alles noch. Und was jetzt

01:34:46.240 --> 01:34:53.760
passiert ist folgendes, euer Server, äh, nicht euer Server, euer Desktop, Rechner, Browser,

01:34:53.760 --> 01:35:01.160
was auch immer, macht einen Name-Lookup, Zertifikate kommt gleich, Zertifikate kommt gleich, IP-Leak,

01:35:01.160 --> 01:35:08.440
schau wieder, aje, was hier laufend liegt, äh. Der macht einen DNS-Lookup für ping,

01:35:08.440 --> 01:35:15.200
also eure Kiste macht einen DNS-Lookup für ping.progas.xyz und bekommt dafür die IP

01:35:15.200 --> 01:35:22.240
von meinem Ubuntu-Server. Dort ist Port 80 offen, Port 80 ist der normale HTTP-Port und

01:35:22.240 --> 01:35:31.760
das Ding landet auf dem Reverse-Proxy. Allerdings sieht der, ähm, der HTTP-Request ja folgendermaßen

01:35:31.760 --> 01:35:38.880
aus, host ping.progas.xyz. Also wir reden hier jetzt nicht von dem Domain-Name, sondern

01:35:38.880 --> 01:35:45.560
wir reden von dem Host-Namen, von dem Virtual-Host-Namen oder wie auch immer, von dem Host-Namen, der

01:35:45.560 --> 01:35:51.000
im HTTP-Request drinnen steht. Das hat nichts mehr mit DNS in dem Sinn direkt zu tun. Das

01:35:51.000 --> 01:35:55.520
steht Plain Text, also das ist das, was die Anfrage in jeder Browser geschickt hat an

01:35:55.520 --> 01:35:59.680
den Server im Endeffekt. Wer es mir nicht glaubt, übrigens, wir können das auch von

01:35:59.680 --> 01:36:08.680
Hand machen, äh, wir können mal ganz low-level sagen, telnet auf ping.progas.xyz, Port 80,

01:36:08.680 --> 01:36:17.760
also low-level als telnet geht's ja nicht, get HTTP-Version 1.1, host ping.progas.xyz

01:36:17.760 --> 01:36:21.800
und wir kriegen die gleiche Antwort. Und damit ihr auch seht, dass das funktioniert, dass

01:36:21.800 --> 01:36:26.600
das mit dem DNS-Namen nichts zu tun hat, ich kann auch einfach mal die IP-Adresse einfügen,

01:36:26.600 --> 01:36:31.840
mich da drauf connecten und ich sag jetzt wieder das Gleiche, wir wollen HTTP-Request

01:36:31.840 --> 01:36:39.360
machen und wir wollen das für diesen Host machen und ihr seht da, bam, funktioniert.

01:36:39.360 --> 01:36:44.720
Also hat nichts mit dem DNS-Namen direkt zu tun. So, und wer jetzt big brain genug ist,

01:36:44.720 --> 01:36:52.240
wird feststellen, ok, wenn wir gar keine DNS-Namen für alle unsere Services registrieren müssen,

01:36:52.240 --> 01:37:00.600
sondern einfach mit einem Wildcard-DNS auskommen, dann ist die einzige Stelle, wo wir DNS-Namen

01:37:00.600 --> 01:37:08.200
oder Service-Namen definieren müssen, eigentlich hier in unserer Infrastructure-Config und

01:37:08.200 --> 01:37:13.920
das ist natürlich richtig geil, weil unser Ziel ist ja, dass unser komplettes Environment,

01:37:13.920 --> 01:37:19.240
was wir aufbauen wollen, alles in dieser Config-Datei drin steht, dass ich einfach mit Docker Compose

01:37:19.240 --> 01:37:21.400
hoch und runter fahren kann, egal auf welchem Server ich bin.

01:37:21.400 --> 01:37:30.600
Mat 9908, naja, das kann ich dir jetzt so nicht so einfach erklären. DNS auf Cloudflare

01:37:30.600 --> 01:37:37.120
hab ich ja vor einer Stunde umgestellt oder so. So. Und dementsprechend muss ich auch

01:37:37.120 --> 01:37:41.640
keine DNS-Config machen, wenn ich einen zweiten Who-Am-I-Container haben will. Guck mal, wenn

01:37:41.640 --> 01:37:46.440
ich einen zweiten Who-Am-I-Container haben will, den nennen wir einfach mal Who-Am-I-2,

01:37:46.440 --> 01:37:55.800
und der ist jetzt verfügbar unter dem Namen, keine Ahnung, pong.progressxyz. Übrigens

01:37:55.800 --> 01:37:59.320
eine Sache darf ich nicht vergessen, das ist in der Traffic-Config ein bisschen eklig,

01:37:59.320 --> 01:38:08.000
das muss dann hier auch drinne stehen. So. Und ich brauche keine DNS-Config oder irgendwas,

01:38:08.000 --> 01:38:15.360
ich fahr das Ganze jetzt hoch. Ich hab einen Loadbalancer davor, zwei Who-Am-I-Container,

01:38:15.360 --> 01:38:21.720
ich bin auf ping.progress, guckt, funktioniert immer noch, und ich bin auf pong.progress,

01:38:21.720 --> 01:38:27.200
funktioniert auch. So, wir haben nichts am DNS angepasst, und wir können alle möglichen

01:38:27.200 --> 01:38:33.280
Subdomains von progress.xyz verwenden. Kannst du auch mehrere Container dynamisch erstellen?

01:38:33.280 --> 01:38:39.960
Nee. Dafür ist es auch nicht gedacht. Da musst du Richtung Container-Orchestrierung gucken,

01:38:39.960 --> 01:38:48.240
Richtung, was weiß ich, Kubernetes, Swarm und sonst was. Das ist eher die kleinere Variante,

01:38:48.240 --> 01:38:55.000
die sich aber auch für daheim eignet. Sebaro, das ist ein komplett anderes Szenario mit

01:38:55.000 --> 01:39:00.240
Cloudflare-Denos-Schutz, weil dort ist der Endpunkt bei Cloudflare, und es geht durch

01:39:00.240 --> 01:39:06.120
Cloudflare durch und dann zu dir. Das ist ein komplett anderes Szenario. Da kann ich

01:39:06.120 --> 01:39:10.680
jetzt so auch nichts zu sagen. Aktuell, das Einzige, was wir von Cloudflare verwenden,

01:39:10.680 --> 01:39:15.200
ist den DNS. Also es geht kein Traffic durch Cloudflare durch. Und das ist natürlich schon

01:39:15.200 --> 01:39:21.560
mal echt cool. Also sprich, ich kann hier beliebig viele Dienste anlegen im Hintergrund,

01:39:21.560 --> 01:39:29.160
und es funktioniert einfach. Und da sieht man es auch, wie einfach das ist. Wie ich

01:39:29.160 --> 01:39:34.800
im Vorfeld gesagt habe, ich muss an meiner Loadbalancer-Konflikt nichts ändern, sondern

01:39:34.800 --> 01:39:40.480
ich kann hier einfach neue Dienste, ich kann in der Nextcloud hinzufügen. Container Nextcloud,

01:39:40.480 --> 01:39:46.480
ändert die Domain, und das Ding ist verfügbar. Ich kann in den Git-Server hinzufügen, ändert

01:39:46.480 --> 01:39:51.640
die Domain, Docker Compose ab, noch Git-Server zusätzlich verfügbar. Also relativ easy,

01:39:51.640 --> 01:39:59.760
ohne dass ich am Loadbalancer was ändern muss. Mit welchen Befehlen siehst du deine öffentliche

01:39:59.760 --> 01:40:09.000
IP in der Konsole? IP-Ed? Also der Server steht öffentlich im Internet. Ja. Der Server steht

01:40:09.000 --> 01:40:14.240
öffentlich im Internet, der ist bei DigitalOcean, der ist nicht bei mir lokal. Sonst könntet

01:40:14.240 --> 01:40:19.960
ihr ja auch gar nicht drauf zugreifen. So, das ist der erste Schritt, und ich glaube,

01:40:19.960 --> 01:40:23.000
jetzt hat man auch ganz gut verstanden, was das hier eigentlich macht. Sprich, man hat

01:40:23.000 --> 01:40:27.720
einen Einstiegspunkt, und der balancet, oder eigentlich proxy, aber ich sag mal lieber

01:40:27.720 --> 01:40:35.520
balancet, auf die unterschiedlichen Services dahinter. So, das ist der erste Schritt dazu,

01:40:35.520 --> 01:40:40.320
man sieht, das funktioniert auch relativ gut. Mal einen Daumen. Man sieht, das funktioniert

01:40:40.320 --> 01:40:45.440
auch relativ gut. Und ihr habt es im Browser ausprobiert, tut. Ach, by the way. Ach ja,

01:40:45.440 --> 01:40:50.320
mit IP geht das auch. Jaja, mit IP geht das auch. Also du kannst auch hier eine IP reinschreiben,

01:40:50.320 --> 01:40:54.200
allerdings, wie sieht das aus, wenn man es lokal machen will? Ganz genauso, es ist kein

01:40:54.200 --> 01:41:00.480
Unterschied. Was du machen würdest, wenn du es lokal verwenden willst, hast du zwei Varianten.

01:41:00.480 --> 01:41:06.960
Entweder, du trägst hier eine lokale IP ein, also ein Public DNS kann auch lokale IPs

01:41:06.960 --> 01:41:15.040
auflösen, warum nicht. Du trägst hier eine IP ein. Oder, was noch viel besser ist, du

01:41:15.040 --> 01:41:21.640
skippst diesen ganzen Cloudflare, sonst war es Geschiss, und biegst das einfach lokal

01:41:21.640 --> 01:41:27.760
ein. Du machst einfach einen statischen Eintrag auf deinem Router für die Domain, auf eine

01:41:27.760 --> 01:41:35.840
interne IP. Eine gültige Domain brauchst du für Zertifikate trotzdem. Extreme Nerd

01:41:35.840 --> 01:41:42.880
fragt, geht das auch mit verschiedenen Hosts? Geht das auch mit z.B. Hans.de und Franz.de

01:41:42.880 --> 01:42:06.320
auf einem Server? Das ist dem vollkommen egal, für welche Domain. Du kannst den ersten Container

01:42:06.320 --> 01:42:15.520
bereitstellen für Hans.de und den anderen für Franz.de, das ist kein Problem, das kannst

01:42:15.520 --> 01:42:23.920
du machen. Du kannst sogar den einen Container bereitstellen für Franz.de und den anderen

01:42:23.920 --> 01:42:35.440
für Hans.com. Die einzige Sache, die gewährleistet sein muss, ist, dass der DNS Lookup auf deinem

01:42:35.440 --> 01:42:43.000
Server rauskommt. Also sprich, wenn du es irgendwie hinbekommst, dass Hans.com auflöst

01:42:43.000 --> 01:42:48.320
zu der IP von deinem Server und dass Franz.de auflöst zu der IP von deinem Server, also

01:42:48.320 --> 01:42:53.120
quasi wenn du Besitzer dieser Domain bist und das machen kannst, dann funktioniert das

01:42:53.120 --> 01:43:06.760
dann überhaupt kein Problem. Dafür ist es ja unter anderem da, um genau sowas zu machen.

01:43:06.760 --> 01:43:11.600
Wir wollen ja gleich noch Zertifikate machen und das wird ein bisschen komplizierter jetzt

01:43:11.600 --> 01:43:18.800
noch in der Config. So, das ist so die Basics, die man mal machen muss. Also die Basic Config,

01:43:18.800 --> 01:43:23.280
sprich, jetzt fahre ich das Ding hoch. Wir können jetzt noch mal richtig Big Brain sein,

01:43:23.280 --> 01:43:29.240
wir sagen jetzt noch Git Init, wir machen hier noch ein Git Repo drinnen. Git Status, Git

01:43:29.240 --> 01:43:37.640
Add, alle Files und sagen Git Commit, keine Ahnung, Initial Commit. Ja, ich heiße jetzt

01:43:37.640 --> 01:43:43.880
Max at QChat, perfekt. Ah ne, darf ich nicht committen, ok, dann heiße ich jetzt so, Your

01:43:43.880 --> 01:43:52.480
Name und Example, perfekt. Können wir, wir machen sogar noch ein Git Repo dann, das schlägt

01:43:52.480 --> 01:44:04.960
das DevOps Herz höher. So, gut, das war die Basic Config. Also man habt jetzt gesehen,

01:44:04.960 --> 01:44:11.960
das Balancen klappt ziemlich gut, ein Einstiegspunkt und mehrere Services dahinter. Wir können

01:44:11.960 --> 01:44:17.200
unterschiedlichste Hausnamen verwenden, wie wir lustig sind, hans.de, franz.de, ping,

01:44:17.200 --> 01:44:22.840
pong, progas.xyz, solange wir die Domain haben. Ja, solange wir Einfluss darauf haben,

01:44:22.840 --> 01:44:28.760
auf was die Domain auflöst. By the way, ihr könnt auch google.de nehmen und die daheim

01:44:28.760 --> 01:44:34.640
bei euch im DNS umbiegen. Also wenn ihr schon immer mal google.de besitzen wolltet, könnt

01:44:34.640 --> 01:44:38.760
ihr das machen. Ihr müsst bloß sicherstellen, dass euer lokaler DNS google.de mit eurer

01:44:38.760 --> 01:44:42.640
internen IP auflöst. Da könnt ihr aber halt google.de nicht mehr auflösen, das ist

01:44:42.640 --> 01:44:48.840
jetzt auch nicht so wirklich sinnvoll, aber es würde funktionieren. Machst du das nur

01:44:48.840 --> 01:44:52.720
zum Spaß gerade oder willst du darauf auch einen nützlichen Dienst drauf laufen lassen

01:44:52.720 --> 01:45:00.200
am Ende des Tages? Ich hab das bei mir daheim schon laufen. Hostdatei editieren kannst du

01:45:00.200 --> 01:45:04.880
auch machen, allerdings, Hostdatei editieren auf dem Server bringt nichts, du musst Hostdatei

01:45:04.880 --> 01:45:13.440
auf dem Client editieren, weil der Client Browser das richtig auflösen muss. Was übrigens

01:45:13.440 --> 01:45:20.080
nicht geht, mit Zertifikaten. Google.de, na das funktioniert nicht. Also google.de müsst

01:45:20.080 --> 01:45:27.800
ihr dann HTTP Plain Text machen. Ihr könnt auch DuckDNS verwenden, ihr könnt euch eine

01:45:27.800 --> 01:45:32.640
eigene Domain machen lokal, aber spätestens wenn ihr Zertifikate, und das ist das nächste

01:45:32.640 --> 01:45:36.280
was wir jetzt machen, spätestens wenn ihr gültige Zertifikate haben wollt, ich starte

01:45:36.280 --> 01:45:41.440
das Ding gerade mal nochmal, dann braucht ihr eine Domain die euch gehört. Sei es über

01:45:41.440 --> 01:45:46.280
einen dünnen DNS, DuckDNS, sonst was, oder eben euch für 9 Dollar im Monat eine Domain

01:45:46.280 --> 01:45:53.480
kaufen. Achso, Ping gibt es ja noch. So, weil ihr seht, wenn ich jetzt auf ping progress

01:45:53.480 --> 01:46:02.920
7x9ZG und dann auf HTTPS, werdet ihr feststellen, OMG, der Hacker-Man ist am Start. Das Zertifikat

01:46:02.920 --> 01:46:09.240
ist nicht gültig. Naja, weil es kein Zertifikat ist von irgendeiner Zertifizierungsstelle.

01:46:09.240 --> 01:46:20.720
Bam. Erstmal die Sonnenbrille aufsetzen Leute. Also man sieht, der hat ein Self-Signed SSL

01:46:20.720 --> 01:46:28.880
abgeneriert, aber ich kann jetzt ja auch schon sagen, Accept Risk and Continue, dann findet

01:46:28.880 --> 01:46:33.240
er es natürlich jetzt erstmal nicht, weil ich Entry Point, weil ich hier gesagt habe,

01:46:33.240 --> 01:46:38.160
Entry Point ist Web und nicht Web Secure, aber man sieht prinzipiell schon, dass er

01:46:38.160 --> 01:46:46.200
auf den Traffic draufkommt. So, wollen wir aber nicht, wir wollen ja ein richtig echtes

01:46:46.200 --> 01:46:50.600
gültiges Zertifikat haben. So, und das ist jetzt der nächste Schritt, was wir machen.

01:46:50.600 --> 01:46:56.080
Damit wir ein gültiges Zertifikat bekommen können, gibt es eine kostenlose Variante,

01:46:56.080 --> 01:47:04.680
die auch sehr verbreitet ist, das nennt sich Let's Encrypt. Let's Encrypt ist eine CA,

01:47:04.680 --> 01:47:10.000
also eine Zertifizierungsstelle eines, was heißt CA nochmal genau, Certificate Authority

01:47:10.000 --> 01:47:15.720
glaube ich, also quasi eine vertrauenswürdige Stelle, die überprüft, ob ihr auch vertrauenswürdig

01:47:15.720 --> 01:47:21.400
seid und dann euch ein Zertifikat gibt, dass ihr ihr seid. Das ist übrigens alles, was

01:47:21.400 --> 01:47:26.200
ein Zertifikat sagt, das sollten wir an der Stelle vielleicht auch nochmal erklären.

01:47:26.200 --> 01:47:32.360
Nur, weil eine Seite ein gültiges Zertifikat hat, heißt es noch lange nicht, dass es auch

01:47:32.360 --> 01:47:39.840
wirklich die Seite ist, auf die ihr wollt. Zum Beispiel, wenn ihr auf die Seite geht,

01:47:39.840 --> 01:47:50.560
minebank.de und die hat ein gültiges SSL-Zertifikat und das ist auch wirklich eure Bank. So,

01:47:50.560 --> 01:48:00.240
dann ist alles gut. Geht ihr auf die Seite minenbank.de, ihr habt euch verschrieben und

01:48:00.240 --> 01:48:05.320
die hat auch ein gültiges Zertifikat, das geht, dann seid ihr aber auf der falschen

01:48:05.320 --> 01:48:10.960
Seite. Also sprich ein Zertifikat bedeutet nicht, dass es irgendwie die richtige Seite

01:48:10.960 --> 01:48:17.240
ist, sondern ein Zertifikat heißt nichts anderes, dass die Domain legit, also nee,

01:48:17.240 --> 01:48:23.680
nicht legit, dass das, was hier oben in der Adresszeile steht, auch wirklich das ist,

01:48:23.680 --> 01:48:29.600
wo ihr drauf seid. Und wenn ihr euch verschrieben habt und das Zertifikat für die verschriebene

01:48:29.600 --> 01:48:38.320
Domain ausgestellt ist, ist das trotzdem ein gültiges SSL-Zertifikat. Matt, das stimmt

01:48:38.320 --> 01:48:43.080
nicht. Es wird so verkauft, ja, also sprich, wenn sie auf der richtigen Bankseite sind,

01:48:43.080 --> 01:48:47.120
das erkennt man am grünen Symbol, das stimmt nicht. Also als Beispiel, wenn ich jetzt hier

01:48:47.120 --> 01:48:51.760
sagen würde, meinebank.de, ich geh da jetzt nicht drauf, ich weiß nicht, wo ich da rauskomme,

01:48:51.760 --> 01:48:57.880
das wäre die richtige Seite und ich hab mich jetzt verschrieben, die hier, so, minebank.de,

01:48:57.880 --> 01:49:06.080
es können beide Seiten komplett legit gültige SSL-Zertifikate haben, also auch von Browser

01:49:06.080 --> 01:49:10.520
akzeptierte SSL-Zertifikate und das eine ist eine Fake-Seite und das andere ist eine echte

01:49:10.520 --> 01:49:15.520
Seite, das ist kein Problem, das geht, weil das Zertifikat weist ja nur aus, dass der

01:49:15.520 --> 01:49:21.640
Name übereinstimmt, dass ihr derjenige seid, dem die Domain gehört und dass der Domain-Name

01:49:21.640 --> 01:49:27.400
und das Zertifikat übereinstimmt. Hat das Zertifikat dann überhaupt was mit der SSL-Verschlüsselung

01:49:27.400 --> 01:49:37.840
zu tun? Ja. Hat's. Das für Verschlüsselung und das weist euch quasi als Besitzer oder

01:49:37.840 --> 01:49:45.080
als rechtmäßiger Besitzer der Domain aus und dass ihr auf der richtigen Domain seid,

01:49:45.080 --> 01:49:49.400
die ihr eingegeben habt. Was anderes sagt das nicht, wenn es ein gültiges Zertifikat

01:49:49.400 --> 01:49:53.160
ist, es kann genauso gut eine Scammer-Seite sein. So, das muss man jetzt an der Stelle

01:49:53.160 --> 01:49:58.960
noch mal sagen. Also, Let's Say Grypt ist eine Zertifizierungsstelle, bei der man sich

01:49:58.960 --> 01:50:12.680
kostenlos SSL-Zertifikate ausstellen kann und die mittlerweile auch in jedem Browser

01:50:12.680 --> 01:50:21.200
trusted sind. Also, das funktioniert folgendermaßen, wenn ihr ein Zertifikat bekommt, dann steht

01:50:21.200 --> 01:50:26.560
in dem Zertifikat drin, welche Zertifizierungsstelle euch das gegeben hat. Und euer Zertifikat

01:50:26.560 --> 01:50:35.440
funktioniert nur, wenn der Browser der Zertifizierungsstelle vertraut. Und um's noch krasser zu sagen,

01:50:35.440 --> 01:50:42.160
die Zertifizierungsstelle, die die Zertifizierungsstelle zertifiziert hat, der muss auch vertraut werden

01:50:42.160 --> 01:50:48.840
und der, der da raufkommt auch. Chain of Trust nennt sich das Ganze da. Also sprich,

01:50:48.840 --> 01:50:53.560
das ist eine ganz lange Kette, wer wem vertraut. Das wurde in der Vergangenheit auch schon

01:50:53.560 --> 01:51:02.880
ab und zu mal gebated, so Komodo haben sie ihren Root-Key geklaut damals. So, und Let's

01:51:02.880 --> 01:51:10.060
Encrypt ist eine Zertifizierungsstelle, die es kostenlos erlaubt, SSL-Zertifikate auszustellen

01:51:10.060 --> 01:51:17.440
und denen jeder größere Browser traut. Das heißt, das Zertifikat, das SSL-Zertifikat

01:51:17.440 --> 01:51:24.920
von Let's Encrypt ist exakt genauso gut, wie ein Zertifikat von Komodo oder was VeriSign

01:51:24.920 --> 01:51:36.960
oder was es da nicht nur alles gibt. Was ist, wenn der Browser einfach nur der Root-CA vertraut,

01:51:36.960 --> 01:51:41.960
sind dann alle Subdomain auch trusted? Nö, es sind die Sachen trusted, für die das Zertifikat

01:51:41.960 --> 01:51:46.320
ausgestellt ist. Wenn das Zertifikat für ein Domain ausgestellt ist, dann ist nur die

01:51:46.320 --> 01:51:50.760
Zertifikat trusted und wenn es mit Wildcard ist, dann sind auch Subdomains trusted. Raum

01:51:50.760 --> 01:51:58.120
drauf an, für was das Zertifikat ausgestellt ist. Boah, PC lustig, ich weiß nicht, wie

01:51:58.120 --> 01:52:04.440
die das genau intern handeln. So, und deswegen, wir wollen das Ganze, was wir jetzt aufgebaut

01:52:04.440 --> 01:52:08.600
haben, auch noch mit Zertifikaten versorgen. Weil wir wollen hier den, den da, wir wollen

01:52:08.600 --> 01:52:13.960
den gültigen, das grüne Häkchen wollen wir haben. Und das grüne Häkchen ist nicht einfach

01:52:13.960 --> 01:52:20.040
nur das, damit man sich gut fühlt. Auch nicht nur im internen Netz, es gibt Services, die

01:52:20.040 --> 01:52:29.520
setzen zwingend SSL voraus. Zum Beispiel WebRTC Verbindungen im Browser sind mittlerweile

01:52:29.520 --> 01:52:37.040
nur über SSL möglich. Das ist quasi Latency, eine Video-Audio-Streaming-Geschichte mit niedriger,

01:52:37.040 --> 01:52:44.520
mit niedriger Verzögerung. Und auch PWAs und Apps, die man zum Homescreen auf Smartphones

01:52:44.520 --> 01:52:51.800
hinzufügt, brauchen zwingend SSL. Also sprich, wenn ihr intern was betreibt, zum Beispiel

01:52:51.800 --> 01:52:56.840
eine Nextcloud, ein Home Assistant oder sonst was und ihr möchtet den Home Assistant bei

01:52:56.840 --> 01:53:02.440
euch auf den Startbildschirm vom Smartphone hinzufügen oder ihr wolltet, ihr wollt Nextcloud

01:53:02.440 --> 01:53:06.640
Videokonferenz machen, irgendwas. Ja, also es gibt noch jede Menge andere Sachen, was

01:53:06.640 --> 01:53:12.760
nur über SSL geht, dann braucht ihr auch intern ein gültiges SSL-Zertifikat. Wie ihr das

01:53:12.760 --> 01:53:16.240
gültig macht, ist erstmal dahingestellt, ihr könnt es auch irgendwie importieren, aber

01:53:16.240 --> 01:53:21.200
die einfachste Sache, die es gibt, ist tatsächlich sich ein Domain besorgen und mit Let's Encrypt

01:53:21.200 --> 01:53:27.640
sich ein Zertifikat ausstellen. Und wie einfach das ist, zeige ich euch jetzt. Also hier mit

01:53:27.640 --> 01:53:32.040
der Config ist es ein bisschen komplizierter, weil wir es halt auch erweiterbar machen,

01:53:32.040 --> 01:53:36.840
an sich ein Zertifikat auszustellen für Let's Encrypt mit CertBot oder anderen Skripten

01:53:36.840 --> 01:53:41.960
ist wirklich eine Sache von einem Befehl, es ist total einfach. So, wir konfigurieren

01:53:41.960 --> 01:53:51.920
das Ganze jetzt mal hier. Es gibt zwei Hauptvarianten, wie man sich von Let's Encrypt Zertifikate

01:53:51.920 --> 01:54:06.160
ausstellen kann. Und das sind die HTTP-Challenge und die DNS-Challenge. Challenge ist in dem

01:54:06.160 --> 01:54:12.320
Fall quasi die Aufgabe, die man überwinden muss, damit man ein Zertifikat bekommt. Also

01:54:12.320 --> 01:54:19.040
sprich, es gibt einmal ein Authentifizierungsverfahren über HTTP und einmal ein Authentifizierungsverfahren

01:54:19.040 --> 01:54:22.960
über DNS. Ich mache mal kurz hier den Darkreader aus. Ich weiß, es blendet ein bisschen, aber

01:54:22.960 --> 01:54:26.560
ich finde, so das kann man besser erkennen. Das sind so die zwei Hauptverfahren. Es gibt

01:54:26.560 --> 01:54:30.920
noch andere Zeug, aber das verwendet eigentlich kaum einer. So, der Unterschied ist folgendes,

01:54:30.920 --> 01:54:36.360
ich erkläre euch mal, wie das funktioniert. Das ist eigentlich ziemlich big brain. Damit

01:54:36.360 --> 01:54:42.720
euch Let's Encrypt ein SSL-Zertifikat ausstellen kann, müsst ihr ja irgendwie beweisen, dass

01:54:42.720 --> 01:54:47.320
euch die Domain gehört. Also Leute, soll ich wieder Darkseam machen? Ist mir wurscht.

01:54:47.320 --> 01:54:56.440
Ich bin da schmerzfrei. Also irgendwie müsst ihr ja beweisen, dass ihr der rechtmäßige

01:54:56.440 --> 01:55:00.680
Besitzer der Domain seid. So, und da gibt es bei Let's Encrypt zwei Varianten, wie man

01:55:00.680 --> 01:55:06.040
das machen kann. Einmal HTTP-Challenge und einmal DNS-Challenge. HTTP-Challenge ist

01:55:06.040 --> 01:55:14.960
die einfachere von beiden. Die funktioniert folgendermaßen. Auf eurem Server, zum Beispiel

01:55:14.960 --> 01:55:22.400
auf dem hier, startet ihr einen Web-Server und hinterlegt dort eine Datei. Ne, stimmt

01:55:22.400 --> 01:55:27.040
gar nicht. Stimmt gar nicht, was ich erzähle. Muss ich ehrlich sagen, ich habe sehr selten

01:55:27.040 --> 01:55:41.440
eine HTTP-Challenge gemacht. Da wird das abgeloadet, oder? Oder muss man da was? Ehrlich gesagt

01:55:41.440 --> 01:55:48.920
weiß ich gar nicht so genau, wie es ist. Ah, hier. Genau, also folgendermaßen. Ihr installiert

01:55:48.920 --> 01:55:55.680
einen Web-Server auf eurer Linux-Kiste und stellt sicher, dass, ich habe wieder eingefallen,

01:55:55.680 --> 01:56:01.520
wie es funktioniert, und stellt sicher, dass die Domain, für die ihr das Zertifikat ausgestellt

01:56:01.520 --> 01:56:09.280
haben möchtet, auf diesen Server zeigt. Dann führt ihr ein Programm aus auf diesem Server,

01:56:09.280 --> 01:56:14.000
das sich zu Let's Encrypt verbindet und sagt, bitte stellen wir mal ein Zertifikat aus für

01:56:14.000 --> 01:56:20.600
diese Domain. Das Programm hinterlegt dann eine Datei mit einem Passwort auf dem Web-Server,

01:56:20.600 --> 01:56:30.000
mal ganz billig gesagt, ab. Also sprich, es wird eine Datei mit einem geheimen Token auf

01:56:30.000 --> 01:56:37.080
eurem Web-Server abgelegt. Let's Encrypt guckt nach, stimmt dieses Token überein mit dem

01:56:37.080 --> 01:56:42.160
Token, was ich erwarte, und wenn ja, bedeutet das, euch gehört die Domain. Weil euch muss

01:56:42.160 --> 01:56:48.920
die Domain gehören, denn Let's Encrypt nimmt die offizielle DNS-Auflösung und den Server,

01:56:48.920 --> 01:56:54.040
den sie damit aufgelöst haben, stellt quasi das gleiche Token zur Verfügung auf seinem

01:56:54.040 --> 01:56:58.360
Web-Server, wie Let's Encrypt erwartet. Das heißt im Endeffekt nichts anderes, wie ihr

01:56:58.360 --> 01:57:02.000
müsst das da hingelegt haben, ein anderer kann das da nicht hingelegt haben, weil ein

01:57:02.000 --> 01:57:10.160
anderer errät kein 128-stelliges Random-Token. Das heißt, wenn Let's Encrypt das auf diesem

01:57:10.160 --> 01:57:16.080
Web-Server findet, dann weiß er, ok, du bist der rechtmäßige Besitzer dieser Domain, dieses

01:57:16.080 --> 01:57:20.320
Servers, und du bekommst ein Zertifikat. So, das ist die eine Variante, wie es funktioniert.

01:57:20.320 --> 01:57:28.880
Das ist ein bisschen doof intern zu verwenden, denn was man dazu braucht, ist einen Web-Server,

01:57:28.880 --> 01:57:36.560
der öffentlich erreichbar ist von Let's Encrypt. Und ja, mein Server ist öffentlich erreichbar

01:57:36.560 --> 01:57:40.960
von Let's Encrypt, aber euer Server, euer Raspberry Pi, den ihr daheim stehen habt,

01:57:40.960 --> 01:57:45.440
der nicht. Und ich mach das hier auch stellvertretend für Leute, die das ganze daheim verwenden

01:57:45.440 --> 01:57:51.120
wollen. Dass wir das public machen, ist eigentlich bloß ein kleiner Gag da dran. Wir müssen das

01:57:51.120 --> 01:57:56.480
also anders machen. Sprich, die HTTP-Challenge funktioniert nicht, wenn der Server bei euch

01:57:56.480 --> 01:58:04.880
intern steht. Ist ja klar, ihr könnt zwar einen DNS-Wildcard einfügen. Also mal angenommen,

01:58:04.880 --> 01:58:15.920
ihr fügt einen DNS-Server von eurem Anbieter, fügt ihr einen Wildcard, Sternchenpunkt,

01:58:15.920 --> 01:58:22.000
meineDomain.com auf eine interne IP von euch. Dann macht Let's Encrypt eine Namensauflösung

01:58:22.000 --> 01:58:26.560
auf eine interne IP und die kommt natürlich nie an bei euch. Wie soll Let's Encrypt von

01:58:26.560 --> 01:58:31.120
sich auf eine interne IP bei euch zugreifen können? Funktioniert nicht. Man kann das

01:58:31.120 --> 01:58:36.600
natürlich machen, indem man Ports weiterleitet und sonstige Geschichten macht. Machbar ist

01:58:36.600 --> 01:58:42.280
das alles, aber es ist ziemlich kompliziert. Und dementsprechend nimmt man einfach was

01:58:42.280 --> 01:58:48.680
anderes, nämlich man nimmt die DNS-Challenge. Die DNS-Challenge finde ich auch in allen

01:58:48.680 --> 01:58:55.720
anderen Belangen viel einfacher. Die DNS-Challenge, also sprich, über DNS sein Zertifikat auszustellen,

01:58:55.720 --> 01:59:03.400
funktioniert, äh, jung, Snorlax, ja so ähnlich, so ähnlich. Die DNS-Challenge funktioniert

01:59:03.400 --> 01:59:07.720
ähnlich zu dem, wie ich erklärt habe, nur, dass man keinen Web-Server verwendet, um das

01:59:07.720 --> 01:59:14.160
geheime Talken Let's Encrypt zugänglich zu machen, sondern einen TXT-Record vom DNS.

01:59:14.160 --> 01:59:18.960
Also sprich, man geht wieder zu Let's Encrypt hin und sagt, Let's Encrypt, stell mir bitte

01:59:18.960 --> 01:59:25.960
den Zertifikat aus für ping.proggers.xyz. Dann sagt Let's Encrypt, alles klar, mach

01:59:25.960 --> 01:59:33.680
ich, beweis mir mal, dass du der Eigentümer der Domain bist, indem du in deinem DNS,

01:59:33.680 --> 01:59:38.600
auf dem ja nur der Domain-Eigentümer Zugriff hat, äh, folgendes langes Random-Passwort

01:59:38.600 --> 01:59:44.160
hinterlegst. Dann gehst du auf deinen DNS, machst einen TXT-Record mit dem super langen,

01:59:44.160 --> 01:59:50.800
geheimen Passwort, was dir Let's Encrypt mitgeteilt hat, dann macht Let's Encrypt ein DNS-Lookup,

01:59:50.800 --> 01:59:57.520
TXT-Record auf deine Domain und sieht, aha, da ist ja das lange, geheime Passwort-Talken

01:59:57.520 --> 02:00:03.480
hinterlegt, dann muss das ja wohl der rechtmäßige Eigentüm dieser Domain sein und du bekommst

02:00:03.480 --> 02:00:09.400
dein, ähm, Zertifikat. So, im Prinzip sind die beiden Challenges relativ ähnlich, das

02:00:09.400 --> 02:00:14.280
einmal funktioniert der Talkenaustausch über den Webserver, einmal funktioniert der Talkenaustausch

02:00:14.280 --> 02:00:24.840
über DNS. So, und das verwenden wir, weil das könnt ihr intern verwenden und das können

02:00:24.840 --> 02:00:33.200
wir auch auf unserem Server hier verwenden. Also wir verwenden DNS-Challenge und das ist

02:00:33.200 --> 02:00:41.760
auch der Grund, warum wir Cloudflare verwenden. Das ist der Grund, warum wir Cloudflare verwenden.

02:00:41.760 --> 02:00:52.200
Und man kann damit Wildcard-Zertifikate benommen, das kommt ja auch noch dabei. Das ist der

02:00:52.200 --> 02:01:00.280
Grund, warum wir Cloudflare verwenden, weil wir können in Cloudflare über die API DNS-Einträge

02:01:00.280 --> 02:01:07.600
anlegen und wir brauchen ja einen TXT-Record, der uns als Eigentümer der Domain ausweist

02:01:07.600 --> 02:01:14.440
und wir können über Cloudflare einen API-Talken generieren, worüber wir DNS-Einträge TXT-Records

02:01:14.440 --> 02:01:20.360
anlegen können und Traffic, also sprich das Ding, was wir hier als Load Balancer Reverse

02:01:20.360 --> 02:01:28.120
Proxy verwenden, der unterstützt Cloudflare schon eingebaut. Das heißt, wir müssen eigentlich

02:01:28.120 --> 02:01:34.960
nix anderes machen, wie dort in Traffic unser Token zu hinterlegen für Cloudflare und das

02:01:34.960 --> 02:01:40.240
komplette Handling, die komplette DNS-Challenge und die ganze Magic im Hintergrund macht Traffic

02:01:40.240 --> 02:01:46.640
für uns. Das einzige, was wir machen, müssen wir erstens hier unser DNS-API-Talken hinterlegen

02:01:46.640 --> 02:01:52.120
und sagen, auf welcher Domain der Server verfügbar sein soll. Fertig. Ach ja, und wir müssen

02:01:52.120 --> 02:01:58.640
die Domain besitzen, sonst funktioniert es natürlich nicht. So, das heißt, deswegen

02:01:58.640 --> 02:02:04.160
machen wir unseren DNS mit Cloudflare und damit das funktioniert, müssen wir uns erst

02:02:04.160 --> 02:02:10.600
mal einen API-Talken generieren lassen. Also, gehen wir mal auf, keine Ahnung, ich glaube

02:02:10.600 --> 02:02:15.800
im Profile ist das irgendwo, genau, API-Talkens und da muss man jetzt ein bisschen aufpassen.

02:02:15.800 --> 02:02:18.880
Ich zeige euch jetzt auch mal einen kleinen Trick, oder was heißt ein kleinen Trick, was

02:02:18.880 --> 02:02:22.440
wichtig ist, worauf man achten muss, wenn man sowas macht, vor allem wenn man sowas im Stream

02:02:22.440 --> 02:02:28.880
macht, worauf man achten sollte. Also, wir gehen jetzt erst mal auf Create-Talken und

02:02:28.880 --> 02:02:33.920
jetzt kann man auswählen, was möchte man mit, ich leake das API-Talken jetzt, aber

02:02:33.920 --> 02:02:40.360
ich beschränke das auf die IP von meinem Server. So, E-Mail ist auch nicht leaked,

02:02:40.360 --> 02:02:44.200
das ist meine offizielle Business-E-Mail, die ist eh öffentlich zugänglich auf YouTube

02:02:44.200 --> 02:02:51.320
und Twitch. So, also Edit DNS-Zones möchte ich den API-Talken für anlegen. Achja, irgendjemand

02:02:51.320 --> 02:02:57.320
hat gefragt, ob Cloudflare auch SSL kann, das ist was anderes. Cloudflare SSL ist dafür

02:02:57.320 --> 02:03:02.360
da, dass du deinen Traffic durch Cloudflare durchtunnelst, also quasi Cloudflare macht

02:03:02.360 --> 02:03:07.800
für dich DNS und leitet das dann quasi auf deinen Server weiter, das heißt dein Traffic

02:03:07.800 --> 02:03:11.960
geht durch Cloudflare durch. Was wir hier aktuell machen ist, wir verwenden nur den DNS von Cloudflare

02:03:11.960 --> 02:03:20.360
und der Traffic geht nicht durch Cloudflare. So, also was wir machen wollen ist, wir möchten

02:03:20.360 --> 02:03:27.680
einen API-Zugang für Cloudflare anlegen, nämlich wir wollen DNS-Zonen editieren dürfen, editieren,

02:03:27.680 --> 02:03:37.240
Resources für Procast XYZ und jetzt sagen wir IP-Attress-Filtering. So, was ihr jetzt

02:03:37.240 --> 02:03:42.680
hier machen würdet, normalerweise ist, die IP eintragen, eure Public-IP, mit der ihr

02:03:42.680 --> 02:03:47.800
von daheim zugreift oder aber es einfach leer lassen, weil ihr ja euren API-Key nicht öffentlich

02:03:47.800 --> 02:03:53.160
in einem Livestream liegt, so wie ich das jetzt gleich machen werde. Deswegen werde

02:03:53.160 --> 02:03:59.640
ich das beschränken und zwar, der Server, der das hier macht, ist ja meine Linux-Kiste.

02:03:59.640 --> 02:04:10.360
So, und das heißt, ich sage Cloudflare, okay, der Request, der muss von dieser IP kommen,

02:04:10.360 --> 02:04:15.760
also sprich, wenn der Request nicht von dieser IP kommt, macht nichts. Und das muss ich machen,

02:04:15.760 --> 02:04:20.720
weil ich sonst garantiert ganz viele lustige Leute im Chat habe, die Cloudflare zusperren

02:04:20.720 --> 02:04:28.440
mit meinem API-Talk. Deswegen sage ich, okay, IP-Attress-Filtering ist in, hat drin und

02:04:28.440 --> 02:04:36.360
so gut ist. Das heißt, ich kann es nur von meinem Server aus machen. Continue to Summary,

02:04:36.360 --> 02:04:42.320
Create Token, jetzt kommt der Big Leak, so und ich zeige euch jetzt mal, dass das nicht

02:04:42.320 --> 02:04:49.080
funktioniert. Ich führe es von meinem Server aus. This API-Token is valid and active. Ich

02:04:49.080 --> 02:05:09.320
führe es von meiner lokalen Kiste aus. Okay. Na gut, dann delete ich halt das API-Token

02:05:09.320 --> 02:05:23.080
wieder. Warum geht denn das nicht? Das muss doch funktionieren. Hä? Okay, nochmal, Create

02:05:23.080 --> 02:05:31.200
Token, Edit DNS Zone. Gucken, ob irgendwelche lustigen Leute schon was angelegt haben. Nein,

02:05:31.200 --> 02:05:51.840
nicht, so schnell war keiner. Ja, keine Ahnung, warum das funktioniert. Normalerweise, ich

02:05:51.840 --> 02:05:55.120
würde jetzt eigentlich von ausgehen, dass er sowas sagt wie Exist Denied oder sowas,

02:05:55.120 --> 02:06:01.400
aber... Ne, den manuellen DNS-Challenge mache ich nicht, das ist ja... Okay, machen wir

02:06:01.400 --> 02:06:08.320
das Ganze nochmal. Create, Edit DNS Zones. Wir machen mal nur Read, wir machen mal nur

02:06:08.320 --> 02:06:11.200
Read, dann kann man nämlich testen, ob es funktioniert, ohne dass wir was kaputt machen

02:06:11.200 --> 02:06:27.080
können. Zones include specific zone progress, IP-Address-Filtering is in. So, das ist doch

02:06:27.080 --> 02:06:32.000
meine IP hier, wird jetzt total hängen geblieben. Das ist auch die, auf die ich SSH gemacht habe

02:06:32.000 --> 02:06:45.960
vorhin, ja. Keine Ahnung, is in. By default, the stone will apply to our IP-Address. Okay,

02:06:45.960 --> 02:06:50.840
select IP-Addresses or range of IP-Addresses. Muss ich da vielleicht noch angeben? Slash

02:06:50.840 --> 02:07:02.920
32 oder so? Ne, macht er ja automatisch, ist er schlau genug für. Okay, warum auch immer.

02:07:02.920 --> 02:07:22.600
Create Token, ja, leak, IP-Talks. Okay, kann mir irgendjemand erklären, warum das funktioniert?

02:07:22.600 --> 02:07:51.640
Okay, keine Ahnung. Also, das hier ist vom Server ausgeführt und das hier ist von mir

02:07:51.640 --> 02:07:57.280
ausgeführt. Das sollte eigentlich nicht funktionieren, würde ich sagen. Also, ich hätte jetzt gesagt,

02:07:57.280 --> 02:08:03.440
da sollte so was drinstehen wie Exist Denied, ja. Funktioniert es bei euch auch, wahrscheinlich,

02:08:03.440 --> 02:08:16.680
ja. Ich mein, ihr könnt eh nur lesen, insofern kann da nichts passieren, aber. Select. Is

02:08:16.680 --> 02:08:45.000
not in. Plötzlich. Is not in. Der Token. Gucken. Okay. Okay. Okay. Okay. Okay. Okay. Okay.

02:08:45.000 --> 02:09:07.440
Nö, es juckt den auch nicht. Hä? Hm, sehr merkwürdig. Das ist doch die richtige IP,

02:09:07.440 --> 02:09:21.840
oder? Ja. Ist in? Weiß ich auch nicht.

02:09:37.440 --> 02:09:46.920
Okay, ich hab ehrlich gesagt keinen Schimmer, woran das liegt, dass das jetzt so, so merkwürdig

02:09:46.920 --> 02:09:52.040
ist. Okay. Vielleicht brauchst du ein paar Minuten, bis die Regel setzt. Nee, das wäre

02:09:52.040 --> 02:10:04.640
ganz schön fail. Ich mein, was anderes kann ich doch hier nicht machen. Okay, wie lese

02:10:04.640 --> 02:10:12.520
ich denn über die AP? Cloud, Flare, Read, Read, DNS, AP. Guck mal, probieren wir mal

02:10:12.520 --> 02:10:40.080
aus. Cloud, Flare, AP. Wie lese ich denn hier ab, was? What? DNS. DNS Records. List DNS

02:10:40.080 --> 02:11:03.000
Records. Was ist denn das Sound Identifier? Wow, wow. Das da, das da muss ich mal, ne?

02:11:03.000 --> 02:11:10.200
Also das da, das da. Probieren wir das mal aus. Okay. Moment, E-Mail will ich nicht.

02:11:10.200 --> 02:11:21.800
Ich will nicht E-Mail, sondern ich will dieses komische Toppen. Authentification Error, ja,

02:11:21.800 --> 02:11:38.000
ähm, Fallzone. Alle, alle DNS Records. Und jetzt brauch ich noch meine Zone ID, was ist

02:11:38.000 --> 02:11:54.840
meine Zone ID? Moment, was ist meine Zone ID? Wo sieht man

02:11:54.840 --> 02:12:22.120
das? Zone ID. Authentification Error. Ah, okay, okay, also das ist mal echt fail. Das

02:12:22.120 --> 02:12:30.080
ist mal echt fail. Also, okay, das funktioniert nicht. Das funktioniert so wie gedacht. Allerdings

02:12:30.080 --> 02:12:37.200
ist es fail, dass die, dass die Tests, dass der Test nicht richtig als Fehler geht, ne?

02:12:37.200 --> 02:12:43.800
Also sprich, man kann das nur von dem Server ändern, aber man kann abfragen, ob das AP-Tücken,

02:12:43.800 --> 02:12:52.920
ähm, ja. Okay. Ja, was auch immer. Also es funktioniert alles. Gut, dann können wir

02:12:52.920 --> 02:13:02.520
das Toppen jetzt ja ändern. Bug Bounty plus 500 Prozent. Wahrscheinlich ist das sogar Absicht.

02:13:02.520 --> 02:13:24.200
Okay, AP-Talkens. AP-Talkens, Edit. So, jetzt sagen wir Edit, DNS-Zone. Gut, nämlich wenn

02:13:24.200 --> 02:13:33.000
ich jetzt hier abfrage, dann geht's. Und wenn ich hier abfrage, geht's nicht. Ja, Authentification

02:13:33.000 --> 02:13:41.280
Error. Und da ist exakt genau der gleiche Shit, der, also sprich, der, der hier geht,

02:13:41.280 --> 02:13:47.840
der geht bei mir lokal nicht. Alles klar, alles gut, funktioniert. Cloudflare ist nur

02:13:47.840 --> 02:13:52.240
merkwürdig. Also, jetzt können wir mit der eigentlichen Sache weitermachen, die wir eigentlich

02:13:52.240 --> 02:13:58.120
da machen wollen. Also, wir haben jetzt dafür gesorgt, dass wir einen AP-Zugang haben zu

02:13:58.120 --> 02:14:03.840
Cloudflare, dass wir DNS-Challenges, dass wir die, dass wir TXT-Records anpassen können

02:14:03.840 --> 02:14:07.640
für die DNS-Challenge von NetEncrypt. Allerdings, wie ich gesagt habe, wir wollen das ja nicht

02:14:07.640 --> 02:14:13.440
selbst machen von Hand, sondern wir möchten, dass Traffic das Ganze für uns macht. So,

02:14:13.440 --> 02:14:18.760
und was wir jetzt mal machen werden, ist, dass unser Ping-Service ein gültiges SSL-Zertifikat

02:14:18.760 --> 02:14:24.160
abbekommt. So, was man da für machen muss, ist Folgendes. Das ist jetzt, da sieht das

02:14:24.160 --> 02:14:27.200
ein bisschen kompliziert aus, deswegen muss ich auch, muss ich auch gerade mal kurz abgucken.

02:14:27.200 --> 02:14:32.720
Ups, so, muss ich abgucken, weil das kriege ich auch aus dem Kopf, aus dem Kopf nicht

02:14:32.720 --> 02:14:37.720
zusammen. Also, muss ich mir jetzt zusätzlich sagen, ok, ich möchte, Traffic, ich möchte,

02:14:37.720 --> 02:14:42.400
dass du für mich Let's Encrypt-Zertifikate abrufst. So, da muss man zuerst einmal das

02:14:42.400 --> 02:14:46.160
hier einfügen. Ich copy paste mir das, da kriegst du es durch, wenn du das jetzt von

02:14:46.160 --> 02:14:54.840
Hand schreiben musst. Das da, man muss nämlich sagen, ok, Zertifikat Resolvers DNS-Challenge,

02:14:54.840 --> 02:15:01.360
das ist das Let's Encrypt-Protokoll und ich will DNS-Challenge machen. Also, DNS-Challenge

02:15:01.360 --> 02:15:10.040
ist quasi der Name, dem ich diesem Zertifikat-Dings da gebe und DNS-Challenge heißt, ich möchte

02:15:10.040 --> 02:15:16.360
keine HTTP-Challenge machen, also nicht das hier, sondern ich möchte DNS-Challenge machen.

02:15:16.360 --> 02:15:20.800
Also, ich sag Traffic, mach das mal für mich. So, das nächste, was ich brauche ist, von

02:15:20.800 --> 02:15:27.120
wo überhaupt? So, das setze ich auf Cloudflare, weil ich verwende ja Cloudflare. So, das nächste,

02:15:27.120 --> 02:15:39.600
was ich brauche ist, ich muss ihm sagen, Playlist ist schon wieder vorbei. Nochmal, wir hören

02:15:39.600 --> 02:15:43.520
das jetzt, bis wir durch sind. Das nächste, was ich ihm sagen muss, ist, wo er das ganze

02:15:43.520 --> 02:15:49.400
speichern soll. Da kommen wir gleich dazu. Er soll das nämlich unter Let's Encrypt hier

02:15:49.400 --> 02:15:56.080
in dieser JSON-Datei speichern, denn man muss ja dazu sagen, wenn er die Zertifikate nicht

02:15:56.080 --> 02:16:02.880
irgendwo speichern würde, persistent auf dem File-System, jedes Mal, wenn ich docker-compose-stopp

02:16:02.880 --> 02:16:08.040
down mache und ab, würde der ja neue Zertifikate ausstellen. Erstens hat man relativ schnell

02:16:08.040 --> 02:16:12.120
das Limit erreicht dann, wenn man das mehrfach am Tag macht, was Let's Encrypt einem am Tag

02:16:12.120 --> 02:16:16.640
ausstellen lässt. Das zweite ist, es ist ja auch ein bisschen verwirrend für den User,

02:16:16.640 --> 02:16:23.760
wenn sich laufend Zertifikate ändern und SSH meckert ja auch. Also, wir müssen ihm sagen,

02:16:23.760 --> 02:16:31.000
wo er die Zertifikate speichern soll, dass das Neustart überlebt. So, und das letzte

02:16:31.000 --> 02:16:35.040
ist was, das braucht man, man kann es leider nicht ausstellen, normalerweise mach ich's

02:16:35.040 --> 02:16:40.320
immer weg, aber bei Traffic kann man es nicht ausstellen. Man muss ihm sagen, welche E-Mail-Adresse

02:16:40.320 --> 02:16:46.160
als Ansprechpartner fungiert und da nehmen wir mal die allseits bekannte keqw.progas.xyz.

02:16:46.160 --> 02:16:52.200
By the way, Progas hat nicht mal einen MX-Rekord, der kann überhaupt keine E-Mails zustellen,

02:16:52.200 --> 02:16:58.240
aber das juckt Let's Encrypt nicht, Hauptsache steht eine E-Mail-Adresse drin. So, das haben

02:16:58.240 --> 02:17:06.200
wir und wer jetzt aufgepasst hat, BigBrainTime, der wird festgestellt haben, ok, ich möchte

02:17:06.200 --> 02:17:13.160
was speichern, allerdings, ich hab ihm gar nicht gesagt, wo er was speichern soll. Muss

02:17:13.160 --> 02:17:16.720
die Chase nicht auch gemounted, was machen wir jetzt? Ich muss ihm ja auch noch sagen,

02:17:16.720 --> 02:17:20.880
wo er was speichern soll. So, und dann nehmen wir jetzt mal einen Ordner, keine Ahnung,

02:17:20.880 --> 02:17:29.880
ein Verzeichnis oben drüber oder hier home max let'sencrypt, da soll er was drin speichern

02:17:29.880 --> 02:17:37.640
und intern im Container ist das Ganze unter slash let'sencrypt verfügbar. Also alles,

02:17:37.640 --> 02:17:43.840
was ich im Container, in diesem Traffic-Container unterhalb von let'sencrypt speichere, kommt

02:17:43.840 --> 02:17:51.160
auf meinem eigentlichen Host hier im Fallsystem raus. Ich glaube, da lässt das TXT-Challenge

02:17:51.160 --> 02:17:59.840
taubend rauf. Bis zum nächsten Mal dann. So, und was jetzt passiert ist, wenn ihr jetzt

02:17:59.840 --> 02:18:07.240
DNS-Challenge macht, ein Zertifikat ausstellt, dann ist das dann überlebt das auch Neustarts,

02:18:07.240 --> 02:18:11.960
Neustarts, weil das hier auf dem Fallsystem ablegt. Was wir jetzt noch machen sollten

02:18:11.960 --> 02:18:18.240
ist mkdir let'sencrypt einen Ordner anlegen, der let'sencrypt heißt, sonst merkt er wahrscheinlich.

02:18:18.240 --> 02:18:25.520
Und nun sind wir soweit fertig mit der DNS-Challenge. Jetzt müssen wir ihm natürlich noch sagen,

02:18:25.520 --> 02:18:34.600
wie er Zugriff auf Cloudflare überhaupt hat. Und da kommt jetzt unser Token ins Spiel.

02:18:34.600 --> 02:18:41.680
Unser Token ist ja das hier, das ist ja unser Token, was hier, by the way, nicht funktioniert,

02:18:41.680 --> 02:18:48.640
glücklicherweise. Das ist hier unser Token und das müssen wir dem jetzt irgendwie beibringen,

02:18:48.640 --> 02:18:53.760
wie das funktioniert. Und da habe ich mich echt dumm und dusselig gesucht, als ich das

02:18:53.760 --> 02:18:58.120
zum ersten Mal versucht habe, in den Traffic Docs zu finden, wie das funktioniert. Ich

02:18:58.120 --> 02:19:15.520
zeige euch mal, wo das steht. Das ist total, total versteckt. Das ist Trafficv1. Das ist

02:19:15.520 --> 02:19:22.600
total versteckt. DNS-Challenge, Provider, dann sucht man sich hier auf Cloudflare, additional

02:19:22.600 --> 02:19:30.000
configurations, additional configurations und dann findet man hier die Variablen, die

02:19:30.000 --> 02:19:34.600
man setzen muss, wo man das Token reinpappen kann. Und in dem Fall, was wir suchen, ist

02:19:34.600 --> 02:19:42.920
CFDNS API-Token. Das gibt es übrigens erst relativ neu. Früher ging das Ganze nur mit

02:19:42.920 --> 02:19:47.520
Vollzugriff auf Cloudflare. Das wäre jetzt hier schlecht zu leaken. Jetzt geht es auch

02:19:47.520 --> 02:19:54.600
mit DNS-Token. In den Untiefen der Doku, also das ist wirklich echt big brain versteckt.

02:19:54.600 --> 02:20:00.960
So und jetzt sagen wir, okay, damit du die Zertifikate abrufen kannst, verwende folgendes

02:20:00.960 --> 02:20:11.880
Token, environment. Also sprich, wir setzen jetzt eine Umgebungsvariable, nämlich die

02:20:11.880 --> 02:20:20.760
Umgebungsvariable, ja fast. Wir setzen hier, wir setzen die Umgebungsvariable, fuck, Alter.

02:20:20.760 --> 02:20:31.640
So, CFDNS API-Token setzen wir auf unser Cloudflare-Token. So und jetzt kann Traffic für uns diesen

02:20:31.640 --> 02:20:38.880
ganzen Geschiss automatisch machen. Also sprich, jetzt kann Traffic, sobald es einen Container

02:20:38.880 --> 02:20:46.600
gibt, für eine Domain dorthin gehen zu Let's Encrypt, unser API-Token verwenden, DNS-Challenge

02:20:46.600 --> 02:20:53.880
machen, geheimes Token hinterlegen, Zertifikat bekommen, speichern, den Service hier load

02:20:53.880 --> 02:20:59.440
balancen mit dem richtigen Zertifikat. Ohne, dass wir jetzt ab jetzt, müssen wir nichts

02:20:59.440 --> 02:21:04.640
mehr konfigurieren für weitere Container großartig. Und wir kriegen immer ein neues

02:21:04.640 --> 02:21:09.100
Zertifikat für unsere neuen Container gültig direkt von Let's Encrypt. Und das ist natürlich

02:21:09.100 --> 02:21:13.560
ziemlich poggers. Wir gucken uns, dass das Ganze noch funktioniert. Einzige Sache, die

02:21:13.560 --> 02:21:20.000
wir jetzt noch machen müssen ist, wir müssen dem hier sagen, dass er als Entry Point Web

02:21:20.000 --> 02:21:26.360
Secure verwendet. Also Web ist Port 80, Web Secure ist Port 443, haben wir hier oben eingestellt.

02:21:26.360 --> 02:21:30.800
Und eine Sache müssen wir noch machen, warum auch immer, verstehe ich nicht, warum man

02:21:30.800 --> 02:21:36.760
die machen muss, aber man muss die machen. Man muss dem jeweils in Container noch sagen,

02:21:36.760 --> 02:21:42.160
über welchen Weg er das Zertifikat abrufen soll. Also kann ich verstehen, wenn man zum

02:21:42.160 --> 02:21:49.680
Beispiel mehrere Domains darüber verwendet, dann muss man ja vielleicht für die eine Domain

02:21:49.680 --> 02:21:54.440
diese Authentifizierung nehmen und für die andere Domain diese Authentifizierung nehmen.

02:21:54.440 --> 02:21:59.440
Könnte ja sein, deswegen muss man das hier unten angeben, okay, meinetwegen. Kann ich

02:21:59.440 --> 02:22:04.880
mitleben? Passt, gut. So, und jetzt gucken wir mal, ob der ganze Kram funktioniert. Jetzt

02:22:04.880 --> 02:22:11.720
sagen wir nämlich, okay, Docker Compose. Hallo, Docker, ist alles down, by the way, ja. Jetzt

02:22:11.720 --> 02:22:18.760
sagen wir, Docker Compose, fahr mal unsere neue Config hoch. Er startet das, er startet

02:22:18.760 --> 02:22:24.920
das. Er sollte jetzt, oh, ich hätte Debug, ich hätte Debug einschalten sollen, weil

02:22:24.920 --> 02:22:30.320
jetzt sehen wir nix. Also er sollte jetzt zuletzt Encrypt gehen, ein Zertifikat abrufen,

02:22:30.320 --> 02:22:34.640
das Zertifikat speichern und wir sollten ein gültiges Zertifikat bekommen. Probieren

02:22:34.640 --> 02:22:44.840
wir mal aus. Ping, also HTTPS, doppelt Punkt doppelt, Ping Progas XYZ und siehe da, ein

02:22:44.840 --> 02:22:54.880
gültiges SSL Zertifikat. Ist das nicht nice? Und ich musste nichts machen von Hand. Das

02:22:54.880 --> 02:23:01.120
ist echt nice. So, wahrscheinlich, gehe ich mal von aus, ist den meistens nicht klar,

02:23:01.120 --> 02:23:06.600
wie viel Arbeit einem das abnimmt. Nur mal so als Beispiel, wir haben es jetzt konfiguriert,

02:23:06.600 --> 02:23:09.120
das war jetzt ein relativ großer Aufwand, könnte man sagen, vor allem, wenn man es

02:23:09.120 --> 02:23:16.080
noch nicht gemacht hat, aber guckt mal. Mal angenommen, ich möchte jetzt noch ein paar

02:23:16.080 --> 02:23:23.200
mehr Who Am I Container haben. Der würde für, also ich mein, ich müsste jetzt den Namen

02:23:23.200 --> 02:23:27.360
ändern und die Domain, der würde jetzt für alle Domains neue Zertifikate ausstellen

02:23:27.360 --> 02:23:35.480
gültige. Ich mach mal kurz Debug an, dann sieht man nämlich auch, was er macht. Wie

02:23:35.480 --> 02:23:56.800
schaltet man Debug ein? Locked Level Debug. Locked Level Debug, alles klar. So, machen

02:23:56.800 --> 02:23:58.960
wir mal Who Am I 1, oder hier, 2, 3, 4, 5, da brauchen wir noch unterschiedliche Domains,

02:23:58.960 --> 02:24:07.200
das ist Who Am I, keine Ahnung, Ping, ah noch, komm wir sind unkreativ, wir machen Ping 2,

02:24:07.200 --> 02:24:16.800
Ping 3, Ping 4, Ping 5. So, und achso, eins nicht vergessen, das wäre sonst zu einfach,

02:24:16.800 --> 02:24:24.080
hier muss man den Kram auch eintragen, 2, 3, man macht das ja normalerweise nicht für

02:24:24.080 --> 02:24:30.160
den gleichen Container, sondern für unterschiedliche Services, 4, 5. So, und jetzt starte ich den

02:24:30.160 --> 02:24:38.960
Kram, erstmal down machen, erstmal down, up, und nun starte der, oh, Moment, irgendwas

02:24:38.960 --> 02:24:45.440
verkehrt gemacht, ach Containername hab ich vergessen anzupassen, alter, ich kack noob,

02:24:45.440 --> 02:25:01.200
Containername, 3, 4, 5, so down, up. Äh, nee, das ist jetzt, da verwendet er keinen Wildcard

02:25:01.200 --> 02:25:06.600
dafür, aber du kannst Wildcards mit DNS Challenge verwenden, wenn du wirklich willst. Es ist

02:25:06.600 --> 02:25:12.600
aber besser, du verwendest keinen Wildcard, weil du mit den Raid Limits von Let's Encrypt

02:25:12.600 --> 02:25:20.880
so besser hinkommst. Also du kannst auch mit dem Wildcard Zertifikat machen, aber wozu,

02:25:20.880 --> 02:25:25.760
das ist viel praktischer, finde ich. So, jetzt starten wir das Ganze mal, und wir sehen jetzt

02:25:25.760 --> 02:25:32.640
schon, wir haben eine Config Änderung vorgenommen, der startet für uns, alle Container holt sich

02:25:32.640 --> 02:25:43.040
Zertifikate, Announce Zertifikat, ok, was auch immer, guck, er ruft sich Zertifikate

02:25:43.040 --> 02:25:50.720
ab, Ping Proggers, Ping 2 Proggers, äh, Zertifikat Request, so, gehen wir mal hier drauf, Ping

02:25:50.720 --> 02:25:56.800
Proggers gültiges Zertifikat, Ping 2 Proggers gültiges Zertifikat, Ping 3 Proggers gültiges

02:25:56.800 --> 02:26:07.120
Zertifikat, und das ist extrem nice, und nimmt sehr viel, ähm, sehr viel Arbeit ab,

02:26:07.120 --> 02:26:10.160
das ist, das ist, ich glaube das könnt ihr euch jetzt vorstellen, das ist wirklich sehr

02:26:10.160 --> 02:26:19.360
praktisch, das ist wahrlich exzellent. So, der Beispiel jetzt hier mit den 5 WhoAmI Containern

02:26:19.360 --> 02:26:23.720
war natürlich ein bisschen an den Hahn herbeigezogen, das würde man normalerweise nicht machen

02:26:23.720 --> 02:26:29.560
mit WhoAmI Containern, sondern man würde verschiedene Services verwenden, ja, also nicht nur WhoAmI

02:26:29.560 --> 02:26:44.240
Container, sondern vielleicht noch irgendwie ein, was weiß ich, ein, ne Ahnung, Next Cloud

02:26:44.240 --> 02:26:54.520
oder so, oder ein Git, Git Server oder sowas, Speedcast, Speedtest Container, alle möglichen

02:26:54.520 --> 02:26:59.720
Sachen, ähm, so, da können wir noch, können wir jetzt beispielsweise noch was anderes

02:26:59.720 --> 02:27:04.160
machen, was auch sehr praktisch ist, also wir sehen jetzt das hier, was ich aufgemalt

02:27:04.160 --> 02:27:14.440
hab funktioniert, genau so, wunderbar, ähm, hab ich mal ein Bild, also unser Traffic Reverse

02:27:14.440 --> 02:27:19.240
Proxy Proxied, wunderbar, hast du wirklich Sternchen in deiner Zone stehen, ja hab ich,

02:27:19.240 --> 02:27:24.920
ähm, Proxied wunderbar, macht auch wunderbar Zertifikate für jeden weiteren neuen Backend

02:27:24.920 --> 02:27:30.280
Container, den wir hinzufügen, und bei dem wir sagen Traffic Enable True, also wir können

02:27:30.280 --> 02:27:34.960
damit auch Container konfigurieren, die rein intern sind und nicht nach außen weiter gereicht

02:27:34.960 --> 02:27:38.960
werden, also wenn ich Traffic Enable True weglasse, dann lässt er das ganze bleiben,

02:27:38.960 --> 02:27:56.440
so, ähm, so, dann würde ich sagen, dann legen wir jetzt nochmal, ach ja, stimmt, eine

02:27:56.440 --> 02:28:00.680
Sache kann ich euch auch noch zeigen, was auch ganz cool ist, ich hab ja gesagt, wenn man

02:28:00.680 --> 02:28:07.920
hier Services betreibt, die selbst keine Authentifizierung brauchen, ja, und die selbst keine Authentifizierung

02:28:07.920 --> 02:28:13.000
unterstützen, kann man die Authentifizierung hier machen, das ist, das ist sinnvoll, zum

02:28:13.000 --> 02:28:18.280
Beispiel, mal angenommen ich sag hier, dieser Who Am I Container, ich möchte nicht, dass,

02:28:18.280 --> 02:28:26.640
dass man das hier ohne Passwort aufrufen kann, oh, dann kann ich sagen, ja, Reverse Proxy,

02:28:26.640 --> 02:28:32.240
bevor du die Anfragen weiter proxiesst, an den Who Am I Container, dann mach doch mal

02:28:32.240 --> 02:28:38.760
nen Basic Aus, mach doch mal ne Passwortabfrage davor, was auch sinnvoll sein kann, das können

02:28:38.760 --> 02:28:41.480
wir noch, das können wir noch machen, wenn ihr wollt, ähm, weil das hab ich nämlich

02:28:41.480 --> 02:28:46.400
auch in meinem Spickzettel drinne stehen, ähm, da kann man nämlich an der Stelle sagen,

02:28:46.400 --> 02:28:52.200
wir möchten jetzt noch mal eine Runde, eine Runde Basic, Basic Aus einrichten, kurz schauen,

02:28:52.200 --> 02:29:10.560
wo ich das gemacht hab, genau, Basic Aus, heute definitiv kategoriere lehrreich, ja,

02:29:10.560 --> 02:29:19.000
genau, so, Basic Aus machen wir folgendermaßen, äh, ein, ich muss mir das grad mal copy pasten,

02:29:19.000 --> 02:29:32.640
Basic Aus, zack, das brauchen wir jetzt noch zusätzlich hier bei, äh, hier, bei, bei

02:29:32.640 --> 02:29:43.200
Commands, ne, bei, bei Labels, Labels, komm ich auch noch, so, fügen wir das mal hinzu,

02:29:43.200 --> 02:29:55.280
was wir jetzt hier anlegen ist ein, äh, Kombination, Username Max, Passwort 123456, HTTPS redirect,

02:29:55.280 --> 02:29:59.640
könnte ich zeigen, ist aber unnütz kompliziert, wir werden, wir werden HTTPS nämlich einfach

02:29:59.640 --> 02:30:06.200
ausschalten jetzt, erstmal, HTTPS einfach weg, also das hier ist, ob ihr mir das glaubt

02:30:06.200 --> 02:30:10.000
oder nicht, das ist die Kombination, wenn ich, wenn ich, wenn ich es noch richtig aus dem

02:30:10.000 --> 02:30:18.240
Kopf hinkriege, Max und Passwort 123456, was man eingeben muss, ähm, kriegt man folgendermaßen

02:30:18.240 --> 02:30:27.520
raus, Traffic Basic Aus, wir können es auch mal von Hand machen, Traffic Basic Aus, genau,

02:30:27.520 --> 02:30:35.760
so, so generiert man das ganze, man das, wenn man das will, Apache Utils, können wir installieren,

02:30:35.760 --> 02:30:51.280
Ups, install, Apache 2 Utils, so, äh, äh, Moment, nicht User, Passwort, Max, Passwort

02:30:51.280 --> 02:30:57.160
123456, und übrigens ein Tipp, wenn ihr nicht wollt, dass solche Commandos bei euch unter

02:30:57.160 --> 02:31:02.480
History von der Shell stehen, macht einfach ein Leerzeichen davor, und wenn ihr jetzt

02:31:02.480 --> 02:31:09.440
in die History guckt, seht ihr, das steht nicht drinnen, also Super, Super Secret, ne,

02:31:09.440 --> 02:31:13.520
das ist richtig Big Brain, jetzt muss ich das ganze natürlich noch mal machen, Max,

02:31:13.520 --> 02:31:23.200
123456, so, das ist die Kombination, das ist quasi die Username mit Hashwert und Salt und

02:31:23.200 --> 02:31:27.720
Gedöns, wie auch immer, vollkommen egal, muss man nicht verstehen, was man wissen muss,

02:31:27.720 --> 02:31:35.600
ist, man muss das an der Stelle in die Traffic Conf rein Copy Pasten, da, hier, an der Stelle

02:31:35.600 --> 02:31:39.760
muss man das rein Copy Pasten, so, und wenn Wim den Scheiß dann auch noch mal aufhören

02:31:39.760 --> 02:31:53.000
würde, eins zurück, wäre auch gut, gar nicht, der Traffic Container hat Zugriff,

02:31:53.000 --> 02:31:59.080
Read Only auf Docker, und der guckt nach in der Docker Config, der Traffic Container

02:31:59.080 --> 02:32:03.760
hat Zugriff auf Docker, Docker weiß natürlich, welche Labels angelegt sind oder welche Infos

02:32:03.760 --> 02:32:09.080
bei einem Container dabei stehen, und der Traffic Container guckt über Docker nach,

02:32:09.080 --> 02:32:17.320
was da für Labels dranstehen, so, und jetzt können wir dem Who Am I Container sagen,

02:32:17.320 --> 02:32:32.000
danach gucke, muss, wie das funktioniert, und muss über den Spickzettel, genau, und

02:32:32.000 --> 02:32:39.040
jetzt können wir dem Who Am I Container sagen, ok, benutze mal als Basic Auth das Passwort

02:32:39.040 --> 02:32:45.840
hier, so, und wenn ich jetzt starte, möchte der von mir den Passwort wissen, wenn ich

02:32:45.840 --> 02:32:49.560
alles, wohlgemerkt, wenn ich alles richtig gemacht habe, möchte der von mir den Passwort

02:32:49.560 --> 02:32:59.880
wissen, ich hoffe, ich habe alles richtig gemacht, Dankeschön für die 3 Cent Sebastian

02:32:59.880 --> 02:33:18.120
Zuchtbude, so, Down, Up, Moment, Down, Wim, Scheiß mal auf Debug Output, das muss ich

02:33:18.120 --> 02:33:30.400
ja nicht übertreiben, jetzt, ab, was, Auth does not exist, warum nicht, das habe ich falsch

02:33:30.400 --> 02:33:47.200
gemacht, ok, ich habe irgendwas verkackt, was habe ich denn verkehrt gemacht, Auth does

02:33:47.200 --> 02:34:17.120
not exist, ne, ne, das stimmt, was habe ich denn verkehrt gemacht, der Auth muss in, ah,

02:34:17.120 --> 02:34:30.560
stimmt, stimmt, so, ne, stimmt, ja, ok, das würde an der Stelle, aber man kann ihn auch

02:34:30.560 --> 02:34:44.280
irgendwie global konfigurieren, so, auf geht's, ok, Ping 3 gibt es nicht mehr, not found,

02:34:44.280 --> 02:34:54.720
Ping, ho, Passwort, und das, obwohl der eigentliche Service überhaupt kein Passwort Authentifizierung

02:34:54.720 --> 02:34:59.880
kann, Max, 1, 2, 3, 4, 5, 6, und jetzt haben wir wieder Zugriff drauf, also sprich, wir

02:34:59.880 --> 02:35:05.520
haben jetzt einen Service, wir haben jetzt unseren Service hier hinten mit Authentifizierung

02:35:05.520 --> 02:35:10.120
ausgestattet, der selbst gar keinen hat, was natürlich auch eine praktische Geschichte

02:35:10.120 --> 02:35:16.520
ist, also sprich, wir haben jetzt unserem Service hier hinten beigebracht, SSL zu können

02:35:16.520 --> 02:35:23.080
und Authentifizierung zu können, ihr könnt's ausprobieren, also ihr müsst die gleiche

02:35:23.080 --> 02:35:38.400
Abfrage bekommen, wenn ihr ping.poggersxyz macht, Max, 1, 2, 3, 4, 5, 6 ist das Passwort,

02:35:38.400 --> 02:35:45.960
das ist natürlich sehr praktisch, also wenn ihr irgendwas laufen lassen wollt, oder extern

02:35:45.960 --> 02:35:49.960
zugänglich machen wollt, was selbst keine Authentifizierung hat, ich würde da mit das

02:35:49.960 --> 02:35:56.000
eh nochmal überlegen, aber mal genommen, ihr wollt das, dann könnt ihr das zumindest

02:35:56.000 --> 02:35:59.720
soweit Passwort schützen, natürlich auch praktische, sehr praktische Geschichte, ne?

02:35:59.720 --> 02:36:14.480
Oh, down. Oh, Levantin links ist da ganz korrekt, was das angeht, ja, es ist TLS tatsächlich,

02:36:14.480 --> 02:36:20.160
hat er recht, und auch ne neuere Version, 1.0 und 1.1, wobei gab's 1.1 überhaupt,

02:36:20.160 --> 02:36:25.720
also 1.0 ist auf jeden Fall vorbei jetzt, ja, für Wartungsarbeiten ist das auch ne ganz

02:36:25.720 --> 02:36:30.000
gute Geschichte, man kann auch irgendwie Redirects zu Wartungsseiten machen und sowas,

02:36:30.000 --> 02:36:37.800
wenn man's voll übertrieben machen möchte, aber man hat jetzt nem Service beigebracht,

02:36:37.800 --> 02:36:43.440
SSL zu können, also dem Service nicht wirklich, der funktioniert ja nach wie vor ohne SSL,

02:36:43.440 --> 02:36:49.640
aber man hat nen Service jetzt, SSL davor, ein gültiges SSL Zertifikat und ne Authentifizierung,

02:36:49.640 --> 02:36:55.560
die er vorher nicht hatte und veröffentlich im Internet zugänglich war, das ist natürlich

02:36:55.560 --> 02:37:01.480
äußerst praktisch und das Beste ist, ich kann jetzt einfach, ich mein, ich muss nichts

02:37:01.480 --> 02:37:05.960
konfigurieren, ne? Ihr seht's ja grad, Leute, ich muss nichts konfigurieren, das Einzige,

02:37:05.960 --> 02:37:11.360
was ich brauch, meine Docker Compose Datei, ich sag Docker Compose up und der konfiguriert

02:37:11.360 --> 02:37:16.640
mir das komplett, wie ich das brauch und starte das so, das heißt, wenn ich das jetzt

02:37:16.640 --> 02:37:23.920
als Ausgangspunkt nehme, kann ich alle meine anderen internen Services konfigurieren und

02:37:23.920 --> 02:37:30.400
entweder nur intern verwenden oder auch von extern zugänglich machen, wie ich das will,

02:37:30.400 --> 02:37:38.800
oder halt intern bei mir über den Reverseproxy zugänglich machen. Ich hab das bei mir beispielsweise

02:37:38.800 --> 02:37:43.440
auch so laufen, also mein ganzes Zeug, was ich hier auf der Kiste hab, also sprich von

02:37:43.440 --> 02:37:53.880
Nextcloud bis das Gitfrontend, die Kameraüberwachungssoftware, das ist alles hinter hier in nem Traffic Reverseproxy

02:37:53.880 --> 02:38:02.720
weil das Handling halt total easy ist. Traffic verbraucht leider viel CPU-Leistung, das ist

02:38:02.720 --> 02:38:06.480
möglich, kann ich, also Performance kann ich nix sagen, aber da haben die meisten Leute

02:38:06.480 --> 02:38:09.720
kein Problem damit. So, und jetzt wollen wir noch auf einen weiteren Punkt zurück zu

02:38:09.720 --> 02:38:14.320
kommen, den ich am Anfang genannt hab. Übrigens, ich kann euch jetzt bei der Gelegenheit auch

02:38:14.320 --> 02:38:22.560
mal zeigen, wie easy es sein kann, dort jetzt sagen wir mal nen, was kann ich da jetzt mal

02:38:22.560 --> 02:38:28.200
kurz laufen lassen? Was kann ich denn da mal kurz laufen lassen, wo man nix kaputt machen

02:38:28.200 --> 02:38:40.880
kann? Nen Git-Server. Ich lass jetzt einfach mal, naja. Was, wie monitort man die Container?

02:38:40.880 --> 02:38:51.360
Na entweder intern mit irgendeinem Prometheus, was Docker versteht und kann, oder halt ganz

02:38:51.360 --> 02:39:03.440
normal von außen guckt halt den Service nach. Ich mach mal nen Git drauf, da müsste ich

02:39:03.440 --> 02:39:13.560
aber mal nen Passwort generieren, was ihr nicht kennt. Da muss ich mal nen Passwort generieren,

02:39:13.560 --> 02:39:34.240
was ihr nicht kennt. So, da muss ich euch mal kurz rausschmeißen hier. So und das ganze

02:39:34.240 --> 02:39:56.280
muss ich mir auf der anderen Seite aufschreiben, weil sonst vergess ich's definitiv. Gut, da

02:39:56.280 --> 02:40:10.200
sind wir wieder. Wim Docker Compose. Das hier ist das Passwort. Da, da. Mal gucken. So,

02:40:10.200 --> 02:40:14.480
wir legen mal nen Git-Server an. Machen wir mal. Kann ich hier mal abgucken von meiner

02:40:14.480 --> 02:40:25.680
anderen Config? Wir legen mal nen Git-Frontend an jetzt. Zack, Set-Paste. Aus dem Geräusch

02:40:25.680 --> 02:40:31.840
der Tasten natürlich das Passwort rekonstruieren. Exzellente Idee. So, wir legen jetzt mal hier

02:40:31.840 --> 02:40:41.760
nen Git-Tier, wie auch immer man das ausspricht. Web-Frontend zum Git-Management an. In den

02:40:41.760 --> 02:40:53.600
Ordner Home, HomeMaxGit-Tier-Dings. So, das geht nach Data. Ports brauchen wir jetzt Ports

02:40:53.600 --> 02:40:59.880
22 für Git, sonst funktioniert's nicht. Wir sagen TrafficEnableTrue. Wir sagen Git-Progress.xyz.

02:40:59.880 --> 02:41:10.200
SecureDNS-Challenge. Port 3000. Braucht man, weil intern läuft's auf Port 3000. Und gut

02:41:10.200 --> 02:41:17.600
ist. Das hier übrigens, wenn man hier die Ports konfiguriert, die gehen vorbei am Reverseproxy.

02:41:17.600 --> 02:41:23.880
Müssen sie in dem Fall auch, weil SSH kann der Reverseproxy nicht. Oder kann er das?

02:41:23.880 --> 02:41:28.080
Doch, das müsste er wahrscheinlich auch können. Könnte man bestimmt auch konfigurieren.

02:41:28.080 --> 02:41:32.360
Kann er SSH? Nee, kann er nicht. Kann er nicht. Der kann keinen TCP-Load balenzen. Geh ich

02:41:32.360 --> 02:41:36.560
mal von aus. Ach, keine Ahnung. Hab ich nicht ausprobiert. Okay, schauen wir mal, ob das

02:41:36.560 --> 02:41:48.200
Ganze jetzt funktioniert. Wir müssen jetzt natürlich noch sagen, ja, das brauchen wir

02:41:48.200 --> 02:41:58.480
noch. Authentifizierung. Zack. Das ist mein super secret special Passwort. Und das nennen

02:41:58.480 --> 02:42:05.040
wir nicht Auth, sondern hier BigBrainAuth2. Und das da unten nennen wir auch nicht WhoAmI,

02:42:05.040 --> 02:42:16.640
sondern nennen wir Git. Nee, Git. Einfach nur Git. So, und das sollte jetzt hochfahren

02:42:16.640 --> 02:42:24.920
und es sollte unter dieser Domain, git.progress.exe.z, den Service starten mit BasicAuth an mit

02:42:24.920 --> 02:42:29.520
einem Passwort, was ihr nicht kennt. Und dann gucken wir mal, ob das funktioniert. Wenn

02:42:29.520 --> 02:42:36.160
nicht, ist es auch nicht schlimm, dann mache ich es halt wieder aus. Down und ab. Exzellent.

02:42:36.160 --> 02:42:42.840
Guck, und er pullt sich den neuen Container runter, startet das Ganze, holt sich ein neues

02:42:42.840 --> 02:42:54.240
Zertifikat. Okay, er macht da Gedöns, was auch immer. Okay, gucken wir mal, Git. Ah,

02:42:54.240 --> 02:43:01.960
er hat noch kein Zertifikat. Ich war zu schnell. Ich war zu schnell. Nee, ich habe glaube ich

02:43:01.960 --> 02:43:06.360
was vergessen. Kann das sein, dass ich vergessen habe, die Domain anzupassen? Wartet mal kurz.

02:43:06.360 --> 02:43:13.480
Kann das sein, dass ich vergessen habe, die Domain anzupassen? Ich glaube ich habe vergessen,

02:43:13.480 --> 02:43:20.320
die Domain anzupassen, ne? Hier, nee, passt. Git.progress.exe.z. Nö, ist eigentlich vollkommen

02:43:20.320 --> 02:43:37.000
richtig. Übrigens, das da muss weg. Nö, das müsste eigentlich so funktionieren. Okay,

02:43:37.000 --> 02:43:49.880
schauen wir mal ab. Git, genau, Git. Ah, guck mal, basic aus, funktioniert schon mal. Äh,

02:43:49.880 --> 02:43:54.960
Moment, ich muss mal mein Passport nachgucken, was ihr jetzt nicht wisst. Huge Big Brain

02:43:54.960 --> 02:44:08.600
Passport. Und, zack, da sind wir. Ich blende euch mal. Und schon haben wir einen Git-Server

02:44:08.600 --> 02:44:13.760
laufen. Ah, wir können jetzt hier noch Zeug einstellen, wie das ganze heißt. SSH-Server-Domain,

02:44:13.760 --> 02:44:38.360
ist Base-Url. Git.progress.exe.yz. So, und dann SSH-Domain-Administrator-Passport. Gut.

02:44:38.360 --> 02:44:53.680
Wie sollte das da eh nicht draufkommen? Und save. Ah, Passport. Okay, äh, ja, admin-add-boggers.xyz.

02:44:53.680 --> 02:45:05.440
Äh, warum? Ah, weil ich heute die PS vergessen habe. Ah, exellent. Guck, und schon können

02:45:05.440 --> 02:45:08.960
wir hier unsere, können wir ein paar Git-Repos anlegen, Zeug verwalten und managen und was

02:45:08.960 --> 02:45:19.080
wir, und was wir so wollen. Und er hat für uns ein gültiges Zertifikat ausgestellt und

02:45:19.080 --> 02:45:23.480
das Ganze hinzugefügt, sodass es von extern zugänglich ist. Also eigentlich eine richtig

02:45:23.480 --> 02:45:32.640
super, super Geschichte und einfache Geschichte auch. Also, besser managen kann man die Sache

02:45:32.640 --> 02:45:37.320
eigentlich daheim nicht, wenn man Container verwenden will. So, schmeißen wir das mal

02:45:37.320 --> 02:45:43.480
wieder raus. Ich will das nicht unnötig lange laufen haben, den ganzen Kram. Ja, das ist

02:45:43.480 --> 02:45:50.480
richtig gut. So, ich zeige euch jetzt noch mal eine Sache, die auch sehr praktisch ist.

02:45:50.480 --> 02:45:55.000
Ich habe ja im Vorfeld gesagt, man kann die Container automatisch updaten lassen und dafür

02:45:55.000 --> 02:46:06.120
gibt es hier folgendes. Nämlich nennt sich das Ganze Watchtower und was da, eGit, SetPaste,

02:46:06.120 --> 02:46:11.960
CanTrafficTLS 1.3. Ich würde mal vermuten, dass das so ziemlich alles an TLS kann, was

02:46:11.960 --> 02:46:22.840
schon Standard ist. So, das Ganze nennt sich Watchtower. Was das macht ist, das guckt

02:46:22.840 --> 02:46:27.240
bei Containern, die man ihm hier angibt, zum Beispiel den WhoAmI-Container. Das andere

02:46:27.240 --> 02:46:36.920
haben wir jetzt ja nicht. Guckt das nach, ob es neue Versionen gibt. Und in diesem Setup

02:46:36.920 --> 02:46:43.440
ist das halt Next Level Big Brain. Übrigens, er konfiguriert das alles wieder von uns.

02:46:43.440 --> 02:46:58.240
Äh, by the way, stopp. Naja, macht mal aus. Ja, der Kommandator, wie gesagt, das Setup

02:46:58.240 --> 02:47:02.840
kann ich daheim nur empfehlen, das habe ich bei mir auch laufen. Moment, was hat er denn

02:47:02.840 --> 02:47:06.920
für Schmerzen hier? Will er denn da? Ah, okay, weil ich ihn gelöscht habe, bevor ich

02:47:06.920 --> 02:47:13.920
down gemacht habe wahrscheinlich. Jetzt aber, ab. Wunderbar. Also, der startet jetzt Watchtower,

02:47:13.920 --> 02:47:23.320
WhoAmI und Traffic. Und wir sehen jetzt auch hier, was der macht ist, der schaut nach,

02:47:23.320 --> 02:47:28.680
also der guckt jetzt in der Stunde irgendwie wieder nach, ob es neue Updates gibt von diesem

02:47:28.680 --> 02:47:33.520
Container. Und wenn es neue Updates von dem Container gibt, von dem WhoAmI-Container in

02:47:33.520 --> 02:47:41.240
dem Fall, weil es der einzige ist, den ich konfiguriert habe, dann updatert er den, also

02:47:41.240 --> 02:47:47.120
sprich, stoppt den Container, updatert den und startet ihn wieder. Hier, guckt da. No

02:47:47.120 --> 02:47:55.000
New Images for WhoAmI. Und damit hat man jetzt quasi ein System, wenn man das einmal schön

02:47:55.000 --> 02:48:00.320
konfiguriert hat. Äh, ja, ich weiß, dass das ein Webinterface hat, aber wenn ich das

02:48:00.320 --> 02:48:04.240
Webinterface anschalte, muss ich auch gleichmaßen die AP einschalten und das will ich von außen

02:48:04.240 --> 02:48:13.280
nicht machen. Also, Traffic hat ein Webinterface. Ich zeige euch mal eine Demo davon, falls

02:48:13.280 --> 02:48:30.960
die eine haben. Ne, das ist 1.7. Genau, das hat ein Dashboard, ist eigentlich ganz praktisch,

02:48:30.960 --> 02:48:35.200
so sieht das dann aus. Da sieht man, ähm, was da so gerade an Traffic drüber läuft

02:48:35.200 --> 02:48:39.680
und welche Dienste, Container teilweise auch ab sind dahinter, wie viel es Fehler gibt.

02:48:39.680 --> 02:48:46.360
Das ist ganz nett. Das ist ganz nett. Aber, wenn man, äh, wenn man beispielsweise irgendeinen

02:48:46.360 --> 02:48:51.240
Grafana laufen hat, kann man sich die Metriken auch da schön anzeigen lassen. Aber ist eine

02:48:51.240 --> 02:48:54.720
nette Geschichte, kann man einschalten. Das, wenn man ein bisschen Übersicht, wenn man

02:48:54.720 --> 02:48:59.560
ein bisschen Überblick über seinen LordBalancer haben will, das kann man machen. So, und man

02:48:59.560 --> 02:49:05.760
sieht hier, er guckt im Internet nach, ähm, ob es von diesem WhoAmI-Container neue Updates

02:49:05.760 --> 02:49:11.160
gibt. Ihr sagt ja auch No New Images Found gibt es nicht. Sollten die jetzt zufälligerweise

02:49:11.160 --> 02:49:15.800
gerade ein neues Image pushen, würde er den stoppen, updaten den Container und wieder

02:49:15.800 --> 02:49:21.960
neu starten. Also sprich, wir haben jetzt ein Setup, was automatisch für neue Services,

02:49:21.960 --> 02:49:27.000
also egal wie viele Services sich hier dahinter packt, erst einmal, äh, neue Zertifikate,

02:49:27.000 --> 02:49:32.280
gültige SSL-Zertifikate ausstellen kann, was den einzigen Eingangspunkt hat in meinem

02:49:32.280 --> 02:49:36.440
System, ohne dass ich diese Services exposen muss, irgendwie ins Internet oder ins lokale

02:49:36.440 --> 02:49:43.880
Netzwerk oder sonst was. Und als, als, äh, Bonus obendrauf updaten sich die Sachen auch

02:49:43.880 --> 02:49:48.440
noch automatisch. Was, wenn bei einem Auto Update was kaputt geht, ja alles gleiche, wie

02:49:48.440 --> 02:49:53.360
wenn du ein Update von Hand machst. Es geht nicht mehr. Deswegen versuche ich es auch

02:49:53.360 --> 02:49:58.600
immer so zu machen, dass ich meine Container nicht auf Latest stelle, so wie die hier,

02:49:58.600 --> 02:50:04.240
sondern immer auf die letzte Major-Version und nur meiner Version automatisch updaten

02:50:04.240 --> 02:50:14.240
lasse. Das funktioniert nur, wenn die Projekte das richtig taggen. Also normalerweise schreibe

02:50:14.240 --> 02:50:22.040
ich in meine Config rein, Nextcloud, zum Beispiel Nextcloud Version 19, dann macht der Updates

02:50:22.040 --> 02:50:27.520
für Nextcloud 19 inklusive Sicherheitsupdates für Version 19. Allerdings, er macht kein

02:50:27.520 --> 02:50:36.960
automatisches Update auf Nextcloud 20. Ja, das, äh, heißt natürlich, man muss ein bisschen

02:50:36.960 --> 02:50:43.520
drauf schauen, ob die Docker-Container-Hersteller, bzw. die Docker-File-Typen von Docker hat,

02:50:43.520 --> 02:50:47.480
was man verwendet für seine Container, die Sachen richtig taggen. Dann hast du eigentlich

02:50:47.480 --> 02:50:53.480
selten Probleme. Also innerhalb eines Major-Releases gehen die Sachen selten kaputt, aber unterm

02:50:53.480 --> 02:51:05.840
Strich, ja gut, es geht genauso kaputt, wie wenn du es von Hand updaten würdest. Nur

02:51:05.840 --> 02:51:18.520
dass halt hier ein Rollback relativ einfach ist. Also sprich, ähm, wenn ich jetzt hier,

02:51:18.520 --> 02:51:25.080
keine Ahnung, von Version 1 auf Version 2 update und Version 2 ist kaputt, dann trage

02:51:25.080 --> 02:51:30.240
ich hier einfach wieder Version 1 ein und starte das Ding und in der Regel geht's. Es sei

02:51:30.240 --> 02:51:36.080
denn, Version 2 hat die Config-Files, die diese Anwendung vielleicht hat, beim Update

02:51:36.080 --> 02:51:41.040
inkompatibel kaputt gemacht zu Version 1, dann kannst du auch nicht einfach rollbacken,

02:51:41.040 --> 02:51:45.480
aber dann sind wir wieder bei ganz klassischen Sachen wie, vielleicht sollte man ab und

02:51:45.480 --> 02:51:55.040
zu mal seine, äh, Configs-Backupen. Und, ähm, wenn es einfach nur rein um Configs

02:51:55.040 --> 02:52:00.000
geht, spricht auch nichts dagegen, die Configs für die Anwendung hier im Git mit einchecken.

02:52:00.000 --> 02:52:11.640
Keine Ahnung, äh, äh, jetzt haben wir sogar noch ein Git-Update gemacht, einfach weil

02:52:11.640 --> 02:52:17.480
es geht, nicht weil es jetzt irgendwie, weil wir es bräuchten. Kann man auch die einzelnen

02:52:17.480 --> 02:52:21.720
Docker-Instanzen gut back-upen? Du musst die Docker-Instanzen nicht back-upen, das

02:52:21.720 --> 02:52:32.480
einzige was du back-upen musst ist, ähm, die Ordner, wo diese Instanzen ihre persistenten

02:52:32.480 --> 02:52:40.000
Daten liegen haben. Und da kannst du updaten, wie du lustig bist. Kannst mit Borg back-upen

02:52:40.000 --> 02:52:51.120
machen, mit allem, mit R-Sync, äh, was auch immer, ja. Es gibt bestimmt, habe ich mich

02:52:51.120 --> 02:53:01.520
aber nie mit beschäftigt, es gibt bestimmt sogar fertige back-up, ähm, Scripts, die

02:53:01.520 --> 02:53:06.880
du in dein Compose-File reinhauen kannst, die selbst als Docker-Container laufen und

02:53:06.880 --> 02:53:10.560
das irgendwie für dich machen. Würde ich wetten, würde mich sehr wundern, wenn es

02:53:10.560 --> 02:53:29.120
das nicht gibt. JollyYoka, zwei Monate abonniert, dankeschön, excellent subscription. Ja, und

02:53:29.120 --> 02:53:34.520
so sieht das ganze mit Docker-Compose aus. Und man, es ist ja nur wirklich nicht großartig

02:53:34.520 --> 02:53:40.720
kompliziert, ne. Ich meine, wir brauchen hier ein bisschen Config für den Traffic-Container,

02:53:40.720 --> 02:53:45.560
dann haben wir hier so ein Test-Container drinne und ein Update-Container. Das war's. Alles

02:53:45.560 --> 02:53:50.200
weitere, was ihr jetzt hier reinschreibt, wären Services, die ihr betreiben wollt.

02:53:50.200 --> 02:53:56.120
Von Nextcloud bis Gitfrontend bis irgendwie ein Dashboard bis Home Assistant, Heimautomatisierung,

02:53:56.120 --> 02:54:01.280
irgendwelche Torrent-Download-Dinger, was auch immer. Ihr schnappt einfach euch irgendwie

02:54:01.280 --> 02:54:07.640
ein x-beliebiges Docker-Image, beziehungsweise aus der Docker-Registry, Docker-Hub, irgendwas,

02:54:07.640 --> 02:54:11.600
was ihr betreiben wollt, dem ihr traut, ne, darf man immer nicht vergessen, wenn man einfach

02:54:11.600 --> 02:54:15.440
mit Docker irgendwas startet, man hat offenbar jetzt gar keine Ahnung, was man da startet,

02:54:15.440 --> 02:54:20.920
also sprich, ihr startet auch nur irgendwas, dem ihr traut, dass es was taugt, fügt das

02:54:20.920 --> 02:54:29.880
hier ein und Docker-Compose ab, fertig konfiguriert, SSL-Zertifikat, Alternifizierung davor, falls

02:54:29.880 --> 02:54:35.640
ihr braucht, und Auto-Updates. Also einfacher kann's eigentlich nicht mehr gehen. Man muss

02:54:35.640 --> 02:54:40.440
es halt einmalig jetzt hier einrichten, so wie wir's hier gemacht haben. Das ist schon

02:54:40.440 --> 02:54:53.840
ziemlich poggers. Next Level Big Brain. Ich hab übrigens gesehen, dass es im Chat viele

02:54:53.840 --> 02:55:01.960
Wim-Fans heute gab. Soll ich euch noch mal einen richtigen Big Brain Wim-Trick zeigen?

02:55:01.960 --> 02:55:11.760
Also den hab ich euch ja schon gezeigt, ja? In irgendeine Zeile gehen und Change in der

02:55:11.760 --> 02:55:18.400
Anführungszeichen tippen für alles zwischen zwei Anführungszeichen löschen. Ich zeig

02:55:18.400 --> 02:55:23.600
euch jetzt nochmal den absoluten Big Brain Wim-Trick. Also gehen wir mal von aus. Also

02:55:23.600 --> 02:55:30.080
das erste, der Low-Brain, die Low-Brain-Variante von diesem Trick ist, Block-Select. Wim hat

02:55:30.080 --> 02:55:38.960
zwei Sachen. Wim hat normalen Select, Wim hat Line-Select, äh Schwachsinn, Wim hat

02:55:38.960 --> 02:55:51.720
Line, hallo? Wim hat Line-Select und Wim hat Block-Select. Damit kann ich zum Beispiel

02:55:51.720 --> 02:55:56.920
als bei diesen Zeilen untereinander die Leer-Zeichen löschen komplett. So, aber das wollte ich

02:55:56.920 --> 02:56:06.560
euch jetzt gar nicht zeigen. Gehen wir mal von einem anderen Fall aus. Ähm, achso, Block-Select

02:56:06.560 --> 02:56:14.120
ist Steuerung-V. Gehen wir mal von aus, wir möchten jetzt, wir haben uns hier verschrieben.

02:56:14.120 --> 02:56:20.680
Oder keine Ahnung, was war man da jetzt? Ja, wir haben uns hier verschrieben. Wir haben

02:56:20.680 --> 02:56:26.000
uns hier verschrieben. Es muss Minus-Minus sein, aber wir haben nur Minus gemacht. Jetzt

02:56:26.000 --> 02:56:36.920
geht's Big Brain Wim-Trick. Also, Block-Select, großes I, einmal das Minus einfügen und dann

02:56:36.920 --> 02:56:53.120
Escape drücken und dann fügt's überall für euch ein. Wim-Magic. Geht übrigens umgedreht

02:56:53.120 --> 02:56:57.880
auch, also wenn ihr hier vorne Leer-Zeichen vergessen habt und wollt Leer-Zeichen einfügen,

02:56:57.880 --> 02:57:07.120
Select, Groß, Groß I wohlgemerkt, nicht Kleine I, Groß I. Einrücken, Escape drücken, zack,

02:57:07.120 --> 02:57:13.800
also sprich, der macht das hier, was ihr hier oben tippt, exakt in den anderen Zeilen, die

02:57:13.800 --> 02:57:22.280
ihr markiert habt, danach nochmal. Ähm, ja. Auch noch eine weitere coole Geschichte ist,

02:57:22.280 --> 02:57:28.240
mal angenommen, ihr sucht das Wort, das Wort Traffic oder Labels, nee, was nehmen wir mal?

02:57:28.240 --> 02:57:33.720
Image, Image. Ihr sucht das Wort Image in der Datei, fangen wir mal oben an. Die Noob,

02:57:33.720 --> 02:57:40.560
die Noob-Variante ist Image. Das kann jeder, ne? Slash Image. Was mehr Big Brain ist, Sternchen

02:57:40.560 --> 02:57:45.040
drücken, ne? Also suchen wir mal, keine Ahnung, ich zeig euch mal, dass es funktioniert. Wir

02:57:45.040 --> 02:57:54.240
suchen mal jetzt nach, äh, Traffic, Traffic. Einfach draufgehen, Sternchen drücken und

02:57:54.240 --> 02:58:03.680
automatisch alle Traffic-Vorkommen finden. Mit Next. Also, man kann auf, oder, wenn ich

02:58:03.680 --> 02:58:09.840
Huemi suche, Sternchen drücken und dann mit Next oder Back zu den nächsten Huemi-Vorkommen

02:58:09.840 --> 02:58:17.560
springen. Was natürlich auch ganz praktisch ist, zum Beispiel, stellt euch mal vor, stellt

02:58:17.560 --> 02:58:21.840
euch mal vor, wir machen jetzt Sternchen, wir machen jetzt hier, Sternchen. Huemi, Sternchen.

02:58:21.840 --> 02:58:35.520
Ähm, und wir wollen jetzt da nicht Huemi draus machen, sondern Huemai. Zwei. So, dann drücke

02:58:35.520 --> 02:58:50.160
ich jetzt einfach, SK, N, nächste, nächste, nächste Vorkommnis, Punkt O. Okay, zu viel

02:58:50.160 --> 02:58:54.600
Wim-Magic hat nicht funktioniert. Müsste, müsste, es müsste aber eigentlich funktionieren.

02:58:54.600 --> 02:59:08.560
Zwei. Ah, ich weiß, warum es nicht funktioniert. Kann das sein? Next. Moment, warum hat es

02:59:08.560 --> 02:59:19.080
jetzt nicht funktioniert? Next. Zwei. Next. Ach so, weil er nicht hinten an das, weil

02:59:19.080 --> 02:59:23.880
er nicht hinten an das Wort rangeht. Also, man kann mit Punkt nämlich den letzten Inside-Profil

02:59:23.880 --> 02:59:27.080
doppelt machen und das geht nicht, weil er an der Stelle ist, er müsste an die Stelle

02:59:27.080 --> 02:59:31.680
springen. Okay, vergesst, was ich euch zeigen wollte, das war ein Scheißbeispiel. Aber

02:59:31.680 --> 02:59:35.280
ich kann euch, ich kann euch noch, ich kann euch noch was anderes zeigen. Ja, natürlich

02:59:35.280 --> 02:59:40.480
mit Search and Replace geht das auch, aber das ist die Fikule, wo sie das Wim zählen

02:59:40.480 --> 03:00:02.320
kann. Wim kann zählen. Also, zum Beispiel, wenn ich jetzt sagen will, Traffic 2.2 will

03:00:02.320 --> 03:00:06.680
ich nicht, sondern ich will Traffic 3 oder vielleicht sogar Traffic 4 oder Traffic, Traffic

03:00:06.680 --> 03:00:13.040
1.62. Kann ich direkt in Wim machen, ohne dass ich da selbst tippen muss. Ich mein, in

03:00:13.040 --> 03:00:18.280
dem Fall könnte ich einfach einschreiben 3, ja. Aber ich kann auch mit Steuerung A und

03:00:18.280 --> 03:00:23.320
Steuerung X, also mein, Steuerung A, Steuerung X, intuitivere Key-Shortcuts kann es ja für

03:00:23.320 --> 03:00:29.120
addieren und Subtra hier nicht geben, ja, Steuerung A, Steuerung X. Ich mein, wer kommt

03:00:29.120 --> 03:00:34.720
da nicht sofort intuitiv drauf? Kann man hochzählen und runterzählen, ne? Also, mal angenommen,

03:00:34.720 --> 03:00:42.720
ich möchte jetzt sagen, ah ne, ich will Version 3.0, zack. Noch, wie? Ja, so sieht's aus. Wim

03:00:42.720 --> 03:00:50.920
Magic. Und wer übrigens keinen Bock hat, Wim mit Doppelpunkt X zu beenden, der kann

03:00:50.920 --> 03:00:57.180
noch viel besser, der kann Shift ZZ drücken, da geht's auch zu, ja. Warum? Die Existenzberechtigung

03:00:57.180 --> 03:01:02.120
dafür hat sich mir noch nicht erschlossen, aber es ist halt da. Werden die Container

03:01:02.120 --> 03:01:08.720
nacheinander gestartet, also dass WhoAm I wartet, bis Traffic gestartet wurde? Ich glaube,

03:01:08.720 --> 03:01:16.960
es geht von oben nach unten. Aber ich bin mir ehrlich gesagt nicht sicher, keine Ahnung.

03:01:16.960 --> 03:01:21.720
Sollte das nicht der Fall sein, kann man dem garantiert sagen, der Container hängt mit

03:01:21.720 --> 03:01:24.280
dem Container zusammen und der muss warten. Das geht mit Sicherheit, habe ich aber noch

03:01:24.280 --> 03:01:40.920
nicht gemacht. Ja, ist auch ein paar krasse Wim Hacks. Ja, da sind wir fertig, hat wunderbar

03:01:40.920 --> 03:01:46.280
funktioniert. Also wir machen das noch nicht aus, aber wir sind mit dem Projekt jetzt eigentlich

03:01:46.280 --> 03:02:07.280
fertig. Zack. Wir löschen mal, wir löschen mal unser, unser DNS-Token. Vorpapier anmachen

03:02:07.280 --> 03:02:22.240
wir auch wieder zu. So, wir haben unser DNS-Token gelöscht. Und, oh, ganz wichtig, ich muss

03:02:22.240 --> 03:02:26.600
meine Digital-Ocean-VM löschen. Also, wollt ihr noch irgendwas sehen, weil ich lösche

03:02:26.600 --> 03:02:40.040
jetzt meine, meine, vor allem wo ich das drauf gemacht habe. M-RF, äh, Slash, das funktioniert

03:02:40.040 --> 03:02:53.200
nicht mehr. Das ist, das geht nicht mehr. Man muss No Preserve Route eingeben. Codeserver

03:02:53.200 --> 03:02:57.000
wolltest du noch machen? Ne. Ne, ne, ne, habe ich mir anders überlegt. Ich mache kein

03:02:57.000 --> 03:03:03.040
Public Codeserver da drauf. Wer weiß was die Leute da für komische Dinger reinpasten.

03:03:03.040 --> 03:03:24.000
Aber bin ich noch dran schuld? Ne, ne, ne, ne. Okay, bam, in your face. Destroy. Äh, Moment,

03:03:24.000 --> 03:03:43.840
ich will es löschen. Destroy. Monkeys, destroy. Die Musik passt da auch gut dazu. Bam. Grip,

03:03:43.840 --> 03:04:04.760
droplet. So, die Site wird noch gelöscht. Remove Site from Cloudflare, zack.

02:47:26.780 --> 03:04:29.520
Leute. Alles umsonst. Und jetzt lösche ich noch meinen Cloudflare-Account. Wie

03:04:29.520 --> 03:04:42.520
geht denn das? Geht das überhaupt? Kann man seinen Cloudflare-Account löschen? Wie löscht

03:04:42.520 --> 03:05:05.240
man seinen Cloudflare-Account? Leak. Wie lösche ich, wie lösche ich meinen Account?

03:05:05.240 --> 03:05:29.240
Hat irgendjemand eine Ahnung? Delete Cloudflare-Account. Click Cloud für Icon. Ne. Ne,

03:05:29.240 --> 03:05:38.320
Luso97, das geht nicht. Da haben die schon, da haben die vorgesorgt, Luso97, dass es nicht

03:05:38.320 --> 03:05:44.960
geht. Wenn du das probieren würdest, äh, müsstest du andere, müsstest du andere DNS-Server

03:05:44.960 --> 03:06:11.800
eintragen, als die, die ich eingetragen habe. Da haben die schon mitgedacht. Müsste in meinem

03:06:11.800 --> 03:06:27.720
Profil gehen, ja, aber wo? Mit einem Profil. Edit. Geht, geht nur über Support. Das ist

03:06:27.720 --> 03:06:55.880
mal wieder was. How do I delete my account? Äh, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja,

03:06:55.880 --> 03:07:18.720
ja. Äh, what? Subscriptions? Ne. Das scheint, okay, das scheint enorm big brain zu sein,

03:07:18.720 --> 03:07:26.200
meine Account zu löschen. Haha, warum ist das wieder so kompliziert, du fucking Account

03:07:26.200 --> 03:07:52.240
zu löschen, Alter? Cloudfair, not Cloudflare. Kennste, ich will keine Subscriptions, ich

03:07:52.240 --> 03:07:58.080
will meinen Account löschen. Hyprons, zwei Monate, dankeschön. Exzellenz Subscription.

03:07:58.080 --> 03:08:06.960
Äh, ich, ich hab in meinem Profil keine Subscriptions, weil ich hab ja keine Billing-Informations

03:08:06.960 --> 03:08:20.520
hinterlegt. Ich hab nur Authentification, AP Talks. Ähm. Billing? Ah, hier, Subscriptions.

03:08:20.520 --> 03:08:46.120
Ne. Email? Hahaha. Du kannst unter Members dich austragen, was, Members? Ja, ne, das

03:08:46.120 --> 03:08:53.720
ist so, ich will, ich will meinen Account löschen. Das löscht wahrscheinlich nicht

03:08:53.720 --> 03:09:09.640
meinen Account. Tja, geht wohl nicht. Geht wohl nicht. Schreib den Support an, oh meine

03:09:09.640 --> 03:09:13.480
Güte ey, das ist so voll lächerlich, warum muss ich mir, ich mein, ich hab kein Problem,

03:09:13.480 --> 03:09:16.080
ich kann auch den Cloudflare-Account einfach behalten, ist nicht so, als würde mich das

03:09:16.080 --> 03:09:22.400
jetzt großartig jucken, dass ich Cloudflare-Account hab. Oh, Logout, gut und Tschüss. Digital

03:09:22.400 --> 03:09:36.600
Ocean und Tschüss. Exzellenz. Userzahlen, weil sich niemand löschen kann, ja das vermute

03:09:36.600 --> 03:09:44.400
ich nämlich auch. Big Brain. Äh, was sagst du eigentlich zu der Heisemeldung? Die hab

03:09:44.400 --> 03:09:49.280
ich noch gar nicht gelesen. Äh, das Docker, als 80% der Docker-Images sicher als Lünger

03:09:49.280 --> 03:09:55.160
haben. Ja, wundert mich nicht. Wann kam das? Äh, wundert mich nicht. Ähm, viele bauen

03:09:55.160 --> 03:09:59.640
halt Docker-Images für sich daheim, wo das vielleicht nicht so relevant ist bei einem

03:09:59.640 --> 03:10:06.160
internen Service. Äh, mit Ollen, mit Ollen-Versionen von irgendwelchen Libraries, mit Ollen-Versionen

03:10:06.160 --> 03:10:13.760
von Software. Ähm, juckt mich nicht. Äh, äh, äh, wundert mich nicht. Desktop ist

03:10:13.760 --> 03:10:38.240
der beste. Ja, exzellent. Massive Desktop. Und Windows XP im Hintergrund natürlich, ja.

03:10:38.240 --> 03:10:43.000
Wie viel hast du jetzt für den Server gezahlt? Äh, kann ich nicht nachgucken, aber wir haben

03:10:43.000 --> 03:10:53.400
den Server jetzt angelegt vor ungefähr drei Stunden. Also hab ich null Komma abgerundet

03:10:53.400 --> 03:11:02.760
ungefähr null Komma zwei Cent oder so bezahlt. Nee, zwei Cent, zwei Cent, nicht null Komma

03:11:02.760 --> 03:11:13.280
zwei Cent. Zwei Cent hab ich bezahlt. Zwei Cent. Das geht natürlich unglaublich ins Geld.

03:11:13.280 --> 03:11:16.840
Also wenn ich da jetzt mindestens noch 15 Twitch Prime Subscriptions kriege, dann kann

03:11:16.840 --> 03:11:20.320
ich mir das nicht leisten. Da muss ich meinen Internetabschluss, meinen Internetanschluss

03:11:20.320 --> 03:11:29.680
abbestellen. Dann gibt's keine Streams mehr. Das geht überhaupt nicht. Nee, also für so

03:11:29.680 --> 03:11:34.640
kleine Sachen und vor allem das kleinste Setup bei Digital Ocean ist wirklich nicht

03:11:34.640 --> 03:11:44.520
so teuer. Deswegen sag ich ja, für mein, ähm, Open Street Maps Pre-Processing, was

03:11:44.520 --> 03:11:52.440
ich da mache ab und zu, da miete ich mir gerne so fette Kisten mit 96G RAM und 48 CPUs und

03:11:52.440 --> 03:11:58.000
sowas, weil dann geht das Pre-Processen sau schnell und ich bezahle am Ende auch nur 3,50

03:11:58.000 --> 03:12:08.360
Cent, falls halt nach eineinhalb Stunden fertig ist. Schön steuerlich absetzen. Oh ja. Zwei

03:12:08.360 --> 03:12:18.480
Cent. Das ist mir viel zu anstrengend, das über drei zu schreiben. Durst. Hörst du

03:12:18.480 --> 03:12:29.640
eigentlich Rap? Nee, nicht wirklich. Eher zur Belustigung. Einzige, was ich mir geben

03:12:29.640 --> 03:12:38.360
kann, ist Eminem. Und ich finde, das sagt schon alles aus, ja. Also, Eminem gilt ja,

03:12:38.360 --> 03:12:46.600
oder galt ja mal, zeitlang so als der krasseste, geilste Rapper-Man auf der Welt, ja. Wenn

03:12:46.600 --> 03:12:53.000
das, also wenn quasi der beste der besten, ähm, den einzigen ist, den ich ertrage, spricht

03:12:53.000 --> 03:12:58.520
nicht unbedingt für dieses Musikschore. Weil alles andere halte ich meistens nicht

03:12:58.520 --> 03:13:08.920
lange aus. Was machst du da mit Open Street Maps? Wir haben eine Software gebastelt, mit

03:13:08.920 --> 03:13:25.840
der Handwerker sich Routen berechnen lassen können. Alter, die Musik.

03:13:25.840 --> 03:13:45.840
Wie, SL ist nicht installiert? Ist das nicht SL mit dem Zug? Wie ist das mit dem Zug?

03:13:45.840 --> 03:14:10.400
Was nicht, SL? Warum gibt es das nicht zu installieren hier? Was ist da los? Warum gibt

03:14:10.400 --> 03:14:23.360
es hier kein SL zu installieren? Aha, anscheinend doch, ok. Ah, exzellent. So, Traveling Salesman,

03:14:23.360 --> 03:14:29.600
genau, genau. Und wir verwenden einmal die Google Maps API. Was muss man hier nochmal

03:14:29.600 --> 03:14:34.000
machen, dass das, ich habe keine Ahnung, ob das eine Option hat für Loop. Wir machen

03:14:34.000 --> 03:14:44.240
jetzt die Big Brain Loop überhaupt. Ah, exzellent. Was wollte ich jetzt gerade sagen? Also wir

03:14:44.240 --> 03:14:52.040
nehmen Google Maps, die Google Maps API für Adressvervollständigung und solche Geschichten.

03:14:52.040 --> 03:14:57.920
Aber das eigentliche Routing berechnen machen wir mit Open Street Maps. Und dafür braucht

03:14:57.920 --> 03:15:07.640
man einen riesen fetten Rechner, um die Open Street Maps Routing Machine Sachen zu preprocessen.

03:15:07.640 --> 03:15:12.440
Wenn man das erst mal preprocessed hat und man das einfach nur benutzen will, dann kommt

03:15:12.440 --> 03:15:18.720
man mit viel weniger RAM aus. Aber das preprocessen braucht massig Rechenleistung und massig RAM

03:15:18.720 --> 03:15:24.960
und das ist ganz gut, wenn ich das in Digital Ocean vm mache, weil da bezahle ich wie gesagt

03:15:24.960 --> 03:15:39.040
350 für 1-2 Stunden mal 96G RAM und irgendwie 32 Kerne. Das ist dann ganz praktisch. Kannst

03:15:39.040 --> 03:15:43.760
du nicht auch öffentliche Open Street Maps Server benutzen? Doch, aber die sind ja rate

03:15:43.760 --> 03:15:48.480
limited ohne Ende und die sind ja auch nicht zur kommerziellen Nutzung freigegeben. Also

03:15:48.480 --> 03:15:52.320
wenn wir da immer mal viele Anfragen stellen von der gleichen Absender-IP, blocken die

03:15:52.320 --> 03:16:00.080
uns halt und dann geht unser kompletter Service auf einmal nicht mehr. Also Open Street Maps

03:16:00.080 --> 03:16:06.480
selbst reicht nicht, ich muss OSMR verwenden. Oder OR... frag mich nicht wie das Ding heißt

03:16:06.480 --> 03:16:22.520
jetzt aus dem Kopf. Und die blocken einen, ja. SL-A, was macht minus A? Ist das... Oh guck

03:16:22.520 --> 03:16:27.040
mal. Big Brain, ich kanns nicht mehr beenden Leute. Ich kanns nicht mehr beenden, weil

03:16:27.040 --> 03:16:31.000
ich ne Schleife gemacht hab. Die Schleife ist so... Die Schleife ist schneller als ich

03:16:31.000 --> 03:16:38.440
canceln kann. Jetzt muss ich sagen kill all SL-Bear... Oh ne da gehts ja gleich wieder an.

03:16:38.440 --> 03:16:53.840
Kill all... Nö. Was davon ist jetzt meine Shell? Ah die letzte Big Brain. Die hier

03:16:53.840 --> 03:17:07.720
das seine ich kann nicht mal copy paste mehr geht nicht aus minus 9 ok das war

03:17:07.720 --> 03:17:18.520
nicht die richtige schell ja was wir machen das anders big brain schießen

03:17:18.520 --> 03:17:28.000
einfach das teamwork spayen ab was macht sl minus was minus a was macht minus a

03:17:36.760 --> 03:17:46.400
was macht minus a ach an accident ok lollcat habe ich das installiert ne aber das das brauchen wir

03:17:46.400 --> 03:17:51.680
das ist das wichtigste kommandos wo ist da los das ist das wichtigste kommando zeilen

03:17:51.680 --> 03:17:58.400
programm überhaupt lollcat das braucht man ohne lollcat geht nix gar nicht warum ich das nicht

03:17:58.400 --> 03:18:11.280
installiert habe das ist huge important ah jetzt excellent so ist das doch schön kann man auch das

03:18:11.280 --> 03:18:23.280
ascii aquarium nach lollcat palmen oh wow poggers all die fische haben irgendwas genommen

03:18:23.280 --> 03:18:34.000
das ist ja so lsd fisch disko fisch

03:18:34.000 --> 03:18:56.760
so was gab es noch für frank wie läuft eigentlich der internet seit dem wipp hochstufung

03:18:56.760 --> 03:19:05.040
ohne mist wunderbar die haben sich ja nie dazu geäußert dass das vielleicht einen community

03:19:05.040 --> 03:19:10.800
manager oder wie auch immer man das bei unity medialand keine ahnung war pr man hat ja keiner

03:19:10.800 --> 03:19:18.000
sich irgendwie dazu bekannt aber es war sehr merkwürdig die meld die message die ich da

03:19:18.000 --> 03:19:23.160
gekriegt habe so nach dem motto mit refund und allem ab und vor allem dass seitdem mein

03:19:23.160 --> 03:19:39.840
internet zeug ohne jegliche jegliche probleme funktioniert also chris down edge wir machen

03:19:39.840 --> 03:19:46.440
das halt für ganz europa ganz europa so pre-processen dauert wir haben sie mal im stream gemacht

03:19:46.440 --> 03:19:56.480
irgendwie zwar eineinhalb zwei stunden brauchst halt 96 g ram und viele cpu kerne und es ist

03:19:56.480 --> 03:20:04.760
schlimmer als traveling salesman weil wir haben termine also wir brauchen quasi traveling salesman

03:20:04.760 --> 03:20:10.320
mit time windows und im zweifelsfall sogar noch mehreren autos da gibt es ein extra name für

03:20:10.320 --> 03:20:18.640
traveling salesman ist quasi unterkategorie davon also wir haben verschiedene wir haben

03:20:18.640 --> 03:20:28.120
mehrere autos und termine wo man routen mit planen muss ist aber richtig gut weil wir

03:20:28.120 --> 03:20:32.720
müssen den kram nicht selbst implementieren da bin ich viel zu low brain dafür oder besser

03:20:32.720 --> 03:20:38.040
gesagt ja ja da bin ich zu low brain für weil die kombination aus ich bin zu faul

03:20:38.040 --> 03:20:42.200
für oder muss man sich richtig reinarbeiten dass man da was gutes hinkriegt da bin ich

03:20:42.200 --> 03:20:46.920
definitiv zu low brain für deswegen bin ich froh dass ich nur das frontend bauen muss für

03:20:46.920 --> 03:20:57.600
den open source projekt was das alles schon macht der high geht ab hier und unten drunter

03:20:57.600 --> 03:21:08.760
machen wir noch sl und drunter machen wir noch sl an oben flippen die fische aus und unten schreien

03:21:08.760 --> 03:21:24.000
die leute im zug um hilfe wo kaufst du deine moments die habe ich jetzt für den stream gekauft

03:21:24.000 --> 03:21:31.680
bei park bahn kann man t max in lol catpipen ist glaube ich nicht weil t max hat kein output

03:21:31.680 --> 03:21:43.240
also kein vorbei keine ahnung scheint letztlich weiß ich nicht habe ich nicht aus will ich auch

03:21:43.240 --> 03:21:52.440
nicht ausprobieren jetzt wofür brauchst du in reverse proxy also ich habe ihn ja schon lange

03:21:52.440 --> 03:21:56.040
laufen heute haben wir es eingerichtet weil im letzten stream einer das als thema vorgeschlagen

03:21:56.040 --> 03:22:05.720
hat und ich fand das nicht schlecht da mal darauf einzugehen ja also wofür ich brauche ich habe

03:22:05.720 --> 03:22:19.360
es bei mir intern laufen für git git web frontend den next cloud was habe ich denn da alles ich

03:22:19.360 --> 03:22:22.360
habe es ich habe es euch doch mal aufgeschrieben kriegt es gerade aus dem kopf gar nicht mehr

03:22:22.360 --> 03:22:29.680
alles zusammen wie gesagt next cloud git frontend fällt mir gerade nicht ein ich habe aber vier

03:22:29.680 --> 03:22:40.680
fünf sachen da auf home assistant natürlich heim automatisierungszeug back up sind sogar

03:22:40.680 --> 03:22:52.800
eher von sechs sachen nicht vier fünf sachen jenny finde wofür habe ich nicht laufen ich

03:22:52.800 --> 03:23:00.440
verwende als obwohl ich ja der self-hosted verfechter bin ja amazon prime musik

03:23:00.440 --> 03:23:14.520
dass du nachts gut schlafen kannst wenn du das alles mal hä ja wie willst du es denn

03:23:14.520 --> 03:23:21.360
sonst machen was ist denn die alternative du verwendest halt irgendwelche fertigen services

03:23:21.360 --> 03:23:27.120
und verlässt dich darauf dass es andere machen ja kannst du auch machen wenn du selbst machen

03:23:27.120 --> 03:23:35.880
willst bleibt der nix anders übrig als selbst zu machen kannst du erst die querung auf respite

03:23:35.880 --> 03:23:43.560
installen ja aber ich glaube ist nicht im standard report drin ansible kann man machen ja aber

03:23:43.560 --> 03:23:49.120
aber für das was wir heute gemacht haben ist das doch komplett unsinnig da warum soll ich

03:23:49.120 --> 03:23:56.280
dann ansible script für basteln wenn das eine 20 zeilen konfig sind die ich einmal erstelle

03:23:56.280 --> 03:24:02.360
in mein repo einchecke und was alles andere für mich händelt ich brauche ich brauche ja keine

03:24:02.360 --> 03:24:10.880
ich brauche ja kein server konfig tool was mein infrastructure konfig tool konfiguriert das

03:24:10.880 --> 03:24:11.880
wäre schon ein bisschen übertrieben

03:24:11.880 --> 03:24:21.760
oh guck mal der soundtrack ist fertig geblendet aber auf

03:24:21.760 --> 03:24:45.080
er hat ansible script gesagt na ja es war eigentlich ein ganz guter vergleich den einer

03:24:45.080 --> 03:24:49.800
freund gebracht hat wir haben ja heute relativ viel docker compose geschichten gemacht das

03:24:49.800 --> 03:24:53.560
docker compose und ansible gar nicht mal so unterschiedlich sind von dem was am ende

03:24:53.560 --> 03:25:01.200
rauskommt man legt konfig datei an und hat ein konfig management tool was dann das system

03:25:01.200 --> 03:25:07.240
in den zustand bringt wie man es dort beschrieben hat und ich wie gesagt ich brauche kein konfig

03:25:07.240 --> 03:25:11.120
management tun um ein konfig management tool zu konfigurieren also man kann es ja irgendwo

03:25:11.120 --> 03:25:21.960
auch übertreiben gibt es gibt es da keinen switch für endlos gibt es eigentlich bessere

03:25:21.960 --> 03:25:31.000
distribution die auf dem respekt viel laufen nö respiren ist das beste hallo das kann

03:25:31.000 --> 03:25:41.560
kein help was ist denn da los bist du eigentlich schon auf meine frage mit dem öffentlichen

03:25:41.560 --> 03:25:49.640
dienst eingegangen nee habe ich nicht aber dafür haben wir ja mein poggers auch wenn

03:25:49.640 --> 03:26:06.120
es ganz schön hell ist gebe ich zu ein poggers fragen mit log tool da hier kommt mal das

03:26:06.120 --> 03:26:13.440
fragen mit log tool das funktioniert exzellent was hältst du eigentlich davon als healer

03:26:13.440 --> 03:26:16.860
beim öffentlichen dienst zu arbeiten spiele mit dem gedanken rum mich auf solchen stellen

03:26:16.860 --> 03:26:23.840
zu bewerben ich halte da weder was von noch halte ich da nix von das ist ein job wie alles

03:26:23.840 --> 03:26:27.200
andere auch die frage ist ob die bezahlung passt ich habe mich ja auch mal ein bisschen

03:26:27.200 --> 03:26:33.520
umgeguckt und was du da teilweise was was da teilweise für eine gehaltgruppe drin steht

03:26:33.520 --> 03:26:49.600
das war ja armselig wie lief es mit der einrichtung hat wunderbar funktioniert würde gerne e3

03:26:49.600 --> 03:26:53.840
wäre im aufsetzen gutes total ja wir haben einen livestream gemacht und das installiert

03:26:53.840 --> 03:27:09.520
das hast du sogar das haben wir irgendwo im archiv leute ist das archiv schon durchsuchbar

03:27:09.520 --> 03:27:17.400
ist das neue archiv schon durchsuchbar also der chat ist ja big brain die programmieren

03:27:17.400 --> 03:27:30.720
gerade in archiv aber guck mal ich sehe mich selbst die drei wm fast moment das ist das

03:27:30.720 --> 03:27:39.720
ist zu alt das stimmt so nicht manjaro einrichten ist das glaube ich das sind nur clips das

03:27:39.720 --> 03:27:45.440
kann doch gar keine streams durchsuchen ok ok vergiss das warte mal wo ist das stream

03:27:45.440 --> 03:27:56.480
wo ich manjaro einrichte das kann ich so das kann ich so lange her sein hier geht es zur

03:27:56.480 --> 03:28:13.240
übersicht das kann ich so lange her sein search txt manjaro hier 30 sitz ne

03:28:13.240 --> 03:28:36.920
das müsste es hier gewesen sein 27 der dritte es gab mehrere streams in einem stream hatte

03:28:36.920 --> 03:28:48.480
ich ein bisschen verkackt das hier das hier müsste das stream sein wo manjaro eingerichtet

03:28:48.480 --> 03:29:15.920
haben und danach noch barbecue bed boys geguckt ja das das müsste das stream sein ja das

03:29:15.920 --> 03:29:24.640
müsste das stream sein wupplors.tv findest du das archiv ja wupplors.tv dann oben auf

03:29:24.640 --> 03:29:28.880
archiv und dann gehst du zur alten übersicht die neue archivseite geht noch nicht richtig

03:29:28.880 --> 03:29:37.720
die ist broken gerade einfach hier im google ordner für 27 den dritten gucken also da

03:29:37.720 --> 03:29:41.400
muss man den wir müssen übrigens den sebaro nochmal loben dass der sich da auch immer

03:29:41.400 --> 03:29:46.800
schön ums archiv kümmert weil ansonsten werden die alten dinger jetzt schlechter greifen

03:29:46.800 --> 03:30:15.920
weg chat eine runde ajaja für den sebaro

03:30:15.920 --> 03:30:26.320
sl kann man wohl nicht loben lassen na gut ich find die bahn ist top wie die hier im

03:30:26.320 --> 03:30:49.200
kreis fährt naja dann machen wir doch wieder eine schleife sl bamm perfekt ja leute habe

03:30:49.200 --> 03:30:57.520
ich irgendwelche anderen fragen übersehen eventuell sogar stimmt jede menge kann ich

03:30:57.520 --> 03:31:17.600
kann ich das nicht hier aufmachen habe ich habe ich hier nicht dark ah dark reader excellent

03:31:17.600 --> 03:31:22.680
hast du erfahrung mit frinas ich habe es mal ausprobiert hat mir nicht gefallen wie

03:31:22.680 --> 03:31:29.120
jetzt ja aktuell mir geht es gut frinas hat mir nicht gefallen eine sache die mir über

03:31:29.120 --> 03:31:34.000
frinas instant auf den sack gegangen ist die community die auch irgendwelche fake news

03:31:34.000 --> 03:31:42.480
verbreitet und darauf besteht es wäre so wie zum beispiel dass zfs unbedingt ecc ram braucht

03:31:42.480 --> 03:31:48.320
oder irgendwie was erzählen sie ein giga oder irgendwie was erzählen sie immer gigabyte

03:31:48.320 --> 03:31:54.040
ram pro terabyte zusätzlich und so komische dinger kompletter schwachsinn das brauchst

03:31:54.040 --> 03:31:59.080
du vielleicht wenn du zfs in einem in dem business umfeld betreiben möchtest ja wenn

03:31:59.080 --> 03:32:23.720
du daheim eine nass betreiben willst brauchst du das nicht wie gesagt das hatten wir schon

03:32:23.720 --> 03:32:28.760
domains habe ich wie gesagt bei pork bunn gekauft aber die würde ich nicht empfehlen

03:32:28.760 --> 03:32:34.680
die sind einfach nur billig ansonsten haben die keinerlei features und habe ich gebannt

03:32:34.680 --> 03:32:43.520
aber da bin ich selber dran schuld ja wie gesagt funktioniert gut hatten wir schon hatten

03:32:43.520 --> 03:32:54.840
wir schon hatten wir schon lokal lokal alles lokal bei mir wie gesagt 22,1 cent habe ich

03:32:54.840 --> 03:33:23.080
für den selber bezahlt das hatten wir auch schon das hatten wir auch schon

03:33:23.080 --> 03:33:29.480
wie heißt das klipport tool für e3 das ist echt kompliziert das habe ich jetzt nicht

03:33:29.480 --> 03:33:46.200
mal gemacht das ist rofi nennt sich das rofi und als klipport tool selbst ist klipp kreen

03:33:46.200 --> 03:33:55.920
klipp klipp klipp kreen klipp als klipport manager und rofi als anzeige zum auswählen

03:33:55.920 --> 03:34:00.160
das coole ist man kann da auch progas man kann auch drinne durchsuchen und das ist echt

03:34:00.160 --> 03:34:16.040
sehr praktisch ja das mit dem token hat mich ganz schön gebadet hast du eine eigene mail

03:34:16.040 --> 03:34:19.720
serve für private mails oder bei welchem haus ein bisschen habe ich nicht sehe ich

03:34:19.720 --> 03:34:30.120
auch keinen sinn drinne ehrlich gesagt eine mail server für private mails zu machen wozu

03:34:30.120 --> 03:34:33.200
rofi mochi nee aber ich kann mir vorstellen was es ist und wahrscheinlich klappt ganz

03:34:33.200 --> 03:34:39.160
gut ne brauche ich nicht sehe ich sehe ich auch keinen keinen sinn drinne mail privat

03:34:39.160 --> 03:34:54.960
zu hosten ich habe ich habe total viele emails bei unterschiedlichsten anbieter auch bei

03:34:54.960 --> 03:35:21.880
gmail ja gezwungenermaßen wenn du youtube account anlegst das hälfte von portana finde

03:35:21.880 --> 03:35:27.040
ich überflüssig ich brauche kein web frontend dafür sage ich aber vielen anderen sachen

03:35:27.040 --> 03:35:31.880
auch ich lach mich da immer teilweise so ein bisschen kaputt wenn ich die leute bei uns

03:35:31.880 --> 03:35:37.360
auf der arbeit sehe die sich partout weigern so die gett basics in der kommando zeile zu

03:35:37.360 --> 03:35:43.160
lernen und dann mit irgendwelchen gett guise ankommen die unsinnigste sachen machen so

03:35:43.160 --> 03:35:50.240
leere leere comments einfügen und uns komische sachen das schlimmste plugin für gett ist

03:35:50.240 --> 03:35:57.800
eget aus eclipse das verbindet alles was ich nicht mag java eclipse und gett frontends

03:35:57.800 --> 03:36:07.320
das wie gesagt da wüsste ich nicht was ich machen soll das habe ich schon beantwortet

03:36:07.320 --> 03:36:11.160
weil wir auf der arbeit zum größten teil cento s verwenden und mir persönlich aber

03:36:11.160 --> 03:36:17.560
Ubuntu lieber lieber ist und besser gefällt kennst du mailbox org nee kenne ich nicht

03:36:17.560 --> 03:36:30.320
kenne ich nicht aber wie gesagt brauche ich auch nicht also ich habe genug email adressen

03:36:30.320 --> 03:36:37.720
für alle möglichen dienste die ich verwende und kalender kontakte habe ich mein nex cloud

03:36:37.720 --> 03:36:43.160
über kaldorf kardorf und emails benutze ich so gut wie kaum noch ich glaube ich glaube

03:36:43.160 --> 03:36:48.360
ich habe jetzt ohne miss ich glaube ich habe dieses jahr noch nicht eine email geschrieben

03:36:48.360 --> 03:36:53.440
aus der arbeit außen vor ja das ist das natürlich aber privat habe ich glaube ich dieses jahr

03:36:53.440 --> 03:37:05.200
noch nicht eine email geschrieben email ist outdated mittlerweile kann man mit cream clip

03:37:05.200 --> 03:37:29.400
nicht aber halt mit dem ruf im menu kannst du halt filtern ne

03:37:29.400 --> 03:37:52.080
aber ich habe tatsächlich vor dass sie bald kommen aber ihr kennt mich

03:37:52.080 --> 03:37:56.720
wenn ich bitte war nutze dann hätte ich über den reverse proxy beziehungsweise über letzt

03:37:56.720 --> 03:38:01.200
encrypt ein ssl zertifikat ich möchte nur mein server von innen zugreifen von aussicht

03:38:01.200 --> 03:38:07.040
ja klar das wichtige dass du ein gültiges letzt encrypt zertifikat bekommen kannst

03:38:07.040 --> 03:38:14.080
ist dass dir die domain gehört und du zugriff auf den dns server hast davon dann kannst

03:38:14.080 --> 03:38:18.240
du auch den eigentlichen service nur intern verwenden das überhaupt kein problem was

03:38:18.240 --> 03:38:23.600
ich auch nur empfehlen kann so wenig wie möglich irgendwie extern verfügbar machen es gibt

03:38:23.600 --> 03:38:27.480
ja leute die sagen ich habe mein raspberry mit nextcloud ich hänge jetzt einfach mal

03:38:27.480 --> 03:38:32.560
direkt an meine fritzbox transport weiterleitung wunderbar und dann alles mögliche drauf ja

03:38:32.560 --> 03:38:37.840
von der letzten steuer erklärung bis zu privaten fotos und alles und sich dann wundern dass

03:38:37.840 --> 03:38:44.400
da irgendwas in die hose geht würde ich nicht machen also gerade wenn ich nextcloud hätte

03:38:44.400 --> 03:38:49.120
was ich möchte dass es ins internet vom internet zugegriffen werden kann würde ich das immer

03:38:49.120 --> 03:38:54.840
über den reverse proxy machen also zwei sachen heim automatisierung und nextcloud das sind

03:38:54.840 --> 03:38:59.760
so zwei systeme die würden unglaublich davon profitieren über den reverse proxy zu gehen

03:38:59.760 --> 03:39:06.000
weil ich traue so sagen wir mal im engine x oder im traffic eher was security sachen

03:39:06.000 --> 03:39:12.960
angeht und äh autentifizierung zu wie jetzt so der komplexen software wie nextcloud oder

03:39:12.960 --> 03:39:18.200
home assistant und dann mache ich einen basic os davor mit meinem reverse proxy und dann

03:39:18.200 --> 03:39:23.480
ist das schon mal relativ sicher die allerbeste variante ist natürlich äh gar nicht von

03:39:23.480 --> 03:39:29.960
außen aufmachen sondern nur einen vpn erlauben von außen und dann erst vpn einwahl und dann

03:39:29.960 --> 03:39:40.880
über vpn das verwenden das ist die allerbeste variante ja der das tool lockt nur entwobblos

03:39:40.880 --> 03:39:45.760
mit also wenn einer will dass ich irgendwie was wirklich sehe da muss man entwobblos dabei

03:39:45.760 --> 03:39:54.160
schreiben weil dann ist es rot im chat und mein fragentool lockt es mit ha gar nicht

03:39:54.160 --> 03:40:11.480
erstmal ok ich glaube wir haben alles exzellent guck mal was für ein timing es ist sogar

03:40:11.480 --> 03:40:16.240
22 uhr aber so haben wir so zehn minuten oder so hätte ich hätte ich noch zeit wenn

03:40:16.240 --> 03:40:23.080
es irgendwas äh gibt was was wir noch besprechen müssen ja also wenn es doch irgendwas interessant

03:40:23.080 --> 03:40:28.800
es gibt zehn minuten zehn minuten hätte ich noch wie fandet ihr den stream heute war

03:40:28.800 --> 03:40:36.360
relativ äh viel technik gebastelt aber ich glaube ein thema was auch einige interessiert

03:40:36.360 --> 03:40:41.640
hat ich meine wir hatten zwischenzeitlich 230 viewer 230 viewer hast du selten bei so

03:40:41.640 --> 03:40:52.680
einem thema bist du jetzt zufrieden mit dem 42 herz monitor ja top monitor top monitor

03:40:52.680 --> 03:41:01.920
ich mein es ist für grafikdesigner ein scheiß monitor aber für mich der damit klar kommt

03:41:01.920 --> 03:41:05.960
wenn der monitor halbwegs gut eingestellt ist dass die farben so annähernd echt aussehen

03:41:05.960 --> 03:41:12.040
und hauptsächlich drauf spielt und keine quasi print anwendung hat oder so äh ist

03:41:12.040 --> 03:41:20.120
der monitor echt super welchen hast du dir gekauft äh ein ein ein ein ein benkyo den

03:41:20.120 --> 03:41:26.480
hier das ist der neun das den gein den gibt seit ein paar jahren allerdings seit diesem

03:41:26.480 --> 03:41:33.600
jahr in der verbesserten variante und das mit dem s hinten dran den hier mir gekauft

03:41:33.600 --> 03:41:37.840
gibt sind eigentlich liefertermin unbekannt guck mal ich hab wohl einer den wenigen bekommen

03:41:37.840 --> 03:41:45.320
die verfügbar sind aber das ist richtig guter monitor ja es ist halt es ist halt nur ein

03:41:45.320 --> 03:41:50.960
full hd und es ist auch nur ein 24,5 zoll reicht ja vielen heute nicht mehr aber wenn

03:41:50.960 --> 03:41:57.160
du 240 herz willst dann also hohe bildwiederholrate und hohe auflösungen eben beides zusammen

03:41:57.160 --> 03:42:06.280
geht halt noch nicht äh sebaro ich weiß es ehrlich gesagt nicht genau aber in meinem

03:42:06.280 --> 03:42:20.520
dot file repo auf github ist alles drin hoffe ich zumindest muss mal gucken äh deiner meinung

03:42:20.520 --> 03:42:24.200
nach ein passendes einstiegs gehaltener für die physik nach ausbildung kann man pauschal

03:42:24.200 --> 03:42:27.880
nicht sagen kommt darauf an was man macht und kommt auf die region an und wo man gelandet

03:42:27.880 --> 03:42:50.240
ist kann man so pauschal nicht sagen wollte vor kurzem einen server in mein home network

03:42:50.240 --> 03:42:55.120
verbinden der server ist aktuell nur über ein vpn direkt erreichbar hast du da eine

03:42:55.120 --> 03:43:00.200
idee wie ich das hin bekomme dass ich ein vpn dauerhaft im netzwerk habe und alle geräte

03:43:00.200 --> 03:43:09.800
im netz ohne einen eigenen vpn darauf kommen äh äh ich bin mir nicht sicher ob ich das

03:43:09.800 --> 03:43:18.120
jetzt richtig verstehe aber geräte im eigenen netz kommen doch eh drauf es ist doch eigentlich

03:43:18.120 --> 03:43:24.480
nur die frage wie per vpn drauf kommt oder also mal angenommen dann dein server ist in

03:43:24.480 --> 03:43:34.720
netz a und äh dann können alle alle rechner da drauf auch zugreifen und selbst wenn du

03:43:34.720 --> 03:43:41.240
ein eigenes vpn netz hast muss einfach nur gucken dass das routing stimmt und ähm die

03:43:41.240 --> 03:43:49.900
firewall freischaltung stimmt ansonsten oder ich verstehe es nicht der server ist in gehost

03:43:49.900 --> 03:44:06.760
und hat aktuell nur vpn freischaltet a du willst so eine bridge bauen oder wie a jetzt

03:44:06.760 --> 03:44:12.880
habe ich es verstanden du willst quasi das das das koppeln irgendwie so als so als würde

03:44:12.880 --> 03:44:26.080
dieser server in deinem vpn in deinem in deinem netz stehen ja dann ist das was baden i beiden

03:44:26.080 --> 03:44:37.000
schau mal nicht schlecht in den bridge die war also tap anstatt tun ja es ist eine möglichkeit

03:44:37.000 --> 03:44:41.560
ansonsten könntest du auch gucken da muss ich jetzt erstmal ein bisschen überlegen

03:44:41.560 --> 03:44:50.560
ansonsten müsstest du halt gucken dass du dich verbindest dass dann halt ein router das

03:44:50.560 --> 03:44:59.640
vpn aufbaut und dann müsstest du halt routing einträge in deinem router machen dorthin

03:44:59.640 --> 03:45:08.400
dann ist es zwar nicht das gleiche netz aber du hast zugriff ohne vpn also du baust einen

03:45:08.400 --> 03:45:13.240
tunnel auf von einem router zu deinem server und dann musst du in der routing tabelle von

03:45:13.240 --> 03:45:17.160
einem router natürlich noch reinschreiben ok oder das wird wahrscheinlich automatisch

03:45:17.160 --> 03:45:22.800
drin stehen dass er das weiter leitet dahin das müsste auch gehen also du musst kein

03:45:22.800 --> 03:45:27.800
du musst da kein layer 2 gedönst machen layer 2 vpn war übrigens das thema meiner abschlussarbeit

03:45:27.800 --> 03:45:39.440
na usb f und bgp bringt er da jetzt nicht wirklich was einup da müsste ich mir also

03:45:39.440 --> 03:45:50.160
site to site vpn ist auf jeden fall das richtige stift stichwort dafür aber ich habe mich

03:45:50.160 --> 03:45:54.080
letzterzeit so wenig was mit vpn gemacht also so aus dem erbel schütteln kann ich jetzt

03:45:54.080 --> 03:46:10.680
auch nicht wie man es mir was am besten macht poggers weiß achso ja das das stimmt das

03:46:10.680 --> 03:46:18.120
kannst du machen aber in dem fall wäre es eine wäre es eine route ja also ich glaube

03:46:18.120 --> 03:46:28.040
man kann auch verkraften aber ja ja stimmt hast recht ja das ist korrekt na oder ich

03:46:28.040 --> 03:46:57.800
meine du kannst ja auch egal ja das geht als du ein bisschen overkill

03:46:57.800 --> 03:47:18.960
habe ich das jetzt übersehen wegen der ausbildung dass da auskommen antwort gekommen ist noch

03:47:18.960 --> 03:47:23.600
schon mal nachgedacht solche streams auf youtube zu stellen ja schon von anfang an aber das

03:47:23.600 --> 03:47:28.440
interessiert auf youtube bei mir kaum jemand außerdem ist das viel zu lang das müsste

03:47:28.440 --> 03:47:39.360
ich dann zusammen schneiden das ist ein riesen akt und viel zu wenig so audience für die

03:47:39.360 --> 03:47:47.120
leute wollen irgendwelche battlefield talk oder sonst was sehen auf youtube sieht man

03:47:47.120 --> 03:47:52.640
ich sehe ja was gerne geguckt wird und was nicht ab und zu mal ein technikvideo mögen

03:47:52.640 --> 03:47:58.120
die leute also wenn ich mich über irgendwelche aktuellen sicherheitslücken oder so auslasse

03:47:58.120 --> 03:48:05.160
das kam immer ganz gut an aber ansonsten wollen die leute auf youtube eher themenbasierten

03:48:05.160 --> 03:48:09.680
aktuellen themenbasierten oder eventuell vielleicht könnte man sogar anstrengend gaming themenbasierten

03:48:09.680 --> 03:48:18.480
laberstellen haben und heutzutage wollen sie auf youtube reactions sehen ja das stimmt

03:48:18.480 --> 03:48:26.040
allerdings bei mir wird ja wenig reacted könnte ja mal auf mein altes video reacten und dann

03:48:26.040 --> 03:48:28.640
reaktieren ja später auf das video wo ich reaktet habe

03:48:28.640 --> 03:48:52.600
es ist wunderbar jetzt bin ich müde jetzt kann man stream ausmachen gar nicht wechseln

03:48:52.600 --> 03:49:04.520
excellent der hängt aber ganz schön hier beim beenden

03:49:04.520 --> 03:49:10.240
kann es sein dass du sehr wenig schlaf brauchst nee warum ich penn ganz normal ich mein ich

03:49:10.240 --> 03:49:20.760
gehe jetzt klar penn irgendwann so zwanzig minuten halbe stunde und dann stehe ich um

03:49:20.760 --> 03:49:27.080
also aktuell so um kurz nach sieben auf wenn ich kein homeoffice hab stehe ich fünf vor

03:49:27.080 --> 03:49:32.320
45 auf das sind also sagen wir so ich bin selbst wenn ich sag mal runden wir mal auf

03:49:32.320 --> 03:49:37.160
sechs Uhr auf sagen wir mal runden wir mal auf sechs Uhr auf und sagen wir mal ich gehe

03:49:37.160 --> 03:49:42.960
erst um 23 Uhr im Bett das heißt ich liege mindestens sieben stunden im Bett mindestens

03:49:42.960 --> 03:49:48.920
und selbst wenn ich davon nur sechs stunden penne ist es nicht so als wäre ich da jetzt

03:49:48.920 --> 03:49:53.680
maßlos unter unter versorgt ja ich komme mir schon ganz schön müde vor manchmal aber

03:49:53.680 --> 03:49:58.760
sechs stunden wenn ich wirklich nur sechs stunden penne ansonsten wenn ich jetzt ins

03:49:58.760 --> 03:50:06.800
Bett gehe und dann bis sieben Uhr pennen kann dann sind es ja acht acht stunden nicht

03:50:06.800 --> 03:50:18.520
ganz sieben sieben halb acht stunden es reicht doch sieben stunden ist doch genug sieben

03:50:18.520 --> 03:50:32.120
stunden da ist man fit vielleicht nicht jeder wie lang pennt ihr so chat wollte ich übrigens

03:50:32.120 --> 03:50:38.680
gar nicht einblenden oder ich den hier einblenden wie viel stunden müsst ihr schlafen dass

03:50:38.680 --> 03:50:47.200
ihr wach seid also ich glaube die meisten ist so sechs sieben stunden also wir reden

03:50:47.200 --> 03:50:52.760
nicht von stunden die man im bett liegt sondern stunden quasi ab dann wenn man eingeschlafen

03:50:52.760 --> 03:51:16.200
ist 10 stunden oder bis man nicht gleich wieder umkippt ja sechs sieben stunden ja ich glaube

03:51:16.200 --> 03:51:22.040
das ist auch relativ normal mag zwar die ein oder andere geben den vier stunden ausreichen

03:51:22.040 --> 03:51:40.920
es dürfte aber die Minderheit sein

03:51:40.920 --> 03:52:10.680
ich finde diesen soundeffekt immer noch so geil

03:52:10.680 --> 03:52:33.080
so leute ich gehe ins bett wir sehen uns dann morgen oder vielleicht bisschen bisschen

03:52:33.080 --> 03:52:40.480
später mal gucken ok outro musik sonst könnt ihr wieder mal nicht in die schlafen habe ich

03:52:40.480 --> 03:53:04.200
gehört also leute bis denn see you

