Almost heaven, older Twitch chat, all these emotes, wondering how to spell that.
Now we're older, everyone's moved on, but I remember Twitch chat from those days that are gone.
Twitch emotes from long ago made you feel you're not alone.
Cappapogjam, keep a forehead, bible thumb. Twitch emotes.
Excellent. Oh Mist, mein Herz hat jetzt wieder total... Warum verknotet sich das immer von selbst?
Gab's da nicht sogar letztens eine Studie zu, dass umso länger man wartet, umso mehr Kabel von alleine verknoten.
Spamming all the time, TOS was nowhere, so everyone's feeling fine. Twitch emotes from long ago made you feel you're not alone.
Wir werden noch ein bisschen rumbasteln. People forehead, bible thumb, twitch emotes.
Alter, der FrankiaZ mag Sings, bloß nicht. Ich muss mal meine Vorallemaren machen.
From yesterday. Twitch Sings werde ich nie spielen. Das mit so Monarch S.
Das ist auch so was. Das ist mir zu Monarch S. Überlegt euch das mal.
Hier sitzt ein 33-jähriger Typ vorm Rechner abends um 19.30 Uhr und sagt, das ist mir zu Monarch S. Alles klar.
Alles klar, oder? Durchgespielt.
Hör mal, ist da drei Monate. Dankeschön für die Subscription.
Ein bisschen gedudel im Hintergrund machen, damit es nicht zu laut wird.
Nintendo gedudel im Hintergrund ist das Beste und ich glaube, die streiken auch keinen.
Das war tatsächlich zu Monarch S gestern. Mal gucken, ob der jetzt geupdatet hat oder ob ich mal neu starten muss.
Alter, wie oft kommen da noch Updates? Wollen die mich rollen oder was?
Ich hör nicht mehr auf. Übrigens. Jetzt wird es kritisch hier.
Ich habe einen Weihnachtsbaum gekauft seit sieben Jahren oder noch länger.
Das erste Mal wieder Weihnachtsbaum. Im Bauhaus.
Für 18 Euro oder so. Also keinen sonderlich großen.
Schau mal kurz. Update. Ja, muss man alles update. Exzellent, exzellent, exzellent. Alles update.
Exquisite Updates. Hyper Update. Update S brauchen wir noch.
Update Update S wäre eigentlich wirklich ein gutes E-Mode, weil Updates gehen ja öfters auch mal in die Hose.
Das ist nicht groß, das Ding. Der ist 20 25.
So ein ganz kleiner Furzbaum. Der passt. Guck mal, der ist ungefähr so groß wie mein alter Baum.
Dieses Teil. Baum. LED.
Ich kenne meinen eigenen Tweet nicht mehr. Ich habe mal ein Bild von Weihnachtsbaum gemacht.
Der ist wirklich klein gewesen. Mini Baum ist das. Was hat er denn hier für Schmerzen? Was will der von mir?
Go Pass? Was hat er denn hier für Schmerzen? Was ist das für eine Ausgabe?
Das sind irgendwelche Go Geschichten. Warum habe ich Permission Denied in meinem eigenen Home?
Kann mir das mal irgendjemand erklären? Ich finde es nicht gut, dass ich in meinem eigenen Home Permission Denied habe.
Vor allem warum? Cash.
Warum habe ich Permission Denied? Was soll das? Anzeige ist raus.
Es gibt keinen Sinn, dass ich Permission Denied habe. Weißt du was? Das benutze ich eh nicht.
0W. Piss dich, Alter. Das hat es jetzt davon.
Alles andere hat es schon abgedatet oder was?
Oh, E3 Status. Gibt es kein Package mehr? Warum nicht?
Alles andere hat es geupdatet oder? Was sind das für Fehlermeldungen?
Alles andere hat er geupdatet.
Warum ist meine Statusleiste weg? E3 Status.
Da ist es doch noch. Ah, das ist jetzt in Base drinne. Okay.
Sonst mache ich irgendwas kaputt. Wir wollen heute etwas anderes machen im Stream.
Was ist CraftQL? Ist das vergleichbar mit Dealungsein? Das hat damit überhaupt nichts zu tun.
Guck mal, haben die einen offiziellen Playground? Ich zeige es dir mal. Was richtig nice ist.
Haben die online eine Demo?
Wenn nicht, wir machen eh gleich das Projekt auf zum Ausprobieren.
Ah, ich habe Firefox geupdatet. Okay, sehr gut.
CraftQL ist ein Verfahren, wie man Sachen abfragen kann von einer API.
Aber ich muss da ein bisschen anders anfangen. Ich habe damit auch noch nicht allzu viel gemacht.
Ich habe ein bisschen damit rumgebaut und ich habe mal auch mit einem Kollegen zusammen ein Projekt gemacht,
wo CraftQL verwendet wurde. Aber so großartig schlau bin ich da nicht, was das angeht.
Und das Ganze sieht ungefähr so aus. Gucken wir mal. Github API. CraftQL Github App.
Vielleicht haben wir ein schönes Beispiel für. Nee, natürlich nicht.
Wir machen jetzt einfach das Projekt, dann siehst du es. Du kannst damit relativ gut Daten abfragen über eine API,
aber detaillierter als mit REST. REST musst du erstmal deine API modellen nach den Ressourcen,
die du hast. Sei es jetzt irgendwie nach User, nach Leuten, nach Büchern, nach Autoren, nach Kameras, nach sonst was.
Und dann kannst du Sachen hinzufügen, abrufen, editieren und so und sonstige Geschichten.
Aber es gibt halt viele Sachen, die passen nicht so richtig in REST rein und Suche und Sortieren und Filtern und so
ist mit REST auch nicht wirklich schön. So und ich habe schon mal vor einer Weile ein bisschen,
wie gesagt, ich habe mit einem Kollegen ein Projekt gemacht, ein bisschen CraftQL verwendet.
Das ist wirklich extrem nice. Aber, achso, ja, hast recht. Ah, yes. Viel besser, klar. Viel besser.
Ähm, ja. Aber, ähm, in letzter Zeit, also insgesamt viel gemacht habe ich noch nicht
und auch so kenne ich mich da nicht wirklich, wirklich gut aus.
Deswegen wollte ich mal ein bisschen rumspielen und gucken, was man damit machen kann.
So, aber als erstes legen wir mal ein neues Projekt an mit ein paar Fake-Daten drin und dann können wir das Ganze abfragen.
Habe ich denn.NET 5 hier schon drauf? Ich glaube schon. By the way, kann ich was im Chat übersehen?
Max, kannst du mal dein krasses Feature zeigen? Hä? Welches? Welches davon? What?
Ich habe keine Ahnung, was du meinst.
Meine Mental Health ist vollkommen in Ordnung. So.
Hero Master. Habe ich die schon? Ich glaube, ich habe die schon. Trotzdem danke schön für den Sub.
So, ähm, also gibt es eigentlich.NET mittlerweile die Fünfer schon über den Package Manager?
Nein, gibt es nicht. Äh, ich hatte doch ein Snap installiert mit.NET 5, oder?
Snap, hier 5. Snap Update.NET SDK. Ach, das ist ja wieder Ubuntu.
Wisst ihr, eine Sache, ich lobe ja Ubuntu immer. Ich sage so quasi auf dem Server, wenn ich es mir aussuchen kann,
installiere ich immer Ubuntu Server und am liebsten verwende ich Ubuntu Server und sonst was. Sorry.
Ubuntu. Eine Sache, die mir bei den Ubuntu Sachen wirklich auf den Keks geht, ist, dass sie für alles eigene Dinge machen.
Warum, warum bitte schön nicht Snap Update? Jeder, jeder verwendet Update, aber bei Snap ist es Refresh.
Wer ist auf diese beknackte Idee gekommen, Alter?
No Updates Available. Okay, es gibt keine Patches oder sonst was. Dann mal IDE. Ah nee, Moment, falsche, falsche. Ich brauche die Early Access IDE.
Oh. Was mache ich denn jetzt? Da muss ich ja kaufen jetzt.
Ja, Snap sackt. Gehe ich dir voll ganz recht. Ich mag das auch nicht. Also Snap ist überhaupt nicht meins.
Aber was gibt es für Alternative so wirklich, wo halt auch die Sachen drin sind, haben wir jetzt.
Es gibt Flatpak, aber ich glaube Flatpak hat kein.NET Core.
.NET Core ist am easyesten zu installieren über Snap, wenn es nicht aus dem Package Manager kommt.
Das offizielle Installer-Skript geht auch.
Wir legen jetzt mal kurz ein Projekt an, da kann ich euch zeigen, was wir machen.
Lass mal probieren zu machen. Also New Solution. Was brauchen wir denn? Wir brauchen eine Web Application.
Passt alles, alles gut. Alles exellent. Moin Rusty.
Ja, das ist wirklich merkwürdig. Snap sind ja auch Container, aber Container, genau wie du sagst, Container, die so tun, als sind sie ein lokalen,
so wie dieses Programm, aber doch nicht so richtig. Das Snap ist so ein komischer Hybrid.
LXD finde ich dafür eigentlich ganz nice, weil es quasi das noch am nächsten an der VM-mäßige Container-Dings ist.
So, Rider-Projects, haben wir auf, zack.
So, und übrigens ein Big-Brain-Command, was ich euch nicht oft genug als Herz legen kann, ist.NET Run-Watch.
So, und was das macht, ist folgendes, das ist, ach so, ja, ich muss die richtige.NET Run-Time verwenden, das funktioniert jetzt auch.
Das ist ein richtiges Big-Brain-Tool bzw. Build-in-Tool, und zwar normalerweise bei Web-Anwendungen hat man sich ja mittlerweile auch darauf eingeschossen,
dass immer F5 drücken zum Refreshen nervig ist. So, da gibt es jetzt mittlerweile schon Tools für Web-Anwendungen, die automatisch die Seite refreshen.
.NET Run-Watch macht das gleiche. Also, zum Beispiel, ich gehe jetzt hier rein, das ist nur das Standard-Projekt, da gibt es jetzt nichts Tolles zu sehen.
Gehe jetzt hier rein und ich ändere jetzt hier irgendwas, ich sage jetzt mal hier irgendwie Konsole-Write-Line 1, 2, 3.
Normalerweise müsste ich jetzt ja meine Anwendung neu laden, dass sie das frisst, aber muss ich nicht, wenn ich.NET Run-Watch mache.
Ich speicher jetzt einfach, Achtung, Steuerung S und BÄM. Sollte nicht eigentlich neu starten jetzt.
Hä, warum geht das denn nicht? Normalerweise würde das jetzt für mich neu starten.
Hä?.NET? Ist es Watch-Run? Nein, es ist Run-Watch. Ah, ok, MonkaS, ich habe nichts gesagt.
Es ist.NET Watch-Run und nicht.NET Run-Watch. Ich habe gerade versucht, Run, ich habe gerade meine aktuelle Anwendung und als erstes Argument Watch übergeben.
Ich muss sagen, derjenige, der KeckLeo als Emote vorgeschlagen hat, beste, ich finde das übelst nice.
Wir haben auch sonst wenige Channels, aber KeckLeo, übelst nice.
So, jetzt zeige ich das Ganze nochmal. Also ich habe jetzt hier irgendwie Mist drin stehen, löscht das und müsste eigentlich meine Anwendung neu starten.
Also was mache ich? Einfach nur speichern und zack, er startet das für mich neu.
Also finde ich relativ praktisch, gerade bei Web-Anwendungssachen.
Moment, was ist denn das für ein komisches neues Template? What the fuck?
Das ist neu. Das ist ein neues Template seit.NET 5. Was ist denn hier los?
Swagger, ich will kein Swagger haben. Wollen wir Swagger haben, Leute?
Chat an den Freien würde mich mal interessieren. Wie viele von euch wissen überhaupt oder haben schon mal was gehört, von was Swagger überhaupt ist?
Ich meine, auch wenn es ganz nett ist, aber die Großteilprojekte brauchen es nicht und die meisten wissen nicht, was es ist.
Swagger ist eigentlich was ganz Cooles, aber braucht man normalerweise nicht.
Swagger ist ein automatischer API-Dokumentationstool. Ist eigentlich ganz cool.
Wir können uns das jetzt mal kurz angucken. Also localhost, was ist.NET Standard 5000?
Wartet mal kurz, ich muss mal eine Sache fixen. Ich will gar nicht mit SSL starten.
Wo ist das hier nochmal drin? Ah, das ist immer, das suche ich immer.
Die haben das ja auch wieder super versteckt bei Microsoft alles, wie man startet.
Also wir wollen nicht starten. Also wir wollen schon gar nicht mal mit dem IES starten.
Sondern wir wollen auch nicht harte DPS starten. Wir wollen einfach nur localhost auf allen IPs lauschen.
Excellent. So und jetzt nochmal neu starten. Jetzt ist es auch da.
So, ich zeige euch jetzt mal, was Swagger ist. Ich bin mir aber gar nicht sicher, was ich für eine Uhrlauf machen muss. Die hier wahrscheinlich.
Ich habe das noch nie in.NET verwendet. Keine Ahnung.
So, wahrscheinlich reicht es nicht, wenn man das einfach aufmacht. Also 5000 ist der Standardport. Okay, da ist einfach mal.
Das sollte nicht so sein, oder? Das sollte normalerweise jetzt was kommen, oder?
Ah, nee. Ich muss Weatherforecast oder irgendwie sowas machen, das was kommt. Ja, okay, alles klar.
Also ich kriege jetzt irgendwelche komischen Fake-Wetter-Daten. So und jetzt kann man irgendwie Swagger aufmachen.
Wie macht man Swagger in.NET hier den Fault-APN-Punkt auf?
Swagger einfach so. Ah, genau. Das ist ein automatisches AP. Ja, IES gibt es immer noch.
Das ist ein automatisches AP-Dokumentationstool. Und man kann auch gleich die AP ausprobieren.
Es ist eine richtig coole Sache, wenn man irgendwelche öffentliche APs anbietet. Ich muss euch aber ehrlich sagen, ich benutze das äußerst selten.
Dafür haben diese Sachen nicht die nötige Komplexität. Und für die eigenen Sachen, so richtig so klassische Rest-End-Punkte habe ich eh nur noch selten.
Ein paar vielleicht. Aber egal, ich zeige euch mal was es ist. Also sprich, das hier ist jetzt die Beispielanwendung. Was will das hier überhaupt von mir?
Also das ist jetzt die Standardanwendung, das Standard-Template, wenn man ASP.NET Core-Anwendung anlegt hier mit.NET 5.
Und das Einzige, was hier als AP-Endpunkt drinne ist, ist halt dieser Wetter-Vorschau. Und das Einzige, was der anbietet ist einmal GET.
Also sprich, das Einzige, was man machen kann ist auf Anwendung slash Weather-Vorcast gehen und man bekommt einen aktuellen Wetter-Vorhersage.
Also aktuell Fake-Daten. Und Zegrot, ja ich bin mal gespannt, ob das funktioniert. Und das generiert halt so eine AP-Dokumentation automatisch.
Also sprich, ich gehe jetzt auf die Seite drauf, da sagt ihr mir, ok, was wird als APs angeboten? Es gibt einfach nur ein GET, einfach nur ein GET Weather-Vorcast.
Und man kann irgendwo auch jetzt die Sache direkt ausprobieren. Normalerweise schon.
Kann man das nicht eingestellt? Kann man nicht das Zeug? Oder muss man das erst einschalten? Normalerweise gibt es da unten drunter nämlich noch so ein Button, dass man das direkt ausprobieren kann.
Aber anscheinend hier nicht. Das muss man bestimmt erst einschalten.
Ah, hier. Genau. Und man kann dann auch direkt ausprobieren. Ich meine, die AP-Abfrage ist ein bisschen, naja, low-brain im Endeffekt, weil das soll da rauskommen.
Das gibt keine Parameter und nichts. Aber wenn man eine AP neu verwenden muss und nicht weiß, wie die geht und die den Swagger Endpunkt haben, ist das eine super, wirklich tolle Geschichte.
Um sich da ein bisschen ran zu tasten, was die können. Vor allem, weil die auch Example-Curl-Aufrufe dabei schreiben. Das finde ich auch ganz praktisch.
Ja. Genau. Ist eigentlich ganz cool. Aber, naja. Bei mir wird es nicht oft verwendet. Und ich hier jetzt auch erst recht.
Deswegen schmeißen wir die komischen Swagger-Campels gleich mal wieder raus. Hat sich ausgeswagt. So. Swagger muss weg. Brem.
Äh, das kann auch weg. Authorization, CAC-V. Kommt man da hin? Swagger.
Okay. Die haben das ein bisschen entschlackt. Ich sehe das jetzt nämlich zum ersten Mal, das neue Template mit Dortnet 5.
Das sieht eine ganze Ecke schlanker aus. Ja. Zumindest, was wir jetzt brauchen, ist, wir brauchen Fake-Daten.
Dass wir CraftQL richtig verwenden können. Weil CraftQL, wie gesagt, ist halt was zum Abfragen.
Eine Hilfe, um Daten abzufragen von einer AP oder wie nennt man das? Was sagen die denn selbst, was die sind?
CraftQL. Die können das bestimmt besser erklären als ich. Ah, genau. Eine Abfragesprache für meine AP.
Okay. Deswegen brauchen wir jetzt erst mal Daten, die wir überhaupt abfragen können.
Äh, Cheat95. Das Archiv müsste eigentlich funktionieren. Du darfst nicht auf das Video direkt klicken. Du musst irgendwie unten klicken, sonst will er es downloaden.
Das ist ein bisschen Google-Fail. Die Bedienung davon.
So. Und zwar, was macht man, wenn man Fake-Daten braucht? Da gibt es ein ziemlich gutes Dortnet-Projekt. Also, wer mal JavaScript verwendet, der kennt bestimmt Faker.
Oder was war Faker? Faker. Und es geht nicht um irgendwelche LoL-Spiele oder so. Okay, ich gebe zu, das war halt schlecht.
Sondern um eine Library, die Fake-Daten generiert. Und relativ gut eigentlich auch.
Allerdings ist es wirklich Fake. Also Postleitzahlen und so stimmen nicht. Das sind ausgedachte Sachen.
Genau. Und Faker. Das ist so eine JavaScript-Geschichte. Und es gibt für Dortnet eins. Das nennt sich Bogus.
Das macht im Prinzip das Gleiche. Ich glaube, das ist sogar ein Faker-Port. Genau. Port of Faker.
Und was man damit machen kann, ist, wenn ich jetzt irgendwas ausprobieren will und massig Fake-Daten brauche, kann man das damit erstellen.
Zum Beispiel sowas hier.
Okay, das ist ein bisschen ultrakompliziert geschrieben jetzt. Aber da kommt halt sowas hier raus. Fake-Daten.
Das ist eigentlich ganz nützlich.
Jetzt geht es wieder. Okay. So, deswegen installieren wir mal das Ding und generieren uns ein paar Fake-Daten, die wir gleich über Craft-Ql abfragen können.
Exzellent. Ich glaube, das ist das Richtige. Alter, die sind doch bei Version 32. Die machen den Firefox hier.
Die machen den Firefox.
Na ja, sollen sie mal machen.
Alles installiert. Okay. So, und was man da jetzt machen kann, ist...
Wartet mal.
Wo machen wir das jetzt am besten? Ja, eigentlich bräuchten wir jetzt noch irgendeine SQLite-Datenbank oder sowas, wo wir uns das rausholen können.
Oder eine In-Memory-Datenbank. Wir generieren erstmal ein bisschen Fake-Daten.
So, da kann man zum Beispiel jetzt sagen, wir machen den Klassiker... Oracle, genau. Wir machen den Klassiker, wir machen irgendwie Customer oder sowas.
Erstmal Oracle. Natürlich nur mit Lizenz, versteht sich.
Ich überleg grad, wie das ging. Man konnte irgendwie sagen... So, kurz das Beispiel noch mal angucken.
Genau, man musste sagen, Faker und dann was für User. Ja, machen wir. Machen wir mal eine Klasse. Keine Ahnung.
Ich mach das jetzt hier einfach mal inline. Public Class User. Irgendwas, wir brauchen doch irgendwas zum Abfragen.
So, und dieser User hat, keine Ahnung, Adresse... Adress? What the fuck? String? String? Hallo? Bäm, bäm.
Adress? Schreibt man Adress mit DD? Ich kann mir das immer nicht merken. Adresse? Adress? Adress schreibt man glaube ich mit DD.
So, der hat eine Adress, der hat einen String Name und der hat, keine Ahnung, der hat noch irgendwie ein Phone oder so. Vollkommen egal.
So, und jetzt kann man sagen, Faker, erstelle mir neue User und man kann dem auch irgendwo hier sagen, genau, ob er...
Man kann ihm nämlich auch sagen, was er für eine Sprache verwenden soll, aber das ist recht beschränkt, also das geht nicht mit allem.
Aber da kann er zum Beispiel Namen generieren wie Peter Krabbe oder sowas.
Wir hatten noch letztens dieses Mal, wo ich euch dieses eine Projekt mal gezeigt habe, waren Fake-Daten drin.
Da war da Peter Krabbe dabei, das kann ich mich noch dran erinnern. Und in EN würde dann Peter Crabbe generieren oder sowas. Was auch immer.
So, also. Oder hier, Users. Eigentlich brauchen wir gar keine Datenbank, wir machen einfach die Fake-User public und gut ist.
So, und nun kann man ihm sagen, was er für Fake-Sachen erstellen soll. Da kann man nämlich sagen, Rule und jetzt zum Beispiel für...
Der kriegt noch eine Mail zum Beispiel. Mail ist auch gut, Mail kann das auch gut, weil ich brauche ja später ein bisschen was zum Abfragen.
So, Mail. Was, Max, möchtest du mal... Moment, ich muss übrigens mal Chat aufmachen, hab ich vergessen.
Chat you. So, also. Was meinste? Möchtest du mal die geballte Kompetenz des österreichischen Wirtschaftsministeriums bezüglich E-Commerce erleben?
Also, warum? Inwiefern? Was haben sie gerissen? Ich hab nur mitgekriegt, dass sich vor zwei Tagen alle über den Bundeskanzler, den Österreichischen, aufgeregt haben.
Weil er irgendwas erzählt hat von Ausländer, die haben Corona eingeschleppt oder sowas, da haben sich alle aufgeregt.
Kaufhaus Österreich. Ok, zeig mal her, warum ist das so unfähig hier? Kaufhaus Österreich. Oh, Hi-Res-Bild schon mal.
Ich kaufe Regionalen, das geht auch digital. Willkommen im Kaufhaus. Das sieht doch ganz ok aus, was ist da dran so schlimm?
Shopkategorien, Bücher, äh, Schaufensterbummel, aha, exellent. Das sieht doch ganz... Was? Such mal Fahrrad.
Ne. Ja, geht doch. Ist doch alles ok. Ich finde es sogar ganz gut. Der findet bei Fahrrad sogar E-Bike Factory.
Drück Enter, ok. Down the law. Mal gucken, was passiert. Geht. Sieht zwar nicht gerade toll aus hier mit dem runter, aber es geht doch alles.
Da können wir jetzt zum Beispiel uns dann in die E-Bike Factory angucken oder so. Ah, ich finde das jetzt nicht so schlimm.
Was ist da dran so schlimm? Ich meine, die Seite sieht sogar noch ganz brauchbar aus. Das ist so Fake Material Design. Was ist denn das für ein Framework? Lass mir gucken.
Blue Circle Arrow. Sagt einem das irgendwas? Was ist das? Blue Circle? Ist das irgendein Materialize oder sowas? CSS. Ach ne, das ist den MDI-Icons wahrscheinlich einfach nur. CTA-Full, CTA.
Ich vermute fast, dass das irgendwas Custom-Zusammen gewusstet ist. Das Ding hat 620.000 Euro gekostet. Ja, das ist doch wenig. Guck mal, wie teuer der Flughafen bei uns ist oder der Bahnhof oder was auch immer.
Hey, die Behördensachen sind immer teuer, weil die müssen sich auch nicht vom eigenen Geld bezahlen. Die können einfach sagen, okay, easy, mich juckt es überhaupt nicht, ob da was Gutes oder Schlechtes bei rauskommt. Ich gebe einfach mal Geld aus, was nicht mir ist.
Die Corona-App, Leute. Also mein iPhone ist ja zu alt. Also das 6er kann das nicht. Aber meine Mutter hat auf ihrem iPhone SE die Corona-App.
Und die Corona-App, die sagt bestimmt fünfmal am Tag, dass irgendwas ist, dass sie entweder gecrashed ist, dass sie irgendwelche Daten nicht abrufen kann, dass irgendwelche Verbindungsprobleme gibt. Also die Corona-App, die hat schon so oft auf sich aufmerksam gemacht.
Nicht weil eine Corona Begegnung war, sondern weil es einfach nicht richtig funktioniert. Ja doch, bei uns schon. Und ich meine, man darf nicht vergessen, die Corona-App ist von den Besten der Besten programmiert worden.
Das war doch eine Zusammenstellung aus Leuten von der Telekom und SAP. Also das muss eigentlich gut sein. Das waren die Stonks, Businessmans, highly trained expert consultant schlechthin.
Also das wundert mich, dass das Probleme hat. So wir faken jetzt mal ein paar User-Daten. Also, Rule für, Moment, wie hat das noch mal funktioniert? Für User-Mail?
Dann konnte man glaube ich irgendwie sagen, Faker-Mail? Nee. In-Commerce-Internet-Mail. Excellent. So, jetzt hat unser User Fake-E-Mails, eine Fake-E-Mail-Adresse.
Dann braucht unser User noch einen Fake-Name auf jeden Fall. Name. Alter, gehst du mal fort da oben, Overlay, ist ja auch mal gut.
Name. Fake-Name, ganz wichtig. Oh nee, Fake-Name geht nicht. Full-Name, jawoll, das braucht der unbedingt. Was wird hier gerade gebastelt?
Ich generiere gerade ein paar Fake-Daten, dass wir dann GraphQL ausprobieren können. Wollte ich schon lange mal ausprobieren und mich ein bisschen mit rum basteln. Erstens, weil ich das für diese Security-Kamera-Überwachungssoftware verwenden will, die wir hier im Stream auch schon programmiert haben.
Für die Aufnahmen, weil wenn es später viele Aufnahmen werden, wird das über Rest und Sortieren und Filtern ein bisschen eklig. Und einfach weil es eine coole Technik ist.
Jetzt brauchen wir natürlich erstmal was zum Abfragen, dass wir überhaupt GraphQL verwenden können.
Gut, was hat der User noch? Der hat noch eine, also E-Mail und Name haben wir jetzt schon, ein Phone hat er noch. User, Phone. Haben die direkt Phone in Faker? Phone? Phone-Number. Muss ja auch nichts realistisches drinstehen.
So und dann hat unser User noch einen, ne Namen haben wir schon, Phone-Name-Address. Was haben wir jetzt vergessen? Mail-Phone-Name-Address. Address haben wir noch nicht.
Was macht Rule 4? Das erstellt, was sagen sie denn? Create a Rule-4-Property, alles klar, Epic Brain. Da gibst du an, welches Property, welche Variable im Endeffekt von diesem User, mit was gefüllt werden soll.
Also sagst du ihm hier, für jeden neuen User, den du anlegst, verwendet diese Regel, um es zu füllen. So, jetzt sag ich ok, User-Adresse möchte ich füllen mit den Regeln von Faker für Random-Adressen.
So, Full. Gibt es da sowas wie Full-Adress? Exzellent. So, sind wir fertig. Und jetzt müssen wir ja gucken, wie wir den Kram erstellen.
Jetzt konnte man irgendwie sagen, Generate oder sowas. Users, Generate. 500 User. Bam. So und jetzt haben wir 500 User mit Fake-Daten. Das ist zum Testen eine super Geschichte.
Ich kann euch auch mal zeigen, dass da jetzt was Sinnvolles drin steht. Oh, wir können. Big Brain. Ich hab ne Idee. Wir können Record-Types verwenden.
Weil, ist das so gut ist, bin ich mir gar nicht so... Probieren wir mal aus. Also, User in Users. Wir können gleich mal Record-Types verwenden.
Moment. Ach nee. Moment. Rules. Rules Generate. So rum. Ah, yes. So. Und jetzt werdet ihr sehen, jetzt geb ich mir mal das ganze hier aus.
Und jetzt gibts 500 Fake-User-Namen klar. Hier. Wen haben wir denn da? Jared Schimmel haben wir da zum Beispiel. Alles klar. Und Dean Schulzlist.
So und jetzt kann man auch noch hier irgendwo einstellen, dass er das auf Deutsch machen soll. Deutsche Fake-Daten generieren.
Da gibt es den Lorenzo Bussmann. Und was für ein Ding? Frieda Wirkschließ. Alles klar. Logisch. Wobei, die Leute heißen ganz merkwürdig.
Aber Frieda Wirkschließ ist schon ganz toll. Gut. Also man sieht, der generiert halt Fake-Daten. Und man kann sich auch die E-Mailer ausgeben lassen. E-Mail.
Was halt, was ich glaube ich, was er glaube ich nicht kann ist, dass die E-Mail zum User passt. Da muss man irgendwelche Custom-Rules für machen. Guck.
Weil Lewin Holt hat umut80 at gmail.com. Das klingt natürlich wahnsinnig passend.
Woher weiß er jetzt, woher f und u kommt? Das sind Lambda-Functions. Das weiß er gar nicht. Das ruft er auf mit diesen Optionen. Also hier lege ich im Prinzip nur fest, welche Regeln ich verwenden will.
Und wenn ich dann sage Generate, dann macht er intern quasi eine Schleife 0 bis 500 und ruft quasi jede Sache, die er dann erstellt, ruft er diese Rule vor dann quasi auf, übergibt User, übergibt eine Faker-Instanz und holst das dann da raus. Das ist quasi ein Callback, wenn du es so willst.
Würde ich mal vermuten. Nee, das ist kein Callback. Nee, das ist kein Callback. Das ist, doch das ist so eine Art Callback, würde ich mal sagen.
Hast du was gefragt? Jetzt müsste ich erst mal überlegen, wie funktioniert denn das? Ja doch, das wird unter der Haube schon so eine Art Callback dann erzeugen, weil ich meine, der erzeugt ja die User nicht hier.
Hier sagst du ja nur, welche Regel du auf welche Property mappst. Das heißt, hier erst wenn du Generate machst, ruft er die ganzen Sachen auf. Du ordnest hier zu Regel, zu Property. Das weiß er dann, aber da generiert er noch nichts.
Also hier generiert er keine Fake-Email. Die Fake-Email wird er wahrscheinlich erst hier generieren und hier wird er nachgucken, was hat er denn für eine Regel ausgewählt dafür. Also wahrscheinlich registriere ich hier einfach nur, dass für die Klasse User und für das Property-Mail diese Regel verwendet werden.
Ich meine, wir können ja mal reingucken, das schöne an Rider ist, wir drücken einfach Control, klicken drauf, aber man muss dazu sagen, das ist decompiled, das ist, ähm, der hat anscheinend wirklich Source-Code dafür, das sieht gar nicht mal so, so eklig decompiled aus.
Tja, jetzt kommen wir uns den Source-Code da vorne an und gucken, also was macht er? Property-Name for Invoke. Okay, der merkt sich das hier. Also der speichert sich das hier, was ich ihm übergebe und das ruft er dann später als Callback nochmal auf, würde ich mal sagen.
Ja genau, wie es genau intern funktioniert, weiß ich nicht. Keine Ahnung, hab ich schon nie angeguckt. Zumindest dieses U und U und äh, äh und F.
Äh, was wollte ich jetzt sagen, dieses U und F, überleg ich, wie könnte das funktionieren, ist echt eine gute Frage.
Excellent, alles klar, jetzt weißt du Bescheid, wenn du dir das anguckst. Ich mein, das ist die normale C-Sharp-Lambda-Sonntags, aber was, was könnte der da hinter der Haube machen?
Ich müsste echt da überlegen, was die da treiben.
Ich mein, das hier führt ja nicht gleich aus. Das hier ist ja nur die Kurzschreibweise von, ach ne, das geht gar nicht an der Stelle.
Warum geht das nicht, warum kann ich hier nicht die lange Schreibweise verwenden? Ach, das ist keine Lambda-Sonntags, ne, ne, ne, ne, ne, ne.
Das sind Expression Trees, das ist Big Brain Feature, das ist gar kein Lambda-Call, das ist, ähm, ach du Scheiße, ne, das kann ich nicht erklären, ich hab keine Ahnung, was der im Hintergrund macht.
Das ist kein Lambda-Aufruf, das sind Expression Trees, das ist quasi On-The-Fly C-Sharp-Code-Generierung oder sowas, was da im Hintergrund läuft.
Frag mich nicht, was der macht, keine Ahnung. Cheat95 oder wer das gefragt hat, Big Brain Frage, ich hab keinen Blasenschimmer, was die treiben.
Das sind Expressions, das sind keine, der generiert On-The-Fly irgendwelchen Code dann im Hintergrund dafür.
Krasser Scheiß, keine Ahnung, was das macht.
Es funktioniert. Okay, jetzt haben wir 500 User generiert mit Fake-Daten.
Ich überleg grad, ob wir noch ne Fake-Datenbank erstellen.
Ich hab mir können ne Fake-Datenbank erstellen und User reinschreiben, dann brauchen wir nicht immer, ähm, nicht immer das Neugenerieren beim Starten.
Das machen wir erst mal, das machen wir, wer stellt mal ne Fake, so SQlite oder sowas.
SQlite Entity, hallo?
Okay, Microsoft Entity.
Muss man da jetzt Punkt machen? N.
Core, SQlite, da ist es doch.
Warum muss man das, warum finde ich das nicht gleich?
So, bam, wir machen irgendeine Fake-Datenbank.
So, da machen wir uns aber gar keine große Arbeit damit.
Moin Rico, da machen wir uns gar keine große Arbeit mit.
Wir machen einfach ne Datenbank mit genau einem Endpunkt für User und, oder einem DB-Kontext mit einem Endpunkt für User und gut ist.
So, jetzt wird es erst mal wieder big-brainig, äh, wie konfiguriert man Datenbank nochmal aus dem Kopf in ASP.NET Core.
Ich glaub man sagt Services, add DB-Kontext.
Das muss man gleich, muss man gleich noch anlegen.
Ähm, ne, wobei, glaub das, das, das war's.
Hauptmehr musste man gar nicht machen.
DB-Kontext.
Den müssen wir anlegen, haben wir einen neuen Ordner.
Wollen wir ja ordentlich sein.
App, DB, Kontext.
So, und jetzt steh ich auf dem Schlauch, weil ich mir aus dem Kopf nie merken kann, wie man den Kram anlegt.
Zumindest weiß ich schonmal, wir wollen ein DB-Set.
Das hat jetzt keinen speziellen Grund, warum man das so macht, das muss man so machen, dass es funktioniert.
Äh, User, heißt Users.
So, und jetzt muss man ihm irgendwie noch sagen, dass wir SQLite verwenden sollen.
Da muss ich mal kurz abgucken, weil ich mir nicht merken kann, wie der ganze Krämpel funktioniert.
Guck mal kurz ab, Leute. Easy cheat.
Äh, App DB Kontext.
Aha, so funktioniert's.
Excellent.
Gut abgeguckt.
Ist die halbe Miete.
Will ich wissen, wie viele Leute Stackoverflow permanent copypasten.
Das hab ich jetzt einfach aus irgendwas, wo ich weiß, dass es funktioniert, genommen.
Also, dann schreiben wir mal in unsere Datenbank die ganzen Fake-User rein.
Und zwar machen wir das einmalig.
Und danach löschen wir's.
Dass er das anlegt, weil ich will nicht bei jedem Start Fake-User generieren.
So.
Das machen wir mal anders, diesen ganzen Krämpel machen wir hier oben.
So.
Also lass mir den Fake-User vor CraftQL ausprobieren.
So. Und nun sag ich mal, X-Database soll created werden.
Und dann sagen wir, Database-User-Add-Range, die ganzen Users.
Bam. Und dann CTX-Save-Changes.
Zack.
Oh.
Hast du schon mal eine 7S programmiert? Nein, was hat er jetzt für Schmerzen?
What the... Whoa.
Hab ich den verkehrt gemacht?
Ah, ich hab die ID vergessen von User.
Ah, das muss man machen.
Wenn man EF Core verwenden will und die ganzen Typen, die man EF Core speichern will,
die brauchen immer ein Feld, was ID heißt.
Wenn es das nicht gibt, dann mag er nicht.
So, jetzt funktioniert's.
Der generiert die automatisch, aber nur, wenn es ein Feld in der Klasse für gibt.
Weil, wo soll er es denn sonst reinschreiben?
Also, wenn du es abfragst, er könnte es unter der Haube machen.
Er könnte es unter der Haube Magic irgendwie machen.
Das wird vielleicht gehen.
Aber so ist es schöner. Da kann man sich die ID später auch ausgeben lassen.
Und man verwende die sogar relativ oft.
So, jetzt haben wir hier eine Datenbank.
Eine SQLite-Datenbank, data.db.
Da können wir uns auch mal angucken.
Da installieren wir mal den SQLite-Browser, oder wie das Teil heißt.
Genau.
Dann nehmen wir den SQLite-Browser zu und gucken uns mal an, was da drin steht.
Vorher schmeiße ich den Kram wieder raus,
weil ich will ja gar nicht, dass er das jedes Mal macht.
Also, SQLite.
SQLite-Browser-Data.db.
Schieben wir rüber und gucken uns mal an, was da drin ist.
Und da sind alle meine User.
Sehr gut.
Ost-Ivone-Land.
Das gibt es doch nicht.
Ach so, in Grönland. Alles klar.
So, und deswegen verwende ich auch EF Core, weil ich kein SQL von Hand schreiben will.
So, okay, wir haben jetzt eine Fake-Datenbank mit Fake-Daten.
Also nein, wir haben eine echte Datenbank mit Fake-Daten.
Und passt alles. Wunderbar.
Ich habe die Generierung auch wieder rausgeschmissen,
weil wenn ich die Generierung jetzt reinmache,
dann kriegen wir jedes Mal, macht er das jedes Mal noch mal.
Und das wollen wir ja nicht.
Das war ja gerade der Sinn, dass wir die Generierung einmal gemacht haben.
So, und jetzt können wir wieder eigentlich eine Sache anfangen.
Jetzt können wir uns mal anschauen, wie das mit GraphQL funktioniert.
Wie gesagt, ich habe das vor einer Weile schon mal ein bisschen verwendet.
Aber es gibt mittlerweile drei neue Versionen oder sowas von der einen Library,
die ich verwenden werde.
Und keine Ahnung, wie es genau funktioniert.
Also, als Library werden wir das hier verwenden.
Es gibt wohl zwei GraphQL Libraries für.NET.
Die habe ich schon mal verwendet.
Aber es gibt auch noch GraphQL.NET.
Aber ich habe mir sagen lassen,
oder ich habe gelesen damals, wo ich mich damit beschäftigt habe,
als ich mal für dieses eine Projekt verwendet habe,
dass hier wohl irgendwie das geilere Zeug läuft.
Keine Ahnung, ob das stimmt.
Beliebtheit ist das hier auf jeden Fall höher auf GitHub.
Aber die scheint irgendwie bei den Hackermans beliebter zu sein.
Keine Ahnung.
Wir werden die hier verwenden, weil die habe ich schon mal verwendet.
Da weiß ich prinzipiell über den Kram konfiguriert.
Und das Schöne ist, die haben auch gleich eine Spielwiese dabei,
wo man das mal ausprobieren kann.
So, also, haben die irgendwie sowas, was man hier hinzufügen muss?
Was sind denn das für Namen?
Was sind denn das für Namen?
Banana Cake Pop.
Green Donut.
Hot Chocolate.
Marshmallow.
Das klingt ja fast wie Android-Namen.
Strawberry Shake.
Wat da?
Banana Cake Pop, Alter.
Oh, die Rhythmie ist gut.
Aber gut, dass ihr das verlinkt habt.
Ohne hätte ich jetzt nicht Bescheid gewusst.
Ja, Kengi, wir probieren ein bisschen aus.
So, also wir installieren erst mal die Library.
Zack.
Alter, komm her.
Tritt mal deine Maus los.
Hot.
Keine Hoten Grills.
Hot Chocolate.
Tja, was muss man da alles installieren?
Wolltest du nicht den YouTube-Adventskalender machen?
Was soll ich jetzt zum ersten Mal?
Kommst du denn auf sowas?
Doch, doch, doch, ich weiß, ich weiß.
Hatte ich eigentlich vor, aber ich habe nicht genug Videos gemacht.
Ich habe auch gesagt, ich habe es schon ganz am Anfang gesagt,
wenn ich nicht wirklich die Videos fertig habe, mache ich es nicht,
weil ich dann Bock habe, dass es nach einer Woche einfach abrupt wieder aufhört.
Oder ich habe nicht genug Videos gemacht.
Aber ich habe ein neues Video aufgenommen,
das ich wahrscheinlich dann am Wochenende hochlade.
Erst mal installieren.
Ja, ich habe ein neues Video aufgenommen.
Ich habe mir ein paar Sachen rausgepickt aus dem letzten Black Friday Video,
wo die Leute gefragt haben, zum Beispiel das mit den China-Shops.
Dass man ja das erzollt, dass diese Freigrenze nicht mehr gilt
und dass man angeblich am nächsten Jahr nicht mehr gescheit in China bestellen kann und sowas.
Ich muss schon mal sagen, dass ich schwach bin.
Natürlich kann man in China bestellen, gerade wenn man EU-Priority-Line bestellt,
ist es gar kein Problem.
So, Kengin sagt, benutze auch seit paar Tagen Rider,
ist tausendmal besser als Visual Studio, auch wenn es in Java programmiert ist.
Ja, das ist das einzige, was mir auf den Sack geht,
aber ganz ehrlich, davon merkt man ja nichts.
So, wir müssen mal in den Blog-Eintrag von denen gucken.
CraftQL, weil die haben ein Beispiel drinne für CraftQL 11,
weil das ist erst vor sieben Tagen oder so rausgekommen.
Also, wo steht denn drinne, was wir machen müssen?
New Configuration AP, Services, Add CraftQL Server, Add Query Type.
Exzellent, das machen wir.
Da.
Ich weiß zwar nicht genau, was es macht, aber das machen wir.
Was ist heute das Ziel?
CraftQL ein bisschen ausprobieren.
Ich habe eine Datenbank erstellt mit Fake-Usern und dann fragen wir das ein bisschen ab.
Ich glaube nicht, dass das ewig lang dauern wird,
weil wie gesagt, ich habe das vor einer Weile schon mal verwendet und das war relativ einfach vom Setup her.
Und ich war damals echt begeistert, was Out of the Box für Riesen-Funktualität dabei ist,
ohne dass man Zeug programmieren muss.
Wie gut kennst du dich mit JS-Frameworks aus?
Gar nicht, weil es gibt nahezu unendlich viele JS-Frameworks.
Das heißt, meine Quote des Auskennens ist nahe Null.
Wenn du mich konkret fragst, mit welchem, dann kann ich dir vielleicht was zu sagen.
Aber ansonsten, es vergeht ja nicht einen Tag, wo irgendwelche JS-Frameworks kreiert werden.
Okay, warum geht das hier nicht?
Was hältst du von Ember.js?
Was ist das denn?
Das ist tatsächlich eine gute Frage.
Ich habe Ember mal vor 5 Jahren oder so ewig her verwendet.
Da war das noch relativ oder noch länger.
Das muss noch länger her sein.
Das war bestimmt 2012 oder 2013.
Das ist ganz, ganz lang her.
Da war das noch ziemlich neu und ihre komische Ember-Data-Geschichte war auch noch nicht da.
Ich fand es extrem wirr und kompliziert.
Dafür habe ich gelesen, dass Ember mittlerweile wohl so ziemlich alles built-in hat, was man braucht.
Ich fand es damals echt wirr und unnötig komplex.
Ich bin damit nicht warm geworden.
Aber Ember ist auch nicht großartig angesagt mehr.
Also wenn du Frontend-Frameworks sucht, es gibt eigentlich nur 3 Frontend-Frameworks, die so allgemein angesagt sind zurzeit.
Das ist Angular, React und Vue.js.
Es gibt noch 1.000 Milliarden andere JavaScript-Libraries, aber das sind halt die 3, die angesagt sind.
Schon auch die letzten paar Jahre.
Sorry für die Random-Frage. Warum?
Random-Frage ist das Beste.
Sorry für die Random-Frage, weil wie gesagt, ewig dauert das heute auch nicht mit dem GraphQL-Auspringen.
Sorry für die Random-Frage. Heute kam mein Node-MCU.
Oh, das ist schon mal ein Fehler. Du hast nur eine bestellt. Wenn du das nämlich kaputt machst, dann ist das Ding erst mal im Arsch.
Deswegen bestelle ich immer mindestens 3-bar solche Sachen.
Heute kam meine erste Node-MCU und ich will das Teil mit der Arduino...
Würde ich nicht machen, würde ich nicht machen.
Arduino IDE suckt.
Das Programm soll sich die 3-bar von GitHub ziehen, aber das ist unfassbar.
Ja, ich habe einen Tipp. Verwende Platform.io.
Verwende das hier.
Die Arduino IDE suckt einfach so extrem.
Arduino IDE ist monarch-s-extrem.
Das Ding hat keine Code-Completion. Ist total wirt zu bedienen.
Nehm das hier.
Ist einfacher als Arduino IDE.
Und funktioniert mit Visual Studio Code.
Hat alles, was du so brauchst. Nehm das hier.
Und er hat einen Library Manager eingebaut.
Oh, jetzt wird es advanced. Ja, da kann ich dir was zu sagen.
Sobald ich weiß, nur die ref countet, weil die schreiben auch in ihrer Doku an allen Stellen, dass es zwei Möglichkeiten gibt, das Ganze anzulegen.
Entweder mit eigenem Buffer oder beim Reinschreiben in das Package, dann automatisch erstellen.
Und wenn du automatisch erstellst einen Buffer machst, dann musst du es unreffen.
Nur wenn der reference-counter auf Null fällt, wird es automatisch aufkommen.
Wenn du einen eigenen Buffer hast, bin ich mir relativ sicher, musst du das von Hand freen.
Ich habe das noch nicht ausprobiert, aber ich bin mir da zu 900% sicher.
Weil da schreiben die auch überall, dass man sich ja selbst darum kümmern muss.
Außerdem gibt dir Unref gar nicht wirklich frei.
Und dein manuell allocateden zu reference-counten wird schwierig, weil der ist ja nicht intern bei denen erstellt.
Die manuell erstellten Buffer gibst du mit dem frei, was du benutzt hast zum Anlegen.
Also wenn du New verwendet hast, weil es C++ ist, dann machst du Delete.
Wenn du Malloc verwendet hast, dann machst du einen Free.
Und wenn du etwas anderes verwendet hast, dann machst du es damit.
Also wie gesagt, es gibt eigentlich so die zwei Sachen.
Wenn es C++ ist mit New, dann machst du Delete und ansonsten machst du Free.
Man kann wahrscheinlich beides mit beidem machen, ehrlich gesagt.
Aber es ist C++ und C++, da weiß man nie so genau.
Vor allem bei C++ weiß man nie so genau, was da passiert.
Aber du musst dann am Ende, glaube ich, AV-Free oder Package-Free machen, wenn es nicht reference-counted ist.
Bin ich mir jetzt aber nicht ganz sicher.
Übrigens, fall nicht in die gleiche Falle wie ich.
Es gibt nämlich AV-Package-Free und es gibt, pass mal auf, das ist total Fail.
Package-Free, es gibt AV-Package-Free und AV-Free-Package.
So.
Also wer sich das ausgedacht hat, weiß ich auch nicht.
Aber du musst AV-Package-Free verwenden und nicht AV-Free-Package.
Alles klar?
Will den AV-Frame selber behalten?
Ach du hast den Decode-Stun.
Ja gut, das macht ja nichts.
Also der Buffer vom Package ist unabhängig von dem Buffer vom Frame.
Ach so, da müsste ich jetzt im Detail gucken.
Der AV-Frame ist ja das Decodete dann.
AV-Package ist ja das komprimierte Bild und AV-Frame ist ja quasi das Decodete.
Oder?
Bin ich jetzt durch oder war es umgedreht?
Nee, nee, ich glaube so war es.
So, also warum kann ich jetzt hier kein GraphQL Server adden?
Ah, ich weiß warum, weil ich noch glaub das ASP-Package hinzufügen muss.
Exzellent.
Jetzt geht's, sehr gut.
Create QueryType, machen wir hier irgendwie Data.
Neuer Ordner.
Nein, nein, nicht neues File.
Das Exzellent war richtig ASMR.
Das war nicht beabsichtigt, aber ich bin ja immer froh, wenn ich dem Stream neue Facetten
abgewinnen kann und dann war das halt ein ASMR Exzellent.
So, jetzt müssen wir GraphQL Ordner anlegen.
Und da machen wir jetzt eine Klasse drin, die sich Query nennt.
Query, Query heißt es ja.
So, gut und jetzt muss ich in das Beispiel gucken von denen.
Oder?
Nee, nein, du sollst Mines included.
Ja, so.
Jetzt muss ich nämlich nochmal in den Blog Eintrag von denen gucken.
Also falls du noch Fragen hast hier, ich weiß nicht mehr genau wer es gewesen ist mit
Platform HIO oder so, schieß los, wie gesagt.
Oder du kannst doch mal im Stream Archiv gucken, wir haben ein paar Mal Microcontroller
Zeug schon programmiert mit Platform HIO.
Aber Platform HIO ist relativ einfach.
Du installierst Visual Studio Code und die Platform HIO Extension und das war's.
Der Rest ist dann recht selbst erklären.
So, ich muss in den Blog Eintrag gucken, wie das jetzt weitergeht.
Also add GraphQL Server, Query.
Was ist das?
Da hat eine Agar IOU zu viel gespielt.
Nee, warte mal, Agar IOU war das mit den Punkten.
Wie hieß das IOU Game mit den Schlangen?
Slither IOU, genau, Slither IOU hat da zu viel gespielt.
Nee, das Copy Paste ich nicht, ich lasse das erstmal so wie es ist.
Genau, das hier habe ich gesucht.
Wie kann man denn den ganzen Kram jetzt Endpoints Map GraphQL?
Genau, das brauchen wir.
Endpoints Map GraphQL.
So, und wenn ich jetzt alles richtig gemacht habe, sollte ich jetzt die Testseite von denen sehen.
Probieren wir das mal aus.
5.000 GraphQL.
Oh, guck mal, Banana Cake Pop.
Gut, wir haben Banana Cake Pop am Start, da bin ich ja froh jetzt.
Oh, failed, failed, aber okay, die Testumgebung geht zumindest schon mal.
Aber auch wenn sie failed, failed, failed ist, okay, failed, failed, failed.
Fetching Schema, failed, failed.
So, ich glaube, man muss mir nämlich noch hier angeben, was man machen will.
Gibt es da irgendwie noch ein bisschen Beispiel Code für MonkaS?
Eye Query muss ich machen.
Tja, Moment, ich gucke mir das mal aus dem anderen Projekt kurz ab.
Easy, was wir da gemacht haben.
Guck mal her, Data, GraphQL, Query.
Wir haben da sowas gemacht, guck mal.
Die Mucke ist glaube ich nein, das ist London Farm, ist das London Farm oder ist das?
Ach nee, ist Kakariko Village, nicht London Farm.
Das ist ja aus irgendeinem Zeller.
Das hier, Customer, User.
Jetzt brauche ich Zugriff auf meinen DB Kontext, geht das denn jetzt so?
Wie ist das?
Ja, included müssen wir da nichts.
So, gucke ob das jetzt Funst, was ich da gemacht habe.
Was ist deine Meinung zu Visual Studio Code?
Der beste von den ganzen JavaScript Editors ist es.
Das funktioniert nicht, irgendwas hat sich geändert.
Seit der letzten Version, wo ich das verändert habe.
Die Playlist, das ist hier.
Come and Happy Nintendo Games Music to start the day.
Warum geht denn das jetzt nicht? Ich habe das eins zu eins aus was Funktionierenden kopiert.
Die wollen mich rollen, Alter.
Hat der Probleme mit dem Entchecken von dem DB Kontext irgendwie?
Moment.
Die müssen auch noch einen Example für haben.
Was soll denn das hier? Moment.
Docs getting started.
Eye Queryable ein.
Schau mal mit einem Neustart probieren. Stopp, das wird es nicht sein.
AP Reference gibt es nicht.
Ah.
Was wollen die hier? Ich brauche Beispiel Code Leute, ich brauche Beispiel Code.
Die haben doch bestimmt einen Example.
Sample Projects.
Examples.
Workshop.
Source.
Chocolate.
Refql Workshop, das klingt gut.
Code.
Session 8.
Alter jetzt.
Jetzt übertreibt.
Jetzt übertreibt man nicht mit Beispiel Code. Ich will einfach nur irgendwie.
Sehen, wie man das anlegt.
WTF.
Ja, übertreibt es halt mit Beispiel Code.
Moment, was ist das?
Das ist mir zu Big Brain.
Ah, guck mal hier, die injecten sich da irgendwas.
Ok, ich habe.
WTF haben die denn da gemacht?
Das war total easy in der letzten Version, wo ich das verwendet habe.
Du hast den DB Kontext inject und kannst das Ding verwenden.
What the hell, was ist das?
Das ist Hyper Big Brain C Sharp Code.
Ich Copy Paste mir das mal kurz rein.
Ok, Use Application Kontext kann ich schon mal gar nicht injecten.
WTF, was ist das?
Ich kriege Anfälle.
Ok, also.
Ok, wir wollen Users.
Achtung.
Ich bastel jetzt einfach irgendwas zusammen, von dem ich denke, dass das funktioniert.
Nein, Constructor Injection funktioniert nicht.
Constructor Injection ist irgendwie kaputt.
Vielleicht habe ich was nicht registriert oder so.
Constructor Injection mag nicht.
Ok, ok, ok.
So, und jetzt?
Ach so, Service.
Ok.
Ha, mal gucken, ob das jetzt geht.
Warte mal ab.
Easy, Bam.
Ich weiß zwar nicht, was zum Teufel ich da jetzt genau gemacht habe, aber es geht.
Wie wir alle wissen, sobald es kompiliert ist es ja prinzipiell in Ordnung.
Da kann es ja keine Fehler mehr geben danach.
Ok, sehr schön.
Also, ich weiß, was ich gemacht habe, aber ich habe keine Ahnung, warum es jetzt funktioniert
und das andere vorher nicht funktioniert hat.
Gut, es funktioniert.
Ich bin zufrieden, alles klar.
So, und jetzt kann ich euch mal was richtig Geiles von CraftQL zeigen.
Zumindest, was mich das letzte Mal übelst beeindruckt hat, dass das mit drei Zeilen
config out of the box drin ist.
Und zwar im Vergleich zu den normalen Rest-API, wo man dann abfragen kann, index, push, get,
ne, ich fasse hier nicht index, index, update, delete, und was gibt es noch?
Index, update, delete, update, ne, index, delete, index, delete, update, putt, putt gibt es
glaube ich noch.
Schöne, was ich gehabt habe.
Das habe ich noch vergessen.
Na ja, egal.
Zumindest, wenn man mit einer Rest-API auf einzelnen Ressourcen, ganz gut arbeiten kann,
ist CraftQL deine Nummer advanceder.
Und zwar, was richtig geil ist.
Ich habe ihm jetzt ja gesagt, okay, wenn, oder ich habe ihm ja hier quasi gesagt, was
man abfragen kann.
Aktuell gibt es ja nur eine User Collection, die ich abfragen kann.
Aber, wenn ich jetzt neu bin, oder zum ersten Mal hier quasi diese CraftQL-Sache aufmachen,
kann ich hier unten auf Schema gehen, und da zeigt mir an, was ich alles abfragen kann.
Also, so ein bisschen wie so eine eingebaute API-Doku.
Könntest du mal zeigen, wie man eine Applikation mit einem Active Directory oder ähnlichem anbinden
kann?
Nein, habe ich noch nie gemacht.
Also, mich da zeigt einem an, was man jetzt hier abfragen kann.
So ein bisschen wie diese Swagger-Geschichte, die wir uns am Anfang angeguckt haben.
Aber, und jetzt wird es advanced.
Ich habe sogar autocomplete.
Ich habe autocomplete für meine Queries.
Also, ich will Sachen abfragen.
Und zwar, ich habe zur Auswahl.
Okay, ich habe nur Users zur Auswahl, aber ich habe autocomplete.
Ist das nicht ein schöner Baukasten für Abfragen zusammenbauen?
So, ich will Users abfragen, und von Users möchte ich abfragen, ne, falsch gemacht,
geht es so.
Genau.
So, und von Users will ich abfragen.
Also, der sagt mir sogar, was ich abfragen kann vom User.
Adresse, ID, Mail, Name, Phone.
Ich nehme alles, also ich will Adresse abfragen, na, ID, ID, okay, Mail, Name und Phone.
So, und jetzt führe ich das Query aus, und zack, da sind alle meine User.
Das ist mal easy as fuck im Vergleich zu einer Rest-API.
Okay, dieser Schritt ist bei einer Rest-API auch einfach.
Bei einer Rest-API sagst du einfach Index auf die Ressource und da kriegst du auch sowas in der Richtung wieder.
Aber, was richtig nice ist, man kann jetzt, und das muss ich aber erstmal hinzufügen,
also das erste, was jetzt schon mal richtig nice ist an der Geschichte ist,
ich kann Sachen weglassen.
Also sprich, wenn ich irgendwas nicht brauche, mal angenommen,
ich brauche nur die Mail von den Usern, da lasse ich alles andere weg und ich krieg auch nur die Mail.
Was das Ganze natürlich viel schneller macht.
Datenjoin kann ich nicht so richtig, ich kann nur, wenn mein User-Typ, also bisschen geht das,
wenn mein User-Typ, beispielsweise noch einen, sagt man mal irgendwas für einen User,
was brauchen einen User als extra Klasse hier.
Das ist quasi so eine Art SQL für API-Abfragen, ja.
Ups, was mache ich denn hier?
Hast du dich mit dem Inventar-Programm noch weiter auseinandergesetzt?
Ja, ich habe jetzt Snipe bei mir daheim laufen und probiere das erstmal aus.
Snipe it, Snipe it. All Posts, Posts oder Standards, Standards Zeug.
Cute Points hat der User und die hat eigentlich bloß hier Count.
Ah nee, Int.
Also, so der User hat noch Cute Points, das ist ganz wichtig, das brauchen wir unbedingt.
Und, ähm, ich überlege gerade, ob das überhaupt funktioniert.
So, und die kann ich jetzt abfragen, über CraftQL.
Das wird erstmal, wie geht das hier, na, da, japp.
So, und jetzt kann ich hier sagen, ok, Cute Points.
Und jetzt kann man Cute Points zusätzlich noch abfragen.
So als Unterding von Users.
Und da kann ich jetzt den Count noch mit abfragen.
Aber, und das Coole ist, das behält auch hier, oh nee.
Oh, hab ich verkehrt gemacht.
Ah, ich weiß, was ich verkehrt gemacht habe.
Cute Points wird nie gesetzt.
Ok.
Äh, wir lassen das jetzt mal aus, weil da müsste ich in die Datenbank jetzt noch Cute Points hinzufügen.
Wobei, nee, wir können einfach sagen, gleich, new, geht das, new, Cute Points.
Das, muss mal ausprobieren, ob das jetzt funktioniert.
Verneuladen.
Ne.
Ok.
Äh, er mag das nicht.
Es ist ja auch kein Feld aus der Datenbank, was er abfragen kann.
Na gut.
Wenn er es nicht mag, dann mag er es nicht.
Ich will jetzt die Datenbank nicht nochmal anpassen, dass es funktioniert.
Was hat er denn für Schmerzen, woran stört er sich dann?
Unexpected Execution Error.
Der kann den Kram irgendwie nicht richtig serialisieren, vermute ich mal.
Warum auch immer.
Aber du so richtig joinen kannst du nix.
Also du kannst nicht sagen, hier aus fünf Tabellen und dann, wo Key der gleiche ist und sowas.
Du kannst aber filtern.
Das ist jetzt das, was ich eigentlich zeigen wollte.
Also das erste coole Feature ist ja schonmal, dass man Sachen weglassen kann, wenn man was abfragt.
Oh.
Ich glaube, ich habe meinen User Typ kaputt gemacht, dadurch, dass ich Cute Points hinzugefügt habe.
Ok.
Mag er wohl nicht.
Cute Points Outdate Overrated Debated.
Darf ich jetzt wieder?
Ah, jetzt darf ich wieder, ok.
Also das erste coole ist schonmal, dass man Sachen weglassen kann, wenn man was abfragt.
Das erste coole ist schonmal, ich habe die Autocompletion verwendet.
Also sprich, das ist schon richtig.
Der macht wahrscheinlich automatisch den ersten Buchstaben klein, weil das JavaScript Convention ist.
Aber das erste coole ist schonmal, dass ich Daten sparen kann und generell die Größe auch von den Sachen, die ich abfrage, indem ich nur das abfrage, was ich abfragen will.
Das ist schonmal ganz praktisch.
Aber was richtig cool ist, und was wir auch in diesem einen Projekt verwendet haben, ist, man kann total einfach, und das ist wirklich absolut ätzend mit Rest zu machen, man kann sortieren und filtern.
Und das Ganze total einfach.
Man kann nämlich einfach sagen, du musst bloß mal gucken, was ich hinzufügen muss dafür, Use Filter oder irgendwie sowas.
Aber dazu muss ich erstmal etwas hinzufügen, Hot Chocolate Filter, Type Filters.
Was war das, was haben wir da zur Auswahl, vielleicht kommt mir irgendwas bekannt vor.
Runtime, Typ, Selections, Data.
Ich glaube, ich glaube es war das hier, was man hinzufügen muss.
Ist der Rechenaufwand für den Server dadurch gewaltig größer? Nee, das funktioniert ziemlich gut.
Das funktioniert ziemlich gut. Use Filter. Use Filtering, genau, Use Filtering war es.
So, und mehr muss ich nicht machen, um jetzt richtig gut filtern zu können beim Abfragen.
Also wer schonmal versucht hat, solche Filter-Sachen über Rest zu machen, das ist wirklich eklig.
Du musst zig Parameter übergeben, eventuell noch irgendwelche Paging-Geschichten machen.
Dann musst du teilweise noch sortieren, aufsteigen, absteigen, mit der Suche und so. Es ist absolut eklig.
Und das hier ist eigentlich das hier richtig cool gemacht.
SQL in Query Parameter. Oh, das ist auch Big Brain.
So, wir fragen jetzt noch mal alles ab, alle Sachen von unserem User-ID. Was heißt der Name? Adresse? Phone? Mail?
Und jetzt kann man suchen. What the hell?
Ah, ich habe glaube ich noch vergessen, das hinzuzufügen. Man muss eben noch sagen, dass man filtern, filtern will.
Filter, Add Filter, genau, so, jetzt geht's.
Komm ich mal, so. Bam, so. Und jetzt, da ist die Syntax aber ein bisschen, da ist mein Brain zu klein.
Ich glaube die Syntax kriege ich nicht gescheit gebacken.
Also man konnte jetzt hier sagen, Where? Direkt eingebaut, Where? Und jetzt verlassen wir uns mal auf die Autocompletion.
Uh, Where? Okay, sagen wir mal, Mail? Wir wollen jetzt, okay, also, irgendjemand zu uns sagt, hey, wir wollen das so filtern, dass jetzt nur Gmail,
dass nur User mit Gmail-Adresse ausgegeben werden. So, und das ist schon mit Rest ein bisschen größerer Akt.
Du musst dann erstmal einen Filter, okay, ein Parameter mit Rest noch, aber es ist auf jeden Fall nicht schön.
Du musst dann erstmal einen Parameter übergeben, dann musst du es auf deine Datenbank holen, musst das Ganze filtern,
musst dann auch gucken, ob vielleicht irgendwie im Frontend Option gesetzt ist für aufsteigen, absteigen und das dann in die richtige Reihenfolge filtern und was auch immer.
Das brauche ich hier alles nicht, das ist alles schon eingebaut.
Ich kann zum Beispiel jetzt sagen, also, Where? User? Mail? Ich glaube jetzt muss man wieder einen Doppelpunkt machen.
Und dann kann man sagen, äh, ja, ich bin zu Low-Brain für die Filter, aber irgendwie so ging das.
Was hat denn der für Schmerzen? Where? Vielleicht muss ich erstmal refreshen. Ah, jetzt funktioniert es.
Ah, jetzt kann ich nämlich auch, also, jetzt kann ich nämlich sagen, also, ich will nur den User haben, wo die Mail, wo die Mail, äh, endet mit, endet mit, ähm, wie macht man das jetzt so?
Gmail.com. Nee, ohne. So, und jetzt kriege ich nur User, die mit Gmail.com enden, E-Mail-Adressen. Guck mal, das ist easy as fuck, das ist übelst geil.
So, und warum ich mir das jetzt Ganze angucke, ähm, also ich finde schon, gerade wenn du mehrere Sachen filtern willst, finde ich, ist das mit Rest eklig.
Du musst dich Parameter übergeben, du musst das, vor allem musst du die Suche und das Filtern selbst machen. Du musst dich um Sachen kümmern, wie ob es aufsteigen oder absteigend ist.
Dann auch eventuelle Filterlogik selbst machen, hier hast du ja relativ viel eingebaut. Also mir graust es immer davor, wenn mir irgendein Suchfeld oder so basteln soll mit Rest.
Ich finde das sehr praktisch hier. So, und das ist wirklich praktisch. Du sagst jetzt einfach, ey, gib mir alle User, wo die E-Mail-Adresse mit Gmail.com aufhört.
Ich meine, viel einfacher kann das nicht sein. Und was man nicht vergessen darf, wir haben keine einzige Zeile Logik dafür programmieren müssen.
Wenn ich das jetzt mit einem Controller machen würde über Rest, so, dann müsste ich erstmal einen Controller anlegen, dann müsste ich mir hier irgendwie einen Endpunkt basteln.
Also irgendwie, was weiß ich, irgendwie einen Endpunkt, den man irgendwie filtert, immer.
So, dann müsste ich jetzt irgendwie keine Ahnung, was auch immer, nach was kann man da jetzt filtern? Na, keine Ahnung. Name, Mail.
So, und dann müsste ich quasi hier selbst drinne filtern, dann muss ich erstmal einen Data Context injecten.
So, Ups, User, Swear, User, Mail, Mail, irgendwie Contains oder sagen wir mal Ends mit dem hier.
So, das müsst ihr halt alles selbst machen. Also ich finde das viel praktischer. Das brauchen wir alles nicht. Wir brauchen keine eigene Logik und nichts.
Natürlich, wenn man was komplizierteres machen will, was da nicht drin ist, muss man auch wieder eigene Logik basteln. Na, das ist ja logisch.
Aber das kann nicht alles sein lassen.
Man muss ja auch um die Reihenfolge keine Gedanken machen.
Fuzzy Full Text, oh ja, ist auch toll. Es gibt ja schon ein paar ganz fertige, ein paar ganz gute fertige Frontend Sachen für so Type Ahead Geschichten.
Aber ich finde es halt im Backend ätzend zu machen. Aber wie gesagt, ich bin ja auch kein großer Web Anwendungsprofi.
Captain Seacast, falls du da schon mehr gemacht hast, vielleicht ist es wirklich easy as fuck mit Rest. Ich finde es halt so einfach angenehmer.
Und was ich da dran halt cool finde ist, außer diese Sache hier angelegt, mussten wir nichts machen.
Das ist der einzige Code, den wir dafür basteln mussten. Use Filtering dran schreiben, fertig.
Ähm, wäre mal interessant, wie performant das Ding mit einer großen DB ist. Das ist ziemlich gut.
CraftQL wurde von Facebook für ihre Mobile App erfunden, weil die zu lahm war.
Also das ist schon auch dafür gedacht, dass es ordentlich flutscht.
Ich habe es aber ehrlich gesagt noch nicht ausprobiert. Also ich habe jetzt noch keine CraftQL-Geschichte gemacht mit Riesen-Datenbank. Aber auf der anderen Seite.
Ich meine, guckt mal. Wir können ja mal ein bisschen mehr in die Datenbank reinschreiben.
Und ähm, ja. Wo habe ich denn hier meinen? Ich muss mal kurz. Oh nee, ich habe es nicht mehr drin.
Aber da ist es doch. Ich wollte gerade sagen, wir können ein cooles Feature von Ryder verwenden.
Wir haben nämlich History. Wir haben nämlich eine History.
Wer das noch nicht kennt, muss ich euch mal zeigen. Das ist absolut Poggers, was die eingebaut haben.
Also, ähm, wir können auch zwei Millionen Daten setzen, aber gar kein Ding.
Also, ähm, man hat ja in so ziemlich jedem Editor die Möglichkeit zurück, also undo, redo zu machen.
Aber was die in Ryder eingebaut haben, ist wirklich ganz nice.
Äh, Local History. Und dann sieht man, ich schiebe es mal kurz rüber auf einen anderen Bildschirm.
Äh, auf einen anderen Desktop.
Da siehst du quasi die letzten Tage, Wochen, wie auch immer, wie es eingestellt ist.
Alle Edits von dem File. Ähnlich zu einem Div in Git. Und das Ganze ohne Versionsverwaltung drunter.
Das ist wirklich nice. Hat Eclipse auch, ja gut, irgendein Vorteil muss Eclipse ja haben.
Aber Visual Studio hat es zum Beispiel nicht. Und das ist ein super Feature.
Was mir persönlich dabei fehlt, ist noch die Möglichkeit, es durchsuchen zu können.
Man kann das hier zwar durchsuchen, aber man kann nicht alle Sachen durchsuchen.
Das wäre richtig pro, wenn man das noch durchsuchen könnte.
Oder vielleicht weiß ich noch nicht, wie es geht, aber ich habe mal gesucht und es gab auch keine, ähm, Antwort da drauf.
Ich habe ein paar Leute auch als Feature gefragt, aber anscheinend kann man das nicht durchsuchen.
Man kann nur hier lokal durchsuchen.
Also die Lokalhistorie ist wirklich praktisch.
Kannst du da jetzt jede Datenbank dran klatschen?
Ja, du kannst da theoretisch jede Datenbank dran klatschen, die Entity Framework kann.
Oder nee, stimmt gar nicht.
In dem Fall verwende ich jetzt mehr Entity Framework, aber die Collections hier kannst du von alle möglichen zurückgeben.
Also du kannst das mit jeder x-beliebigen Datenbank verwenden, ja.
Ich meine, wenn Entity Framework die jeweilige Datenbank unterstützt, ist es halt einfacher.
Und wahrscheinlich auch eine ganze Ecke performanter, weil die halt nicht einfach nur komplette Antwort und Filtern,
sondern halt wirklich Datenbank selectmäßig filtern können hiermit.
Aber prinzipiell kannst du da jede Datenbank dafür verwenden, ja.
Okay, wir legen noch mal ein bisschen mehr Datensätze an.
Ich hab doch hier gerade die Sachen rauskopiert.
Wir machen mal ein bisschen mehr, also.
Database, okay, wir löschen die Datenbank vorher mal.
Ich meine, es ist jetzt nur eine SQLite, aber ich finde SQLite ist eh besser als sein Ruf.
Gerade für so lokale Sachen ist SQLite sehr, sehr zackig.
So, okay, also wie viele Sachen legen wir mal an?
Also wir haben jetzt 500 angelegt.
Was sollen wir, 2 Millionen?
1, 2, 3, 4, 5, 6, bam.
Das dauert jetzt kurz.
Das dauert jetzt ein bisschen.
Schauen wir mal.
Ja, okay.
Der faked jetzt halt ein bisschen, ne?
Der muss jetzt erst mal 2 Millionen Fake-User erstellen.
Wie sieht eigentlich unser RAM-Verbrauch so aus?
Wie sieht eigentlich unser RAM-Verbrauch so aus, zeigt mal her.
Oh, okay.
Der braucht viel zu lange, jaja.
Ich weiß auch nicht, warum der so lange braucht.
2 Millionen ist normalerweise gar kein Ding.
Also doch, aber nicht so ein Ding.
Ich glaube, ich weiß, woran das liegt.
Ich könnte mir vorstellen, dass dieses Add Range hier nicht sonderlich geschwind ist.
Das könnte man bestimmt optimierter machen.
Wobei, ne, das ist okay.
Ich meine, was wäre die Alternative nach jedem User?
Saven wäre ja auch der Witz, ne?
Aber jetzt scheint er zu schreiben in die Datenbank.
Okay.
Ja, der ist jetzt fertig generieren.
Ja, mal gucken, wie groß das Ganze ist.
Ich meine, 2 Millionen am Anfang erst mal rein ist halt auch ein bisschen was.
Dann gucken wir mal, wie schnell es ist.
Okay, dann muss man aber sagen, wenn ich 2 Millionen Einträge habe,
dann ist aber schon mal keine allzu gute Idee, alles abzufragen.
Aber das machen wir mal.
Dann closed sich wahrscheinlich der Browser, weil er out of memory ist.
Kann Faker multithreading?
Also anscheinend nicht.
Ach so, ne, jetzt ist auch der Datenbank write.
Der Datenbank write in SQLite ist definitiv nicht multithreaded.
1, 3, 3, 7, ich würde mal sogar vermuten, dass der das mit einer Transaction unter der Haube macht.
Ich meine, der wird ja wohl nicht hingehen und sagen insert, insert, insert, insert, insert, insert.
Der macht ja bestimmt nicht 2 Millionen Inserts da jetzt.
Okay, er ist fertig.
Excellent.
Okay, 208 MB Datenbank, das geht ja noch.
Dann schmeißen wir den Scheiß hier mal wieder raus.
Mal gucken, ob SQLite Browser jetzt abkackt, wenn ich das aufmache.
Nicht ohne ich weitermachen.
Hey guck mal, der ist so macht das richtig.
Der lädt einfach die Datensätze, die man sieht.
So muss das sein.
Okay, wir haben 2 Millionen Sachen drin.
Sehr gut.
Excellent.
Wir haben aber keine Relation Geschichten.
Also wir haben einfach nur stinknormale Objekte drin ohne irgendwas.
Ich meine, wir könnten jetzt noch mal ein paar Verknüpfungen einbauen.
Okay, wir starten jetzt erst einmal und schauen, wie schnell das Ganze ist.
Mit 2 Millionen Daten setzen.
Ich kann euch gleich sagen, der Browser wird jetzt erst mal friesen wahrscheinlich, weil ich frag alles ab.
Ich frag nur die Sachen mit Gmail ab.
Okay, das ist schon mal ist schon mal nicht so wild.
Der muss ja wirklich.
Okay, dadurch sucht jetzt 2 Millionen Datensätze.
Easy.
Aber so richtig, der richtig durch greppt das Ganze jetzt.
Fertig.
Das ging.
Das geht.
Ich meine, der konnte ja noch nicht mal.
Der hat das wahrscheinlich nicht mal noch nicht mal irgendwie ein Index oder irgendwas da.
Bringt einem ein Index überhaupt was?
An der Stelle.
Meine ends with Operation bringt einem dann ein Index was?
Ich meine, da müsste ich, ich muss reingehen in jeden Datensatz und gucken.
Also wozu, wozu ein Index, ja?
Startet mit könnte den Index was bringen.
Aber startet mit könnte insofern was bringen, weil, weil wenn es eine sortierte Liste ist,
dann weiß ich, ab wo ich anfangen muss zu gucken, wenn ich startet mit mache.
Endet mit nicht, aber startet mit könnte es tatsächlich was bringen.
Hör mal.
Alter, die Yoshi Musik, guck mal, schon fertig das Query.
Bäm, startet mit gibt es nicht.
Machen wir mal startet mit ABC, gibt es bestimmt irgendwas.
Startet mit A.
Gibt keine Welt, die mit A startet.
Okay, da gibt es ein paar, die fangen immer mit Großbuchstaben an, das Faker Zeug.
Okay.
Amina suchen wir jetzt Bäm.
Guck mal, da kannst du nur wirklich nichts sagen.
Das ist eine SQLite Datenbank mit zwei Millionen Einträge drin und guck mal hier.
Zack, das dauert 250 Millisekunden oder so.
Es wäre natürlich noch richtig pro, wenn ihr unten...
Guck mal, hier steht sogar wie lange das ganze dauert.
Also, da kannst du dich nicht beschweren.
So und ich wette mit euch, ends with ist jetzt auch schneller,
weil das ganze im File System Cache drinne ist.
Ja, guck mal, zack.
Gar kein Problem.
Ja, da kannst du dich nur wirklich nicht beschweren.
Gmail.com.
Hallo Jungs und Mädels, ja morgen ist soweit.
Ne, ich morgen am Wochenende.
Wochenende.
Gibt es neues Video.
Na, okay, ne, ends with dauert länger.
Aber ich glaube, das längste ist gar nicht mal das Datenbankquery, sondern...
Macht der Debug Datenbankquery?
Sondern das Zusammenbauen von dem Result.
Der braucht 8 Sekunden, um halt hier den Result mit...
Was weiß ich, wie viel 100.000 Datensätzen da rauszuhauen.
Ich weiß nicht, ob man hier irgendwo sehen kann, wie viel da drinne ist.
Ne, anscheinend nicht.
Dann sieht man nicht, wie viel Datensätze das sind.
Obwohl man das bestimmt auch irgendwie querying kann.
Aber das ist wirklich schnell.
Kannst du dich nicht beschweren?
Ja, und ich hab das gelesen, dass das unter anderem von Facebook entwickelt wurde,
weil ihre Mobile App zu lahm war und wahrscheinlich weil die auch zu viele unnötige Daten abgefragt haben.
Und gerade bei Services wie Facebook ist es ja so,
dass du, sagen wir mal, User in der Datenbank stehen hast,
aber du nicht auf jeder Seite alle Informationen zu diesem User haben willst.
Was bringt einem das Generieren von den Daten jetzt?
Naja, ich kann die Daten abfragen.
Und ich will ja das Abfragen der Daten testen.
Weißt du, um zu testen, wie man Daten abfragt,
braucht man erstmal irgendwelche Fake-Daten, die man abfragen kann.
Und deswegen haben wir die Fake-Daten generiert.
Weil wo kriegst du denn sonst 2 Millionen Datensätze auf die Schnelle her?
Erstmal bei Thor im Darknet eine Datenbank kaufen.
Oder aber Fake-Daten generieren.
So, und zum Beispiel, wenn ich jetzt sage,
eigentlich interessiert mich nur die E-Mail, der Rest von den User ist mir egal,
dann machen wir das Ganze mal mit der E-Mail.
Und es ist nicht wirklich schneller geworden.
Doch, ein bisschen schneller.
Ein bisschen schneller ist es.
Also die Hauptportion des Curies wird wahrscheinlich wirklich die Datenbank-Suche sein.
Das hier ist ja quasi Volltext-Suche.
Aber was ich cool finde, starts with geht schneller.
Und ich bin mir ziemlich sicher, das liegt daran,
weil der das intern schon irgendwie als sortierte Liste abgespeichert hat.
Und dann kannst du den Start schneller finden.
Ich weiß gar nicht, wie man im Entity-Framework ein Index erstellt.
EF Core Index, wie macht man sowas?
Hab ich, glaube ich, noch nie gemacht.
Has Index.
Ah ja, Model-Bilder, genau, doch, habe ich schon gemacht.
On-Model-Creating, das machen wir jetzt mal.
Muss man das an On-Model-Creating machen?
Okay, Override, On-Model, was macht hier gerade Magic alles für mich oder was?
On-Model-Creating, und dann sagen wir, okay, Model-Bilder, Entity-User, oder wie, oder was?
Wahrscheinlich.
Hallo?
Wie, das gibt es nicht?
Natürlich gibt es das.
Ist es doch.
Und dann, Has Index, da benutzt jemand Rider.
Ja, Rider, beste.
Der Grund, warum ich mit Rider mal angefangen habe, ist, weil es unter Linus funktioniert.
Und mittlerweile bin ich da so überzeugt von, dass ich wahrscheinlich, wenn ich unter Windows
wieder was basteln würde, würde ich wahrscheinlich das auch unter Windows installieren.
Okay, machen wir mal ein Index auf die Mail.
Und dann gucken wir, ob das irgendwie nennenswert was an der Performance bringt.
Ach, Moment, On-Model-Creating, muss ich das jetzt noch mal machen?
Macht der das jetzt nachträglich auf die Datenbank oder muss ich das jetzt noch mal
reinschreiben?
Zeig mal her.
Jetzt müssen wir uns mal den SQLite Explorer angucken, ob dort, ob man da erkennt, ob da
irgendwie ein Index drauf ist.
Wo sieht man das?
SQL MonkaS.
Müssen das hier, gibt kein Index da.
Gibt kein Index.
Ja klar.
Ich habe ja auch die Datenbank vorher schon angelegt.
Okay, dann muss ich das noch mal machen.
Okay, easy.
Wir haben ja Zeit.
Wir machen das noch mal.
Oh nee, Moment.
Ich hätte das vorher zu machen müssen.
Wir legen einfach noch mal an.
Kein Problem.
Wir haben ja Zeit.
Stimmt, du hast recht.
Correct.
Ja.
Ja, ja.
Hast du recht.
So wie ich hier mache ist übrigens, hast du recht, ist Einbahnstraße.
Den Fehler habe ich schon mal gemacht.
Dann hast du später das Problem, wenn du Änderungen machen willst, dass es dann immer jedes Mal
inkompatibel ist zu anderen.
Du müsstest eigentlich New Migration machen und, ja, ja, du hast recht.
Genau.
Oh Mist.
Ich kacknup.
Jetzt habe ich es geändert und er hat es neu gestartet.
Wir machen einfach mal Run.
Ja, ja, ist ja gut.
Run.
Guck mal, jetzt schreibt er gleich in die Datenbank.
Vorher hat er das nett gemacht.
Okay, wir warten mal kurz, bis das alles reingeschrieben ist.
Du hast recht mit meiner Migration, ja, musst du machen.
Äh.
Wattaf.
Mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, mok, s.
Database is locked.
Oh, habe ich noch noch auf?
Warte mal.
Warte mal, ich glaube das hab ich das einfach zu oft gestartet grade, killall.net easy, killall-9.net, zack, so muss es sein, zack, ok jetzt alles weg, jetzt kann man es nochmal starten.
Ja, wir hatten ja die ganze Zeit Watch, das hat es halt verkackt, weil ich den Datei geändert hab, während er gerade generiert hat.
Genau, respect, pain, I'm not net, so jetzt warten wir mal kurz ab. Ach so, nee, nee, nee, da machen wir keinen Watch für, LS-Spam ist viel besser.
Also ihr habt die Auswahl, entweder kopier ich jetzt zwei Minuten einsen oder ich spam LS, was soll ich lieber. Der Chat darf sich's aussuchen.
Was passiert hier genau? Ich hab gerade eine Fake-Datenbank erstellt mit 2 Millionen Einträgen und die fragen wir jetzt über eine AP ab. Und ich will dieses Abfrage-Link hier ausprobieren.
Wie das, du kannst ja schauen wie das mit My Creations in EF Core geht, ey ich weiß wie das geht, das machst du über das.net command line tool, mir ist das bloß gerade nicht eingefallen, weil ich das so selten mache.
Das machst du über das.net command line tool, du sagst irgendwie sowas wie, du musst erstmal irgendwelche, früher musstest du zumindest noch irgendwelche Plugins dafür installieren, wahrscheinlich ist es mittlerweile eingebaut.
Und dann sagst du irgendwie.net new migration oder irgendwie sowas, migration add, migration add ja, genau.net EF migration und dieses EF Subcommando war früher nicht mitinstalliert und das war total verwirrend das nach zu installieren.
Was hat der für Schmerzen denn jetzt auf einmal? Achso aber die Datenbank hat er angelegt oder? Ach nee der Mac hat nur, ach nee nichts Schlimmes, nichts Schlimmes, der Mac hat nur, dass es ihm zu lange dauert bis die Web-Anwendung gestartet ist, was ja klar ist, weil ich gerade 2 Millionen Datensätze anlege.
Oh das ist Pocky Mode, das gefällt mir.
So 203 MB oder sowas ist es, wobei jetzt mit Index ist es vielleicht ein, ja wobei, ein bisschen, bisschen größer vielleicht.
So, gleich, gleich haben wir es. Und dann mal gucken ob das schneller geht, da bin ich mal gespannt. Ja warum ich, warum ich da heute drauf gekommen bin, warum ich das mal ausprobieren wollte ist,
ich bastel ja gerade sowas für Überwachungskameras, wo man sich im Browser das ganze in Browser streamen lassen kann, die Überwachungskameras, also quasi fast Latency frei und ich habe jetzt aber mittlerweile schon einen Knopf eingebaut, dass man dann ein paar Sachen aufnehmen kann.
Er macht Object-Erkennung, ob da Leute durchlaufen und wenn Leute durchs Bild laufen, dann startet eine 30 Sekunden Aufnahme und solche Geschichten und ich habe mir gedacht, ey wenn jemand, das man eine Weile laufen hat und dann irgendwie, was weiß ich, 300, 400 Aufnahmen hat,
dann wird er ja wahrscheinlich auch ein bisschen filtern wollen in den Aufnahmen, ja. Nicht nur nach Kamera, sondern vielleicht auch nach Zeit, wann er es erstellt hat oder auch nach Typ, was es war, ob es eine manuelle Aufnahme war, ob es getriggert wurde durch Object-Detection.
Deswegen wollte ich mir das mal angucken, weil es dafür mit Sicherheit recht nice ist. Was? Ah, wisst ihr warum das nicht geht? Warum ich meine IDE kaputt gemacht habe?
Ich habe Killall.net gemacht, ich habe auch das.net der IDE gekillt. Tja gut, kann mal passieren.
Hab ich noch Auto-Complete? Nee, ist alles weg, alles down. Okay, Leute, RIP IDE ist kaputt. Okay, Rider, Quit, alles klar. Ah nein, das falsche Rider war das. Nein, Rider, geh weg, piss dich alle.
Geh weg, Rider. Ja, also hier Frage von Kofax. Ich bin, sie haben jetzt Plattformer-Auge geholt, doch weder Arduino noch Plattformer können was uploaden.
Ich hatte den Boot, was? Hast du das auf Windows? Windows ist so ein Ding. Ich habe das noch nie verwendet auf Windows, aber du musst unter Windows erst irgendwelche serielle Treiber installieren, dass es funktioniert glaube ich.
Ich habe das noch nie verwendet unter Windows. Den Bootknopf musst du nicht drücken. Du musst normalerweise nichts am Controller machen, wenn das ein ESP32 oder ein ESP266 ist.
Du musst nichts am Controller machen, du musst den einfach nur einstecken und dann sagst du Upload und dann ist gut.
Guck mal, jetzt kann ich zum Beispiel nicht zurück, weil ich habe die IDE geschlossen, aber die Local History ist immer noch da und in der Local History habe ich hier den Krams noch drinne stehen.
Guckt, Bäm. Das heißt, wenn ich jetzt wieder haben will, kann ich mir einfach hier rauskopieren. Also Local History ist absolutes POG-Feature. Massive POG-Feature.
So, jetzt können wir das starten. Jetzt haben wir unsere Daten mit 2 Millionen Einträgen und jetzt gucken wir mal, ob der Index irgendwas beschleunigt hat.
Escalate Data, Indices, Users, Mail. Schauen wir mal, ob das jetzt schneller geht. Mit einem Index. Auf Mail.
Welche Linux-Distro nutze ich? Das ist Manjaro mit E3-WM.
Ist das jetzt schneller?
Nee, das ist auch nicht schneller. Ich hätte gedacht, vielleicht bringt ein Index was. Zumindest bei Startet mit. Dass es beendet mit nichts bringt, ist klar.
Geht eigentlich. Also, da kannst du dich nicht beschweren. 5 Sekunden für das Durchsuchen von der Datenbank mit 2 Millionen Einträgen. Vollkommen in Ordnung.
Es waren vorher auch nicht 8 Sekunden. Die 8 Sekunden waren es nur, wenn es nicht im Filesystem Cache drin ist. Und es ist wahrscheinlich mittlerweile schon.
Ja. Nee, aber es ist wirklich äußerst, äußerst nice. Du musst mal mit NodeMCU den Flash und einmal den Boot-Taster bestätigen.
Also, wenn du NodeMCU hast, musst du nichts drücken. Du machst das einfach dran und drückst Upload und gut ist.
Du kannst mal gucken, ob der serielle Monitor geht. Du kannst mal Serial Output starten und gucken, ob sich das connectet und geht.
Ja. Nee, aber es ist auf jeden Fall eine coole Geschichte.
Mit Arduino IDE kann das sein. Ich muss nie Boot drücken bei der NodeMCU. Nie. Einfach sagen Upload und gut ist.
Man darf jetzt ja nicht vergessen, wir haben dafür null Code geschrieben. Das geht einfach.
Was schon richtig cool ist.
Aber sie haben ein paar Sachen geändert. Also das hier wurde jetzt neu gemacht, wie es aussieht und das hier ist auch neu.
So und ein Feature. Also soweit habe ich das letztes in diesem einen rumgebastelt Projekt, das ich mit einem Kollegen zusammen gemacht habe.
So ungefähr in diesem Umfang haben wir das GraphQL auch verwendet.
Aber GraphQL kann eine richtig coole Geschichte, was ich noch nie ausprobiert habe, und zwar Subscriptions.
Die Seite hat mich immer übelst überfordert, was da drin steht, weil es übelst wir ist.
Also hier fragen wir ja aktuell nur ab. Wir fragen aktuell User ab und filtern die User.
Fragen wir nochmal den Namen ab. Man kann mit GraphQL allerdings auch anstatt einen Query machen eine Subscription machen.
So und was dann passiert ist, bei der Änderung auf Serverseite kriegt der Client automatisch die neuesten Sachen geschickt.
Ich habe diese Seite schon ein paar Mal versucht zu lesen. Die finde ich so übertrieben kompliziert.
Also ich habe keine Ahnung, wie das funktioniert. Ich copy paste mir jetzt einfach mal was zusammen.
Windows erkennt das Ding gar nicht, ja das sagt.
Ja es ist ein bisschen wie Signal A. Es ist unter der Haube eine Websocket Geschichte.
Deswegen muss ich da wahrscheinlich auch sagen, use Websockets, dass das funktioniert.
So das habe ich aber noch nie ausprobiert. Ich bin da ja ein bisschen hin und her gerissen gerade.
Und zwar ich mache das ja hier so. Ich kann das jetzt mal kurz auf GitHub zeigen.
Schon ein paar Tage her, wo ich was gepusht habe.
Oder was? Monarch S. Und da habe ich ja auch Signal R im Frontend.
Ich habe alles, oh warte, warum mache ich die Vue.js Seite auf alle Index.
Hier habe ich auch Signal A drin, wenn es Updates gibt. Zum Beispiel, wenn in einem Videostream eine Person erkannt wird und sowas.
Das funktioniert auch ziemlich gut.
Und auf Serverseite habe ich auch noch so einen Event Message Bus, der Sachen zwischen Komponenten hin und her schickt.
Ich weiß nicht, ob ich noch wirklich was drittes brauche, aber es wäre halt echt praktisch,
wenn ich vom Server was abfrage, wie hier zum Beispiel, und kriege danach immer die neuesten Updates, wenn was hinzugefügt wurde.
Ich Copy Paste einfach mal, ich probiere das einfach mal aus, weil das stelle ich mir trotzdem sehr praktisch vor.
Was machen die hier für Dinger?
Okay, also wir müssen erstmal irgendwie Add in Memory Subscription Provider machen.
Also alles, was ich euch bis jetzt gezeigt habe, habe ich schon mal irgendwann gemacht, aber das ist jetzt komplett kein Plan.
Adds in Memories Subscriptions und dann brauchen wir noch was, ein Add Subscription Type.
Alles klar, nennen wir einfach mal Subscription.
Ohne, dass ich wüsste, was ich da treibe.
Subscription Public.
So, wie geht das jetzt?
Fangen wir mal oben an.
Okay, das haben wir gemacht. GraphQL, Provider, Configure.
What? Ein Event Message?
What the fuck?
Was passiert da überhaupt gerade?
Was bin ich sehend?
Was ist das?
Return, what?
What the fuck?
Ich hab keine Ahnung, wie man das konfiguriert.
Okay, da bin ich offiziell zu Low-Brain-Führer, das muss ich mir irgendwie bei Ruhe erkunden, keine Ahnung.
Ah, du hast nur ein Ladekabel gehabt, bestimmt ein China-Kabel, oder?
Redis ist genau das, dass man das auch wenn die Anwendung abkackt.
Aber ich hab hier in Memory Subscription.
Du musst Boot halten, was ist denn das?
Zeig mal, was hast du für ein Board? Schick mal einen Link.
Was ist das?
Ein Event Sender? What the fuck?
Ich copy-paste zumindest jetzt einfach mal.
Ich weiß nicht genau, was da Sache ist, aber...
Okay, ich geb also, ich geb ein neues...
Wir machen jetzt mal eine ganz billige kleine Subscription.
Wir geben einfach alle, alle User zurück.
So, und jetzt haben wir on, weil es jetzt so eine Art Event ist, user changed oder so.
Okay, komm, on user added oder created.
Da brauchen wir jetzt was, ein Event Sender?
Da muss ich bestimmt noch irgendeinen Package adden.
Hot Chocolate Subscriptions oder sowas wahrscheinlich?
Ich hab keinen Plastenschimmer, was ich hier treibe.
Okay, ein Event Sender gibt es schon mal nicht.
Muss ich dafür hinzufügen? Package? Muss ich dafür ein Package hinzufügen?
Steht da irgendwo was? Nougat? Dot Subscriptions?
Ah, ich hab das falsch hinzugefügen. Muss das da bestimmt hinzufügen.
Okay, machen wir das wieder weg, remove, fügen das hinzu, add, jawoll.
Oh, wahrscheinlich geht das jetzt besser.
Moment, 105? Nee, das ist noch das alte.
Ja, what the fuck?
Event Sender?
Itopic? Okay, das ist noch mal was anderes.
Fuck.
Oh nein, ich hab keinen Plastenschimmer, was ich da mache.
Ich hab keine Ahnung, was es tut, was es macht, Alter.
Okay, return.
Was ist das?
Äh, warum nicht?
Hä?
Ach so.
Du hast das Board geschickt? Ja, Moment, ich guck's mir mal an.
Dieses Board.
Klar, das ist ganz normal, ESP32, da muss ich keinen Bootknopf drücken zum Flaschen.
Genau das gleiche Board hab ich auch.
Ist das irgendeine Windows-Geschichte? Keine Ahnung, ehrlich.
Wir haben es letztens erst im Stream geflasht, hier.
ESP-Tool-Write, bam, da muss ich nix halten.
Ich glaub's dir, du musst das nicht schwören, Alter.
Das schaut gut, ich glaub's dir.
Das erinnert mich, das fand ich auch geil.
So in Corona-Zeit hat sich...
Also es gibt bei uns in Frankfurt einen ziemlich nice Köfte-Laden.
Hier, den dafür. Ich kann ja mal Werbung machen für den.
Köfte-Chi, irgendwie so, August oder so heißt der so?
Köfte-Frankfurt, so.
Hier, der da, Köfte-Chi.
Der ist echt nice, Poggers Köfte in Frankfurt.
Da haben wir angerufen.
Da haben wir angerufen und haben gesagt, wir würden gerne Köfte-Sandwich bestellen.
Und wir wollten fragen, ob er wieder auf hat.
Weil das letzte Mal, wo wir da waren, da hat er ja noch renoviert.
Und wir wollten Köfte-Sandwich bestellen und einfach fragen, ob er wieder da ist.
Und dann meint er, nein, nein, ist noch alles geschlossen.
Und dann meint mein Kollege so, ja, weil das letzte Mal stand dran.
Der hat halt bis, kann ich sagen, bis 3.12. und deswegen...
Nein, nein, immer noch geschlossen. Ich schwöre.
Nein, ist schon gut. Wir glauben es dir auch so.
Du musst nicht schwören, dass es keine Köfte-Sandwich gibt.
Ist alles gut. Ich schwöre.
Der hat gedacht, das wäre jetzt für uns die übelste Beleidigung oder so,
dass er uns keine Köfte-Sandwich verkaufen will.
Ich meine, wir können es überleben, so ohne Köfte-Sandwich.
Ah ja.
Haben die hier kein gescheites Latest? Ah, da haben sie was.
Nee, da haben sie auch nichts.
Topic habe ich jetzt schon öfters gelesen hier.
Ich habe eine Idee. Ich habe eine Idee, Leute.
Es gibt doch bestimmt ein Übungsprojekt auf GitHub von denen.
Das haben wir doch schon gesehen hier.
Workshops, bam, da haben wir es sogar noch auf.
Da gibt es doch bestimmt auch was mit Subscriptions.
Docs, Subscription checks.
Alter, das ist ja Big-Brainster-Code-Extrem.
Was ist hier los? Was passiert hier überhaupt?
So, Subscription.
Haben die irgendeine Subscription-Class oder sowas,
die ich mir Copy-Paste-en kann?
Add-Memory-Subscription. Session-Subscription.
Ah, den kopieren wir uns jetzt. Wunderbar.
Okay, also Topic-Subscribe brauchen wir. Wunderbar, machen wir.
Das haben wir. Event-Message brauchen wir. Event-Message in Session-ID.
Okay, können wir lassen.
Lassen wir einfach mal drin.
Den Rest brauchen wir anscheinend nicht.
Topics können wir so lassen.
OnUserCreated. Event-Message in Session-ID.
Okay.
Und wie trigger ich das jetzt?
War da nicht Topic-Sender oder sowas dabei?
Moment, das war auf der anderen Seite.
Topic-Sender. Ach nee, hier. Event-Sender.
Okay, ich probiere jetzt mal was ganz Abenteuerliches.
Das wird wahrscheinlich nicht funktionieren.
Okay, Moment. Wir starten jetzt erst mal neu
und gucken, ob ich mich daran attachen kann an diese Subscription da.
Oder ob man die jetzt überhaupt sieht.
Reload.
Subscription. Okay, das sieht er schon mal.
Schau mal was. Schau mal was.
Also, Subscription.
Subscription.
Where? Prime?
Hier geht nicht.
Keine Primers in CraftQL.
Aber hoffentlich paar Primers auf Twitch.
Also, Subscription.
OnUserCreated.
Ich gebe super schlechte Sellout-Versuche.
Aber wenn es euch gefällt und ihr habt noch einen Prime-Sub übrig,
ihr wisst es bald Weihnachten, ich würde mich freuen.
Und wisst ihr, worüber ich mich noch mehr freue als über euren Prime-Sub?
Wenn man euch hier öfters sieht.
Weil wir sind Leute, die aktiv sind, im Chat sind und sich benehmen,
lieber als jeder Prime-Sub.
Deswegen ist mein Chat auch der beste Chat.
Schweizer hat keinen Prime. Was? Warum? Was ist mit den Schweizers los?
Mit den Eidgenossen.
Was machen die Eidgenossen wieder?
Was ist denn hier los?
Killfills, Sex, Abos, Poggers.
Dankeschön.
Massive Subscription.
Wer hat denn was gekriegt?
ParthosDev.
ÖtziOfficial.
Oh, oder wirklich der richtig echte Ötzi.
Dann haben wir...
ApsuLeru.
Zarosh.de
djsw77
Ja, nice.
Dankeschön Killfil.
Der Ammo-Button wurde gebashed. Genau.
Aber richtig.
Der Gifter-Button wurde gebashed.
Gibt es bei CraftQL auch Security?
Also Authentification?
Gute Frage. Nächste Frage. Keine Ahnung.
Dafür habe ich so nicht...
oft genug verwendet.
Ich weiß es nicht.
Dodged.
Ja.
Okay Leute, es ist ja bald Weihnachten, ne?
Es ist ja bald Weihnachten.
So.
Ich werde jetzt mal zwei Subs verteilen.
Und zwar, weil ich die schon öfters hier gesehen habe.
Einmal kriegt der Cheat 95 eins.
Der braucht das.
Der hat kein Geld.
Und kein Prime.
Ähm.
Wem wollte ich noch eins giften?
Weiß ich nicht mehr.
Dann hebe ich bitte das nochmal auf.
Irgendeinen habe ich gerade gedacht, den muss ich auch noch eins giften,
weil das auch immer oft am Start und
auch im Chat.
Und dann muss ich auch noch eins giften,
weil das auch immer oft am Start und
auch im Chat
unterwegs immer...
Falls ich es sehe, dann
mache ich es noch.
Exzellent.
So.
Also, mal gucken ob das jetzt tut.
Subscription on,
User created.
Okay. Und jetzt?
Und jetzt?
Die...
Keine Ahnung, der Name.
Den Name will ich haben.
Und jetzt?
Ah, okay.
Okay, das funktioniert anscheinend. Da kann sich Subscriben.
Okay, nice, nice.
Aber, Leute, ich finde es nice,
dass ihr alle am Start seid. Heute ist ja wirklich
sehr Nischenthema und ich weiß auch nicht so genau,
was ich hier treibe, trotzdem 150 Leute am Start.
Teilweise 160, 70.
Das ist auch spät.
Äußerst nice, ja.
So.
Okay, ich probiere jetzt mal
eine Sache aus.
Ich, hier in
meiner Config Methode, ich injecte mir
mal einen Itopic
Sender. Wie gesagt, ich habe
keine Ahnung, ob man das so macht und
auch weniger Ahnung, ob man das
so geht und auch weniger Ahnung, ob man
das wirklich so macht.
Heute ist gar nicht so viel los
im Vergleich zu sonst. Guck mal, gestern
war man nach 22
Uhr und hatten 250
Viewer.
Um 22.40 Uhr oder so.
Da habe ich schon gedacht, what the fuck?
Obwohl gestern im Endeffekt
im Laberstream war.
Kommt zu Weihnachten neues
Commentary. Also,
an mir soll es nicht liegen.
Der Friseur
müsste sich dazu
ja, herablassen,
das zu machen. Ich habe mich letztens
gefragt, der hat sich nicht so wirklich gerührt.
Ich glaube, der will sich auch da auf nichts
festlegen, dass er jetzt noch irgendwie Videos macht
oder so. Aber ich denke mal,
ich kriege den dazu überredet.
Aber im Vergleich zu vor einem Jahr ist auch
viel los. Ja, das stimmt. Es ist
ohne Scheiß so das letzte
halbe Jahr ist ganz schön
viel los hier. Also sind auch viele
neue Leute dabei gekommen.
Wir haben ja regelmäßig, also wir haben sonntags
teilweise Andi 300 Zuschauer, aber das ist ja
auch so der mainstreamigste
Stream sonntags morgens und auch die
beste Zeit. Teilweise 350
hatten wir da auch schon. Ich glaube, das höchste,
was ich hatte, war 700 bei irgendeinem blöden Apple Event.
Glaubst du gar nicht, bei einem Apple Event.
Aber so auch bei normalen
Laber-Streams 250, das ist
ultra poggers.
Aber man muss auch sagen,
ich habe im letzten Jahr auch ziemlich viel gestreamt.
Und ich habe
eine Sache gemacht, wo man auch sieht, dass die sich
auszahlt.
Ich habe mir diesmal, ich habe mir so das letzte
Jahr über schon ein bisschen mehr
Gedanken drüber gemacht, was man als
Content zu bringen kann.
Davor habe ich ja noch mehr random gelabert.
Also ich denke mal schon, dass das
was gebracht hat. Da fehlt jetzt nur noch
eine Sache, Leute.
Nämlich endlich mal die
22 Emote-Slots voll machen.
Das mache ich, Leute. Das mache ich diesen
Dezember auf jeden Fall noch. Ich
brauche Emotes. Fiverr ist, Fiverr-Auftrag
ist, Fiverr-Auftrag ist raus.
Der Content ist
sehr spannend. Ja, nice, nice.
So, ich mache jetzt
einfach mal einen Task und
sende unendlich lang,
dass ein neuer User
angelegt wird. Also wir faken
jetzt einfach mal, dass ein neuer User angelegt
wird, weil
True
so Event
was? Sender.
Send.
Topic. Oh, welches
Topic ist das denn?
Topic.
Kann man bei dem Topic Name angeben?
Nein.
0w. 0w
größer keqw ist das. Wobei, ich weiß
nicht, ob der mit solchen Zeichen
0w ist das Topic. Sende an das
Topic 0w.
Tja, Message. Brauche ich die
Message überhaupt?
Message brauche ich wahrscheinlich gar nicht zum
ausprobieren.
1,
ist egal.
So, und dann sagen wir
thread, sleep. Das ist nicht die schöne Art,
das zu machen, aber ich will gucken, ob es funktioniert.
So, da sollte jetzt im Hintergrund
Moment, Moment, was ich hier mache
ist ganz bescheuert. Ich gebe jedes Mal
komplette User Array raus.
Ne, das geht nicht.
Ne, Moment. First.
Ok, nur den
First User. Nur den First User.
Oder, oder,
Range? Ging das
Range? Ah ne, Moment, wie ging das nochmal?
Wie kommt man mit Link nochmal?
Ne, wir brauchen gar
kein Link. Wir brauchen
Range Selectors.
Büg doch einen hinzu
jede Sekunde.
Das Problem
bei einem hinzufügen jede Sekunde ist,
dann müsste ich irgendwie hier drinnen erkennen, welchen
ich hinzugefügt habe. Ne, ha,
wir machen das anders.
Wir machen das so. Users,
last. Einfach immer
den Letzten zurückgeben.
Und dann füge ich jede Sekunde einen hinzu und das ist
immer der Letzte. Ah,
yes.
So.
Ok.
Und jetzt?
Kriege ich jetzt? Kriege ich jetzt
einen User?
Jede Sekunde kriege ich einen User?
Nein. Oh. Oder?
Errors.
Unexpected
Error.
Aber, aber der macht jede Sekunde was.
Also prinzipiell ist das gar nicht so falsch, was ich
da mache.
Aber, aber er mag
nicht.
Die Message sollte ein User Objekt sein.
Ne,
oder?
Ne, die Message ist
ein Int.
Die Message ist ein Int. Ich
benutze ja hier gar nichts von der Message.
Message ist ein Int und hier ist auch
ein Int. Das ist so weit ok.
Sag mal so, ich kann die Message
in den User Objekt geben,
dann brauch ich den Data, den
Datenbank Kontext nicht.
Ja.
Und dann geben wir einfach
den User zurück.
Genau, so machen wir das.
Ja, so machen wir das, das ist ok.
Return.
Und jetzt
sagen wir hier Send.
Moment.
Ah, wo ist mein Generate Code?
Faker.
Braucht man Generate Code?
Und hier oben mach ich mal aus, dass er keine neue
Datenbank generiert.
Generate One.
Und ich stelle jetzt jede Sekunde
in den neuen User.
Generate One First.
Genau, ich generiere jetzt jede Sekunde einen neuen User
und sag dem Client Bescheid,
wo das neue User angelegt wurde.
Guckt euch das mal an.
Also die Doku-Seite
braucht dringend mal ein bisschen Überholung,
mit der blickt doch kein Sau durch, was die da eigentlich wollen von einem.
Aber überlegt euch mal,
das ist extrem nice.
Ich bekomme
quasi jetzt im Client
mit, wenn im Backend
was passiert, ohne
dass ich irgendwas dafür machen muss.
Also ich muss keine Signal-A-
Websocket-Gedöns von Hand machen.
Ich meine unter der Haube sind es Websockets,
aber es macht das alles für mich.
Das ist, wisst ihr, das ist richtig praktisch.
Weil aktuell mache ich das so.
Ich zeige euch das mal kurz an der Stelle,
wo das passiert in meiner
in dieser Web-Anwendung
für Überwachungskameras.
Kannst du Netzwerk-Tab anzeigen?
Ach du meinst
Entwicklertools oder was?
F10? Ne, was sind denn F12?
Muss ich aber neu laden.
Ja, das mit Sicherheit Websockets.
Ja, guck, der macht keine Request.
Der hat hier oben
GraphQL
Wo ist die Websocket-Verbindung?
Ich sehe sie nicht.
Ich lade nochmal neu ohne
ohne Cache.
Zack.
Also normalen Request könnten es nicht sein,
sonst wird das Ganze
Ist Hot Chocolate nur in Verbindung mit GraphQL geeignet?
Hot Chocolate ist eine GraphQL-Implementierung.
Sollte hier vorne nicht irgendwas von Upgrade
oder so drinstehen, wenn es Websocket ist?
Es funktioniert so ungefähr.
Okay, es sind keine Websockets, aber was ist es dann,
wenn es keine Websockets sind?
Das müssen Websockets sein.
Sonst müsste ja da irgendwas passieren.
Magic.
Das sind bestimmt Websockets.
GraphQL
Upgrade.
Ne.
Upgrade ist doch das
für Webrequests. Upgrade-Header.
Ne.
Das ist was anderes.
Ist das toll? Also das, was ich bis jetzt
von gesehen habe, ist ultra nice.
Ah, wirklich.
Poggers nice.
Keine Ahnung, aber es müssen Websockets sein.
Guck mal, ich kriege jetzt
live mit, wenn neue User angelegt werden.
Ist doch ultra...
Was ich bei den anderen Sachen...
Bei den anderen Sachen müsste ich bestimmt 500
Zeug programmieren, dass das funktioniert.
So, jetzt noch die Telefonnummer dabei.
Bam.
Wunderbar.
Das IP-Traff.
Was? Warum?
Ich kann Wireshark anbauen, wenn du willst.
Push GraphQL zum Client.
Ja, über Websockets.
Ist das.
Du musst
vom Client aus das hier machen.
Du musst vom Client aus
sagen hier, ich will
subscriben.
Zum Beispiel auf onUserCreated.
OnUserCreated musst du dann hier anlegen.
Aber das ist jetzt alles an Code, was man braucht.
Also
onUserCreated.
Darauf kannst du subscriben.
Und dann kriegst du immer
neue User. Und ich lege hier
fake-mäßig im Hintergrund jedes Sekunde
den User an.
Mit Fake-Daten.
Aber es funktioniert.
Also ich kriege einmal in der Sekunde
ein Update auf den Client. Und was daran
richtig cool ist...
Weil wie gesagt, ich will das ja verwenden
für die... Ach genau, ich wollte euch ja zeigen an...
Ich wollte euch ja was hier im...
In der Anwendung zeigen und ich habe
schon wieder vergessen, was ich euch zeigen wollte.
Wofür ich das
verwenden will ist, wenn man
Aufnahmen hat und die filtern will.
Und da ist das mit einer
Subscription dazu natürlich richtig cool.
Wenn man dann beispielsweise gerade
guckt und
schaut sich die Aufnahmen
von der Kamera an und es kommt gerade eine neue dabei,
dann bäm ist die automatisch mit
Subscription da in der Liste.
Ohne, dass man was refreshen muss.
Bisher mache ich es
über Signal A.
Solche Geschichten, wenn die Aufnahme fertig ist.
Zum Beispiel...
Wenn...
Hab ich das hier überhaupt drin?
Capture...
Ah ne.
Ok, die Version ist ja uralt.
Deff, Moment.
Capture...
Was mit Result müsste das heißen.
Hier, genau. Also aktuell mache ich so...
Das ist quasi
auch über Websockets.
So eine Microsoft Library um Websockets drum herum.
Also sprich,
mein Backend schickt
eine Capture Result Message und da
steht dann drinne
was für eine Aufnahme gerade läuft.
Was für eine Aufnahme gestartet wurde.
Was für eine Aufnahme gerade fertig ist.
Und dann füge ich das
automatisch hier hinzu. Und das
könnte ich mir alles sparen. Und auch hier oben
die Logik, das könnte ich mir alles sparen.
Und über GraphQL machen.
Und das macht das alles für mich
im Hintergrund. Das ist doch nice.
Ich glaube,
das ist eine gute Idee das einzubauen.
Funktioniert gut. Würde für den
Anwendungsfall auch gRPC gehen.
Ehrlich gesagt, ich habe mit gRPC so gut wie nichts gemacht.
Ich weiß, dass gRPC
binary ist.
Wohingegen der Kram hier ja alles
plaintext ist.
Und man könnte
sowas sicherlich auch mit gRPC machen.
Allerdings
dann musst du viel mehr selbst programmieren
wenn du das mit gRPC machen willst.
Weil
sowas hier zum Beispiel
mit dem
mit Filtern und sowas
was wir hier vorhin gemacht haben.
Du kannst ja auch easy filtern.
Zum Beispiel User
wo die E-Mail Adresse mit
addgmail.com
aufhört.
Das dauert jetzt ein bisschen, weil die Datenbank
ist fucking groß.
Jetzt habe ich 2 Millionen Sachen für generiert.
Aber das ist halt eine easy Geschichte.
Das müsstest du mit
gRPC oder
über REST oder sonst wie den alles selbst programmieren.
Und hier kriegst du das halt mit eingebaut.
Was ziemlich nice ist.
Wie sieht dann der Code dafür
im Frontend aus?
Das kann ich euch jetzt
nicht live hier zeigen, weil ich habe ja
kein wirkliches Frontend. Ich habe ja nur diesen
Test-Baukasten.
Das letzte Mal habe ich hier
drüber gemacht.
Da drüber.
Apollo ist
ein CraftQL Client.
Ich habe jetzt gerade gesehen, dass
die Hot Chocolate Dudes
wo wir die Library von verwenden, dass
sie auch einen
JavaScript Client oder sowas
haben.
Ach, das ist ein C Sharp Client.
Ok.
Das hier habe ich letztes Mal verwenden.
Apollo ist wohl eine CraftQL
JavaScript Library.
Und
ich meine,
wir können uns ja mal kurz hier diesen
Getting Started angucken.
Das ist
relativ einfach zu benutzen.
Also
man kann das Ganze installieren
über die Vue CLI.
Einfach das da und gut ist.
Und verwenden tut man es folgendermaßen.
Genau.
Man macht hier in seinem
also man muss einmal hier diese Geschichte importieren.
Und dort, wo man normalerweise
sonst seine Variablen,
also seine Data, seine Methoden
und sonst was in der Vue
Component anlegt.
In der Vue.js Component
kann man jetzt noch zusätzlich diese
Apollo
Referenz auf Apollo
oder was das ist da verwenden.
Und da schreibst du einfach deinen Query rein.
Und was der dann unter der Haube macht ist,
der macht so eine Abfrage hier
zum Server.
Man kann da auch Parameter und sowas übergeben.
Macht eine Abfrage zum Server
und legt automatisch
eine
Data Variable an,
die man in dieser
Vue Komponente verwenden kann.
Also eigentlich ist das hier mehr oder weniger alles,
was du brauchst.
Also für ein normales Query.
Subscription müsste man dann halt sowas hier reinschreiben.
Das können wir vielleicht
im nächsten Stream oder so machen,
dass wir mit einem Vue.js Frontend probieren.
Das können wir echt machen, das ist eine gute Idee.
GRPC müssen wir auch noch irgendwann mal
ausprobieren.
Noch nichts gemacht.
Und wie das halt so ist.
Wo davon ausreden?
WLAN? Ach so.
Alter, wo habe ich denn meine Stream Ideen?
Hier.
Hab ich da schon GRPC drinne?
Wie mache ich das denn überhaupt mit Notepad auf?
Ach, es gibt tatsächlich wieder mal neue Emotes.
Poggers.
So, genau. Und das hier muss man im Frontend machen.
Das können wir vielleicht hier wirklich ausprobieren.
So ein Mini Vue.js
Vue.tifile,
sonst was Frontend.
Wenn du noch
20 mehr Emotes, Slots füllen willst,
dann brauchst du doch noch 5 Desktops mehr.
Ich habe irgendwie schon wirklich genug Desktops.
Der Witz ist ja,
dass, es heißt
ja eigentlich virtuelle Desktops,
aber das einzige,
was nicht virtualisiert ist bei virtuellen
Desktops, ist der Desktop.
Und by the way, Windows ruckelt, wenn man mehrere
Emotes. Seht ihr das?
Es ruckelt.
High Performance Windows.
Zeit für Upgrade.
Das ist
das einzige,
was man im Frontend machen muss.
Aber das können wir mal in einem der nächsten
vielleicht machen wir es doch gleich morgen im nächsten Stream.
Dann mache ich morgen ein bisschen früher Stream an.
Heute war ich ja ein bisschen spät wieder.
Lieber morgen Mittag oder so.
Morgen früh muss ich erstmal zum Zahnarzt,
aber wird nichts gemacht.
Der will mir bloß irgendwie erzählen, ich soll
irgendwas teures bei ihm machen lassen.
Und dann muss ich dann
den Zahnarzt machen.
Was teures bei ihm machen lassen,
vermute ich mal.
Ja.
Aber das gefällt mir.
Also das gefällt mir wirklich gut hier, die ganzen
Craftgrillen. Und auch mit den Subscriptions
scheint relativ
easy zu sein, wenn man das
nicht nach dieser komischen Doku Seite macht.
Oder noch schlimmer, wenn man das nicht
Alter, was geht mir denn ab hier?
Ich mein, guckt euch das mal an.
Was?
Die, die, die machen hier.
Das ist, die legen
Gott und die Welt an. Ich hab keine Ahnung, was da
eigentlich alles passiert, was die hier machen.
Deswegen finde ich, dass
die besten Guides
und die beste Doku
bei den Projekten ist,
die minimalste
funktionale
Beispiele drin haben.
Also sprich, wenn die sagen, okay,
ähm, wir, wir, wir
erzählen euch jetzt, wie man das Subscription
Feature benutzt, dann ein Beispiel, was drei
Zeilen lang ist. Und danach
noch ein Beispiel, was drei Zeilen lang ist.
Weil dann kapierst du's auch
und kannst dir da ein eigenes Bild drauf machen.
Das hier, das ist ja
Overkill Extrem, Alter.
Was machen die da alles?
Ich weiß nicht mehr, was die da überhaupt alles anlegen.
Und das eigentlich Wichtige ist,
Subscription
äh
Wie hieß das Ding?
Dieses Subscription
Class von denen?
Ich finde es noch nicht mal auf
der Seite.
Äh
Session Subscription
So, das, das hier
ist das Beispiel, was man braucht.
Einfach ein Beispiel, so macht man ein Event
und so löst man's aus. Fertig.
Und am besten, komplett ohne
Client, Code und alles,
einfach erstmal nur Server-Seite, weil man kann das
garantiert auch irgendwie Server-Seite verwenden.
Viel besser, anstatt
hier riesen, riesen Dinger zu schreiben. Ich meine, klar.
Die, das hier ist ja auch,
man darf jetzt nicht übertreiben, das hier scheint
ja auch irgendwie so ein, so ein
Workshop zu sein, der aufeinander aufbaut.
So How to CraftQL, okay.
Aber auch hier
in der Doku-Seite, also das
und eins muss man echt sagen, bei diesem
Projekt, die machen ganz schön viel Magic, ne?
Die injecten
hier irgendwelche Services mit
iTopic-Events an, was auch immer es ist,
wo auch immer es herkommt.
Ähm
dann haben sie noch irgendwie zig
Attribute oben drauf.
Und, und solche
Big Brain-Dinger, also
sonderlich klar ist es nicht.
Kennt ihr ein gutes Notiz-Tool, das hier?
Oh, hab ich gar nicht installiert.
Das hier.
Das ist zwar nicht das
beste, was du
so kriegst,
aber
installier es mal kurz.
Kompiliert er das jetzt
selbst, wenn ich das installiere?
Ich will nicht, dass er selbst kompiliert, ich will einfach, dass er es installiert.
Vielleicht soll ich das
App-Image nehmen.
Oh ja, der installiert
das selbst.
Ich sollte mein App...
Ich nehme das App-Image.
Ja.
Das ist vielleicht nicht das beste
Notiz-Programm, aber
es ist das cross-platformste
Notiz-Programm, Open Source
Notiz-Programm, was du findest.
Das da.
Das nicht startet.
Tja, ich hab nichts gesagt.
Ich hatte das schon mal, dass das
App-Image nicht starten wollte.
Okay.
Ich weiß nicht, woran es liegt.
Sieht gut aus.
NPM?
Ich will kein NPM installieren.
Geh mal fort. Will er den
gerade... Moment, das ist doch uralt.
Das ist doch uralt.
1,3
Das ist doch
uralt, oder?
Ja, das ist
uralt.
Ich übertreib's mal.
Jetzt installiert er mir das halbe Internet.
Gehst du weg?
Gleich wieder alles deinstallieren.
Alles weg hier.
Hat er sonst noch als
Abhängigkeit irgendwas
installiert?
Gehst du weg.
Wieder alles weg hier.
Geht so nicht.
Alles weg.
Org! Der hat den Org
installiert.
Er hat den Org installiert.
Das Org.
Kennst du eigentlich
GNS3?
Was war das nochmal?
Das sagt mir irgendwas.
Was ist denn das?
Ach, genau.
Das ist dieser
Packet Tracer nur in
besser.
Ja.
Was mich da ein bisschen abgeschreckt hat,
korrigiert mich, wenn ich falsch liege.
Ich bin mir nämlich nicht sicher, ob es das ist,
dass man für die Switche quasi
teilweise
VMs starten muss und sich irgendwo
Firmware runterladen muss für die
Switche, dass man die richtig verwenden kann,
falls das das ist. Es könnte aber was anderes
gewesen sein.
Das fand ich etwas nervig.
Deswegen finde ich den Cisco
Tracer, um irgendwelchen Azubis
was zu zeigen, immer noch sehr nice.
Warum kriege ich mein
Notizprogramm hier nicht installiert? Was ist da
los?
App Image,
vollkommen okay.
Clean Bild, jawoll.
Die besten
Note Modules ist odd is even.
War das nicht, Moment,
hier, war nicht
bei einem von beiden dieser Packages
hatten die da nicht ein Problem
letztens, dass irgendwie einer das
Package entweder unpublished
hat oder, dass
irgendwas
Breaking Change drinne war
und irgendwie 5 Milliarden Projekte
sind kaputt gegangen.
Da war doch irgendwas. Da war doch
letztens irgendwas, ey.
Ja, was Crypts, Cancer Dependencies, ey.
Sag mal.
Warum startet das nicht?
What the fuck?
Okay.
Okay.
Wo liegt denn das App Image überhaupt?
Wow, naja.
Guck mal, Find
App Image.
Hier.
Ja, irgendwo, irgendwo, wahrscheinlich
vielleicht User irgendwo wird es sein,
hä?
Wo liegt das überhaupt?
Ja.
Da ist es, nee.
Okay, ähm, wie
konnte man sich auch mal anzeigen lassen, wo
ein Package liegt?
Wo liegt da das Ganze hin?
Okay.
Wo liegt da das Ganze hin?
Okay, das downloadet er sich.
Exzellent.
Wir können es jetzt mal downloaden und von Hand ausführen.
Wo liegt denn den Kram hin?
Wo ist das Build File?
View Package Build.
Äh, okay, wo
liegt der das hin? User Share.
Opt.
Opt.
App Images.
Da ist es.
Ich hab keinen Fuse installiert.
What?
Echt nicht?
Doch.
Hab ich.
Kein Wunder, dass es überhaupt geht.
What?
Hab ich nicht?
Hab ich vorhin ein Kernel Update gemacht?
Ich hab doch vorhin ein
Update gemacht, oder?
Hab ich danach schon rebooted?
Wenn nicht, mach ich das jetzt mal schnell.
Daran könnte das nämlich liegen.
Was ist das denn?
Exquisite
Bing, Foto
Opt
Ah
Ah
Alles klar.
Gut, sehr gut, alles klar.
Okay, ja, ich weiß nicht, ob derjenige, der
noch Notizprogramme sucht,
noch da ist. Also, das
ist das Notizprogramm, was ich verwende.
Natürlich
mit dem besten Eintrag aller Zeiten.
Subsgiften, natürlich.
In die To Do Liste muss
dann natürlich unbedingt natürlich
noch rein.
Max Prime
Summon
ganz essentiell.
Das ist aber
hoffentlich bei den meisten schon abgehakt.
So,
genau, und warum ich das verwende, ist folgendes.
Das ist weder das Hübscheste
hier verschmerzen.
Ach, das war unser Nextcloud-Test.
Könnte ich eigentlich mal wegschmeißen.
Das ist weder das Hübscheste,
noch das, das
von den besten Features her.
Aber, warum ich das verwende, ist
erstens,
integriert sich das so ziemlich in alle
Sync-Lösungen, die es gibt, weil es
unterstützt WebDAF Sync, direkt
File Sync, man kann direkt mit Nextcloud
Sync, wobei ich Nextcloud nicht mag, aber
es funktioniert so ziemlich
mit allen Sync-Sachen.
Also, dementsprechend auch mit allen
selbst gehosteten Sync-Sachen.
Und, was mir
an der Sache auch noch sehr gut gefällt,
ist, dass es das wirklich für jedes
Betriebssystem gibt. Also, außer
Windows Phone.
Aber ich glaube, da sind wir uns einig, Windows Phone
brauchst du, kannst du vergessen.
Sie haben übrigens auch einen nice Web
Clipper Addon, wo man
Screenshots und Sachen von Webseiten machen
kann. Aber, man sieht
schon, guck mal, es gibt es für Windows, gibt es für Mac, gibt es
für Linux und gibt es für Android und gibt es für IOS.
Das ist für mich, ehrlich gesagt,
so das Killer-Kriterium, weil ich verwende
alle Betriebssysteme
außer macOS. macOS nicht
wirklich, aber
ansonsten alles.
Deswegen mag ich das.
Und, weil die
auch ganz gut so ein paar native Features
unterstützen von den jeweiligen Betriebssystemen,
zum Beispiel, kann ich sagen,
ähm,
irgendwie Subskiften,
ob es gerade
um Desktop überhaupt geht,
äh, Subskiften und jetzt kann man
eben irgendwie sagen, Reminder.
Irgendwo hier.
Okay, nicht Datetime, fuck,
bin ich doof.
Mit der Android-Variante kann man jetzt auch
wo ist denn das?
Wo ist der Reminder?
Blöd.
Geht das nicht, weil mein Sync kaputt ist?
Man konnte sich da doch mal
nachdenken lassen, wenn ein Datum ansteht,
äh.
Wo ist es denn?
Glocken oben rechts.
Ah!
Haben die das um, haben die das um,
umgeschoben?
Komisch.
Genau, und
man kann Alarm einstellen, wann das Ding
eine Notification machen soll.
Und das Gute daran ist,
also gehen wir jetzt mal irgendwie, was weiß ich,
Dezember,
Dritter,
auf
21 Uhr 22.
Okay.
Aber das ist jetzt wahrscheinlich
der Vorführeffekt, wahrscheinlich funktioniert
es jetzt nicht.
Und aber das Gute daran ist, dass diese Notifications
native für die jeweilige
Plattform funktionieren.
Ah, habe ich 21 Uhr
gemacht? Was?
Habe ich 21 Uhr gemacht? Ups.
Ah.
Ja, gut.
Dann machen wir das so
und gleich nochmal in einer Minute.
Wahrscheinlich funktioniert es jetzt eh nicht. So,
und du hast, wenn
dann diese Notifications aufploppen,
hast du das
sowohl mit den
normalen Plattform-Locations
auf iOS als auch auf Android.
Also sprich, du kannst Cross-Plattformen
auch Notifications setzen. Das ist das,
was bei anderen Notiz-Apps nicht so gut
funktioniert, außer
natürlich man verwendet
Google
Deep oder was es da nicht gibt
oder
Evernote oder was ist da
nicht alles.
Aber was mir halt gut
gefällt ist, erstens ist es
Cross-Plattform, es gibt es für alles
und
es züngt halt auch easy
überall hin.
So, Pause-Champ, Pause-Champ,
es funktioniert nicht.
Schön, dass wir Notifications gesetzt haben, die nicht
funktionieren.
Sehr nice.
Excellent.
Noch ist die Minute nicht vorbei.
Nein, das kommt am Anfang.
Es kann sein,
habe ich überhaupt irgendwelche
Notifications-Sachen installiert, die
notifizieren könnten?
Ich glaube, ich habe gar keine
Notifications-Zeug installiert.
Da kann auch nichts aufpoppen.
Ja.
Ich glaube, ich habe gar nichts.
Null.
Ne, ich habe gar nichts für Notifications
installiert. Ja, dann kein Wunder.
Da kann auch nichts aufploppen.
Es gibt keine
Notifications, wenn kein Notifications-
Zeug installiert ist.
Ich muss irgendeine
Notification-Dings installieren, aber
da habe ich jetzt keinen Bock drauf.
Aber normalerweise
funktioniert das und in meiner normalen
VM, die ich sonst verwende, da gehen auch
die Notifications. In der Streaming-VM
hier geht es nicht.
Und das Ganze
ist halt Cross-Plattform.
Aber man merkt halt auch,
dass es ein Community-Projekt ist,
ein Open-Source-Projekt, wo jetzt nicht
eine riesen Firma dahinter steckt.
Manche Sachen sind schon
ein bisschen... Also die Android-
App könnte schöner sein.
Ich habe keinen
Standard-Window-Manager von Manjaro.
Ich habe Manjaro von
der Architekt ISO installiert
und nur i3 drauf.
Sonst gibt es da nichts
mehr. Long-Range-Snipe,
das gucken wir dann am Wochenende an.
Das war
ein nicer Soundtrack.
Ja Leute, nice. Also, ich gehe ins Bett.
Wir sehen uns morgen.
Macht's gut. Bis denn.
Achso, ja.
Outro-Musik muss auch mal wieder sein.
Macht's gut. Bis...
Bis morgen, tschüss.
Outro-Musik
Outro-Musik
Outro-Musik
Outro-Musik
Outro-Musik
Outro-Musik
Outro-Musik
Outro-Musik
