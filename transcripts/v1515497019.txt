Aiaiai!
So jetzt bin ich da, Pog, oder not Pog, mal gucken, Leute manche lernen es echt nicht,
ja ich bekomme jetzt zum hundertsten Mal eine Anfrage, ob ich nicht an der Opera GX
Campaign teilnehmen will, dabei habe ich mit denen schon vor einer ganzen Weile mal geschrieben
und da sind wir zu dem Schluss gekommen, dass die gar nicht wollen, ich hab die gefragt
wie das ist, ob ich den Kram auch wirklich ausprobieren muss und ob ich dann auch wirklich
sagen darf was ich von halte, weil das letzte Mal wo ich Opera GX ausprobiert hab war ich
jetzt nicht so wahnsinnig überzeugt von, da haben sie gesagt ne ne, dann lieber nicht,
so und jetzt fragen die mich trotzdem die ganze Zeit, als hätte sich das irgendwie
geändert, weiß auch nicht, gut die haben da irgendwie 500 Marketing Agenturen engagiert,
die sind da halt immer sehr hartnäckig, dann hat mich irgendein China Chinesen Hersteller
invited ihr neues Smartphone anzugucken, ein Dogi Smartphone, wenn ihr noch nie was davon
gehört habt, macht nix, ich auch nicht, aber Dogi Smartphone soll ich bewerben, alles klar,
gibt es die überhaupt?
Ich muss mal kurz danach suchen, Dogi Smartphone, China Handys, ok die gibt es tatsächlich,
Dogi Smartphone schon nie gehört, dann irgendwelche anderen, das ist immer der gleiche Kram ey,
bei Hetzner muss ich antworten, die haben ne neue Mail geschrieben seh ich grad, Fockchamp,
ja so siehts aus, wir machen heute n bisschen weiter, ich hab gestern schon einiges aufgefrischt
und gelernt, ist ja nicht so als bin ich der krasse Paarst, Bro, Pro, nicht Bro, Pro und
ich hab mir gestern noch zwei Tutorials angeguckt, nehm ich allgemein und was zu AsyncIO, guck
mal ob ich das jetzt auf die Reihe krieg, es hört sich an wie irgendein Grieche oder
so, ja, Toxy danke für den Zap, so ich mach mal schnell die VM an, aber erst muss ich
auf meinem Vorschaurechner kurz n bisschen Zeug ausmachen, da läuft nämlich zu viel,
das versteh ich auch nicht wie das sein kann, ich versteh eh nicht was da gehyped wurde,
du meinst diese komische Ölplattform Mission, das war die nichts sagende Call of Duty Kampagnen
Mission, die ich je gesehen hab, außer das ist n bisschen halt ein Wettwerk von Modern
Warfare 1 erinnert und das halt pure Absicht ist, weil Nostalgie, Bait und so, ich weiß
nicht was man daran großartig hypen kann, das ist mir unbegreiflicher, oder gibt's
zwar was neueres, was ich noch nicht gesehen hab, ach jetzt weiß ich auch warum man Vorschaurechner
so rumspackt, weil Avira mal wieder die Festplatte scannt, warum hab ich den Scheiß da überhaupt
noch drauf, ja ich weiß, weil ich den vor 10 Jahren mal installiert hab und nicht wieder
runter geschmissen hab, Monka Essen, Avira wer installiert auch so ein Crap, machen wir
hier mal an, Shriger Massive Subscription, ja aber sowas von, wieso der Desktop ist Pock,
ich weiß gar nicht warum das so viele Leute immer schockt, also ersten sind hier noch
mehrere Desktop Icons frei, für potenzielle, ja hier haben wir eine Datei Kekkel, wie wir
ja alle wissen, essenziell, mal erstmal weg, glaubt nix wichtiges, Kekkel, so jetzt haben
wir mal gestern stehen geblieben, Arsch by the way, so also wir haben gestern geübt und
wir sind bei folgender Sache stehen geblieben, wir haben einen Mini Speedtest selbst programmiert,
so und wir sind stehen geblieben hierbei, bei einem Speedtest, der, au Moment, hab ich
noch, ja ich hab noch Bandbreite gedrosselt, ich muss die Bandbreite drosseln in der VM,
weil ansonsten der Stream abkackt, also wir können maximal 40 Mbit durchbekommen durch
den Speedtest, reicht ja zum testen aus, ja also wir haben Speedtest gebastelt, der misst
wie schnell der Download, wie schnell die Downloadgeschwindigkeit ist, aber ich bin
jetzt nochmal in mich gegangen, also wir kriegen auch aktuell 35 Mbit durch, ich bin nochmal
in mich gegangen und hab mir überlegt, das ist viel zu kompliziert meine Implementierung
und hat's geruckelt, es hat geruckelt, ne, weil ich grad den, ne, hat nicht geruckelt,
ich muss sagen, ich hab doch die Downloadbegrenzung drin und weil ich gucken will, wie das mit
Async.io auch funktioniert, deswegen werden wir den Kram nochmal zum größten Teil, naja
gut, es ist ja nicht viel, es sind ja im Prinzip, was jetzt, ich glaube es möchte mal neu
gestartet werden oder, wenn schon die Zeilenanzahl rumspackt, anscheinend nicht, genau also das
haben wir gestern gemacht, ein Speedtest, der dann den Download messen kann und ich hab
mir jetzt überlegt, wir machen heute folgendes, weil ich muss ja auch mal ein bisschen was
sinnvolles lernen, was ich dann auch benutzen kann und zwar, wie du die los wirst, ja gar
nicht so wirklich, oh Leute ich hab echt ein Problem, ich hab es ja gestern Abend, ich
glaube ich hatte zu lange Headset auf gestern oder so, wie tut das Ohr links weh, das sticht
so, ab und zu mal links im Ohr, ich geh jetzt aber, Chat sagt nicht, ich soll zum Arzt gehen
oder so, das ist immer das gleiche, der Chat sagt immer, Max geht zum Arzt und ich geh
nicht zum Arzt, Gag weight Alter, ich erwarte auch nicht, dass der Twitch Chat das jetzt
in Remote diagnostizieren kann, aber es ist mir gerade eingefallen wieder, weil es mir,
aha das ist wirklich nervig, es sticht so richtig ins Ohr, der aktuelle ist ja hauptsächlich
Home Office, der sitzt gar nicht neben mir, so also, wisst ihr was mir eingefallen ist,
meine Implementierung ist richtig bescheuert, also für alle die gestern nicht da war, ich
zeige euch mal was wir gemacht haben, mach gar nichts, warte bis es besser wird, ja das
mach ich wahrscheinlich auch, also wir starten, wir starten 4 Threads, 4 Speedtest Threads
und dann messen wir einmal in der Sekunde, wie schnell das ist und dann fassen wir es
hier zusammen, ey ja Ohrschmerz, das ist wirklich nervig, das ist nicht permanent, das ist nur
ab und zu mal, aber dann sticht es so richtig im Ohr, also wenn das echt am Headset liegt,
dann hänge ich es mir heute irgendwie so, keine Ahnung, dann hänge ich es mir irgendwie
um den Hals, aber das ist auch nicht so geil, Drawboard PDF, nein Windows, ich will diesen
Kack, Turn Off All Suggestions, ja wo, wo geht das, hier Bullshit da, braucht kein Mensch,
so also was wir jetzt, also was wir überlegt haben, was wir probieren, wir basteln das um
zu essen und dann habe ich auf, jetzt habe ich noch etwas cooles gefunden und zwar, das
ist eine Python Library mit der man heifheadige Kommando Zeilen Tools machen kann, somit mit
Farbe und Progress Bar und Tabellen und Zeug, ja exellent, da machen wir irgendwie so eine
Anzeige, ich meine es ist ja ziemlich noobig, dass das Ding einmal in der Sekunde einfach
hier irgendwas ausgibt ohne was, das muss schön formatiert sein, das muss schön formatiert
sein, als erstes muss ich aber mal gucken wie man den Krempel umstricken kann zu Async.io,
ich habe mir da gestern extra ein Tutorial angeguckt, dass ich das halbwegs checke wie
es funktioniert und ich glaube ich habe es halbwegs gecheckt, es ist im Endeffekt mehr
oder weniger wie C Sharp Task Async Await nur mit dem Unterschied, dass es standardmäßig
nur einen Thread gibt, also in.NET ist es ja so, da kann ich sagen Thread Run und dann
geht das automatisch in Thread Pool und ich kann das Awaiten, das hier ist eher wie JavaScript,
es gibt nur einen Thread und ich muss meine Tasks sleepen lassen oder Awaiten lassen,
dass es quasi das zurück gibt an die Event Loop und dann der nächste läuft, soweit habe
ich das gestern in dem Tutorial glaube ich verstanden, das heißt von der Idee her, kann
man diesen ganzen Threading Krempel hier rausschmeißen, weil ich habe gelesen das macht man eigentlich
gar nicht mehr, das machen nur noch Python Noobs und wir wollen ja kein Python Noob sein
und selbstverständlich wird das ganze mit RGB deutlich schneller, guckt euch das mal
an, wir haben aktuell 40, kriegen wir 40 MBit durch und wenn man hier oben sowas hat, dann
sollten es locker 45 sein denke ich, ja so ich muss jetzt mal kurz überlegen wie wir
das machen, also das hier ist doch das ganze Zeug, was ich hier programmiert habe, ist
doch eigentlich viel zu kompliziert, ich baue das mal kurz um, das ist mir nämlich
gestern Abend, als ich mir noch mal Gedanken gemacht habe über den Stream eingefallen,
ich habe das viel zu kompliziert gemacht, guckt mal, hier frage ich einmal in der Sekunde
ab, wie hoch die Downloadgeschwindigkeit ist und hier messe ich einmal in der Sekunde
die Downloadgeschwindigkeit, das ist total bescheuert, warum time ich zweimal eine Sekunde,
also von der Idee her könnte man das eigentlich deutlich einfacher machen, also ich versuche
das mal, wir machen sowas wie self, int, müsste das, oder ist das ein float, keine Ahnung,
die Startzeit, so und dann kann ich nämlich theoretisch diesen ganzen Krämpel hier unten,
also wenn ich mir das richtig überlege, ich kann den ganzen Krämpel hier unten eigentlich
rausschmeißen und das hier auch rausschmeißen und das dann alles hier oben reinpacken, soweit
von der Idee her und dann sollte das gleiche wieder funktionieren, wenn ich das richtig
mache, so gucken wir mal, gucken wir mal ob das funktioniert, was ich mir da überlegt
habe, ne raid berechnen muss ich noch, ich noob jetzt habe ich das gelöscht, das brauche
ich da noch, null, hier, so, zack, so raid berechnen, start, ist self start, mal gucken
wir nämlich mal ob das funktioniert, weil das ist jetzt deutlich einfacher zu lesen
als mein verkomplizierter Kram, den ich gestern da irgendwie gebaut habe, so self, size, durch
Zeit, also und dann so, und wenn das jetzt, ich hoffe es funktioniert noch, ah, ah, ah,
ja, jetzt funktioniert das noch und es ist deutlich einfacher zu lesen und ich blicke
jetzt wenigstens halbwegs durch was es macht, der fragt einmal in der Sekunde ab, also folgendermaßen,
der merkt sich die Startzeit, wann ich das hier aufgerufen habe, so, die Startzeit, wenn
ich dann abfrage, wie hoch ist die Downloadrate, dann guckt er, wie viel Zeit ist vergangen,
von der Startzeit bis jetzt und das was er in der Zwischenzeit downloadet hat, geteilt
durch die Zeit, die es lief, ergibt dann natürlich meine Megabytes die Sekunde, dann resette ich
das alles wieder und dann rechne ich das durch 1024, durch 1024, also meine Bytes pro Sekunde,
sorry meine Bytes pro Sekunde ergibt das, dann rechne ich das durch 1024, dann sind
das meine Kilobytes pro Sekunde und hier sind das meine Megabytes pro Sekunde und dann rechne
ich das mal 8 und dann sind das Megabits pro Sekunde, so und das ist deutlich kürzer
als das was ich hier gestern zusammen gewurschtet habe und auch viel besser lesbar finde ich,
so und jetzt probiere ich mal diesen ganzen Krämpel umzuwurschten, von oldschool threading
API, die nur noch Python Noobs verwenden habe ich auf Reddit gelesen, aber wir wissen ja
es gibt auf zwei Sachen, auf die kann man sich immer verlassen, das sind einmal Ratschläge
aus dem Chat und Reddit antworten, das heißt dann hat man prinzipiell immer gewonnen wenn
man das einfach macht was die sagen, moin Patrick, was geht, ich habe ein Tutorial geguckt
wie man AsyncIO verwendet, ich baue das jetzt um von threading zu modernem FyFat Kram, so
deswegen werfe ich mal dieses threading Zeug, alles weg, so hier weg, weg, weg, weg, weiss
ich ob ich das noch brauche, ich denke mal das passt, so also ich habe ein Tutorial geguckt,
ich habe ein Tutorial, ja Stackoverflow ist eh nur zum copypasten da, ob man das glaubt
oder nicht, das ist egal, das muss man nicht glauben, das muss man copypasten und dann
einfach ausführen und sagen es funktioniert, also ich habe mir gestern ein AsyncIO Tutorial
angeguckt, so und der hat das ganz gut gezeigt eben, wen es interessiert, ich habe mir angeguckt,
ok Moment, ich muss mal kurz die Bandbreitenbeschränkung, die Bandbreitenbeschränkung von meinem Interface
wieder aufheben, weil ansonsten ist es im Web so lahm, also ich habe mir angeguckt,
AsyncIO, was ist das so lahm, vielleicht habe ich zu viele Tabs auf, oh ich habe echt
zu viele Tabs auf, oh shit alter, ok wisst ihr was, wisst ihr was, close all Tabs außer
das, was nein, close other Tabs, 950 Tabs alles klar, also ich habe mir das da angeguckt,
das war aber nicht so geil muss ich sagen, wo ist denn das andere Video, ich habe noch
ein Video von 2019 angeguckt, war das das, nee ein Video von 2019 habe ich noch angeguckt,
das fand ich wirklich nicht schlecht, ich habe keine Ahnung wo das Video ist, alter
was ist mit denen los, warum gucken die alle so Gatchibuzz mäßig auf ihren Thumbnails,
nee im Verlauf habe ich das nicht drin, ich habe es ja nicht im Stream angeguckt, das
da, kann das das gewesen sein, nee der Typ kenne ich nicht, ok ich habe keine Ahnung
was das andere Video war, das da, also das war ein Video, der hat AsyncIO gezeigt und
Threading gezeigt und Multiprocessing gezeigt, das da war das glaube ich oder, nee das ist
ja nicht 2019, ich habe legit keine Ahnung mehr was ich mir für ein Video angeguckt
habe, ich dachte mir nur ich könnte euch das zeigen, weil ich fand das Video nicht schlecht,
das hier habe ich mir glaube ich angeguckt, das da, das habe ich mir angeguckt, ich kann
nicht in den Verlauf gucken, das ist nicht mein privates Zeug hier, guck da ist nichts
drin, Manager History, heute habe ich angeblich schon vier Seiten aufgemacht, alles klar ja,
ich glaube das habe ich mir angeguckt und der hat das hier wirklich ganz gut gezeigt,
von AsyncIO bis irgendwie Konkurrent Threadpool und sonstige Geschichten, das war nicht schlecht,
das wird, so und deswegen habe ich jetzt natürlich voll im Plan wie das alles funktioniert oder
auch nicht, also ich habe mir das so gemerkt, AsyncIO in Python ist quasi Async Await aus
JavaScript, es ist wie eine Kombination aus dem Task Modell von.NET und der Event Loop
Geschichte von JavaScript und ich hoffe, dass ich soweit verstanden habe, dass ich das jetzt
umbauen kann von Multithreader zu AsyncIO, so also fangen wir mal an, das erste was
ich gecheckt habe ist, was die auch in den Videos gesagt haben, man muss das wie in.NET
alles was man mit AsyncIO laufen lassen will, Async machen, das heißt ich muss mein Main
auch mit AsyncIO run, runnen, weil sonst funktioniert es nicht, so, das klappt schon mal, hätte
ich das nämlich nicht gemacht, dann hätte er mir jetzt gesagt, could not await oder
nicht, meister kein Fehler, gut, zumindest ich muss auf jeden Fall Async davor schreiben
sonst spackt er irgendwie rum, sonst klappt das nicht, so und jetzt, jetzt tue ich mir
ein bisschen schwer, also was der in dem Video erzählt hat ist folgendes, man muss AsyncIO
create task machen, aber und das fällt mir wahrscheinlich ein bisschen schwer, weil ich
die Tasks aus.NET gewöhnt bin, create task ist nicht das gleiche wie task run in Incy
Sharp, ja Incy Sharp würdest du machen task run und dann was du ausführen willst, der
Unterschied ist, wie gesagt ich beziehe mich da nur auf das Video was ich gestern geguckt
habe, also der Unterschied ist, dass in.NET task run höchstwahrscheinlich ein Thread im
Threadpool ist, das ist nicht immer so, aber es ist höchstwahrscheinlich so, das hier,
das heißt hier drinne kann ich auch Synchronen Code ausführen ohne, dass es den Rest blockt,
das geht in Python nicht, weil das eigentlich nur die JavaScript Event Loop nachgebaut ist
in Python, das heißt, wenn ich jetzt hier, das muss ich auch Async machen, also es hört
sich jetzt vielleicht so an, als würde ich das erklären, aber ich erzähl bloß das was
der Typ gestern im Video erzählt hat, weil ich auch keine Ahnung hab davon, das heißt
wenn ich jetzt hier meinen Download Campbell starte, dann kann das nicht funktionieren,
weil, mal gucken was passiert, nix, es geht einfach nicht, dann kann das nicht funktionieren,
weil das nie läuft, guckt mal, ich mach jetzt hier mal rein, Print, Cackle, so das heißt
eigentlich würde man jetzt erwarten, dass der das hier ausführt, machen wir hier nochmal
an Print, ja, Cack W, eigentlich würde man erwarten, er führt das hier aus, das heißt
es kommt irgendwann Cackle und danach wird Cack W angezeigt, aber, passt auf, es wird
mehrfach Cack W angezeigt, aber nie Cackle, also der läuft hier durch, es stellt mehrere
Tasks, diese Tasks laufen aber nie, weil ich nie Sleepe, weil ich nie dem die Möglichkeit
gebe, hier rauszuspringen in die Event Loop zurück, in.NET wäre das nicht so, hätte
ich in.NET gesagt Task Run, hätte ich in.NET so gemacht, eigentlich müsste ich da
so machen, dass es funktioniert, das hier wäre in.NET dann direkt losgelaufen in einem
extra Thread im Thread Pool, das ist in Python nicht so, das ist alles nur ein Thread und
eine Event Loop und ich muss explizit Yield oder Await machen, hier drinnen, dass das
funktioniert, so habe ich das zumindest gestern in dem Video verstanden, das heißt deswegen
führt der jetzt hier drinnen nichts aus, damit das funktioniert, jetzt muss ich mal
überlegen, was muss ich denn machen damit das funktioniert, wahrscheinlich einfach
irgendwo Sleepen, nicht Time Sleep, sondern Await AsyncIO Sleep, also wenn ich das jetzt
richtig verstanden habe, dann sollte der sobald er an die Stelle kommt, hiermit anfangen
und dann in der Endlosschleife hängen und nie wieder rauskommen, aber dadurch, dass
er hier quasi das Sleep hat, heißt er returnt quasi an der Stelle, führt den nächsten
Task aus, bis der wieder returnt oder bis der wieder Awaitet oder Sleept oder was auch
immer, weil es ist kein Thread Pool, sondern es ist bloß ein Thread und eine Schleife
drum herum, welche Einheit, ich vermute mal Millisekunden, guckt es funktioniert Leute,
der hat es jetzt ausgeführt, ist hier in das Sleep gegangen, hat hier erstmal geprintet,
ist hier in das Sleep gegangen und jetzt hängt er hier in der Weilschleife, weil die Weilschleife
ist nicht Async, die ist Synchron, das heißt ich muss jetzt wahrscheinlich so was machen
wie Await auf den, falls das funktioniert, auf den Network Input und jetzt sollte das
eigentlich klappen oder auch nicht, warum nicht, weil man, Bites can't be used, wie
ich kann response read nicht Awaiten, was ist das für ein Blödsinn, das heißt, das
heißt, die eingebaute HTTP Library ist nicht AsyncIO kompatibel oder wie, oder muss, gibt
es irgendwie Read Async oder sowas, ne, gibt es erst gar nicht, tja, gute Frage, da hört
es meine Python Kenntnisse auf, ne, ne, es sind Millisekunden, es sind nicht Sekunden,
es sind Millisekunden, das Sleep, Sleep ist Millisekunden, deswegen sind es ja auch 1000,
so, Await, warum kann man das nicht Awaiten, da selbst ich bin nicht der erste, der sowas
fragt, wtf, wat, AsyncIO HTTP, ist das StandardLib, ne, das ist nicht StandardLib, ich will jetzt
mal nichts zusätzliches installieren, kann das sein, dass es einfach nicht funktioniert,
kann das sein, dass es einfach nicht geht, einfach Python Request benutzen, ne, das muss
doch mit der StandardLibrary gehen, das kann doch nicht sein, dass die StandardLibrary
nicht Await-fähig gemacht haben, ich mein, was wir theoretisch machen können, ist, ich
könnte hier drinne sagen, Await, Async, also nur mal so von der Idee her, dass es funktioniert,
Sleep, eine Millisekunde oder so, also das, Sleep ist nicht in Sekunden, oder, ist es,
wait a minute, ist es vielleicht doch, okay, Await, oh, ist er, ja, gut, ja, dann, das
sleeps halt ein bisschen, ne, was solls, dann, okay, dann will ich 0,001 sleepen, dann will
ich eine Millisekunde sleepen, das müsste jetzt eigentlich funktionieren, das, dann
klappt, dann stimmt allerdings meine Download-Berechnung nicht mehr so wirklich gut, ja, ja, okay,
aber jetzt startet er den Kram und jetzt sleepen wir hier, Sekunde, ja, guck, meine Download-Berechnung
ist voll für den Arsch jetzt, guck mal mal kurz, Download 10 Megabits pro Sekunde, also
meine Download-Berechnung kann jetzt natürlich schwerlich noch funktionieren, wenn ich in
dem Download zwischendrin einfach mal random sleepe, weil dadurch wird schlicht und ergreifender
download langsamer, meine Download-Berechnung ist ja, downloade so schnell wie du kannst
und dann guck was du in der letzten Sekunde gedownloadet hast und teile das durch die
Zeit und das ist die Geschwindigkeit, nachdem das jetzt hier natürlich ein bisschen gebremst
wird, ist das halt nicht mehr so schnell, gibt's da irgendwie eine Hilfe-Seite zu, je nach
was muss ich gucken, sleep, er singt, ich auch sleep, gibt es vielleicht sowas wie tick
oder sowas anstatt sleep, dass er nur das minimalste macht was sein muss, ne, guck mal
mal in die Hilfe, sleeping, wo ist die Funktions-Shield, haben wir nicht irgendwie noch, hier sleep,
da ist er, block for delay seconds, if result is provided, sleep, always suspend, setting
delay to zero, optimized path, ok, also wir setzen delay to zero, das ist jetzt die schöne
Art ist das zu verwenden, wage ich mal zu bezweifeln, schöner wäre natürlich wenn
das so funktionieren würde, aber das funktioniert ja nicht, ja ok, das funktioniert, download
speed Messung klappt wieder, ich muss traffic beschränken auf dem Interface sonst klappt
das nicht, so, also wirklich, wirklich gut klappt meine download Messung mit dem sleep
jetzt aber nicht oder, warum da ein sleep rein muss, da muss ein sleep rein, damit die
event loop weiter laufen kann, weil das ganze ist nicht multithreaded, das ganze ist quasi
ein thread, wo die aktuelle Aufgabe immer kurz das abgeht, das ist wie ein JavaScript,
es ist wie ein JavaScript, wenn du ein JavaScript eine Endlosschleife macht, hängt dein Browser,
in wirklichkeit passiert an der Stelle quasi ein return und die Methode ist erstmal fertig,
dann werden alle anderen ausgeführt, die auch Arbeit haben und dann gehts an der Stelle
weiter, also es ist quasi kein return, es ist quasi ein return await oder sowas, ne
die Lösung wäre wahrscheinlich eine async await fähige HTTP library zu verwenden, sowas
wie, was stack overflow sagt, das hier ist POG, das soll man verwenden, ich mein theoretisch
können wir das, theoretisch können wir das einfach benutzen, alter was, die Musik passt
ja mal, passt ja mal ganz, ganz vortrefflich zu wir programmieren Python Zeug, so besser,
ja RGB, RGB kommt dann schon noch, guck die empfehlen auch man soll IO Http verwenden,
weiß nicht ob ich das haben will, Kleinexample, hier, hier kannst du sagen, await response,
ich mein wir könnens mal ausprobieren, also pip install IO Http, warum verwendest du
nicht speedtest CLI, weil ich nix lerne, wenn ich einfach speedtest CLI verwende, es ist
nicht Sinn und Zweck der Sache, dass ich jetzt da irgendwas tolles neues erschaffe, was noch
nie da gewesen ist, was nutzt du für ein tool zum programmieren, was meinst du genau, das
Terminal, die IDE, das Betriebssystem, der Winnow Manager, also das hier ist anscheinend
PyCharm Community Edition 22.1.3, hab ich gestern zum ersten Mal installiert, also ich
kann jetzt nicht wirklich sagen, ob das was taugt, aber nachdem ich die ganzen anderen
Jetbrains Dinger häufig verwende, denke ich das taugt, wie würde das unter der Haube
funktionen wenn man die Funktion awaiten kann, naja, so, ohne das Lieb, dann würde das nämlich
das hier schon, dann würde das diese read Funktion intern handeln für mich, indem
es irgendeinen future returns, was dann completed, wenn ich drauf awaite, also im Prinzip das,
was das Ding hier wohl macht, probieren wir jetzt aus, aber das Standard Library Http
Klein kann das anscheinend nicht, also Async Http und jetzt müssen wir was machen, Async
with Session, ich will keine Session, geht das nicht auch einfach ohne Session, also
kann ich nicht einfach sagen, Ayo Http Request oder sowas, oder einfach, einfach, jetzt vielleicht,
ne, ne, ne geht nicht, Request und jetzt, kann ich da jetzt reinschreiben, wow, MonkaS Alter,
kann man das jetzt awaiten, ja, funktioniert das jetzt, also hier, ich brauche ja keine
Session, oder, Client Session, geht das nicht ohne, also einfach einen Request machen geht
nicht, oder wie, also dass ich sowas sage, wie irgendwie, keine Ahnung, Http, Ayo, Request,
ne, ah, Response, ach hier muss ich jetzt wirklich sagen, get oder wie, ah ne installiert
habe ich doch schon, ausführen, Bäm, Lul, was hat er für Schmerzen, Define Add, Task
was never retrieved, what, await, so, ach fuck Alter, keine Ahnung, ok, vielleicht, vielleicht
mache ich es doch einfach mal nach dem Tutorial, ich mache es mal nach dem Tutorial, also, aus
irgendwelchen Gründen, muss es jetzt doppelt eingerückt werden, weil, Pog mehr Einrückung,
so, und jetzt so, und jetzt kann ich sagen, await read, ne, ne, wie ich kann das nicht
schankt lesen, mein Gott, warum ist das immer so kompliziert gemacht, das ist ja, da blickt
doch keiner durch, Response, wie funktioniert das, also das scheint ja nicht zu tun, wie
ich das hier gebaut habe, weil, Bäm, was sagt denn Stagoverflow, ja, ich will, ich will
awaiten, allerdings nicht komplett readen, ich will es ja nicht, ups, ich will den Kram
mir nicht komplett einlesen, ich will es ja der Chunkweise einlesen, also das geht anscheinend
nicht, Response Payload, das will ich nicht, ich will das in Chunks einlesen, ok, Chunks,
streaming API, jetzt wird's, jetzt wird's advanced hier, stream reader, was, ok, Moment,
was, Response, was, Content, aha, ah, hier kann ich jetzt angeben, wieviel ich lesen
will, oder, aha, also so, ok, ich keine Ahnung, was passiert, das ist gut, ah, das schaut
mal besser, ok, funktioniert, easy, einfach, einfach durch, einfach durch die Hilfe, durch
GBA, hier gibt's auch noch mehr, Chunks, kann ich nicht die Chunk-Size einstellen,
data, Async 4, boah, jetzt, jetzt wird's aber 5 header, Async 4, data, end of HTTP-Chunk,
das heißt im Endeffekt, ich brauch meine, meine Wile-Schleife, aber nicht mehr, das
ist 6-headig, alter, ok, nice, aber jetzt weiß man ja gar nicht, wie groß die, wie
groß ist denn jetzt, so eine Chunk-Size, kann man das nicht angeben, ah, ok, die Chunk-Size
ist immer ein bisschen anders, so wie gerade Daten reinkommen, naja, warum nicht, alles
klar, ok, ich lass es jetzt mal so, ich find's halt etwas umständlich, vor allem hier,
dass man jetzt, irgendwann bin ich ja mit Einrückungstiefe irgendwo da hinten, ja,
es wäre mir tatsächlich lieber, wenn ich das mit dieser Session überspringen könnte,
aber vielleicht geht das ja wirklich mit Request, Request, Request, get, ne oder, ah, oder, ah,
doch easy, einfach, also das muss ich sagen, das muss ich den Python-Library-Programmieren
echt lassen, irgendwie ist es doch halbwegs intuitiv wieder Krämpel zu benutzen ist,
nicht dass das jetzt in irgendeiner Art und Weise die gewollte Verwendung ist, das weiß
ich nicht, das müsste man, müsste man schauen, aber es funktioniert in der Tat relativ intuitiv,
ja, Make a Request, was wollen die immer mit ihren Sessions hier eigentlich, ah, was auch
immer, also ich wusste weder, dass das war, noch, würde uns da irgendjemand einladen zu
machen, doch, klar ist, war wird, wenn man, 퀜성대상 Task Force
Das ist wirklich komplett so, eine Ohr rein, andere raus, geht mir voll am Arsch vorbei.
So, aber unser Krempel funktioniert und ist jetzt super krass 5-Headed Async, was auch
immer.
Leute, warum gibt es denn sowas wie, ich bin da echt ein bisschen dran, es gibt IO-HTTP,
es gibt Requests, es gibt HTTPX, es gibt Urlib 2, warum gibt es 50 Milliarden HTTP-Libraries,
das ist ja fast schon wie bei NPM, Versus Requests, da gibt es natürlich auch 30.000
Blogposts, die dir erzählen, was, wie, wo, HTTPX wurde mir gestern auch in einem Blogpost
vorgeschlagen, dass das auch gerade voll angesagt ist, das ist nämlich der Next Generation
HTTP Client, das hier ist anscheinend Old Generation und das ist Next Generation, kann
man das wenigstens erwarten irgendwie, ach, ich lasse das jetzt mal so, das funktioniert
ja.
Warum peißen, ja weil ich es mir angucken will.
Also der Grund ist folgendes, ich mache ja hauptsächlich die Sachen in.NET und für
so Kleinigkeiten bastle ich meistens so 20-30 Zeilen Bash zusammen, aber sobald Bash mehr
ist als eine Seite oder sagen wir mal, sobald es mehr wird als eine Schleife und 1-2 Ifs
und ein paar Grabs gepiped ineinander wird es eklig, deswegen habe ich mir gedacht es
wäre doch nicht verkehrt im Jahr 2022 mal ein bisschen seine Peißenskills zu verbessern,
ich habe ja damit schon Sachen gemacht, so ist das nicht, also so ganz, das hat man denke
ich gestern im Stream auch gesehen, ich bin zwar recht planlos, aber so verwendet habe
ich das ab und zu schon mal, aber wirklich Ahnung von neuen Sachen, wie irgendwie Async
Await in Python oder dass man jetzt in Schleifen direkt Variablen zuweisen kann, sowas habe
ich noch nie verwendet, deswegen habe ich mir gedacht ich bastle mir einfach ein Speedtest
und wenn das gut funktioniert dann habe ich mir ein bisschen mehr Ahnung, gibt es eigentlich
was cooles womit man Bundle zu Single File oder sowas machen kann, also das was du bei
.NET eingebaut mittlerweile mit Standalone machst, gibt es da irgendwelche coolen Sachen
oder ist da vielleicht auch etwas eingebaut mittlerweile, nee Flatpacks ganz bestimmt
nicht, Single Executable, was gibt es denn da so, irgendwelche aktuellen Posts please
nicht von 2011, Pie Installer, Pie Installer, Pie Installer Standalone, Pie Installer und
der Bundle und der Bundle den Interpreter dann mit rein oder sowas wahrscheinlich, in
der Berufsschule haben wir C gemacht und später ein bisschen C sharp, das weiß ich noch,
das war easy, der Lehrer war aber auch komplett unfähig und hatte keinen Bock, zumal man
aber auch sagen muss, die Leute in der Berufsschulklasse waren auch richtig extrem Three Head, also
das war so nach dem Motto, nach 2 Jahren Ausbildung, ja Moment, wo muss ich bei Print F jetzt das
Simikolon machen, das war wirklich typische Frankfurter Low IQ Geschichte, so und jetzt
machen wir das ein bisschen schöner, also wir haben jetzt dafür gesorgt, dass das alles
Essen läuft und super modern und Five Headig ist, Import Time können wir raus machen, ah
nee Moment, brauchen wir Perfcounter, das brauchen wir, so und jetzt probieren wir das
mal hier mit aus, was hältst du von C++, ich bin mir nicht sicher Käsekuchen, ich hab dich
hier noch nie gesehen, deswegen bin ich mir nicht sicher, ob es ein Heechi Bait ist, he
doesn't know, he lacks critical information oder ob du das wirklich wissen willst, weil
das Problem ist, das ist hier ein wiederkehrendes Meme schon fast im Stream, in der Regel fragen
mich die Leute nach meiner Meinung zu C++, wenn sie wollen, dass ich mich 20 Minuten
über C++ aufrege und nichts anderes mache dann in der Zeit, also meine Meinung, also
ganz kurz für dich, weil wie gesagt, ich hab dich hier noch nicht gesehen, ich finde
C++ ist eines der abscheulichsten Ausgeburten, die sich jemals jemand ausgedacht hat und
ein modernes C++ frickelt an so vielen Stellen rum und macht das ganze so unglaublich wir
und noch viel mehr komplexer, dass ich mich ernsthaft frage, was das C++ Gremium jetzt
die letzten 10 Jahre gemacht hat.
Nein, C++ ist nicht beste Chat, machst du sowas öfters, ich mach sowas fast jeden Stream
ja.
Da mach ich kein Video zu, warum soll ich ein Video zu machen, was C++ sagt?
Das passt doch nicht, auf YouTube ist dein Video Content was komplett anderes als hier,
ne ne, aber C++ geht mir einfach von Anfang bis Ende auf den Sack, also wenn ich die
Auswahl hätte, ob C oder C++, dann tatsächlich keins von beiden, aber wenn es unbedingt sein
muss, dann fast schon lieber Raw C, leider hast du dann halt, naja manche Funktionalität
ist schon nicht verkehrt, die Standard Library von C++ ist halt kacke gemacht, aber es ist
immerhin eine Standard Library, mit der du was anfangen kannst, aber ansonsten, ich mein
allein schon, allein schon wenn ich mir angucke, dass C++ jahrzehntelang keine String to Upper
oder to Lowercase Methode hatte und du in C++ sowas machen musstest, also mittlerweile
kannst du in C++ sowas machen glaube ich, ich glaube sowas gibt es mittlerweile auch
in C++, aber du musstest in C++, wenn du einen String von klein in Großbuchstaben machen
wolltest, musstest du vorher sowas machen, Standard Transform, fragt mich nicht, Beginn,
End, Start, to Upper oder so, was zum Teufel ist bei denen los, wer denkt sich sowas aus
zu machen, also wenn ich die Auswahl hätte, naja, es kommt halt drauf an was du machst,
das ist halt so die Sache, ich mach die meisten Sachen zumindest aktuell, hauptsächlich in
.NET, was super ist auch zum Einstieg, C-Sharp ist eine super Sprache, Microsoft macht sinnvolle
Sachen mit ihrer Sprache nicht wie das C++-Cremium, was alles eigentlich nur verschlimmbessert
und C++ ist ja an Komplexität, also mir fällt ehrlich gesagt keine Programmiersprache ein,
die komplexitätstechnisch in einer Liga spielt wie C++, das ist nichts Gutes, die Sprache
versteht keiner mehr, es gibt in C++ 30 Varianten was zu machen, von Templates fange ich erstmal
gar nicht an, Templates sind tatsächlich, muss ich sagen, nein, Assembler ist deutlich
einfacher als C++, Assembler ist die Komplexität, dass du, sag mal, deine Logik komplex wird
bzw. du den Überblick behältst, so wie ist jetzt der State von deinem Programm, aber
von sich ist das recht überschaubar von den Funktionen her, bei C++ ist halt so die Sache,
du weißt im Endeffekt eigentlich gar nicht was es macht, dass dann musst du an manchen
Stellen musst du drauf achten, irgendwas zu freeen, dann sollst du es wieder nicht freeen,
dann sagen sie, ja nimm Unic oder Smart Pointers, es ist wir, C++ ist einfach komplett wir.
C++ ist was für masochistisch veranlagte Programmierer, C++ kannst du eigentlich getrost
in die Tonne kloppen, leider kommst du in manchen Bereichen um C++ nicht drum herum,
sei es beispielsweise, wenn du Arduino Zeug programmieren willst oder einen ESP32 oder
sowas, das ist C++, man kann es theoretisch auch in C machen, aber gerade Arduino ist
da sehr C++ lastig, ja es gibt auch ein Python Interpret, aber es ist alles Müll außer C
und C++ drauf, es gibt auch Rust als Versuchsprojekt für ESP32, ist aber auch nicht so das wahre,
also eigentlich kannst du den Kram nur sinnvoll in C und C++ programmieren und gerade wenn
es Arduino ist, Arduino mag C++, in manchen Bereichen der Spieleentwicklung kommst du
wahrscheinlich auch nicht dabei, also ich denke gerade wenn man Unreal Engine verwendet
und dort selbst Funktionen hinzufügen will, dann wirst du wahrscheinlich an C++ nicht
vorbeikommen und sowas wie WebAssembly, da gibt es eigentlich nur sinnvollerweise Rust,
C oder C++ oder vielleicht Go, tja die mögen es wahrscheinlich auch nicht, wahrscheinlich
finden die es genauso kacke, aber Arduino ist sehr C++ affin so was die Libraries angeht.
Also ganz ehrlich C++ ist einfach abfuck, aber jetzt machen wir mal weiter und zwar
was ich gefunden habe ist hier auf GitHub, so eine Konsolenformat Library für Python,
du hast nie eine IDE verwendet, Ritual Studio plus Extensions regelt, da muss ich dir jetzt
leider beibringen oder nahelegen, dass Ritual Studio plus Extensions quasi eine IDE sind,
also ich mein wenn du einen Text Editor soweit mit Extensions aufbohrst, dass es mehr oder
weniger alle Funktionen einer IDE hat, dann ist das eine IDE, ach so Arduino, ja die Arduino
IDE finde ich ist auch Crap, ich benutze nur Platform.io, Platform.io ist wirklich nice,
das einzige dumme an Platform.io ist, dass du die Microsoft C++ Extensions verwenden
musst, da wäre mir was anderes lieber, aber mein, alle mal besser als die komische Arduino
IDE, hat die Arduino IDE mittlerweile eigentlich Autocomplete, die hatten irgendwie 20 Jahre
lang kein Autocomplete, wo jeder da hergelaufene Editor zumindest minimales Autocomplete hatte,
haben sie nicht oder, haben sie nicht, oder?
Kein Autocomplete Feature, ah das ist irgendein Beta, irgendein Beta Ding, haben sie nicht?
Ne, Arduino IDE ist Müll, deswegen, Platform, also für Arduino Kram, Platform.io beste,
probier mal, was CIC, was soll denn das sein, CIC, CIC was, Github, eine Programmi, ne noch
eine Programmiersprache, das brauche ich jetzt auch nicht, aber Platform.io ist ziemlich
POG, also ich muss sagen, ich sehe überhaupt keine Daseinsberechtigung für mich zumindest
mehr, was die Arduino IDE angeht, also nur, wie ich das benutze ja, seit es Platform.io
gibt.
Warum nicht, weil ich jetzt erstmal ein bisschen Peißenzweich lernen will, ich kann nicht
20 Programmiersprachen, was, als nächstes kommen die Leute dann mit Cobol oder Haskell
oder Scala, Erlang um die Ecke, ja gut, unter Windows ist ja alles schlimmer.
Ich überlege gerade, ich überlege gerade, was von dem Zeug, was ich hier offen habe,
was ich davon produzieren würde, profitieren würde, wenn ich es unter Windows machen würde,
also weder, nix, nix, also von dem her würde wirklich, ich meine, überlegt euch mal, ich
würde mein ordentliches Terminal, was ich hier habe, ernsthaft durch sowas hier ersetzen,
Alter.
Gut, ich meine, ich könnte das Windows Terminal benutzen.
Das Neue, das da, aber es ist auch alles Müll gegen ein ordentliches Terminal mit ordentlicher
Shell.
Jaja, kannst du, ich mach alles, was mit dem ESP32 mache ich über Platform.io, du kannst
sogar die ESP-Sonderlocken verwenden, du kannst sogar den Ultra Low Power Prozessor direkt
über Platform.io programmieren oder du kannst die Partitionstabelle auf deinem ESP32 ändern
und flaschen über ein CSV-File, das ist ziemlich pfeifert.
Wo wir gerade dabei sind, haben die schon das neue Arduino 2 gedönst in, schon drinnen?
Ah, anscheinend, ja, da muss ich jetzt gerade mal was schauen.
GitHub, Platform, IOS, ESP32, da muss ich nämlich gerade mal was schauen, ob die schon
ihre Examples aktualisiert haben für das da, ah, das funktioniert jetzt, cool, da müssen
wir demnächst mal ein bisschen ESP32 basteln, die haben ihr Projekt anscheinend jetzt soweit
angepasst, dass du Arduino 2 mit ESP, also ESP-EDF ist das Framework von Espressif, Espressif
ist der China-Chinesen Hersteller vom ESP32 Controller und Arduino ist quasi nur ein Aufsatz,
aber beides in Kombination zu verwenden hat seinen Vorteil, weil du kannst Arduino und
Arduino Libraries verwenden und du kannst aber mit ESP-EDF an den grundunterliegenden
Sachen rumbasteln, was du mit dem statisch kompilierten Arduino sonst nicht kannst.
Aber da waren wir eigentlich gar nicht stehen geblieben, ich wollte mein Python Zeug weiter
basteln.
Also, ich hab folgendes gefunden auf GitHub und damit kann man richtig High-IQ-Konsole-Anwendung
machen.
Ich hab gedacht, das probieren wir mal aus, ja das stimmt, die Plattform IO-INI ist erst
ein bisschen gewöhnungsbedürftig, aber an sich finde ich das richtig geil, du kannst
ja sogar diesen ESP32, oh wie heißt denn das Ding, was dir die Fehlermeldung decoded, dass
du besser weißt, wo was kaputt ist.
Es gibt so einen ESP32 Stack Trace Analyzer und so, das kannst du da automatisch mit einbinden,
dass du bei den Fehlermeldungen nicht einfach mehr nur irgendwelche RAM-Adressen um die
Ohren geschmissen kriegst, sondern, meinst du den Dump, kann sein, ich weiß es aus dem
Kopf kann ich, das kriegst du zumindest nicht mehr nur random Speicher-Adressen gegen Kopf
geschmissen, sondern so ungefähr ein bisschen was, was es sein könnte.
Ja, das Video haben wir uns auch ganz kurz angeguckt, aber das hab ich als zu langweilig
im Stream eingeschätzt und hab's wieder ausgemacht, kann ich mich noch dran erinnern, das muss
man sagen, das ist tatsächlich relativ banal.
Ich bin mir nicht ganz sicher, wie er's gemacht hat, aber ich vermute mal, im Endeffekt hat
er ein Relay dran gemacht und einen Spannungswandler und dann über irgendeinen GPIO Pin geguckt,
ob's geklingelt hat.
Oder aber er hat einen Analog-Digital-Converter dran gemacht und hat den Input irgendwie ausgelesen
oder so.
Ja, das ist tatsächlich relativ banal, so was zu machen, wenn man ein bisschen was damit
gemacht hat.
Ich sag nicht, dass es banal ist, insgesamt so was zu machen, sondern nur, weil man ein
bisschen was damit gemacht hat, ist es relativ simpel, so was zu bauen.
Aber unser bestes Projekt, das meinte ich, genau, das da, das meinte ich, ja genau, der
der dann, anstatt diesen Krempel so was hier ausspuckt.
Moment, wenn du denkst, das sind viele Tabs, ich hab noch einen zweiten Browser offen mit
Tabs.
Und hier auch, aber hier hab ich vorhin schon irgendwie 80 Tabs zugemacht.
Ja, das ist gut, das ist schön, wenn das Leute inspiriert hat, weil das sollten mehr
machen.
Also ich bin der Meinung, jeder, der mit seiner Kohle auskommt, also auch mal ausgerechnet
mal vier Tagen auskommen würde, sollte das machen.
Freizeit oder halt Zeit, wo man machen kann, was man will, ist durch nichts zu ersetzen.
Niemand wird, wenn er irgendwann 80 ist oder 90 ist und so an sein Leben zurückdenkt,
wird er sagen, oh, ich hätte mal unbedingt mehr arbeiten sollen, auch hätte ich mal
mehr gearbeitet, das wäre geil gewesen.
Ist nicht so, deswegen, am besten ist, man hat mehr Zeit, das zu machen, worauf man Bock
hat, das ist das, wo es am Endeffekt drauf ankommt.
Und auf was man Bock hat, kann halt die unterschiedlichsten Sachen sein, soll jeder machen, was er will.
Also 32 Stunden sind wirklich super, bei mir sind es 30 Stunden, also einfach einen Tag
die Woche weniger.
Das kommt einem erstmal auf dem Papier nicht viel vor, nee, nee, das kannst du einfach
in den Plattformen auch konfigurieren, also einen Tag weniger arbeiten kommt einem erstmal
gar nicht so viel vor, denkste was, nur einen Tag, aber im umgedrehten Fall ist es so, dir
kommt alles andere auch dementsprechend viel kürzer vor, also 4 Tage die Woche arbeiten
ist viel, viel schneller rum als 5 Tage die Woche arbeiten und 3 Tage am Stück Wochenende
haben ist viel, viel erholsamer als nur 2 Tage am Stück Wochen haben.
Weil ihr kennt das bestimmt, also Freitags seid ihr auf der Arbeit, denkt euch ah cool
Wochenende, Freitags macht man wahrscheinlich erstmal nicht mehr so viel, weil Freitags
ist man müde, wenn man 8 Stunden gearbeitet hat bzw. hat nicht mehr so viel Power, ja
gut vielleicht noch 20 jährige oder so, keine Ahnung, aber ich bin Freitags immer müde,
habt da irgendwie keinen Bock großartig was zu machen, so, dann ist Samstag, Samstag schläft
man erstmal aus, weil man die Woche ein bisschen nachholen muss, dann kann man Samstag vielleicht
noch ein paar Dinge, die man erledigen muss, bis einkaufen, bis aufräumen, bis sonst was,
so dass man im Endeffekt ab Freitagnachmittag dran denken kann das zu machen worauf man Bock
hat, dann kann man, äh Samstag, ab Samstagnachmittag anzufangen das worauf man Bock hat, dann
macht man Samstagnachmittag das worauf man Bock hat, dann schläft man Sonntag aus und
ab Sonntagmittag denkt man sich eigentlich schon, äh morgen geht ja schon wieder die
Arbeit los und dann kann man sich auch gar nicht mehr so richtig auf den restlichen halben
Sonntag den es gibt konzentrieren, weil man sich immer denkt, äh jetzt noch duschen gehen,
dann muss ich hier das Teusch zurechtlegen, dann muss ich überlegen ob ich morgen noch
was mitnehmen muss und sonst was, ja, genau, das kommt auch dazu, zumal wenn man den Montag
frei hat, ich habe ja den Montag frei, ich habe ja drei Tage am Stück, dann ist es nämlich
so, Freitags denkst du so ja gut, ausschlafen Samstags, dann machst du Samstag was du willst,
Sonntags komplett was du willst und Montags komplett was du willst, weil am Montagmittag,
selbst wenn ich jetzt dran denke, ach morgen musst du wieder arbeiten, das juckt mich gar
nicht, weil ich mir denke nö, eigentlich bin ich jetzt super entspannt erholt, hab
genug gemacht worauf ich Bock hab und die nächsten vier Tage halte ich auch easy durch,
also das ist, kann ich echt nur jedem empfehlen Teilzeit zu arbeiten, aber jetzt mal weiter,
hier wo sind wir stehen geblieben, was muss ich installieren, rich install, bam, du machst
vier mal sechs Stunden, heute zwölf, beste, also ich mache es mittlerweile so, ich habe
drei Tage Homeoffice, einen Tag Arbeit nach Frankfurt und ich mache es nach Möglichkeit
so, dass ich dann an dem Tag Frankfurt nicht total früh aufstehe und nicht total spät
heim gehe, sodass ich irgendwie eins, eineinhalb Stunden Minus mache und das hole ich dann
über die anderen drei Tage wieder locker auf, was ich gerade mache, ehrlich gesagt mache
ich gerade nichts, sondern schwätz hauptsächlich, ursprünglich war mal die Idee, ich baue einen
Speedtest und das funktioniert auch schon, aber noch nicht so schön wie ich mir das
vorgestellt hab, aber mit modernen Python Sachen hier zum Beispiel Async und sonst
was, rein zum üben ja, weil ich selbst nicht so viel Ahnung davon hab, so und jetzt wollte
ich mal gucken, wie man die Konsolenausgabe schöner machen kann, Console Print, kann
man irgendwie die Farben, ach hier guck mal, Console Print, das testen wir jetzt mal,
Console Print erinnere mich fast schon ein bisschen an.NET, nee, ist es rich, Console,
nee, ach ich hab's gar nicht importiert oder, import rich, is rich, rich, äh das ist aber
nicht, Print haben wir hier, ah guck mal, jetzt hat es Farbe und ist unterstrichen,
so will ich das haben, worauf ich eigentlich viel mehr abschiele ist, ob man Progress Bars
schöne Progress Bars machen kann, sowas da, sowas will ich machen, hier guck mal, ja,
progress progress bar, time, sleep, ja, guck mal hier, jetzt haben wir, advanced to progress
bars, so und ich hab mir jetzt überlegt den Speed Test, den Speed Test, den könnte man
ja mit progress bar machen, also das der quasi, das ist ja hier nur das default Ding, das
dann hier steht, keine Ahnung, testing und die bar machen wir weg, Kommandozeilen Argumente
muss ich mir auch noch angucken, wie man das mit Python gescheit macht, Leute taugt die
Standard Python Kommandozeilen Option Parser Library, die dabei ist oder ist da auch empfohlen
irgendwelche GitHub-Dinger zu verwenden, ArcPars, ja ist das das was dabei ist, taugt
das, weil ich bin eigentlich kein Fan davon, für Gott und die Welt immer, also das ist
das was mir bei JavaScript ein bisschen auf den Keks geht, dass du dann erstmal 500 NPM
Packages hast, bei simplen Projekten und da ist dann so tolle NPM Packages drinne wie
ist odd und is even und sowas, ansonsten Typer, 8 Sterne, an den ganzen Python Projekten haben
ultra krasse GitHub, massive GitHub Sterne, Typer, build real, ne build great CLIs, easy
to code based on Python type hints, mit Rust, wir haben doch letztens was mit Rust gemacht
und komplett versagt, ich hab doch das letzte Mal versucht mit Rust FFmpeg WebAssembly zu
machen und festgestellt das hat nicht funktioniert, ja kannst ruhig schicken, ich kann da kein
Code Review machen, ich kann garantiert kein Rust Code Review machen, ich hab von Rust
keine Ahnung, also Code Review sollte ja schon irgendjemand machen, der ein bisschen Ahnung
hat wie man die jeweilige Sprache, Standard Libraries und so die best practice Sachen
in dieser Sprache macht, kommt dir öfters vor bei NPM, hat doch erst vor einem halben
Jahr oder so oder vor ein paar Wochen, ich glaube gar nicht so lange her, wo wieder irgendwas
war bei irgendeinem NPM Package, aber ja wir können tatsächlich was mit Rust machen, wenn
ihr eine gute Idee habt, so für mini, wir könnten theoretisch einfach den Speedtest
auch in Rust programmieren, wisst ihr vielleicht sollten wir so einen Speedtest mal etablieren
als Standardtest für neue Sachen, wir bauen einfach einen kleinen Speedtest, wenn der Speedtest
dann quasi die Features hat wie die anderen Versionen, dann kann man die Sprache halbwegs
so, ja Sys, Rqv, das muss ich ja selbst parsen alles, ja das guck ich mir dann später mal
an hier, ja sowas, sowas, also im Prinzip sowas wie, sowas hier, das benutze ich für
DT Sachen gerne, was alles mögliche mit Terminals zu tun hat, das hast du gemacht, ja offensichtlich
man sieht den Namen, ein arithmetic parser in Rust, das heißt man kann einen String übergeben
zum Beispiel irgendwie 1 plus 1 mal 2 und der guckt, dass es richtig gepasst wird oder
wie, ja anscheinend, oh 5 hat time hier, high IQ, ja Spectre ist ein bisschen gewöhnungsbedürftig
aber ich finde es eigentlich ganz nice, alter Rust, Rust ist einfach high IQ, wie sonst
was, guckt euch das an hier, Function, Pars, Mutable, Reference, Self, Return Type, Reference
Box, 5 hat, Rust ist einfach way too smart alles, aber der Unterschied zwischen Rust
und C++ ist, dass Rust irgendwie sinnvoll, sinnig in sich ist und C++ nicht, Pog, ich
kanns mir nicht wirklich, ich hab keine Ahnung von Rust, ich kann das nicht reviewen, meine
dumme Frage, für was wird man, wird Rust verwendet als Spiel, ja das hat ja damit, das eine hat
mit dem anderen nichts zu tun, was lustig ist, wenn du nach Rust Reddits suchst, findest du
als erstes anscheinend mittlerweile die, früher hast du als erstes die, das Spiel gefunden,
wofür du das verwendest, frag mal die Leute von Mozilla, Firefox sind einige Teile in
Rust programmiert, der Vorteil von Rust, ganz, ganz simpel gesagt ist, dass du, dass die
versucht haben, die, guck mal, Sicherheit von managen Sprachen mit der, also Sicherheit
in Form von, dass es macht was du denkst, dass es macht und nicht crasht und sowas,
du kannst, du kannst in Rust selbstverständlich auch unsicher programmieren in Form von, du
passt Input nicht richtig oder sowas, ja, aber Rust versucht quasi die Geschwindigkeit
von C zu kombinieren mit der Sicherheit von irgendeiner managen Sprache, das klappt nicht
so hundertprozentig, also performanstechnisch schon, performanstechnisch nimmt sich Rust
und C nicht wirklich was, mal ist das eine schneller, mal ist das andere schneller, aber
so mit der Sicherheit, das ist zum größten Teil klappt das, ja, genau, ja, also sowas
wie Stack Overflows passieren dir in Rust erstmal nicht so einfach, ja, also, man könnte sogar
so weit gehen sagen, eigentlich so gut wie gar nicht, Rust, der Rust Compiler meckert
dich schon an, ja, ich meine, du kannst natürlich immer noch drauf anlegen, du kannst immer
noch sagen, lese ein User Input und nehme das als Index für einen Array, aber selbst
dann macht Rust irgendeinen Runtime Check, der natürlich dann Performance frisst, ja,
aber, ja, besser als Overflow, ja, aber Rust ist ziemlich gute Kombination aus so ziemlich
die krasseste Performance, die du neben C kriegen kannst, plus deutlich sicherer in
Puncto, dass es halt das macht, was du erwartest, also wenn du dein Rust Programm so gebaut
hast, dass der Compiler dich nicht anmeckert, kannst du relativ sicher sein, dass es auch
wirklich das macht, was da steht, das kannst du ja bei C++ und C nicht so unbedingt sein.
Das einfachste Beispiel dürfte sein, du greifst halt auf irgendeinen Speicher zu, der, sagen
wir mal, nicht bei Initialisiert ist oder so, was weiß ich, du legst einen Array an und
denkst 100 Stellen reichen dir aus, aber in deiner Schleife zählst du bis 101 und greifst
dann auf den 101. Index zu. Und das ist halt nicht definiert, was dann bei rauskommt,
zumindest in C und C++ nicht. Du greifst halt auf den Speicherbereich zu, eins höher als
von deinem Array. Wenn du Glück hast, crash das nur. Wenn du Pech hast, liegt dann dort
irgendwelche anderen Dinger, wo du dann vielleicht gar nicht drauf zugreifen willst oder du
benutzt das als Abbruchsbedingung und in Wirklichkeit steht dann da nicht Fault, sondern True, weil
irgendein Wert drin steht und es läuft weiter und es macht an anderen Stellen weiter, wo
es gar nicht weiter machen sollte. Also, das kann dir bei Rust nicht so ohne weiteres passieren.
Das ist richtig, Rust macht es halt kompliziert. Aber gut, dafür kannst du bei Rust relativ
sicher davon ausgehen, dass wenn das kompiliert, dass das das macht, was da steht. Das heißt
nicht, dass deine Logik richtig ist, aber es macht wenigstens das, was da steht. Das
ist ja bei C und C++ nicht so. Und bei C++ hast du den Nachteil, du verstehst noch nicht
mal auf den ersten Blick, was eigentlich da steht. Bei C kannst du wenigstens erkennen,
was da steht und was es machen soll. Ob es das dann wirklich macht, das ist wieder was
anderes. Also, das macht es, aber es kackt halt auch an den Stellen nicht ab, wo es was
macht, was es nicht machen sollte. Bei C++ liest du das und denkst dir, fuck, was passiert
hier überhaupt? Das ist richtig. Ja, du hast Recht, wo hier war es? Da ist er. Er hat Recht,
das ist so. Also ein Buffer-Overflow, korrekt, kein Stack-Overflow. Äh, wüsste ich jetzt
nicht, was ich dazu sagen soll. Die Error-Messages vom Rust-Compiler sind tatsächlich nicht verkehrt,
ja, das stimmt. Also ganz anders zum C++-Compiler, wo du in Zeile 78 in Semikolon vergisst und
er meckert dir drei Seiten an, die angeblich in Zeile 5 falsch sind. FFZ. So, fertig. Nein,
ich habe keine Ahnung von Webpack. Das ist schwarze Magie für mich. Okay, weiter geht's.
Also, wo sind wir stehen geblieben? Ich wollte eine Progress Bar machen. Eine Progress Bar.
Also, Progress Bar, Progress Bar. Sowas da, Progress, Progress Bars. Nur mit dem Unterschied,
dass ich nicht die Standard-Progress Bar haben will, sondern eine Progress Bar, wo ich selbst
sowas hier reinschreibe. Haben die eine Hilfe-Seite? Da. Bam. Probier mal GitHub Copilot aus. Ja,
könnte ich echt. Das ist tatsächlich eine gute Idee. Wir haben es glaube ich schon mal
ganz kurz Just for Fun ausprobiert. Aber das können wir uns wirklich mal angucken. Progress
Display. Auf geht's. Basic Usage. Advanced Usage. Okay. Also, Import. Progress, ich kopiere
mir den Kram mal und dann gucken wir, wie wir das anpassen. Ich natsche das jetzt einfach
mal hier rein zum ausprobieren. Okay, nice. Also, die Standard-Progress-Bars funktionieren
schon mal. Aber ich will ja diese Progress Bars in dieser Art nicht haben. Also, ich brauche
eigentlich nur einen Task. Und zwar nur einen Task für, keine Ahnung, einfach Speedtest.
Der Desktop, klar, ich blick da durch. Guck, easy. Sag was, sag was, was ich suchen soll.
Ich finde es sofort. Hot. Ach, hier in der Mitte ist es, ja. Warum hast du zweimal Firefox?
Weil der Firefox Installer gebaited hat. Das ist der gleiche Firefox. Leute, es ist mega
easy hier was zu finden. Hier unten hat es das sehr laut. Ob, kein Problem. Ah, Progress,
Progress Bars. Progress Bars. Wie kriege ich jetzt eine Progress Bar, in der ich selbst
Text reinschreiben kann? Updating tasks, hiding tasks. Columns, das klingt gut. Text
Column. Ja, sowas, sowas will ich. Time Remaining Column, nee, das brauchen wir nicht. Time
Elapsed Column. Spinner, sowas, sowas will ich haben, genau. So, zeigt mal her. Und weg.
Import, Import. Ah, guck mal. Jetzt haben wir einen Spinner und wir haben die Zeit, die
das ganze schon läuft. Das ist doch schon mal nicht schlecht. So, was brauchen wir als
anderes noch? Text Column oder was war das? Text Column. Oh, warte. Text Column. So.
E, was hat der hier kopiert? E, OnKS. Da, da. Text Column Import. Speed Tests, ok. Ja und
jetzt müssen wir eigentlich nur noch hinschreiben, wie schnell, wie schneller denn ist. Aber
wie kriege ich denn jetzt hier was rein, was ich, wie kriege ich da jetzt Text von mir
rein? Advance bringt mir nicht so viel, ich will da den Text ändern. Update. Update. Update.
Ach, ich kann die Description ändern? Das ist gut, wenn ich die Description ändern kann.
Description gleich Kekl. Ah, ok, verstehe. Das ist gut. Das heißt, hier schreibe ich
jetzt rein, wie schnell das ganze ist. So. Progress Task Description. Magenta Bold will
ich haben, unbedingt. Bäm. Das muss unbedingt in Magenta und Dick sein. Oh, was für einem
US Arch, by the way. Nee, Arch, das ist ein Manjaro mit I3WM. Man darf ja als Manjaro-Benutzer
nicht, nicht Arch, by the way sagen, habe ich gehört. Das ist verpönt. Aber die neue
Arch Linux VM steht schon in den Startlöchern. Arch, by the way. Die müssen wir nur noch
irgendwann fertig einrichten. So. Ok, wie kriege ich denn das jetzt hin? Also, ich will
ja das nicht hier drinne machen, sondern eigentlich in meinem Download-Test, also nämlich hier
will ich das machen. So. Progress. So, progress. Lass mal kurz erlegen. Total ist mir wurscht.
Progress. Ich glaube, die Schleife muss da rein. Das kann alles weg. Ja. Oh nee, was
war das jetzt mit dem Update? Progress-Update. Und jetzt mache ich einfach nur hier die Raid
oder hier Raid-Zum. Zum Raid. So. Und das ganze als Ring. Und jetzt. Hey! Ok, das sieht
hässlich aus. Das muss ich, das muss ich rounden. Wie roundet man gescheit? Gibt's
eben was wie round? Das ist bestimmt nicht so gedacht. Kann man da round drum herumschreiben?
Round. Aha. Und jetzt, und jetzt please auf zwei Stellen? Nee, auf zwei Stellen? Ah nee,
hier muss ich hin. Ich hab zu wenig. Auf zwei Stellen? Nee. Moment, ich bin verwirrt.
Wo sind wir denn hier überhaupt? Round. So. Auf. Nee, man kann hier gar keine Stellen
eingeben, oder? Doch. Aber es gibt kein Autokomplete dafür. Wie macht man da jetzt eigentlich
einen String draus? Gibt's doch irgendwie Two-String oder so? String? Ich hab, ich hab,
ich hab nur andere Ideen, Leute. Es gibt doch jetzt ein neues Feature. Da kann man doch
irgendwie, irgendwie im Moment, das ging doch irgendwie so F, kann man doch Format-Strings
machen. Das ist ein bisschen wie in C Sharp die Format-Strings. Das hab ich auch in einem
Video gesehen. So. So. Und wie kann ich da jetzt den, kann ich da irgendwie das Format
für angeben heißen? F-Strings float. Jaja, so war's da. Oh, Ultra-Five-Hat. Ultra-Five-Hat,
was zum? Das funktioniert? Okay. Alter, Pog. Hi-IQ-Shit. Guckt euch das mal an. Es wird
morgen abgefragt, Chat. So. Und das ist jetzt M-Bit-Pro-Sekunde. M-Bit. Ah, das mag er anscheinend.
Okay. Wirst du den Code ver... Nee, oder? Also, man kann nicht, aber das ist ziemlich
unsinnig. Also, es gibt, es gibt zum, also ganz ehrlich, du kannst einfach Speedtest-CLI
verwenden, wenn du sowas handelst. Also ja, kann ich machen, aber ich glaube, es ist ziemlich
unsinnig, dass man, das, das sind ja auch nur 5 Zeilen oder so. Das ist einfach nur
zum Üben für mich. Das sieht tatsächlich jetzt ziemlich cool aus, muss ich mal sagen,
oder? Das hat was. Das hat irgendwie was. Du kannst zugucken, wie schnell, also wie schnell
das Speedtest läuft. Vor allem, im Vergleich zu den anderen Speedtests läuft das kontinuierlich.
Machen wir B-Top auf und gucken, was der gerade macht. Warte mal. Menu, Opti... Ah, das sieht
aus wie irgendwie ein uraltes, uraltes Game, oder? Das Overlay von, von B-Top. Options
Help. So. Update. Alle 100 Millisekunden. Jawoll. So muss es sein. B-Top. Also, wenn
mein Resource-Monitor nicht mindestens 50% CPU-Lust verursacht, dann ist ja irgendwas
falsch. Ah. Exzellent. Also, wir verbrauchen 5 Megabytes die Sekunde. Also, wir verbrauchen
5 Megabytes die Sekunde. Also, irgendwie 34 MBit. Okay, passt. Wartet mal, die Katze
soll rein. Das ist... IP League. Oh nein. Jetzt vorbei, Leute. Oh mein Gott. Oh Gott.
IP League. Fuck, Alter. Seid ihr... Chat? Seid ihr schon drin? Seid ihr schon drin,
Leute? Wer ist schon drin? War mir klar. War mir klar. Der Chat ist immer schnell drinne.
Reverse-Shell ist ab. Ja, alles klar. Passt. So. Okay, nice. Unser Speedtest sieht sogar
jetzt eigentlich ganz hübsch auf der Kommandozeile aus, oder? 35 MBits pro Sekunde. So, und jetzt
Kommandozeilen. Kommandozeilen. Arguments. Ich überlege gerade auch, ob das sinnvoll
gemacht ist hier. Aber ich glaube, es ist ganz, ganz okay. Ach. Wisst ihr, was mir da
gerade auffällt? Das ist Chrome-Terminal, ja. Ich hatte doch irgendwie so ein Hetzner-Speedtest
letztens da. Wisst ihr, was mir gerade einfällt? Ich habe keinerlei Error-Handling, gell? Also
guckt, wenn ich mich hier verschreibe, dann bam. Dann kackt es einfach komplett ab und
bleibt hängen. Und was passiert... Was anderes? Was passiert, wenn die Datei fertig... Was
passiert, wenn die Datei fertig runtergeladen ist? 100 MB oder so? 100 MB. Datei. Dann zeigt
es wahrscheinlich immer nur das letzte an. Alter, warum ist das so langsam? Na gut, ich
meine, er lädt nur mit 5 MB die Sekunde oder so. Da brauchen 100 MB ein bisschen. Normalerweise
ist 100 MB mit den normalen 400 MBit. Also, der müsste aber doch schon längst fertig
sein. Ah, ich lade das ja auch mal vier runter. Tatsächlich. Richtig. Ja, weil normalerweise
müsste er in 20 Sekunden oder so ja fertig sein. Aber der ist in einer Minute ungefähr
fertig. Ich frage mich... Mal gucken, was passiert. Mal gucken, was passiert, wenn der
Datei fertig ist. Ob es dann Fehler schmeißt oder? Jetzt müsste er aber doch so langsam
aber sicher mal durch sein, oder? Ich meine, 5 MB die Sekunde sind 50 MB in 10 Sekunden.
In 20 Sekunden ist die Datei fertig und das Ganze jetzt mal vier. In einer Minute ist
er durch. Ah, er ist auch durch. Okay, der kackt nicht ab. Der kackt nicht ab. Der geht
einfach auf Null runter, weil der Download fertig ist. Okay, damit kann ich leben. Das
ist durchaus ein sinnvolles... Solange er nicht abkackt, ist das ja in Ordnung. Wir
bleiben mal bei den 100G. Ich meine, ich könnte hier noch einbauen, dass er das neu
startet, sobald das fertig ist. Aber kommt, wir wollen es mal nicht übertreiben jetzt.
Also wir haben jetzt ein ganz ordentliches, ganz ordentlich Kommandozeilen-Output hier.
Okay, nice. Standard Task Description ist 0.0 MBit pro Sekunde. Dass standardmäßig
schon was da steht. Genau, excellent. Gut, sehr schön. So, und jetzt Kommandozeilen-Argumente.
Wie macht man Kommandozeilen-Argumente gescheit? Also der Chat hat gesagt, das hier taugt.
Oder? Arg... Was heißt das? Arg... Pass. Arg Pass. Import, Arg Pass, Passer, Arg Pass,
Argument, Passer. Was? Description. Das ist quasi auch... Macht er auch Hilfetext standardmäßig
sich? Also mal angenommen, ich mache jetzt hier sowas. Help? Nee. Ach so, ja. Was schreibt
man da rein? Kann ich einfach so reinschreiben? Okay, nee, das macht er nicht. Der macht nicht
standardmäßig irgendwie einen Hilfetext oder so. Ah, nee, man muss, man muss auch
sagen... Moment, was? Sekunde, Sekunde. Aha. War das jetzt, weil ich Help eingegeben habe?
Ach so. Okay. Das brauche ich wahrscheinlich gar nicht. Ach guck mal, der macht auch schon
standardmäßig einen Hilfetext. Ja, ist doch eigentlich gar nicht verkehrt. Das finde ich
krass. Und wie macht man das jetzt korrekterweise? Weil ich meine, hier unten in meinem Main...
Nicht wirklich, oder? Was ist eigentlich jetzt mal doof, blöde Pullefahrer? Warum brauche
ich das da überhaupt? Ich weiß, weil es der Chat gesagt hat, dass in jeder Anleitung drin
steht, aber brauchen tue ich das ja nicht wirklich. Ich meine, das ist ein Kommandozeilenprogramm
und das war's. Das ist halt ein Kommandozeilenprogramm. Was soll ich da machen? Okay. Also ihr sagt,
das ist doch sinnvoll. Ich importiere das ja nicht, aber... So, und an welche Stelle würde
man das hier denn jetzt schreiben? Also den Import hier oben, okay, das verstehe ich.
Und wo würde man jetzt dieses Argument Parsing machen? Hier? Rein? Oder irgendwie eine Funktion,
irgendwie Def, Pars, Arcs oder sowas? Sowas? Das gehört in Main? Warum sollte ich das in
Main machen? Ich meine, wenn ich das in Main mache, dann habe ich hier unsinnig viel in
Main drin stehen, was ja eigentlich keinen interessiert in Main. Wenn Main ausgeführt
wird, weiß ich, passt alles. Ach wobei, nee, ihr habt recht, das muss nach Main rein, weil
ansonsten kann ich ja auf meine Sachen gar nicht zugreifen. Wenn ich hier irgendwelche
Variablen drin setze, dann kann ich ja, wenn ich das hier drin mache, gar nicht drauf
zugreifen in Main. Das muss tatsächlich in Main, ja, das klingt sinnig. Muss ich das
jetzt Main irgendwie übergeben? Irgendwie Arcs oder sowas? Oder geht das jetzt so einfach
so in Main? Einfach so, oder? Ok, ja, Kunst. Ok, Cute Chats Speed Test ist das. Also,
Add Argument. Er sagt mir, man kann hier Nummern angeben. Ok, was, was sind denn sinnvolle,
beleg mal, was sind denn überhaupt sinnvolle Kommando-Zeilen-Argumente dafür? Äh, ja,
wie viele Threads? Single oder? Ok, also, ähm, Add Argument. So, Add Argument irgendwie,
ähm, keine Ahnung. T? T? Description? Nee, Destination? Was? Action? Was zum? Was passiert
da überhaupt? Also, das ist das Argument. Das ist, das ist die Hilfe. Und das hier sind
irgendwelche Variablen dann, oder wie, oder? Das check ich nicht, wie es funktioniert.
Des? Ach nee, danach steht das dann da drinnen, oder was? Summ? Nee. Äh? Also, nur mal, nur
mal, dass ich das check. Dest? Was muss in Dest rein? Dest? Action? Ich check überhaupt
nicht, was mir das sagen soll. Action kann zum Beispiel auch Tru? Ja, aber, was, was
sagt mir das denn jetzt hier? Das muss doch irgendwo beschrieben werden, was zum Beispiel
Konst? Was, was soll mir das jetzt? Ok, Type. Also, ok, ich, ich, ich mach mal kurz, mach
mal kurz, kurz weg. Ok, das ist die Fault-Welt. Also, was, aber was? Hier, hier steht's doch.
Dest? Name of the attribute to be added to returned object. Also, sprich, das, was hier
drinne. Also, das, das ist quasi, wie es hier drinne gespeichert wird, oder wie, oder?
Also, quasi, ist das hier required? Ok. Also, ich, ich sag, default ist 1. So, type is int.
Dann, wie es heißen soll, irgendwie keine thread count. Oder con count oder so, oder
was weiß ich. Action? Macht was? Basic type of action. Wie denken wir an das Argument
des LK? Ok, Action bedeutet, was er damit machen soll. Also, dass er das da drinne speichern
soll. Was? Ich dachte aber bei, bei Dest, ist es schon. Verstehe ich, das lasse ich
mal weg. Verstehe ich jetzt den Sinn? Grad nicht so genau. So. Jetzt, T, achso, da muss
ich nicht. N? Ne, das ist einfach nur, wie es hier heißen soll, oder? Also, wenn ich
jetzt hier sowas angebe, wie T1, kann ich dann sagen arts N? Ne, oder? Doch. Hä? Ja,
aber ich will nicht, dass es N heißt. N ist ja mal richtig bescheuerter Name. Ja, irgendwie
parallel connections. Oh, ich kann dieses Kackwort nicht schreiben. Fixed Hypo, ja wunderbar.
So, default. Default 1. Help? Parallel connections default 1. Aber ich will nicht, dass es N
heißt. Das soll irgendwie so oder irgendwas heißen. Moment, das ist der Name nur. Das
heißt, wenn ich jetzt. Kunst. Action? This store has the values, but.
Ich checke nicht so genau, wofür das da sein soll, wenn ich ehrlich bin. Ah, Metawar brauche
ich noch. OK, Metawar, das soll einfach nur N sein. Dann sollte das nämlich. Ja, ja,
das ist gut. OK, das ist, wofür ich das mit Action brauche, das verstehe ich noch nicht
so genau, weil Default kann ich ja so angeben. OK, das keine Ahnung, das lasse ich. Ich
lasse es erst mal weg. Wozu? Ah, brechen wir das mal um. So, also Destination ist irgendwie
Parcon. Cons? Wie nenne ich das Ding gescheit? Num. Con? Irgendwie so. Das Action ist für
Bullion Flex, aber wozu man es braucht, habe ich immer nicht verstanden. Es ist ja nicht
wirklich thread count. Gibt es da irgendwie so eine Convention, ob man das groß schreiben
sollte oder klein schreiben? OK, wenn es weg, wenn ich jetzt weglasse, dann ist es eins
und wenn ich hier zwei angebe, ist es zwei. OK, wunderbar. Das funktioniert. So, das bedeutet
im Endeffekt das da. Lass es jetzt mal weg. Und ich kann an der Stelle sagen, ich will
nur so viele Threads starten, wie ich angebe. Das heißt, standardmäßig startet er einen
Thread, was in dem Fall wurscht ist, weil ich muss mal kurz das Limit von meinem Interface
runternehmen. Das könnte sein, dass der Stream kurz ruckelt. Also mit einer Connection kommt
er nicht wirklich ans Limit, weil Wodafone oder so. Keine Ahnung. Guck, da ist er irgendwie
bei 20 MB und schwankt. Also mit einer Connection ist er nicht sonderlich gut. So, machen wir
mal Thread. Acht Connections. Bam, volle Pulle. Max 400 MBit. Wow. Und jetzt muss ich aber
aufpassen, weil mein Stream ruckelt. Guck, da hat er schon Packages, hat schon Frames
gedroppt. Dann ruckelt das Stream, wenn ich das zu übertrieben benutze. Deswegen limitiere
ich gerade nochmal kurz auf... Ja gut, das sind 400 MBit. 200 MBit. Was ist denn die
Hälfte? Was ist denn die Hälfte von... Nee, da wurscht er rein. 2048, was denn sonst?
Ja klar, lul. Das hätte ich jetzt auch selbst drauf kommen können. Limit auf... Wie viel
kriegen wir jetzt maximal da durch? 16. Wie viel kriegen wir maximal durch? 15. Was?
15? Ach, Megabyte, das ist wieder was anderes. Einhalten, Kegweight. So. Also ich habe jetzt
aus irgendwelchen Gründen limitiert mein Interface auf 120 MBit oder so. So, und eins
standardmäßig ist langsamer. Ja, ok. Ok, ja dann sieht man, dass es schon was bringt.
Mehrere Threads aufzumachen, auf jeden Fall. Also es ist eindeutig ausgelasteter. Wie gut
sollte man eigentlich Englisch können, wenn man in der IT arbeiten will? Das kommt ein
bisschen drauf an. Also beim normalen 0815 deutschen Unternehmen ist das jetzt nicht
so wichtig. Aber was du können musst, ist du musst den Kram auf Englisch lesen können.
Sprechen ist jetzt nicht so wild, je nachdem was es ist. Aber du musst es auf jeden Fall
lesen. Und dementsprechend, ich kann es auch nur empfehlen, stell dein Betriebssystem und
stell deine Programme, die du verwendest, komplett auf Englisch. Erstens, weil man dann vielleicht
die einen oder anderen Begriffe lernt und hauptsächlich, weil du besser nach Fehlermeldungen suchen
kannst. Ja, wenn du, aber gut, das weiß man ja, wenn man zu so einem Unternehmen geht,
dann ist was anderes. Bei der 0815 Klitsche um die Ecke ist es nicht so wichtig, dass
du Englisch reden kannst, aber Englisch verstehen musst du auf jeden Fall. Also ich wusste beispielsweise
letzte Woche mit einem rein englischsprachigen Telekom-Techniker zusammen was installieren
auf irgendeiner Cloud-VM von uns. Das ging erstaunlich gut, also ich bin nicht wirklich
geübt was Englisch sprechen angeht, einfach weil zu wenig Gelegenheit ist. Und ich werde
jetzt auch nicht anfangen den Stream in Englisch zu machen, da rennen mir die Leute reihenweise
weg. Aber das ging, das war kein großes Problem. Ich hab mich mit dem jetzt aber auch nicht
über irgendwelche aktuellen Ereignisse der Zeitgeschichte unterhalten, sondern über
wir sind auf der Kommandozeile und klicken den Installer durch. Oder tippen den Installer
durch. Das war relativ einfach. Aber sprechen nicht so sehr, aber verstehen musst du die
Sachen schon. Also guck mal, es ist ja auch alles mehr oder weniger auf Englisch. Die
Hilfeseiten sind, guck mal hier, die ganzen Sachen die man zahlt, das ist alles, das ist
komplett Englisch. Also das hier musste eigentlich alles verstehen was in sowas drinne steht.
Das geht aber, weil es ein Unterschied ist, ob Technik Englisch oder ob dir jetzt einer
erzählt, wenn dir jetzt irgendein Ami erzählt wie geil sein letztes Footballspiel war, da
werde ich wahrscheinlich auch nicht alles verstehen was er mir da sagt. Einfach weil
ich keine Ahnung hab was es für geile Footballbegriffe gibt. Aber sowas hier schon. Zumal mich das
Footballspiel überhaupt nicht interessieren würde.
also das muss ich sagen, das funktioniert eigentlich als Kommandozeilen-Parser relativ
brauchbar. Was ich persönlich gut finde ist, dass Minus Minus Help drinne ist, standardmäßig
eingebaut. Wer sowas mal in Bash selbst gemacht hat, der bekommt Anfälle. Jetzt kann ich die
parallelen Connections eingeben, wie viele haben soll, wie viele er benutzen soll. Was
wäre denn noch ein gutes Kommandozeilen-Argument, was wir testen können. Ob er Continuous sein
soll oder ob er Endless, ob es Endless sein soll oder, keine Ahnung, einfach nach 5 Sekunden,
ja Url, Url können wir da auch noch machen. Ob es Endless sein soll oder True, 0W, ne Default
ist False, Endless oder Infinite oder Continuous nennen wir das. Das ist so ein geiles Wort,
das kann ich nie schreiben. Continuous, Help, Fault, False, Speedtesting, Help oder Minus
Minus C oder? Default, False. Also das heißt, wenn ich Minus C angebe, was? Expected One
Argument. Wie kann ich einen Bool Flag machen? True? Flag, wie macht man hier einfach nur
einen Flag? Name of Flags? Ach Typ ist noch auf Int, ah. Ne, Expected One Argument. Name
of Flags. Distort a Value Special. Ich checke ehrlich gesagt nichts.
Was das bringen soll, was es macht, aber anscheinend.
Was willst du von mir? Was Type is Unexpected, ok. Warum? Ok. Ich blicke nicht so wirklich
durch, was ich hier gerade mache, muss ich ehrlich sagen. False? Aber es sollte doch
True sein jetzt. Oder muss das so gemacht werden? Es ist True und wenn es nicht gesetzt
ist. Ach so. Ach so geht das auch. Dann kann ich mir das hier sperren. Ne. Faults doch nicht.
Etabar ist. False. True, ok. Das ist ein bisschen kompliziert gemacht. Ok, das heißt, wenn
ich jetzt Minus C angebe, macht er, von der Theorie her, macht er unendlich langes, nie
enden wollenden Dauerspeedtest. Und den kann ich jetzt auch starten mit 4 Threads oder so.
Und jetzt gibt er, jetzt gibt er alles. Jetzt gibt er alles. Volle Pulle. 130 MBit. Watt
C erst eigentlich für den Sub. Machen wir mal noch ein Stückchen höher hier. Wir wollen
Minus C. Ups. Jaja, ist ja gut. Minus D. Drei. Immer. Wie viel haben wir jetzt? Maximum
Speed. Also die Einheiten von diesem Traffic Shaper check ich nicht so wirklich. Machst
du damit? Ich kann damit nur einen Downloadtest machen, weil für den Upload Test bräuchte
ich irgendeinen Server, worauf ich was uploade und es dann wegwerfe. Also der Traffic Shaper
ist nicht so ganz korrekt mit seinen Einheiten hier, würde ich sagen. Der sagt nämlich,
die Einheiten sind in Kilobits pro Sekunde. Also sprich, ich könnte jetzt zum Beispiel
200 MBits, 2 Kilobits sind, ja genau und das ergibt überhaupt keinen Sinn. Also die
Einheiten sind ziemlich pepega, was der Traffic Shaper da macht. Aber es funktioniert zumindest
so weit. Guck, ich hab gesagt, mach 200 Kilobits die Sekunde und er macht 200.000 Kilobits
die Sekunde und er macht genau 100 noch was. In dem Fall ist es beides Bits. Also im Prinzip
kann ich das eins zu eins so umrechnen. Guckt, er macht auch irgendwie, also der Traffic Shaper
ist nicht so genau, was der da Traffic Shaped. Ne, das ist nur der Download Speed Test und
eigentlich ist es auch nur zum Peißen üben. Aber ich muss sagen, ich finde das eigentlich
ganz schick, so wie das jetzt ist. Jetzt ist natürlich die Funktion noch nicht so ganz
korrekt, weil ich checke ja gar nicht, ob es continuous ist. Ich müsste in Wirklichkeit
gucken, irgendwie while, while true, wenn es continuous ist, kann man hier sowas machen?
Moment, continuous, args, ja gut, Moment, Moment, das würde jetzt funktionieren, aber
der würde dann gar nicht laufen. Normal muss der, normal soll er ja nur irgendwie mal ein
paar Sekunden laufen oder so. Das könnte KiBibit oder Ki, es ist aber wie auch immer,
es ist zu, zu, zu wenig. Ich glaube dieser Traffic Shaper ist, zeigt Mülleinheiten an.
Aber es soll mir recht sein, solange, solange es nicht kaputt geht, ist in Ordnung. Ich
bin mir nicht sicher, ob was die beste Variante ist jetzt zu machen mit einem if und quasi,
wenn ich so und ansonsten, nee, und ansonsten dann einfach einen Test mit, also wenn, also
wenn ich Minus C angebe, ist es zumindest schonmal easy, dann mache ich einfach unendlich
meinen Download Geschwindigkeiten Speedtest und gut ist. So, was ist denn, wenn ich jetzt
24 Threads angebe? Außer, dass er kurzzeitig massig CPU Last verursacht, ist alles in Ordnung.
Nee, nee, nee, nee, nee. Der Overhead für HTTP ist garantiert nicht das Problem. Weil,
der macht ein Getrequest, einmal Headers und der Rest ist ja quasi der Response Stream.
Nee, nee. Es funktioniert ja auch, wenn ich die Limits weg mache, kriege ich meine, ein
bisschen über 400 MBit vom Vodafone Anschluss. Also entweder checke ich die Einheiten vom
Traffic Shaper, nicht? Wir können es ja mal so machen, wir können ja mal MBit zu Ki, Ki-Bit
oder wie das heißt. Nee, das ist ja noch weniger. Oder soll ich Me, Me-Bit, Me-Bit, du. Ah,
diese Einheiten, Null. 24 Threads, nee, das macht keinen großen Unterschied. Also die
Einheiten sind merkwürdig auf jeden Fall. Wir können ja mal, also wir können ja mal
gucken, was ich machen muss, dass ich ungefähr an 200 MBit komme. Machen wir mal hier irgendwie
400. Das ist eigentlich mehr, mehr als mein normaler Download, aber okay. Okay, also mein
normaler Download ist gleich die Hälfte von meinem normalen Download, alles klar. Hört
sich logisch an. Übrigens, ich glaube 24 Threads sind ein bisschen viel. Ich glaube,
24 Threads ist wunderbar. Nee, das ist jetzt einheitlich benannt. Früher, mittlerweile
ist es eigentlich besser als früher. Früher hattest du die Sache so was wie MBit. Und da
musstest du sagen, streng genommen ist es ja eigentlich 1000, aber es hat jeder mit 1024
gerechnet. Also mega wäre ja eigentlich rein von der Mengen. Einheit wäre das 1000, aber
das hat eigentlich jeder, weil es Base 2 ist, das hat eigentlich jeder 1024 gerechnet. Und
jetzt gibt es Maybe und Mega. Maybe ist 1024 und Mega ist 1000. Nur, dass es das Ganze
irgendwie nicht viel klarer gemacht hat. Das wird übrigens in der EHK Prüfung abgefragt.
Sollen wir vielleicht noch ein Maximum Einheit machen? Also zum Beispiel hier, wir können
Maximum Max. Könnte man Maximum angeben? Wie mache ich denn da jetzt ein Custom Check?
Also ich will gucken, ob die Range zwischen 1 und 8 ist. Range? Ach so, guck mal da. Choices.
Ich muss sagen, die haben mitgedacht. Die haben mitgedacht. Choices, Range, die haben
schon mitgedacht. Das ist nicht, das ist nicht verkehrt. 8. Ups. Was? Ach. Also muss ich
sagen, 9. So, okay, jetzt mache ich hier minus 9. Invalid Choice. Choose from 1, 2, 3, 4,
5, 6, 7, 8. Das ist cool, dass das funktioniert. Ich meine, es wäre cooler, wenn da steht
1 bis 8, weil ich ja noch nicht mehr vorhabe. Da steht jetzt Choice 128 drinne. So, bisschen
viel Hilfetext vielleicht. Aber es ist schon in Ordnung. Das gefällt mir. Also der Kommando
Zeilenpasa, der da eingebaut ist, macht einen auf mich durchdachten Eindruck. Ruhig sagen,
finde ich nicht schlecht. Pogge. Welchen Editor? Das ist PyCharm. PyCharm Community Edition.
Mit dem Rider-Theme, weil ich irgendwas bekannt Aussehendes gebraucht habe. Ja, das gefällt
mir. Das hat was. Das können wir so lassen. So, jetzt ist nur bloß die Frage, was machen
wir, wenn er eben nicht minus C angibt? Dann soll er das Gleiche machen, nur vor E in
Range. Irgendwie, keine Ahnung, 5 Sekunden oder so. Nur 3, 4, 5. Ja, das ist jetzt vielleicht
kein super cleverer Test, aber ja. Wobei, doch, doch, wir machen das, wir machen das.
Max Rate. So, und wir setzen das jetzt nur, wenn das hier größer ist. If Sum größer
Max Rate, dann Sum Rate. Genau, dann machen wir hier die Rate und unten drunter, wenn
der fertig ist, wenn der fertig ist, geben wir nochmal aus. Print, Download, Speed, Magenta,
Bold, weil wir haben ja letztens gelernt, lauter, Alter, es ist lauter Telekom, jeder Tag auch
für uns ein Magenta Tag, Paynes Champ, wenn die Telekom das sagt. So, jetzt misst er den
Download Speed, zeigt ihn an und am Ende zeigt er den schnellsten Speed an. What? Wait a
minute, warum ist der Download Speed da jetzt oben drüber und das nochmal unten drunter?
Das ergibt jetzt aber keinen Sinn, oder? Muss ich, muss ich da vorher vielleicht noch
ein paar, noch ein paar New Lines oder so machen? Oder muss man das stoppen irgendwie? Progress
stopp? Progress cancel oder so stopp? Ah ja, ok, ok, schon besser, weil das mit dem Progress
stopp kann ich eigentlich immer machen, aber hier brauche ich nicht, hier geht er danach
direkt raus. So, der misst das jetzt und dann sagt er Max, Max Download Speed in Blue, weil
wir die ganzen Terminal Farben verwenden müssen. Blue Max Download Speed 17972. So, da sagt
immer, der sagt nicht das letzte, der sagt das höchste, also 192. Ok, gut, ja, kann
man doch mitleben. Nasi Schneiderman Diagramme sind das Unsinnigste, was es gibt, hat sogar
der Erfinder selbst mal gesagt. Was für ein Ding. Chat hat irgendjemand eine Ahnung, was
ein Pseidocode, ach Pseidocode. Alter, willst du mich jebaiten oder was? Pseidocode meinst
du? Ich hab jetzt gedacht, was zum Teufel ist das? Hab ich noch nie gehört. Ganz ehrlich,
meine ehrliche Meinung dazu ist, kein Struktogramm und auch kein komischer Pseidocode, sondern
einfach ein Prototyp basteln. Einfach ein Prototyp basteln, am besten in der Sprache,
in der du es später auch machen willst, aber muss nicht zwangsläufig sein. Irgendwie so
mal Miniprototyp, irgendwie so grob, geht das überhaupt, was ich mir vorgestellt habe
und spätestens, wenn es so Sprachen wie Paisen und sowas gibt, kann man doch auch relativ
schnell was zusammen vorstellen. Ich würde es halt bevorzugt in der Sprache machen, in
der ich das später auch umsetzen will, also nee. Ja, glaube ich dir sofort, du hast bestimmt
auch geplant für deine Placementmaschine, wo man die am besten hinstellt und wie das
am besten Tools aufpickt über das Nasi Schneiderman Struktogramm, gibs zu. Die mussten erstmal
deine Leute, mussten erstmal Nasi Schneiderman Struktogramme malen, bevor diese Maschine
hingestellt wurde. Und bestimmt auch alles noch mit UML Zeug. Du hast eine SWOT-Analyse
gemacht. Weiß nicht, was eine SWOT-Analyse, aber Leute, wisst ihr, was auch nicht schlecht
ist? Das wohl kam in meiner IHK Prüfung dran, ein Ishikawa Diagramm. Guckt euch diesen Mist
mal an, Alter. Das wolltet ihr mir wirklich wissen in der Abschlussprüfung, das weiß
ich noch. Problem, schlechte Druckqualität. Material-Maschine-Milieu-Mensch-Methode. Problem,
schlechte Druckqualität. Ja, cringe. Cringe, wer das nicht täglich macht. Und jetzt kommen
irgendwelche Marketing-Leute und machen da noch so nen Fischt raus. Können wir noch
was Five-Headiges einbauen? Immer noch ne Big Brain-Idee. Hab ne Idee, wir machen was
anderes. Zack, wir müssen noch kurz was verbessern. So, Procress, Procress-Stop brauchen wir gar
nicht mehr. Wir machen jetzt Four-E-In-Track, nee, Procress, Procress-Track-Range-Fünf-ah,
guck mal, viel stylischer, oder? Dann weiß man, wenn der Speedtest vorbei ist. Nee, ehrlich
gesagt war das vorher besser. Ehrlich gesagt war das vorher schöner. Jetzt siehts zwar
fancier besser aus, aber. So und jetzt kommt die Preisfrage. So sagen wir mal, das funktioniert
jetzt. Vorher war besser, ja, finde ich auch. So und jetzt kann man continuous Speed-Monitoren.
So, aber, jetzt mal was ganz anderes. Wie würde man sowas denn jetzt gescheit deployen?
Also ich hab irgendwas mit Pi-Installer vorhin gefunden. Nee, wie man da, nee, mal angenommen,
das wäre jetzt ein Kommando-Zeilen-Tool, was ich irgendjemand schicken will. Ja, wenn
ich das deployen will, ist das das falsche Wort. Wenn ich das deployen will auf irgendwas,
wo ich selbst in Pi ist ein Interpreter und sonst was, ist jetzt alles klar. Aber ich
hab vorhin irgendwas mit Pi-Installer, Standalone, irgendwo gesehen auf Shithub. Ich will keine
Exe. What the fuck? Creating Standalone, Pi-Installer, one file, genau, das will ich haben. Also
pip install Pi-Installer. Also ich hab jetzt ja nur meine Pakete in Virtual Enf installiert.
Und jetzt kann ich es danach dann auch auf dem Host ausfüllen. Also nicht Exe, ganz
bestimmt nicht Exe. Pi-Installer m main.pi. Oh, er macht was. Es lebt. Es macht Dinger.
What the fuck? Okay. Pi-Charm-Projects. Und da liegt jetzt Dist wahrscheinlich Main rum.
11 MB ist es. Naja, ich mein, das ist jetzt nicht super klein, aber auch nicht super groß,
das ist schon in Ordnung. So, mal gucken, ob ich das jetzt ausführen kann. Hey, es
funktioniert. 11 MB ist vollkommen in Ordnung. Das ist richtig gut, da ist ein kompletter
Pi-Interpreter gebundelt. Das ist nicht verkehrt. Warum keine Exe? Das ist eine Exe. Das ist
eine Exe. Guck. Das ist eine Exe. Das ist eine Exe. Funktioniert einfach. Kann Pi-Installer,
okay Five Head Frage. Kann Pi-Installer Cross-Plattform bundlen? Also kann ich mit Pi-Installer unter
Linux bundlen für Windows? Guck mal, schon schon die erste Frage, da ist am Start. Alles
klar. Hä? Was will der Typ? Das ist doch eine vollkommen legitive Frage. Come back when
you have completed Computer Science 50. Ich mein, der will wahrscheinlich schlau tun,
so nach dem Motto, haha, eine Linux-Exe kann nur nicht unter Windows laufen, aber da geht
es überhaupt nicht drum. Du kannst ohne Probleme Cross-Executables erstellen. Das ist überhaupt
kein Ding. Was ein dummes Schwärze, Alter. Was das für ein Spaß, Mann. Was ein wichtig
Tour, Alter. Was ein dummer Sack, Mann. Was ein, Alter, solche Leute gehen mir aufs Sack.
Wisst ihr, großkotzig tun und dann noch nicht mehr Ahnung haben, wovon sie sprechen. Ich
bin nicht eingeloggt, oder? Selbstverständlich kannst du unter Linux Binaries für Windows
erstellen. Also, du kannst sogar noch abgedrehtere Sachen machen. Du kannst theoretisch sogar
unter dem x8664 Linux Binaries für einen ARM 7 Raspberry Pi erstellen und das funktioniert.
Das ist doch überhaupt kein Problem. Die Architektur und das Betriebssystem des Ursprungsrechners
hat unbedingt was mit dem Target-Binary zu tun. Ich mein, wenn du das statisch, ja,
scheint nicht so, als könnte man. Ja, vielleicht kann das Pi Installer nicht, aber gehen tut
das. Wenn du das dynamisch linken willst, dann ist natürlich die Frage, okay, funktioniert
das dann? Weil, es hat ja keinen Sinn, wenn ich das gegen irgendwelche G-Lib-C-Dinger linke
und unter Windows dann komplett anders auf. Das ist was anderes, ja. Aber ich kann ohne
Probleme Windows Binaries erzeugen von Linux aus. Letztendlich, was macht ein Compiler?
Ein Compiler haut irgendwelchen zur jeweiligen Plattform kompatiblen Byte-Code raus und wenn
ich einen Compiler habe für ARM Architektur, der selbst lauffähig ist unter x8664, kann
ich unter x8664 ohne Probleme ARM Binaries erzeugen. Alter, was ist das für ein ultra
wichtig Tour, man? Der Typ geht mir auf den Keks, also wenn ich das schon lese. Oh Gott,
Alter. Nee, das ist ja der Wahnsinn, Alter. Was soll das über Wine machen? Nee, nicht
wirklich, oder? Mit Wein. Jetzt wird's aber abgedreht. Pie-Installer plus Wein in Docker.
Ja, ist klar. Ich mein, gehen tut bestimmt vieles, wenn der Tag lang ist, ja. Man muss
es aber nicht machen. Ich mein, die Idee ist nicht schlecht, ja. Die Idee finde ich gut
hier. Da musst du dir dein System nicht vollsauen. Ich finde die Idee nicht schlecht, aber das
ist mir schon zu übertrieben, Sixhead. Was gibt's denn für andere Varianten, Python Single
Executable Files zu machen? Er hat aber Recht, er hat aber Recht.
Okay, aktuell ist anscheinend Geflame angesagt gegen den Typ. Warum du das willst? Warum
nicht? Es wäre doch cool, wenn ich jetzt hier beispielsweise sagen könnte, ich bilde
davon. Mal in genommen, ich habe jetzt das Next Level Kommando Zeilen Tool erstellt,
was die ganze Welt verwenden will. Was in dem Fall nicht der Fall ist, aber könnte
doch sein, könnte doch sein. Und ich könnte es direkt mit einem Befehl Executables raushauen
für Windows, Mac und Linux. Das wäre doch nice. Wäre doch praktisch, oder? Geht anscheinend
nicht. Wie kann man dafür sorgen, dass es nicht abbricht? Wenn ich das interrupte, wenn
ich das interrupte mit dem Keyboard, wie kann ich dafür sorgen, dass es keine Exception
gibt am Ende? Ich meine, ich könnte die Exception catchen und einfach ignorieren. Das würde
funktionieren. Einfach ein Batch und eine Batch. Nee, nee, nee, nee, nee. Das checkt
keiner. Okay, also einfach abbrechen ist... Ja, aber es kann doch nicht sein, dass ich
die Exception da catchen muss. Kann man nicht sagen... Na wobei, es ist ja eigentlich nur
eine Cancel. Es ist ja eigentlich nur eine Cancel Notification, die ich wahrscheinlich
nicht richtig handle. Das ist unter.net auch so. Wenn ich in.net das Sleep Await und es
gecancelt wird, dann gibt es auch eine Exception. Und wo muss ich das catchen? Hier jetzt? Try.
Accept. So. Hey! So und jetzt soll ich bestimmt noch irgendwas, nichts, alles, sondern Keyboard
Interrupt. Ist das die Exception? Keyboard Interrupt. Ja, nice! Okay, das ist tatsächlich
relativ easy. Ich hätte gedacht, es gibt vielleicht ein Parameter, das man sagen kann. Hier Keyboard
Cancel, keine Exception, aber okay. Jetzt wird dieser Thread ausgebuddelt, nur um den
Typ noch ein bisschen zu dessen. Alter, wie sieht Flame? Jetzt flippen sie aber aus.
Warum sind die Leute alle so aggro drauf in diesem Thread? Was ist denn da los, man?
Mit Wine? Nee, mit Wine mache ich das nicht. Ich meine, klar, es gibt ein fertiges Docker
Image. Das ist sogar eine relativ gute Anwendung für Docker Images in dem Fall.
Oh man. Norma?
Also anscheinend hat das Py Installer nicht eingebaut. Force Compile. Richtig gut, ich
meine, das wäre jetzt natürlich nicht so wild, aber es wäre halt cool, wenn es irgend
so ein Build-Tool gäbe. Ich meine, unter.NET kannst du es relativ easy machen. Wenn du
unter.NET was Supportedes haben möchtest, also wenn du irgendwie eine Architektur hast,
die standardmäßig Supported ist, also sei es Windows, Linux, Mac oder X86 und ARM, kannst
du das direkt über das Commando-Zeilen-Tool bilden und das geht einfach.
Ja gut, unter Windows könnte ich das. Ach, den haben die, das haben die entfernt.
Nee, okay, dann nicht. Es war jetzt aber auch, war jetzt ja im Prinzip nur Bonus. Ich meine,
Linux reicht ja. Jetzt kann man den Krampel hier ausfinden. Main. Massive Next Level
Speed Test am Start. Startup ist schon gegründet. Man könnte jetzt sogar noch weiter gehen,
ich weiß nicht, ob, kann, können die irgendwelche Graphen zeichnen? Crafts oder so? Dann könnte
man, dann könnte man noch so, dann könnte man noch so einen Craft malen für die Übertragungsgeschwindigkeit
hier hinten. Plot a Chart in Terminal. Aber über GitHub Actions brauche ich ja auch irgendwas,
was den Build macht. Ich meine, nur GitHub Actions alleine bildet mir das ja nicht für
mehrere Plattformen. Dort brauche ich auch was und das, was ich auf GitHub Actions ausführen
könnte, könnte ich auch lokal ausführen. Boah, nee, nee, nee. Das, das, das, das,
das Fuzz mache ich jetzt nicht auf. Das Fuzz mache ich jetzt nicht auf. Nee, ich glaube,
da lassen wir das jetzt hier bei der Stelle, mit der würde Tool mal gut sein, ne? LVMB
hier. Das mit dem Exception Catchen hat nicht so ganz funktioniert. Ah, nee. Ach so, hier
kommen jetzt, hier kommen jetzt die Exception, weil die Tasks abbrechen, ja, ja. Blablabla,
ja. Weißt du was? Ich bin jetzt, ich bin jetzt mal ganz fies. Bam. Einfach, einfach
komplette Exception. Alle, alle Exceptions, die es gibt, wenn gecatcht gut ist. Ach so
meinst du das mit irgendwie so einer, nennen wir es mal einfach Vm? Ja, das stimmt. Es
wäre aber cool, wenn es irgendein Tool gibt, was das Cross-Compile könnte oder Cross-Plattform-Executables
machen könnte. Gibt es bestimmt. Ich meine, es gibt bei Puzzle im Prinzip alles. Bam.
Leute, jetzt wird alles, alles gecatcht. Ja, das bricht ab, passt schon. Oh nee, doch
nicht. Fuck. Ja, scheiß drauf. Kann ich jetzt mitleben, interessiert mich nicht. Ich müsste
wahrscheinlich ordentlich, ich müsste wahrscheinlich das ordentlich awaiten und auf Cancel checken
oder was auch immer. Juckt mich jetzt nicht. Ja, es gibt, wahrscheinlich gibt es sowas
wie Cancel Talks, aber ich will es jetzt nicht übertreiben, weil ich mein, ich hab das ja
eigentlich vor, für einfache Scriptingsachen zu verwenden. Ich will ja da gar keine super
krasen Commando-Zahlen-Tools mitbauen. Das war jetzt nur zum Üben und zum bisschen
lernen. Ich denke, ich denke dafür ist es durchaus in Ordnung. Ja. Ja, Chat, das wars
für heute. Ich hab alles ausprobiert, was ich ausprobieren wollte. Nee, ich geh jetzt
aufs Klo. Das mach ich im nächsten Stream. Ich muss jetzt mal. Wohin? Wir sehen uns im
nächsten Stream, Leute. Macht's gut. Bis dann. See you.
