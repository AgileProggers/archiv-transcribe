So, da sind wir, bisschen spät heute, mal gucken wie lange wir dafür brauchen.
Bis das Stream richtig angelaufen ist, muss ich mal kurz gucken, ob sich wieder irgendwelche
China-Chinesen per Mail gemeldet haben, dass, dass ich ihre China-Klinken-Stecker
promoten soll. Das sind da teilweise Anfragen dabei, hängt's ja auch so, mein ich das ernst.
Letztens hat wirklich einer angefragt, ob ich ihr Klinken-Stecker-Kabel promoten will,
warum will das überhaupt jemand promoten? Ein kostenloses glückliches Audiokabel,
steht wirklich so im Titel der Mail, ein kostenloses glückliches Audiokabel soll
ich promoten. Auch geil, weiß man sofort Bescheid. Starte mal ein cooles, was denn zum Beispiel?
Was ist für dich ein cooles Raspberry-Pie-Projekt? Wir haben schon einige Raspberry-Pie-Sachen hier
im Stream gemacht, aber was wäre denn für dich jetzt ein cooles Raspberry-Pie-Projekt?
Wir haben schon alles mögliche gemacht, wir haben vom Raspberry-Pie bis zum ESP32 Zeug
zusammen gelötet und Zeug gebastelt. So, ne, das kann ich dir da jetzt nix sagen,
weil das ist bei mir immer so, ich mach das halt, wenn ich selbst irgendwas brauche oder wenn ich
selbst irgendwas machen will. Also mir fallen die Sachen nicht ein, ich sag, ich mach ein Stream,
sondern ich brauch irgendwas hier für daheim und dann stream ich das. Keine Ahnung.
Heute beschäftigen wir uns etwas mit AWS IoT, dem AWS, nein, nicht dem iOS, dem AWS IoT SDK
oder wie man das heißt. Ich erzähl euch gleich was zu. Ich muss nämlich Sachen,
die mein Auto verschickt oder besser gesagt Sachen, die Fiat Autos verschicken per MQTT und ja,
Fiat Autos haben wohl, so wie ich das richtig gesehen hab, MQTT Messages, die schicken sie
an den Amazon MQTT Broker und die kann man abfragen. Da kann man zum Beispiel sehen,
ob das Auto in spezielle Zonen gefahren ist oder nicht. Das ist natürlich ganz praktisch
zur Benachrichtigung bekommen. Und jetzt gucken wir mal, ob wir das ausgelesen bekommen. Ich
hab's mir nur grob angeguckt, Leute, ich hab ehrlich gesagt nichts gecheckt, was da überhaupt
abgeht. Und die Amazon Doku ist wieder total pepega und nicht hilfreich. Oh Leute,
The Man and Man ist auch am Start. Fast schon Opferskater Name. Können nur Eingeweihte lesen.
Es hat sich heute schon jemand beschwert unter meinem Video. Ich weiß nicht,
ob jemand mein Video von heute geguckt hat, die von denen, die schon da sind. Ich habe
ein Video hochgeladen, da ich 17 Kilo abgenommen habe, seit Anfang des Jahres und es hat sich
schon jemand auf dem Video wieder beschwert. Ich soll doch nicht sagen, dass alle dicke
Leute faul sind. Es gibt doch auch Leute, die Krankheiten haben und so was. Da ging es
überhaupt nicht rum. Ich weiß nicht, was die Leute immer in diese Videos rein interpretieren.
Ich habe von mir gesprochen. Das sollte doch wohl auch schon am Titel klar sein. Aber wieder war
klar, dass es wieder irgendwelche Leute falsch verstehen wollen. Das ist mir leichter fällt,
Kabel zu verlegen. Wie gesagt, heutzutage gibt es teilweise Leute, die warten nur drauf,
dass sie getriggert sein können. Auf Twitter ist es ganz schlimm. Auf Twitter ist quasi
das Land der Getriggerten. Das ist unser eigenes Bundesland. Triggersburg ist auf Twitter. Wobei,
das ist ja nicht nur auf Twitter. Nicht nur in Deutschland, das ist ja weltweit so. Die
sind auf Twitter. Das ist ganz schlimm, die Leute. Seit Ende Februar 17 Kilo. Von 108,5
runter jetzt auf 91 Komma. Irgendwas schwankt immer ein bisschen. Je nachdem, ob ich schon
eine Hose an habe oder nicht. Oder ob ich auf dem Klo war oder nicht. Es schwankt immer
so zwischen 91,4 oder so und 92,4. Also irgendwie in dem Dreh. Wie groß bist du denn? Ich bin
1,74. 174 Zentimeter. 69 Zuschauer, Leute. Gatschi-Buzz. Da habe ich ja gar nichts großartig
dagegen. Leute, ich habe ja keine Schmerzen, wenn sich Leute mit irgendwas beschweren. Man
muss ja nicht selbst betroffen sein unbedingt. Also ich kann ja auch irgendwas doof finden,
wenn ich mich in andere rein versetze. Aber die Leute, die quasi nur darauf warten, dass
sie getriggert sein können, da frage ich mich auch immer, ob die nichts besseres zu tun
haben. Zumal man den Eindruck hat, diese Leute wollen jegliche Aussagen immer falsch verstehen.
Jemand sagt was leicht unüberlegtes und schon gehen sie davon aus, dass der meint das ganz
böse und ist voller Unmensch und ganz schrecklich. Aber die übertreiben es alle ein bisschen.
Das ist nicht mehr normal. Die sollen sich alle mal wieder, also im Ernst, die Leute,
die sie immer so krass getriggert sind, die sollen sich mal eine Sache mal, ich finde
das geht immer ein bisschen unter. Kann ich vielleicht am Anfang des Streams jetzt mal
sagen. Ich will ja eigentlich mich gar nicht so sehr über diese Themen auslassen. Eine
Sache muss man echt sagen. Wir leben doch aktuell wirklich in äußerst angenehmen Zeiten.
Ja, also gerade was persönliche Entfaltung angeht. Es wird immer so getan, als ist das
so schlimm und das hört sich halt immer so an wie so schlimm wie noch nie. Das stimmt
überhaupt nicht. Die Leute sollen sich mal angucken, wie die Welt vor 150 Jahren oder
so gewesen ist. Das war richtig krass, was da abgegangen ist. Die Zeiten heute sind absolut
top. Du kannst dich persönlich so gut entfalten wie ich. Vor 150 Jahren haben die Schwule
noch lobotomiert und so komische Dinge getrieben. Also du kannst dich heute komplett super persönlich
entfalten. Ich bin 38, ich sitze vor dem Rechner, Sache 0W, KekW, Proggers, Spock, rede in Twitch-Emotes
und spiele Games, programmiere irgendwie was und ich muss mir von keinem anhören heutzutage.
Na, wie wärs da mal mit Hausbauen? Na, wie wärs da mal mit Kinderkriegen? Also langsam
bist du aber zu alt dafür. Na, so wird das aber nix. Ohne Scheiß, das musste ich mir
vielleicht noch ein bisschen früher von meinem Opa anhören, aber ganz im Ernst, es juckt
einfach keinen mehr. Du kannst dich heute persönlich entfalten so gut wie noch nie.
Und dementsprechend, die sollen man nicht alle so tun, als ist das heute so schrecklich
überall auf der Welt. Also da muss man sich mal, also die Zeiten früher waren deutlich
deutlich schlimmer. Muss man sich auch mal zu schätzen wissen, dass es einem heute eigentlich
relativ gut geht und dass die Welt in vielen Belangen vorwärtsgekommen ist. Ja, und das,
was so quasi Mainstream ist heute, dass das schon ganz schön vorwärtsgekommen ist. Dankeschön.
101 Milliarden, Dankeschön. Pog Bits. Du kannst sogar nach Katar zur WM fliegen. Tja,
ja siehst du mal, es gibt ja durchaus Länder, da ist es ja, da ist es auch heute noch ziemlich
heftig. Da geht es teilweise richtig ab. Ich habe heute News gelesen, weiß unangenehmes
Thema, aber passt da. Unangenehmes Thema, im Iran oder so, haben sie jetzt irgendeinen
Rapper zum Tode verurteilt, weil er es gewagt hat online, irgendwelche Rap-Geschichten als
Support zu den Protesten zu posten. Ja, in Nordkorea werden Leute mit der Flak abgeschossen,
also ich finde man muss auch mal wirklich zu schätzen wissen, wie gut es einem hier geht
und dass wir wirklich die letzten 100, 150 Jahre auch, zumindest bei uns, wirklich sehr
weit vorwärtsgekommen sind. Man sollte das nicht immer so schwarz sehen, klar, es gibt
immer noch genug Bereiche, wo alles vielleicht nicht so hundertprozentig ist, wie es sein
sollte, kann man ja auch sagen, aber heute habe ich echt den Eindruck, gerade auf Twitter,
die Leute weinen sich da in den Schlaf, wie schlecht die Welt ist, dabei ist es wirklich
in den besten Zeiten, die es je gegeben hat, gerade für persönliche Entfaltung und drum
herum, als dies je gegeben hat. Naja, aber gut, getriggert sein und schwarz malen, darf
man das überhaupt noch sagen? Alle schwarz malen ist ja irgendwie so ein Hobby, was die
Leute auf Twitter haben. Weiß nicht, was mit denen los ist. Gerade auf Twitter flippen
sie alle, flippen sie alle aus. Gut, aber wir widmen uns heute mal anderen etwas erfreulicheren
Sachen, nämlich AWS IoT Core. Das ist eine wilde Aneinanderreihung von unaussprechlichen
Sachen, oder? Ihr müsst euch mal den Titel heute angucken, das checkt doch niemand. MQTT,
das heißt offiziell so. Also MQTT kennen wir ja alle, das ist nur für besonders cute
Leute. Das ist ein Message Broker, Message Bus, wie auch immer, was sagen die eigentlich
selbst, was es ist. Ein offenes Netzwerk-Portokoll für Maschine zu Maschine-Kommunikation. Alles
klar, jetzt wisst ihr hoffentlich Bescheid. Ein Message Queue. Ein Message Queuing Telemetrie-Transport.
Man kann da mit Nachrichten austauschen. Man kann beispielsweise von einer Lampe im W-Lan
eine Nachricht schicken, ich wurde gerade angeschaltet, oder eine Nachricht empfangen, du schaltest
dich ein und sowas. Es ist eigentlich so ein Message Broker. MQTT AWS IoT Core, was für
eine Aneinanderreihung von merkwürdigen Dingern. Also AWS ist der Amazon Cloud Plattform. Ich
bin mir ehrlich gesagt gar nicht sicher, für was AWS genau steht. Ich glaube irgendwas
mit Amazon und Service. Aber was W ist, weiß ich gerade nicht. Wir sind ja hier nicht bei
indischen, äh, outgesourceten Leuten in Containern. Web? Ah, Web ist es. Ok, Amazon Web Services
sind es, wusste ich nicht. IoT kennen wir und Core, warum auch immer Core, keine Ahnung.
Das Internet of Things. Warum auch immer Core, weiß ich nicht. Zumindest benutzt Fiat das,
deswegen müssen wir uns das heute angucken. Übrigens für den Fall der Fälle, dass ihr
es nicht mitbekommen habt, sowas wie AMP, ist das nicht eine MQTT Implementierung sogar?
Nee, ist es nicht. Ja, aber dann wahrscheinlich sowas ähnliches. Also MQTT wird im, kennst
du Odo? Odo war die Jeans, die mich gescampt hat. Nee, wie hießen die? Hier, die Jeans,
die haben mich gescampt bei Kickstarter, Odo. Odo Jeans. Die haben gesagt, sie verkaufen
oder sie stellen eine selbst reinigende Hose her mit Silberpartikel. Und die Hose hat Silberpartikel
drin und deswegen muss, ist die, ist die, ist, guck, deswegen ist es so, deswegen ist
die dreckabweisend. Odo. Und ich hab gebacked eine Jeans und zwei T-Shirts oder irgendwie
was, ich glaub 180 Euro oder so, also irgendeins dieser Tiers. Und die sind dann einfach abgehauen
mit dem Geld, haben mich übelst gescampt bei Kickstarter. Irgendwie, irgendwie eins, irgendwie
irgendwas von diesen, diesen, entweder eins von diesen drei Tiers war es glaube ich. Ja,
klar kenne ich die. Warte mal. Entweder ist mein Ohr gerade auf der rechten Seite kaputt
gegangen oder mein Headset. Chat, was mein dir, was wird sein? Gerade mal kurz, ich muss
mal kurz muten. Okay, jetzt geht's wieder. War anscheinend doch nicht mein Ohr, sondern
das Headset. Safe Ohr, Safe Call. Das Ohr wird's gewesen sein. Ja, also wie gesagt,
kein Odo. Oder ne, du meinst Odo mit zwei O. Open Source, ERP und CRM. Nö, das kenne
ich nicht. Irgendwelches Projektmanagement Zeug, MonkaS, geh weg. Ne, sagt mir nix.
Ja, das ist wirklich auch so gemacht, dass es keiner versteht. Also sowas wie WhatsApp
für Maschinen. Ich weiß, Cap, aber das würde ich noch nicht mal für ein Azubi in der ersten
Woche gelten lassen, den Vergleich. Hive MQ klingt auch ein bisschen nach irgendeiner
Kürze die Implementierung. Moin, Xetor. Voller Weep-Modus. Muss mal kurz die VM anmachen
und eine Runde Package Updates fahren, weil die habe ich jetzt schon eine Weile nicht
mehr angehabt, Leute. Wir haben schon eine Weile kein Technologies. What? Ist wieder
das Log-File hier am... ist wieder das Log... VMW hat teilweise schon ein paar ziemlich
doofe Bugs. Das habe ich schon öfters mal gehabt, dass irgendwelche Log-Files hängen
geblieben sind und jetzt, jetzt, pass auf, jetzt geht's wieder. Guckt, easy. Jetzt funkt
es einfach. Nach dem Sinn. Muss ich verstehen. Dann machen wir Package Updates. Übrigens
für alle die sich mitbekommen haben, easy, ja, für alle die sich mitbekommen haben, seit
vorgestern gibt es.NET 7. Da, ein, was, ein... Also manchmal ist die Google-Suche ziemlich
hängen geblieben. Eigentlich sollte da jetzt der erste Blog-Post sein, nicht einbiegen
auf die Zielgeraden und auch nicht Release-Candidates, sondern, dass es released wurde. Wurde nämlich
vor zwei Tagen. Hier, da. Okay, nee, vor vier Tagen sogar schon..NET ist raus und wir müssen
uns in einem der nächsten Streams mal in Ruhe die neuen... C-Sharp 11 ist es glaube. Ja,
es sieht auch sogar da. Die neuen C-Sharp 11 Features angucken. Nicht heute. Es gibt
diesmal auch gar nicht so viele, aber es gibt ein paar Sachen, da freue ich mich wirklich
drauf. Es wurde wirklich auch mal Zeit. Zum Beispiel ein Feature, was wahrscheinlich
alle Python-Hackermans sehr mögen werden, falls sie mal C-Sharp verwenden ist. Die haben
es jetzt endlich geschafft... Nein, das nicht. Die haben es endlich mal geschafft Raw-String-Literals
einzubauen. Man kann jetzt sowas hier machen in C-Sharp 11. Guckt mal. Kommt das irgendwelchen
Python-Hackermans irgendwie bekannt vor? Habt ihr das schon mal gesehen? Man könnte jetzt
sagen, das haben die eins zu eins abgeguckt, aber das stimmt nicht. Die haben es tatsächlich
noch ein bisschen verbessert. Aesthetic Interfaces ist auch eine sehr nice Geschichte. Ähm, ja,
ich sag gleich noch was, was ich auch geil finde. Wobei, ich sag... Also Ninja Magnum
sagt ja gerade Aesthetic Interfaces, was ich persönlich auch extrem cool finde. Bin mal
gespannt, wie sehr sich das durchsetzen wird, ob das eher so, ja, ungern gesehen ist oder
ob das die Leute häufig verwenden ist. File, äh, wie nennt sich das? File-Access? Nee,
File... Ich zeig's euch gleich, steht hier bestimmt im Readme drin. Du kannst jetzt
deine Klassen als nur aus diesem File zugreifbar markieren. Das ist für irgendwelche Factory-Klassen
und sowas ist das richtig, richtig nice. Da kann man das zum ersten Mal ordentlich kapseln,
wenn man das denn will oder wenn man sich denkt, es mir eh egal, ist auch egal. Na dann,
ist wurscht. Aber das finde ich ganz gut. Das ist so ein bisschen sowas, was man in C++
beispielsweise schon recht lange machen kann. In C++ kann man nur in C++, ey, also, dass
ich mal C++ da loben muss bzw. C++ da in dem Fall hervorhebe ist, heißt schon was. In
C++ kannst du beispielsweise bei Klassen sagen, äh, Friend und dann kann eine andere Klasse
auf Private-Sachen zugreifen, weil sie eine Friend-Klasse ist. Der Name ist ziemlich beknackt,
aber so ähnlich könnte man das mit diesem File-Accessor-Dings machen. Zeig ich euch
gleich. Ist aber weirdchamp, warum? Zumindest das da ist sehr nice. Raw String Literals
und wisst ihr was das Beste ist? Sie haben das noch ein bisschen verbessert. Müsst ihr
mich mal korrigieren, ob das in Python mittlerweile auch funktioniert, aber ich hoffe, sie haben
da ein Beispiel drinne. Sie haben das verbessert und zwar, das sind alles ziemliche Pepega-Beispiele.
Wie? Das wichtigste zeigen die gar nicht. Das wichtigste zeigen die gar nicht. Geiler
Block Microsoft, ggEats. Also wir nehmen mal das Beispiel hier von Microsoft. Ich zeige
euch nur mal so trocken, trocken, trocken Beispiele, ja. Äh, C sharp. Also, das ist
das Microsoft-Beispiel. Was man jetzt machen kann ist folgendes. Wenn hier drei Quotes
sind, beziehungsweise man muss glaube ich nicht mal drei Quotes machen, man muss einfach
so viele Quotes machen in Reihenfolge wieder halt abschließend kommen. Was man machen
kann ist, wenn man jetzt hier drinne eine Variable einsetzen will, also gehen wir mal
davon aus, man hätte hier drinne irgendein JSON, irgendein JSON-Objekt. So, 0w ist, ja
und jetzt möchte man hier irgendeine Variable einsetzen. Heckel war oder so. Da geht das
ja natürlich nicht, weil du es es capen musst. Und normalerweise escapet man in C sharp das
ganze ja so. Du machst da ein Template-String draus. Das funktioniert an der Stelle aber
nicht, weil JSON, bzw. JSON hat geschweifte Klammer auf und die Escape-Sequenz zum Variablen
einsetzen ist auch geschweifte Klammer auf. Deswegen haben sie ein neues Feature eingebaut,
man kann einfach doppelt ausrufen, äh doppelt, doppelt Dollar machen und dann muss man quasi
so viele Dollars wie man hat, muss man hier drinne zum öffnen, für die Escape-Sequenz
zum Variablen einsetzen machen. Das heißt, die JSON-Dinger sind ganz normal String und
das hier ist Variablen einsetzen. Und man kann auch, ich glaube man kann theoretisch
beliebig viele machen. Also man muss quasi das machen, so wie es halt natürlich nicht
vorkommt in dem String. Finde ich eigentlich eine ganz coole Sache. Wird man nicht so oft
brauchen, aber wenn man es braucht, ist es enorm praktisch. Gucken wir mal die anderen
Sachen schnell durch. Abstracting over Static-Members, ja das ist auch eine richtig coole Geschichte.
Bisher war es so, Interfaces konnten, okay also fangen wir mal ganz vorne an. Früher,
ganz früher konnten Interfaces eigentlich bloß Methodendefinitionen haben. Irgendwann
später und es kann sein, dass ich falsch liege und das von Anfang an schon da drinne
war, gingen Properties auch. Und irgendwann kamen sie dann auf die Idee, man könnte Default-Interfaces
machen. Also quasi Interfaces dürfen jetzt Default-Implementierungen haben. Da kann man
sich jetzt drüber streiten, ob das was Gutes ist oder nicht, aber das gibt es auch seit
ein paar Versionen. Aber eine Sache, die mir persönlich auch schon immer gefehlt hat,
ist, dass man in einem Interface sagen kann, dass da auch Static-Members, also dass da
auch Static-Geschichten drinne implementiert werden müssen. Das ist zum Beispiel ganz
gut, wenn man irgendeinen Parser hat oder irgendwas oder ein Plugin zum Beispiel. Stell
euch mal vor, ihr wollt irgendwie eure Anwendung, wollt ihr Plugins einbauen und ihr habt dann
sowas wie ein Interface-i-Plugin. Das muss, ihr möchtet eigentlich, dass euer Plugin
eine statische Create-Methode hat oder irgendwas in der Richtung. Das ist ja ganz gut, gerade
wenn man das ganze Async machen will, weil Constructor kann nicht Async sein und so,
ist das ganz sinnvoll. Aber das ging bisher nicht, weil du konntest bisher nicht sagen,
dass eine Klasse Static-Sachen implementieren muss. Was geht jetzt mit dem Interface? Das
finde ich ganz cool. Die haben diesmal noch ganz, ganz viel abgedrehtes Zeug gemacht mit
diesem Feature. Beispielsweise kannst du zum ersten Mal in C-Sharp 11 jetzt beispielsweise
eine Number, also eine allgemeingültiges Number-Interface verwenden. Ich hoffe, das
kommt noch unten drunter. Also du kannst jetzt beispielsweise eine Generic-Funktion bauen,
die für alle numerischen Typen funktioniert. Von Int, bis Float, bis Double, bis Bites,
sonst was. Weil es jetzt sowas wie ein Number gibt. Mal gucken, ob das noch kommt. Also
das ist auf jeden Fall eine coole Geschichte. Static-Interfaces oder Static-Members in Interfaces.
Das ist ein komisches Beispiel, aber im Endeffekt heißt das nicht eigentlich ein Number normaler?
Achso, hier haben sie. Das gucken wir uns aber alles mal in einem nächsten Stream an.
Ich will da heute nochmal drüber scrollen. Da muss ich am Vorfeld ein paar gute Beispiele
überlegen. So, List-Patterns haben wir da noch. Da ein Flieger, moin. Ok, List-Patterns
haben wir da noch. Das ist tatsächlich auch ganz cool. Ich weiß, ich hab's letztens auch
in irgendeinem Video gehört, ich glaub das Video hab ich hier sogar noch offen, das wollte
ich mir mit euch auch mal fertig angucken. Dass die Sharp so ein bisschen die Richtung
fehlt, beziehungsweise dass die sehr wild aus allen Sachen implementieren. Ja, das ist
so. Es sind auch ein paar Sachen reingekommen die letzten Jahre über, wo man das Gefühl
hat, das hat Microsoft einfach eingebaut, weil sie das selbst braucht und ihre Jason-Implementierung
war lange Zeit Schrott bzw. nicht richtig vorhanden. Die neue ist besser, aber im Prinzip
immer noch schlechter als Jason.net, aber schneller. Also, dass man überhaupt noch
Third-Party-Libraries für Jason-Zeug braucht, wenn man ein bisschen advancederes Zeug machen
will, ist schon pains-champ. Naja, gut, aber wie gesagt, es geht in die richtige Richtung.
Insgesamt kamen ein paar Sachen rein, wo man sich drüber streiten kann, aber insgesamt,
so die Gesamtansicht der Sachen, muss ich sagen, finde ich eigentlich ganz gut was Microsoft
da reinbringt, zum größten Teil zumindest. Und diese ganze Pattern-Matching-Geschichte
sorgt zwar zum einen für, dass manche Sachen ein bisschen doppeldeutiger sind. Zum Beispiel
kann man jetzt sowas machen wie is 0 oder gleich gleich 0, wobei das je nach Kontext
mal das eine geht, mal das andere, mal beides. Ja, in dem if geht zum Beispiel beides, hier
in so einem Switch, dann geht da nur das eine. Gut, aber insgesamt ist es tatsächlich ganz
sinnvoll, was sie machen und List-Patterns finde ich auch cool. Du kannst jetzt zum Beispiel
Strings splitten oder Arrays splitten, dann sagst du, ich will den ersten Buchstaben
und eine Variable, wo der Rest drinne steht. Du kannst auch sagen First, Second und Rest.
Das ist wirklich nice. Braucht man wahrscheinlich auch nicht oft, aber wenn man es braucht,
ist es sehr praktisch, dass man Strings und Arrays und generell Enumerables jetzt ordentlich
splitten kann. Das finde ich sehr, weil ich weiß gar nicht, ob das für alle, ich kann
das dann aussprechen, für alle Enumerables gilt oder nur wirklich für alles, was List
ist. Vielleicht auch alles, was List ist, weil List nur Index. Weiß ich nicht, müssen wir
mal nachgucken, aber das ist eine coole Geschichte. Moins sags. Required Members, ja Required
Members ist auch eine coole Sache. Die haben ja vor ein paar Versionen Record-Types eingeführt.
Also sprich, dass man Klassen hat, die sich ein bisschen wie Structs verhalten, wo dann
zum Beispiel überschrieben wurde, Equals und ein ordentliches Console-Print eingebaut
hat und sowas. War eigentlich ganz nice. Ein bisschen doof war es allerdings, nur dass
du teilweise immer noch riesenlange Constructor bauen musstest, wenn du sicherstellen wolltest,
dass jedes Feld, was drinstehen hat, was du drinstehen haben willst. Stellt euch vor,
ihr habt sowas wie First Name, Last Name, Middle Name, Age und sowas und ihr sagt halt,
ok, das ist nur gültig, wenn mindestens bei First Name was eingetragen ist. Das konntet
ihr bisher nicht machen, ihr müsst einen Constructor anlegen, wo das drinsteht. Und
jetzt gibt es Required und das finde ich eigentlich eine coole Geschichte, dass man jetzt kompakt
solche Datenklassen schreiben kann und ohne einen Constructor hier der Kram quasi zwingend
erforderlich ist, wenn man es anlegt. Das finde ich praktisch. Und ich meine, ich verstehe
die Kritik schon, die es da gibt, dass die Sharp jetzt viele Sachen halbherzig und doppelt
gemoppelt hat, ist irgendwie auch. Aber ich hoffe, dass sie das alles noch ein bisschen
runder machen die nächsten Jahre über. Microsoft legt ja ein beachtliches Tempo vor, da kann
sich Java durchaus mal eine Scheibe von abschneiden. Und dass Sprachen, die komplett neu rauskommen,
jetzt vielleicht keine Altlasten mehr haben, die sie noch bis heute supporten müssen, ist
halt so. Die können halt Sachen anders machen, die haben das gleiche Problem dann in 5 bis
10 Jahren, falls es die da überhaupt noch gibt. Was ich denke, was Microsoft tatsächlich
mal öfters machen könnte, da bin ich ja wahrscheinlich einer der wenigen, der das sagt, ich bin der
Meinung, die könnten mal ein paar alten Sachen rausschmeißen. Beispielsweise die ganzen
normalen Collections, die nicht Generic sind oder sowas, brauchste doch heute gar nicht
mehr. Wozu? Wozu brauche ich noch eine Arraylist? Könnten sie rausschmeißen. Weil ich meine,
ich kann im Zweifel zwar immer eine List of Objects machen, da kann ich das Gleiche mit
anstellen. Solche Geschichten. Und man könnte durchaus auch mal überlegen, ob man nicht
vielleicht ein paar Sprachkonstrukte entfernt, die man gar nicht mehr verwenden soll. Also
da gibt es so ein paar Sachen, das könnte man durchaus machen. Man könnte es ja sagen,
man macht das zu einer LTS Version und dann halt das immer irgendwie maximal alle 5 Jahre
oder so. Ganz ehrlich, da sind Sachen drin, die sind seit C Sharp 1 drin und das muss eigentlich
gar nicht mehr drin sein. Okay, ich gebe zu, es ist doof für Leute, die halt wirklich
Legacy-Codebases haben, die zurückgehen bis C Sharp 1, LTS, Long-Term-Support gibt es
bei.NET auch. Das sind dann immer Versionen, die, ich weiß gar nicht wie lange, 2, 3 Jahre
oder so supportet werden. Ich glaube,.NET 6 war LTS,.NET 7 ist wieder kein LTS und
.NET 8 ist dann wahrscheinlich wieder, ich weiß den Zyklus da nicht genau, wie das Microsoft
macht. Also das ist natürlich ein bisschen doof dann für Leute, die noch in der Codebase
haben, die auf C Sharp 1 Dingern basiert. Also die hängen wahrscheinlich hier auf.NET
Framework fest. Also ich glaube gar nicht, dass es so ein großes Problem wäre. Man könnte,
wenn man das wirklich machen will, vielleicht sogar irgendeinen Flag einführen, so schallt
den alten Shit aus. Aber ja, also ein bisschen, ein bisschen aufräumen könnten sie wirklich
mal und ein paar alte Sachen rausschmeißen könnten sie auch. Ja, das war es im Großen
und Ganzen auch. Und jetzt, finde ich, fehlt einiges jetzt noch hier drinnen. Gab durchaus,
durchaus noch mehr interessante Sachen. Das ist C Sharp 11, aber das gucken wir uns da
mal in einem anderen Stream an. Generics S in Version 2. Ja, genau. Deswegen könnte
man theoretisch alles andere rausschmeißen, weil ganz ehrlich, wer hat noch irgendeine
C Sharp 1 Codebase? Oh, habe ich hier noch einen? Dogger laufen, Dogger, stopp. Ich hab
noch einen O-Proker laufen. Lul, was macht denn der hier? Hier mal aus. So, ich mach
mal ein Update. Da gibt es bestimmt wieder was. Ja, da kommt einiges jetzt. Bäm. Na gut,
dass ich das jetzt angeschmissen habe. Ich hoffe, der Stream leckt jetzt nicht, weil
ich so viel update auf einmal. So, Yam und Abt hätte jetzt erst angefangen, Sachen
zu laden. Das mag ich an Pac-Man, das ist immer sehr, sehr zackig. Und es geht schnell.
Ihr werdet sehen, das ist ratzfatz fertig. Ich meine, es muss immerhin 1,4 Gig runterladen.
Guck, gleich ist alles runtergeladen. Und dann gibt es Update. Ist auch schön, dass
man das parallel machen kann. Ich weiß gar nicht, ob man Yam oder Abt mittlerweile dazu
überreden kann, Downloads parallel zu machen. Ich weiß nicht, ob das geht. Also, die Folgen
misse ich jetzt auf jeden Fall. Das weiß ich jetzt immer nur eins zur gleichen Zeit.
So, hoffen wir mal, die Updates laufen durch. Abt nur mit Rapper. Wenn es der Rapper kann,
warum kann das Abt nicht selbst? Startet es dann mehrfach Abt unter der Haube? So, dann
Upgrade mal. Gib ihm. Ja, wir müssen mal ein Upgrade machen, mal schauen, ob es irgendwie
für Ryder oder andere Geschichten Updates gibt. Ist das die VM, die du updatest? Ja,
das ist die VM, die ich update. Was? Failed? Ach so, weil die Tools gerade updaten. Okay,
das ist in Ordnung. Dann darf das Failed sein. Erinnert ihr euch noch? Hier, mscripten, c++,
FFmpeg, Browser, Experimente, die wir gemacht haben. Das lief erstaunlich gut. Okay, Update.
Sonst noch was, check for Updates. Update available, nee, Gibayden, ich mach doch gerade das Update
schon. So, und dann Rebooten wir mal. Update Champ, ja. Wenn das durch ist, dann Rebooten
wir mal. Und dann geht's los. Oh, mein Ram ist fast voll. Was ist denn da los? Leute,
mein Ram. Ah, jetzt ist er wieder, jetzt ist er wieder frei. Er war, er war fast voll.
Gucken wir mal, ob wir Kernel-Update machen müssen. Irgendwas ist das immer noch aktuell.
Das haben wir hier. LTS, LTS-Kernel, wunderbar. Nochmal hier den ganzen Krempel-Update. Na,
dann geht's. Wieso früh prüfst du deinen freien Ram? Ich wollte wissen, ob's Ram oder
Festplatte ist. Anhand des Symbols da oben wusste ich nicht, was es ist. So. Was? Aqua?
Was? Update Champ. Ja, wir bauen einen Package-Manager. Einfach nur, weil es mir zu langsam ist. So.
Auf Updaten. Ach, das neue JetBrains-Tool. Ich weiß gar nicht, was es ist. Was ist das
eigentlich? Aqua. Powerful Tool for Test Automation. Wir machen keine Tests. Wir programmieren
beim ersten Mal schon immer perfekt. Also, es ist komplett verschenkte Mühe von JetBrains,
dass sie das programmiert haben. Tests sind einfach nur bloated, so sieht's aus. Hinause
wie Kommentare. Wer fehlerfrei programmiert, braucht keine Tests und keine Kommentare.
Weil, wenn's fehlerfrei ist, dann muss es auch kein anderer lesen und verstehen, weil
es geht ja. Ist doch ganz klar, oder? Einfach keine Fehler programmieren und das ist viel
einfacher. Außerdem dokumentiert sich selbst. Korrekt. Wie kann man Gerätstreiber auf Hilung
installieren ohne Package-Manager? Du musst im Zweifel... Sie kommt drauf an, was es denn
genau ist. Du musst wahrscheinlich irgendwelche Kernel-Module selbst bauen dann. Ich hab ein
doofes, proprietäres Hilungsaufbau im Nass und der hat keine Treiber für mein... Guck
mal, ein Zigbee-Adapter. Ach du Scheiße. Da hast du wahrscheinlich gelitten. Wenn der
Kernel-Module braucht, dann brauchst du nämlich Kernel-Header und musst den Kram selbst kompilieren.
Das ist nicht so schön. Würde ich mal gucken, ob das vielleicht schon jemand gemacht hat.
Gerade wenn es in Cyanology ist. Passt das vielleicht? Moin. Guck mal, Krieger ist am
Start. Ja, also, wenn es in Cyanology ist, hast du ganz gute Chancen. So, jetzt können
wir mal rebooten und hoffen, dass das funktioniert. Ja, Krieger, du wirst kaum glauben, wer mich
vorhin seit Jahren angeschrieben hat. Jemand, den wir beide kennen. Also, was ich damit nicht
sagen will, ist, dass er mich hätte früher anschreiben lassen sollen, weil das hätte
ich auch machen können. Ihr kennt mich ja, was soziale Interaktion angeht. Doch, korrekt.
Doch, der Grafum hat mich angeschrieben. Ne, wir hatten ewig keinen Kontakt. Ich glaub,
warum ist hier mein... Leute, mein VM-Wertzeug ist kaputt. Oh, oh, oh, oh. Wir haben es kaputt
gemacht. Doch, der Torst hat mich vorhin angeschrieben. Das ist äußerst überrascht. VM-Tools. So.
Ah, jetzt. Exzellent. Alles klar. Warum es das nicht automatisch gemacht hat, verstehe
ich nicht. Ist das vielleicht nicht Autostart oder so? Ne, wir haben schon ewig nicht mehr
gequatscht, deswegen. Hat mich auch gewundert. Ich mein, ich hätte mich natürlich auch
mal melden können, aber ihr wisst so soziale Sachen und das klappt bei mir eh nie. Enabled,
doch. Ist eigentlich eingeschaltet. Na gut. Gut, Leute, wir haben es geschafft. Wir können
es machen. Außer, dass mein Hintergrund gebrochen ist. Jetzt. Wallpaper. Jetzt ist er richtig.
Bing-Image of the day. So, erstmal alles zumachen hier. So, alles zumachen. So, Fiat. Uconnect.
Wir müssen uns einen Fake-Account machen, Leute. Sonst klappt das. Klappt das nicht.
Massive-Fake-Fake-Account. Ich zeige euch jetzt erstmal, was wir heute abtappen...
abzapfen wollen, war Fiat. Und wir brauchen erstmal einen 10-Minute-Mail-Account. Meinst
du... Meinst du Kabum oder meinst du mich? Also wir haben uns auf der Gamescom irgendwann
mal ganz kurz gesehen so vor. Frag mich nicht. 7 Jahre oder so ist schon ewig her. Fake-Account
registrieren. So. Wählen sie ihre Präferenzen. Deutsch. Was ist mit meinem Firefox los? Habt
ihr das gerade gesehen? Habt ihr auch so einen Firefox-Geklitsch gehabt gerade? Was ist das?
Was ist... Was ist das? Das hier... Das Jahr des Linux-Desktops. Ja, so sieht's aus.
Also bei sowas denke ich mir auch immer. Was haben sie da schon wieder gemacht? Warum
klitscht der Background durch? Warte mal. I3... So, jetzt ist die typische Linux-Frage.
Was meint ihr woran es liegt? Ist es ein Problem vom Firefox? Ist es ein Problem von I3? Ist
es ein Problem von X? Ist es ein Problem von den VM-Wertreibern? Ist es ein Problem vom
Kernel? Nach was soll ich suchen? VM-Tools-Bug hatte ich auch mal. Musste VM-Tools downcranen.
Ach ja, wirklich. Ein VM-Tools-Bug. VM-Tools-Firefox-Background-Glitch. Suchen wir mal. Ok, hat Chrome das gleiche Problem?
Lass mal kurz gucken. Machen wir hier mal die Seite auf in Chrome und gucken ob Chrome
das gleiche Problem hat? Nein. Chrome... Nur Firefox hat das Problem. Chrome juckt's
überhaupt nicht. Wir haben uns nur ganz kurz gesehen auf der Gamescom. So irgendwie 30
Sekunden oder so. Vielleicht ging das unter. Also irgendwie ist es kaputt. Tja, so und
der Chat meint es liegt an VM-Wertools. Downcrate, VM... VM-Wert? Wie heißt denn der Kram? VM-Wertools...
Ach, Open VM-Tools. Ok. Downcrate, Open VM-Tools. Jaja, run as root. Auf was soll ich ihn downcranen?
1205? Das hatte es auch mit Chrome. Proceed Installation. Yep. Nope. Ok, schauen wir mal
ob das Problem jetzt weg ist, wenn ich reboote. Das Jahr des Linux-Desktops ist jetzt. Ok,
schauen wir mal. Firefox. Na, immer noch. Daran lag's nicht. Was ist denn das für ein
Shit, man? Wo klitscht mein Background einfach durch? Ok, also an VM-Wertools... an VM-Wertools
liegt's nicht. Nee, jetzt ist... jetzt passiert das nicht mehr. Doch, doch, passiert immer
noch. Was ein Mist, ich hoffe wir können trotzdem gescheit, gescheit arbeiten heute.
Jetzt habe ich einen geklitschten Browser. Na, geil. Ach, was könnte ich ihn da suchen?
Firefox-Backgrounds-E3-Clitch-Image oder sowas. How do I work around Firefox rendering? Fuck.
Linux-Clitches. This is a show Windows tabs from last time. Was? Close change? Das ist
ja nervig. Alter, what the fuck? Da kriege ich ja Zustände bei. Ok. Linux-Firefox-Background-Clitch.
Was ist da vielleicht? Firefox-Window is transferred flashing right after... Quatsch. Ok, vielleicht
sollten wir mal suchen nach letztem Jahr oder eigentlich letztem Monat. Lange ist das ja
noch nicht her. Jetzt dauert die Zeit im Update. Ubuntu-Clitch. Strange-Visual-Effects. Alter,
ist das nervig. What the? Da kriege ich ja Zustände, da kann ich hier nichts drin machen.
Guckt euch das mal an. Das ist ja ultranervig. Ich mein, ich könnte einfach Chrome verwenden
und dann sagen, scheiß drauf geht. Dann funktioniert es einfach. Aber das kann es jetzt ja nicht
sein. Du hattest das mit Chrome? Also mit Chrome habe ich nix, guck. Chrome ist kein
Ding. Chrome funktioniert. Wohingegen Firefox... Du siehst ja auch, es hört ja auch direkt
auf beim Firefox. Das ist Firefox. Das ist Firefox-Problem. Background. Suchen wir mal
da. Background. Firefox neu installieren. Nee, ich hab gerade ein Upgrade gemacht. Teil
Background on clipped layer appears incorrectly. Das könnte was damit zu tun haben. A layer
contains a background picture. As soon as the layer is being clipped, background doesn't
appear. Nee, das ist irgendwie ein CSS-Problem. EE6 ist okay. 20 Jahre. Vor 20 Jahren. Seriously.
Unconfirmed. Hätte man sich gedacht, in 20 Jahren hätte es vielleicht mal ein bisschen
was neueres sein können. Kifke, danke schön für den Sub. Probier mal Hardware in Firefox
auszumachen. Wie denn? About. Config. Und dann? Hardware. Wie mache ich denn das? Das
besser? Nee. In den normalen Settings. Hardware. Und wo? Warte mal, was ist, wenn ich Light
nehme? Oh, mein Auge. Okay, nee, ist immer noch das gleiche mit Light nehmen. Viel besser.
Welchen? Welchen? Wo? Wo? Das da. Okay. Und das soll was bringen? History. Hey, das funktioniert.
Wir haben es gefixt, easy. Hardware Acceleration aus. Nee, wer hätte sich das auch denken
können? Hardware Acceleration aus. Und der Browser fühlt sich jetzt ehrlich gesagt auch
nicht wirklich langsamer an, gell, also. Aber Hauptsache die Hardware Acceleration ist aus.
Nice, gut. Alles, alles gut, alles gefixt. Nice, GG Eats. So, nicht verstehen, was das
jetzt wieder für komisches Zeug gewesen ist. So, also, auf geht's. Ich möchte eine andere
E-Mail Adresse, ja, möchte ich haben. So, hier, in die Zwischenablage kopieren. Also
wir registrieren uns jetzt mal bei Fiat und dann zeige ich euch, was wir heute abzapfen
wollen. Vorname, Max, 0W, E-Mail Adresse, weiter. Kennwort, tja, nee, da muss ich mir
jetzt was anderes, da muss ich mir jetzt irgendwas ausdenken. Omega-Keckel oder so, wobei ehrlich
gesagt, eigentlich ist es egal, weil ich mache den Account danach eh wieder zu. Aber weis,
wir machen, wir, wir. Also, nein, ich will keine Angebote haben, alles. Zum Dashboard
wechseln. Nice, safe, jawoll. So, Seite neu laden. Jetzt müssen wir warten, bis da eine
Bestätigung von Fiat kommt, aber ich glaube, Fiat schickt keine Bestätigung an Fake-E-Mail-Adressen,
die sind zu schlau, die sind zu high IQ dafür. So, ich zeige euch aber mal jetzt, was wir
heute abgreifen wollen. Und zwar folgendes, guckt mal, der macht MQTT. MQTT, da, guckt
mal, was der hier macht. Request Response. Also, Amazon macht MQTT, äh, nicht Amazon,
Fiat macht MQTT über Amazon. Und da werden solche Sachen verschickt, wie zum Beispiel
Auto ist fertig geladen oder aber Auto ist jetzt in einem speziellen Gebiet angekommen,
Auto fährt über 100 Stundenkilometer und solche Geschichten. Also, aus irgendwelchen
Gründen ist Fiat der Meinung, dass das über den, über AWS, IOT, MQTT gehen muss. Was
den Vorteil hat, ich will mich da nicht beschweren, was den Vorteil hat, dass wir es abgreifen
können. Anderweilig hätten wir gelitten. Jetzt ist nur die große Preisfrage, wie um
alles in der Welt benutzt man diesen Kram. Request. Headers. Ich meine, hier können
wir irgendwie zumindest ja schon mal ein paar Credentials rausholen. Wir machen jetzt ein
neues Projekt. Hier können wir schon mal gleich ein paar Credentials rausholen, um
darauf zuzugreifen. Ist das da eigentlich allencoded, was man sieht, oder ist das schon
wieder alldecoded, was da im Firefox drin steht? Wahrscheinlich, wahrscheinlich encoded. Ja,
also das ist das, was wir jetzt mal probieren. Und ich habe wirklich keine Ahnung, wie ich
da am besten mit anfange. Wir machen erstmal ein neues Projekt. Repos. Mkdir. Oh, wir müssen
noch hier neue.NET Version updaten. Zack, gib ihm. Auf runterladen ins Eimatverzeichnis
packen. Ja, wunderbar. Oder hat er jetzt das andere.NET auch schon geupdatet über die
Packages? Nee, das ist noch bei 6.0. Das wird wahrscheinlich auch bleiben bei 6.0, bis es
kein LTS mehr ist. Mkdir. AWS. MQTT. Test. So. New Console. Gut, und dann machen wir
die auf. Und dann probieren wir mal, ob wir es irgendwie ausgelesen bekommen. Ich habe
da, ich habe da so meine Zweifel, dass das so einfach funktioniert. Repos. AWS. MQTT.
Test. Bäm. Öffnen. Trust. Any Trustors. Gut. Not fully supported, das interessiert
mich nicht. Gut. So, wir klauen uns mal kurz die Zugangsdaten von hier, wir reloaden nochmal,
dann holen wir uns die Zugangsdaten raus. Request, response, response. Ähm. Moment,
wie bekomme ich denn überhaupt die Zugangsdaten hier jetzt gescheit, gescheit raus, um es
auszuprobieren? Ansonsten müsste ich mich ja erst mit dem anderen einloggen. Hier,
credentials. X. Oh nee, ich glaube, ich muss, ich glaube, ich muss den, den Fiat Champ starten.
Cookies. Secret Key. Kriegen wir nicht irgendwie die Amazon-Authentifizierung raus? Ich habe
jetzt kein Bock, das andere zu starten hier. Login. Cookie. Boah, nee. Ich glaube, ich
muss das andere starten und wir müssen uns ein paar Zugangsdaten generieren. Okay. Open
Fiat Champ. Da steht alles in der Url drin, da habe ich aber nicht den Secret, das nicht
das Secret gesehen. Das macht ja nichts. Wir können das, wir können das ja hier. Wir können
uns ja hier was generieren. Was ist das? Was haben wir denn hier gebaut? Das war irgendwas,
was wir hier im Stream ausprobiert haben. Ich brauche, ich brauche nur ein paar Zugangsdaten,
also der Krämpel kann er eigentlich komplett, komplett weg. Ich will jetzt auch nicht pullen,
weil da sind ein paar Dinger drin, die ich jetzt gerade noch gar nicht gebrauchen habe.
Was ist das hier? Alles weg. Braucht einfach nur ein Login. Jaja, alles weg. Tracker, weg.
Jaja, weg, weg, weg. Braucht alles. Ich brauche einfach nur ein Login. So, CD, wo sind wir
hier? Da, alles klar. Export. Achso, ich benutze die Fake API. Das ist natürlich noch besser.
Die Fake API bringt mir jetzt aber nichts um. Ich brauche AWS Zugangsdaten, die müssen
doch hier irgendwo drinne stehen. Wurscht. Leute, ihr müsst mal kurz weggucken. Ich exportiere
mal kurz mein Passwort in eine Environment Variable rein. Export, null, pw gleich. Wie
gesagt, das ist nicht mein Passwort, das ist ein Fake Account, den ich angelegt habe. Aber
man weiß ja nie. Bin schon drin. Jaja, ich weiß, ihr seid immer sofort, sofort überall
drinne, Chat. Gatschi-Buzz. Okay, sind wieder da. So, export. Geil, jetzt habe ich gleich
mal das Passwort geleakt, Keck. Na gut, ist egal, es ist eh ein Fake Account. Kann man
eigentlich, kann man eigentlich mal eine blöde Frage? Gatschi-Buzz, Gatschi-Buzz. Kann man
eigentlich sein Account wieder, wieder löschen? Geht das eigentlich? Wie closed man denn sein
Account? Ändern? Geht das nicht? Kann man sein Account nicht
mal löschen oder was? Einmal Account, immer Account. Ne, wo war das? Wo war Account deaktivieren?
Ach hier, hier, Konto deaktivieren. Deaktivieren. Hä? Warum soll ich dir Pin vergeben? Warum
soll ich dir Pin vergeben, um einen Account zu deaktivieren, man? Ja? Na, weil, weil ihr
seid. Okay, massive. Ihre erste Frage, Omega-Keck. Blub, blub, blub. Weiter. Ja, geil. Dankeschön,
dass die Pin aktualisiert wurde. Bin ich froh drüber, Fiat. Konto deaktivieren, ja. Ich
musste Pin einrichten, um es zu löschen, um dann die Pin eingeben zu können. Eine geiles
Sicherheitsfeature. Ihr Konto wurde deaktiviert. Jawoll. Wir haben uns, wir haben uns selbst,
wir haben uns selbst wieder ausgesperrt. Nice. Okay, ich sehe schon in der Shell als Environment
Variabel, ist das eine blöde Idee. Ich muss mir einen neuen Account machen und hier irgendwie
eine Datei anlegen oder so. Sonst wird das, glaube ich, nichts. Okay, Wim, blub.txt ist
vollkommen egal. Irgendeine Datei, wo das Passwort drinsteht. So, ein neuer Account.
Next try, next try. Neues Passwort muss ich mir ausdenken. Okay, nice. Neues Passwort
ist Space Export. Nope, bringt nichts, weil ich es aus irgendwelchen Gründen geschafft
habe, dass es trotzdem in History steht. Ich weiß gar nicht, was ich dafür gemacht habe,
aber ich habe es, ich habe es geschafft. Wie du siehst, ist das hier schon mit einem
Leerzeichen davor. Guck. Das geht, ich wusste ja auch nicht. Ich habe extra Leerzeichen
davor gemacht. Es steht aus irgendwelchen Gründen trotzdem in der History. Ich wusste
auch nicht, dass das geht. Okay, nächster Fan-Account bei 4 und auf geht's. Nein, nein,
was ist da? Da, Moment hier, registrieren. Was letzte Sprache? Cute Chat. Nachname brauchen
wir nicht hier, beste Nachname. Okay, Kennwort. Ich habe mir eins ausgedacht. Das dürft ihr
nicht wissen, Leute. Mega geheim. Ich habe mich vertippt. Weiter. Nein. Wollen wir nicht.
Ne, mein End-File. Ja, das könnte man auch machen. Das ist eine gute Idee. Das ist tatsächlich
eine gute Idee. Wir brauchen kein End-File. Wir brauchen schlicht und ergreifend ein File,
was wir dann sourcen können und dann ist gut. Ich meine, im Prinzip kommt noch das gleiche
raus. Safe. Okay, nice. Ihr müsst noch mal kurz weggucken, Chat. Ihr müsst noch mal nicht
hingucken. Augen zu. Versprochen. Wo ist mein Passwort hier? Okay. Source. Alles klar,
so. Ich glaube, ich habe es geschafft. Ohne was zu leaken. Blub TXT steht das Ganze jetzt
drinne. Also, legen wir mal los. Export. Also, Fiat User. Fiat User ist der da. Ich muss
jetzt ein paar Environment Variablen füllen, damit mein Addon funktioniert. Weil eigentlich
ist es ein Home Assistant Addon und Home Assistant setzt so ein paar Variablen zum Start. Fiat
Passwort gibt es nicht. Fiat Passwort ist 0PW. Steht das drinne. Debug kommt auf false,
weil ansonsten steht das Passwort im Klartext drinne. Fake AP kommt auf false. Ich brauche
den ganzen Kram hier heute nicht. Ich brauche das einzig und alleine. Run. Ich brauche
das einzig und alleine, dass ich ein Passwort bekomme für Fiat AWS. Ja, ist schön, wenn
der sich MQTT nicht verbinden kann. Soll mir recht sein. Okay. Fiat Client. Vehicle Location.
Ja, genau. Hier. Login. Es sollte eigentlich ein bisschen mehr ausgeben als das. Siehste
mal, glücklicherweise, weil ich so schlauer habe, hier das Passwort ausgedingst. Okay,
anscheinend braucht es einen MQTT Server, dass es funktioniert. Alles klar. Also schalten
ein MQTT Server an. Oh ne, dass die VM auch lockt. Okay. VMs HA. Heute heute wills, aber
nicht. HA. Jubantu. Wo ist das Lockfile? Okay, Start. Ist anstrengend. Okay, so jetzt
haben wir ein MQTT Server am Start. Geht jetzt weiter. Okay, gut. Fetching completed. Das
erscheint mir ein bisschen sehr schnell. Mensch, da will ich mich doch heute eigentlich
gar nicht mit auseinandersetzen. Now fetching data. Login. Cannot get home assistant config.
Warum nicht? Kann er doch offensichtlich. Ich meine, das ist irgendeine Fake Adresse.
Okay, schauen wir mal. Irgendwas scheint hier grad nicht. Login. Wo mach ich denn das Login?
Login and keep session alive. Okay. Ach, ich kack noob. Moment, ist das noch der? Use
fake api. Use fake api is a false. Also eigentlich, null. Eigentlich sollte der jetzt was machen.
Ja, geht doch. Geht doch. Geht doch. Alles klar. Okay, also hier macht der Login. Login.
Das Login funktioniert nicht, oder? Login. Ach, das ist Debug log. Ach, deswegen gibt
er nichts aus. Okay, ich hab das tatsächlich ordentlich gemacht, weil normalerweise will
ich das auch gar nicht. So, also. Wo bekomme ich denn jetzt hier meine Amazon Credentials?
Hier, das da. CW login info. Das will ich haben. Ne. Das da will ich haben. Glaube,
da kommt jetzt was. Das sind nämlich die Credentials, die ich brauche von Amazon. Jawoll. Das brauchen
wir. Das brauchen wir. Alles gut. So, jetzt können wir nämlich unserem anderen Kram
weiter machen. Excellent. Ja, wenn ihr in sein wollt, tippt, tippt gerne, tippt das
gerne ab. Wer da Bock drauf hat, ist eh im Fake Account. Tippt, tippt ab. Juckt mich
nicht. So, also, wie können wir jetzt auf Amazon MQTT zugreifen? Dazu müssen wir uns
mal den Netzwerkrequest angucken. MQTT. Okay. OCR. Ich unterschätze immer, wie high IQ
der Chat ist. Aber dann mach OCR. Gibt's bestimmt schon Machine Learning OCR für Twitch Chat.
Die jegliches Passwort liegt instant mitschneiden, sich gleich einloggen und Passwort ändern.
Kannst du mal auf die IDE switchen. Ja, hier, tipp. Okay, also wie sieht denn so ein Request
aus? Was machen die hier für einen Request hin? Es ist auf jeden Fall ein Websocket Request.
WSS, Websocket. Aha, guckt mal, hier haben wir schon die URL, die wir brauchen. Das ist
die URL. Ich bin mir nicht sicher, ob die URL immer gleich bleibt. Das werden wir jetzt
gleich mal ausprobieren. Einfach refreshen und gucken, ob die gleich bleibt. Ich glaube,
die müsste gleich bleiben. Das sieht aus wie so eine Ressource, die halt angelegt wurde
in AWS. Aha, wxpxjb. Aha, wx. Ja, das ist die gleiche. Ja, 5 ckb, 5 ckg1, 5 ckg1. Okay,
das ist die richtige Domain. So, und wie connectet man sich jetzt zu dem Amazon MQTT Ding? Wie
funzt das denn? Da müssen wir mal Google suchen. AWS MQTT C-Sharp. AWS IoT with.NET Core.
Das klingt doch schon mal gut. Connecto AWS MQTT. Ist der Groverflow regelt. Block how
to implement AWS IoT. Wir machen mal was blödes. Wir gucken mal, ob es da nicht schon vielleicht
den NuGet Packages für gibt. AWS IoT oder sowas. Ja, das sind die offiziellen. Ich meine,
wir können das mal installieren und gucken, ob dann da irgendwas passiert. Vielleicht
gibt es das ja auch schon fertig. Direkt von Amazon. Da würde ich mich jetzt nicht beschweren.
Request Signer. AWS Amazon MQTT. Was ist das? NuGet? Oh, NuGet Package only. Was ist das?
Create a signed URL to connect to AWS IoT via MQTT over Websockets. What? So, wir haben
jetzt AWS Zeug installiert und dann suchen wir jetzt mal nach MQTT. Das heißt natürlich
nicht so. AWS Client oder sowas. HTTP Client. Data Client oder so. Amazon IoT Data Client.
Das soll mal einer durchblicken. Was kann man? Okay, kann man damit das irgendwas MQTT?
Gibt es irgendjemand, der bei AWS Geschichten durchblickt? Also immer, wenn ich damit in
Kontakt komme, muss ich sagen, checke ich gar nichts. Service World Proxy Host. Was
hat das jetzt mit MQTT zu tun? MQTT Endpoint. Created Amazon IoT Data Client. Ja, wo? Wo
ist das? Ach hier, Service World. Ist das so einfach? Sekunde, ist das so einfach? Und
dann machen wir mal hier unsere World. Das wird bestimmt nicht so einfach funktionieren.
Service World. Okay, wenn ich return. Client. Oh, was? Was ist denn das alles? Gibt es
da nicht sowas wie Subscribe? Ich meine, ich will ja nichts publishen, ich will ja nur was
subscriben. Publish. Delete. Retained. List Messages. List. List named shadows for thing.
Async. Okay, Amazon ist einfach zu high IQ für mich. Ich weiß nicht, was die mir sagen
wollen. Yes, of course. Alles klar. Okay, wir haben jetzt schon mal Namen. AWS MQTT Subscribe.
Subscribed to Topics. Jawoll. I'm using the Amazon Data, but I've tried. I'm not. Code
to Publish. Moment, hat das Amazon allen Ernstes geschafft, in ihr SDK ein MQTT Client einzubauen,
der nur Publischen kann und nicht Subscriben? Das Elementarste kann das Ding nicht oder
was? From what I can tell, there is no way to do this with Amazon own SDK. Wollt ihr
mich veräppeln? Das Python SDK von Amazon und das JavaScript SDK von Amazon können
das. Das habe ich sogar in den Docs gesehen. Ernsthaft? Die haben es geschafft? Warum
baut man das überhaupt? Warum veröffentlicht man sowas überhaupt, wenn das Elementarste
nicht da drinnen ist? Ich bin verwirrt. Zu low IQ bin ich wahrscheinlich dafür. War
ich im Scope? Ja, die wurden wahrscheinlich auch pro Co Zeilen bezahlt und haben es gedacht,
wir machen jetzt erst mal 50.000 Zeilen und dann machen wir noch mal 50.000 Zeilen für
Subscribed. Wir suchen mal nach letztem Jahr. Ich glaube, allzu lang sollte das noch nicht
her sein. Das scheint echt nicht zu funktionieren oder ist eines dieser Dinger hier Publish?
Wir gucken mal Github. Amazon IOT Client class didn't have subscribed functionality. Okay,
es ist open. Amazon IOT Client library can get shadow things. Was zum Teufel sind shadow
things? Ich habe keine Ahnung. Update shadow, delete shadow, publish message. Aha, nicht
publish shadow. Einfach so. But this class didn't have functionality to subscribe. Ja,
das ist aber genau das, was ich brauche. And also didn't have functionality to connect via
Websockets. Wir wollen aber Websockets connecten. Rage Shadow Legends. Okay, was schreibt was
sagt Amazon? Wir geben dem mal einen Daumen hoch. Bin ich überhaupt eingeloggt? Ne. Agree,
chat. Die agreeen sich. Aber Amazon ist late. Ja, gut. Kann man ja auch mal nicht erwarten,
dass da einer von Amazon drauf reagiert. Easy, nice support. Gut, also, die offizielle Amazon
library können wir für offizielles Amazonsholz schon immer nicht verwenden, weil sich Amazon
gedacht hat, no pass. Wer braucht denn schon Websocket und wer braucht denn schon subscribe
bei einem MQTT Server? Small Indie Company, die können sich zusammen tun mit Blizzard.
Genau. So, also, das funktioniert schon mal nicht. Ich kriege das garantiert nicht alleine
zusammen gewurstet hier. Also, ich brauche irgendein Beispiel. Die müssen noch ein Beispiel
dafür haben. AWS IoT Websockets. C sharp. Example. Oh, was ist das denn? Was ist denn
das? AWS Samples, AWS IoT Core dot net app MQTT over Websockets. Was ein geiler Name.
AWS IoT Core dot net app MQTT over Websocket SICK V4. Way to dank. Sprich das zehnmal hintereinander
fehlerfrei aus. Was haben wir denn hier? Dot net Core Console Applications. AWS IoT MQTT
over Websockets. Das klingt doch schon mal ziemlich genau nach dem, was ich machen will.
Was machen die denn hier drinnen? Cloud Connector. Okay, die verwenden keine Amazon Library Systemal
Amazon will ihren eigenen Shit nicht verwenden. Cloud Config. Aha, aha, aha. Subscribe. Gut,
das ist das, was ich machen will. Jetzt müssen wir nur noch verstehen, was sie hier machen.
Dazu klonen wir uns mal dieses Repo. Gehen wir mal hier hin. Wir machen noch einen fünften
Desktop auf. CD. Repos. Git. Clone. Bam. Jawoll. Jetzt öffnen wir das. Open. Repos.
Wie hieß das Ding? AWS. Dot net Core Console App. Ja, ich glaube das hier. Trust and Open.
New Window. Fünfter Desktop. So, und jetzt gucken wir uns mal an, was denn da Amazon
so drinnen treibt. Alles klar. So, der Einstieg ist ziemlich übersichtlich. Cloud Connection
Config. Instance. Cloud Connector. Cloud Connector. New Cloud. Was? Okay. Also ich
fürchte, wir müssen uns den Cloud Connector angucken. IMQTT Klein. Da kommen wir der Sache
schon näher, Chat. Benutzen die Dings? Das kommt mir bekannt vor. Benutzen die MQTT net?
Die verwenden tatsächlich mal eine Library, wo ich schon mal benutzt habe. Die benutzen
das MQTT net. Okay, das heißt, die benutzten eine fertige MQTT Library und wie sagen sie
dem, dass der WebSockets verwenden soll? Wir gucken mal, was für Versionen die benutzen
hier drinnen. Es ist uraltes Zeug. Dot net Core 2.2. MQTT net. Oh, 2.8.5. Die sind
bei der Library schon ein bisschen weiter mittlerweile. Wahrscheinlich wird das Beispiel
so gar nicht mehr funktionieren. Aber zumindest das alte Beispiel geht so auf jeden Fall noch.
So, was machen die denn hier drin jetzt? Cloud Connector. Okay, AWS MQTT Connection. Host.
Host ist wahrscheinlich hier unser Ding hier. Region ist EU West 1, höchstwahrscheinlich.
Access Key, Secret Key. Das haben wir hier auch. Access Key, Secret Key. Ups, ist weg.
Okay, hier kommt die Magic. Was machen die hier? Signed Request Ural. AWS Signed Request
Ural. Okay, das müssen wir uns gleich angucken. MQT Factory. Und dann bauen die eine ganz
normale MQTT Verbindung mit MQTT net als Library auf. Okay, das einzige was ich von dem ganzen
Ding checke ist der Part, weil das habe ich auch schon gemacht. Und das ist relativ simpel.
MQTT Klein anlegen, sagen wo er sich hin verbinden soll und connecten. Die Magic ist wahrscheinlich
hier drin, was da passiert. Das gucken wir uns gleich an. Sag Websockets. Websockets Bild.
Okay, das ist easy. Also hier ist die ganze Magic drinne. Schauen wir mal da rein. AWS
Connection. Okay, Sign Request Ural. Das ist auch übersichtlich. Okay, guckt hier baut
da die Ural zusammen. Websockets. Secure Websockets. Also das ist quasi das Gegenstück zu HTTPS
für Websockets. WSS Host 443 MQTT. Guckt mal hier, das ist genau das was wir hier auch
rausgefunden haben. Host 443. Steht jetzt implizit nur dabei. Slash MQTT. Und jetzt
macht er einen AWS Signer for Request Parameter Auth. Sehr gute Namenswahl Amazon. Sample
AWS for Signer Demonstrating How to Sign Requests Using Query String Parameters. Obviously.
Alles klar oder? Logisch Chat oder? Also Cringe wer es nicht versteht. Header. Compute Signature.
Okay, also wenn ich das, ich versuche das mal halbwegs zu checken. Damit man mit AWS
kommunizieren kann, das habe ich ja auch schon gemacht. Nachdem man mit, also sie sieht man
ja auch hier in dem Teil hier. Also wenn man mit Amazon kommunizieren will, muss man jeden
Request signen. Das bedeutet, man muss die Header und den Body Content haschen und dann
irgendwie den Signature Hash da irgendwie noch embedden. Und Header braucht man irgendwie
dann auch den passenden Key und die passende Authentifizierung und das ganze Zeug. Also
das habe ich schon gemacht. Aber mit Request Parameter habe ich das AWS halt. Ich weiß
nicht ganz im Ernst. Also ich habe Google, die Google Cloud Geschichten habe ich noch
nicht so viel verwendet. Das einzige, was ich davon schon öfters verwendet habe ist
Google Maps. Also AP technisch. Das geht ja am Rande so als Google Cloud Service durch.
Und relativ viel Azure auf der Arbeit. Ich muss ganz ehrlich sagen, alle Azure Features,
die ich bisher verwendet habe, waren zwar oftmals etwas verworren. Habt ihr mal Logs gequereed
oder nicht Logs, dieses doch Logs. Analytik Workspace heißt glaube ich bei Azure. Workspace
Queries gemacht, das ist schon nicht sonderlich intuitiv und die Graphen sind auch ziemlich
ja Müll. Aber irgendwie ist es logisch in sich. Und die ganzen Azure Geschichten, die
ich bisher programmiertechnisch angesprochen habe, die waren irgendwie verständlich. Aber
jedes Mal, wenn ich was mit AWS machen muss, blicke ich nicht durch. So was machen die
hier denn jetzt schönes? Also die setzen irgendwie erstmal ihre Service-Uhrl bei Amazon, die Request-Methode,
die Region und die Url, also unseren komischen Endpoint hier. So und dann machen sie irgendein
Signature. Dann holen sie sich die, was passiert hier? Ah, dann holen sie sich die Url von
hier oben, die zusammengebaute Url und hängen den Query-String an, der hier drinne generiert
wurde. Eventuell die Docs lesen, ja die sind genauso gut wie die Amazon Libraries, die
die Hälfte nicht können von dem, was sie anbieten. Ich meine, ich will nicht bezweifeln,
dass in den Docs drinne steht, wie man irgendwelche Prüf-Summen berechnet, aber eigentlich will
ich das nicht selbst machen. Es gibt eine AWS-IoT-Client Library, die witzigerweise
weder Websockets kann, noch subscriben kann. Was auch geil ist, wo man sich dann fragt,
was ist die Existenzberechtigung dieser Amazon Libraries. Okay und dann hängt das alles
als Query-Parameter an. Gut, das heißt, das eigentliche, was wir wissen wollen, ist hier
drinne, Compute-Signature. Ach du Scheiße. Okay, Chat, Kommando zurück, Kommando zurück.
Moin Ziegenkäse, Kommando zurück. Wir müssen es ja gar nicht verstehen. Wir müssen es
ja einfach nur benutzen können. Wir müssen es nicht verstehen. Wir benutzen das jetzt
einfach. Okay, also AWS-IoT-Core. Ich komme immer noch nicht auf den Namen klar. AWS-IoT-Core.net
ab MQTT-Over-Websockets. Wir werden nicht drumherum kommen, hier reinzugucken gleich noch,
aber es erschreckt mich schon ein bisschen ab, wenn ich mir das so hier anschaue. So,
.net-Console-App-AWS-Websockets-AWS-IoT-Websockets. No,.net-Run. Warum habe ich da eigentlich
so ein komisches Kill hinten dran? Ah, weil es letztens mal hängen blieb beim Build. Verstehe.
Missing Framework. Ja klar, misse ich den Framework. Wahrscheinlich, weil das ist ja
noch.net Core 2. Das muss ich erstmal upgraden. Wir upgraden erstmal hier. Auf.net 7. Bam,
hoffen, dass es da noch funktioniert. Auf C-Sharp 11. Zack, gib ihm. Rückwärts-Kompatibilität
und Pogge. Okay, das scheint zu funktionieren. Run. Okay, Exceptions werfen darf er, da habe
ich kein Problem mit. Unable to connect to server, ja, das ist mir auch klar. So, diesen
ganzen Müll von Amazon. Alter, meine Idee leckt. Schmeißen wir hier mal raus, das brauchen
wir alles nicht. Das brauchen wir. Das brauchen wir nicht. Also, hier tragen wir jetzt mal
unsere Zugangsdaten ein. Wo trägt man hier Zugangsdaten ein? New Cloud Connector. Cloud
Connection Config Instance. What? Read Settings, Region, Host, Access Key. Ach so. Nee, das
ist, können wir jetzt nicht gleich hier diese, können wir das nicht gleich verwenden? Lass
doch mal diesen Blödsinn hier weg, das brauchen wir doch überhaupt nicht. Also, weg damit.
Das da kommt dann hier rein. Das legen wir dann bei uns im Programm an. Okay, komm wir
nennen es AWS MQTT Connection, dann muss man nichts anpassen. Okay. Das kommt weg, das brauchen
wir gar nicht mehr. Wir müssen das erstmal ein bisschen versimplifizieren, dass ich auch
durchblicke. So, Host. Host ist das da. Nur das da vermute ich mal stark, weil das MQTT
hängt da ja selbst dran. Region. Region ist EU West 1. Access Key. Access Key ist das
da. Es kann sein, dass ich das neu generieren muss, weil das nicht lange genug gültig ist,
kann schon sein. Wir müssen erstmal da hinkommen, dass er überhaupt ein Request abschickt.
Secret Key. Und wir haben noch nur ein Token. Leute, ist das url-encoded? Muss ich das erst
url-decode, dass ich es danach wieder encode kann? Oh, mal. Url-decode. Cyberchef. Eigentlich
url-decode. Decode. Ist das schon decode? Da ist einfach ein Leerzeichen drin. Hä? Wieso
ist Wupplos nicht bei Ich bin zu dick. Ist da ein Leerzeichen drin? Access Key kann man
so verwenden. Meinst du, den muss ich nicht url-decode oder sowas? Meinst du, das da
geht so? Wirklich? Was mache ich mit dem Token? Ist das schon Base64? Vielleicht, ja. Könnte
tatsächlich Base64 sein. Token will der nicht haben, so wie es aussieht. Token mag der nicht.
Okay. So, mal schauen, was jetzt passiert, wenn ich das so eingebe. Wahrscheinlich Fehler,
weil, geht nicht. Aha, aber das ist ein anderer Fehler, wie vorhin. Okay, wir kommen jetzt
schon mal bei einem der richtigen Server raus, würde ich sagen, aber wir dürfen nicht darauf
zugreifen. Ja, das ergibt ja durchaus Sinn. Wir müssen jetzt mal die Requests miteinander
vergleichen, die da gemacht werden. Wie kann ich denn hier die Requests mir anzeigen, oder
die Request-Url mir anzeigen lassen? Connect-Signed-Request-Url, hier. Die brauchen wir. Request-Url,
gib mal her. Und die vergleichen wir dann mal, hier, da, guck mal. Jaja, das ist viel zu
kurz. So, die müssen wir nämlich vergleichen, wir nehmen jetzt mit dem, was hier im Browser
drinne ist. Also, machen wir hier mal auf. Z-Wrap. Und jetzt haben wir das hier, guck
mal, das ist doch viel, das ist doch viel mehr. Request. Irgendjemand im Plan, wie ich den
Request kopieren kann? Raw-Request? Nee. Copy-Request? Copy as Curl, ja, meinetwegen. Jaja, perfekt,
so will ich das haben. 1KS. Alter, das ist broken. So, also Curl kann weg, das interessiert
mich schnell. Okay, also was ist denn jetzt hier der Unterschied? Oh, meine Augen, mann.
Sind dann die Keys? Okay, Asia, 3EBNY6. Okay, die Credentials, die Credentials. Das sieht
gut aus, sieht gut aus, prinzipiell. IOT-Gateway, IOT-Gateway, das schreibt ihr hier auch so
rein, guckt mal. IOT-Gateway, AWS-Request. Das sieht gut aus, guck mal, das sieht ein
bisschen, das sieht alles gut aus. Date sieht auch gut aus. Die Credentials, ja, das ist
wahrscheinlich temporär immer ein bisschen was anderes. Amazon-Date, Amazon-Date, also
bis hierhin ist auch Assigned-Header, ja, ja, ja. Signature. Signature. Algorithm ist da
auch drin. Das ist doch jetzt erfolgreich angemeldet. Das da unten ist erfolgreich angemeldet,
das da oben nicht. Das Security-Token fehlt, ja, tatsächlich. Also brauchen wir doch das
Security-Token. Wo kriegen wir das Security-Token her? Von hier. Security-Token. Aber dieses
Amazon-Zeug, das hat kein Security-Token. Guckt mal. AWS-Connection hat kein Token.
Dann fügen wir das doch einfach ein. String-Token. Was meinst du, Drachenflieger? War das kaputte
Autokorrektur oder ist das irgendein Wort, was da drin vorkommt? So, dann müssen wir
nämlich das noch hier übergeben an diese Compute-Signature. Das muss ja da noch rein.
Also, this-Token. Das gibt's natürlich schonet. Und hier brauchen wir dann noch Token. Ich
mach da mal ein Add davor. Alter, ist das lang. Ich trau' dem alles nicht, dass das
richtig ist, was hier drin steht. So, Token. Und jetzt braucht das hier noch als Parameter
das Token. Und jetzt müssen wir uns doch den Kram angucken. Jetzt müssen wir uns doch angucken,
was der hier drin macht. Weil einfach nur das Token als Parameter hinzufügen, wird
uns ja wahrscheinlich nichts bringen. MonkaW. Was passiert hier drin? Neues Date. Header-Contains-Host.
Okay, die fügen bei den Headern den Host ein. Wahrscheinlich, weil der mitgehashed werden
muss. Date-Stamp. Ich mein, das muss uns alles nicht interessieren. Das scheint ja zu funktionieren.
Was? Canonicalized? Progress-Englisch? Canonicalized? Wie spricht man das aus? Sekunde. Bisschen
Bildungs-FPS machen. Annunciation. Nicht mal Google will das aussprechen. Canonicalization.
Ernsthaft? Irgendein billiges Text-to-Speech zeigt man jetzt, wie man das ausspricht. Na
geil. Da hat die Welt drauf gewartet. Canonicalization. Canonicalization. Alles klar. Wieder was gelernt.
Also wie... Canonicalization das jetzt? Was soll das überhaupt bedeuten? Canonicalization?
Canonicalized? Boah. Wörter. Englische. Headers need to be expressed in the query. Reform
query parameters to require. What the fuck, Alter? Die splitten die query-Parameter am
und. Schiffskalz. Das klingt wirklich... Ich hab keine Ahnung, was Amazoner macht.
Die splitten die query-Parameter an einem und. Und dann an einem klein? Ah! Die machen
sich nen Dictionary aus. Key-Value. In dem Dictionary steht später drin. Query-Parameter-Name
und Query-Parameter-Value. Boah, das ist aber Sixhead-Time. So, und hier werden irgendwelche
Queries hinzugefügt. Leute, von der Theorie her, ja, sollte es nicht einfach reichen,
wenn ich sowas hier mache? Wie nennt sich das hierbei bei den X-Amazon-X-Amazon-Security-Talken?
Pass mal auf, wenn das alles ist, dann muss ich zocken. Reicht das jetzt? Probieren wir
mal aus, gucken, was passiert. Nope. Er hängt es nicht an. Das Talken hängt er nicht an.
Also da muss es schon mal nett hin. Muss das Talken überhaupt mitgehashed werden oder
nicht? Okay, machen wir das mal weg. Wahrscheinlich muss das Talken gar nicht mitgehashed werden.
Alter. Chat, Chat. Also entweder bin ich blöd oder ich hab echt mal ne Schwierigkeit,
was Amazon hier mir sagen möchte. Hier bauen sie nochmal irgendwelche Query-Parameter wieder
zusammen. Du hattest das Talken auch in Anführungszeichen drinne, wirklich? Ist doch richtig so. Und
das ist ja auch kein String. Canonical Request? Was zum... Was zum... Was machen die hier?
Oh, KS, Alter. Ey, ich hab keine Ahnung. Auth-Parameter. Auth-String. Okay, was gibt
der dann zurück? Auth-String, hier, das da. Das ist letztendlich... Okay, okay. Wisst
ihr, wir machen jetzt was ganz, ganz Simples. Signature. Wir hängen das einfach hier dran.
Wir hängen das einfach hier dran. Und gucken mal, was passiert. Ja. Ne. Das da. Wir hängen
das einfach hier dran. Talken. Und mal gucken, was passiert. Vielleicht musst du das Talken
Canonicalisieren. Ja, wahrscheinlich. Wahrscheinlich. Fuck. 4-0-3. Gut, wir wissen jetzt ja auch nicht,
woran meine Credentials noch gelten. Ich muss mir mal neue Credentials holen. Und zwar...
Warum hab ich eigentlich hier was offen, was ich gar nicht brauche? Hier muss ich neue
Credentials holen. Lass mal Daily Scrum machen, Chat. Auf geht's. Daily Scrum. Sonst wird
das nix hier. Ich seh's schon. Okay, noch einmal. Tauschen das mal aus. Ist natürlich doof,
dass ich das jetzt jedes Mal copy-pasten muss. Das wäre deutlich besser gewesen. Ich hätte
das in das andere eingebaut. So. Fuck. Server Return Status Code 4-0-3. Ja, woran könnte
das denn liegen? Also, das können wir schon mal zumachen. Lass mal die Requests vergleichen.
So. Das sieht doch jetzt eigentlich schon mal ganz gut aus. Signature. Das sieht doch jetzt
eigentlich schon mal gar nicht so verkehrt aus. Also, dieses ganze Zeug hier Websockets
und so, das brauchen wir alles nicht. Einmal weg. Dass es ungefähr hinkommt. So. Also,
das sieht von der Idee her noch schon mal gar nicht so verkehrt aus. Also, das ist was
geht. Das ist das, was der Browser macht. Und das ist das, was ich mache. Das im Browser
ist ein bisschen länger, so wie es aussieht. Aber das kann sein. Also, wenn das Base 4-16
encoded ist, kann die Länge immer ein bisschen variieren. Aber guck mal, das Token hier sieht
doch ganz anders aus. Ich muss das Token url-encoden, Leute. Das habe ich, glaube ich, noch gar
nicht gemacht. Habe ich das Token url-encoded? Nein. HTTP-Helper, hieß das dann, glaube
ich, um url-encoded. Okay. Alles klar. Url-encoded. Verbinden. Moment. Was? Das geht? Lol. Wie
jetzt? Also Leute, ich habe absolut nicht den plassesten Hauch eines Schimmers, was ich
eigentlich gerade gemacht habe. Ich habe irgendwas in dem Amazon Source Code copypastet. Ach du
Scheiße, man. Okay, Amazon Security Token muss man da hinten dranhängen. Alles klar.
Jetzt ist es nice. Kurze Zusammenfassung, was wir machen. Ja, sage ich dir. Also, guck mal.
Microsoft verwendet MQTT zum Austausch von Messages, also das Auto, das Auto schickt
über MQTT Messages, wie zum Beispiel Aufladen ist fertig oder das Auto ist in spezielle Regionen
gefahren, das Auto fährt über 100 Stundenkilometer und sowas. Also das Auto verschickt, also
da ist eine SIM-Karte drinne, das ist im Preis mit drinne, was man bei dem Preis auch wirklich
erwarten kann. Da ist eine SIM-Karte drinne und das Auto verschickt bei speziellen Events
über MQTT Messages an Fiat. Zum Glück ist es MQTT, weil deswegen können wir den Kram
abgreifen. Das heißt, Fiat selbst hat ja eine App und in der App bekommt man dann Notifications
angezeigt. Aber diese Notifications in der App interessieren mich nicht. Was mich interessiert
ist, dass ich das abgreifen kann. So, und die benutzen AWS. AWS, wie heißt das? MQTT
von AWS IoT Core, also sprich die IoT Geschichte von Amazon Cloud Service. Okay, Connection
hat funktioniert. Das war deutlich einfacher, als ich mir das vorgestellt habe. Ich meine,
ich würde gerne den Kram hier irgendwie vereinfachen und noch ein bisschen verschlanken. Alternativ
kann ich auch einfach sagen, ich gucke es mir einfach nie wieder an und es funktioniert
und steckt das in irgendeine Subklasse, drei Ordner tief rein, dass ich es mir nie wieder
angucken muss. Also, okay, das scheint ja mal zu funktionieren an der Stelle. Easy, easy.
Connection successful. Jetzt müssen wir noch gucken, ob wir da irgendwas subscriben können.
Wie subscribt man dann jetzt? Was subscriben die denn hier? Request, response, response,
channels, guck mal. Zu sowas kann man bestimmt subscriben. Was auch immer das davor für
ein komisches Binary Gedöns ist, aber. Sind das hier? Sind das Keep Alive Messages alle
fünf Minuten? Was meint ihr? Sind das Keep Alive Messages? Das sieht nach Keep Alive Messages
aus. Können wir den Kram irgendwie vielleicht mal in Bytes anzeigen anstatt in komischem
ASCII Kram? Raw Data. Wenn ich das so kopiere. Kann man oder in Hex, vielleicht in Hex kann
man das in Hex anzeigen lassen. Das im Browser irgendwie kann man. Nee, das geht so direkt
wahrscheinlich nicht. Ich meine, wir können Hex Dump. In der Hoffnung, man kann das Copy
machen. Also was haben wir? 9 0 C 3. Und das hier ist das New Line, das brauchen wir nicht.
Also das hier, das passt schon. Das sind zwei. Das sind zwei Bytes. C das. Okay, ist das
irgendein MQTT Standard? MQTT Keep Alive Messages oder sowas? MQTT Keep Alive Message. Okay,
ich weiß nicht, was das sein soll, was die sich hier schicken, aber okay. Irgendwelche
Bytes. Alles klar. Kriegen wir vielleicht unseren MQTT Client dazu überredet, dass
der ein bisschen mehr Debug Infos macht? Moin Niklas 09763. Wir versuchen mal zu Subscriben.
Nee, wir versuchen nicht zu Subscriben. Wir sagen einfach mal. Ja, wir warten einfach
mal. Task. Warum warten wir nicht ganz klassisch hier? Press key to exit. Console Read Line.
Und jetzt müssen wir mal gucken. Moin Le Fate IT Connection Successful. Jetzt müssen wir
mal gucken, ob wir diesem Ding irgendwie ein bisschen Logging entloggen können. Take Viagra
Die Hard Tank, 15 Monate Massive Subscription, diesem MQTT Client, ob wir dem irgendwie den
ein bisschen ein bisschen mehr loggen lassen können. Dass wir wissen, was passiert. Wenn
ich mich recht entsinne, kann man hier irgendwie Logger eintragen. Irgendwo hier. Hier. MQTT
Logger. Und wir müssen die Library noch upgraden, Klei. Dass es überhaupt lauffähig ist. Okay,
wir müssen hier den Logger reinpacken. IMQTT Netlogger. Oh meine Güte. MQTT Logger. So
vielleicht. Logger. Und dann so. Und dann kann man irgendwie sagen hier, wenn es eine
Blog Message Published. AX. Trace Message. Message. Ich hoffe, dass das bringt jetzt was. Ich
hoffe, das sagt mir jetzt, was er macht. Ey guck mal, mach doch. TX Connect, Username,
Password, Blah Blah Blah. Connect, Ak. Das sind Keepalive Messages. Ich bin tatsächlich
verbunden mit Amazon. Mit dem Amazon, mit dem Fiat Amazon MQTT Broker. Und das schickt
sich jetzt Keepalive Messages hin und her. Moin, mit welchem OS arbeitest du gerade?
Das hier ist Manjaro mit E3 WM. Man darf eigentlich nicht Archlinux sagen, weil die Archlinux-Fans
sagen selbstverständlich, Arch ist kein. Und mal gucken, ob wir da irgendwas drauf
Publischen können. Weiß nicht, ob die das mögen. Guck mal, was passiert. Was passiert,
eigentlich, wenn man versucht, was zu Publischen. Ich überleg gerade, ob wir das wie machen
wir das denn jetzt gescheiterweise. Na gut, wir können einfach so machen. Cloud Connector,
Publish, Message. Message, Keckl, Topic, Keckw. Oh ne, das geht nicht. Exception was thrown.
Wir dürfen nichts Publischen, Leute. Das ist schon verdächtig, funktioniert nicht. Okay,
dürfen wir was Subscriben? Subscribe to Topic, Topic Keckl. Wahrscheinlich auch nicht. Ne,
wir dürfen wahrscheinlich nur Subscriben zu irgendwas von diesem, irgendwas von diesem
Krempel hier. Channels, Updates oder so. Ah, vielleicht dürfen wir. Hast schon recht.
Stell dir mal vor, bei Amazon im Monitoring Team gucken die so irgendwie ihre Logs durch
und auf einmal steht Keckw drin oder sowas. Ich denk so hoch, wo kommt denn das her? Nicht
bei Amazon, bei Fiat, bei Fiat. Subscribe to Channel. Mal gucken, ob er jetzt immer
noch abkackt. Nein, er kackt nicht mehr ab. Das ist schon mal interessant. Er kackt nicht
mehr ab. Das heißt, man darf dahin tatsächlich Sachen, dahin Subscriben. Vielleicht darf
man dahin auch Sachen Publischen. Keckl. Dahin. Jawoll. War Topic. Ja, machen wir da mal
ein Bachjapel rein, dass man das irgendwie noch halbwegs lesen kann. Ne. Wir dürfen
nix. Wir dürfen nix Publischen. Das hat Amazon, nicht Amazon, das hat Fiat tatsächlich ganz
gut gemacht. Ok. Können wir uns, können wir uns nicht beim Bug Bounty Programm melden?
Also hier, das funktioniert. Ok, man kann das Subscriben. Das Boscox Bild als Base64
Code Publischen. Ne, ne. Ich will doch einfach nur von meinem Auto Sachen abfragen. Ok, nice.
Das funktioniert. Also ich kann es jetzt nicht wirklich ausprobieren, weil es wird ja hier
nix regelmäßig geschickt auf diesem Channel, außer Keep Alive Messages. Wobei doch. Ich
könnte meinen Browser refreshen. Vielleicht bringt das ja was. Vielleicht, vielleicht
Publisht der dann da was drauf. Hat er jetzt Publisht? Subscriben? Ne. Ne. Oh, die Katze
ist an der Tür. Sekunde, Leute. Der Chat, der, jetzt rennt sie weg. Soll ich sagen,
die, der Chat muss, musste ich jetzt mal brummen hören. Ne, auf dem Sofa geh ich jetzt nicht
mit dir hin. Guck mich nicht so an. Ja. Sitzt du auf dem Sofa. Die Katze ist an der Tür,
ja, da musst du hin. Kannst du nicht mal Raute Subscri... Ah ja, doch, können wir machen
und gucken, ob das funktioniert. Also wer das nicht kennt, hier erklär's mal kurz.
Bei MQTT gibt es so ein Wildcard Topic. Das ist diese Raute, das subscribt eigentlich
alles. Das geht nicht, das ist nicht erlaubt anscheinend. Chico will wieder raus. Ja Chico,
ja was denn jetzt? Rein oder raus? Was ist denn? Komm mal her. Komm mal her. Komm mal her.
Komm mal her. Chico. Chat, passt mal auf. Hört ihr was? Chico, Chico. Ne, mir hört
sie nicht brumm. Ok, Chico will wieder raus. So, jetzt ist sie wieder raus. Sie wollte eigentlich
sich nur mal angucken, was hier drin ist. So, abgeht. War anscheinend nicht spannend
genug, jetzt ist sie wieder weg. Gut, also, das funktioniert nicht, aber vielleicht haben
wir Glück, es funktioniert sowas hier in der Richtung eventuell. Ja, das funktioniert
tatsächlich. Chat, mir fällt gerade auf. Aber ne, hier spätestens im Debug müsste
ich eigentlich die Messages sehen. Was wird denn heute tolles gemacht? Also, ich hab hier
einen Fiat und mein Auto verschickt über MQTT, über einen AWS MQTT Broker Statusnachrichten
und die will ich abgreifen und dann bau ich das Ganze in meinen Home Assistant Addon ein,
dass das alle verwenden können. Da kann man sich dann zum Beispiel darüber informieren
lassen, wenn das Auto in spezielle Gebiete fährt. Das heißt, man könnte zum Beispiel
seinen Hauseingang als Gebiet definieren und wenn das Auto in dieses Gebiet fährt,
also zum Hauseingang hin, dann schickt der MQTT eine Message, die greife ich ab und daraufhin
könnte ich mit meiner Heimautomatisierung das Hoftor aufmachen, zum Beispiel. Das wäre
so ein Anwendungsszenario, wobei ich dafür, ehrlich gesagt, Knöpfe bevorzuge. Aber das
würde funktionieren, aber man kann damit alles Mögliche machen, mitbekommen, wann er
fertig geladen hat und solche Geschichten zum Beispiel. Easy, ja. Jetzt müsste ich ihn
irgendwie mal dazu überreden können, mal ein paar Messages zu machen. Kann man vielleicht
hier irgendwie rumklicken? Wie könnten wir hier MQTT Messages generieren? Sie haben keine
Fahrzeuge, ich weiß. Können wir hier irgendwie... Kann ich vielleicht hier Wildcard-mäßig
lauschen, ob da was kommt? Was macht einen Plus bei MQTT? Bedeutet das auch irgendwas?
Ist das irgendeine Wildcard? Ah, hier darf man auch subscriben. Man darf alles subscriben
unterhalb von seinem User-Account anscheinend. Anscheinend ist das meine User-ID. Und wie
solltest du bitte abgreifen können, ohne dass das eine Sicherheitslücke darstellt?
Das ist mein Account und ich muss mich einloggen mit Account Credentials. Aber darf man auch
deinen Channel subscriben? Nee. Da bin ich mir ziemlich sicher, das geht nicht. Man weiß
noch nicht mal die ID von jemand anderem. Wenn ich jetzt versuche hier drauf zu subscriben,
geht das nicht. Nee. Also wird wahrscheinlich erstens schwierig die ID von jemand anderem
zu erraten. Und ansonsten wirst du es wahrscheinlich auch nicht dürfen. Ach du meinst den Twitch-Channel?
Ja Primus dürfen selbstverständlich meinen Channel subscriben. Weil man ja mit einem
Prime-Sub den Streamer seiner Wahl einmal kostenlos im Monat unterstützen kann. Ansonsten
überweisst du es direkt an Bezos. Also dein Fiat-Account erstellt auch einen AWS-Account
im Hintergrund. Nee, das funktioniert anders. Ich erstelle mir also, soweit ich das verstanden
habe, ein bisschen undurchsichtig der Login-Prozess. Man erstellt sich einen Fiat-Account. So mit
diesem Fiat-Account loggt man sich dann bei Fiat ein. Dort kann man sich dann ein Authentifizierungstoken
ausstellen lassen für temporäre AWS-Credentials. Und mit diesen temporären Amazon-AWS-Credentials
kann man sich dann bei Fiat-Services, die Fiat bei AWS hostet, anmelden wie zum Beispiel
diesem MQTT-Broker. Also du musst dich zwangsläufig einmal einloggen mit deinem Fiat-Account vorher.
Und die Credentials gelten wahrscheinlich auch bloß für 1-2 Stunden hier. Das sind
alles temporäre Credentials, die an mein Account geknüpft sind. Also Fiat unterstützt
AWS, nein nein, Fiat hostet einige ihrer Services anscheinend auf AWS. Die unterstützen das
nicht, die benutzen das intern selbst für ihre App und für ihre Webseite bzw. das ist
unter der Haube ja die gleiche API. Es ist ziemlich blöd, dass ich keine Nachricht,
keine Messages generiert kriege, um zu überprüfen, ob der MQTT-Broker funktioniert. Und du kannst
offiziell so einen SSO-Talken beantragen. Ne, offiziell ist da nichts. Ich hab den Anmeldeprozess,
von denen ihre Webseite nachgebaut. Wenn du dir genau angucken willst, wie es funktioniert,
kannst du es hier anschauen. Das wird später nur für Fiat funktionieren. Tja. Ja und nein,
also mein Home Assistant-Addon unterstützt aktuell Fiat und Jeep. Das funktioniert,
die verwenden die gleichen AP-Keys und alles. RAM wird auch unterstützt, das ist hier so
ein Ami-Ding, RAM-Trucks. So ein Ami-Teil, so ein Teil, guck hier, da stehen sie drauf.
Freedom, Freedom Car. So, Dodge und Alfa Romeo müsste theoretisch auch funktionieren,
aber hab ich noch keinen gehabt, der das testet. Ja, bestimmt ein bisschen andere Credentials.
Purifier, Dankeschön. Gucken, vielleicht wird's ja noch mehr. Ja, also ich hab dir
ihre App-Anmeldung nachgebaut. Ich bekomme die gleichen Zugangsdaten, die auch die App bekommt.
So, also wenn du genau wissen willst, wie das funktioniert, kannst du dir das angucken,
hier auf GitHub. Da kannst du dir den Anmeldeprozess angucken, wie das funktioniert. Login. Was der
hier wie macht, das ist ziemlich durch die Brust ins Auge, damit das funktioniert. Also es ist,
glaube ich, der komplizierteste Anmeldeprozess, den ich jemals irgendwo gesehen habe, aber es
funktioniert. Und dann bekommt man von AWS Sachen halt nur über sein Auto. Ich kann ja nicht für
andere Autos was abfragen, dann würde ich mich gleich beim Amazon-Bug-Bounty-Programm melden
und sagen, guck mal, ich hab da was gefunden. Nee, nur für mein Auto, das ist eigentlich alles in
Ordnung soweit. Es ist doof, dass ich nicht subscriben kann, weil... Also doch,
subscriben kann ich, aber es ist doof, dass ich nichts... Keine Messages, keine Messages.
Hatte er eben was hier gemacht, als ich mich connected hab?
Was, wenn ich mich connecte? Nee, das war zufälligerweise Keep Alive. Ich glaube...
Ah, nee. War jetzt einfach soweit. Tja, Leute, ich kann es jetzt abschließend gar nicht testen,
weil ich sehe halt nur, dass ich Keep Alive Sachen habe. Ja, Keep Alive. Aber ich kann halt keine
MQTT-Messages generieren und ich kann jetzt auch nicht das Auto irgendwie an- oder ausschalten,
wo das MQTT-Messages vielleicht wacht, weil das ist in Failgecount und der hat natürlich kein Auto.
Nee, alle fünf Minuten ist Keep Alive. Bei mir ist alle 15 Sekunden, das ist wahrscheinlich,
was man mitgibt. Tja, was, was könnte eine MQTT-Message generieren? Irgendwelche...
Ah nee, bin ich ja schon. APK weiter Reverse-Enginieren. Das APK haben wir letztens auch
schon untersucht mit einem Man-in-the-Middle-Proxy und haben ein paar Sachen rausgekriegt. Das baue
ich auch noch in das Plugin ein. Tja, Leute, ich habe keine Ahnung, wie man denen da jetzt
vielleicht ein paar Messages generieren lassen könnte. Nachdem ich keine Autos habe, können
meine Autos auch keine MQTT-Messages generieren? Update Timestamp. Vielleicht kann ich ihn,
wenn ich irgendwelche PIN, wenn ich die PIN ändere vielleicht. Aktuelles Passwort, okay.
Ein extra, ein extra Auto für den Stream kaufen. Exzellente Idee, Chet. Moment, ich will das
Passwort doch gar nicht ändern. Ich will die Sicherheits-PIN anlegen, okay. PIN erstellen.
Mal gucken, ob da jetzt erste Frage, erste Antwort, erste Frage, zweite Antwort.
Vielleicht macht er da eine MQTT-Message jetzt. No. Nee. Tja, das kann ich jetzt nur mit dem
Auto ausprobieren. Ich fürchte, da sind wir auch an der Grenze jetzt angekommen, was wir
hier ausprobieren können. Den Rest muss ich mit meinem Account ausprobieren. Und mein
Account, der hat ein Auto drauf, aber damit melde ich mich hier im Stream nicht an. Kann
das sein, dass das hier schlicht und ergreifend Subscribes sind? Das ist keine Message, sondern
einfach ein Bitte-subscribe-mich zu diesem Channel? Wahrscheinlich. Antworten bekommen
wir nämlich gar nicht. Wir bekommen bloß Keep Alive. Okay, wir gucken nochmal, was
das hier in Hex ist. Alles klar, Hexdump. Excellent, alles klar, jetzt weiß ich Bescheid. Was ist
Minus C für ASCII? Okay, vergess es. Alles klar, ich hab keine Ahnung. Das sind irgendwelche
Dings. Ja, können wir jetzt nur raten. Ja, Chat, mehr kann ich jetzt wahrscheinlich gar
nicht machen. Ich muss sagen, ich hätte nicht gedacht, wirklich niemals, dass wir einfach
ein bisschen Amazon Zeug copypasten können von GitHub und anpassen, ohne halbwegs zu verstehen,
was wir machen und dann geht's. Bau doch noch eine Aufzeichnung der Messages für die Auswertung.
Es gibt keine Messages, ich bekomme ja nur Ping, ich bekomme nur Keep Alive, Keep Alive
Dinger, da gibt's ja nichts zu. Oder meinst du in dem Addon dann irgendeine History? Ja,
ja, das kann ich machen, das ist relativ einfach. Mach ich einen Sensor, die letzten zehn Messages
oder so. Das kann ich machen. Letzten zehn Messages werden dann exportiert. Aber es
funktioniert. Leute, ich hab bis vorhin keine Ahnung gehabt, wie man Amazon IoT, nein MQTT-AWS-IoT-Core
verwendet und ich habe eigentlich ehrlich gesagt immer noch nicht mehr Ahnung, aber es funktioniert.
Das ist schon mal gut. Schon mal nice. Wir können uns noch ein paar Videos angucken,
bevor ich penne gehe. Ich lösche erstmal meinen Account wieder. Das ist schon ganz schön versteckt
hier unten oder? Konto deaktivieren, Konto deaktivieren. Verstetigen. Und ja, deaktiviert.
Was passiert denn? Kann ich mich noch verbinden? Okay, ich kann mich noch verbinden, obwohl der
Account weg ist. Nice. Mal nachher ausprobieren. Wahrscheinlich warten wir jetzt bis die
Incredentials expiren. Könntest du erklären, wie deine App mit Home Assistant kommunizieren wird?
Die könnte nicht schon, die kommuniziert schon. Ja. Auch über MQTT. Du kannst das ausprobieren,
wenn du es ausprobieren willst. Wenn du ein Fiat mit Uconnect hast, kannst du es ausprobieren.
Gibt es schon seit 2-3 Monaten sogar. Hat zwar noch nicht alles, was ich einbauen will,
aber grundsätzlich funktioniert alles wunderbar. Du kannst Sachen auslesen von deinem Auto,
inklusive Reifendruck. Du kannst Licht an und aus machen, Batterienladung, Standort. Kannst
du alles abfragen schon. Der Fiat-Champ, ja. Das kommuniziert per MQTT mit Home Assistant.
Du brauchst einen eingerichteten Broker. Entweder das offizielle MQTT Addon oder einen
externen MQTT Broker. Das Einzige, was du im Vorfeld gemacht haben musst, ist die MQTT
Integration in Home Assistant einrichten, sonst funktioniert es nicht. Das Einzige,
was du zu Fiat MQTT finden konntest... Das ist... Ups. Wollte ich jetzt aber einstellen.
Ich wollte dein Zeug kopieren. Copy Address. Nee, das ist vom IO Broker Adapter der MQTT.
Das ist was anderes. Das ist die Kommunikation vom IO Broker irgendwie. Das hat nichts mit
dem Fiat MQTT über AWS zu tun. Ja, so kommuniziert das mit Home Assistant. Das exportiert alle
Werte nach Home Assistant. Du brauchst einen Home Assistant mit eingerichteten MQTT Broker,
das 99% der Leute haben, die Home Assistant verwenden. Und dann musst du gucken, dass
dein Auto neu genug ist. Also sprich, wenn dein Auto mit einem dieser Seiten funktioniert,
dann stehen deine Chancen ganz gut. Also Fiat funktioniert und Jeep funktioniert auch.
RAM müsste mittlerweile auch funktionieren. Da habe ich extra AP Keys rausgefunden für
RAM Trucks. Guckt hier. RAM Trucks. Ah ne, das habe ich hier noch gar nicht drin. Ich
sollte mal einen Pull machen. Wir haben hier schon ein bisschen ältere Versionen. Guck
für RAM Trucks. Gibt es hier extra ULs und extra AP Keys, damit es funktioniert? Weiß
ich nicht, ob es RAM oder RAM Trucks heißt. Ist irgend so ein Ami Ding, was da total beliebt
ist? Was genau ist Home Assistant? Eine Smart Home Zentrale. Github. 56.000 Sterne auf Github.
Was war? Läuft Home Assistant bei dir als Docker? Ne, in AVM. Und wie machst du das
mit den Backups, damit du nicht alles verlierst? Ich mache das ganz einfach. Ich habe eine
externe Festplatte dran und darauf kopiere ich ab und zu mal Zeug. Fertig. Nicht nur
Home Assistant, alles Mögliche. Könntest du mal schauen, ob jemand schon mal was für
Tesla gemacht hat? Ja, gibt es. Gibt es. Tesla Mate. Gibt es schon. Das ist deutlich
advanceder als das, was ich für Fiat gebaut habe. Das liegt aber auch daran, dass Tesla
das Abgreifen viel einfacher macht. Für Tesla gibt es schon was. Was ist der Standard
unter Linux, um Volumes zu mounten? FS-Tab? FS-Tab? Ja, das da. ETC FS-Tab. Ist so der
Standardweg Sachen zu mounten. Trigg das da ein und beim Booten wird es gemountet. Du
kannst da noch einstellen, ob er Filers zum Check machen soll, ob er Booten anhalten soll,
wenn die Platte Probleme hat. Ne, ich meine das Directory MNT. Also ich benutze MNT immer,
wenn ich mal schnell was mounten muss. Ansonsten ist ja nicht die Frage, wo du mountest, sondern
also was du mountest, wo es hin soll. Also wenn du beispielsweise eine zweite SSD hast
für User, dann machst du halt Slash Home. Kannst du Slash Home auch auf einer anderen
SSD oder auf einer anderen Partition mounten oder sowas. Ist übrigens gar nicht so blöd.
Wir haben auf der Arbeit eine VM für alle Admins und dort haben wir Slash Home auch
auf einer eigenen SSD gemountet, dass wir Backups machen können und dass wenn man das
Ding mal neu erzeugt, dass dann die Home-Verzeichnisse noch da sind. Oh, jetzt wird es aber hier
richtig high IQ. Was ist das? Temporary Mounted File. Ja, genau dafür nehme ich es auch.
Aber man muss sich da nicht so genau dran halten. Mounte dahin, wo es dir irgendwie als sinnvoll
erscheint. Du kannst ja in deinem Heimatverzeichnis einen Mount-Ordner machen. Du kannst allerdings
standardmäßig nur als Root-User mounten und unmounten. Es gibt ein paar Ausnahmen,
aber in der Regel ist es so. Es gibt ein neues JavaScript-Framework, habe ich gelernt, bei
YouTube. Sehr überraschend, oder? Hätte ich mir gar nicht denken können, dass es ein
neues JavaScript-Framework gibt. Gibt es so selten. Ich verstehe zwar überhaupt nichts,
aber ich wollte mich bedanken. Ich habe damals natürlich immer deine Videos geschaut und
hat mir sehr geholfen beim Einschlafen. Ich weiß, ich weiß, schreiben viele. Ich gucke
auch gerne YouTube-Videos zum Einschlafen. Aber schön, dass du deinen Weg her gefunden
hast. Ich weiß, ich guckst du denn heute immer noch ab und zu mal? Ich mache ja ab und zu
immer noch Videos. Heute erst wieder. Das ist übrigens auch eines der Gründe, warum
ich auf Twitch anders heiße als auf YouTube. Weil der Content auf YouTube und hier kann
es ja nicht wirklich vergleichen. Hier machen wir irgendwelchen High IQ Broggers-Shit und
auf YouTube halt was anderes. Deswegen ist der Chat auch so massive, 500 EQ. Nur die
Leute, die es geschafft haben zu checken, dass ich das hier bin von YouTube oder nur
über Twitch gekommen sind, blicken da noch durch. Ja, das war nice. YouTube-Normies-Cringe,
genau. Wollen wir uns doch irgendwas angucken? Was haben wir denn hier noch zu bieten? Ach,
wir wollten doch das kurz gesagt Video gucken, genau. Fünf Gründe, warum es die Sharp Moogs
ist, hätten wir auch noch. Dann könnten wir auch noch in Software- und Spieleentwicklung
bleiben in der Kategorie. Wir lassen uns jetzt erstmal von Fireship erklären, was es wieder
für tolle JavaScript-Frameworks gibt. Solid. Solid.js. Alles klar. Ich stelle mal wieder
auf Just Chatting um. Wir sind ja mit Programmierzeug fertig. Ich hätte gerne noch probiert, ob
das Subscriben funktioniert. Leider können wir sie ausprobieren, weil ich keine Messages
erzeugen kann. Just Chatting. Ok. Es ist kaputt. Mein Kategorieumstellen klappt nicht. Kurz
den Chat reloaden, vielleicht funktioniert es dann. Dankeschön für den Sub. Grizzly89.
Just Chatting. Nö. Ich glaube Twitch hat gerade Probleme. Ah, hier. Just Chatting.
Jetzt geht's. Ok. Nice. Ok, lassen wir uns mal von... Lassen wir uns mal von Fireship
erklären, was abgeht. Zveldkit hat Zveldkit. Was ist das? Ist das Quick? Leute, ist das
Quick? Warte, warte, warte, was? Quick. Start. Ok. Seriously, der Name ist kacke. Versuch
mal nach Start zu googeln. Solche Namen sind immer richtig doof. Go hat auch das Problem
am Anfang gehabt. Was meint ihr, warum jeder zu Go Go Lang sagt und nicht Go? Weil niemand
Go googeln konnte. Also Google hat eine nicht googelbare Sprache erschaffen. Also Start
ist ein ziemlich blöder Name. Was hat er denn jetzt versperrt?
Haben die das jetzt nicht extra letztens erst geändert in React? Hatte React das? Nee,
nicht React. Next? Nuxt? Nest? Wie heißt dieses React-Ding? Next, oder? Next. Next
ist React. Hatte das? Haben die das nicht als letztens in React geändert, dass die jetzt
auch so eine andere Fallstruktur haben? So wie Zveldkit? Oder war das so Zveldkit?
Ja, genau, sag ich doch, die haben das doch in letztens erst geändert. Ok, das ist doof
zu durchsuchen, das stimmt.
Warum braucht man jetzt genau nochmal das neue Framework? Also wann sollte ich das jetzt
verwenden, wenn ich Solid.js verwende? Und wann verwende ich Solid.js? Was sind die
krassen tollen Sachen von Solid.js? Solid.js, was kann das tolles? Reactive Javascript Library,
ja ja, schon klar. Zveld ist smaller, but Solid is much more sophisticated. Aha, Example.
Ach, die haben sogar FireShip verlinkt, das ist natürlich sehr... I, es ist JSX. Ok,
dann habe ich schon wieder keinen Bock drauf. Ich mag JSX nicht.
Oh ja, da schreit schon JSX hier unten, diese komischen...
Wir machen HTML in Javascript gedünst. Ich meine, man muss sagen, dass das unter der
Haube Vue.js und Zveld natürlich auch machen, so mit HTML in Javascript und sowas, aber
da muss ich mich selbst nicht damit rumschlagen.
Ok Leute, ich bin schon ausgestiegen, was zum... was, hä?
Wie, die Animation von der Katze funktioniert überhaupt nicht, was ist das für ein Problem?
Warum funktioniert die Katze-Animation nicht? Mein Dashboard ist nicht blazingly fast, das
ist broken. Ok, ich lösche das wieder.
Ich brauche die, ich brauche das Emote hier, kurz, das da, das da.
So, so komme ich mir gerade vor.
Es könnte auch sein, dass einfach zu spät ist, aber ich höre die Worte, aber ich kann sie
nicht aufnehmen gerade.
Ist das denn in Rust programmiert, dass es wenigstens blazingly fast ist?
Vor ein paar Jahren haben sie die ganzen Shadowdom-Geschichten angepriesen, weil das ja viel
geiler ist, als direkt HTML zu manipulieren und das dann erst zu diffen und heute ist
das wieder ganz, ganz out.
Ok, ich habe keinen Plan, ob ich jemals Solid, nein, Start verwenden werde, wahrscheinlich
nicht.
Dice refuse to accept defeat. Ob die das refusing oder nicht ist vollkommen egal, sie haben reingeschossen.
Es ist auch egal, ob sie sagen, ja, wir haben reingeschossen oder nicht, es ist offensichtlich,
dass sie reingeschossen haben.
Du hältst nichts von Server-Site-Rendering. Warum? Ganz viel im Internet ist Server-Site-Rendert
oder teilweise sogar statisch. Ist statischer Content eigentlich streng genommen Server-Site
gerendert? Eigentlich nicht, weil das gibt ja nichts zu rendern, oder?
Die Technologie hinter Mario Kart.
Dieses Video wurde gesponsort von...
Wow, wow, wow. Den gucke ich immer gerne. Und ich habe ihn noch nicht gesehen. Ok, lasst
mal uns erklären, was Nintendo bei Mario Kart gemacht hat.
Man kann es sich heute sehr schwer vorstellen, aber Super Mario Kart hat damals die Köpfe
der Spieler verdreht.
Das stimmt.
Klar, gab es vorher bereits Spiele, die irgendwie...
Ich kann mich noch dran erinnern, als das erste Mario Kart rausgekommen ist. Ich habe
erst mal gar nicht gewusst, wie man das gescheit steuern sollte. So als quasi Side-Scroller
oder Top-Down. Das war das einzige, was ich gekannt habe, war Side-Scroller oder Top-Down.
Also quasi entweder Super Mario World oder A Link to the Past. Also entweder von oben
oder von der Seite. Aber Mario Kart hat mich damals wirklich... Das stimmt schon. Da wusste
ich erst mal nicht...
Da wusste ich erst mal nicht, was abgeht, ja.
Und dann stellt sich doch die Frage, wie genau hat das Team von Nintendo das damals geschafft?
Genau darum geht es heute. Werden wir technisch.
Weißt du, was ich gut finde? Entweder Captured er in irgendeiner Art und Weise von einem
CRT, beziehungsweise nicht von einem CRT, kann es ja nicht Captured. Wobei, ihr könnt
es theoretisch schon abfilmen, aber das ist nicht abgefilmt. Er Captured aber auf jeden
Fall über einen alten... irgendwas Altes, weil das sieht so CRT... CRT-mäßig aus hier
alles.
Wir fangen direkt mit dem wichtigsten...
Also, Röhrenbildschirm.
Interessant ist ein Thema an. Es kann sein, dass dieses Segment anfangs etwas trocken
wirkt, aber glaub mir, es lohnt sich.
Scanlines, genau.
Denn Modeserven wird ständig missverstanden, aber es kommt daher, weil viele Limitationen
des Super Nintendo...
Also das Einzige, was ich weiß, so ungefähr grob, was Modeserven ist, ich weiß, dass der
Super Nintendo... oder generell... ja, der Super Nintendo, weiß nicht, wie es beim NES
war, wahrscheinlich ähnlich. Du konntest das Ding umschalten in verschiedene Modes und
die haben dann irgendwie unterschiedliche Auflösungen und unterschiedliche Farbpaletten
oder sowas oder unterschiedliche Farbtiefen oder irgendwie so in der Richtung. Und es
gab auch irgendwie Unterschiede, in welchem Mode du wie scrollen kannst und sowas. Also
du konntest dann quasi irgendwie... eine Worldmap hast du dann in einem anderen Mode gemacht
wie beispielsweise irgendwie das Sidescroller-Level oder sowas. Aber sonst bin ich jetzt
nicht so sonderlich... hab ich nicht sonderlich viel Ahnung, wie das Super Nintendo funktioniert
hat.
...unbekannt sind und vor allem heutzutage komplett verrückt wirken. Halt sowas wie,
dass das Rotieren von Sprites komplett unmöglich ist. Grundsätzlich empfehle ich diesbezüglich
das Technikvideo zu Yoshi's Island, da dieses Video hier...
Na gut, Yoshi's Island zählt ja nicht so wirklich. Ich geh mal davon aus, dass sagt er auch gleich.
Yoshi's Island zählt ja nicht so wirklich, weil Yoshi's Island so ein Minimal-3D-Chip
mit auf der Cartridge drauf hatte. Das war ja eines der wenigen Spiele, die diesen Super
FX-Chip drauf hatten. Ich glaub, Starfox hatte das noch? Starfox, Yoshi's Island. Ich weiß
nicht, was es sonst noch hatte.
...nicht so viele, hä? Ja. Ja. Dinger, von denen ich noch nie was gehört hab? Doom?
Fucking Doom. Super Mario World, also Yoshi's Island, Wintergold und Starfox. Also es hielt
sich wirklich sehr in Grenzen, wie viele Games das hatten.
...größtenteils darauf aufgebaut. Dennoch eine kurze Zusammenfassung, was Mode 7 überhaupt
ist. Der Super Nintendo kann bis zu vier verschiedene Hintergrundlayer nutzen, je nachdem welcher
Grafikmodus genutzt wird. Jeder der acht Grafikmodi hat eigene Vor- und Nachteile. Mode 0 kann
zum Beispiel alle vier Layer nutzen, aber nur wenige Farben darstellen. Mode 2 kann
Teillinien des Hintergrundes horizontal und vertikal verschieben, dafür aber nur zwei
Hintergründe nutzen, da am Speicher der anderen zwei Hintergründe hinterlegt wird, wie die
Linien vertikal und horizontal verschoben werden. Es gibt also viele Basisfeatures,
die je nach Modus an- und ausgeschaltet werden und ein paar spezielle Pro-Modus, die etwas
besonderer sind. Mode 7 ist also einer dieser Modi und hat wohl die meisten Limitationen.
Das Teil-Set ist nicht so groß und es gibt nur ein einziges Hintergrundlayer.
Wisst ihr was ich immer wieder cool finde? Dass erstens so vieles unmöglich war auf diesen
alten Plattformen und sie trotzdem irgendwas hingetrickst haben, dass es funktioniert hat.
Aber was ich viel beeindruckender finde ist, dass sie es oftmals genutzt haben um was Gutes
draus zu machen. Also die hatten irgendwelche Dinge die nicht gingen und sie haben ihr Game
so aufgebaut, dass es so wirkt, als wäre das Absicht, obwohl es eigentlich keine Absicht
war oder was heißt Absicht? Es war dann schon Absicht, aber man hat es eigentlich nur so
gemacht, weil es die Hardware nicht konnte und niemand hat sich Gedanken dabei gemacht,
so nach dem Motto, wie? Das ist so, weil es die Hardware nicht konnte. Die mussten wirklich
die Limits sinnvoll in die Spiele integrieren und heute kann ja quasi jedes Handy, was?
Handy? Handy ist viel zu viel. Handy ist ja schon um was weiß ich 500 Mal leistungsfähiger
als ein Super Nintendo. Heute kann irgendwie jeder Toaster oder jeder Alarmwecker in der
Küche theoretisch mehr. Ja, was den Modus größtenteils für die meisten Sachen überflüssig
macht. Dafür gibt es aber einen wichtigen Vorteil. Diese eine Layer kann frei bewegt,
rotiert und verzerrt werden, also zumindest seitlich, so wie z.B. in Photoshop. Jede Strecke
in Mario Kart ist also eigentlich ein ganz normales Level von oben betrachtet. Jeder,
der mit Photoshop rumgespielt hat, würde jetzt vielleicht denken, oh, ist das 3D einfach
nur die Eckpunkte verzerren und boom, hätte man einen 3D Effekt. Aber nein, wie gesagt,
man kann das Ganze nur seitlich verzerren und selbst wenn es möglich wäre, könnte
man dadurch schwer Tiefe... Es sieht aber jetzt, ohne Scheiß, wenn man
das so skaliert, dann sieht das tatsächlich schon ein bisschen aus wie eine Mario Kart
Strecke....erzeugen, bzw. sich in die Tiefe rein
bewegen, weil wie soll das gehen? Wir brauchen also einen anderen Weg und dieser ist verrückt.
Also wirklich, die Kreativität, um Probleme zu umgehen, die die Teams von Nintendo damals
bewiesen haben, ist einfach genial. Um also gefakte Tiefe zu ermöglichen, brauchen wir
einen weiteren Trick und zwar HDMI. Wieder als Auffrischung, ein Fernseher erzeugt ein
Bild, in dem es pro vertikaler Linie die Bildpunkte von links nach rechts durchgeht. Dank HDMI
weiß das Nintendo, auf welcher Bildlinie gerade gerendert wird und kann so speziellen
Programmcode ausführen, wenn eine bestimmte Bildlinie erreicht wurde. Bedeutet, man kann
zum Beispiel den Hintergrund verschieben, wenn man an einer bestimmten Bildlinie angekommen
ist. Ich habe mal einen kleinen HDMI Simulator programmiert, um das zu verdeutlichen. Die
schwarze Linie zeigt an, welche Bildlinie gerade gerendert wird. Wenn man jetzt zum
Beispiel den Hintergrundlayer leicht verschiebt, entsteht so ein typischer Vabereffekt, den
man aus vielen Super Nintendo Spielen kennt. Laden wir jetzt mal eine Mario Kart Strecke
in den Hintergrundlayer und nutzen alle Mode 7 Features. So können wir ihn bewegen und
rotieren, wodurch diverse Effekte entstehen. Alter, Hyper Six Head. Es ist ein wenig trippy,
aber das ist nicht das, was wir wollen. Massive Fire IQ. Holen wir also das letzte Feature
von Mode 7 mal aus und ja, skalieren wir den Layer, während ein Bild Linie für Linie
gezeichnet wird, sieht es genauso aus wie Super Mario Kart. Also, also, okay, okay, okay.
Die skalieren, also die, die schalten, die gehen auf Mode 7, skalieren und, und dingsen
da den Hintergrund, aber zusätzlich gucken sie, an welcher, auf welcher Linie der Fernseher
gerade das Bild zeichnet und dann verschieben sie den, verschieben sie den Hintergrund,
sodass es quasi aussieht, als würde man da reinfahren in die Strecke, so, so. Und das
haben die programmiert in Assembler oder was damals noch, wobei ich glaube, vieles war
schon in C auf dem Super Nintendo. Alter, WTF. Der Fake 3D Effekt ist also nicht Mode 7 allein,
sondern die Kombination aus Mode 7 und HDMA. Beide Techniken sind wichtig, um diesen Effekt
darstellen zu können, aber ich glaube, Mode 7 hat einfach einen besseren Klang und ist
grundsätzlich einfacher zu erklären, deswegen wird HDMA immer ausgelassen, um sich also
in 3D rumbesiegen zu können. Klingt simpel, ja, super, ob, obvius simpel. Machen wir im
nächsten Stream, Leute, easy. Der, der Super Nintendo hat einen C-Compiler, aber war viel
mehr ASM. Was war denn das für ein C-Standard? Bestimmt C65 oder so. Nee, das war noch gar
kein Standard, oder? C89 war wahrscheinlich gerade der Shit da. Pre-Standard C. Muss man
dann nur noch den Layer verschieben und rotieren, wodurch dann ein recht guter 3D-Effekt rüberkommt.
Das ist wirklich richtig sick, das ist wirklich, das ist wirklich richtig clever. Guckt euch
das mal an hier. Big Brain Nintendo Programmierer. Wie so viel, wie so ein Effekt kosten würde,
wenn man echte Polygonen darstellt. Aber ja, jedes Spiel, das diese Art von 3D-Effekt auf
den Super Nintendo nutzt, hat es genau so gelöst und ist damit wieder eine weitere Sache, die
ohne HDMA einfach nicht möglich gewesen wäre. Würde behaupten, dass HDMA so ziemlich das
wichtigste grafische Feature von Super Nintendo ist und ich bin deswegen irritiert, warum
kaum jemand mal darüber spricht. Asasha Next Level High IQ Nintendo Gramm. Mode 7 ist also
ein besonderer Modus mit gewissen Limitationen, die wir uns kurz nochmal anschauen müssen.
So sind in dem Modus nur zwei Layer verfügbar. Ein Hintergrund-Layer, den man frei bewegen,
rotieren und skalieren kann und der Sprite-Layer. Hintergrund-Layer sind statisch und können
nur pro Teil verändert werden. Ich muss ja sagen, A Link to the Past ist bis heute immer
noch eines meiner Lieblingsspiele. Nicht, dass ich das jetzt jeden Monat mal spielen muss
oder jedes Jahr, aber ich mag das. Link wahrscheinlich daran, weil es mein erstes Zelda-Game war.
Aber es ist im Prinzip immer noch mein Lieblings Zelda-Game. Schlossene Tür, eine offene Tür
werden soll, dann wird die ganze Kachel ausgetauscht. Es ist nicht möglich, einzelne Kacheln zu
bewegen, nur den kompletten Layer. Sprite-Layer hingegen sind dynamische einzelne Objekte,
die über den Bildschirm flüssig bewegt werden können. Sie bestehen aus kleinen Tiles, die
zu einem Objekt zusammengesteckt werden. Der Super Nintendo kann 128 dieser Sprite-Tiles
gleichzeitig... Wenn man Sprites nicht rotieren kann, dann muss es quasi für jede Sache,
wie man hier sieht, ein extra Sprite geben, oder? Also, die können dann nicht irgendwie
Toad einfach ein bisschen nach rechts kippen oder so, wenn er in die Kurve geht. Das muss
dann ein eigener Sprite für Toad ist in der Kurve sein, oder wie? Das ist aber ganz schön
viel. Denk logisch.
Ach so! Und ich habe mich schon immer gefragt,
warum ist der Hintergrund schwarz an der Stelle? Aber klar, das ist das, was ich am Anfang
gesagt habe. Guck mal, die haben die Limitierung so gut in die Games integriert, dass du dir
denkst, das muss so sein. Also, das ist Absicht. Aber die haben einfach festgestellt, fuck,
wir können da nichts anderes anzeigen. Aber die haben es so gebaut, dass es so gut passt,
dass du denkst, es ist Absicht. Ja, ich dachte auch, es sollte dunkel sein. Aber ich hab mich
immer gefragt, warum wechselt der Hintergrund da nicht? Was weiß ich, in welcher Phase
man ist, zum Beispiel. Wie gesagt, ich dachte auch, es soll so sein. Aber es soll ja auch
so sein, weil es ging nicht anders. Und sie haben es dann halt so gebaut. Und hell und
dunkel, hell und dunkel kann es werden, weil das sind nur Farben. Und wenn du Farben skalierst,
also wenn du die Pixel skalierst mit Farben, macht es keinen Unterschied. Also es ist egal,
ob ich einen blauen Pixel, ob ich, ob ich groß skaliere, den blauen Pixel oder kleine
blaue Pixel oder was auch immer. Das ist halt einfach ein blauer Hintergrund. Den kannst
du skalieren. Ah, ok, das ist ja richtig clever. Das ist mir nie aufgefallen, dass es eine
andere Farbe hat. Ah.
Obviously. Also Cringe, wer das nicht weiß.
So viele Sprites, dass keine mehr für die Spieler, Items, Hindernisse etc. übrig
wären. Wie wurde das also gelöst? Natürlich mit dem wohl wichtigsten Trick der Konsole,
HDMI. Dank HDMI kann der Superintendent den Hintergrundlayer-Modus switchen, sobald
eine bestimmte Bildzeile gerendert wird. Das Interface und der Streckenhintergrund werden
in einem Modus gerendert, der mehrere Hintergründe unterstützt. Und sobald die Ansicht der Strecke
gemalt wird, wird auf Mode 7 geswitcht. Und kommen wir noch mal ganz kurz.
Moment. Das heißt, das hier oben ist nicht Teil der Strecke. Das hier oben ist quasi
ein Hintergrund, der gemalt wird, der eigentlich gar nichts mit der Strecke zu tun hat. Also
sprich die malen hier oben den Hintergrund auf den Bildschirm. Inklusive, äh, ja halt
ihrem, ihrem GUI. Und hier fängt die Strecke erst an und ab hier ist es dann Mode 7. Und
das da, das hier, das Overlay ist wahrscheinlich, ja. Das ist aber schon sehr high IQ. Unmöglich,
dass das alles ohne Agile Cloud-Native-Devops-Methoden geht. Keine Daily-Scrubs gehabt. Wobei, das
ist, das war eine andere Zeit. Gibt ja genug Talks, damals von id Software, wo die Doom
entwickelt haben und Quake, die haben mir erzählt, die hatten sogar eine eigene Vorrichtung
auf dem Klo, damit sie weiter programmieren konnten. Die waren agil, ohne agil zu sein.
Die haben agil geschissen und programmiert. Aber mussten fertig werden. Und es gab keine
umgebung
nicht unmöglich da
selben layer wie morten werden da müssen sich ja mit bewegen und rotieren wenn sich das ist das ist das ist äußerst äußerst clever
ja aber das ist eben der trick die balken sind einfach sprites und da kaum andere sprites gerettet werden müssen in den kampf kommt das
über nintendo
mqtt war schon ja wir sind fertig funktioniert limit und letzter fun fact roy nutzt den selben boss kampf wie morten nur können sich die wende
bewegen hier hat das team limitation kreativ genutzt um den boss kampf interessanter zu machen denn logisch die wende sind jetzt ja
auch sprites dass sie sich im mod 7 bereich befinden und
aber das witzige ist flüssig über den bildschirm bewegen dass das lustig ist
umfallen könnte die wand also nicht du kannst die sprite also wenn das sprites du kannst den bewegen
du kannst den aber nicht rotieren also umfallen wäre nicht möglich bei der wand
also dass die quasi so macht so irgendwie das geht nicht aber links und rechts verschieben das geht
als hintergrund layer die man nur komplett bewegen kann oder halt die einzelnen teils austauschen muss und genau deswegen können sich diese wende
aufeinander zu bewegen und das flüssig es ist ein gutes beispiel wie
limitationen kreativ machen
dass das was ich am anfang gesagt habe das siehst du mal wie
wie die das dafür benutzt haben dass es sich am ende so anfühlt als gehört es genauso wenn man sein spiel für eine spezielle hardware
optimiert und genau deswegen rede ich so gerne über alte spiele weil sie häufig das unmögliche auf einer hardware doch möglich gemacht haben
ok der super nintendo umgeht also echtes 3d mit cleveren tricks löst ebenfalls das sprite limit mit cleveren tricks und dennoch ist es
ernüchternd zu wissen dass der super nintendo allein das ganze einfach nicht hinbekommen könnte
um das zu verstehen schauen wir uns kurz an was im hintergrund noch gemacht werden muss die umgebung wird also gelöst
in dem der mode 7 layer rotiert bewegt und dann skaliert wird damit tiefe entsteht
während die eigene figure also einfach am bildschirm klebt müssen die anderen fahrer wir sehr sehr viel
mathematik ihre aktuelle position auf dem bildschirm. ich meine der super nintendo hat eine richtig schrotz cpu aus heutigen maßstäben ja
ja es war
ja
sagenhafte 3,57 megahertz
das kann man sich heute gar nicht vorstellen ist bei nintendo heute noch so
ja es gibt zwei sachen ordentliche hardware
also ordentlich leistungsfähige hardware und eine sache die nintendo auch nicht hinbekommt ist
ordentlichen online modus in games
ja
da kommste dir vor wie auf der auf der aller allerersten xbox wenn du dir die nintendo online sachen anguckst
wenn es überhaupt online zeug hat
wie viel ram hat er hoi 128 kilobyte ram und 64 kilobyte grafikspeicher
ja aber immerhin zwei naja gpu kann man nicht wirklich sagen
picture ppu nicht gpu ppu also quasi sli von 1989 ne wann kam der ns raus 91
ja
hotel so fantasia hat ja auch super super grafik für super nintendo ja
ist halt schon andere zeit
rechnen interessant ist da im einzelspieler modus der kartenbildschirm weil wir dadurch wissen was
das spiel alles beachten muss das spiel beachtet immer die aktuelle position der figure und auch
die aktuelle rotation die nicht nur links und rechts ist und sich halt um 360 grad drehen kann
mit der positionen rotation des spielers kann dann so berechnet werden wo sich eine figure auf dem
bildschirm befinden würde und wie weit sie entfernt ist oder das ganze auch mit 50 fps impar darf man
nicht vergessen das game läuft in 50 fps oder 60 ntsc besonders wichtig denn der super nintendo
kann ja keine sprites flüssig skalieren deswegen gibt es mehrere sprites pro figure in verschiedenen
größen die je nach distanz durchgetauscht werden du scheiße die haben stimmt wenn du den kram nicht
skalieren kannst brauchst du wirklich alles das ist wirklich das ist ja noch schlimmer als ich mir
das vorhin gedacht habe ich habe ja freund nur gesagt wenn taut in der kurve ist ist halt mit
rotieren nix aber ne natürlich ist ja auch mit verkleiner nix das heißt die haben alles die
haben jeden jeden fahrer wie viel fahrer hatten denn das erste mario kart 8 oder so glaube gel was
hattest du im ersten mal du hattest mario du hattest luigi du hattest taut du hattest den koopa du hattest
bowser du hattest donkey kong oder nicht diesen diesen donkey kong vorgänger hattest du peach
und joshie hattest du noch peach ich glaube das war es ich glaube das gab es ja acht stück und
wie musste alle acht fahrer musstest du quasi in allen wecheln und in allen auflösungen haben
da nice ja und theoretisch wenn ich weiter überlege wie ist das mit den ach nee nee nee die frage
zeichen wo du drüber fährst die sind ja auf der strecke die skalieren damit mit mod 7 dann
automatisch aber gab es da mal schon lucky to der dich rein und raus aus der strecke ja den gab
schon der muss auf jeden fall skaliert werden und alles was sonst noch so auf der strecke
röhren und so auch röhren auf der strecke und so muss es alles mehrfach geben in allen detail
der vorteil von den cartridges hast speicher wie blöken die super interno games sind sind mini
die sind die die super interno games die haben so gut wie nix muss man gucken wie groß so ein rom
ist da passt nix drauf nix nicht viel ans durchgetauscht werden auch hier vermute ich dass diese
limitation kreativ machte denn der blitz und so ein so ein so ein so ein game hatte hatte
irgendwas keine ahnung 2 mb oder so ja gut im vergleich zum ram von der konsole hatten die
viel speicher so ein game war irgendwie 2 mb groß und die konsole hat halt 128 kilobyte ram ja
das stimmt schon aber viel speicher ist es nicht deswegen so sachen wie orchester soundtracks oder
videos und so das kamen dann erst bei einer playstation mit cds g styles
dankeschön für den sub jetzt lassen die fahrer klein werden durch sie das sprite für eine hohe
distanz einfach immer nutzen wenn ihr beim charakter auswahlbildschirm gerückt haltet
und dann a drückt könnt ihr permanent in der mini form spielen echt wusste ich mal nur so
angemerkt aber vielleicht wusste ich das damals nicht nur alle fahrer in verschiedenen grüßen
gezeichnet wurden und dann das waren so dinge leute das waren so typische dinger die man sich
damals auf dem schulhof erzählt hat so nach dem motto wusstest du schon wenn du mario kahn im
startmenu y drückst dann kannst du den fahrer klein machen und sowas oder was damals in diesem
nintendo magazin ist im club nintendo magazin drin stand was könnt ihr permanent in der mini
form spielen einfach mal nur so angemerkt aber ja das bedeutet dass nicht nur alle fahrer in
verschiedenen grüßen gezeichnet wurden und dann auch noch in mehreren blickrichtungen auch die
hindernisse existierende mehr gabs damals auch noch eine bittung gespart wegen limitierten
videospeicher was die frage meines kindheits ich erklärt warum die thumbs ein immer anstarren aber
auch die ach so moment nur dass jetzt richtig gecheckt hat nur hat man sich hier die ansichten
für verschiedene blickrichtungen gespart wegen limitierten videospeicher ok das ist mir nie
aufgefallen das ist mir ehrlich gesagt nie aufgefallen ich glaube damit hat nintendo auch
gerechnet aber ok gut gut zu wissen was die frage meines kindheits ich erklärt warum die
thumbs ein immer anstarren ich glaube das mir nie aufgefallen haben mehrere größen und auch die balance im versus modus alles
wird permanent berechnet wo es sich befindet da konnte auch bananen auf der strecke liegen und so je nach
distanz und dann kommen auch noch so sachen hinzu wie die grünen panzer die von wenden abbrechen
können items die durch die gegenfliegen die kagi der fahrer und so viel mehr das ist wirklich
wirklich schlau und aufwendig also konnte einfach zusatzchips an die cartridge eines spiels
klatschen und bämme mehr power bämme super mario kart pro 3 sp 1 chip ein matte ko prozessor der
eben genau für diese problematik da ist matte formen schnell und effektiv lösen ohne diesen chip
ist halt maximal sowas wie f 0 möglich das quickmaps macht der basic war der chip hindernisse keine
items einfach nur weil ist ja das stimmt f 0 war wirklich sehr basic du hattest glaube ich am
ende wie viel strecken hatte f 0 hatte ich so viel 12 oder so 16 maximal und vieles davon
waren ja wiederverwendete strecken die ein bisschen angepasst waren also gleich in hintergründen war
ein bisschen tag war ein bisschen nacht und und da war auch nicht viel los bei f 0 es gab bei f 0 gab
es vier vier autos der rest war alles solche 0815 immer das gleiche auto es gab quasi fünf autos
die vier spielbaren autos und diese anderen dinger die einfach so rumgefahren sind mit der
ursprünglichen power der konsole die sp1 wurde in 15 spielen verwendet unter anderem auch in
pilot rings pilot rings hat aber auch etwas interessantes diesbezüglich denn es gibt
cartridges auf denen das flugzeug im demo modus ganz normal landet und es gibt cartridges auf
denen das flugzeug crash bevor es bei der landebahn ist der programmcode des spiels ist eins zu eins
zwischen diesen cartridges jedoch nicht der dsb1 schipp während viele pilot rings cartridges den
dsb1 schipp verbaut haben nutzen ein paar den dsb1 b schipp eine verbesserte version die ein
paar bugs gefixt hat dummerweise wohl die demo und viele bugs gefecht angepasst und weil die
mathematischen berechnungen von dsb1 und dsb1 b sich minimal unterscheiden die neue version
korrekter ist funktioniert die demo nicht mehr korrekt es ist garantiert nur so eine kleinigkeit
die anders ist aber da die demo so lange geht werden sich viele dieser kleinigkeiten ansammeln
und das flugzeug kommt vom kurs ab es gibt enorm viele dieser extra schipps denke der bekannteste
ist da der superfx schipp der das 3d in starfox möglich macht also das hatte das hatte viele
nintendo games hatten solche zusatzdinger drauf fast jedes bekannte spiel nutzt ein dieser schipps
um den super nintendo ein wenig kräftiger zu machen es gibt situationen da braucht man einfach
pure hardware power sei es nun fürs zocken oder für die arbeit jedoch habe ich hab bald
wenn es auf dem super nintendo nicht gehabt und ich kann nie gespielt an sich ranzukommen
da man vielleicht zum beispiel gerade unterwegs ist nur ein tablet dabei hat oder die alte mühle
zu hause bereits in flammen aufgeht wenn man einmal kreise seltene einander sagt egal wir gucken
uns jetzt sehr laut an ich mag seine videos wir lassen uns jetzt eine runde shadow hat was
verkaufen ist ein vollwertiger peter klaut und mit dem neuen powerpaket habe genug leistung um
selbst moderne spiele in 4k zu genießen und dank ray tracing unterstützungen sehen die spiele
nicht nur besser aus auch eure 3d render profitieren davon ich zum beispiel lasse meine intros
animationen nur noch über shadow rendern damit ich währenddessen wichtige andere sachen erledigen
kann ohne dass man eigentlich hpc in die idee videos zu rendern in der cloud da wäre ich jetzt
noch gar nicht drauf gekommen geht halt nicht richtig weil ich habe das source material dort
nicht was bei 3d rendern weniger das problem ist glaube ich da ist das source material nicht so
groß und mit mehr power kommen auch mehr frames denn die extra leistung ermöglicht es mehr spiele
mit stabilen 144 herz zu laufen wodurch das für mich unmögliche passiert ist ich konnte spiele
mit maus und tastatur spielen und habe keine verzögerung mehr gespürt ich bin selbst super
empfindlich wirklich habe klaut gaming lange verschmiert da ich das für unmöglich hielt aber
shadow hat mir das gegenteil bewiesen und logisch auch videos rennen jetzt sehr viel schneller
wodurch ich jetzt mal öfter in 4k rendern werde in zukunft das muss ich das source material in die
klaut hochladen das ist doch also weiß nicht ist jetzt offiziell verfügbar für alle neu
und bestandskunden nach meiner erfahrung lohnt es sich auch wenn das normale paket für vieles
bereits ausreicht legt einfach auf den link in der video beschreibung um euch über das
angebot zu informieren und nun zurück zum video vor fast genau einem jahr habe ja ich gucke seine
videos gern und wir sollten ja auch mal die channel supporten wo wir hier sachen angucken
also wenn euch das video gefallen hat wir hat keine refflink gibt kein refflink sonst
gesagt einfach mal an den refflink anklicken ihr irgendwelche fragen habt bezüglich der
technik von super mario kart und darum soll es gleich gehen aber vorher sei gesagt dass
ich aufhören werde auf twitter die fragen für diese videos zusammen wir werden in zukunft ein
twitter oder jeder mitmachen kann aber ja zu den fragen für spieler modus erklärt uns wahrscheinlich
warum es kein vier spieler modus gibt jetzt oder weil ich kann mich nicht daran erinnern dass
das ding für spieler modus hatte sweet fragt ob theoretisch ein vier spieler modus möglich
gewesen ist die antwort ist nein aber ich finde es dennoch spannend sich mal anzusehen warum
die antwort nein ist zuallererst das kontroller problem der super nintendo hat nur zwei kontroller
ports wodurch vier spieler direkt schwer werden ich denke viele von euch müssen jetzt an sowas
wie secret of mana denken genau daran habe ich gedacht dass drei spieler unterstützt wir
eines mal genau daran habe ich gedacht das aber wusstet ihr dass diese multiplayer adapter alle
third party sind nicht hat nie ein derartiges gerät veröffentlicht und genau deswegen wäre
das wusste ich dachte das war was offizielles die hardware von anderen entwicklern benötigt aber
natürlich stoßen wir auch auf technische grenzen dass der bildschirm immer gesplittet ist auch im
einzelspieler ist in gewisser weise eine design limitation alle sprites und alle berechnungen
wo sich figuren auf dem bildschirm befinden sind auf dieses halbe bildformat ausgelegt das spiel
musste also von anfang an auf zwei spieler ausgelegt werden damit zwei spieler überhaupt
möglich sind alles andere wäre enormer mehraufwand in der damaligen zeit gewesen würde man also vier
spieler unterstützen dann wäre auch der einzelspieler mit sehr hoher wahrscheinlichkeit
im vier spieler format was denke ich absolut nicht das ist was man gerne hätte aber das
wohl größte problem ist das sprite limit bei dem mario kart eh schon das unmögliche möglich macht
der mario kart zeigt mehr sprites an als der super nintendo eigentlich schaffen sollte oam ist kurz
für object attribute memory und enthält die daten aller aktiven sprites daher an welchen
positionen welche sprites sich befindet und paar attribute zum beispiel ob das sprite gespiegelt
werden soll die ansicht eines einzigen spielerbildschirms also zum beispiel der
obere bereich füllt bereits den oam und es wäre unmöglich die karte oder den bildschirm des
zweiten spielers anzuzeigen um also das problem zu umgehen müsste man während ein bild gerendert
wird dynamisch den oam austauschen dass die datenslots vom oberen bildschirm von den sprites des
unteren bildschirms überschrieben werden es ist spät leute moment was
also der super nintendo kann ich genug sprites anzeigen und jetzt müssen die quasi während
sie am rendern sind quasi nachladen oder wie
wenn ihr jetzt an htma denkt dann natürlich guter call aber das alleine reicht nicht die
frage ist ja was ab einer bestimmten bildschirmlinie denn überhaupt passieren soll und dazu gibt es
auch noch ein weiteres problem der super nintendo kann nur in den oam datenschreiben wenn keine
bildlinie gerendert wird möglicherweise gibt es einen kurzen zeitraum in den nichts gerendert
wert und zwar wenn der fernseher den letzten bildpunkt unten rechts rendert und zurück nach
oben links wandert das nennt man blanking es ist immer dann wenn gerade keine bildsteile gerendert
wird ja gute alte crt ist die sowas noch gemacht haben super nintendo sozusagen diese zeit nutzt
um nachzudenken das gute ist dass super nintendo diese blanking phasen auch selbst provozieren
kann währenddessen ein bild gezeichnet wird um also das breit damit zu umgehen indem man
dynamisch den oam umschreibt während ein bild erzeugt wird braucht man genug bilds sein in den
nichts gerendert werden kann dass das bild dann also schwarz bleibt ja ernsthaft deswegen hat
es einen schwarzen balken in der mitte sagt diese dicke schwarze linie zwischen den oberen und
unteren bildschirm ist absolut keine designentscheidung in diesen paar zeilen wird tatsächlich kein
einziger bildpunkt gerendert damit der super nintendo ich dachte immer dass es ist einfach
halt da weil es ab weil es da sein soll ich habe mir da nie was drüber gedacht oem modifizieren
kann während des erzeugen eines bildes dank htma wird also ab einer bestimmten bildlinie das
rendern unterbrochen damit gearbeitet werden kann und wie man an den grünen eventpunkten
sieht auch gerade so aus damit alle oem einträge umgeschrieben werden am unteren bildschirmrand
gibt es noch eine weitere das ist ja geil der schwarze balken in der mitte ist dafür da dass
sie nachladen können im endeffekt das da wäre ich nie drauf gekommen da wäre ich wirklich nie
drauf gekommen das heißt wenn die ein bisschen schneller werden mit ihren berechnungen wäre
der schwarze balken kleiner gewesen schwarze linie hier wird alles wieder zurückgeschrieben
hdq bildschirm wieder angezeigt werden kann wenn also ein spiel mal oben oder unten mehr schwarz
anzeigt als andere spiele dann ist es gutmöglich dass dieses spiel mehr zeit benötigt um
mehr operationen auszuführen die in der ansonstigen blanken zeit nicht schaffbar
werden und genau deswegen würden vier spieler nicht klappen es ist zwar möglich einige punkte
in einer bildlinie zu blanken da aber immer von links nach rechts gerendert wird müsste man
blanken phasen haben die zwischen spieler eins und zwei immer switchen und das klappt nicht
deswegen wäre auch ein vertikaler split bei super mario kart unmöglich dass das spiel
horizontal gesplittet ist und es diesen schwarzen balken gibt liegt komplett daran wie der super
nintendo und wie fernseher funktionieren und davon mal abgesehen glaube ich nicht dass der
dsp one chip genug leistung hat um vier ansichten gleichzeitig zu berechnen aber das ist bei den
ganzen anderen problemen schon fast nebensächlich titus und dragon lp möchten wissen wie das ist
richtig wenn das 3 kilobyte mehr ram gehabt hätte dann bräuchte man es wahrscheinlich nicht ob man
gerade über eine münze fährt von der strecke fällt oder gegen hindernisse fährt wahrscheinlich
anhand von den koordinaten oder so von nintendo wird sicher gewesen sein dass sie auf einer
2d konsole doch in 3d arbeiten mussten oder zumindest ein wenig es wurden bereits viele
dinge so angepackt wie man sie auch später in echten 3d spiel gemacht hat so hat die spieler
figure zum beispiel eine variable die immer angeht auf was für ein untergrund sie sich
befindet dies beeinflusst mehrere dinge zum beispiel welches geräusch kommen wenn man
driftet ob das kart über holprigen boden fährt und dadurch hoch und runter rüttelt auch sowas ob
sich der spieler gerade auf einem itemfeld befindet und dieses benutzt oder unbenutzt ist befindet
sich in dieser variable für den aktuellen untergrund und klar auch ob man über eine
münze fährt ist hier zu finden wenn man über eine münze fährt ändert sich der wert zu 1a was man
nur mitbekommt wenn man das ganze frame für frame durchgeht dass zum beispiel auf einer
normalen straße der untergrund wert im freund danach wieder auf 4 0 zurück und wenn da 1a steht
dann spielt er die die münze aufgesammelt animation ab oder wenn dieser wert also auf
1a geht checkt das spiel wie der x und wie funktioniert das löschen der münzen auf dem boden
dachte sie den bestandteil von der karte oder nee die tauschen wahrscheinlich dann einfach
die stelle wo die münze ist aus durch noch mehr graue pixel spieler auf welcher münze man sich
befindet um das entsprechende teil des untergrundes anzupassen und die aktionen auszuführen
das ganze nicht ganz so anders als ein 2d spiel immerhin würde mark hat auch top down ohne
probleme funktionieren dennoch gibt es eine z-achse dieses beispiel bestimmt ob man über
hindernisse hinweg kommt oder nicht ich schätze hier gibt es eine einfache abfrage von wenn z
wert über zahl x dann werden hindernisse item sprunglinien und sowas ignoriert bei der
koalition ist es grundsätzlich ebenfalls nicht anders als bei traditionellen 2d spielen die
art wie sich das kart verhält bei einer koalition macht es nur so interessant wenn man zum beispiel
gegen das je nach winkel stößt sich das anders weg von der barriere spiel ob man von links oder
rechts gegen die wand gefahren ist und wird dementsprechend weggestoßen es scheint intern
irgendwo ein timer zu geben der angibt dass man beim ersten aufprall stark zurückgestoßen wird
und mein zweiten mal nur leicht und so dann ja das ist ja auch clever weil beim ersten aufprall ist
es die leute normalerweise halt aus der fahrt und dann muss es halt stärker sein beim zweiten mal
sind sie noch nicht so schnell wahrscheinlich haben die sich bei nintendo gedacht das reicht
schon in 95 prozent erfällen das ist ein seltsam komplexes verhalten für ein super nintendo spiel
wie man gegen die wand fährt sehr stark beeinflusst wie man abprallt auch interessant ist wie der
spiel tiefer zeug mit objekten unterhalb der strecke in den geist guck mal da das ist ja
natürlich die können ja schlecht auf die karte gemalt sein weil die kannst ja nicht rein skalieren
die dinger werden zum beispiel diese fehle verwendet damit es so wirkt als wenn die
holzplanken wie ein steg aufgebaut sind die illusion funktioniert perfekt und es gibt der
strecke ein gewisses gefühl von höhe das siehst du auch weil die sich mitdrehen können vor und
hinterhintergrund layern gerendert werden indem man ihre priorität anpasst diese fehle sind
also auf der niedrigsten priorität und werden daher unterhalb des hintergrund layers gerendert
wenn fahrer also von der strecke fliegen indem sie halt auf einen teil gehen wo sich nichts
befindet und das spiel daher dann weiß hier muss jetzt runterfallen verändert sich ihre
priorität auch temporär auf die niedrigste damit sie hinter der strecke verschwinden es sind all
diese tricks die dafür sorgen ein eigentlich 2d spiel so wirken zu lassen als wäre das ist
schon das ist schon wirklich richtig high IQ was nintendo da fabriziert hat und zum ende
noch fragen die keine eigene überschrift benötigen crazy and möchte wissen ob das spiel den
super nintendo ans limit brachte auch wenn das immer schwer zu sagen ist da es garantiert immer
wege gibt etwas besser zu machen wurden hier extrem viele tricks verwendet damit das spiel
so stabil läuft wird behaupten da 60 fps bei ntsc die sp1 chip hat man hier nahezu das maximale
rausgeholt alles andere wäre bei einer produktion die auch irgendwann mal fertig werden muss totaler
wahnsinn jakob deff und lukas möchten wissen ob die computer gegner immer simuliert werden
auch wenn sie nicht im blickfeld sind anders als bei spätere malkarteien ist die k.i. mega basic
sie sammelt keine items sie regiert auf absolut gar nicht sie kann kaum vom fad abgeworfen werden
sie fährt stumpf ihren fad ab und das war es das was man auf der karte sieht ist so ziemlich das
was man auch bekommt und da die karte permanent geupdatet wird inklusive rotation und hin und
wieder das schleudern wegen items wird die k.i. immer laufen egal wo der spieler gerade ist matthias
albers möchte wissen ob man mit den superfx chip auch 3d fahrer machen könnte ich denke er nicht
der superfx chip ist zu langsam um selbst super low poli fahrer zu rendern immerhin bräuchte man
acht davon was möglich gewesen wäre ist die figuren wir dem chip zu skalieren so wie es zum
beispiel der inoffizielle nachfolge macht hat marocca super circuit das spiel aber mit 60 fps
läuft während polygone undenkbar gewesen egal mit welchen chip damals und wir sind durch das
dauerte jetzt länger zu produzieren als ich eigentlich geplant habe wirklich wirklich super
super video also war vieles drinne wo ich keine blassen schimmer von hatte mich interessiert zu
alte alte games vielen dank an meinen sponsor shadow die keinen druck machten und sagten ich
soll lieber länger daran arbeiten anstatt ein schlechtes video abs liefern und auch vielen
dank an meine patreons die prox sponsor auf dieses video warteten als nächstes kommt sonic frontiers
dran aber bis dahin danke ich meinen patreons und vor allem top patreons namens säbel vom germany
strakur captain objosel akino kiritani rapture shadow lupina magical let's all ist klar aber
wirklich super video also wenn euch das gefallen hat könnt ihr bei ihm vorbeigucken auch mal
subscriben da hat er keine raffling sonst hätte sogar mal gepostet jetzt ja aber wirklich sehr
sehr spannend prog oh nee das ist der kubernetes daheim typ das gucken wir uns morgen früh an
das wird wieder schlimm aber noch zwei neue kubernetes cluster daheim oder was was passiert
ok leute gepennt wir sehen uns morgen früh wieder so wie immer 8 30 bis 9 30 irgendwann
ist der nc u macht gut
