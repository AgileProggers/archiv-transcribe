Das war's für heute.
Vielen Dank für's Zuschauen.
Das war's für heute.
Das war's für heute.
Vielen Dank für's Zuschauen.
Das war's für heute.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Vielen Dank für's Zuschauen.
Also die habe ich mir jetzt gekauft für meinen Baum, für meinen Weihnachtsbaum, die haben
ja nämlich so einen...
Wie heißen die Dudes denn?
Ich hab vergessen wie die heißen diese Hersteller.
Irgendwas mit Lighting.
Zumindest habe ich eine 5 Meter Kette gefunden, die man per WLED steuern kann.
Ja, wenn ich es jetzt finden würde, null.
Ich gucke jetzt einfach mal kurz bei mir auf dem Handy und dann machen wir was sinnvolles
heute mal zur Abwechslung.
Warte mal kurz auf dem Handy gucken, weil da hatten wir es ja letztens von.
Zeige ich mal her.
Orders.
BTF Lighting, ach du Große, ja ja ich habe es jetzt auch gerade gefunden, also BTF Lighting
heißen die.
Die haben sowas hier in der Richtung, genau.
So und da habe ich mir eine 5 Meter Kette gehört, nö ich bin nicht krank, nee nee.
Mein Headset ist nicht richtig dran, ich höre mich wieder auf der einen Seite nicht richtig
sehr.
So jetzt, jetzt passt alles gut.
Was findest du besser, Home Assistant oder IO Broker?
Okay ich habe nur Home Assistant, ich habe mit der IO Broker noch nichts gemacht.
Ja, das habe ich mir gekauft, hier guck mal, das ist glaube ich die optimale Weihnachtsbeleuchtung,
äh Weihnachtsbaumbeleuchtung.
Hier, das sind ganz dünne Kabel und die haben einfach dieses LED Package, diese kleine Schaltung
mit der LED oben drauf, haben die quasi einfach in Heißkleber oder was ist das Kunstharz oder
sowas gepackt, das heißt du hast eine ganz dünne Leitung und hast 5 Meter und man kann
es per W-LED steuern, probier mal dann aus wenn es da ist, das ist glaube ich optimal
für einen Weihnachtsbaum.
So, jaja Montagsstells, sind die, ja die sind einzeln ansteuerbar, das heißt du kannst
auch Effekte machen und sowas, siehst du ja hier, du hast ja 4 Leitungen, LEDs mit 4
Leitungen sind da eigentlich immer ansteuerbar oder auch mit 3, ne es sind auch nur 3, schlabber
scheiße, 3, ja, kannst du auch Effekte machen und sowas, hier guck, nur dass ich das nicht
mit dem offiziellen Controller mache, man sieht es ja auch hier, ne, Data Input, 3 Stück,
sondern mit Gift, boah, ich krieg, weil das Kabel so schlechte Qualität ist, krieg ich
ein Gift dabei, boah, krieg ich, da krieg ich, da krieg ich noch ein extra Stecker
geschenkt, boah, das ist aber, jetzt muss ich das gleich nochmal bestellen, Wahnsinn,
die China-Chinesen sind zu freundlich, ich mach mal meine VM an, easy mani, also wir gucken
uns heute mal neue C-Sharp 10 und Dotnet 6 Features an, ich wollte mir das jetzt allgemein
mal zu Gemüte führen und hab so vorm Rechner gesessen und hab mir gedacht, hey bevor ich
mir das jetzt alleine anguck, können wir uns das auch zusammen angucken, zu laut oder warum
ist die Smoke Sound zu laut, boah, ist gut, ok, alles klar, hier, das ist normal, Twitch
kannst du die Werbung nicht mal gescheit blockieren, das einzige was geht ist mit nem Browser-Plugin,
und dann auch meistens nur mit spezieller Config, weil Twitch hat sich gedacht, es
ist eine gute Idee, Content und Werbung von den gleichen Servern auszuliefern, was ist
das da im Hintergrund eigentlich, was bin ich da sehend, egal, Bing Image of the Day,
Start New Session, zack, ne ne, erst mal Dotnet 6 installieren, was hab ich denn hier überhaupt
drauf, gibt's das mittlerweile schon übers Package Manager, Dotnet 5 haben wir hier,
Dotnet 3.1 haben wir Dotnet 6 hier, ich installiere das über Dotnet install, Dotnet install,
ne, das brauchen wir nicht mehr, das brauchen wir mittlerweile nicht mehr, mittlerweile ist
es als Release Candidate verfügbar, man kann jetzt einfach glaube ich machen minus C6,
6.0, ja, dann kriegt man den aktuellen Release Candidate, also das ganze kommt übrigens
raus in ungefähr zwei Wochen, dann wenn auch Battlefield am Start ist, Early Access ungefähr
so zur gleichen Zeit, hat wahrscheinlich nichts miteinander zu tun, hier Roadmap, Dennis danke
für den Sub, November, ich glaube am 10. war das, kurz gucken, nein nein das stimmt nicht,
es muss doch mal ein Release Date geben, es gibt auch, ah hier, am 9. November ist es,
9. November, naja 10. November hab ich gesagt, da war ich ja nicht, ich sage, das gibt es
ungefähr dann, wenn auch Battlefield rauskommt, ja, was für ein Disro, das ist Manjaro mit
i3 WM, was ich hier gemacht hab, dass es auf einmal kein Dark Seam mehr hat, bin ich mir
nicht so ganz sicher, die haben wahrscheinlich irgendwie Versionen geupdatet, wir downcrayen
das einfach, ah must be root, na dann, wir downcrayen das einfach wieder und dann funktioniert
es, null, aber das ist ja auch keine, bam, einfach downcrate, schon ist wieder Dark Seam
am Start, easy, kein Problem, kein Problem, aber so ist es bestimmt nicht gedacht auf
Dauer, also Vanguard kommt auch in dem Dreh irgendwann, weiß ich einfach nicht wann da
ein Release ist, ja, das geht, also mit irgendwelchen eigenen Adblockern ist da nichts mehr, zumal
wie gesagt Twitch liefert ja von den gleichen Servern Content und Werbung aus, das ist schwierig
das zu blocken rein mit DNS, ne, so, also wir haben.NET 6 installiert, zeigen wir mal,
.NET, zack, so, jetzt weg machen, Version 6.0.1.0.rc2.21505.57, alter, Monarch S, die Microsoft Versionsnummern,
ah, gut, niemand braucht das auch komplett, was für ein Desktop ist das, gar kein Desktop,
guck mal, ich hab kein Desktop, ich hab nur das Bing Image of the Day, ich hab, ich hab
noch nicht mal, du kannst hier noch nicht mal Icons anlegen oder irgendwas machen, das
ist, also das ist Manjaro mit I3 WM, Arch, by the way, muss man ja immer erwähnen, hab
mich gehört, da bruschelt einer schon von den Sub, so, wir starten mal unsere Idee und
dann gucken wir uns das jetzt mal an, wow, wie kann denn sowas sein, unmöglich, by the
way, bevor mir jetzt irgendwie die Leute wieder unterstellen, ich würde denen kein Geld geben,
ich hab lizenziert, guckt, ich hab vollkommen legit account, ich hab all desktop account,
hier, wo sieht man das, config help, about, licensed to MaxK, subscription is active until,
also ich hab, ich hab ne Lizenz, ja, bevor jetzt wieder irgendwelche Leute kommen und
sich beschweren sagen, Max, du gibst, du machst hier ganz böse Dinger, so ist es nicht, guck,
ich hab ne richtig echte legit Lizenz, adresse leak, omg, zeig her, wo ist adresse leak, monka
adresse leak, about, oh nein, subscription is active, ja, ich wohne in Frankfurt, subscription
is active und Hausnummer 11.0.11.11, genau so, so siehts aus, excellent, habt ihr gut
erkannt, chat, ja, das ist, Sicherheitskopien kann man auch benutzen, ja, aber das ist keine
Sicherheitskopie, wie gesagt, das ist eine legit all access desktop Version, ich hab
euch absichtlich ausgeplendet, nicht, dass, nicht, dass ihr jetzt denkt, ich würde hier
irgendwie komische Dinger machen oder so, das glaubt ihr ja selber nicht, dass ich so
was mache, würde mir, würde mir nie einfallen, da jetzt irgendwelche, irgendwelche Sachen
zu treiben oder so, musste den Key eingeben, korrekt, ich hab jetzt den Key eingegeben,
wie man hier sieht, den Key eingegeben und jetzt funktioniert das auch, so, auf gehts,
also, aber wie gesagt, ihr habt's gesehen, ich hab ne richtig echte legit Lizenz plus
hier in meiner VM noch nicht angemeldet und ich hab jetzt auch keinen Bock den Kram raus
zu suchen, also Patrick, danke schön für den Sub, 28 Monate, es wird echt mal langsam
Zeit, dass ich ne neue, neue, neue Kicks-Batch mache für Leute, die schon so lange dabei
sind, vier Monate, Carlo, danke für den Sub, so, jetzt müssen wir erst mal.NET 6 einrichten
in Rider, in Rider, rein reiten, so, wo ist es denn hier,.NET, nee, ist schon, automatisch,
exquisitieren, alles klar, ist schon, also, dann legen wir mal ein Konsolenprojekt an,
Futust Chat 2021, Language C Sharp, Docker Support braucht kein Mensch, Framework 6.0,
auf gehts, so, jetzt gucken wir uns mal ein paar Sachen an, ich hab nie so wirklich großartig
geguckt im Vorfeld, ich, wie gesagt, ich wollte grad anfangen zu gucken und ich dachte mir,
ich mach einfach mal den Stream an, ich hab ein paar Artikel gefunden und ein paar Videos,
wo man Sachen gezeigt bekommt, Paints, danke für den Sub, auch 28 Monate, exzellent, mein
Code schreibt, ich schau Stream, warte, dass mein Backup von meinem Server fertig wird
und programmiere, tja, das nenne ich mal hier Multithreading, also, das ist der originale
Microsoft Artikel, dann hab ich noch was anderes gefunden zu.NET 6 Link Improvements und dann
hab ich noch irgendeinen Blog Eintrag gefunden zu, was es für neue spannende.NET 6 APs gibt,
wir gucken uns, ich würde sagen, wir fangen mit den C Sharp Feature erst mal an, das ist
so das Spannendste, finde ich und dann hab ich noch zwei Videos gefunden, aber die müssen
wir auf dem, vielleicht gucken wir die danach mal schnell durch, ob da noch irgendwas dabei
ist, zwei Videos gefunden, von ihm hier, der hat auch zwei gemacht zu, alter, so viele Shorts
auf einmal, der hat auch zwei Videos gemacht zu Link Features, C Sharp Features und neue
APs, da können wir mal nachher gucken, wenn wir selbst rum probiert haben, was da noch
so drinne ist, was ich nicht gefunden hab oder was ich nicht gecheckt hab, vielleicht
check ich ja auch manche Sachen nicht, mittlerweile ist es vieles mega Big Brain und ich zeige
euch mal was cooles, was ich heute Morgen rausgefunden habe, was mir so noch gar nicht klar war,
dass man das machen kann.
Wieso C Sharp und nicht C++?
Ich weiß nicht, ob du oft im Stream bist, aber ich glaube, dieses Fass wollen wir nicht
öffnen heute, oder?
Chat, wie sieht's aus?
Doch, ich weiß, du bist öfters im Stream, du hast auch schon viele Messages geschrieben,
aber ich glaube, dieses Fass wollen wir heute nicht öffnen, warum nicht C++, ja?
Aber wir wissen ja, C Sharp ist ja eigentlich C++++, wenn ich damit anfange, ist es vorbei.
So, wir sehen schon mal ein cooles neues Feature, wobei das kein C Sharp 10 Feature ist, aber
anscheinend sind die Templates, warum nicht Swift, Kotlin oder Objective C, aber anscheinend
sind die Sachen jetzt soweit angepasst, dass die Templates so kommen, also früher, nur
mal so zum Vergleich, früher sah das ein bisschen anders aus, mittlerweile ist das Fass
so minimal wie den Python Programm, auch wenn es unter der Haube natürlich mehr generiert,
gibt es eigentlich Toolbox, gibt es.NET Peak auch für Linux, nee anscheinend nicht, gibt
es das hier für, den Decompiler, ups, jetzt, Alter, geht es immer auf,.NET Peak Portable
und alles, gibt es anscheinend nur für Windows, vielleicht machen wir das auch unter Windows,
aber ich will kein RC unter Windows installieren.
Ich wollte euch nämlich zeigen, was der unter der Haube macht, kennt jemand einen guten.NET
Decompiler für Linux, gibt es, EL Spy, EL Spy klingt gut, EL Spy, das will ich haben,
habe ich das vielleicht schon, ja das will ich haben, keine Ahnung ob das was taugt,
ich brauche, ich brauche, ich brauche irgendeinen.NET Decompiler, dass ich euch das jetzt zeigen
kann, mal gucken ob das sich ordentlich installieren lässt, ja, schauen wir mal, weil ich will
euch nämlich was zeigen gleich, wenn wir uns das hier minimal angucken, oh was hat der
für Schmerzen, ich lasse den mal kurz machen, wie ist eigentlich die Sharp Support für
Bildungssysteme, ich programmiere seit 3 Jahren nicht mehr unter Windows, ich glaube man kann
sagen der Support ist gleichwertig, bis auf ein paar ganz kleine Ausnahmen, ja zum Beispiel
dass es keinen gescheiten Decompiler gibt, oder ich habe noch nie geguckt, EL Spy, da
ist er, jawoll sehr schön, also was ich euch zeigen wollte ist folgendes, früher sah das
ganze ja so aus, wir machen mal, wir machen mal parallel, ich weiß was wir machen, wir
machen mal parallel, achso ich habe jetzt nur das 6er, wir können die C Sharp Version
anpassen, aber da ändern sich die Templates nicht, ne dann lasse ich, dann lasse ich,
geh weg, ja, also früher sah das ganze ungefähr so aus, Namespace, Calc W, wie auch immer,
und dann gab es irgendwie sowas wie Public, wie sahen eigentlich Main aus, war das Static,
ich war nicht sicher, ich verwende immer die Templates, keine Ahnung, ich glaube ich habe
in den letzten 10 Jahren keine Main Methode von Hand gebastelt, so also früher sah das
die ganze Zeit so aus, wenn du Main, also der Einstieg von deinem Programm sah die ganze
Zeit so aus, aber das braucht man jetzt nicht mehr, man kann jetzt diese Minimalgeschichte
hier machen, aber unter der Haube, das ist übrigens kein neues C Sharp 10 Feature, das
gibt glaube ich schon seit 9, aber unter der Haube, und das ist das was ich euch zeigen
will, generiert das das immer, so, was, Error, wat, ah ich bin ja auch ein Kacknub, ich hab
das mit dem falschen.NET kompiliert, ah ist schon besser, ok, also jetzt zeige ich euch
mal nämlich was er da draus gemacht hat, das ist einfach nur Compiler Magic, also so sieht
es jetzt aus, und wenn ich das mal hier im D-Compiler aufmache, warum startest du das
nicht über die Edirektur, das weiß ich nicht, manche Sachen mache ich irgendwie lieber
bei das Terminal, was ist das für Musik, die kommt mir bekannt vor, ist das Terranigma,
was ist das, weiß es nicht, wo erkenne ich was es ist, bei 10.53, ach nee erkennt man
gar nicht, das ist einfach nur Playlist ohne was drinsteht, so jetzt öffnen wir das ganze
mal, OnkS, hat das jetzt funktioniert, hier schauen wir mal, ok das Ding ist mal wieder
nicht gescheit in der Lage da rein zu gehen, also Ryder, mein Gott sieht das hässlich
aus, ja, cutest chat 2021, Binary Debug, jetzt da ist es, so wenn wir jetzt hier die Main
Methode angucken, da sehen wir, was ist das für ein Schrott, warum geht das nicht, was
ist das für ein komischer D-Compiler, warum funktioniert das nicht, oder bin ich nur zu
dumm den zu verwenden, he doesn't know, he lacks critical information, es ist egal ob
das die Sharp 8 kann, doch was da unten rauskommt ist kein Unterschied, ok Leute ich hab legit
keine Ahnung wie das Ding hier funktioniert, normalerweise sollte hier jetzt der Code drin
stehen, z.B. auch wenn ich hier irgendwas öffne, dann sollte ich den Code sehen, genau, so
und warum sehe ich hier für Main nicht, also ich kenn keinen D-Compiler in Ryder für meinen
eigenen Code der das macht, tja, dann kann ich euch das nicht zeigen, warte mal, es gibt
doch, wir machen das anders, es gibt doch so eine schöne Seite die das macht, wie hießen
das, il-code-website, es gibt doch so eine Website die das kann, wie hießen das, C-Sharp,
C-Sharp Lab, genau, so, jetzt kann man sich das ganze angucken, kann man hier irgendwie
die C-Sharp Version einstellen, default Oktober, was auch immer, so und wir wollen als Result
haben, il, C-Sharp, ok wunderbar, Console-Write-Line-1, so, also, das ist der aktuelle C-Sharp Code
und was er unter der Haube macht ist das hier, also der generiert nach wie vor, das ist das,
was ich eigentlich zeigen wollte, der generiert unter der Haube nach wie vor hier Main-Class
mit Static-Main-Methode, man muss es bloß nicht mehr selbst schreiben und auf der anderen
Seite kann einem das ja egal sein, aber man sieht, das ist einfach einzig und allein Compiler-Magic,
dass das funktioniert und man spart sich sinnlose Einrückungen, also das ist wirklich praktisch,
aber das geht schon seit, also mindestens seit C-Sharp 9, wenn nicht sogar noch eins
davor, aber ich glaube seit C-Sharp 9 geht, ich glaube das ist seit.NET 5 C-Sharp 9 wo
das geht, das ist natürlich schon cool, du hast C++ in der Berufsschule, das ist richtig,
Monarch-S, weil das schon, sag mal so, das ist insofern schon mal richtig cool, weil
es halt einfach schön kurz und knackig ist für irgendwie kleine kleine Konsolenanwendungen
oder sowas, da ist natürlich schon enorm praktisch, so, ich wollte noch eine Sache,
noch eine Sache hier zum Chat sagen, ja, ich hab, das ist Rider, genauer, wie gesagt,
ich würde Rider verwenden, ja, das ist das beste, was es gibt, das ist auch das beste
unter Windows, das ist auch besser als Wishlist Studio, finde ich persönlich, kann man sich
jetzt drüber streiten, Microsoft hat jetzt ja angefangen verschiedene Spezialfunktionen
in Wishlist Studio oder versucht, Spezialfunktionen in Wishlist Studio einzubauen, die es anderen
nicht ermöglicht, das so ohne weiteres einzubauen, zum Beispiel ihre Hot Reload Geschichte, ich
weiß nicht, ob jemand diese Hot Reload Sache mitbekommen hat, wo Microsoft Sachen entfernt
hat aus.NET 6, um sie dann in Wishlist Studio einzubauen, danach war ein Riesenaufschrei
auf GitHub und jetzt ist es wieder drin, richtig, richtig verkackt, ja, Wishlist Studio Code
geht auch, aber ich finde Wishlist Studio Code für sie scharp, irgendwie nervig, also
ich würde ehrlich gesagt sagen Rider, Rider ist gar nicht mal so teuer, also mal GitHub
Nano getestet, nee, Rider ist gar nicht mal so teuer, also wenn man es über die Firma
bekommt ist es natürlich noch besser, ja, Wishlist Studio Code, Wishlist Studio ist
natürlich kostenlos, aber die, die Preise sind gar nicht so schlimm, also guck mal, wenn
man das für persönliche Nutzung, Nutzung sich kauft und es auch, sagen wir mal, halb
semi oft verwendet, dann bezahlst du 139 Euro im Jahr, das gibt andere Sachen, das kostet
das im Monat, oder eben 83 Euro im Jahr, oder aber ihr sagt ihr wollt das, das Package was
ich mir gekauft habe, ihr wollt das All Tools, oder wie das heißt, wenn ich jetzt wüsste
wo man das finde, hier Store wahrscheinlich, die Seite ist auch, ah All Products Pack genau,
es gibt noch mehr Möglichkeiten wie man, wie man das, wie man da rankommen kann, ja, so
man hat das, man hat das All Products Pack, dann bezahlt man, das hab ich nicht oder, das
ist Up for Individual Use, so teuer ist das gar nicht, dann bezahlt man 250 Euro im Jahr,
das finde ich, das ist für mich so die beste Kombi, das nächste ist, die haben auch einige
Sachen kostenlos, wenn man bei denen mal schaut, die Python IDE ist glaube ich kostenlos,
schauen wir mal, also ich glaube PyCharm gibt es eine kostenlose Version, IntelliJ gibt
es eine kostenlose Version, also wenn man das benutzen will, kann man das eh schon mal
komplett free verwenden, dann so die Standard, so manche Tools, hier.NET Peak und sowas,
das ist glaube ich auch alles kostenlos und der Rest, ja der Rest muss man sich kaufen,
aber ich kann echt sagen, das Zeug ist nicht schlecht, ich finde das JetBrains Zeug wirklich
gut, weiter im Text, kann mir wer helfen mit welcher Programmiersprache man als Anfänger
neu zuteilen anfangen soll, ja das passt wunderbar, ich habe da ein Video letztens zugemacht und
zwar, mit welcher Programmiersprache eignet sich für den Einstieg, da habe ich ein Video
zusammen gemacht oder wir haben ein Video zusammen gemacht über dieses Thema, kannst
du bei mir auf dem Channel gucken oder bei ihm auf dem Channel gucken, da haben wir uns
darüber ausgelassen, kommt aber natürlich immer ein bisschen darauf an, was dein Ziel
ist, ja, also GitHub Nano sagt mir gar nichts, hast du C-Sharp selbst gelernt oder eine Berufsschule,
ne ich habe das damals selbst gelernt, das war 2003 oder so, da war.NET 2 gerade ganz
neu, Framework, ganz neu, da gab es so viele Beispiele mit 1.1 und sowas, habe ich nie verwendet,
habe ich immer einen großen Bogen drum gemacht, ganz ehrlich, wenn ich Mobile Apps entwickeln
würde, ich würde es tatsächlich nicht in C-Sharp machen, auch wenn ich richtig C-Sharp
Fan bin, aber Mobile Apps würde ich wahrscheinlich in irgendeinem Javascript gedünst machen,
was weiß ich, irgendeine Ionic Geschichte oder so, was hältst du von der Aussage von
einem Professor die lautet, wir lernen jetzt C++ damit alle anderen Programmiersprachen
leisten, naja, ich weiß nicht wo da die Logik dahinter ist, es stimmt insoweit schon, wenn
man C++ überlebt hat, kann er nichts anderes mehr so richtig schocken, aber es führt wahrscheinlich
auch zu, dass ganz viele Leute sagen, sie haben da überhaupt keinen Bock drauf, weil
sie C++ so abfackt und manchmal gibt es dann auch Leute, die voll in dieser C++ Denkweise
aufgehen und die kannst du auch für etwas anderes nicht mehr verwenden, achja, als Student
gibt es, das stimmt, als Student, wenn du eine Edu-Adresse oder so hast, kriegst du
C++ auch kostenlos glaube, Datacryp habe ich nie verwendet, naja, ist doch auch schon
mal was, so, ok, also, gehen wir mal rüber, also das erste was ich euch zeigen wollte,
das ist wie gesagt kein neues, ich habe 10 Feature, aber das geht schon lange, dass man
das so, ich weiß gar nicht wie sie das nennen, Minimales Main, übrigens, falls ihr euch
jetzt vielleicht fragt, was passiert, wenn man eine zweite Datei anlegt, hier cacq.cs
und man macht das auch weg und sagt hier hallo, achso, deswegen ging das Marko nicht, ja,
dann werdet ihr feststellen, das funktioniert nicht, also man kann nicht zwei Dateien quasi
ohne Namespace und ohne alles machen, weil, wenn ich das jetzt versuche zu kompilieren,
dann sagt er mir, dann sagt er mir, nee, geht nicht, weil doppelt, oops, only one compilation
you can have top level statement, also sprich, ich kann nicht jede Datei so machen, aber
für kleine, irgendwelche Commando-Zeilen-Tools oder so, ist das natürlich wunderbar, dass
das funktioniert, das mal weg, das ist aber nix, das ist aber nix neues, ein cooles Feature,
was ich euch nochmal zeigen wollte, weil es mir heute Morgen selbst eingefallen ist, stellt
euch mal vor, ihr wollt sowas hier machen, also ihr habt irgendeinen Inam, was weiß ich,
ich mach jetzt einfach das gleiche Beispiel, wie ich es heute Morgen rausbekommen habe,
connection state und da gibt es dann sowas wie, keine Ahnung, closed, failed, new, connected
oder irgendwie sowas, so und jetzt wollt ihr den if machen, also ihr habt hier keine Ahnung,
state gleich irgendwas, ach nee, das geht da nicht, das darf man nicht oben machen,
connection state, das ist egal was, so also ihr habt ne Variable, wo ihr überprüfen
wollt, in welchem connection state ist das ganze und es kommen zwei Stück in Frage, so
bisher musste man das eigentlich immer so machen, du musstest sagen, state, ist das, keine Ahnung,
failed oder ist das vielleicht closed und dann konntest du sagen, was weiß ich, fogjam,
man kann nen switch machen, ja das geht auch, aber man kann auch einfach einen, ich glaub
static pattern oder wie auch immer das heißt, man kann auch einfach einen pattern verwenden
in nem if, das ist relativ neu, das geht glaube ich auch erst seit diesem oder letzten c sharp
version, also die Auswahl ist, das ist das alte und die neue Variante, was ist die neue,
die jetzt mögliche Variante ist die hier, du kannst sagen, state ist zum Beispiel connection
failed oder connection closed, was hat der eigentlich für Schmerzen damit, remove ifs,
warum, ich will das if statement nehmen, ach so, ja gut, weil der mitdenkt und weiß es
ändert sich nie, also man kann jetzt ifs deutlich kürzer schreiben, jetzt an der Stelle macht
es gar nicht mal so viel Unterschied, aber spätestens wenn ich hier nen dritten state
abfragen will, spätestens wenn ich hier irgendwie nen dritten state abfragen will, dann wird
es doch schon relativ unübersichtlich und in dem Fall find ich das deutlich besser
lesbar, gibt es das nur bei c sharp, ich geh mal davon aus, dass wishlist basic diese updates
nicht mehr bekommen hat, ne, also das ist auch relativ neu, das weiß ich nicht, ob
das ein c sharp 10 feature ist, gibt es das auch mit in...was, kann ich dem chat nicht
folgen, der chat ist zu advanced für mich mittlerweile schon, zu hoher eq im chat, ja
also das ist tatsächlich schlecht, natürlich kann man da auch nen switch machen mit den
3 states, man kann auch mehrere ifs machen, aber das wollte ich mal zeigen, das find ich
echt cool, dass das mittlerweile funktioniert, dass es die kürzere Variante davon ist, so,
der chat ist wirklich zu überlegene eq heute, ich versteh nicht was da wieder geschrieben
wird teilweise für dinger, bekommen ein weihnachts emote switch, stimmt, ja wir könnten wieder
weihnachtsmodes rein machen, nachdem ich jetzt ja den keqw doch ausgetauscht hab, achso if
war in...ich glaube, ich glaube das gibt es nicht, bin ich mal gar nicht so sicher, aber
ich glaube das irgendwie in operator hast du nicht, aber du kannst contains verwenden,
wobei contains mit nem enum, gute frage, ich geh mal davon aus, dass du, na egal, müssen
wir uns jetzt mal angucken was da genau Sache ist, zumindest das ist alles keine c sharp
10 features gewesen, wir gucken uns jetzt mal an was es neues gibt, das ist ja eigentlich
das was ich heute machen will, also fangen wir mal an mit dem offiziellen microsoft artikel,
hast du auch vorher ein uml diagramm gemacht, ja struktogramm hab ich gemacht, nasi schneiderman
struktogramm, das liegt hier bei mir auf dem schreibtisch, ich mein, wie könnt ich sonst
überhaupt anfangen, ohne gehts ja wirklich nicht, also ich glaube niemand programmiert
irgendwas ohne vorher ein struktogramm zu machen, also was gibt es denn hier schönes
neues, whats new in c sharp 10, records struct gibt es neues, ja das ist neu, das hab ich
auch gelesen, ich hab keine ahnung wozu das gut ist, das gucken wir uns jetzt in der rein
folge an, wo ich was zu sagen kann, wo ich irgendwie auch schon gleich ne idee hab, wie
man den kram verwenden könnte, also global using directives, das ist ne coole geschichte,
das finde ich nice, wenn man jetzt hier ne neue datei macht, so wir machen jetzt mal
irgendwie ne neue datei, new, class, pochchamp, die pochchamp class, so achja dann sagt der
natürlich, oh das geht, muss anders geschrieben werden, wenn ich sowas hier hab, dann hab
ich ja immer einmal namespace drum herum, ich vermute mal, dass die das gemacht haben,
dass du beispielsweise mehrere namespaces pro file machen kannst oder so, wobei ich
ganz ehrlich bin, ich glaube das hab ich noch nie gesehen, dass es mehrere namespaces pro
file gibt, deswegen hat sich microsoft jetzt gedacht, man kann das kürzer machen, man
macht das jetzt so ein bisschen c++ style, weiß ich auch nicht ganz stimmt, man sagt
jetzt hier oben einmal ich namespace und spart sich die einrückung, also anstatt so, anstatt
so kann ich jetzt so machen, das finde ich echt praktisch, das sind so kleine sachen,
ich finde, microsoft hat da echt und ihr wisst, ich lobe microsoft jetzt nicht so oft, aber
was neues die sharp features angeht, ist microsoft echt nicht schlecht, die haben da die letzten
jahre über viele sachen eingebaut, die entweder wegweisend geworden sind, diese ganze async
overweight geschichte zum beispiel oder aber die einfach nur nützlich sind und das kriegen
die finde ich gut hin, achja warum das hier jetzt angezeigt wird als geht nicht, ich glaube
ich hab es richtig gemacht, es liegt daran, rider hat noch nicht alle c sharp 10 features
drinne, also ihr seht prinzipiell funktioniert, gar kein problem, aber rider ist der meinung,
das ist kein gültiges statement, es gibt, ide upgrade is available, mal gucken, vielleicht
geht es auch mit der neuesten version, können wir mauspringen, aber ich glaube sie haben
gesagt, dass sie erst mit 2021.3 dotnet 6 vollständig unterstützen wollen, das kommt
irgendwann demnächst, aber das meiste geht schon, das ist zum beispiel so eines der features,
da kommt er noch ein bisschen durcheinander, der sagt, das ist nicht korrekte sonntags,
aber man sieht ja, ich kann es ja ausführen, es ist kein problem, funktioniert, also das
ist jetzt neu in c sharp 10 und das finde ich eine äußerst praktische neuerung, also
das finde ich schonmal gut, es war etwas ganz kleines, aber praktisch, man spart sich quasi
dadurch einmal einrückungstiefe, das kann eigentlich nur gut sein, so was haben wir als
nächstes, extended property patterns, jetzt wird es advanced, was ist das, oh ne, das
werde ich wahrscheinlich nie im leben verwenden, ok, also früher, früher musste man so machen
und jetzt kann man so machen, alles klar, ok, wunderbar, ich glaube, ich habe diese
neue property sonntags nicht einmal bisher verwendet, ja, schön, ahja, das ist tatsächlich
ganz praktisch, das ist tatsächlich ganz praktisch, man kann jetzt, wenn man weiß,
dass man immer die gleichen imports verwendet, ja, also zum beispiel ich verwende in jeder
datei system oder so, da kann ich jetzt sagen, glaube global using und dann kann ich hier
ohne zu importieren, ich hoffe rider checkt das jetzt, da kann ich jetzt hier ohne zu importieren
console write line verwenden, ja, wenn ich das global weg mache, sollte es nicht mehr
funktionieren, ja guckt, wenn ich das global weg mache, dann müsste ich in jeder datei
quasi den graben importieren, das heißt so Sachen, die ich wirklich jedesmal brauche,
kann ich jetzt einmal in meinem einstiegspunkt global davor schreiben und das ist dann programmweit
verfügbar, das ist auch kleiner change aber finde ich auch ziemlich praktisch, du hast
natürlich auf der anderen seite den nachteil, dass du nicht mehr einfach hoch scrollen kannst
und gucken kannst, was sache ist, aber ich denke, nachdem eh niemand irgendwie ohne ideen das aufmacht,
kann man auch einfach hier drüber gehen und zieht es trotzdem, ja das stimmt, wenn du
es einfach copy pastest, dann geht es nicht mehr, wobei man halt sagt, wenn man was copy
pastet, ich copy paste eigentlich nie die usings mit, du copy paste ist ja meistens
so ein teil und nicht alles und dann drückst du 2-3 mal alt enter, weil es ist ja relativ
easy was zu importieren, wenn das nicht importiert ist, siehst du, ah ist rot, drückst alt enter
und dann importiert es automatisch, das geht dann meistens relativ zackig, wenn es einem
nicht gefällt, ist das wirklich ein feature, was man auch easy ignorieren kann, ich finde
es ganz gut, geht auch in der projektdatei, da müssen wir mal gucken, aber in der projektdatei
finde ich dann schon ein bisschen eklig, also in der projektdatei finde ich dann sehr obskur,
wenn das da drin steht, ach ja und was ich auch gelesen habe, irgendwo was jetzt angeblich geht
ist, man kann jetzt string-konstanten zur compile-zeit interpolaten, toller Satz, ich
weiß, aber was jetzt wohl geht, ist sowas hier, wenn ich sage const string, wobei kann
ich das hier einfach so machen, const string keqv gleich keqv, const string lulv gleich
lulv und jetzt kann ich sagen hier const string omega keq, kann ich jetzt sagen ok, omega keq
setzt sich zusammen aus keqv, der variablet keqv und lulv und wenn das jetzt alles constant
ist, dann macht er das wohl zur compile-zeit, dass er das hier draus zusammensetzt, also
ich glaube das ist auch neu, wir können es mal ausbringen, ich stelle massi sharp auf
9 zurück, ja guck das geht nicht, das ging in 9 noch nicht, ne das konnte der früher
nicht so, wobei ich mir nicht sehe, ich weiß gar nicht ob die einfache variante, die ging
wahrscheinlich auch nicht ne, doch die ging, also string-concat funktioniert, aber string-interpolation
das ging früher nicht, so das heißt ich kann jetzt ja noch was dazwischenschreiben, geht
nicht, dann stellen wir um auf si sharp 10 und zack, funktioniert das ganze, wo ist der
Unterschied, kommt auch aufs gleiche raus, naja ich spiele das jetzt nicht mehr, wenn
ich das jetzt von hand schreiben müsste, dann müsste ich jetzt sowas hier machen, so und
dann ist irgendwann auch mal gut mit concat und spätestens wenn du ein bisschen komplizierter
formatieren willst, ist das mit string-interpolation tatsächlich schöner, ja das ist jetzt möglich
in si sharp 10, in 9 ging das noch nicht, das schreibt microsoft hier natürlich nicht wunderbar,
gut zu wissen, ach hier ist es doch, concentrated strings, da ist es doch, ja genau, so was
gibt es dann, record types can seal to string, ging das vorher nicht, si sharp 10 you can
add sealed modifier when you override to string, ging das vorher nicht, ok anscheinend ging
das vorher nicht, muss ich ehrlich sagen ich habe glaube ich noch nicht einmal to string
gesealt, aber ok, das können wir ja mal ausbreiten, ok das betrifft jetzt nur record types, also
probieren wir das doch mal aus, record, was weiß ich, data, mir fällt jetzt nichts gescheites
ein, so string, name, so beste, was willst du mir vorschlagen, generate constructor,
ja wunderbar, ok und jetzt kann ich override to string machen und das kann ich jetzt sealen
oder was, aha und das ging vorher nicht oder was, ok wie oft das jetzt vorkommt, kein Schimmer,
wie viel macht, wenn du das erbst, also wenn du zum Beispiel sagst, data 2 erbt von data,
wobei ich weiß gar nicht ob records erben, ne, tja, das geht anscheinend, ja warum muss
man das dann seal machen, ah das ist ein contain parameter, das ist constructor, ok alles klar,
so und jetzt kann ich das nicht mehr überschreiben, guck jetzt kann ich kein to string mehr überschreiben
und wenn ich das sealed weg mache, dann kann ich, dann kann ich to string wieder überschreiben,
ich bin mir nicht ganz sicher wann ich das machen würde, ja, ja wieso ist eine gute
Frage, also mir fällt jetzt da kein sinnvolles Beispiel zu ein, wenn ich ehrlich bin, wenn
ich irgendwie sicherstellen will, dass in einem abgeleiteten Typ die Konsolenausgabe,
was weiß ich, keine Ahnung, nein, nein data 2 kann gar kein to string überschreiben,
das geht nicht, das einzige, das einzige was data 2 machen könnte ist, sag mal, das einzige
was data 2 machen könnte wäre new to string, aber das ist dumm, das bringt dir nämlich
überhaupt nichts oder auch nicht, ok dann geht das mit records zwar nicht, das könntest
du machen, das bringt dir aber auch nichts, weil du könntest einfach data 2 zu data cast
und dann hast du wieder das da, ja du kannst hier nichts überschreiben mit to string, anscheinend
ist das jetzt neu, ich hab das ehrlich gesagt bisher nicht verwendet und mir fällt da jetzt
auch wenig zu ein, wozu man das brauchen könnte, aber ja für den Nischenfall, dass man das
mal braucht ist es jetzt da, was genau sind records, ah da kann ich auch nochmal kurz
was zu sagen, also C sharp hat ja mittlerweile mehrere grundlegende Typen, also die häufigsten
sind ja eindeutig struct und class, class data oder struct data 2 oder jetzt records
data 3, was ist der Unterschied, da können wir übrigens auch gleich ein neues C sharp
10 Feature angucken, was ist der Unterschied, das hier ist eigentlich eine Klasse, also
im Prinzip ist es eigentlich sowas, nur das class quasi kannst du dir sparen, so und
was record macht ist folgendes, ich lösche das mal wieder, so wir machen jetzt einfach
mal records data, so und da gibt es string name, kann ich was anlegen, lass ich D1, name
ist gleich, so ich brauch jetzt den chat, der Mark ist das, so erster name und was hab
ich falsch, ach Quatsch, ja ich vergesse immer, dass man das unten drunter hinschreiben
muss hier, so und dann haben wir K1 und D2 ist new data, einfach max jetzt, so ich glaube
wir sind uns, also das will ich gar nicht, console, console, write line schreiben, so
ich glaube wir sind uns alle relativ einig, was da jetzt rauskommt, doch da beißt, komm
den machen wir auch noch hier, wenn er schon kein WIP kriegt, so wir sind uns eigentlich
relativ einig, was da jetzt rauskommt, wenn man das ausführt, das kann ja eigentlich
nur false sein, was da rauskommt, so jetzt ist aber die Sache die, wenn ich das so machen
würde, dann würde man jetzt erstmal spontan sagen, ja klar da muss true rauskommen, kommt
auch, kommt auch, aber und jetzt kommt der, und jetzt kommt der Gag, wenn ich jetzt anstatt
den record hier mal eine normale class draus mache, was kommt denn jetzt raus, jetzt kommt
false raus, ja also anscheinend, anscheinend macht hier der record doch der Unterschied,
was ich gerade mache, wir gucken uns neue C sharp Features an, so das liegt daran, weil
wenn du eine Klasse, wenn du die Instanz, zwei Instanzen von einer Klasse miteinander
vergleicht, dann vergleicht der quasi die Referenz da drauf, also man könnte quasi
sagen, zwar ganz abstrak, die Speicheradresse, wenn man es so will, also der guckt, ist das
auch wirklich, zeigt das auf das gleiche Objekt, und das ist ja hier nicht so, das hier ist
eine Instanz, und das hier ist eine Instanz, und dementsprechend ist das hier halt false,
so und jetzt gibt es records, records sind Klassen, die so ein paar Sachen intern überschrieben
haben, dass man sie besser verwenden kann für reine so Datencontainer, also es kommt
ja relativ easy vor, es kommt ja relativ oft vor, dass man einfach mal Klassen braucht,
die eigentlich nix machen, außer 5 Werte zu speichern, machen record bei DTO Sinn, ja
da macht das durchaus Sinn, so also man hat bei record zum Beispiel überschrieben, ich
bin mir übrigens jetzt gar nicht sicher, ob was die alles überschrieben haben, also
die haben zum Beispiel auf jeden Fall schon mal überschrieben, man kann das übrigens
alles von Hand machen, also record ist, wir können uns das jetzt nochmal bei sharplab angucken,
mal gucken was da unter der Haube rauskommt, hab ich mir noch nie angeguckt, wenn ich ehrlich
bin, schauen wir mal, was kommt unter der Haube bei dem record raus, MonkaS, what the fuck,
so viel ist das, also bei dem record kommt unter der Haube folgendes raus, er generated
eine class, die interface, das kann ich nicht aussprechen Leute, ach du große, ok das müssen
wir google jetzt mal, alles klar, hab ich jetzt schon wieder vergessen, zumindest, wenn man
sich das hier anguckt, unter der Haube ist das einfach hier compiler magic, also ein record
ist eigentlich eine klasse, der standard record ist eine klasse, die i implementiert und noch
ein paar andere dinge überschreibt, zum beispiel überschreibt das to string, das heißt ich
bekomme automatisch bei einem record, ich kann ja mal den record jetzt ausgeben, ich bekomme
automatisch bei einem record, wenn ich die auf die konsole ausgebe, eine sinnvolle, eine
sinnvolle ausgabe, was herr streamer zwischenfrage, wo wir jetzt wieder, also wenn ich die, wenn
ich die, die Leute sehe die das schreiben, dann glaub ichs euch schon wieder nicht, können
sie im vorschläge channel im discord bitte mal gucken, kann ichs machen, hier kann man
die korrekte aussprache hören, ach du große, das kann ich da nicht merken, vorschläge
channel soll ich gucken, alles klar, vorschläge, 30 milliarden emotes, das muss ich mir doch
jetzt nicht angucken, ich muss doch jetzt nicht, ich muss doch jetzt nicht drüber entscheiden,
was wir für weihnachts emotes rein machen, kann man das im discord mark as unread oder
sowas machen, da muss ich nachher gucken, jetzt machen wir erstmal streamen, doch ist
wichtig, also wenn ich das hier ausgebe als record, dann sieht man, guckt mal, ich bekomme
eine sinnvolle konsolenausgabe, wenn das hier eine klasse wäre, dann würde ich die standard
klassen ausgabe bekommen, nämlich das ist einfach data class, also das macht record
auch schon mal, die überschreiben to stream, dass ich sinnvolle datenausgabe bekomme, so
was machen sie sonst noch beim record, äh, dinger, ja, equal, not equal wird überschrieben,
das haben wir schon gesehen, der checkt jetzt, dass die einzelnen member übereinstimmen
und nicht, ob es die gleiche instanz ist, not equal, equal wird überschrieben, get hashed
wird überschrieben, equals wird überschrieben und das war's, also im prinzip ist record
nur so ein taktischer sugar dafür, dass man den kram nicht selbst implementieren muss
jedes mal, wenn man eben eine klasse will, die sich mehr wie werte verhält als referenzen.
Jetzt ist natürlich die große preisfrage, warum kann man nicht einfach einen struct
verwenden?
Das ist ja ähnlich, aber so einfach ist das ganze nicht, man sieht es hier nämlich zum
beispiel an der stelle schon, equals mag er nicht so gerne und bei structs kopierst du
ja immer die werte, das heißt jedes mal, wenn du so einen struct übergibst, kopierst
du das ding, das heißt es hat schon durchaus seinen sinn, das eben als referenz zu machen
und dementsprechend haben sie sich gedacht, wir führen dafür records ein, das ist aber
nix neues, das ist glaub auch schon csharp 8 oder so, aber es hat jemand gefragt, was
records sind, anscheinend ist jetzt das neue feature, dass man jetzt bei records to strings
bestilen kann oder sowas, es gibt jetzt, ich glaube auch mit csharp 9 oder csharp 10 ein
neues feature, es gibt jetzt records structs, müssen wir mal gucken, ob das da drin steht,
ja das ist auch neu, da muss ich ehrlich sagen, ich hab absolut noch keinen plassen schimmer,
wozu das gut ist, ich hab keinen schimmer, ich weiß, das ist neu, records structs, so,
record class ist standard, records struct ist jetzt neu, wahrscheinlich ist das im prinzip,
wird das dann immer noch per value übergeben, aber sie haben ein paar sachen für ein überschrieben,
vermute ich jetzt einfach mal, aber ansonsten, ich hab keine ahnung, wir können uns das
ganze ja mal angucken, was da hier generiert, ja internal structs, es ist ne ganze ecke
kürzer, ja dann ist das wohl wirklich so, wie ich gesagt hab, das ist, dass ich das
hier per value übergeben kann, aber trotzdem den vorteil hab von den ganzen überschriebenen
sachen, tja, und es ist, es macht, ja Patrick, du hast, es macht echt, finde ich, den unterschied
sehr verschwommen, ja, record ist eine klasse, dass sich klasse mehr wie ein struct verhält,
records struct ist dann ein struct, nein, das stimmt nicht, aber, ja, es ist nicht
gerade intuitiv, ich glaube ganz ehrlich, records struct werde ich so gut wie nie verwenden,
fällt irgendjemand ein gutes anwendungsbeispiel für records struct ein, mir nicht, nicht
zumindest so spontan nicht, tja, jetzt noch was dazu, wenn man jetzt sagt, man möchte
beispielsweise var d3 machen, also man möchte jetzt beispielsweise diese klasse, ups, vielleicht
soll ich, jetzt hab ich gelöchter bescheuert, machen wir noch mal irgendwie pop int, irgendwie
age oder sowas dabei, abstract records struct, würd nicht wundern, wenn das sogar funktioniert,
so hier, sagen wir mal irgendwie age 12, ups, müssen wir irgendwie gleich so, hier, und
der andere mark ist age 16, oh ne, der ist schon volljährig, der ist 19, jetzt stimmt
das ganze natürlich nicht mehr überein, aber es könnte jetzt ja sein, dass ich ein d3 anlegen
will mit grundlage d1, und dann müsste ich jetzt sagen, das verwende ich übrigens auch
relativ selten, ja, kann ich jetzt sagen d1, ne, wie war das nochmal with, ach scheiße,
das krieg ich nicht mehr hin, wie war die richtige sonntagsführer, Beispiel, aha, hier,
genau, dann kannst du jetzt nämlich sagen d2 with und dann übernimmt er alles, außer
das, was ich hier reinschreibe, also der nimmt jetzt die werte hier draus, äh die werte
hier draus und überschreibt nur das eine, weil man verwendet, also man verwendet records
eigentlich zum größten teil immutable, was natürlich jetzt komisch ist, sowas funktioniert,
aber gut, ja ihr merkt schon, ich verwende das nicht sonderlich oft, muss ich auch ehrlich
zugeben, sie schabt gleich durch java, ne überhaupt nicht, naja, so, das waren structs
und anscheinend gibt es jetzt records structs, das muss ich jetzt mal ausfinden, geht sowas,
probiere jetzt, abstract, record, struct, ne, ich glaube structs können nicht abstract
sein, aber, naja, gut, man muss man nicht zu lange damit aufhalten, das ist zumindest
jetzt neu, ja das video können wir gleich gucken, ne, das ist ein anderes, so, also
was gibt es jetzt auch so schönes neues, zeig mal her, what's new, das haben wir uns
jetzt angeschaut schon, records structs, improvement of structure types, das ist mir jetzt ehrlich
gesagt nicht so spannend, pattern, constant interpolated, strings haben wir schon, record,
seal to string haben wir auch ausgespielt, assignment and declaration in same constructor,
ja das habe ich auch schon gesehen, dass das funktioniert, wobei ich da auch sagen muss,
ja, ok, schön, dass das jetzt geht, das ging ja vorher auch schon, nur, dass du dich entscheiden
musstest, zwischen, machst du, quasi, deklaration und initialisierung in einem, für beide variablen,
oder, machst du es getrennt, du konntest es nicht mischen, dass du beispielsweise sagst,
ok, x deklariere ich hier oben, und weiße es dann hier unten nochmal zu und y mache ich
hier quasi alles in einem, ja, ok, gut, dass das jetzt funktioniert, ich muss ehrlich sagen,
keine ahnung, war gerade eine botwelle, das schwankt halt ein bisschen, ich weiß nicht,
ob da jetzt wirklich viele das so verwenden, endlich, excellent, ok, für eine schleife,
na ich weiß nicht, du brauchst ja hier rechts den typ, den du deconstructen kannst, also,
das ist, fällt irgendjemand, ein eingebauter typ ein, den man dekonstrucken kann, gibt
das irgendeinen, kann man das dekonstrucken, das ding, geht das, das haben die wahrscheinlich
dem Windows, in dem old Windows Formszeug bestimmt nicht mehr eingebaut, oder, lull,
nein, natürlich nicht, das heißt, ich müsste mir irgendeine Klasse anlegen, die das kann,
kein Schimmer, also, ich wüsste jetzt nicht so genau, wo und wie ich das brauchen würde,
aber vielleicht, ich habe ja noch 2-3 Videos zu neuen Features, vielleicht gibt es da
ein paar gute Beispiele zu, ah, tuppels, genau, da hast du recht, ja, das können wir ausbilden,
was will ich, da kann ich euch auch gleich noch was zeigen, also, ich glaube, so geht
das, na, create, 1, 2, 3, so, 1, 2, und jetzt können wir das zerlegen, ja, t, int, int,
so, also, das geht jetzt, jetzt ist x, jetzt ist x ist 1 und y ist 2, guckt, so, mal hier
cw, alter, das regt mich auf, dass das Console-Write-Line-Makro hier nicht funktioniert, also x, ne, das
mag der nicht, ja, das ist wohl irgendeine Rider-Bug, so, jetzt ist, ja, x ist 1 und
y ist 2, und anscheinend kann man jetzt sowas hier machen, weil, ich habe wirklich
keine Ahnung, wann ich das mal brauche, das ist revolutionär neu, na, ob es revolutionär
ist, weiß ich nicht, aber das ist neu, warum, weiß ich nicht so genau, aber ich kann euch
was anderes zeigen, was ich tatsächlich ziemlich praktisch finde, was so tuppel-Geschichten
angeht, das geht aber schon seit den letzten 32 Sharp-Versionen, aber, geht mal davon aus,
ihr habt irgendeine Klasse, ich blub, bester, bester Klassenarme, so, und das Ding hat irgendwie
eine Methode, was weiß ich, open, oder so, also, try open, so, was man ja ganz gerne
macht, ist, dass man sagt, ok, ich versuche jetzt irgendwas zu öffnen, und wenn es geht,
dann sage ich, hat funktioniert, und wenn es nicht geht, dann sage ich halt, hat nicht
funktioniert, so, natürlich ist es praktisch, wenn man, wenn es geht, gleich auch das zurückgibt,
was man geöffnet hat, so, und bisher macht man das in C Sharp eigentlich so, oder eigentlich
auch immer noch, dass man sagt hier zum Beispiel try open, und dann sowas hier wie out, result,
oder so, result, gleich lulw, so, und jetzt kann ich sagen, so, und jetzt kann ich sagen,
das geht übrigens mit fast allen eingebauten Sachen im.NET Framework, die eben Operationen
haben, die fehlschlagen können, zum Beispiel, wo das auch eingebaut ist, hier sowas wie
try pass, da kann ich zum Beispiel ein String versuchen, als int zu passen, und wenn das
geht, kommt halt hier zurück, ja, ging, ging nicht, und wenn es funktioniert hat, habe
ich hier halt auch gleich noch das result drin, das heißt, ich kann jetzt da sowas
hier machen, if int, 5, try pass, und dann sage ich result output, also sprich, nur wenn
das funktioniert hat, dann gehe in das if rein, so, das ist nicht neu, das ist ziemlich
klassisch, was man jetzt machen kann, ist mit tuppels, das ist halbwegs neu, es gibt
jetzt named tuppels, das ist ganz, ganz abgedrehtes Zeug, alter Jailor, was ist denn hier schon
wieder los jetzt, was ist hier, was, was, was ist hier wieder im Chat angesagt, so, es gibt
jetzt named tuppels, was man jetzt machen kann, ist folgendes, man könnte zum Beispiel sagen
bool result, und, ähm, äh, oder so, oder was weiß ich, ja, success, und, ähm, dann
kann man sagen string result, es ist, ich gebe zu, das ist jetzt vielleicht nicht das
schönste Beispiel dafür, aber das würde jetzt auch funktionieren, also man kann jetzt
durch named tuppel quasi zwei Werte zurückgeben von einer Methode, sieht ein bisschen hässlich
aus, aber das funktioniert, ich kann jetzt sagen, aber ich kann jetzt sagen hier try open,
und ich bekomme jetzt zwei Werte zurück, success oder result, also man kann jetzt zwei return
Werte aus einer Methode zurückgeben, ähm, das Beispiel ist nicht so gut, weil für diese
Variante ist das mit dem try immer noch besser, weil du kannst das direkt in den if füttern,
weil wie würdest du jetzt mit einem if machen, da müsstest du jetzt den Zwischenwert speichern,
müsstest sagen if b, success, das ist jetzt fast schon go, das ist jetzt, das ist jetzt,
das ist jetzt fast schon go, diese Geschichte hier, ähm, ja, oder aber du würdest sagen
deconstruct, success, result, das ist jetzt richtig go style, du würdest es jetzt so
schreiben, das ist die kürzeste Variante davon, wobei ich halt sagen muss, ganz ehrlich,
die andere finde ich sogar schöner, aber für Methoden, die mehr als einen Rückgabewert
brauchen, ist das echt nützlich, ist aber auch schon ein bisschen älter, ist jetzt
auch nix super, super neues, ich, ich finde, ich finde, ich finde, ich finde es trotzdem
so schöner, ja, also, weiß nicht, das, das finde ich irgendwie besser, als das andere,
ist ein bisschen Geschmackssache, aber nachdem das eher die traditionelle Variante ist und
in dem Fall sogar, finde ich, auch lesbarer ist, würde ich sagen, ich würde das hier
schon immer noch bevorzugen, deswegen, ich sage ja, das mit dem try-on war ein doofes
Beispiel, ja, ähm, mir fällt jetzt kein besseres ein, überall kommt ja auch nicht so oft vor,
dass du mehr als einen Rückgabewert brauchst, aber wenn du mehr als einen Rückgabewert
brauchst, dann ist das ganz sinnvoll, ja, ach ja, die, die, die richtig old school Variante
wäre dann try catch, genau, ja, das ist, das wäre dann, das wäre wirklich die richtige,
die richtige old school Variante, aber das machen wir jetzt nicht, es ist cool, ja, dass
das funktioniert, wozu ich das auch sehr praktisch finde, ist, hat irgendjemand geschrieben,
die benutzen das im Web-App-Umfeld relativ, relativ gerne, ja, also, wo ich das, wo ich
das, wo ich das cool finde, ist, für so Kleinigkeiten, beispielsweise für Dictionary, Dictionary-Einträge
oder so, also, zum Beispiel, man hat jetzt irgendwie einen Dictionary aus, ja, aus String
und, ähm, was weiß ich, noch einen String, ist, ist, ist egal, so, und, jetzt hast du
oftmals das Problem, wenn du multithreaded Sachen machst, ja, keine Ahnung, du, du startest
jetzt, ähm, fünf, fünf Jobs, ja, und du merkst dir halt die Job-ID, äh, in einem Dictionary
und irgendwie, dazu gehöre ich noch irgendwie in eine Klasse oder sowas, so, und jetzt hast
du das Problem, du willst das manchmal cancelen, jetzt müsstest du quasi so eine extra Klasse
machen dafür, du musst jetzt sowas irgendwie, Class, Job, ähm, und da brauchst du dann
hier irgendwie, was weiß ich, String, ID, und dann brauchst du irgendwie noch Cancellation-Token
oder sowas, und, und, und Zeug, ne, dann müsstest du quasi eine extra, extra Klasse für anlegen,
und für so Kleinscheiß, da finde ich, bietet sich das hier mit diesen Name-Tuppeln tatsächlich
sogar an, weil dann könnte man nämlich wirklich sowas hier machen, wie, ähm, Name, und dann
kannst du hier Cancellation-Token, Token sagen, so, und dann hast du das ohne eine extra Klasse
da drin gespeichert, du hast jetzt deine, du hast jetzt deine Background-Job-ID, irgendein
Name und das Token gespeichert, also immer, aber dafür finde ich, finde ich tatsächlich
ganz nützlich, so, so sieht's, so sieht's aus,
was macht, das finde ich übrigens nice, ja, das müssen, Leute, ich finde das eine richtig
gute Sache, ich übersehe ja öfters mal Dinger, ja, also wenn es irgendwelche interessanten
Sachen gibt, die nicht nur einer interessant findet und ich übersehe es, dann könnt,
dann dürft ihr, dürft ihr das hier spammen, das finde ich gut, was macht OUT wahr, ähm,
naja, gut, was soll ich sagen, ja, im Prinzip das, was ich schon gezeigt hab eben, also,
das ist ein OUT-Parameter, also du übergibst quasi eine Variable, wo dann diese Funktion
das Ergebnis reinschreibt, wir können das ja mal kurz decompilen und uns angucken, ich
glaube aber, das wird eklig aussehen, ja, nee, hier, passt doch, ne, OUT-INT-RESULT,
ersetzt quasi hier das RESULT in die Variable, die du ihm übergeben hast, das brauchst du,
weil es gibt halt manchmal den Fall, dass du mehr als eine Sache zurückgeben willst,
der klassische Fall ist halt, du willst gucken, ob was funktioniert hat und hast deswegen
als normalen RETURNWERT TRUE oder FALSE und dann, wenn es funktioniert hat, dann steht
halt hier drin der eigentliche Wert, das ist ein bisschen wie Poynter, ja, genau, im Prinzip,
im Prinzip schon, ja, das ist ein bisschen wie C++ Poynter übergeben und dann da drin
im Poynter was schreiben, ich mein, hey, das, das würde auch alles anders funktionieren,
ich könnte auch irgendwie hier eine Klasse übergeben per REFERENCE und in der Klasse
gibt es dann ein RESULT und dann würde ich es wieder reinschreiben und es würde alles
gehen, aber so ist halt die saubere Variante.
Die alten Videos, ich hab mir ja selbst in den letzten Tagen mal alte Videos vor mir
angeguckt und ich muss sagen, gerade die Videos auf der Xbox, das war schon richtig schlecht
gespielt, aber das lag halt einfach an der Xbox, das ist mir damals, das ist mir damals
nie aufgefallen, wie langsam und träge und behebe ich so Konsolen-Gameplay alles ist.
Echt, das ist echt Wahnsinn, ich hab damals die Leute immer ausgelacht vom PC, die gesagt
haben so nach dem Motto, guck mal, kannst du überhaupt nicht vergleichen.
Es ist halt schon, ehrlich gesagt finde ich Konsolen-Gameplay von damals eklig anzugucken.
Mittlerweile sieht es ein bisschen anders aus, man muss sagen, die meisten Warzone-Streamer
spielen ja PS4 oder PS5, gibt es jetzt schon für die PS5 und wie gut die mittlerweile
Controller-Aim-technisch sind, ist echt krass, also da erkennst du ja erst auf den zweiten
Blick, dass es mit dem Controller gespielt ist, meistens am restlichen Movement, allerdings
muss man auch sagen, Warzone hat halt auch auf der Konsole brutal dieses Ames ist, aber
trotzdem, also die sind halt deutlich besser als ich damals auf der Xbox war, aber PC Master
Race wissen wir, beste, ja, so, also jetzt haben wir uns das hier angeguckt, lass mal
schauen, was gibt es denn sonst noch für neue Features?
Wir brauchen einen Command für Streamer, hat eine, das ist eine gute Idee, das würde
ich irgendeinem Mod überlassen, der gerade da ist, falls einer da ist, wenn nicht können
wir uns das im Nachhinein noch überlegen.
Ach ja, Henggin, du hast recht, es gibt noch ein neues Feature, für alle die sich gedacht
haben, in C Sharp steckt zu wenig C++, man kann jetzt die gleiche Scheiße machen wie
in C++, es gibt jetzt nämlich eine neue Klasse Native Memory und da kann man jetzt so Sachen
drinne machen, das, ich weiß nicht genau wann man das machen will, aber das geht jetzt,
doch mir fällt tatsächlich was ein, wozu man das machen will, doch, doch, mir fällt
tatsächlich was ein, mir fällt tatsächlich was ein, allerdings nur der umgedrehte Fall,
zum Beispiel, zum Beispiel ja, man hat irgendeine Native Funktion, von der man irgendeinen
String zurückbekommt, den muss man ja von Hand freen und dafür, dafür stelle ich mir
das sinnvoll vor, hier irgendwas, Native Function, das ist ja nicht String, das ist Character
Pointer, Return und das würde ich dann freen, so, das, das könnte ich mir tatsächlich
vorstellen, dass das dafür sinnvoll ist, allerdings der umgedrehte Fall, wann ich hier
sowas allokaten will, tja, vielleicht wenn ich viel Interop mache mit Native Geschichten,
aber selbst da, aber selbst da, selbst da braucht man das eigentlich gar nicht mehr,
weil es gibt ja jetzt schon seit einer Weile Span, wo ich dann sagen kann, kann er Span
bite, dann kann ich sagen To, ne, wie ging das mit dem Pointer, ach ne, Moment, das ging
gar nicht To Pointer, das war nur der umgedrehte Fall, ach ne, das war der umgedrehte Fall,
wenn es für Pointer zu Managed Typ, ach ja, ne, ne, dann, dann habe ich es jetzt falsch
im Kopf gehabt, tja, ne, also, dann fällt mir jetzt da gar nicht wirklich viel dazu
ein, aber das funktioniert jetzt, man kann jetzt richtig den, den Oldschool Direct Memory
Gedöns machen hier, wann auch immer man das braucht, wann wahrscheinlich weiß man es
erst, wenn man es braucht, dass man es braucht, also mir fällt jetzt nichts Gescheites ein,
aber das ist jetzt auch neu, ja, tatsächlich, das ist ein neues Dotnet 6 Feature, ach ja
und das Gute ist, die haben das ja mit bisschen Brain gemacht, das ist quasi Infrastructure
Aware, also sprich das ruft unter Linux die richtigen Sachen auf und unter Windows die
richtigen Sachen auf und guckt glaube ich dann auch Speicherarchitektur mäßig für
irgendwie, dass es an bald Grenzen aligned wird und sowas, also das haben sie schon gescheit
gemacht, wann ich es benutzen würde, also außer jetzt mit diesem hier Free in a Native Character
Array oder so, ich wüsste es nicht, keine Ahnung, ja vielleicht das stimmt, weil man
vielleicht irgendwie High Performance Sachen haben will, der umgedrehte Fall wie gesagt
den kann man mit Span abdecken, also wenn ich jetzt zum Beispiel mal hier unsave, sagen
wir mal ich hätte hier irgendwie einen Character Array drinnen, ich muss erstmal unsave code
erlauben, also gehen wir mal davon aus, wie lege ich denn sowas überhaupt an, kann ich
sowas hier machen, null, furchtbar safe, furchtbar safe, ja, aber was ich machen kann mit Span
ist ja, ich kann quasi Native Memory zu Managed Memory machen, also wenn ich jetzt zum Beispiel
von irgendeiner C Funktion oder sonst wie ein Int Array zurück bekomme und möchte
das gescheit Managed verwalten, dann kann ich das zum Beispiel mit Span machen, ich
kann auch einen Array draus machen oder sowas, also das ist der umgedrehte Fall, vielleicht
braucht man das wirklich für, ich möchte dem was übergeben oder so, keine Ahnung,
das geht aber, das hier geht schon eine Weile, was ist Span, so eine, wie soll man sagen,
Collection für Speicher, wie kann man das am besten umschreiben, du hast Span und du
hast Memory, das sind beides so Low Level Dinger, ich würde sagen das ist so eine Art Collection
über rohen Arbeitsspeicher, so könnte man das glaube ich mit am besten beschreiben,
weil du kannst dann auch sowas machen wie Slice und sowas, du kannst dann quasi Arrays
bauen, du kannst dann quasi sagen Speicher 100 Bites in Folge und dann kannst du das
auch slicing und sowas, dass du sagst, hey ich mach jetzt einen Array aus den ersten
20 Elementen und einen Managed Array aus den nächsten 30 Elementen und dann hast du das
halt, ist das ein High Level Bite Array, ne, das ist für Sachen gedacht, die du beispielsweise
von unmanaged Sachen bekommst, dass du sie besser handeln kannst, man braucht das nicht
wirklich oft, es hat den Vorteil, du kannst dann, du kannst dann so Sachen machen wie
zum Beispiel, keine Ahnung, du bekommst jetzt irgendwie einen Struct oder so von irgendeinem
unmanaged Ding und dann Pointer, Pointer auf irgendeinem Arbeitsspeicherbereich, wo
irgendwie Daten drin liegen, da kannst du zum Beispiel, ok Slice, also 0, Bite 0 bis
Bite 5 ist eine Sache, dann ist es irgendwie keine Ahnung, dann überspring ich 2, Bite
8 bis Bite 20 ist eine andere Sache und keine Ahnung, das ist irgendwie B und das ist,
so und dann, also B gibt es schon, oder kannst du dann damit Dinge machen, du kannst dann
zum Beispiel ein richtiges echtes Managed Array draus machen, man kann das bestimmt
auch irgendwie dann als Int oder sonst was interpretieren oder sonst wie, das braucht
man erst, wenn man weiß, dass man es braucht, ist das wie ein Buffer in Javascript, aber
im Endeffekt schon, da gibt es ja auch immer noch Stack, Stackalloc gibt es ja auch noch,
für quasi Managed Memory anlegen, da bin ich mir jetzt aber gar nicht sicher, wie die
Syntax ist, so oder, ja, da kannst du direkt, kannst du auch Speicher anlegen lassen, Alter,
was auch immer, also wir reden hier wirklich über Sachen, die verwendest du irgendwie
alle, was weiß ich, alle Monate einmal oder so, das ist nichts, was ist irgendwie häufig,
was man irgendwie häufig braucht, ist bei dir heute Feiertag, nö, ich habe Montags
immer frei, ich habe mal Systemintegration gelernt, 2007 ist schon ein bisschen her,
hast du die neuen Timer bereits gezeigt, ne, die kenne ich noch gar nicht.
Wo gibt es neue Timer, da, von denen habe ich ja nichts gesehen, neue Timer, gibt es
neue Timer, ne, das kenne ich noch nicht, vielleicht kommen wir jetzt dahin, so, also
ich glaube, diese Sachen haben wir hier durch, also das waren eigentlich schon alle neuen
C Sharp 10 Features, das heißt, es hält sich deutlich in Grenzen, was es diesmal gibt,
aber wie man es von Microsoft kennt, zumindest was die Sharp angeht, das meiste sinnvolle
und angenehme, halt neue Sachen integriert.
Wir machen Weihnachtsmorz frühestens am ersten Advent, jetzt brauchen wir glaube ich noch
keine, auf dem Discord sind die schon, ja, auf dem Discord sind die das ganze Jahr über,
das waren wir am ersten Advent oder so, dann, die waren nie weg, genau, so, also jetzt gucken
wir uns das nächste an, 6, nein,.NET 6 Link Improvements, nicht 6 Link Improvements,.NET
6 Link Improvements, wie lange wird denn.NET noch weiterentwickelt?
Ach so meinst du das, gar nicht, also.NET, nein, Moment, ok, ok, langsam, die Microsoft
Benamung ist wieder absoluter Pains Champ, also die Microsoft Benamung ist wirklich,
also um es mal ganz kurz zu sagen,.NET gibt es in 3 verschiedenen Ausführungen, ich lasse
mal Mono und so weg, die Microsoft Geschichten, es gibt.NET Framework, das ist das alte,
das ist das was für Windows ausgeliefert wird, es gibt.NET Core, das ist das neue,
jetzt hat sich Microsoft gedacht, scheiß drauf, wir nennen.NET Core ab.NET 5 nur noch.NET
und lassen das Core weg, also.NET 4 gab es übrigens nicht, es gab.NET Framework 4.8,
also es gab.NET Framework 4.8, dann hat man.NET Core gemacht,.NET Core gab es dann als
1.0, 1.1, 2.2.1 und 3.0.3.1 oder sowas, so und nach.NET Core 3.1 hat man gesagt,
man macht jetzt kein.NET Core 4, sondern man macht jetzt.NET 5, also.NET 5 ist quasi
.NET Core 4 und.NET 6 ist quasi dann die Weiterentwicklung von.NET 5, was die Weiterentwicklung
von.NET Core 3.1 ist, mal gucken, ob es da schönes Bildchen für gibt, nein, hier,
ja, hier, das ist eine ganz gute, das ist eigentlich ein ganz gutes Bild, ne, das Bild
sagt auch, ne, die Bilder sind alle kacke, ja, hier, so war es hier, ja, das ist ganz
gut, also wie gesagt,.NET Core 5 heißt nicht.NET Core 5, sondern.NET 5, Microsoft hat
mal wieder Microsoft gemacht, dann hast du.NET Framework und.NET Standard, ja, das
sind aber auch zwei verschiedene Sachen,.NET Framework ist die alte.NET Runtime, also
die alte.NET Implementierung von Microsoft,.NET Standard ist quasi sowas abstraktes,
wo Microsoft definiert hat, jegliche.NET Runtime, egal, ob es Mono ist,.NET Framework,
.NET Core, was auch immer, die quasi alles in einem.NET Standard spezifizierten unterstützt,
kann dann Projekte laufen lassen, die eben diesen.NET Standard als Target haben, es
ist mega für den Arsch, es ist wir, also wirklich wir hoch 10, aber das einfachste, was man
sich merken kann ist, einfach alles vergessen, außer.NET 5 und.NET 6, also alles was nicht
.NET 5 oder.NET 6 ist, ist alt, muss man sich keine Gedanken drüber machen, außer
man hat irgendwelche Legacy Anwendungen oder so, also alles wo irgendwas hinter.NET steht,
außer eine Zahl ist, vergesst einfach, ach guck mal, ist das, also hat der ein Bild,
oh ja, das ist gut,.Knu Portable, ach du Scheiße, die haben sich da auch mal dran versucht
oder was, das war mir noch gar nicht bewusst, dass das auch mal, dass die das auch mal versucht
haben.
Tja, man sieht es gibt einige.NET Frameworks,.NET Runtimes, aber hier steht, aber hier
steht.NET 5 gar nicht drinnen, ah das ist auch von 2018, da gab es ja.NET 5 noch nicht,
ja diesen ganzen Shit hat Microsoft jetzt gesagt, haben wir keinen Bock mehr drauf und
hat gesagt wir machen.NET 5, oh Silverlight, fuck das habe ich ganz vergessen, Silverlight
gab es ja auch mal, weiß ich noch nicht, sobald es irgendeinen sinnvollen Grund gibt auf Windows
zu upgraden, sobald man, sobald man die Gruppierung hier unten ausschalten kann, also das ist
wirklich grausam, Silverlight, alter Silverlight, hör mal bloß auf, Microsoft hat es ja selbst
abgesägt nach irgendwie zwei Jahren oder so, okay, also wer heute noch Silverlight Anwendungen
betreuen muss, der tut mir echt leid, weil es gibt ja quasi gar keine Browser Plugins
mehr so richtig für Silverlight, da brauchst du auch einen alten Browser oder man verwendet
irgendeinen Desktop Runtime, wobei wenn man das auf dem Desktop laufen lässt, hätte man
das damals auch gleich in WPF machen können, weil Silverlight war ja quasi ein Subset von
WPF, ich versuche es gar nicht nachzuvollziehen, was da Microsoft treibt, okay wir gucken uns
jetzt Link Improvements an, also was gibt es jetzt Neues,.NET 6 Link Improvements, indexing
operations on IEnumerable, das klingt ja schon wieder richtig big brain, oh das ist cool,
das ist wirklich gut, dass das jetzt funktioniert, die unterstützen endlich Range Syntax für
ihre Link Geschichten, das ist cool, das müssen wir gleich mal ausprobieren, ich werde den
ganzen Krempel schon mal hier kurz auskommentieren, aber das ist wirklich cool, legen wir mal
irgendwie eine Liste an, view list aus int, list add 1, wobei haha wir können ja auch
den, nein, ich dachte der kann das in List Initializer irgendwie umbauen, also wir haben
eine Liste mit 6 Elementen drinnen und was man jetzt machen kann ist mit Link anscheinend
Range Syntax verwenden, das ist natürlich sehr nice, also kann ich jetzt zum Beispiel
sagen, was ist Take und dann was, vom ersten Element bis zum fünften Element oder so,
ja das ist cool, das finde ich sehr nice, dass das jetzt funktioniert, das ist tatsächlich
sehr nützlich, dass das jetzt funktioniert, also das ist die Range Syntax, die gibt es
ja schon eine Weile, Take gab es schon, aber die Range Syntax in Take gab es nicht, du
konntest sagen Take 5, was dann im Prinzip, was hat er jetzt für Schmerzen, ja Take 5,
was dann im Prinzip heißt wie nehme die ersten 5 Elemente, wenn ich jetzt aber sage Take
Range 1 bis 5 oder Take Range 2 bis 5, dann nimmt er das zweite Element bis zum fünften
Element, also das hier, das ist tatsächlich sehr nice, können wir mal ausprobieren,
können wir ausprobieren was da rauskommt, 3 für 5, ah ok das ist nicht inclusive, Anzeige
ist raus, das heißt alles ab dem zweiten dann, oder ist das mit Null Index, ah das ist Null
Index ok, dann ergibt das Sinn, Null 1 2, dann ergibt das Sinn, das ist quasi Skip
und dann Take, also Range Syntax ist eh eine coole Geschichte, zum Beispiel, wusstet ihr
das Range, das Range Syntax, kannste doch sagen, wir haben hier irgendwie String, ein
String aus blub, keqw, lulw, was auch immer, wenn ich das jetzt ausgeben will, kann ich
jetzt auch sagen, ich möchte nur ab dem fünften Element bis zum zehnten Element ausgeben
und dann kriege ich hier keqw raus, weil, ne, fünftes Element, 1 2 3 4 5 6 7 8 10, dann
bis dahin, also 1 1 2 Null 1 2 3 4 5 6 7 8 9 10, das hier ist zehntes Element, ja genau,
es geht auch umgedreht, das geht auch, ja das funktioniert auch, ich glaube aber vorletztes
ist in dem Fall dann sogar 2 von hinten mit dem Index, ne, tatsächlich 1, ach, keine Ahnung,
ja, also die Range Syntax gibt es schon eine Weile, die haben ein bisschen, finde ich ein
bisschen, ist so an die Paissen Range Syntax angelehnt, ist sehr praktisch und anscheinend
geht die jetzt auch in Link, geht auch 1, das ist eine gute Frage, du meinst, dass es
dann von hinten nach vorne geht, ne, das funktioniert nicht, geht das auch auf den Inhalt des Arrays
oder nur auf den Index, äh, es geht nur auf den Index, wie willst du das denn auf den
Inhalt machen, also was du machen könntest, also was funktionieren würde ist, das geht
mit Variante, klar, also was funktionieren würde ist folgendes, mal angenommen, du hast
jetzt hier einen String, äh, String Liste, oh, irgendwie keine Ahnung, ABC, EF, oh, reicht
jetzt schon als Beispiel, was du machen könntest, select zum Beispiel, kannst sagen select,
äh, jedes Element, äh, von der Liste und darauf könntest du jetzt sagen, zum Beispiel,
nimm den, was weiß ich, den, hier, das, das würde funktionieren, dann kannst du das auf
jedes Element anwenden, das, das funktioniert, und jetzt, hallo, na, das würde funktionieren,
also er nimmt jetzt quasi immer in dem Fall das zweite Element, also wir könnten auch
sagen, hier, machs mal bis 3, also bis zum dritten, was dann das Ende ist, jetzt hast
du quasi aus jedem Element quasi von Position 1 bis Position 3, wo dann halt hier fertig,
also 4, weil es ab Null anfängt, nimmt er das dann, ja, das funktioniert, so kannst
du das auch auf die Elemente anwenden, innen drinnen, du hast eine Liste mit IDs, du möchtest
alle IDs haben, die zwischen X und Y liegen, äh, das, das würdest du anders machen, also
wenn du eine Liste hast, was weiß ich, 1, 2, 3, 4, 5, 6, 7, 8, 9, so, und du willst jetzt
alle ID, was hab ich falsch gemacht, ach so, int, ähm, ich mach das hier mal wieder weg,
also wenn du jetzt alle IDs haben willst, die zwischen, keine Ahnung, die größer als
4 sind, das ist dann relativ einfach, da würdest du, da würdest du hier innen drinnen sagen,
keine Ahnung, E ist größer als 5, so, und jetzt kriegst du alles, was größer als 5
ist, was, Pool, hä, ah, haha, ja, was kann ich sagen, what the fuck, das würdest du so
machen, genau, ja, 6, 7, 8, 9, das ist der Chat, der Chat wusste es wieder, haben genug
Leute subscribt, IQ ist hoch genug, da können wir sowas abfangen, gut, ja, so, so würdest
du mal, du kannst natürlich umgedreht auch sagen, da können wir jetzt übrigens neues,
neues Feature fangen, du kannst natürlich auch umgedreht sagen, keine Ahnung, E größer
als 5 und E kleiner als 9, so, da würdest du jetzt quasi, da würdest du jetzt 6, 7,
8 rauskriegen, allerdings kann man das jetzt anders schreiben, und ich glaube, das schlägt
dir vielleicht Ryder sogar vor, du kannst jetzt sowas hier schreiben, E ist größer
als 5 und kleiner als 9, das ist die Chat 9 Feature glaube ich, ist im Prinzip das gleiche,
da kann man sich jetzt darüber streiten, was lesbarer ist, in dem Fall, ganz ehrlich,
in dem Fall macht es von der Länge her noch nicht mal einen großen Unterschied, aber
spätestens, wenn du noch ein paar Sachen hinten dran machst, dann, dann vielleicht
schon, ja, also, ich wette mit euch, Python Entwickler würden sagen, das hier ist viel
nicer und, ja, Oldschool C Sharp Leute oder C Leute würden sagen, das hier ist nicer,
oder der Haube macht es das gleiche, Patrick, das stimmt, ich habe, wir müssen aber noch
rausbekommen, was die äußeren Umstände sind, die das beeinflussen, also, ich könnte mir
vorstellen, es liegt an der Anwesenheit mancher Personen im Chat, ob der IQ hoch oder runter
geht, und je nachdem, wieviel die spammen, also, das ist übrigens jetzt, by the way,
absolut nichts C Sharp 10 typisches hier, also, Neues, das geht schon ewig, das geht
seit 10 Jahren oder so schon, aber so würde man das beispielsweise filtern, ach ja, und
noch was, weil anscheinend viele Leute so Link-Dinger nicht oft gesehen haben, was man
jetzt auch machen kann ist, man kann das nacheinander, also, man kann das chainen, also sprich, ich
kann jetzt erstmal alles filtern, was zwischen, wir machen jetzt mal, dass wenigstens C Sharp
10 im Titel stimmt, oder wenigstens 9, so, du kannst alles filtern, wo e, also, die Elemente
größer als 5, kleiner als 9 sind, und danach kannst du sagen, ok, jetzt habe ich die Elemente
gefiltert, und jetzt, nachdem ich die Elemente gefiltert habe, will ich damit irgendwas
machen, ja, zum Beispiel, plus 1 rechnen, und jetzt sieht man, jetzt ist es auf einmal
7 macht 9, was ja eigentlich keinen Sinn ergibt, weil es sollte eigentlich 6, 7 und 8 sein,
oder wir machen ja plus 10, dann ist es glaube ich besser zu erkennen, ja, 16, 17, 18 ist
es jetzt, ja, für Link gibt es mehrere Schreibweisen, das ist so diese, dass so diese Methoden-Chains
Schreibweise, es gibt auch noch die klassische SQL Style Schreibweise, also ich kann auch
sowas sagen, wobei ich die selten verwende, muss ich ehrlich sagen, du kannst sowas sagen,
wie hier keiner, Result gleich, from i in lists, where, where i größer 5 und i kleiner
9, ne, ne, ne, ach du Scheiße, wie geht das jetzt, was habe ich jetzt falsch vergessen,
unexpected token, warum, select i, ja, funktioniert doch, oder i, eigentlich müsste es select
i plus 10, also das ist das gleiche, das ist das gleiche, das hier und das hier, ne, also
hier das, ehrlich gesagt, ich verwende das so gut wie nie, ja, wenn du mehr als zwei Sequenzen
hast und die irgendwie miteinander verheiraten willst, dann ist es natürlich sinnvoll, weil
man kann das auch mehrfach, also man kann auch mehrere Sachen da drinnen machen, ne,
zum Beispiel Lista, das ist Lista 1, Lista 2, du kannst dann auch sagen, keine Ahnung,
from, wir nennen das mal i1, from i2 in List 2, da kannst du das miteinander dann irgendwie
joinen, also sprich, dass du dann sagst, hier, where, das, das und keine Ahnung, und i1
und gleich i2 oder so komische Dinger, aber ganz ehrlich, ich benutze es selten, ja, im
Zusammenhang mit Entity Framework oder Datenbankzeug ist es natürlich sehr nice, man sollte vielleicht
aber an der Stelle noch eins dazu sagen, oh, wir haben Massive Nightbot Commandos exquisite,
huge Big Brain Bots wieder, was muss man, was wollte ich jetzt sagen, genau, aber man muss,
man muss da eine Sache dazu sagen, das kann durchaus recht langsam sein, wenn man nicht
darauf aufpasst, weil Link durchläuft eigentlich so gut wie immer die komplette Liste bei fast
allem, das heißt, wenn man da nicht aufpasst und macht da ganz oft Links mit vielen verschachtelten
Dingern, dann ist das durchaus möglich, dass man das mit zwei Schleifen und einem if viel
schneller hinbekommt als mit einem schönen Link Query, muss man ein bisschen darauf achten,
ja, hat aber auch mit C Sharp 10 nichts zu tun bis auf das hier, das ist zumindest schon
C Sharp 9, gut, also da hätten wir uns das angeguckt, man kann jetzt Range Operators
verwenden in Link, das finde ich gut, ich hätte ehrlich gesagt gedacht, das ist schon
so, aber anscheinend nicht, das ist JetBrains, ja, das ist JetBrains Rider, so, was gibt
es dann sonst noch so, Counting Operations und ach ja, Counting ist auch so ein Ding,
wo man das wirklich ziemlich schnell, ziemlich langsam machen kann, zum Beispiel, das geht
mir mal voll auf den Sack, dass ich hier kein CW verwenden kann, wenn ich jetzt sowas
hier mache und danach sage ich List Count, den da muss ich nehmen, der läuft beides mal
die komplette Liste durch, also das ist so ein Fall, wo man halt darauf achten muss,
ob es das nicht unnütz langsam macht, hier läuft er einmal die komplette Liste durch
und zum zählen läuft er die komplette Liste durch, so und anscheinend gibt es da jetzt
irgendetwas Neues, wenn ich das jetzt richtig hier erkannt habe, Counting Operations on IEnumerable,
wenn man Count aufruft, dann läuft das komplette Ding durch, was für ein Ding, try get non-enumerated
Count, MonkaS, was hat Microsoft da wieder getrieben, List, try, ok, ok, das müssen
wir uns jetzt überlegen, was, was macht da, Attempts to determine just the number of elements
in a sequence without forcing, ah, ok, das ist natürlich clever, das ist, das ist natürlich
clever, also, wenn ich hiermit, wenn ich hiermit, ich wusste das übrigens, dass mein Beispiel
funktioniert, darf ich da keine Liste draus machen, so, wenn ich hiermit zähle, dann muss
der komplett einmal die Liste durchlaufen, um das zu zählen, also der nimmt dann erstes
Element, zweites Element, drittes, viertes, fünftes und sagt damit, ah, ok, es sind 9
Sachen drin, ok, und jetzt gibt es anscheinend die Variante, dass ich anstatt Punkt Count
sage, try get non-enumerated Counts und dann guckt er nach, ob es die Möglichkeit gibt,
bei der zugrundeliegenden Datenstruktur zu zählen bzw. zu gucken, wie viel drinne ist,
ohne dass ich alles durchlaufe, so verstehe ich das zumindest, so, und in dem Fall sollte
das allerdings funktionieren, Count ist 9, genau, in dem Fall funktioniert das, weil
die unterliegende Datenstruktur eine Liste ist, die anscheinend das hat, ach du kacke,
ok, das ist cool, dass das, aber von was ist das abhängig, ich vermute mal, wobei wenn
es Reflection wäre, dann wäre das ziemlich langsam, wobei das ja nur ein Aufruf ist,
das könnte durchaus schneller sein, wir trotzdem alles zählen, gucken wir doch mal, ich habe
keine Ahnung, wie das funktioniert, schauen wir mal, was ist Reflection, mit Reflection
kannst du quasi zur Laufzeit Metainformationen abfragen über den Zustand deines Programms,
über den Zustand, also das, was gerade, wie soll man das erklären, du kannst mit Reflection
zum Beispiel abfragen, keine Ahnung, Name der Klasse, welche Properties und Felder hat
diese Klasse, ist das eine Generic Klasse oder sowas in der Richtung, also du kannst
quasi so Metainformationen abrufen zur Laufzeit, wo du zum Beispiel, also ein gutes Beispiel
für Reflection ist, du hast ein Interface, das ist aber der Klassiker, Plugin, du hast
ein Plugin Interface, und es gibt jetzt paar Klassen, die dein Plugin Interface implementieren,
du möchtest jetzt allerdings, also du möchtest zum Start deines Programms alle Klassen, die
iPlugin implementieren, registrieren, und das ohne, dass du jede einzelne Klasse explizit
hinschreiben musst, so, und das kannst du über Reflection machen, frag mich jetzt aber
aus dem Kopf nicht, wie genau das geht, ich glaube, Assembly, Assembly, Get Types, Get
Types, und dann kannst du sagen, Where Type, Implement oder Interface oder so, Is Interface,
Get Interface, genau, und dann kannst du gucken, implementiert das, iPlugin, und dann kannst
du was mitmachen und sowas, das ist ganz, das ist ganz abgedrehter, ganz abgedrehter
Scheiß, ja, also das ist, das ist nur Only Big Brain Time, so, gucken wir uns mal an,
die Try Get Non-Enumerated, der Name von dem Ding ist schon wieder der Wahnsinn, Try Get
Non-Enumerated Count, was das eigentlich intern macht, so, ah, guck mal, der fragt, ist implementiert
die Quelle iCollection, dann sagt er, wir nehmen die Count Property und es ist true,
implementiert das iListProvider, was auch immer, Get Count Only If Cheap, ok, das ist
nochmal special interne Funktion, die irgendwie checkt, ob man das abfragen kann, ohne alles
zu durchlaufen, dann true, wenn es eine Collection ist, dann true, wenn nicht, dann, ja, im Prinzip
macht es das, das guckt, was der unterliegende Datentyp eben kann, so, wie es das jetzt genau
ist, Big Brain Time, das ist irgendwie Microsoft Implementierungsdetail, was weiß ich, was
die da genau treiben, zumindest wüsste ich jetzt pauschal nicht, wann ich das verwenden
würde, weil entweder brauche ich jetzt den Count und dann ist egal, ob das lange dauert
oder nicht, oder ich brauche ihn nicht, wenn ich ihn nicht brauche, dann brauche ich ihn
nicht, selten optional, nur wenn er schnell ist, hm, ist aber glaube ich für Performance-Optimierung
durchaus sinnvoll, dass man die Möglichkeit hat, auch wenn mir jetzt spontan nichts einfällt,
wozu man das braucht.
du probierst erst, ob non-enumerated geht, das ist tatsächlich eine super Idee,
das stimmt, da habe ich jetzt gar nicht dran gedacht, das ist natürlich sinnvoll, wenn
ich den Count brauche, dann kann ich gucken, gibt es das schnell, wenn ja, benutzt das
schnelle, wenn nicht, dann macht doch normalen Count, das ist natürlich sinnvoll, wobei
man da wahrscheinlich dann eine Extension-Method drumherum bauen kann, die das für mich macht,
quasi, counte immer, aber wenn es zwar schnelles gibt, dann nehm das schnelle, wobei jetzt
habe ich die Frage verstanden, warum Microsoft das nicht schon intern in Count macht, ist
die Frage, wahrscheinlich, vermute ich jetzt mal, weil es ein Trade-off ist, zwischen,
ich mache diese ganze Logik, um rauszubekommen, ob es schnell ist, zu ich fange einfach stumpf
an zu zählen, gibt es nicht sowas wie length, nein, gibt es nicht, das gibt es nur bei
manchen Typen, ja, also z.B. bei list hast du sowas, bei list hast du count, bei arrays
hast du, könnte sogar length sein, genau, ja, aber bei enumerable hast du das nicht,
da hast du nur das standardmäßig count und jetzt halt das neue, ja, bei kleinen Listen
kannst du das einfach counten und bei 3, 4 Elementen, oder wahrscheinlich bei 100 Elementen,
ist es wahrscheinlich trotzdem schneller, ja, ist situationsabhängig und man muss das
wahrscheinlich benchmarken, dass man dann für den jeweiligen Fall weiß, ob das taugt
oder nicht, ok, also, ist aber eine sinnvolle Funktion, muss man sagen, so, was gibt es
jetzt, der 3-way zip, was, die 3-wege zip extension method, was, jetzt wird es big brain
time, was, haben die da irgendwie ein Beispiel für, was, first, second, third, ah, ich kann
jetzt mehr als 2 Listen miteinander kombinieren, ach so, ja, ok, dann ist es doch relativ easy,
also bisher konnte ich nur sowas hier machen, ich nenne es mal list 1, list 2, list 3, ich
weiß nicht, ob der die Elemente auch, wahrscheinlich nicht bei einer normalen Liste, so, und jetzt
sage ich hier, for each, list 1, zip, list 2, oh, list 2, list 3, ah, alter, ok, ok,
das ist jetzt ja big brain, guck mal, jetzt kann ich das kombinieren, ok, das ist anscheinend
jetzt neu, ah, gibt es nicht mehr hier, ok, das ging anscheinend vorher nicht, vorher
ging anscheinend nur sowas hier, und jetzt kann man auch 3 machen, na gut, man könnte
es übrigens de-constructen auch gleich, dann könnte man direkt hier so drauf zugreifen,
ehrlich gesagt habe ich das noch nie vermisst, und ich verwende zip auch so gut wie nie,
also, tja, ok, gut dass es das gibt, nice, gg eats, aber ansonsten hält sich die für
mich sinnvolle Funktion jetzt da in Grenzen, chat jetzt übertreibt es mal nicht, muss
jetzt nicht versuchen jetzt jegliche Escape Sequenzen da rein zu stecken und zu gucken
ob es funktioniert, so, batch sequences, ok, was gibt es denn jetzt als Neues, chunk, oh,
das ist cool dass es das gibt, das habe ich mir schon öfters mal gewünscht, ok, wie
funktioniert das jetzt, das muss ich mal ausbringen, ok, for each, also was oftmals ein Problem
war, also was wirklich öfters mal vorgekommen ist, dass du jetzt gesagt hast, du hast hier
eine Liste, du möchtest aber nicht die Schleife so machen, dass du quasi einzeln drüber
läufst, sondern du möchtest es quasi immer in zweier Paare haben oder in dreier Paare
oder sowas, also du möchtest quasi pro Schleifendurchlauf 3 Stück davon, 3 Stück davon, 3 Stück
davon und sowas, und das ist anscheinend jetzt eingebaut, chunk, chunk size 3, ja gut, kann
jetzt schlecht ausgehen so, gibt es eine schöne Variante wie ich da draus, wie ich das jetzt
einfach printen lassen kann, kennt da irgendjemand, was, gibt es ein schönes Overload für to
string oder sowas, ich mein ich kann einfach sagen select, was range, wie range, so oder
sowas, string, ach stimmt ja, string join, stimmt, ja, das ist in dem Fall tatsächlich
sogar die beste Variante, was muss man zuerst machen, der separator oder separator, separator
und dann die, ja, guck jetzt kriege ich das immer in 3er Häppchen, das ist tatsächlich
schon ganz cool, so und jetzt ist natürlich die Frage, was macht der, wenn das nur hier
ein Element zu wenig hat, also ich würde jetzt erwarten, dass der das handeln kann und beim
letzten Durchlauf einfach nur zwei Elemente gibt, ja, macht er, das ist nicht schwer zu
bauen sowas, also es gibt zum Beispiel ein Projekt, das habe ich ab und zu mal ganz gerne
verwendet auf GitHub, die hatten solche Dinger schon eingebaut, die haben ganz viele, ganz
viele Sachen drin, für Link, aber umso besser ist es, dass es jetzt standardmäßig im Framework
drin ist, das finde ich cool, also ich muss ehrlich sagen, von allen Features, die ich
heute gesehen habe, finde ich das eigentlich noch am praktikabelsten, neben Namespaces
und Global Usings und sowas, ja, das ist tatsächlich sehr sinnvolles Ding, das finde ich gut, das
kann man wirklich gebrauchen, so was haben wir als nächstes, Batching Sequence hatten
wir gerade, Analyzer Checks, ne, das ist, By Operators, was, ah, MinBy, MaxBy, oh, das
ist natürlich cool, das ist cool, wenn das das ist, was ich denke, haben die da ein Beispiel
für, ne, kein Beispiel, also ich vermute mal, dass das sowas hier ist, wir machen jetzt
einfach mal, klasse, um das auszuprobieren, class, kegw, int, age, so, und ich habe jetzt
eine Liste mit ganz vielen kegw's drinne, new, kegw, wir machen noch einen Constructor,
dass man das, so, wir haben jetzt eine Klasse mit ganz vielen kegw's, also kegww's, jetzt
gucken wir mal, ob das, das ist, was ich mir so denke, so, 1, 2, 3, 4, 5, 5 mal kegw, kegwwwww,
ja, Ctor ist, ist Makro für Constructor, so, for each lists, so, und was, was kann ich
jetzt machen, by, distinct by, accept by, group by, der group by gab es schon die ganze Zeit,
MaxBy, MinBy, ok, das heißt, ich kann jetzt quasi angeben, auf welches Property der filtern
soll, also kann ich jetzt sowas machen wie, age, ne, ne, das funktioniert nicht, oder
funktioniert das doch, ach ne, da kommt direkt, da kommt direkt jetzt raus, also, da sollte
jetzt 5 rauskommen, da kann er keine Schleife drüber machen, ach ne, es kommt, es kommt,
es kommt nicht 5 raus, der nimmt das Element mit dem größten Property, das heißt, wenn
ich das jetzt hier ausgebe, mit age, dann sollte da rauskommen 5, ok, das ist tatsächlich
sehr praktisch, zum Beispiel, zum Beispiel für, für Unic, ja, also sprich, ich möchte
jetzt die Liste filtern, ich möchte jetzt die Liste filtern, dass nur noch ein kegw
Element mit jeweils dem gleichen age drinne ist, das ist wirklich sehr praktisch, also,
machen wir mal, ich habe jetzt hier keine Ahnung, ich habe jetzt hier 4 mal kegw drinne
mit dem age 1 und einmal kegw mit dem age 5 und jetzt sollte am Ende rauskommen, dass
nur noch 1 und 5 gibt, 1 und 5, das ist, das ist, das ist echt praktisch, das finde ich
gut, also du kannst es jetzt quasi filtern und alles rauswerfen lassen, was quasi den
gleichen Wert hat hier, aber da nimmt es nur das erste mit age 1, das ist eine gute
Frage, ob er das erste oder das letzte nimmt, das können wir mal ausprobieren, ich habe
keine Ahnung, weiß ich nicht, nicht age, sondern test, probieren wir das mal aus, keine Ahnung,
1, 2, 3, 4, 5, so, mal gucken, welches, welches der nimmt, ob es das erste oder das letzte
ist, das erste, es ist anscheinend das erste, ok, Moment, nicht age, t, lul, ja, es ist
das erste, es ist das erste, was er findet anscheinend, ok, nice, aber das ist tatsächlich
echt mal eine gute Funktion, die finde ich echt poggers, so, was haben wir ansonsten
noch, distinct by, accept by, intersect by, union by, min, max, ja, das ist praktisch,
das finde ich cool, pog, or default enhancement, sag mal, was ist das für eine bescheuerte
Seite, warum haben die keine Beispiele, warum haben die keine Beispiele,.net 6 or default,
or your first or your introduction, das gibt es ja schon eine Weile, man kann das default
erzählen, ja, das ist auch gut, da warte ich ja schon lange drauf, dass es das gibt,
also, mal angenommen, ich habe jetzt, ich habe jetzt, was ich, wir machen mal wieder
die Liste von eben, ja, wir machen mal hier wieder var, list, new, list und wir machen
wieder die int-liste, das ist glaube ich einfach besser damit was auszuprobieren, 1, 2, 3,
4, 5, 6, 7, 8, 9, so, hier, keqw kann auch wieder weg und das heißt list, nicht l, l,
l, l und gut, ist im Prinzip das gleiche Beispiel was sie auch haben, so, und was ich jetzt machen
kann, ich kann or the first, first or default, so, das heißt, ich kann jetzt filtern, ich
gebe mir das erste Element, wo das größer als 99 ist, das gibt es ja nicht, das gibt
es ja nicht, was er jetzt macht ist, er gibt irgendein default zurück für den jeweiligen
Typ. Das wäre in dem Fall 0. Also wenn es 99 nicht gibt, würde er mir jetzt 0 zurückgeben,
was wahrscheinlich nicht sonderlich sinnvoll ist. 0. So und jetzt kann ich anscheinend
einen Default Wert angeben, keine Ahnung, 5 oder so, einen Default Wert angeben, den
er nehmen soll, wenn er das erste nicht findet. Das ist tatsächlich praktisch. Das habe ich
mir wirklich schon ein paar Mal gewünscht. Wo das noch viel cooler ist, ist wenn es zum
Beispiel irgendwelche Klassen sind. Also bitte hier nicht. String. Wenn es zum Beispiel irgendwelche
Klassen sind und ich gucke jetzt hier irgendwie ContainsK was es nicht macht und ansonsten
halt DefaultCuteChat. So jetzt findet er das nicht und dann ist DefaultCuteChat. Das ist
wirklich praktisch. Das ist nice. Das finde ich cool. Stimmt, du hast recht, vorher hätte
man glaube ich sowas dann noch machen können. Stimmt, ja. Aber ich finde das andere deutlich
schöner. Nehmt er als Default Value auch Nullables? Ich gehe mal ganz stark davon aus, dass dein
Default Value exakt der gleiche Typ sein muss wie das hier vorne, sonst kann das ja nicht
funktionieren. Achso, du meinst, das müssen wir mal ausprobieren. Also das hier wird wahrscheinlich
nicht gehen. Ne. Ja anscheinend. Ja anscheinend ist er so schlau und lässt das zu. Fragezeichen,
Fragezeichen geht auch seit C-Shop 7. Wusste ich jetzt nicht, aber ich hatte im Hinterkopf,
dass es relativ neu ist, ja. So, was haben wir sonst noch schönes? Hab ich jetzt irgendwas
verpasst bei diesem anderen Artikel? Ja, Crap. Ok, also was haben wir sonst noch? Neue.NET
6 APs. Date Only and Time Only. Was? Warum nicht einfach Date Time und was weglassen?
Was? Eine Off Topic Frage. Eine Freundin hat ein Smartphone mit Philips und Alexa. Was
ist denn Philips? Gibt es ein Voice Assistant, der Philips heißt? Nein, ich weiß was du meinst.
Du meinst wahrscheinlich Philips Hue Lampen oder sowas. Steht ja auch da. Eine Lampe geht
aber nicht mit den Philips Dingern. Ist der Shelley 1 schwer zu implementieren? Den hast
du mal. Ne, beim Shelley 1 ist das Problem weniger die App oder irgendwie das Einrichten
oder sonst was. Du musst den Shelley 1 halt einbauen. Und dazu musst du die Sicherung
raus machen. Du musst wissen, wie du das anschließt und dich nicht selbst umbringen dabei. Die
Smartphone Geschichte ist gar nicht so das Problem. Ähm, ansonsten ist es nicht so schwierig
aber ich hab das auch nicht selbst gemacht. Ich weiß theoretisch wie es funktioniert.
Ich hab mir ein paar mal ein Diagramm angeguckt. Ich hab das auch vom Elektriker gemacht. Ich
hab das auch nicht selbst gemacht. Ich hab da keinen Bock drauf gehabt rumzuschrauben
und im Zweifelsfall dann irgendwas kaputt zu machen. Oder dass das irgendwann nicht
mehr sicher ist danach. Achso, die Shelley App. Also das Gute ist an den Shelley Dingern
ja, du kannst die App verwenden, du kannst über den Web API verwenden, du kannst die
MQTT verwenden, du kannst, meiner, mach das, der hat damit überhaupt kein Problem gehabt,
theoretisch auch sogar das Motor flashen oder in deine Heimautomatisierung integrieren.
Also Shellys haben alle möglichen Schnittstellen. Aber das ist kein Problem gewesen. Der kannte
die Dinger sogar. Also vorher schon. Die scheinen wohl recht beliebt zu sein. Du hast sicherlich
welche die sagen, das ist was auch immer nicht konform, machen das dann nicht, aber meiner
hatte damit keine Schmerzen. Der fand das sogar ganz gut, der hat sogar erzählt, dass
er selbst, also wir haben uns ein bisschen unterhalten was Richtung Smartphone, Smart Home und sowas
angeht, hat auch selbst erzählt, dass er da, also dass er es mit Technik nicht so wirklich
hat, was also irgendwie so Computerkram und Smart Home Sachen angeht und er hat wohl selbst
auch irgendwelche, frag mir nicht, wahrscheinlich auch Philips Hue oder irgendwie sowas gehabt.
Ja, aber so Home Assistant Geschichten sowas, ich hab ihm das Dashboard auch gezeigt, das
ist nicht so seine Welt, aber der kannte das. Es gibt einen neuen Battlefield Trailer, oh
ja, poste mal, den gucken wir uns jetzt an. Ich scroll mal kurz hier durch, was gibt es
denn sonst noch, was gibt es denn hier noch für spannende Sachen, also es gibt jetzt
Date Only and Time Only, Official PC Trailer RTX On. Okay Leute, wir gucken mal ganz schnell
den Battlefield Trailer. Ach Quatsch, das ist doch der normale Battlefield Trailer oder?
Nur mit RTX jetzt, das ist eher Nvidia Werbung. Warum hat es so schlechte Bewertung? I like
how, wahrscheinlich weil es ruckelt. Das ist doch nichts Neues oder? Das kennen wir
schon, das kennen wir auch schon, das kennen wir auch schon. Die Musik ist richtig ätzend.
Dabei hat Battlefield so ein schönes Main Theme, das kennen wir auch schon, keine Ahnung.
Wo genau ist da jetzt RTX? Ich erkenne ehrlich gesagt keinen Unterschied zu mit RTX oder
ohne RTX. Wo ist da jetzt der Unterschied? Okay, die Straße vielleicht jetzt. Es ruckelt,
Alter, es ruckelt, es ruckelt. Merkt ihr die Slowdowns auch? Alter, das ruckelt, fuck.
Wenn das schon im Trailer ruckelt. Das ist aber doch nichts Neues. Okay, du hast jetzt
hier so ein bisschen Sonnenlicht. Hier auf dem Boden? Weiß ich, ob das hier RTX ist,
auf dem Boden? Warum ist das so ein Like Dislike? Naja, wahrscheinlich weil man jetzt da nicht
erkennt, was jetzt daran so geil sein soll. Wo ist da RTX? Die Luft ist RTX on, das wird
sein. Das ist bestimmt, ja, das ist da, wo es ruckelt hat. Guck mal, Alter, das ruckelt
richtig hart. Huge Slowdowns. Naja, was auch immer. Ich glaube, der RTX Trailer, das ist
irgendwas, was sie vertraglich vereinbart haben mit Nvidia. Das mussten sie machen.
Das war jetzt wirklich der herausragende Trailer. Aber jetzt mal ernsthaft, das neue Battlefield,
das startet in elf Tagen, zwölf Tagen, je nachdem, wie man das jetzt zählt. Wo ist denn
die ganze Werbung? Die müssen jetzt ran. Du siehst, du hast ab und zu mal ein neues Video
gemacht. Es kann halt sein, dass es in zwölf Tagen rauskommt und eigentlich nirgendwo großartig
was ist. Die müssten doch jetzt eigentlich mal richtig krass die Werbetrommel rühren.
Oder sehe ich das falsch? Oder wird es nochmal verschoben? Snoop Dogg Spielevent, genau,
da wird er im Kram links und rechts laufen kann für zwei Stunden und sonst nichts machen.
Die müssen mal wieder Vogue Trailer raus haben. Ich glaube, darauf haben die nach Battlefield
5 keinen Bock mehr. Es hätte sich bei Battlefield 5 niemand darüber beschwert, über diesen
Trailer. Hätten die nicht zwei Stunden lang vorher erzählt, wie authentisch und atmosphärisch
und nah an der Realität sie sind, und dann kommt die Frau mit der Kralle ran. Das war
halt selbstown Deluxe. Es hätte keiner damit Probleme gehabt. Hätten sie nicht im Vorfeld
quasi das Gegenteil erzählt. Ja, und den Leuten danach zu erzählen, wenn es euch nicht
gefällt, dann kauft es nicht, da muss man sich... Oder wenn es die Leute dann auch machen.
Die haben einfach gesagt, leck mich, ich kaufe es wirklich nicht. Also wir gucken jetzt
nochmal kurz hier das ganze durch. Also was gibt es denn sonst noch? Date only und time
only gibt es jetzt. Until now, date and time span were only.net base class. Ja, warum gibt
es date only und time only? But why? Date only, new date only. Also sprich, das ist
die Portion von einem date time, ohne time und... Hä? Aber warum? Ich kann doch einfach
auch ein date time nehmen und das Datum auf 1.1.1970 stehen lassen oder so. Entity Framework,
das kann natürlich sein. Ich mein, er hat nicht unrecht, ein bisschen dumm ist es schon,
das mit date time zu machen. Also vom Handling her, also ich beschwer mich da nicht, das
gibt es schon, durchaus in Ordnung. Date only, time only. Gut, das ist im Prinzip genau
wie man sich vorstellt. Time zone conversion improvement, ja das ist auch dringend notwendig.
Okay. Also ehrlich, ich glaube, also Kalender, also Datums und Zeithandling ist glaube ich
eines der abgefucktesten Sachen überhaupt. Das ist so was, was auf den ersten Blick
einfach aussieht, aber auf den zweiten und dritten und fünften und neunundneunzigsten
Blick einfach unglaublich komplex ist. Das will man gar nicht machen. So, was gibt es
sonst? New Collection, Priority Queue. Ah, jetzt habe ich es kapiert. Okay, man hat quasi
eine Warteschlange und kann den Elementen, die man dort reinsteckt, Prioritätsnummern
geben und wenn man die dann aus der Warteschlange wieder rausholt, wird das zuerst das Element
mit der höchsten oder der niedrigsten, kann ich mit der niedrigsten Priorität wieder
rausgeholt oder also, ja, okay. Ja, nice. Also mir fällt jetzt auch spontan in letzter
Zeit nichts ein, wozu ich das gebraucht hätte, aber für Job Cues oder so stelle ich mir
das durchaus oder für irgendwelche Event Cues oder sowas stelle ich mir das durchaus
sinnvoll vor. Stellt euch mal vor, zum Beispiel, man hat irgendeine Warteschlange von der
Webanwendung für Events. So, Events können beispielsweise sein, neuer User hat sich angemeldet
oder ich muss den täglichen Newsletter verschicken oder ich muss täglich den Datenbankindex
neu auffangen, irgendwie sowas. Und dann ist natürlich klar, dass ein neuer User mehr Priorität
in der Abarbeitung haben sollte als jetzt vielleicht täglich einen Datenbankindex machen.
Könnte ich mir vorstellen, dass es da schon ganz sinnig ist. Trotzdem muss ich sagen,
ich glaube von, also mir fällt jetzt in letzter Zeit nichts ein, wo ich das jetzt mal, wo
ich jetzt dachte, ja, das wäre jetzt cool gewesen, aber das kann man definitiv brauchen.
Das ist ja immer gut, wenn sie sowas hinzufügen. Das sind Dinge, die sind sinnvoll, wenn man
das denn halt braucht. Nicht so das, was der C++-Standard immer einführt. Als wenig sinnvoll
davon. Ja, das ist doch schon mal nicht schlecht. Das kann man sich doch geben. So, was haben
wir jetzt? Link works on index and ranges. Das wissen wir schon. Das wissen wir auch
schon. Das wissen wir auch schon. Das wissen wir auch schon. Das wissen wir auch schon.
Das wissen wir auch schon. List stack queue ensure capacity. Was? Die sind doch eh dynamisch.
Ah, okay. Du kannst jetzt bei Listen, Stacks und Warteschlangen quasi direkt angeben,
wie groß die starten sollen oder so. Okay, ja, ist wahrscheinlich Performanstechnik
nicht schlecht. Gzbruder2, danke für den Sub. Choose one name. Naja, gute Frage. Ich habe
ehrlich gesagt, glaube ich nie den HTTP-Listener verwendet. TCP-Listener habe ich schon öfters
verwendet, weil für HTTP-Listener, also wenn du Web-Request machen willst, dann kann man
jetzt ja mittlerweile Minimal-APs machen, die viel cooler sind. Minimal-APs könnte man
sich tatsächlich nochmal angucken. Wobei, das haben wir uns schon mal angeguckt. Du
kannst jetzt eine Web-Anwendung mit drei Zeilen Code starten. Da werden sogar die ganzen Python-Leute
neidisch. Wobei es da ungefähr genauso schnell geht. Was new weight-async-Methods? Task weight
async. Was? Warum erwarte ich den nicht einfach? Wait. Hä? Wo? Hä? Ah, da kann ich ein Timeout
angeben. Ach, jetzt verstehe ich das. Ah, da kann ich ein Timeout angeben. Also entweder
ist er fertig in der Zeit, er wird gecancelt oder es tritt ein Timeout auf. Ok, dann verstehe
ich, dann ist es doch sinnvoll. Weil ich wollte gerade sagen, Task kannst du einfach awaiten
und gut ist. Conclusion. Wer ist da nicht drinne? Otte. Lister neuer Public Types. Ist klar.
Ich gucke mir natürlich jetzt jeden Public Type an und sage, ah, guck mal hier. Quick
Connection. Was ist denn eigentlich eine Quick Connection? Da hat sich was getan. Ja, ganz
bestimmt. Ganz bestimmt. Genau so werde ich es machen, Microsoft. Ist klar. Ja, Quick
Muffs gibt es jetzt. What? Windows Forms? Die haben wirklich was an Windows Forms gemacht?
Ach, Quick ist das neue Titel. Stimmt, das stimmt. Hab ich gar nicht dran gedacht. Ja,
jetzt weiß ich wieder, was es ist. Ja, weiß ich auch von Google. Die haben tatsächlich
was an Windows Forms gemacht. Was gibt es hier? Threading Task Parallel. Ah, es gibt
jetzt Parallel for each Async. Das ist cool. Parallel. Parallel. Ja. Hallo, Import, please.
For each Async. Das ist tatsächlich nützlich. Also wer das nicht kennt, das kann ich euch
mal zeigen, das ist schon lange drin, aber nicht in der Async Variante. Wer das nicht
kennt, wir machen hier nochmal unsere Liste. Unsere Liste aus ints. Int, eins, zwei, drei,
vier, fünf, sechs, sieben, acht, neun, zehn, was auch immer, neun, so. Wenn man jetzt keinen
Bock hat, irgendwie händisch Multithreading zu machen und einfach sich denkt, ey, komm,
vielleicht kann ich noch ein bisschen Performance mit mehr CPU Kern rausholen, kann man einfach
sagen Parallel zum Beispiel for each und da gibt man dann an, ich weiß gar nicht mehr
genau wie die Syntax ist. Da gibt man glaube ich die Liste an und dann was er mit jedem
Element machen soll. Und jetzt macht er das in Parallel. Also jetzt macht er keine Schleife
einfach nur nacheinander, sondern jetzt macht, das sieht man es auch, wenn ich es ausführe.
Guckt, jetzt macht er das Parallel. Deswegen kommt es jetzt auch nicht nacheinander raus,
sondern hier so randomized, die Elemente. Und anscheinend gibt es das jetzt auch for
each Async, was tatsächlich ganz nützlich, wie funktioniert das jetzt? Ah, man bekommt
da mehrere Sachen. Okay, man bekommt das Int und ein Cancellation Token, ob das abgeht
und das heißt ich kann jetzt auch sowas da drin machen. Aber das konnte ich das konnte
ich vorher auch schon. Aber ich kann jetzt zum Beispiel Async Operations machen, die
ich abbrechen kann und sowas. Okay, ja, ich glaube, das werde ich nie verwenden. Dumme
Frage, aber wieso gibt es dann keine Duplikate? Warum soll es Duplikate geben? Guck mal, der
macht ja, der splittet sich das hier einfach auf und macht ein Thread quasi pro oder ein
Task pro Element. Der macht einen Task pro Element, der macht ja immer noch eins pro
Element, aber die Ausgabe ist halt parallelisiert. Also quasi das, was parallelisiert wird, ist
sowas hier. Der macht jetzt nicht zehnmal die Liste oder so. Wo das sinnvoll ist, ist
sowas, was ich, wenn ich jetzt hier zehn verschiedene Webseiten abfragen will oder so, dann kann
ich das ja parallel machen. Webseiten abfragen ist ja jetzt im größten Teil warten auf irgendwelche
IOR-Geschichten. Okay, aber dass es das jetzt parallel gibt mit for each Async, okay, ja,
okay, warum nicht? Oh, Queryable gibt es auch neues Zeug. Die haben wirklich in Windows
Forms Gedöns gemacht, das hätte ich nicht gedacht. Das mit Chunks finde ich wirklich
nice. Ja, das ist eines der sinnvollsten Änderungen, die ich da diesmal jetzt heute gesehen habe
bei Interop gibt es neues Zeug. Safe Buffer, Alter, irgendwelches Low-Level-Shit. Drawing,
Pathfix. Die haben wirklich in Windows Forms Zeug gemacht, das hätte ich nicht gedacht.
Low-Level-Sockets. Alles klar. Ja, gut, man muss sagen, es ist nicht viel bahnbrechendes,
aber die meisten der Änderungen sind praktisch. Also, ich meine, es versetzt mich jetzt nicht
komplett in Verzückung, da ich sage, boah, ja, noch nie da gewesen, aber es ist logische
konsequente Weiterentwicklung. Das finde ich gut, wie das Microsoft handelt mit C Sharp
und.NET. WPF ist ja bereits so makellos gewesen, oh ja. Ich muss mich mal outen, Leute. Ich
habe WPF immer ignoriert. Ich habe ein riesen fettes Buch WPF hier. Doch, also es hat irgendwas
so, dass ich 1500 sein, also das ist mega fett. Ich weiß gar nicht, wo es ist. Kann
das hier mal irgendwo liegen? Also, das ist wirklich ein richtig ultra fettes Buch und
ich habe auch angefangen, mal WPF zu lernen und ich bin mit WPF einfach nie warm geworden.
Ich glaube, was mich an WPF immer gestört hat, ist, dass das so extrem boilerplate heavy
war. Also, dass du bei WPF quasi für jeden Furz 20 Zeilen schreiben musstest oder so.
Mittlerweile mag es vielleicht nicht mehr so sein, aber das ging mir bei WPF echt auf
den Keks. Und was mich bei WPF auch genervt hat, ist, dass da so komische Meinungen im
Umlauf waren, wie man das jetzt machen muss. So nach dem Motto, ja, Code Behind Datei ist
böse und sowas. Ja, ich verstehe das ja ab einer gewissen Größe, mag das alles sinnvoll
sein, aber für irgendwie eine Anwendung mit drei Buttons oder so ist Code Behind doch
vollkommen okay. Da brauche ich irgendwie keine View Models und sonst was. Also, ich
hatte immer den Eindruck, WPF ist einfach der bloat in Person. Doch, der Kugelfang,
also ich sehe, ich mag WPF nicht wirklich. Was benutzt man sonst anscheinendst WPF? Tja,
das ist das alte Thema Cross-Platform GUIs oder Windows, also fahr mal mit Windows-Only-GUIs
an. Microsoft hat es einfach verkackt die letzten 15 Jahre. WPF ist ja von 2005 oder so, WPF
ist ja auch schon alt. Microsoft hat es verkackt. Microsoft dachte sich irgendwann mal sie machen
JavaScript und danach dachten sie sich, sie machen UWP. Und alles davon war nicht so wirklich
für die Realität gemacht. Das war so die typische Microsoft-Logik. Wenn man nur lang
genug damit rumeiern benutzt es die Leute irgendwann schon. Die haben es verkackt. Jetzt
so langsam aber sicher fangen sie an mit WinUI 3, was ja demnächst endlich auch native Apps
können soll. Also, dass man sprich ganz normale unpackaged Win32 Apps machen kann. Also, das
was eigentlich die ganze Welt machen will, wenn sie was für Windows machen, dass man
das damit jetzt machen kann, quasi mit der ehemaligen UWP GUI-Technologie, aber ohne
Codesigning-Zertifikate, ohne Store und ohne alles. Jetzt, da haben sie 15 Jahre für gebraucht.
Microsoft hat es auch im Desktop verschissen. Es gab nichts unter Windows GUI-mäßig. Du
hast Windows Forms gemacht oder du hast WPF gemacht. Beides hoffnungslos outdated. Ich
finde eines der besten Tests, ob ein GUI-Framework outdated ist oder nicht ist, ob farbige Emojis
funktionieren. Klar werden jetzt viele sagen, farbige Emojis, sowas braucht man nicht, aber
es ist ein guter Test, wie aktuell die Technologie unter dem UI-Framework ist. Alles, was keine
farbigen Emojis kann, ist alt. UWP kann es nicht und Windows Forms kann es natürlich
erst recht nicht. UWP kann es, WPF kann es nicht. Also was mich an UWP nervt, ist, dass
du ein Codesigning-Zertifikat brauchst, was ich nicht einsehe. Wozu soll ich mir ein Codesigning-Zertifikat
kaufen? Und dass du lange Zeit Probleme hattest, sowas zu machen, wie einfache Screenshots.
Also, normaler API-Zugriff war ja da nicht. So, das heißt, da gab es nichts. Es gibt
paar Cross-Plattform-GUI-Frameworks, sowas wie Qt zum Beispiel, also QT, was noch eines
der besseren ist. Leider zum größten Teil C++, außer man gibt sich die Python-Bindings,
aber selbst da kommt man wahrscheinlich mit ein bisschen, weil man Customs-Sachen machen
will, schlecht rum und rum und Qt dann aber auch nur QML, also nicht irgendwie Forms,
ich weiß gar nicht, wie es bei denen heißt, Widgets, QWidgets heißt das glaube ich, das
klassische. Das ist auch outdated. Also Qt 5 mit QML ist noch ganz nice. Tja, und dann
bleibt ja eigentlich nur noch sowas wie Electron übrig. Also, so leid es mir tut. Microsoft
hat es mit, Microsoft ist mit dafür verantwortlich. Ja, Flutter und Dart kommt vielleicht dann
noch, wenn das mal richtig auf dem Desktop ordentlich läuft mit allem, was man braucht.
Da setze ich ja auch so ein bisschen meine Hoffnung rein, dass vielleicht Flutter und
Dart sich auf dem Desktop ähnlich etabliert, wie das auf Mobile-Plattformen schon ist,
aber aktuell Desktop-Anwendungen, entweder man macht komplett eine Web-Anwendung, wenn
das möglich ist, was ja bei den meisten Sachen geht, oder man macht eine Electron-Anwendung
oder eine Qt-Anwendung, aber so wirklich viele Alternativen gibt es sonst nicht. Selbst
wenn man sagt, man möchte Windows only machen, was willst du machen? UWP sagt, WPF Windows
Forms ist outdated. Du kannst höchstens noch ein, zwei Jahre warten, bis WinUI 3 endlich
mal ordentlich funktioniert und für alles verfügbar ist. Dann hat man wenigstens wieder
was gescheites, aber Microsoft hat einfach 15 Jahre lang kein gescheites GUI-Framework
für ihre eigene Plattform hinbekommen. Das ist schon echt mies. Da muss man sagen, das
macht Apple besser. Linux, nicht wirklich. Linux hat dann 50 verschiedene Dinger wieder,
aber gut Gnome könnte man vielleicht sagen, wobei Gnome auch abfuck ist. Ich habe mal
ein bisschen GTK-Zeug gebastelt, das war auch abartig. Du hast im Prinzip nur Qt und dann
kannst du es auch gleich cross-Plattform machen, aber selbst Qt hat so seine Dank C++ so seine
Tücken. Es bleibt cross-Plattform eigentlich nur Elektron, wenn man es aus Entwickler-Sicht
so sieht, wenn man es möglichst einfach entwickelt, wenn man es irgendwie händelbar haben will.
Es bleibt dir eigentlich aktuell bloß Elektron übrig, was echt bitter ist, dass das beste
cross-Plattform-Desktop-GUI-Framework irgendein JavaScript-Browser Node.js-Verschnitt ist.
Das, naja. Ja, da kommst du an Elektronik wirklich vorbei. Oder du machst halt gleich
eine Web-Anwendung, was ja glücklicherweise für den meisten, also für den meisten Kram
ja geht. Da kannst du auch gleich noch eine WPA draus machen, dass du es auf dem Smartphone
verwenden kannst, ohne dass du jetzt irgendwie das Packagen musst im App-Store packen, außer
du willst es auf iOS laufen lassen. Auf iOS kannst du ja es mit PWAs vergessen, zumindest
wenn du so Sachen wie Notifications verwenden willst und sowas. Ja. Nee, aber GUI-Frameworks
ist echt richtig verkackt. Es gibt, also realistisch betrachtet, so allgemein verwenden und jeder
benutzt, es gibt eigentlich, realistisch gesehen, nur Elektron aktuell. Qt hat den C++-Shit
dabei. Und sei dann, man kommt mit allem aus, was drin ist, dann gibt es noch die Python-Variante,
wenn du damit zufrieden bist. Aber es ist schon echt verkackt. Und da ist Microsoft
mit an Schuld, weil sie 15 Jahre nichts auf die Reihe gekriegt haben auf ihrem eigenen
Desktop. Ja, Apple hat keinen Bock auf PWAs. Es fehlt unter iOS eigentlich nur noch Web-Notifications
für PWAs. Dann wäre es zumindest nutzbar. Du hast zwar immer noch ein paar Sachen, die
nicht ordentlich funktionieren, was zum größten Teil aber an verkackten Safari liegt, aber
wenn du Web-Notifications hättest, dann könntest du zumindest sagen, du kannst mehr oder weniger
mit PWAs das Wichtigste machen auf iOS. Aber kann man, wenn man eine Elektron-Anwendung
baut, nicht auch gleich eine Web-Anwendung bauen? Das ist tatsächlich der Vorteil. Du
kannst zum Beispiel so machen wie Discord, du machst eine Web-Anwendung, aber wenn du
bessere Native-Plattform-Integration brauchst, was ich, Sound-Lautstärke kontrollieren oder
sonstige Geschichten, dann machst du es wie Discord. Dann bringst du ein Desktop-Klient
raus, wo du im Prinzip deine Web-Anwendung in ein eigenes Fenster packst. Wobei Discord
noch deutlich mehr macht. Discord hat ja noch Native Extensions in wahrscheinlich C oder
C++ für Discord, die bei ihrem Client mitkommen, die sich dann irgendwie Node.js da reinhucken
oder so. Wie gesagt, Discord ist Elektron, allerdings mit ein paar Zusatzdingern. Deswegen
läuft es ja auch im Browser, aber halt manche Sachen gehen nicht im Browser. Also man muss
sagen, das ist der eigentliche Weg, anders kann man das heutzutage gar nicht machen.
Und es ist halt mit Microsoft schuld, dass es da 15 Jahre verkackt wurde auf dem Desktop.
Es bleibt den Leuten ja gar nichts anderes übrig, als einfach nur noch Gigabyte RAM-fressende
Browser überall zu verschiffen für einfachste Dinge. Ja gut, Leute. Doch wir haben alles
ausprobiert, was wir ausprobieren konnten, hätten können. Ist da irgendwas in Plano
von Microsoft? Ja, wie gesagt, es gibt von Microsoft WinUI 3, aber die sind auch wieder
ziemlich realitätsfern unterwegs. Also WinUI 3 ist ja, ist es jetzt in diesem Bereich
untergekommen oder was? WinUI 3 ist ja quasi mehr oder weniger die UWP GUI Technologie
umgebaut, dass sie auch von nicht-UWP-Anwendungen verwenden können, verwendet werden können.
Aber sie sind auch schon wieder ziemlich realitätsfern unterwegs, weil du immer noch Code-Signing-Zertifikate
und so einen Scheiß brauchst. WinUI 3 für Unpackaged Win32-Apps sollte es schon vor
über einem halben Jahr geben und sie kriegen es nicht gebacken. Also es ist echt abartig.
Windows-App-SDK, okay. Haben die jetzt schon eine Version rausgebracht, wo Unpackaged-Apps
funktionieren? Dann ist es mal wieder Zeit, dass ich mir das angucke. ImGui ist nur für
verschiedene... naja, das ist Stateless, das ist irgendein Stateless-Overlay-Mahlprogramm,
das ist kein GUI-Framework. Also mit diesen ganzen, wie heißt das, Intermediate-GUI-Zeichen-Dinger,
da kannst du vielleicht in einem Game malen, ein Hauptmenü malen oder so. Aber sicherlich
keine Anwendung für den Desktop. Unpackaged geht es aber noch sehr... ja, da warte ich
noch drauf. Dann ist Microsoft endlich mal wieder in der Realität angekommen, was die
Leute eigentlich haben wollen. Muss ich mir mal angucken. Oh, ist DirectDraw. Ist DirectDraw
aber unterstützt? Ach, kein Stimmer. Aber Microsoft hat es echt... MAUI wird, glaube
ich, auch Paint-Champing, da habe ich wenig Hoffnung. MAUI ist ja quasi Xamarin, wie
auch immer man das ausspricht, nur ein bisschen unbenannt. Im Kern ist es ja noch das Gleiche.
Es wird schon mal keine Linux-Unterstützung geben, was ich sehr pepega finde. Also da
kann man ja nicht wirklich von Cross-Plattformen sprechen. Und ich finde den Xamarin-Ansatz
auch nicht gut im Vergleich zu Flutter zum Beispiel. Flutter macht das richtig. Flutter
sagt, wir nehmen uns irgendeine Low-Level-Grafik-Technologie, die auf der jeweiligen Plattform verfügbar ist,
von Vulkan bis DirectX, bis OpenGL, bis Metal, bis was auch immer. Oder Dings hier. Skia
heißt das, glaube ich, wo die das dann machen in Flutter. Und wir malen unser GUI halt selbst,
dann sieht das überall gleich aus. Xamarin macht so ein Hybrid-Ding, das versucht, die
jeweiligen Controls der Plattform zu verwenden. Was kacke ist, meiner Ansicht nach. Oh ja,
unbedingt. Und dann joinen wir bei Attila Hildmann in Telegram rein. Wireless. Ja,
sehe ich genauso. Ich habe Vodafone. Vodafone 400 MBit, ist auch nicht so der Wahnsinn. Aber
das einzige Sinnvolle, aber das einzige Sinnvolle, weil die Telekom hat bei mir, glaube ich,
maximal 50 MBit oder so. Halt's vergessen. Ja, nee, nee, ist so. Ist so. Was Skia dann
unten drunter macht, weiß ich nicht. Ich gehe mal davon aus, die werden ja auch,
die müssen ja auch irgendwas verwenden. Weil ich kenne keinen Grafik-Treiber, der Skia kann. Also
im Endeffekt muss ja unten, muss es ja irgendwas sein, was da noch drunter kommt.
Dazu kann ich nichts sagen. Von Java habe ich keine Ahnung. Ich habe auch noch nie eine
Swing GUI-Anwendung programmiert. Habe ich auch nicht vor. Sieht halt hässlich wie die Nacht aus,
aber wahrscheinlich funktioniert es. Also was, AWT? Ich weiß nicht, was ist AWT?
Abstract Window Toolkit. Ja, das ist exzellent. Das sieht ja mal richtig aus wie 2021. So stelle
ich mir GUI-Anwendung vor heute. Oh, das wird noch ein bisschen dauern. Ja, nur dass die kaum
Bedienelemente haben und wahrscheinlich das meiste selbst machen. Das ist ja das Witzige.
Die haben ja im Prinzip nicht wirklich jetzt hier viel drinne. Und auch nichts, was groß gestylt ist
oder so. Die haben ihren Erinnerung, die haben die garantiert selbst gemacht. Und ansonsten der Rest
ist eigentlich zum größten Teil Menüs und Menüs. Aber das hier haben die bestimmt selbst gemacht.
Allein schon das Font-Rendering hier ist richtig gut. Was ich da bisher von manchen Swing-Anwendungen
gesehen habe, da sah das Font-Rendering bei weitem nicht so gut aus.
Naja. So Leute, ich würde sagen, jetzt sind wir ein bisschen schlauer. Ich habe was gelernt.
Ich hoffe ihr auch. Ich glaube, ich gehe jetzt erstmal auf. Gibt es irgendjemand zum Hosten?
Das macht eigentlich. Was macht eigentlich der Frazier?
Er spielt immer noch seine Weep-Games hier. Alles klar. Na gut Leute, dann sehen wir uns.
Macht's gut. Bis dann. See you.
