WEBVTT

00:00.300 --> 00:02.300
Jetzt bin ich wieder am start

00:04.600 --> 00:08.520
So ich bin wieder da wie gesagt ich muss das machen dass der wort danach noch da ist

00:11.440 --> 00:13.800
Stimmt das war schon umgestellt auf hetzer name servers

00:14.480 --> 00:18.600
Vielleicht braucht es jetzt erst ein bisschen okay kein schimmer wir machen das erste mal

00:25.240 --> 00:27.240
Wir warten mal kurz

00:27.240 --> 00:34.520
Was sagt er denn hier genau die stimmt die waren schon umgestellt auf hetzner das hat er beim import glaube ich mitgemacht kann das sein

00:37.360 --> 00:41.040
Dein gut haben ist weg ja sollst du auch keine 300 euro server holen

00:47.320 --> 00:51.320
Ne das ist kein fail das ist das ist absicht das geht bei allen diesen services so

00:51.320 --> 00:58.760
Die domain zeigt ja aber noch nicht auf hetzner dns hier müsste jemand explizit auf den richtigen hetzner dns zeigen lassen dass das ganze funktioniert

00:59.120 --> 01:01.120
das ist bei allen diesen services so

01:03.080 --> 01:06.280
Guck mal jetzt hat er es gecheckt jetzt hat er es gecheckt

01:07.760 --> 01:09.760
Das habe ich das um umgestellt

01:10.880 --> 01:12.880
Es kleint bei someone else

01:13.520 --> 01:15.520
Okay, keine ahnung

01:15.520 --> 01:21.720
Ich glaube das das müssen wir nächsten stream machen ich glaube da braucht jetzt erst mal bis das time outet

01:24.480 --> 01:28.160
Versuch mal keck w.tf zu nehmen

01:31.000 --> 01:33.000
Tatsächlich

01:35.240 --> 01:37.240
Keck w.wtf

01:41.280 --> 01:43.760
Aber warum kann man warum kann man das claimen

01:43.760 --> 01:45.760
Häh das verstehe ich nicht

01:49.360 --> 01:51.360
Was ist das für eine komische logik

01:51.360 --> 01:53.360
Häh das ergibt überhaupt keinen sinn

01:54.360 --> 01:59.680
Bei cloudflare funktioniert das anders bei cloudflare musst du dass das überhaupt angelegt wird

02:00.160 --> 02:05.920
Innerhalb von keine ahnung einem halben tag deine dns server hinterlegen sonst geht das nicht

02:08.320 --> 02:10.320
Okay, das ist aber schon fail

02:10.320 --> 02:12.320
Keck w.services

02:13.840 --> 02:20.480
Okay, kein schimmer müssen wir müssen erwarten wir machen das heute nur wir machen das heute nur mit ttp

02:30.960 --> 02:32.960
Keine ahnung was was da was da los ist

02:33.600 --> 02:36.240
Wir legen die loadbalancer mal an nur mit ttp

02:36.240 --> 02:41.680
So jetzt kommt das wofür ich den health check angelegt habe also ihr erinnert euch ich habe hier eine health check drin stehen

02:41.920 --> 02:44.480
Wo der loadbalancer testen kann ob das ganze funktioniert

02:45.680 --> 02:46.960
also

02:46.960 --> 02:48.960
enter your custom response

02:49.360 --> 02:51.360
healthy

02:53.760 --> 02:54.960
Pass

02:54.960 --> 02:56.960
slash health

02:56.960 --> 02:59.760
So also domain bräunert

03:01.440 --> 03:03.440
Also

03:03.440 --> 03:05.440
Domain bräunert

03:11.440 --> 03:16.000
Also ich hoffe das ich hoffe das funktioniert so also was ich jetzt erwarten würde ist der

03:16.640 --> 03:20.480
loadbalancer geht jetzt zu meinen app server hinten dran alle

03:21.520 --> 03:23.920
15 sekunden und guckt ob das service noch lebt

03:24.640 --> 03:31.520
Werden wir jetzt mal ausprobieren so sticky sessions brauchen wir nicht sticky sessions bedeutet wenn du einen loadbalancer hast mit

03:31.520 --> 03:33.520
mit fünf app server

03:34.160 --> 03:38.960
Dann kannst du mit sticky sessions dafür sorgen wenn jetzt hier der erste user wenn jetzt hier in den user reinkommt

03:40.160 --> 03:46.880
Das rote ist ein user und er kommt jetzt zum ersten mal auf diesem server und macht weitere requests dann kommt er immer auf diesem server raus

03:47.440 --> 03:49.440
Das sind sticky sessions

03:51.120 --> 03:54.960
So und wenn ein anderer user reinkommt dann dahin ansonsten macht er standardmäßig hier

03:56.640 --> 03:58.640
Alles im kreis

03:58.640 --> 04:05.840
So also sticky sessions aus proxy protokoll brauchen wir auch nicht status cones 300 200 alles vollkommen in ordnung okay

04:10.160 --> 04:13.040
Versuch mal keqwee.tf anzulegen

04:23.760 --> 04:25.760
Tatsächlich ja das ist ja bescheuert

04:25.760 --> 04:31.040
Warum kann man das anlegen ohne dass man beweisen muss dass es einem gehört

04:33.120 --> 04:38.080
Das ist ja hängen geblieben das kann doch nicht das kann doch nicht im sinne des erfinder sein

04:44.240 --> 04:46.240
Keqwee services

04:51.360 --> 04:53.360
Jetzt jetzt funktioniert's okay

04:53.360 --> 04:56.160
alles klar wunderbar warum auch immer

04:57.440 --> 04:59.920
Ich musste das doch hier umstellen wahrscheinlich

05:00.960 --> 05:02.960
okay

05:04.800 --> 05:06.800
So ich continue jetzt erst mal

05:08.640 --> 05:11.360
Okay genau so funktioniert das normalerweise

05:16.480 --> 05:19.440
Normalerweise normalerweise ist das genauso wie

05:19.440 --> 05:24.320
Also das funktioniert folgendermaßen man registriert eine domain irgendwo

05:24.880 --> 05:30.640
Übrigens max ich muss ich dann auch da wieder raus rausschmeißen aus dem weiß nicht warum die das mit übernommen haben

05:32.240 --> 05:34.480
Also auf namcheap mach mal hinne

05:38.240 --> 05:40.720
Namcheap hat kein bock mehr zu cheap

05:44.080 --> 05:46.080
Hallo namcheap please

05:46.080 --> 05:48.560
hallo namcheap please

05:49.920 --> 05:51.920
auch pause champ

05:55.920 --> 05:57.920
Ne namcheap ah jetzt okay

05:59.040 --> 06:00.560
Also

06:00.560 --> 06:07.680
Normalerweise funktioniert das folgendermaßen man legt das an bei irgendeinem domain registrar kann bei hetzner selbst sein ist aber egal

06:07.680 --> 06:10.000
Bei irgendeinem domain registrar legt man das an

06:10.000 --> 06:15.520
Und wenn man dann einen anderen anbieter haben will der sich um diese ganze geschichte kümmert mit zertifikaten

06:16.800 --> 06:19.440
Und namensauflösung dann kann man sagen hey

06:20.320 --> 06:27.280
Lieber anbieter da wo ich meinen domain registriert habe der zukünftige dns ist das hier und da muss ich den kram hier hinterlegen

06:28.240 --> 06:34.160
So und die sind randomized dass es nicht zufällig passieren kann zumindest ist das ist das normalerweise so

06:34.160 --> 06:37.920
Also gehe ich noch mal hier rein ohne den max zu leaken

06:41.520 --> 06:49.200
Und jetzt sagen wir custom dns hydrogen ns hetzner oxygen ns hetzner

06:51.760 --> 06:53.760
Helium ns hetzner

06:54.560 --> 06:56.560
add

06:58.640 --> 07:00.640
Gut

07:00.640 --> 07:02.640
Gut

07:05.920 --> 07:07.920
Und jetzt finish

07:09.280 --> 07:11.280
Und jetzt sollte das eigentlich

07:11.680 --> 07:13.280
funktionieren

07:13.280 --> 07:16.080
Ich habe bloß noch nicht gesehen wie es aussieht wenn es funktioniert

07:16.640 --> 07:19.920
Hetzner boah das ging aber schnell namcheap ist auf zack

07:24.080 --> 07:29.200
Genau das sollte eigentlich erst blocken wenn es verifiziert ist sehe ich genauso weiß nicht wo da die logik ist so

07:29.200 --> 07:33.120
Edit zone file wow das ist ja richtig oldschool taktik hier

07:34.160 --> 07:37.760
Gibt es da ah nee es gibt auch es gibt auch so einen so einen edit

07:47.440 --> 07:49.440
Was ist das eigentlich für eine logik

07:51.360 --> 07:55.760
Okay also wir brauchen ein a record für meinen load balancer von dem ich die adresse noch nicht habe

07:55.760 --> 07:59.280
Also von der idee her soll das jetzt so sein wenn ich sage ping

07:59.920 --> 08:01.920
keck w punkt services

08:02.560 --> 08:06.080
Dann soll das auflösen auf die ip von meinem load balancer

08:06.640 --> 08:12.080
Das heißt ich lege jetzt den load balancer mal an also machen wir doch http add certificates add

08:12.640 --> 08:17.200
Certificate create certificate selector keck w services da ist es bam

08:17.920 --> 08:20.160
Managed services okay das ding heißt

08:20.800 --> 08:23.840
Keck w nee nee nee wait keck w as a service

08:23.840 --> 08:27.760
keck w as cars keck w as a service

08:28.800 --> 08:30.800
keck w cert

08:32.800 --> 08:35.680
Keck w as a service

08:36.640 --> 08:42.480
Subdomains alle also wildcard wildcard domain machen wir reicht wunderbar

08:43.200 --> 08:45.200
create certificate

08:45.600 --> 08:48.400
Sehr schön sehr schön mal gucken ob das jetzt funktioniert

08:49.440 --> 08:51.440
Jawoll nee

08:51.440 --> 08:53.920
Hat es jetzt schon gemacht okay wir warten mal ab

08:57.440 --> 08:59.440
Normalerweise müsste ich jetzt hier was sehen

09:01.600 --> 09:03.600
Sternchen macht man nie warum nicht

09:09.360 --> 09:16.400
In dem fall ist doch vollkommen in ordnung keck was keck was

09:16.400 --> 09:18.400
Keck was

09:20.800 --> 09:22.800
Er soll mal createn

09:22.800 --> 09:50.720
Er soll mal createn create mal Und gucken vielleicht vielleicht braucht es noch kurz bis es das gecheckt hat keine ahnung

09:50.720 --> 09:58.000
Und dann sollten wir jetzt eigentlich hier dns einträge sehen

10:04.800 --> 10:06.800
Ist gerade alles hardcore

10:06.800 --> 10:23.920
Und jetzt habe ich mal wieder mein kundennummer liegt dns was nicht wirklich schlimm ist alter das ist gerade wahnsinnig geschwind alles

10:23.920 --> 10:41.520
So okay das generiert ziemlich ziemlich langsam warten wir es mal ab warten wir es mal ab was ist da generatet

10:43.120 --> 10:46.960
Ah hier guckt das sind die challenges für let's encrypt

10:46.960 --> 10:56.160
Jetzt passt das jetzt passt das und jetzt löscht er die auch wieder genau und jetzt kriegt er jetzt hat er gleich das zertifikat am start

11:00.320 --> 11:05.920
Der macht ja unter der kann er und der kann ja auch nicht zaubern der macht ja unter der haube auch nur ganz normales let's encrypt

11:12.480 --> 11:15.600
Wo wir gerade wieder dabei sind während wir auf das zertifikat warten leute

11:15.600 --> 11:17.600
Dieser stream ist gesponsert von

11:17.600 --> 11:19.600
Sekunde wir machen jetzt einfach mal eine

11:19.600 --> 11:21.600
Mal in rot

11:27.600 --> 11:31.600
Alter paint come on so sehr schön so

11:35.600 --> 11:43.600
Also dieser stream ist gesponsert von hetzerklaus und wenn euch selbst danach ist mal ein bisschen hier linux server technisch rumzubasteln

11:43.600 --> 11:51.600
Einfach ausrufezeichen hetzner im paintchamp genau ausrufezeichen hetzner im chat 20 euro startguthaben sichern

11:51.600 --> 11:56.400
Und direkt loslegen bei stündlicher abrechnung das heißt ihr könnt euch auch fette server kaufen

11:56.400 --> 11:58.400
Und ja haben wir es hier bald noch mal

11:58.400 --> 12:03.200
Ihr könnt euch auch fette server kaufen und wenig dafür bezahlen

12:03.200 --> 12:07.200
Okay add services passt ich hoffe ich habe das hier alles richtig gemacht

12:07.200 --> 12:11.200
Dein guthaben ist weg ernsthaft okay

12:11.200 --> 12:15.200
Keck w dann würde ich dann schreibt den support doch mal an

12:15.200 --> 12:21.200
Keck w lb ist das hier ach ja und hier kann man jetzt übrigens auswählen abgelaufen

12:25.200 --> 12:29.200
Ja gut das läuft nach drei monaten aus

12:29.200 --> 12:33.200
Das das das ich glaube ich habe das hier nicht richtig gemacht

12:33.200 --> 12:41.200
Das läuft nach drei monaten aus das das das ich glaube drei monate kannst du das kannst du das guthaben verwenden

12:41.200 --> 12:45.200
Wenn du das vor drei monaten eingelöst hast dann ist kein wunder

12:55.200 --> 12:57.200
Richtig keck w ja

12:57.200 --> 13:03.200
So ihr habt auch nur drei euro naja da gibt es nur eins fake account anlegen

13:03.200 --> 13:11.200
Dann sehen meine statistiken auch besser aus ganz einfach

13:11.200 --> 13:19.200
So also loadbalancing algorithmus folgendermaßen man kann auswählen round robin und least connections

13:19.200 --> 13:25.200
In der regel bedeutet das round robin ist einfach erster request erster server zweiter request

13:25.200 --> 13:29.200
zweiter server dritter request vierter und bei fünften server wieder sechster request

13:29.200 --> 13:33.200
erster server siebter request zweiter server also im prinzip immer der reihe nach

13:33.200 --> 13:39.200
So und least connection vor allem in verbindung mit sticky sessions ist das ganz praktisch da kann ich sagen

13:39.200 --> 13:43.200
Hey es geht immer auf den server der die wenigsten verbindungen hat

13:43.200 --> 13:49.200
Also wir machen aber round robin warum auch immer das ewig braucht für das erstellen vom zertifikat keine ahnung

13:49.200 --> 13:59.200
Okay private ip dann schauen wir mal dann schauen wir mal

13:59.200 --> 14:05.200
Ja du kannst jetzt der server downcrayen das ist tatsächlich in der tat sehr praktisch

14:05.200 --> 14:09.200
Ich würde dir aber dazu folgendes empfehlen wenn du einen neuen server anlegst

14:09.200 --> 14:15.200
Dann leg den immer an als den billigsten ich zeige ich zeige euch das mal kurz ja also

14:15.200 --> 14:25.200
Ihr tests sv also du legst den an mit dem billigsten möglichen dann warte bis der erstellt ist

14:25.200 --> 14:31.200
Was machen denn meine load balancer gehen die jetzt

14:31.200 --> 14:37.200
Haha guck mal mein health check funktioniert poggers

14:37.200 --> 14:41.200
Der load balancer balanced schauen wir mal ob es funktioniert public ip

14:41.200 --> 14:49.200
Ist das zertifikat immer noch nicht da oder oder wie

14:49.200 --> 14:53.200
Aber der load balancer an sich funktioniert guckt

14:53.200 --> 15:03.200
Load balancer an sich geht

15:03.200 --> 15:15.200
Achso ich bin ja auch doof ich bin über die ip gegangen hackw.services

15:15.200 --> 15:19.200
Und ich habe noch kein dns eintrag alter ich bin ja auch wieder richtig richtig

15:19.200 --> 15:23.200
Ich darf nicht mehrere sachen gleichzeitig machen also erst mal erst mal server skalieren

15:23.200 --> 15:29.200
Erst mal erst mal server skalieren also du legst den server an als kleinsten server von allen

15:29.200 --> 15:38.200
So und dann kannst du rauf skalieren aber wenn du rescale machst sagen wir du skalierst jetzt

15:38.200 --> 15:45.200
Rauf auf hier irgendwie bisschen größere kiste sagen wir hier irgendwie auf auf den da skalierst

15:45.200 --> 15:52.200
Du rauf dann ist wichtig dass du sagst cpu and ram only skalieren weil wenn du die festplatte

15:52.200 --> 15:57.200
Skalierst diagonal natürlich dann kannst du nicht mehr runter skalieren weil die größeren

15:57.200 --> 16:01.200
Kisten haben wie du hier siehst zack die größeren kisten haben größere platten und du kannst ja

16:01.200 --> 16:07.200
Schlecht eine größere platte auf eine kleinere größe runter skalieren

16:07.200 --> 16:16.200
So deswegen immer häkchen cpu und ram only machen server ausschalten

16:16.200 --> 16:20.200
Rescale

16:20.200 --> 16:28.200
Warten bis er gerescale ist also du siehst aktuell aktuell ist es noch einen cx11 20g eine cpu

16:28.200 --> 16:34.200
Wenn wir jetzt kurz warten dann rescale das ganze auf drei cpus und dann wenn du das gemacht hast

16:34.200 --> 16:38.200
So wie ich das gezeigt habe dann kannst du auch wieder runter runter skalieren

16:38.200 --> 16:43.200
So und jetzt nebenbei machen wir noch den eintrag für den load balancer also das ist unsere public ip

16:43.200 --> 16:46.200
Auf dem load balancer

16:46.200 --> 16:54.200
Jetzt gehen wir dns eintragen sagen ip adresse den da ach gucke mal da

16:54.200 --> 16:57.200
Also immer

16:57.200 --> 16:59.200
Den da

16:59.200 --> 17:02.200
Und

17:02.200 --> 17:06.200
Kann man die partition auf der platte manuell größer machen

17:06.200 --> 17:18.200
Das skaliert dann auch unten drunter gar nicht host so

17:18.200 --> 17:23.200
Warte mal was was ist was ist was ist root

17:23.200 --> 17:38.200
Ad Ad ist gut genau standard ttl ad record also wunderbar so und wenn ich jetzt keck weh wir pingen das ganze mal mache

17:38.200 --> 17:43.200
Er hat so nicht gecheckt guck mal da bäm

17:43.200 --> 17:51.200
Da ist die ip und jetzt achtung keck weh punkt services zack mit gültig im zertifikat

17:51.200 --> 17:55.200
Load balenzt auf zwei linux server dahinter

17:55.200 --> 18:01.200
Könnt ihr ausprobieren wenn ihr wollt keck weh punkt services

18:01.200 --> 18:06.200
Auch noch ich bin mir nicht sicher ob ich hat der load balancer ip 4 6

18:06.200 --> 18:13.200
Ich bin mir nicht sicher ob das funktioniert

18:13.200 --> 18:20.200
Können das mit ip 4 6 mal hat jemand bei euch ip 4 6 und kann das ausprobieren

18:20.200 --> 18:24.200
Kann man von ip 4 6 auf ip 4 4 intern werden

18:24.200 --> 18:27.200
Na gut das ist ja ein proxy das muss funktionieren

18:27.200 --> 18:32.200
Wenn es ein proxy ist muss das gehen

18:32.200 --> 18:38.200
So also dann machen wir das mal also machen wir noch einen eintrag für

18:38.200 --> 18:45.200
Hat irgendjemand eine glorreiche idee warum es ein a ist für ip 4 4 und 4 a für ip 4 6

18:45.200 --> 18:53.200
Ich meine wenn es 4 a für ip 4 4 wäre und 6 für ip dann würde ich es noch verstehen oder wenigstens 2 oder hier 6 aber warum 4 und

18:53.200 --> 19:02.200
Das ergibt keinen sinn oder ich verstehe es bloß nicht

19:02.200 --> 19:08.200
End record

19:08.200 --> 19:24.200
2 3 spit für versus 128 spit ist das vierfache das ist aber richtig massive brain alter

19:24.200 --> 19:34.200
Ok wer ip 4 4 hat kann es mal ip 4 6 hat kann jetzt mal keck weh punkt services ausprobieren

19:34.200 --> 19:42.200
Nee ich kann kein ping 4 6 mal ich habe rein ip 4 4 4 ich komme nicht bei ip 4 6 raus

19:42.200 --> 19:50.200
Wobei doch ich habe doch jetzt einen richtig echten dual stack aber ein router dazwischen habe ich nicht für ip 4 6 eingerichtet geht nicht

19:50.200 --> 19:56.200
Also können ausprobieren ob keck wie services ip 4 6 funktioniert jetzt sollte jetzt funktionieren

19:56.200 --> 20:04.200
So und das nächste ist tatsächlich eine sehr gute frage

20:04.200 --> 20:09.200
Ja die domain ist bei namenshipp gekauft aber die hets namenserver eingetragen genau

20:09.200 --> 20:14.200
Und wie macht man das wenn dahinter eine datenbank steht dann muss ja server 1 und server 2 miteinander sync machen

20:14.200 --> 20:21.200
Nee die datenbank muss sync machen da gibt es da gibt es verschiedene ansätze aber in der regel wirst du

20:21.200 --> 20:28.200
Also beispielsweise wenn du ein mysql oder postgres cluster oder was auch immer hast da gibt es ja verschiedene varianten

20:28.200 --> 20:36.200
Meistens ist es so ein datenbank server ist aktiv und der andere ist quasi so hot backup

20:36.200 --> 20:42.200
Also das dann immer nur einer master ist der auch schreibvorgänge macht die anderen sind also read only

20:42.200 --> 20:47.200
Also das ist zumindest eine variante die ganz gerne gemacht wird

20:47.200 --> 20:56.200
Nee nicht hot spare der ist schon an und sync sich auch aber nur ein server committed changes in die datenbank

20:56.200 --> 21:03.200
Also wenn du jetzt zwei postgresserver dahinten stehen hast einer ist master einer ist ja quasi read only stand by

21:03.200 --> 21:12.200
Wie auch immer man das nennt bei postgres keine ahnung und dann geht deine anwendung halt

21:12.200 --> 21:16.200
Beide anwendungserver gehen dann halt auf die gleiche datenbank das ist kein problem

21:16.200 --> 21:29.200
Die datenbank handelt das was zuerst kommt und was danach kommt

21:29.200 --> 21:35.200
So aber man sieht mit loadbalancer und services funktioniert alles wunderbar

21:35.200 --> 21:40.200
Wozu db cluster stand einfach eine externe db ja die frage war doch wie man das macht mit mehreren datenbanken

21:40.200 --> 21:45.200
Und eine datenbank alleine sind halt nicht mehrere

21:45.200 --> 21:53.200
Aber ansonsten wenn du wenn du nen was weiß ich irgendeine datenbank as a service geschichte nimmst

21:53.200 --> 22:03.200
Und ich nicht selbst darum kümmern willst dann kann es dir egal sein da nimmste da nimmste einfach was so was so kommt

22:03.200 --> 22:13.200
Und gut ist aber wenn du selbst machst ja dann kann man sich überlegen wie man das machen will

22:13.200 --> 22:21.200
Und das ist halt wie sagen anwendung spezifisch in dem fall ist es easy weil die da weil die anwendung überhaupt keine datenbank braucht

22:21.200 --> 22:27.200
Komplett stateless das ding so und beide wei ihr könnt es jetzt auch mal auf den slash 20

22:27.200 --> 22:35.200
Bäm immer die gleiche rotation so muss das sein macht max eigentlich alles in c-shop

22:35.200 --> 22:42.200
Nee wir haben ja auch schon sachen in cc plus plus in go gemacht und

22:42.200 --> 22:47.200
Was haben wir sonst noch cobalt wir haben sogar mal cobalt gemacht kein witz

22:51.200 --> 22:56.200
Wofür braucht man eigentlich keck wss service ist so obvious du kannst keck w rotaten

23:00.200 --> 23:04.200
Also wenn das nicht das nächste nächste start up funktionalität ist dann weiß ich auch nicht

23:04.200 --> 23:10.200
Also viel jetzt mal ernsthaft viel besser geht es nicht mehr das ist die app wo die ganze welt darauf gewartet hat

23:10.200 --> 23:12.200
Oder wollt ihr etwa was anderes behaupten

23:15.200 --> 23:22.200
Also das hat jeder braucht das und vielleicht wissen sie leute bloß noch nicht aber in wirklichkeit ist eigentlich allen klar

23:22.200 --> 23:25.200
Das ist denn das der nächste nächste große shit hier

23:28.200 --> 23:36.200
Funktioniert das keck wss service 0xd das müsste funktionieren 0xd müsste funktionieren

23:36.200 --> 23:40.200
Ja

23:45.200 --> 23:51.200
Man kann die dinge auch als hex übergeben was funktioniert

23:56.200 --> 24:02.200
Ok wunderbar also laut balancer und so funktioniert alles wunderbar wir können ja auch gucken beim hetzen im dashboard

24:02.200 --> 24:11.200
Was haben wir hier alle alle servers enthält die wir simulieren jetzt mal den ausfall von einem server

24:11.200 --> 24:18.200
Da müsste 0b 1101 das weiß ich nicht ob der alle sachen beim parsen unterstützt aber kann ich mir schon vorstellen

24:18.200 --> 24:21.200
Ne das funktioniert nicht

24:21.200 --> 24:31.200
Warte mal ist das nicht wohl encoding ist das nicht wohl encoding das ist gar nicht beim service an ach

24:31.200 --> 24:36.200
Scheiß ob es egal es funktioniert es funktioniert also wir können jetzt mal wir können jetzt mal einen ausfall

24:36.200 --> 24:42.200
Simulieren das machen wir jetzt mal guck mal ausfall ich brauche mal ein auto refresh

24:42.200 --> 24:47.200
Kennt ihr ein gutes auto refresh firefox

24:47.200 --> 24:56.200
Moment das konnte firefox doch eingebaut oder ich ich erinnere mich das konnte firefox doch irgendwie eingebaut

24:56.200 --> 24:59.200
Ich weiß aber nicht mehr wo

25:03.200 --> 25:06.200
Bild in

25:06.200 --> 25:09.200
Autorefresh plugin

25:09.200 --> 25:15.200
Ja gut ich mache das jetzt ich mache das jetzt mal von hand macht es mal von hand ist egal

25:17.200 --> 25:25.200
Also gehen wir mal kurz zu unseren servoren die wir jetzt mal von hand machen

25:25.200 --> 25:37.200
Ich mache das jetzt ich mache das jetzt mal von hand macht es mal von hand ist egal also gehen wir mal kurz zu unseren servoren

25:37.200 --> 25:43.200
Achso ich wollte übrigens das skalieren noch fertig zeigen also wir haben server jetzt hoch skaliert auf drei cpus

25:43.200 --> 25:48.200
Und nachdem wir nicht rescaled haben die platte

25:48.200 --> 25:56.200
Stimmt wir machen den cache aus das ist eine gute idee ist able cache nachdem wir nichts nicht die platte skaliert haben

25:56.200 --> 26:01.200
Können wir auch wieder ohne probleme runter runter skalieren

26:01.200 --> 26:10.200
Ist von dem größeren auf den kleineren runter skalieren funktioniert also das ist mein tipp macht den server immer als kleinstes

26:10.200 --> 26:15.200
Er stellt den server immer als kleinstes mit der kleinsten platte dann könnt ihr beliebig hoch und runter skalieren

26:15.200 --> 26:18.200
Ohne dass ihr den server neu erstellen müsst

26:21.200 --> 26:25.200
So also hier load balancer

26:25.200 --> 26:29.200
Der load balancer ist hier auf also hier load balancer

26:29.200 --> 26:32.200
Heck W LB

26:36.200 --> 26:43.200
So und jetzt machen wir den server aus nehmen wir beispielsweise den ersten den schalte ich jetzt einfach aus

26:43.200 --> 26:48.200
So jetzt bin ich auf dem ersten gelandet jetzt kriege ich gleich ein timeout

26:48.200 --> 26:56.200
Aber der andere sollte noch funktionieren das heißt wir bekommen jetzt es ruckelt guckt es ruckelt jetzt vielleicht mal kurz

26:56.200 --> 27:02.200
Immer wenn wir und jetzt hat es gecheckt dass das service weg ist das heißt es hat jetzt mal ganz kurz geruckelt

27:02.200 --> 27:06.200
Aber das service ist nicht da und obwohl ein server weggeflogen ist

27:06.200 --> 27:13.200
Das ist halt das praktische wenn du load balancer davor und man kann das bei the way noch viel viel cooler machen

27:13.200 --> 27:18.200
Ja also es gibt ja es gibt ja load balancer die können das wirklich mit session states

27:18.200 --> 27:23.200
Also dass du quasi geschaerte tcp connections hast über beide server und sowas

27:23.200 --> 27:27.200
Da wird es ganz abgedeckt dann merkst du vom ausfall gar nichts mehr

27:27.200 --> 27:31.200
Wie lautet der link noch mal hier preisschamp.org

27:31.200 --> 27:37.200
Es gibt nix box series x das habe ich ja nie gesehen ob das stimmt

27:43.200 --> 27:50.200
Geht alter egal so also seht ihr ein server ist weg

27:52.200 --> 27:57.200
Aber es geht immer noch kek wie erstes service so jetzt schalten wir den server wieder ein

27:57.200 --> 28:05.200
Und jetzt sollte nach kurzer zeit der service auch wieder abkommen

28:05.200 --> 28:10.200
Ich hoffe ich habe automatisch eingestellt

28:19.200 --> 28:22.200
Zeit mal traffic vom load balancer waren wir gleich

28:22.200 --> 28:29.200
Ich hoffe ich habe den server so eingestellt dass da wieder hochfährt mit dem service

28:29.200 --> 28:37.200
Ich weiß nicht ob ich ob ich enable lass mal ins ansible gucken habe ich das enabled unit file

28:37.200 --> 28:48.200
Unit file oh ich glaube wir haben das nicht enabled guckt mal hier

28:57.200 --> 29:03.200
Aber wir starten das nur wir haben wir haben das gar nicht enabled beim starten ok das ist natürlich fail

29:03.200 --> 29:09.200
Der service startet nicht automatisch beim server starten ok das ist natürlich ein config fehler

29:09.200 --> 29:15.200
Den sollte man den sollte man nicht machen also der service ist wieder da aber das service startet nicht

29:15.200 --> 29:23.200
Welche kiste war das habe ich welche leute habt ihr aufgepasst welche habe ich jetzt runtergefahren

29:23.200 --> 29:27.200
Wieder ne

29:30.200 --> 29:39.200
Hier war das ssh igen minus r ging das so kann man das immer nicht merken

29:39.200 --> 29:53.200
Es sehr gut

29:53.200 --> 30:05.200
System ctl status keqw ne wie habe ich das ding genannt keqw ist das service

30:05.200 --> 30:23.200
Inactive dead start so status ok und jetzt jetzt sollte die musik

30:23.200 --> 30:35.200
So und jetzt sollte der load balancer checken dass es wieder da ist gleich wenn es hier gestartet ist

30:35.200 --> 30:43.200
Sobald der load balancer den nächsten check macht genau so jetzt müssen wir in unser ansible

30:43.200 --> 30:58.200
noch reinschreiben dass das auch enabled werden soll also restart ssh ja also das müssen wir noch

30:58.200 --> 31:13.200
rein haben enable keqw as a service ansible enable service muss ich mal gucken wie das enabled

31:13.200 --> 31:20.200
Das richtig guck da ist er wieder beide server sind wieder da jetzt laden wir noch mal wir gucken uns

31:20.200 --> 31:28.200
gleich den traffic an aber ich muss das hier erst noch mal state ne alter ist mir zu viel ist mir zu viel

31:28.200 --> 31:33.200
offen 1ks flick nicht mehr durch wo sind wir hier ich mache mir auch noch einen browser auf

31:33.200 --> 31:46.200
Ansible enable system d ok enable gibt es ein beispiel für aha hier also enabled yes

31:46.200 --> 31:56.200
enabled yes demon reload meinetwegen ok das brauchen wir dass es nach dem nach dem neustart

31:56.200 --> 32:02.200
vom server auch wieder automatisch automatisch hochfährt so überprüfen wir mal dass es auch

32:02.200 --> 32:06.200
funktioniert ich habe ich habe das ja von hand enabled wir probieren noch mal aus ob das

32:06.200 --> 32:17.200
funktioniert also server crash jetzt bäm habe ich es enabled enable ne habe ich nicht

32:17.200 --> 32:23.200
jetzt aber also power off server ist gecrashed noch hat es nichts von mitbekommen

32:27.200 --> 32:32.200
hat es gecheckt server ist raus und alles wird auf den zweiten server load balancen

32:32.200 --> 32:36.200
server load balancen als ist da ein app server kann ausfallen und es läuft weiterhin ohne

32:36.200 --> 32:48.200
probleme so muss das sein so und jetzt server starten power on und jetzt warten wir kurz

32:48.200 --> 32:52.200
und jetzt sollte das ding wieder automatisch ins load balancer reinkommen wenn der load balancer

32:52.200 --> 33:03.200
down ist dann hat man gelitten gibt es hier sowas wie crafts open connections irgendjemand

33:03.200 --> 33:14.200
ist ganz schön heftig am keck wss servicen würde ich sagen hier wird ordentlich keck

33:14.200 --> 33:22.200
wer ist es serviced wer ist es von euch wer ist hier hacker man am start so ist das service

33:22.200 --> 33:33.200
wieder da ja nicht enable status status läuft so das sollte jetzt eigentlich der load balancer

33:33.200 --> 33:37.200
gleich checken dass es wieder da ist das server da checkt er nur alle 15 sekunden und dann

33:37.200 --> 33:43.200
muss es dreimal ok sein hat der lb den aus protection ja so viel wie alles andere so viel

33:43.200 --> 33:54.200
oder wenig wie alles andere auch services hier läuft health check deswegen ist es übrigens

33:54.200 --> 33:58.200
wichtig dass wir einen health check haben klar server down könnte man auch mit allem

33:58.200 --> 34:04.200
anderen machen aber es gibt ja auch so sachen wie anwendung läuft aber datenbank ist kaputt

34:04.200 --> 34:07.200
oder sonstige geschichten also anhand des health checks kann man dann schon ein bisschen

34:07.200 --> 34:13.200
genauer genauer sachen ausprobieren so jetzt sind beide server wieder da zack guckt automatisch

34:13.200 --> 34:18.200
hin man könnte mit dem kleinen load balancer bis auf 25 server load balenzen also da könnten

34:18.200 --> 34:27.200
wir keck wss service hyper skalieren hier ob ich dir ich kann dir erklären was ich mache

34:27.200 --> 34:33.200
also ich habe zwei zwei server wo eine web anwendung von mir drauf läuft diese web anwendung

34:33.200 --> 34:39.200
macht nichts anderes außer keck w zu rotieren und zurück und und auszugeben sonst nix das

34:39.200 --> 34:48.200
sind legit fünf zeilen die anwendung so ich habe zwei server und davor habe ich einen

34:48.200 --> 34:53.200
load balancer mit dieser domain drauf und wenn du auf diese domain gehst kannst du ja

34:53.200 --> 35:01.200
ausprobieren bei dir im browser wenn du auf die domain gehst keck w punkt services dann

35:01.200 --> 35:06.200
kommst du auf dann wirst du laut balenzen vom laut balenzen auf eine dieser server wo

35:06.200 --> 35:15.200
die anwendung drauf läuft ja das funktioniert crafts also irgendjemand ist ganz heftig am

35:15.200 --> 35:25.200
keck w rotaten targets ja hier kann man noch mehr einstellen services networking ich nicht

35:25.200 --> 35:35.200
rescale auch guck mal man kann sogar die laut balenzen rescale auf 35 euro im monat progas

35:35.200 --> 35:45.000
windows on linux no linux on windows windows ist host system linux ist virtual machine

35:45.000 --> 35:57.880
inside wmw workstation and i use virtual windows virtual virtual desktops to switch quickly

35:57.880 --> 36:15.840
between windows and linux der chat wieder der chat wieder arch by the way natürlich

36:15.840 --> 36:26.080
arch by the way was sonst oi oi mate so also der test hat wunderbar funktioniert wollt

36:26.080 --> 36:29.920
ihr dazu noch was wissen sonst machen wir weiter mit dem nächsten punkt also wir haben

36:29.920 --> 36:34.080
laut balenzen mit zertifikaten gemacht wir haben keck wie erstes service aber jetzt kommt

36:34.080 --> 36:40.800
die eigentliche attraktion des streams jetzt machen wir continues integ naja das vielleicht

36:40.800 --> 36:47.120
ein bisschen bisschen zu hoch aufgehängt wir machen automatisierung mit github actions

36:47.120 --> 36:56.800
also das ziel ist jetzt folgendermaßen das ziel ist jetzt folgendes wir haben hier unser

36:56.800 --> 37:02.960
repo hier keck wie erstes service repo in status das muss ich gleich noch kommenten

37:02.960 --> 37:06.680
also wir haben hier unser repo ihr könnt euch das ganze übrigens auf github angucken

37:06.680 --> 37:11.960
der lb hat eine eigene lp klar die server übrigens auch aber die bräuchten keine also

37:11.960 --> 37:17.680
nur dass die kannst du jetzt kannst du ich kann es noch mal zeigen also der server also

37:17.680 --> 37:25.240
der lb hat hier public lp und die domain löst auf keck wie punkt services löst auf diese

37:25.240 --> 37:31.280
lp auf hier als übrigens mal einer hat er hat übrigens mal einer ausprobiert mit lp

37:31.280 --> 37:42.560
v6 ob es funktioniert sieht man beim laut balenzen noch andere

37:42.560 --> 37:48.880
stance ich glaube nicht so sophisticated ist das nicht ja funktioniert nice sehr gut

37:48.880 --> 38:00.920
genau also der laut balenzen hat die extra lp keck wie punkt services löst darauf aus

38:00.920 --> 38:09.480
drauf auf so dann hat er ein internes netz 1221 68 5.0 slash eigentlich ist slash 24

38:09.480 --> 38:13.440
warum haben wir immer 28 weiß gar nicht ob ich da 28 habe ich da 28 eingestellt habe

38:13.440 --> 38:25.080
ich vertippt so und dann hat meine server haben interne lps nämlich 1221 68 5.2 1221

38:25.080 --> 38:40.280
68 5.3 darauf wird laut balenzt so funktioniert das so jetzt lassen wir das ganze mal so laufen

38:40.280 --> 38:46.460
und jetzt machen wir big brain time wobei wartet mal wartet mal leute wir machen was

38:46.460 --> 38:53.440
anderes wir löschen wir löschen mal kurz die server wir löschen die server und legen

38:53.440 --> 39:02.200
neue an und die pläne die ordentlich noch mal wir machen fünf server wir machen fünf

39:02.200 --> 39:10.640
server so der laut balenzer ist natürlich jetzt broken as fuck weil no targets vor e

39:10.640 --> 39:19.720
als wir bauen jetzt wir bauen jetzt vier vier server auf mit keck ws service drauf

39:19.720 --> 39:27.480
allerdings cx cx 11 die kleinen reichen wir brauchen keine triple core server nicht löschen

39:27.480 --> 39:38.440
warum nicht vor e wir machen wir machen fette kisten der laut balenzer gerade wohner s ja

39:38.440 --> 39:46.200
warum denn kann man hier sagen network geht das minus minus network kann man sagen minus

39:46.200 --> 39:54.600
minus network gleich internal bin ich mal gespannt ob das funktioniert jetzt kannst

39:54.600 --> 40:01.400
du nicht mehr drauf ja schauen wir mal gucken wir mal ha cloud server create ich brauche

40:01.400 --> 40:17.560
mal kurz hilfetext von der von dem cli server create create minus minus network geht das

40:17.560 --> 40:34.360
ok wir müssen mal kurz den hilfetext angucken ha cloud server create bla bla bla bla konnte

40:34.360 --> 40:43.160
man sich da nicht hilfe für anzeigen lassen help help minus minus network genau wunderbar

40:43.160 --> 40:49.440
so dann sollte nämlich netz sich auch an das interne netz hängen für das laut balenzen

40:49.440 --> 40:53.040
was millionenverluste gemacht dann würde ich sagen ich fahre das jetzt mal ganz schnell

40:53.040 --> 40:56.600
wieder hoch und dann beteiligst du mich an den millionen gewinnen die du gleich wieder

40:56.600 --> 41:06.000
hast big stonks time paypal adresse kann ich dir schicken nach dem stream oder alternativ

41:06.000 --> 41:09.320
also gibt ich würde sagen zwei varianten ich meine nachdem du ja quasi mit meinem service

41:09.320 --> 41:14.520
ohne lizenz millionen gebühren machst zwei sachen also entweder fünf subs giften oder

41:14.520 --> 41:22.520
paypal adresse nach dem stream und millionen überweisen ganz einfach easy um nicht zu

41:22.520 --> 41:33.040
sagen schon wieder doppelte klicks guckt euch mal an so server werden aufgebaut dann

41:33.040 --> 41:39.480
enden wir die auch gleich mal zum laut balenzen übrigens mein an simple aufbau script hat

41:39.480 --> 41:48.840
ein bug monkaS ich habe es kaputt gemacht warum ich

41:48.840 --> 41:54.360
bin im falschen ordner lull das habt ihr nicht gesehen ich bin im falschen ordner also

41:54.360 --> 42:06.320
gar kein problem delete oh delete alles kein problem gar kein ding

42:06.320 --> 42:14.440
calculated alles nach plan so nochmal komm wir machen jetzt das 5 server bam auf gehts

42:14.440 --> 42:31.040
so server werden created mein lokales übrigens mein lokales bild script ist ziemlich ziemlich

42:31.040 --> 42:37.800
3 hat weil ja ist halt wieder triple core ist egal dass das ist das schöne von stündliche

42:37.800 --> 42:42.420
abrechnung es kostet auch so nix also ich habe nämlich in meinem bild script hier ziemlich

42:42.420 --> 42:46.960
ziemlich einen bescheuerten eintrag ich baue nämlich jedes mal die anwendung neu so und

42:46.960 --> 42:56.480
wenn das parallel passiert dann geht es natürlich kaputt hellsinki warum nicht mich nicht ob

42:56.480 --> 43:06.400
das in hellsinki ist wir haben wir haben keinen standort angegeben hier drin ist aber auch

43:06.400 --> 43:20.160
egal so server werden aufgebaut jetzt gehe ich

43:20.160 --> 43:31.040
mal in den laut balenzer und edit diese services hier laut balenzer targets add targets cloud

43:31.040 --> 43:42.440
server bam bam bam bam bam add five targets so die sind jetzt natürlich erstmal down

43:42.440 --> 43:46.160
oder vielleicht sind manche schon oben nein es ist nix da weil die server sich grad noch

43:46.160 --> 43:54.480
im aufbau befinden was wird denn das wir haben eine anwendung programmiert die cac w rotated

43:54.480 --> 43:59.440
sonst nix macht aber jetzt laut balenzt wird auf fünf server in der cloud mit laut balenzer

43:59.440 --> 44:03.400
davor und wenn du es gleich ausprobieren willst kannst du machen gehe einfach auf die domain

44:03.400 --> 44:07.800
cac w.services allerdings die server sind grad noch nicht oben deswegen funktioniert

44:07.800 --> 44:16.060
das nicht also du kannst jetzt zwar auf cac w.services gehen aber der laut balenzer sagt es geht

44:16.060 --> 44:23.920
nicht weil keine application server da sind aber gleich sind application server da und

44:23.920 --> 44:41.960
dann sollte es auch wieder funktionieren restarting dann cac w.s.services deploy copy app ich hoffe

44:41.960 --> 44:52.260
das funktioniert jetzt alles macht bei mir mein rechner irgendwas die playbooks laufen

44:52.260 --> 44:59.680
noch ich werde mir überlegen ob ich zukünftig noch mit cars arbeite kann ich dir empfehlen

44:59.680 --> 45:06.000
also das ist das nächste große ding cac w.s.services sag ich ja also da kommt man da kommt man kommt

45:06.000 --> 45:10.520
man nicht dran vorbei ein server ist schon da leute cac w.s.services sollte funktionieren

45:10.520 --> 45:19.040
bam könnt ihr ausprobieren cac w.s.services ist wieder da und ihr seht das coole ist mit

45:19.040 --> 45:25.680
dem laut balenzer davor halt auch wenn ein application server noch da ist klappt der

45:25.680 --> 45:33.080
kram doch so guck mal die server kommen nach und nach kommen nach und nach hoch ja ja geh

45:33.080 --> 45:41.520
mal aus hier und schon haben wir fünf cac w.s.services am start jetzt flutscht das ganze

45:41.520 --> 45:46.480
es wird übrigens auch hellsinki gerade gelaut balenzer ist nicht so gut aber gut ich kann

45:46.480 --> 45:50.680
damit leben so wunderbar und jetzt können wir jetzt können wir weitermachen also wir

45:50.680 --> 45:56.440
haben 5 application server hyperscaled zahlt hetsner eigentlich die rechnung für deine

45:56.440 --> 46:01.720
server die bezahle ich selbst aber ich krieg ein bisschen geld für solche streams hier

46:01.720 --> 46:06.040
und sowas in der richtung falls es euch noch nicht aufgefallen ist dieser stream ist gesponsert

46:06.040 --> 46:11.000
von hetsner cloud wer jetzt auch mal ein bisschen rum basteln will kann ausrufezeichen hetsner

46:11.000 --> 46:19.120
im chat machen und dann runter scrollen wenn ihr ausrufezeichen im hetsner hausrufezeichen

46:19.120 --> 46:24.420
hetsner im chat macht dann könnt ihr euch unter diesem link registrieren mit meinem

46:24.420 --> 46:33.920
code und dann bekommt ihr fast dann bekommt ihr 20 euro startguthaben das gilt glaube

46:33.920 --> 46:39.140
ich drei monate könnt ihr einlösen bis 31.12. und das gute ist dass hetsner stündlich

46:39.140 --> 46:43.800
abrechnen das heißt ihr könnt euch auch eine übelst fette kiste kaufen hier 60 euro

46:43.800 --> 46:50.180
im monat oder oder gar irgendwie 100 320 euro im monat und wenn ihr die zwei stunden laufen

46:50.180 --> 46:57.440
habt bezahlt ihr bloß ein euro wollen wir mal einen stresstest machen du meinst auf

46:57.440 --> 47:16.440
keck wss service aber du musst den load balancer stressen und nicht die einzelnen server weil

47:16.440 --> 47:19.600
die einzelnen server die haben ja normalerweise gar keine public IP die ihr kennen würdet

47:19.600 --> 47:30.240
so schauen wir mal auf die load balancer was hier bei crafts so passiert das hält es geht

47:30.240 --> 47:45.040
aber noch das hält aber noch in grenzen noch funktioniert das ohne probleme ok es geht

47:45.040 --> 47:49.520
schon bisschen hoch womit stressen jetzt muss der ummut wissen keine ahnung er hat gefragt

47:49.520 --> 47:57.120
ob er stressen soll ok es geht schon ein bisschen hoch aber keck wss service ist davon nicht

47:57.120 --> 48:03.040
geschockt wo musst du den hetsner key eingeben wenn du dich registrierst gibt es irgendwo

48:03.040 --> 48:06.320
ein feld ich habe das selbst noch nie gemacht keine ahnung die sollten mir vielleicht mal

48:06.320 --> 48:13.040
den screenshot schicken dass ich das zeigen kann wenn das einer fragt du kannst wohl

48:13.040 --> 48:17.600
hier steht es doch du gehst dann nach erfolgreicher cloud account erstellung gehst du auf konsole

48:17.600 --> 48:21.680
hetsner.cloud und dann gehst du auf den punkten kosten also da wo du auch die rechnung bezahlen

48:21.680 --> 48:25.560
musst und dann auf gutschein einlösen und auf gutschein code einlösen dann gibt es

48:25.560 --> 48:39.560
die hier max 21 also hier wird nichts gestresstestet das funktioniert aber so einfach jetzt habe

48:39.560 --> 48:48.920
ich zu früh gefrescht mit deinen cousins ja stress die bei hetsner mit deinen cousins

48:48.920 --> 48:54.320
so machen wir mal curl keck wss services ja das ist binary das ist mir doch egal zack

48:54.320 --> 49:04.880
ja def 0 zack wegschmeißen damit wyatt nee russkuh ah keine ahnung silence was s was

49:04.880 --> 49:11.120
s für silence dass curl nichts macht ja das problem ist ich kann curl sequenziell gar

49:11.120 --> 49:19.040
nicht genug starten dass das sinnvolle sinnvoll stresst super silence ich kann curl gar nicht

49:19.040 --> 49:31.080
genug starten dass es das das stresst du dann ich kanns hier ein paar mal ok kanns hier

49:31.080 --> 49:38.960
ein paar mal starten ja ok aber das war es ich bezweifle dass das nennenswert nennenswerten

49:38.960 --> 49:45.280
stress verursacht wenn ich das hier ein paar mal anschmeißen ja jetzt sind wir schon mal

49:45.280 --> 49:53.920
bei 100 mbit keck wss service stimmt mit curl ist das aber mit curl ist das richtig dumm

49:53.920 --> 50:08.520
da gibt es bessere tools für apache benchmark ja damit geht das wunderbar aber wir machen

50:08.520 --> 50:14.800
jetzt mal was sinnvolles also keck wss service ist äußerst robust hatte überhaupt keine

50:14.800 --> 50:21.000
probleme funktioniert macht genau das was es soll nur dass wir server in hellsinki haben

50:21.000 --> 50:25.240
das vielleicht ein bisschen doof wie gebe ich denn hier bei dieser hetzener cloud bei

50:25.240 --> 50:32.440
dieser h cloud server create wie gebe ich denn hier den standort an h cloud server da muss

50:32.440 --> 50:40.520
man das help nochmal help angucken help data center data center string ok data center string

50:40.520 --> 50:48.200
das heißt ich kann ich sag dann network internal data center string und dann nehmen wir hier

50:48.200 --> 51:06.240
beispielsweise nur nur im berg nehmen wir dann ok mehr darf ich nicht anlegen ich muss

51:06.240 --> 51:12.400
mal muss mein account mal upgraden gibt den servern doch bei hetzener cloud ein label

51:12.400 --> 51:18.040
dann sind die automatisch im load balancer als target das ist nice das ist nice das probieren

51:18.040 --> 51:29.680
wir jetzt das wird massif massif agil hier so server werden alle wieder gelöscht bäm

51:29.680 --> 51:36.280
sag sag hallo kann ich sagen warte mal add label funktioniert das denn das muss ich jetzt

51:36.280 --> 51:40.320
ausprobieren warum darfst du nur fünf server haben weil wir maximal zehn server haben kann

51:40.320 --> 51:47.920
ohne dass man upgradet und ich habe im anderen projekt schon fünf server so label ok zeig

51:47.920 --> 52:00.400
mal wie funktioniert das denn labels ok keg w s s service und firm so heißt es ich kann

52:00.400 --> 52:03.680
jetzt hier bei load balancer sagen das habe ich wie gesagt habe die load balancer auch

52:03.680 --> 52:10.200
nie ausprobiert das heißt ich kann jetzt sagen hier targets und dann alle labels oder

52:10.200 --> 52:33.080
wie wir mal ausremove add targets label warum nicht habe ich irgendwas falsch gemacht label

52:33.080 --> 52:44.840
was habe ich doch hier warum warum match das nicht load balancer moment das müssen wir

52:44.840 --> 52:55.520
uns jetzt angucken warum warum funktioniert das nicht targets add targets label keg w

52:55.520 --> 53:02.880
s s service ah man muss das ausschreiben es ist kein es ist kein automatisches ding

53:02.880 --> 53:09.800
ah ok ok ok ok verstehe verstehe also server zack achtung leute noch gehts noch gehts und

53:09.800 --> 53:25.320
jetzt letzter server letzter server keg keg quadruple u s s service bam rip ok also wie

53:25.320 --> 53:40.200
helb und dann sagt man minus minus tech oder was oder wie oder wo name tech wie gebe ich

53:40.200 --> 53:59.240
es ist kein tech es ist label label ok also minus minus also minus means location gleich

53:59.240 --> 54:03.440
dann haben wir hier dass man das jetzt auch mal richtig machen dann brauchen wir hier

54:03.440 --> 54:17.120
nur im berg alles klar nur im berg und minus minus label gleich keg w s s service so wenn

54:17.120 --> 54:23.720
das jetzt richtig funktioniert dann sollte ich jetzt fünf neue server bekommen bekommen

54:23.720 --> 54:29.120
in nur im berg das label haben die automatisch gelaut balancet werden sollten und mit keg

54:29.120 --> 54:45.920
w s s service direkt starten oh invalid argument ist der hetzer lb dann renundant ja das muss

54:45.920 --> 55:03.440
man jetzt da fragen was zum label key gleich value ja was ist dann bitteschön mein value

55:03.440 --> 55:20.480
das check ich jetzt net das check ich das muss ich jetzt mal ausprobieren wie das funktioniert

55:20.480 --> 55:35.520
mach einfach service gleich keg w s s so label labels are key value press both keys and values

55:35.520 --> 55:42.000
must be this value is optional ah the value is optional ah das war der key ok ok ok keg

55:42.000 --> 56:01.280
w s service und es lb oder so ja ok ok ok das ist das value alles klar also das heißt

56:01.280 --> 56:10.360
dann machen wir lassen wir das leer also sprich label keg w s s service gleich das müsste

56:10.360 --> 56:29.680
jetzt ja so funktionieren weil der value ist optional oh not not found ok location h cloud

56:29.680 --> 56:42.800
server create muss die location nbg ist das woher wisst ihr das denn nbg chat ich glaube

56:42.800 --> 56:56.560
euch das jetzt einfach ihr seid huge huge brain keg w s s service ansible create location

56:56.560 --> 57:21.760
ein selbstbehetzter also nbg alles klar nur im bg ok bam jetzt aber she baited richtig

57:21.760 --> 57:42.920
art she baited alda ok h cloud server location nbg oder hellsinki api warum heißt das keg

57:42.920 --> 57:48.680
w s s service im streamtitel steht keg w s microservice oh nein ja was brauche ich denn

57:48.680 --> 57:55.120
da h cloud docks hetzer cloud also zeigt mal her da muss es doch irgendwo eine hilfe zugeben

57:55.120 --> 58:06.720
wie das funktioniert zli programm aber hier guck mal hier gibt's hier gibt's big brain

58:06.720 --> 58:20.000
hier gibt's hier gibt's hilfe hier gibt's hilfe guck mal ok location locations wir haben

58:20.000 --> 58:38.120
ok nbg 1 ah nbg 1 ok nbg 1 so also wenn das funktioniert sollte ich jetzt fünf server

58:38.120 --> 58:44.400
bekommen in nürnberg oder nur nuremberg ist ja nicht nur ist das nürnberg keine ahnung

58:44.400 --> 58:51.440
englische schreibweise ich hab keine ahnung nur nürnberg ne das ist was anderes oder

58:51.440 --> 58:55.480
ist auch mit dem label keg w s s service das heißt es sollte direkt ins loadbalancing

58:55.480 --> 59:04.600
kommen und postchamp postchamp das sieht gut aus zack da sind sie mein loadbalancer mein

59:04.600 --> 59:20.360
loadbalancer sagt no targets mixed hohoho healthchecks moment die können denn die services

59:20.360 --> 59:39.040
healthy sein ah jetzt ok der hat einfach eine weile gebraucht ach der ist die fault

59:39.040 --> 59:51.920
healthy ok das server wird aufgenommen ist lebendig und dann kommt der erste healthcheck

59:51.920 --> 59:58.080
ja ok die fault die fault healthy ist vielleicht nicht so der beste nicht so die beste idee

59:58.080 --> 01:00:06.400
vielleicht kann man das hier umstellen anscheinend nicht die fault healthy ist vielleicht nicht

01:00:06.400 --> 01:00:21.480
die beste variante na gut ich kann mit leben so jetzt sind die dinger unhealthy alles klar

01:00:21.480 --> 01:00:27.240
so jetzt wird der kram aufgeholt keg w s s service ist down 503 chat wer ist big brain

01:00:27.240 --> 01:00:32.760
genug wer weiß warum das ein fünfer ist warum ist das warum hat das warum ist das ein htp

01:00:32.760 --> 01:00:57.680
error code mit fünf am anfang weil wer hat physik gelernt und aufgepasst server ich weiß

01:00:57.680 --> 01:01:04.640
es nicht ich weiß es aus dem kopf nicht mehr warum das so ist waren 500 nicht temporär

01:01:04.640 --> 01:01:12.480
ne oder ich weiß es nicht mehr 500 error codes weiß ich doch nicht mal ich kann ich

01:01:12.480 --> 01:01:21.920
habe gedacht generic error response ok das weiß ich dann die 300er waren temporär 300er

01:01:21.920 --> 01:01:28.960
waren temporär so war das 300er sind temporär so wie redirects und so was 200er sind ok

01:01:28.960 --> 01:01:38.400
ok der erste server ist schon da und bern keg ws das service funktioniert ist das nicht

01:01:38.400 --> 01:01:47.600
nice mit dem load balancer davor richtig cool wie sie durchgefallen haben an physik schon

01:01:47.600 --> 01:02:00.360
sehr länger länger ja ok guckt bern alles da so und jetzt machen wir es agil ajai leute

01:02:00.360 --> 01:02:06.480
jetzt wirds richtig massive agil shit up actions kommt jetzt also die sache ist die wir haben

01:02:06.480 --> 01:02:11.000
jetzt ein load balancer mit fünf application server dahinter also genauso wie sie gemalt

01:02:11.000 --> 01:02:19.320
hab funktioniert gültige zertifikate hier zertifikat connection secure bla alles so

01:02:19.320 --> 01:02:28.400
was uns jetzt fehlt ist noch eine moderne variante neue software versionen zu deployen

01:02:28.400 --> 01:02:32.080
ich mein wir bräuchten für unsere sache wenn man ehrlich ist wenn man wirklich ehrlich

01:02:32.080 --> 01:02:43.800
ist wir bräuchten gar keine ähm super ausgefeilte deployment oder testing build wie auch immer

01:02:43.800 --> 01:02:49.720
methode also man könnte einfach sagen ok ich habe fünf server die werden sich wahrscheinlich

01:02:49.720 --> 01:02:56.720
nie ändern ich mach lokal nen build scp das ding hin oder rsync das auf die server von

01:02:56.720 --> 01:03:05.160
mir lokal das kann ich immer n simple build rein machen und restart den service so aber

01:03:05.160 --> 01:03:14.000
wir gehen mit der zeit wir machen github actions das bedeutet wir haben hier unser repo ich

01:03:14.000 --> 01:03:24.600
ich klär das mal status add lull beste push so wir haben hier unser repo und aktuell haben

01:03:24.600 --> 01:03:29.280
wir da nur ein branche nämlich master wir machen jetzt den zweiten branche geht check

01:03:29.280 --> 01:03:36.000
out minus b nennen wir mal brot so und jetzt haben wir zwei branche in unserem lokalen

01:03:36.000 --> 01:03:42.640
jit master und brot so und was wir jetzt machen ist folgendes im master wird entwickelt und

01:03:42.640 --> 01:03:50.400
nach brot wird gemärcht wenn das wenn wenn released werden soll switch minus t ist das

01:03:50.400 --> 01:03:58.760
neue check out warum ist das besser warum ist switch minus c besser als check out minus

01:03:58.760 --> 01:04:09.560
b kürzer bei mir habe ich eh gtc o minus b also das ist bei mir ein ich benutze nie

01:04:09.560 --> 01:04:13.880
check out ich schreibe check out nur für euch jetzt aus ich habe seit jahren gtc o für

01:04:13.880 --> 01:04:28.280
check out oder sogar github für neuen branche bam github master github branche minus d s

01:04:28.280 --> 01:04:39.880
github github genau also wir haben jetzt wir haben jetzt zwei branches master und brot

01:04:39.880 --> 01:04:47.720
so das ziel ist jetzt folgendes ich möchte eine ein automatisches script laufen lassen

01:04:47.720 --> 01:04:55.040
auf github wenn ich nach brot pushe das heißt ich mache kommets in master und dann mache

01:04:55.040 --> 01:05:00.780
ich irgendwann ein merch nach brot und pushe das und der soll das automatisch ohne dass

01:05:00.780 --> 01:05:07.440
ich lokal irgendwas machen muss auf die server pushen so das heißt wir werden jetzt github

01:05:07.440 --> 01:05:15.040
actions verwenden dafür github actions ist die github verität der jenkins von github

01:05:15.040 --> 01:05:19.080
sozusagen falls ihr jenkins kennt jenkins ist so der oldschool bildserver überhaupt

01:05:19.080 --> 01:05:24.280
den gibt schon seit 500 jahren haben schon die alten die alten griechen haben schon jenkins

01:05:24.280 --> 01:05:31.800
verwendet so gratis hat philosophiert hat gesagt wir machen mal jenkins bild also so

01:05:31.800 --> 01:05:37.360
alt ist das schon und wir haben übrigens auch noch ein jenkins so ist das so ist das

01:05:37.360 --> 01:05:44.880
nicht so und github actions ist quasi das jenkins auf github soll ich zeige ich zeige

01:05:44.880 --> 01:05:51.400
ich zeige euch mal wie das wie das ganze funktioniert also ich bin aber übrigens auch nicht der

01:05:51.400 --> 01:05:54.480
wahnsinns profi da drin muss ich muss ich auch gleich sagen es könnte sein wir müssen

01:05:54.480 --> 01:05:58.400
ein bisschen müssen ein bisschen rumprobieren aber service und so funktioniert auch alles

01:05:58.400 --> 01:06:03.400
wunderbar sind jetzt übrigens die server in dem richtigen rechenzentrum erstellt welchem

01:06:03.400 --> 01:06:11.440
rechenzentrum sind wir denn jetzt nürnberg ok perfekt laut balancer ist auch ist auch

01:06:11.440 --> 01:06:16.560
oben funktioniert ok also github actions es kann sein dass es ein bisschen rumklicken

01:06:16.560 --> 01:06:22.480
muss also wir haben dort net anwendung das heißt wir nehmen den standard workflow für

01:06:22.480 --> 01:06:43.600
sp dot net hier das da set up this workflow zack shit shit ab so der eigentliche workflow

01:06:43.600 --> 01:06:48.280
der liegt immer im repo drin das heißt er ist glaube ich auch branche abhängig und man

01:06:48.280 --> 01:06:54.280
kann den ändern also man hat hier seine continuous integration schräg schräg continuous delivery

01:06:54.280 --> 01:06:59.960
testing was auch immer konfig die hat man immer zusammen mit dem code liegen im gleichen

01:06:59.960 --> 01:07:09.360
repo damit nichts zusätzlich konfig geht also run on push pull request prominent run on

01:07:09.360 --> 01:07:18.360
push branche brot so jobs later wir machen unsere builds auf nem ubuntu auf dem neuesten

01:07:18.360 --> 01:07:27.480
ubuntu so actions set up ok nennen wir einfach nur set up dort wir nehmen dort net version

01:07:27.480 --> 01:07:35.200
fünf dort net restore und so das brauchen wir das brauchen wir alles nicht das können

01:07:35.200 --> 01:07:38.760
wir alles können wir alles weg schmeißen was wir machen wollen ist folgendes wir wollen

01:07:38.760 --> 01:07:47.640
unsere dot net anwendung bauen mit dot net publish minus minus configuration release

01:07:47.640 --> 01:07:54.520
dass es schneller ist minus r linux x64 hoffe das stimmt was ich jetzt aus dem kopf hier

01:07:54.520 --> 01:08:00.600
tippe also wir wollen linux binary bauen dann minus minus self contained so und das ganze

01:08:00.600 --> 01:08:05.680
in den output directory bild schreiben ok sekunde leute ich muss mal ausbringen ob

01:08:05.680 --> 01:08:15.000
das funktioniert was ich da sage nein wäre auch zu einfach also ich bin im falschen ordner

01:08:15.000 --> 01:08:40.760
keck wer ist das service jetzt ok alles jetzt funktioniert ja bild ja ok nice hat funktioniert

01:08:40.760 --> 01:08:51.680
sehr schön das heißt hier geht auch kein run drinne na genau so git ignore da muss wo

01:08:51.680 --> 01:08:56.840
habe ich kein git ignore wo habe ich mein git ignore file git ignore da muss auf jeden

01:08:56.840 --> 01:09:04.680
fall noch bild mit rein sonst commit ich hier meine meine lokalen meine lokalen binaries

01:09:04.680 --> 01:09:12.920
natürlich natürlich nicht ok also das ist schon mal richtig wir möchten unser dot net

01:09:12.920 --> 01:09:17.680
programm bauen als linux binary self contained das heißt wir brauchen auf dem server selbst

01:09:17.680 --> 01:09:23.000
kein installiertes dot net was wir auch nicht haben wohlgemerkt weil aktuell deployen wir

01:09:23.000 --> 01:09:28.800
ja über unser script und wir machen das ja schon so guck hier dot net publish release

01:09:28.800 --> 01:09:35.160
machen wir das so in kurzvariante self contained und dann pushen wir es auf den server rüber

01:09:35.160 --> 01:09:38.480
wir machen das ganze jetzt nur mit der github action also das ziel ist folgendermaßen so

01:09:38.480 --> 01:09:42.160
soll das ganze dann funktionieren also mal angenommen ich mache hier ich mache ich mache

01:09:42.160 --> 01:09:48.680
hier einen commit habe ich eine readme drin habe ich eine readme ja mal angenommen ich

01:09:48.680 --> 01:09:57.800
mache hier einen commit drinne in master pushe master dann soll nichts passieren aber jetzt

01:09:57.800 --> 01:10:11.680
sage ich irgendwann ich bin bereit ich will neue versionen releasen warum ist das bild

01:10:11.680 --> 01:10:18.600
da noch drinne ah weil ich das nicht gemercht habe aus master so und irgendwann sage ich

01:10:18.600 --> 01:10:27.120
git merge master und wenn ich das hier jetzt pushe git push bot also quasi nächste version

01:10:27.120 --> 01:10:32.320
releasen dann will ich dass der ein automatisches bild macht und es auf den server schiebt

01:10:32.320 --> 01:10:37.760
das heißt ich brauche nichts mehr lokal auszuführen ok also legen wir mal los wir wollen die dot

01:10:37.760 --> 01:10:44.680
net version bauen und das testen wir jetzt mal ob das funktioniert also runs on steps

01:10:44.680 --> 01:10:59.920
check out dot net publish release self contained alles klar start commit achso ich muss auf

01:10:59.920 --> 01:11:12.880
ich muss auf prot null ja ich bin im falschen prat null naja gut naja gut remote update merge

01:11:12.880 --> 01:11:18.760
origin master so jetzt machen wir hier mal einen commit und checken mal ob das an sich

01:11:18.760 --> 01:11:23.040
funktioniert brauchst du nicht ein cd doch ich brauche wahrscheinlich ein cd wir gucken

01:11:23.040 --> 01:11:26.520
uns jetzt erstmal an ob das funktioniert ich muss jetzt mal ein paar test commits machen

01:11:26.520 --> 01:11:30.920
und gucken ob das funktioniert also warte mal wir achten mal irgendeinen mist in die

01:11:30.920 --> 01:11:43.520
mir und gucken ob es funktioniert geht komm mit a-m weg weh und und geht push origin origin

01:11:43.520 --> 01:11:54.640
brot ok schauen wir mal ob die github action funktioniert ja da ist sie also wir sollen

01:11:54.640 --> 01:12:00.080
jetzt hier wir kommen jetzt hier ein automatisches bild bei jedem push in den brot branche also

01:12:00.080 --> 01:12:04.680
check out funktioniert setup gibt wahrscheinlich ein fehler ja setup gibt ein fehler weil ich

01:12:04.680 --> 01:12:09.320
im falschen verzeichnis bin siehst du sind wir schon mal sind wir schon mal verkehrt bin

01:12:09.320 --> 01:12:16.920
im falschen verzeichnis also gehen wir mal packen wir das ganze mal ins richtige verzeichnis

01:12:16.920 --> 01:12:23.800
github workflows dot net so wie mache ich denn hier in den cd ich denke mal hier davor zack

01:12:23.800 --> 01:12:38.960
cd dort wie heißt der ordner auch keck wss service ok pushen gucken ob es funktioniert

01:12:38.960 --> 01:12:54.960
actions nächster test bild geht das bild jetzt postchamp postchamp gut das muss er immer

01:12:54.960 --> 01:13:03.480
machen und und und bild bild bild ah das sieht schon mal besser aus restored sehr schön ok

01:13:03.480 --> 01:13:09.140
also meine web anwendung wird gebaut also job durchgelaufen gut jetzt muss ich mir irgendwas

01:13:09.140 --> 01:13:13.560
überlegen wie ich das auf den server bekomme so ich werde es jetzt mal hier in der action

01:13:13.560 --> 01:13:19.040
programmieren aber das wird ein bisschen schwierig weil um auf den server zu kommen brauche

01:13:19.040 --> 01:13:24.200
ich ein ssh key das heißt ich muss jetzt in den secrets mein ssh private key hinterlegen

01:13:24.200 --> 01:13:38.800
und das muss ich so machen dass ihr es im stream nicht seht jaja das muss ich mir jetzt mal

01:13:38.800 --> 01:13:45.280
überlegen also von der idee her wir machen jetzt hier es heißt nicht restore dependency

01:13:45.280 --> 01:13:54.840
sondern es heißt bild bild so und jetzt machen wir noch einen neuen job der die sachen auf

01:13:54.840 --> 01:14:05.520
den server kopiert so das nennen wir deploy so und die pläne wird folgendermaßen kann

01:14:05.520 --> 01:14:09.280
man bei github keine secrets hinterlegen doch doch kann man machen aber ich kann das ja

01:14:09.280 --> 01:14:12.880
nicht im stream machen wenn ich das im stream machen seht ihr alle seht ihr seht ihr das

01:14:12.880 --> 01:14:20.840
ja alle wir machen nichts versprochen jaja chat glaube ich euch sofort les idee rsa ne

01:14:20.840 --> 01:14:25.440
deploy wie habe ich das genannt deploy key so das der public deploy key mit dem komme

01:14:25.440 --> 01:14:30.280
ich nicht weit mit mit dem komme ich nicht weit ich brauche den private deploy key und

01:14:30.280 --> 01:14:34.440
ich muss gucken dass es nicht bei mir in der zwischenablage landet wie mache ich das denn

01:14:34.440 --> 01:14:46.160
jetzt chat ok big brain time also erstmal zwischenablage ausschalten kill all ich mache

01:14:46.160 --> 01:14:54.880
ich mache jetzt die zwischenablage erstmal kaputt erstmal die zwischenablage kaputt machen

01:14:54.880 --> 01:15:01.560
abtippen so mal gucken ob ich die zwischenablage kaputt gemacht hab jawoll sieht gut aus zwischenablage

01:15:01.560 --> 01:15:06.800
der zwischenablage ist kaputt ok chat ihr dürft jetzt nicht gucken ihr dürft nicht

01:15:06.800 --> 01:15:22.400
gucken ihr dürft ihr dürft nix sehen so deploy key ja wie deploy key also ich kopiere

01:15:22.400 --> 01:15:39.920
das jetzt mal da rein github settings secrets secrets new secrets private key nennen wir

01:15:39.920 --> 01:15:57.240
das mal ssh brief key ok key ist reinkopiert ich hoffe man sieht auch nix jawoll ok ich

01:15:57.240 --> 01:16:13.760
pläne euch wieder ein ok also key ist als secret hinterlegt key ist als secret hinterlegt

01:16:13.760 --> 01:16:18.520
jetzt können wir weitermachen also wir gehen cd cac vs the service run deploy gut das haben

01:16:18.520 --> 01:16:22.760
wir gemacht so was wir jetzt machen müssen wir müssen diesen ganzen ordner den wir hier

01:16:22.760 --> 01:16:28.760
eben in bild angelegt haben müssen wir rüber auf den server kopieren so also von der idee

01:16:28.760 --> 01:16:31.920
her ich schreibe das jetzt einfach mal so runter von der idee her müssen wir jetzt folgendes

01:16:31.920 --> 01:16:37.880
machen einen ssh auf irgendeinen x beliebigen hetzen der server zum ausprobieren ob das

01:16:37.880 --> 01:16:54.960
funktioniert nennen wir mal den hier zum beispiel so ups by the way kann ich green clip wieder

01:16:54.960 --> 01:17:12.040
anmachen green clip dass ich wieder history habe und es ist nicht drinne also ssh root

01:17:12.040 --> 01:17:21.280
add also übrigens ähm eine der sachen die wir probieren probieren wollen ist dann am

01:17:21.280 --> 01:17:28.000
ende dass es noch automatisch auf alle server geht wie ist das eigentlich wenn das server

01:17:28.000 --> 01:17:33.240
download bekommt er nicht eine neue ip nein da behält die gleiche ip aber wir versuchen

01:17:33.240 --> 01:17:37.400
es ja am ende noch dynamisch zu machen da müssen wir mal gucken also root server ich

01:17:37.400 --> 01:17:40.120
probiere jetzt erstmal auf einen server zu deployen und gucken dass das funktioniert

01:17:40.120 --> 01:17:56.920
dann wollen wir dann sagen system ctl system ctl stop hack ws service so dann wollen wir

01:17:56.920 --> 01:18:06.560
deployen und dann wollen wir starten so ähm und dazwischen wollen wir die anwendung rüber

01:18:06.560 --> 01:18:13.840
ersunken also ersunken minus a und dann ist es glaube ich info progress 2 oder so das

01:18:13.840 --> 01:18:19.880
ist ganz wir das ist ein progress progress anzeigt und nicht jede datei 1 so und dann

01:18:19.880 --> 01:18:29.280
wollen wir bild ordner rüber kopieren und zwar nach root ads dem da so soweit müsste

01:18:29.280 --> 01:18:35.220
mein deployment sein das funktioniert jetzt allerdings nicht weil ich keine ssh keys habe

01:18:35.220 --> 01:18:39.640
und jetzt muss ich mal gucken github secrets wie man darauf überhaupt zugreift das weiß

01:18:39.640 --> 01:18:44.560
ich das weiß ich aus dem kopf nämlich nicht also ich habe hier in meinem repo mein private

01:18:44.560 --> 01:18:48.800
key hinterlegt so dass ihr den nicht sehen könnt und da kann man jetzt darauf zugreifen

01:18:48.800 --> 01:19:04.080
nämlich mit hier secrets so ich vermute mal dass das hier nicht funktioniert wie habe

01:19:04.080 --> 01:19:09.360
ich das genannt ssh das wird nicht funktionieren weil das hier ein string ist es gibt einen

01:19:09.360 --> 01:19:17.600
extra github action für kopieren von ssh und stp kopieren aber das ist doof ich probiere

01:19:17.600 --> 01:19:21.480
mal was ich hoffe ich liege meinen key jetzt nicht was aber by the way nicht schlimm ist

01:19:21.480 --> 01:19:35.800
wenn ich meinen key liege ich habe das für nichts anderes verwendet als das wirds was

01:19:35.800 --> 01:19:41.200
gucken auf dem zweiten bildschirm wo ist denn hier cacqss service ich mache das einfach

01:19:41.200 --> 01:19:50.600
im zweiten bildschirm dann ist gar nicht die gefahr dass ich irgendwas liege secrets ja

01:19:50.600 --> 01:20:01.680
wunderbar wieso hast du den private key im repo hinterlegt

01:20:01.680 --> 01:20:06.480
ja warum nicht weil es ein secret ist was zu diesem repo gehört und der nur für den

01:20:06.480 --> 01:20:09.880
server verwendet wird wo es drauf soll da ist doch eigentlich sinnvoll dass er ins repo

01:20:09.880 --> 01:20:13.760
kommt so also es könnte sein dass ich jetzt meinen key liege ich bin mir nicht sicher

01:20:13.760 --> 01:20:17.920
ob das eine gute idee ist was ich hier mache also wir schreiben den key einfach in eine

01:20:17.920 --> 01:20:27.800
datei rein so wir machen ein ssh verzeichnis mk dir punkt ssh dann echeln wir das da rein

01:20:27.800 --> 01:20:39.200
nach punkt ssh slash id rsa so es kann sein es kann gleich sein dass es geleaked wird

01:20:39.200 --> 01:20:46.200
die private keys sind nicht im repo die private keys sind als github secret im repo so und

01:20:46.200 --> 01:20:53.640
jetzt kann ich sagen minus i ne brauch ich gar nicht minus i das greift jetzt ja automatisch

01:20:53.640 --> 01:21:02.840
ok mal checken mal gucken was passiert ich hab keine ahnung komm mit bam push schauen

01:21:02.840 --> 01:21:11.680
was passiert gleich ist key liege angesagt weiß ich eh schon was key in anführungszeichen

01:21:11.680 --> 01:21:18.440
ups oh nein es habe ich auch mal gepusht ich kann nur nö das muss nicht oh ja das muss

01:21:18.440 --> 01:21:26.600
in anführungszeichen ok anführungszeichen ja ja ist gut ist gut anführungszeichen anführungszeichen

01:21:26.600 --> 01:21:34.880
zwar keine gute idee gleich kann man das kann man das cancel cancel ran bam weg damit cancel

01:21:34.880 --> 01:21:42.040
ran brauche man alles nicht alles alles overrated jebaited outdated guck mal hier cancel ran

01:21:42.040 --> 01:21:54.040
ok wunderbar ok habe ich das jetzt richtig gemacht gequoted wir machen übrigens nicht

01:21:54.040 --> 01:22:04.960
wir machen single single quotes dass der auch auf gar keinen fall irgendwas irgendwas escaped

01:22:04.960 --> 01:22:11.880
und danach mache ich mal einen guck mal ob das funktioniert lsla auf punkt ssh und guck

01:22:11.880 --> 01:22:29.160
ob das ob das klappt ok push beim trauma mal bin jetzt bin ich mal gespannt ob das funktioniert

01:22:29.160 --> 01:22:49.640
pausierungschamp ob ah yes setup bild so ja funktioniert nice host key verification failed

01:22:49.640 --> 01:22:56.160
oh no anyway ich weiß was ich verkehrt hab ich muss ihm noch sagen dass er den key das

01:22:56.160 --> 01:23:02.040
erste mal akzeptieren soll also was ist das für eine richtige option stricthost key checking

01:23:02.040 --> 01:23:07.520
nicht no nicht no wir wollen except new das ist die neue big brain options für sowas

01:23:07.520 --> 01:23:31.000
so also ssh except new so das müsste eigentlich jetzt klappen was ich hier mache by the way

01:23:31.000 --> 01:23:38.280
was macht er überhaupt ah guck mal der ist richtig massive brain der tut das secret aus

01:23:38.280 --> 01:23:54.440
sternchen huge easy sie wissen genau dass so leute wie ich da regelmäßig was liegen

01:23:54.440 --> 01:23:59.480
übrigens habe ich die server überhaupt aufgebaut habe ich die server überhaupt aufgebaut mit

01:23:59.480 --> 01:24:11.600
dem richtigen ssh key ich glaube nicht schau mal mal er sagt wahrscheinlich als dass das

01:24:11.600 --> 01:24:17.200
nicht funktioniert nee ich habe diese aber nicht aufgebaut mit dem richtigen key ne schau

01:24:17.200 --> 01:24:23.760
mal mal schau mal was das bild was das bild macht mit test attest attest hast du ah mist

01:24:23.760 --> 01:24:32.200
dann funktioniert nicht unprotected private keyfile oh mein gott permission denied ja

01:24:32.200 --> 01:24:36.920
ok das das können wir das können wir fixen dann machen wir hier noch weil ansonsten geht

01:24:36.920 --> 01:24:51.280
im zweifelfall ssh nicht chmod 600.sh dass das ssh nicht rum meckert.sh slash idsa so

01:24:51.280 --> 01:24:58.800
und jetzt muss ich die server bei hetzer nochmal neu aufbauen weil der key falsch ist da lacht

01:24:58.800 --> 01:25:03.960
er da lacht er über mich hier zack wobei ich kann kann man den key nicht zusätzlich

01:25:03.960 --> 01:25:09.080
danach hinzufügen geht das außer per ssh copy id oder sowas kann können die sowas

01:25:09.080 --> 01:25:21.320
kann die sowas übers webinterface nee oder task geht down leute das ganze verzeichnend

01:25:21.320 --> 01:25:27.840
muss 600 sein nee nee nur der key nur der key muss mache ich jetzt ssh copy id auf alle

01:25:27.840 --> 01:25:31.560
oder nicht nein ich baue jetzt einfach alle nochmal neu auf easy da können wir gleich

01:25:31.560 --> 01:25:38.240
testen ob unser kekwi ssh service gut funktioniert so und delete weil das muss ja in zukunft

01:25:38.240 --> 01:25:51.960
auch funktionieren mit dem richtigen key ok also der richtige key ist kann man hier zu

01:25:51.960 --> 01:26:00.880
ansible der richtige key ist nichts wo ist der key nicht test test der richtige key ist

01:26:00.880 --> 01:26:10.880
test add poggers 2 ist der richtige key wenn ich jetzt nicht komplett falsch liege max

01:26:10.880 --> 01:26:19.400
add poggers 2 ist das richtige max add poggers 2 alles klar jetzt wissen wir Bescheid nicht

01:26:19.400 --> 01:26:28.440
poggers 1 nicht poggers 0 nein poggers 2 hab ich meinen alias hier nicht workflow juckt

01:26:28.440 --> 01:26:36.840
mich jetzt nicht so server werden wieder aufgebaut ich mein ich bin ja ich bin ja ein fan von

01:26:36.840 --> 01:26:40.800
wenn so sachen automatisiert sind aber das müsste schon zugeben das ist eine echt coole

01:26:40.800 --> 01:26:46.300
geschichte mit service down neues server hinstellen service ab und sie kommen automatisch ins load

01:26:46.300 --> 01:26:51.440
balancing rein also viel einfacher es sei denn man hat das verkontainerisiert mit irgendeinem

01:26:51.440 --> 01:26:56.040
orchestrator oder so noch dabei also viel einfacher kann das jetzt an dieser stelle

01:26:56.040 --> 01:27:09.680
für unseren für unseren dienst echt nicht sein jetzt hat interessante range also mir

01:27:09.680 --> 01:27:30.080
sagt diese range jetzt nix

01:27:30.080 --> 01:27:59.800
zu knackig ja ok wenn es danach geht wo was monkeys ah die ip sind doppelt ok ich muss

01:27:59.800 --> 01:28:04.080
sagen mein aufbau script ist doch nicht so big brain wie ich mir das gedacht habe jetzt

01:28:04.080 --> 01:28:12.920
sind die ip doppelt vergeben kann ansible irgendwie das ignorieren das ist das ist ja

01:28:12.920 --> 01:28:19.480
doof kann ansible das irgendwie gibt es irgendwie die möglichkeit zu sagen ansible piss piss

01:28:19.480 --> 01:28:30.520
ich alte nerv nicht rum ich meine ich kann einfach ssh known host machen und mal diesen

01:28:30.520 --> 01:28:41.640
ganzen shit hier rausschmeißen bäm so und jetzt nochmal ausführen aber so gehts auch

01:28:41.640 --> 01:28:47.200
ja mit umgebungsvariable oder ansensible cfg ignore errors jetzt ne ich will ja nicht ignore

01:28:47.200 --> 01:28:55.680
errors jetzt ich will nur ignore ssh errors gut ok jetzt warten wir bis kekwe ss service

01:28:55.680 --> 01:29:02.660
aufgebaut ist in der zwischenzeit können wir eigentlich weitermachen mit unserem mit

01:29:02.660 --> 01:29:10.840
unsere github github action github workflows.net also wir legen den ssh key an dann connecten

01:29:10.840 --> 01:29:18.880
wir uns adden den server key dass es keine fehler gibt stoppen kekwe ss service scp in

01:29:18.880 --> 01:29:28.960
den bildordner rüber nach ins heimatverzeichen wo muss der bildordner eigentlich hin ansible

01:29:28.960 --> 01:29:34.400
host key checking ah exellent exellent wo muss wo muss der bildordner eigentlich hin

01:29:34.400 --> 01:29:40.920
der muss nach home app kekwe ss service siehste schon wieder schon wieder verkehrt aber wir

01:29:40.920 --> 01:29:53.200
gucken erstmal ob das deployen an so funktioniert nehmen wir mal den hier als ip und funktioniert

01:29:53.200 --> 01:30:01.000
der kram noch was ist denn jetzt schon wieder hier fail to connect warum permission denied

01:30:01.000 --> 01:30:08.760
ah ich hab mir den anderen host key ausgewählt deswegen funktioniert das nicht wie sag ich

01:30:08.760 --> 01:30:14.320
ansible was es für einen host key verwenden soll ok wir stoßen hier auf ganz neue probleme

01:30:14.320 --> 01:30:20.680
ich muss ich muss den shit noch mal kurz kurz löschen wenn das jetzt in den heads der admin

01:30:20.680 --> 01:30:25.760
hier im monitoring sieht er denkt auch was treibt der typ da eigentlich warum erstellt

01:30:25.760 --> 01:30:36.800
er wie verrückt immer fünf server und löscht die wieder was macht der duta also moment

01:30:36.800 --> 01:30:48.160
moment ss key ist richtig aber ich kann mich ja nicht dran verbinden ansible key identity

01:30:48.160 --> 01:31:02.320
ok ok wie geht das ansible ssh private key file exellent das brammer inventory file

01:31:02.320 --> 01:31:11.920
in host zwar kann ich nicht in der environment variable machen oder so environment variable

01:31:11.920 --> 01:31:34.800
oder ansible ssh key environment geht doch bestimmt private default private key file

01:31:34.800 --> 01:31:43.240
ansible private key file ok so geht das ansible private key file also export ansible private

01:31:43.240 --> 01:31:55.120
key file ähm welches brauchen wir denn überhaupt home deploy key home max deploy key ja so

01:31:55.120 --> 01:32:05.080
hieß das ding ok home max deploy key so und jetzt jetzt muss das funktionieren pass mal

01:32:05.080 --> 01:32:19.800
auf bäm easy so plus rng hoffentlich funktioniert es jetzt hoffentlich hoffentlich frisst er

01:32:19.800 --> 01:32:31.200
das jetzt oder meckert bestimmt auch weil der key moment leute ha ha ha ch mod 666 ch

01:32:31.200 --> 01:32:49.080
mod 600 zack ich habe jetzt gemacht so ah guck mal es scheint zu funktionieren leute

01:32:49.080 --> 01:32:58.200
grad noch mal rechtzeitig grad noch mal rechtzeitig ip leak omfg ich habe ganz viele ips geliegt

01:32:58.200 --> 01:33:06.840
ok ok komm funktioniere einfach changed changed klingt schon mal gut install packages ich

01:33:06.840 --> 01:33:11.880
glaube es funktioniert leute ich glaube es funktioniert ok was macht der service der

01:33:11.880 --> 01:33:17.200
service ist unreachable ok das das das passt auch load balancer der kann es schwachsinn

01:33:17.200 --> 01:33:23.440
darum ist das hell sie der load balancer ist richtig ok jetzt ist ein bisschen fail was

01:33:23.440 --> 01:33:27.440
hast du schon gemacht eigentlich sind wir gerade beim letzten schritt github actions

01:33:27.440 --> 01:33:33.320
anlegen für deployment das das muss das muss heute noch sein da bin ich ganz scharf drauf

01:33:33.320 --> 01:33:49.720
dass das funktioniert auf deploy let's go was local host ach so das bild das bild macht

01:33:49.720 --> 01:33:57.720
er immer local host ja ok das ist in ordnung ok keck wss service sollte bald wieder verfügbar

01:33:57.720 --> 01:34:15.200
sein leute gleich gleich ist wieder da postchamp postchamp bei der gelegenheit könnte ich

01:34:15.200 --> 01:34:20.040
noch mal kurz erwähnen dass dieser stream gesponsert ist von hetzner cloud wenn ihr

01:34:20.040 --> 01:34:27.360
auch mal ausprobieren wollt ausrufezeichen hetzner im chat anmelden über den link gutscheincode

01:34:27.360 --> 01:34:33.640
einlösen 20 euro startguthaben sichern und rumbasteln und hetzner rechnen stündlich

01:34:33.640 --> 01:34:37.120
ab das heißt ihr könnt euch auch ein paar richtig fette server kaufen für ein paar

01:34:37.120 --> 01:34:43.640
stunden und ihr müsst dafür nichts bezahlen so siehts aus so ist keck wie erster keck

01:34:43.640 --> 01:34:50.440
wss service ist schon wieder da bäm da ist es funktioniert wieder müsst für die anwendung

01:34:50.440 --> 01:34:57.160
euch noch verifizieren ja gut das kann sein das ist ja mittlerweile standart dass die

01:34:57.160 --> 01:35:03.760
alle hoops wobei bei o v h habe ich nicht gemacht o v h wollte von mir die ausweis

01:35:03.760 --> 01:35:14.480
kopie da habe ich gesagt nope no pass aus grad sehr schnell das service hier so die

01:35:14.480 --> 01:35:17.480
anderen server sollten jetzt eigentlich gleich auch wieder hochkommen drei haben wir schon

01:35:17.480 --> 01:35:32.240
hier zack jawoll der load balancer ist hart am load balancen 4 von 5 zack wunderbar also

01:35:32.240 --> 01:35:36.720
da sind wir wieder gut jetzt können wir jetzt können wir unser github unsere github geschichte

01:35:36.720 --> 01:35:43.400
weitermachen also doch das sollte jetzt eigentlich funktionieren nachdem ich den key richtig

01:35:43.400 --> 01:35:48.640
drin habe also von der idee her sollte der sich jetzt auf diesen server verbinden und

01:35:48.640 --> 01:35:58.240
die neue version dahin deployen zeig mal her ob das funktioniert github actions und chat

01:35:58.240 --> 01:36:07.280
meint ihr es funktioniert erst wenn directory anpassen was habe ich verkehrt gemacht zeigt

01:36:07.280 --> 01:36:17.280
mal erst ein bild wieso ist doch richtig will das bild directory in ins heimatverzeichnis

01:36:17.280 --> 01:36:22.960
kopieren zum testen danach ist falsch das stimmt aber zum testen ist doch ist doch ist

01:36:22.960 --> 01:36:34.480
doch alles gut ok jetzt jetzt kommt ah ich was ist denn jetzt schon wieder so falls wir

01:36:34.480 --> 01:36:48.520
no such files or directory äh warum nicht jetzt bin ich jetzt bin ich verwirrt das bild

01:36:48.520 --> 01:36:55.040
hat doch funktioniert also home runner work kekwi as a service kekwi as a service kekwi

01:36:55.040 --> 01:37:03.320
as a service bild wie oft er noch kekwi as a service dreimal warum kekwi as a service

01:37:03.320 --> 01:37:08.880
kekwi als a service kekwi as a my freste alter wie oft er noch das hört er gar nicht mehr

01:37:08.880 --> 01:37:25.100
auf triple triple triple triple triple du kekwi du hast dreimal cd im work flow das habe ich

01:37:25.100 --> 01:37:34.420
nur dass ich das dass ich aber das ergibt keinen sinn ich bin doch hier

01:37:34.420 --> 01:37:38.860
in dem ordner wo bild drinne ist warum bin ich in dem anderen ordner wo bild

01:37:38.860 --> 01:37:48.340
drinne ist guck mal hier hier bin ich hier sage ich cd und und da ist das

01:37:48.340 --> 01:37:59.180
verstehe ich jetzt nicht das verstehe ich jetzt nicht ich gehe ich gehe in das

01:37:59.180 --> 01:38:06.740
verzeichnis rein und sache mache bild output bild ok ich meine ich kann das

01:38:06.740 --> 01:38:11.420
hier ein verzeichnis nach oben machen dann wird es funktionieren aber so das

01:38:11.420 --> 01:38:14.660
verstehe ich jetzt nicht wirklich aber scheiß drauf ich will es jetzt nicht

01:38:14.660 --> 01:38:25.300
verstehen ich will gucken dass es funktioniert der bild ist in cars was

01:38:25.300 --> 01:38:38.180
mal drei aber erst in keck wie erstes service mal zwei aber warum so jetzt

01:38:38.180 --> 01:38:43.700
jetzt jetzt habe ich jetzt habe ich ihm gesagt dass er den kram ein ordner

01:38:43.700 --> 01:38:51.740
weiter oben drüber machen soll gucken wir mal ob es jetzt funktioniert auf die

01:38:51.740 --> 01:38:57.940
ploi auch die ploi hängt schon das ist gut die ploi ist schon am wie clean ab

01:38:57.940 --> 01:39:01.620
moment er macht einen clean ab bevor er die plutt ich glaube das stimmt nicht

01:39:01.620 --> 01:39:09.100
was da steht ich glaube das hat es funktioniert hey es hat funktioniert es

01:39:09.100 --> 01:39:20.860
hat funktioniert guck mal er hat er hat jetzt nach ihr weiß er hat es jetzt hier

01:39:20.860 --> 01:39:39.380
hinkopiert minus i die ploi key alter nerf nicht rum ssh please gefahrt es und

01:39:39.380 --> 01:39:51.860
jetzt haben wir hier den ordner bild da ist es doch wunderbar bäum funktioniert

01:39:51.860 --> 01:39:57.620
sehr schön also wir haben bild gemacht das landet auf dem server das ist das

01:39:57.620 --> 01:40:00.900
ist doch schon mal exzellent genauso genauso soll das sein

01:40:00.900 --> 01:40:05.820
also wimm aber weiter also von der idee funktioniert das ja was wir hier

01:40:05.820 --> 01:40:09.140
gestrickt haben der baut die anwendung und schiebt sie unter dem ordner

01:40:09.140 --> 01:40:13.820
bild auf das zielsystem ja das ist ja eigentlich erst mal alles was wir

01:40:13.820 --> 01:40:19.900
erreichen wollen so und jetzt kommt big brain time und jetzt dynamisch auf alle

01:40:19.900 --> 01:40:27.380
server die es gibt wie kriege ich von github raus welche server ich bei

01:40:27.380 --> 01:40:29.860
hetzner habe

01:40:30.420 --> 01:40:35.100
moment ich habe ich habe die idee kann man hetzner cloud cli auf ubuntu

01:40:35.100 --> 01:40:41.660
installieren pass mal auf geht das ist das im repo drinnen

01:40:42.380 --> 01:40:51.660
ubuntu ubuntu hallo browser please voter phone

01:40:52.180 --> 01:40:58.540
hey das funktioniert ok das probieren wir jetzt aus also wenn das funktioniert

01:40:58.540 --> 01:41:06.940
da wäre ich äußerst also mega überrascht wenn das funktioniert alle

01:41:06.940 --> 01:41:11.500
du kannst doch einfach einen h cloud container ein ein bild quatsch wir machen

01:41:11.500 --> 01:41:13.900
das manuell glaube es geht los irgendwelche komischen

01:41:13.900 --> 01:41:17.700
container aber dann hast du einen hetzner api key im repo

01:41:17.700 --> 01:41:30.860
ne habe ich nicht habe ich nicht das mache ich als secret das mache ich als secret

01:41:30.860 --> 01:41:39.020
minus epsilon ja ok also von der idee er sollte jetzt hetzner falls das funktioniert

01:41:39.020 --> 01:41:43.820
ich glaube nicht dass das funktioniert sekunde das müssen wir ausprobieren

01:41:43.820 --> 01:41:49.700
wo ist dann der key der ist als secret hier unter den unter den settings der

01:41:49.700 --> 01:41:53.820
gehört zwar logisch gesehen zum repo in github ist aber nicht geht geht

01:41:53.820 --> 01:41:56.820
mäßig eingecheckt

01:41:58.860 --> 01:42:02.900
das geht echt nice

01:42:08.540 --> 01:42:13.700
ok bildstab zack deploy hat es jetzt funktioniert mit dem

01:42:13.700 --> 01:42:21.580
install zudo abt moment moment hey das funktioniert hat er hat es

01:42:21.580 --> 01:42:25.060
installiert jetzt muss ich jetzt muss ich auch mein api key hinterlegen ok

01:42:25.060 --> 01:42:30.220
leute ich muss mit api key generieren da könnt ihr da könnt ihr jetzt leider

01:42:30.220 --> 01:42:35.260
nicht zugucken wenn ich mein api key generieren

01:42:35.260 --> 01:42:44.740
zack dürft ihr dürft ihr nicht sehen security

01:42:54.540 --> 01:42:59.140
api ich mache einen read api tauchen read only api tauchen ja aber ich will

01:42:59.140 --> 01:43:10.060
trotzdem nicht dass ihr den seht generate api tauchen read only heißt

01:43:10.060 --> 01:43:21.020
der read only api tauchen was generated und jetzt gehe ich auf github und werf

01:43:21.020 --> 01:43:39.220
das bei mir in die secrets rein als als haklaut oder so du secrets haklaut api

01:43:39.220 --> 01:43:56.500
machen wir jetzt add add secret ok wunderbar ok ich habe es geerdet ich kann

01:43:56.500 --> 01:44:11.700
euch jetzt wieder einschalten kann euch wieder einschalten ok also secret ist

01:44:11.700 --> 01:44:17.340
geerdet heißt haklaut underscore api ich muss übrigens mal hier meinen ganzen

01:44:17.340 --> 01:44:21.140
kram zu machen so das heißt ich kann jetzt hier sagen

01:44:21.140 --> 01:44:26.540
boah boah big brain time big brain moment das muss ich das muss ich das muss ich

01:44:26.540 --> 01:44:32.900
lokal machen haklaut wie funktioniert haklaut server list so das kriege ich

01:44:32.900 --> 01:44:43.500
alle server ausgespuckt ok ok ich will ich will die api alle server haben also

01:44:43.500 --> 01:44:48.260
ne big brain time leute jetzt jetzt jetzt jetzt jetzt jetzt könnte jetzt könnte

01:44:48.260 --> 01:44:51.660
was lernen wobei ich mir da auch nicht genau sicher bin wie das aussehen aussehen

01:44:51.660 --> 01:45:06.540
muss awk print was ist das 1 2 3 4 dollar 4 dollar 4 aber nur mit dem tag

01:45:06.540 --> 01:45:12.540
stimmt na gut ich habe aktuell in diesem projekt nur welche damit guck mal zack

01:45:12.540 --> 01:45:23.980
label stimmt stimmt list mit dem label brauchen wir jetzt label an und flack

01:45:26.940 --> 01:45:29.940
labels

01:45:29.940 --> 01:45:41.860
die gemmisch denn hier die labels aus unknown flack labels columns ah minus o

01:45:41.860 --> 01:45:54.780
boah jetzt wird es aber hier minus o labels ok da bin ich zu da bin ich jetzt zu

01:45:54.780 --> 01:46:00.100
low brain für output penny can be controlled minus o flack use minus o no

01:46:00.100 --> 01:46:03.580
header to suppress table header das finde ich schon mal gut das brauchen wir

01:46:03.580 --> 01:46:24.900
auf jeden fall klein doch kein header minus columns so

01:46:24.900 --> 01:46:34.780
kann ich sagen ip ip muss ich muss ich das jetzt muss ich das jetzt immer so

01:46:34.780 --> 01:46:46.340
machen oder wie es ist nicht ip es ist ip 4 4 und kann das kann ich nicht so

01:46:46.340 --> 01:46:57.380
hintereinanderschreiben doch so no header headers ich bin dazu ich bin ich

01:46:57.380 --> 01:47:06.180
bin also no ich war das no no header ich gebe dir header alter also ok ok

01:47:06.180 --> 01:47:14.340
wunderbar wunderbar ok also grepp also nur die mit keck wss service grepp nach

01:47:14.340 --> 01:47:20.020
keck wss service in der ersten zeile alles klar ich meine das sind jetzt alle

01:47:20.020 --> 01:47:24.540
die wir haben so und jetzt ok jetzt kann ich auch einfach sagen hier kratz

01:47:24.540 --> 01:47:51.580
delimiter leerzeichen feld 2 das kriege ich feld 1 tap ok abk was auch immer

01:47:51.580 --> 01:47:59.140
das ignoriert das ganze print dollar 2 das haben wir die ip jetzt haben wir die

01:47:59.140 --> 01:48:02.740
ip und jetzt und jetzt können wir folgendes machen jetzt können wir

01:48:02.740 --> 01:48:11.540
folgendes machen das wird eklig aber es funktioniert vor in den ip hier du

01:48:11.540 --> 01:48:20.780
echo dollar i dann ne aber jetzt nice ok und da drin können wir jetzt unser

01:48:20.780 --> 01:48:25.660
deployment machen big brain time alter massive brain time wenn das funktioniert

01:48:25.660 --> 01:48:31.460
dann beiß ich mir in arsch also sprichwörtlich nicht wirklich wo sind

01:48:31.460 --> 01:48:38.980
von hier also wenn das funktioniert wenn das ein zeiler easy wenn das

01:48:38.980 --> 01:48:53.980
funktioniert ok wie das schon ausschaut ok echt so flupp wir machen halbwegs

01:48:53.980 --> 01:49:03.340
schöne ausgabe echt so change innerdings deploy dollar i ach so ich brauche den

01:49:03.340 --> 01:49:11.540
api key hier noch drinnen moment moment ha klaut cli api key environment

01:49:11.540 --> 01:49:15.340
variable wie schreibe ich das da rein

01:49:15.340 --> 01:49:36.260
cf ne als vielleicht token wenn ich api key ha klaut cli api token environment

01:49:36.260 --> 01:49:48.420
variable doch bestätigt ha klaut token ha klaut token ok environment variable

01:49:48.420 --> 01:49:52.260
github actions leute ich habe es euch in ein paar videos gesagt google ist das

01:49:52.260 --> 01:49:56.180
wichtigste was ihr können muss was ist keck we as a service

01:49:56.180 --> 01:50:00.820
gehen wir drauf keck we punkt services geht man bei dir in browser ein dann

01:50:00.820 --> 01:50:14.820
wirst du sehen was es ist environmente ach hier entf entf day of week ok also das

01:50:14.820 --> 01:50:20.700
heißt wir wollen hier jetzt haben entf er gibt das ergibt das sind falsch

01:50:20.700 --> 01:50:25.940
eingerückt entf so und dann wollen wir nicht day of week haben sondern wir

01:50:25.940 --> 01:50:33.100
wollen ha klaut token haben also würde ich sagen rücken wir das mal so ein so

01:50:33.100 --> 01:50:44.620
und jetzt secrets secrets nicht in private key sondern ha klaut api habe

01:50:44.620 --> 01:50:57.260
ich das genannt alter ich beiß mir so in arsch wenn das funktioniert erste

01:50:57.260 --> 01:51:09.220
einreihen war korrekt glaube ich nett oder entf ist auf selben selber ebene

01:51:09.220 --> 01:51:24.580
wie steps tatsächlich nee man kann es da und da angeben

01:51:24.580 --> 01:51:30.060
nee hier reicht das hier reicht das ich brauchte es ja nur hier lasst dir nix

01:51:30.060 --> 01:51:34.620
erzählen genau anzeige ist raus abmahnung ist raus kündigung ist

01:51:34.620 --> 01:51:48.700
unterwegs so also dann kopieren wir das mal hier rein so ok also also ob das

01:51:48.700 --> 01:52:04.860
funktioniert facket also root add dollar e deploy dollar e dollar i habe ich

01:52:04.860 --> 01:52:09.420
noch sieht jemand noch irgendwo hardcoded ips drinstehen

01:52:09.420 --> 01:52:19.260
noch irgendjemand ne ne ok ok ob das ist ich beiß mir so in arsch wenn das

01:52:19.260 --> 01:52:25.060
funktioniert er actions aber wir eine prediction machen können

01:52:25.060 --> 01:52:35.580
wenn er prediction machen kann setup ja ja mach das interessiert mir nicht da

01:52:35.580 --> 01:52:43.700
wissen wir dass es funktioniert bild ok er bild bild deploy ok jetzt wird

01:52:43.700 --> 01:52:50.460
spannend jetzt wird spannend ab install ab install ja install ok gut deploy

01:52:50.460 --> 01:53:05.420
stop das funktioniert der deployed jetzt auf alle hetsler server drauf

01:53:05.420 --> 01:53:24.500
poggers das ist ja nice richtig 6 hat time huge guck mal alle der reihe nach so

01:53:24.500 --> 01:53:28.500
nice so das heißt jetzt können wir ausprobieren ob alles funktioniert

01:53:28.500 --> 01:53:31.980
achso moment das landet noch im falschen ordner das landet noch im falschen

01:53:31.980 --> 01:53:41.420
ordner das landet noch im falschen ordner das landet hier unter ssh das

01:53:41.420 --> 01:53:48.940
landet hier unter unter bild da ist es ja falsch das muss nach wo muss das noch

01:53:48.940 --> 01:53:59.860
mal hin home ab heck wie erstes service ok und dann muss es auch ab gehören ok

01:53:59.860 --> 01:54:07.580
es wird es wird auch noch ein bisschen eklig als gedacht also wim ok wir

01:54:07.580 --> 01:54:11.580
deployen jetzt den bild ordner nicht dahin sondern wir deployen bild nach ab

01:54:11.580 --> 01:54:17.660
heck wie erstes service und danach muss man auch ein chr und rüber machen

01:54:22.580 --> 01:54:28.020
es ist minus kleiner oder minus groß er wir machen übrigens mal einen break

01:54:28.020 --> 01:54:31.860
nach dem ersten weil ich nicht ewig warten will

01:54:31.860 --> 01:54:44.020
es groß er und sehr ist recursive tatsächlich

01:54:44.020 --> 01:54:54.420
moment ach so es ist ja muss per ssh gemacht werden natürlich

01:54:54.420 --> 01:55:00.340
ich habe zu viel gewimmt alter

01:55:00.340 --> 01:55:08.940
das können wir übrigens hier mit rein machen warum warum zwei warum zwei ssh

01:55:08.940 --> 01:55:15.140
kommandos wenn man eins machen kann kann er sind das nicht auch gleich zu

01:55:15.140 --> 01:55:22.580
hauen ich weiß es nicht er singt sie hauen gute frau kann das er singt

01:55:22.580 --> 01:55:39.420
for permissions to propagate unit perms minus p-flag and for owner unit owner group

01:55:39.420 --> 01:55:47.460
ok er singt owner group das ist mir zu hoch dass das mir zu big brain gewesen

01:55:47.460 --> 01:55:59.940
jetzt tupi the same as the source file nee nee nee nee nee zu hauen user group

01:55:59.940 --> 01:56:19.900
perfekt da war das doch er singt sie hauen app app wunderbar wunderbar ok also das

01:56:19.900 --> 01:56:24.100
sollte jetzt soweit funktionieren er holt sich alles aber die pleute ist stopp

01:56:24.100 --> 01:56:28.380
hack ws service erst um die app rüber übrigens hier sollten wir noch machen

01:56:28.380 --> 01:56:34.940
minus minus die lied dass er falls löst die es im source nicht gibt ich bin ja

01:56:34.940 --> 01:56:38.860
gar nicht so ok da bin ich mir nicht so sicher wenn an der datenbank drin liegt

01:56:38.860 --> 01:56:44.740
sq light oder so ist er weg danach das vielleicht keine allzu clevere idee

01:56:45.140 --> 01:56:53.020
so der stop das danach startet erst ich blick jetzt nur bei erst nicht durch wie

01:56:53.020 --> 01:57:04.740
die richtigen kommandos sind er singt der schiebt jetzt bild dahin muss ich kann

01:57:04.740 --> 01:57:09.860
ich den taget ordner irgendwie um benennen so und er singt kommen er singt

01:57:09.860 --> 01:57:23.020
dinger also jetzt heißt bild halt halt halt auch da bild kann ich nicht erst und sagen

01:57:23.020 --> 01:57:27.380
ich möchte ich möchte den kompletten bild ordner umbenennen nach keck ws

01:57:27.380 --> 01:57:34.540
service schauen wir mal ich würde es jetzt einfach mal aus mal gucken mal gucken was

01:57:34.540 --> 01:57:44.780
dann da rauskommt einfach bild slash

01:57:45.980 --> 01:57:50.060
ich keine ahnung er singt ist echt so ein buch mit sieben siegel ich kann ein paar

01:57:50.060 --> 01:58:08.940
dinger aber das kann ich mir immer nicht merken er singt rename er singt kann

01:58:08.940 --> 01:58:22.820
das will ich ja auch nicht hier link des ach du große scheiße was kann das ok es

01:58:22.820 --> 01:58:29.980
wird kopiert es wird wurde kopiert auf sekunde a scroll action zu viel so es

01:58:29.980 --> 01:58:35.820
wurde kopiert auf deploy auf den da ok schauen wir mal schauen ob das richtig

01:58:35.820 --> 01:58:47.740
gemacht hat jetzt ssh deploy key auf den da jetzt ok home ab keck ws service

01:58:47.740 --> 01:58:54.260
da ist ein fucking bild ordner drin ok chat ich vertraue euch dass ihr wisst

01:58:54.260 --> 01:58:59.180
was sie was sie was sie macht ich macht es jetzt so wie ihr das wie ihr das wie

01:58:59.180 --> 01:59:08.380
ihr das geschrieben habt m minus f home ab keck ws service bild ich weiß chat

01:59:08.380 --> 01:59:12.740
vertrauen ist immer so eine sache aber bei hat der chat schon jemals nicht recht

01:59:12.740 --> 01:59:17.060
fällt euch fällt euch was ein ja um ehrlich zu sein wir fallen bestimmt

01:59:17.060 --> 01:59:20.060
500 sachen ein oder chat nicht recht hat aber das kann nicht sein der chat hatte

01:59:20.060 --> 01:59:24.300
eigentlich immer recht meinst du einfach hier in den slash machen dass er das

01:59:24.300 --> 01:59:36.420
dann umbenennt da habe ich so meine zweifel dass das funktioniert ok

01:59:36.420 --> 01:59:46.180
schauen wir mal schauen wir mal ok

01:59:46.180 --> 01:59:50.300
gucken wir mal ob das jetzt funktioniert predict ich glaube es kriegen wir nicht

01:59:50.300 --> 01:59:56.380
mal schnell genug hin der job läuft schon nix mehr predictions

01:59:58.740 --> 02:00:01.740
predictions

02:00:02.980 --> 02:00:10.620
ja ok hoffentlich funktioniert es jetzt weil ich habe hunger und ich will dann

02:00:10.620 --> 02:00:14.420
noch einmal zeigen was es jetzt alles gebracht hat was wir gemacht haben weil

02:00:14.420 --> 02:00:17.820
es ist eigentlich ein richtig cooles setup

02:00:17.820 --> 02:00:23.660
guck mal das api token wird auch ausgegraut das ding ist richtig clever

02:00:23.660 --> 02:00:30.820
ok ssh auf welchem hat es jetzt gemacht hier 143 143

02:00:30.820 --> 02:00:38.780
home jetzt kommt der moment der wahrheit bild wie hat es jetzt funktioniert

02:00:38.780 --> 02:00:52.100
ernsthaft 20.27 na gut das war die ganze zeit schon da

02:00:52.100 --> 02:01:12.620
neunter 29 august 18 uhr das hat funktioniert leute das hat

02:01:12.620 --> 02:01:32.260
funktioniert so system ctl restart restart heck wie es service status

02:01:32.260 --> 02:01:40.740
funktioniert nice ok ok das bedeutet das ist ja cool das bedeutet wenn ich jetzt

02:01:40.740 --> 02:01:47.300
mal hier das break wieder raus nehme das bedeutet ok testen wir doch mal aus ob

02:01:47.300 --> 02:01:54.620
das funktioniert also machen wir mal eine änderung in keck wss service machen wir

02:01:54.620 --> 02:01:58.500
mal eine änderung keck wss service und lassen die deployen auf alle auf alle

02:01:58.500 --> 02:02:02.980
systeme so was was können wir machen für die

02:02:02.980 --> 02:02:07.780
änderung rein machen die man überall sieht habt ihr eine massive idee wir

02:02:07.780 --> 02:02:11.740
können das randomness wir können das randomness weg machen von null auf null

02:02:11.740 --> 02:02:16.620
um zu gucken ob es funktioniert so werden

02:02:18.380 --> 02:02:23.860
also die randomness von keck wss weg ich kann die background color nicht machen

02:02:23.860 --> 02:02:29.500
ich liefere das bild zurück und nicht etwa eine html seite aber ich mach ich

02:02:29.500 --> 02:02:33.300
mache ich mache die randomness ich mache die randomness weg also es heißt ab jetzt

02:02:33.300 --> 02:02:43.060
ist das bild immer gerade zum testen ok ja ja perfekt so wie kommenden das in

02:02:43.060 --> 02:02:51.060
jit pushen das geht nicht das ist ja keine html

02:02:51.060 --> 02:03:05.740
ok jetzt jetzt bin ich jetzt bin ich mal gespannt ob das funktioniert und mal

02:03:05.740 --> 02:03:10.060
gucken ob es der load balancer mitkriegt mit dem deployment ok wir lassen ihn

02:03:10.060 --> 02:03:16.220
jetzt im hintergrund deployen und gucken hier mal ok noch ist noch ist alles beim

02:03:16.220 --> 02:03:24.300
alten ja wiegt ihr kriegt trotzdem nicht raus

02:03:31.340 --> 02:03:34.540
load balancer

02:03:37.860 --> 02:03:44.820
ok was was macht die action es ist es deployed ok es deployed es fängt jetzt

02:03:44.820 --> 02:03:49.820
an ok

02:03:52.820 --> 02:03:56.660
ah guck mal guck mal

02:03:59.940 --> 02:04:03.060
die servicen die servicen sind kurz dauernd wenn man sollte ein bisschen

02:04:03.060 --> 02:04:07.100
warten zwischen dem deployen dass der service nicht nicht auf einmal weg ist

02:04:07.100 --> 02:04:14.100
dafür haben wir nämlich den load balancer nichts gemacht aber es sollte

02:04:14.100 --> 02:04:17.660
jetzt auch da guck mal der erste schon wieder da

02:04:19.100 --> 02:04:31.180
beim es funktioniert leute fünf server die pleite und jetzt kommen sie auch

02:04:31.180 --> 02:04:37.020
wieder ab langsam so jetzt war jetzt machen wir mal ein real jetzt war man

02:04:37.020 --> 02:04:40.740
realistischen realistischen workflow dass man sich mal so vorstellen kann wie

02:04:40.740 --> 02:04:46.100
cool das eigentlich ist jetzt also gehen wir noch mal kurz hier rein wir machen

02:04:46.100 --> 02:04:49.740
wir machen mal hier einen kurzen wir machen noch mal ein sleep rein so sleep

02:04:49.740 --> 02:04:55.340
30 30 sekunden oder so würde ich sagen dass nicht alle server oder mal 15

02:04:55.340 --> 02:05:01.620
sekunden das reicht eigentlich dass nicht alle server down sind also nach dem

02:05:01.620 --> 02:05:07.100
deployment sleep 15 sekunden so und jetzt fixen wir das wieder jetzt fixen das

02:05:07.100 --> 02:05:11.980
ist ja eindeutig ein back also wir haben hier back gefixt wir haben hier

02:05:11.980 --> 02:05:17.820
festgestellt ok red randomness war proppen also jetzt sagen wir geht jetzt

02:05:17.820 --> 02:05:27.060
kommets keine fix randomness randomness ich weiß gar nicht was man so schreibt

02:05:27.060 --> 02:05:31.500
jetzt sagen wir ok wir haben nice nice fix gemacht nach jetzt einfach nur geht

02:05:31.500 --> 02:05:40.500
push ganz wichtiger fix geht push direkt kontinuos agile delivery direkt

02:05:40.500 --> 02:05:48.660
produktion pushen bäm so fix ist raus github action erkennt das gepusht wurde

02:05:48.660 --> 02:05:56.900
läuft los fix randomness also agila geht es kaum noch agila geht so mit

02:05:56.900 --> 02:06:02.180
kubernetes cluster noch so aktuell seht ihr noch alles kaputt alles noch alles

02:06:02.180 --> 02:06:09.540
noch noch broken so aber das coole ist jetzt sollte der service nie down sein

02:06:09.540 --> 02:06:14.500
der service sollte immer funktionieren es sollte vielleicht sollten paar

02:06:14.500 --> 02:06:20.900
requests verloren gehen aber es sollte alles der reihe nach deployed werden

02:06:20.900 --> 02:06:24.460
also jetzt haben wir noch den kaputten service guckt der erste service ist

02:06:24.460 --> 02:06:31.140
down der erste service ist down und wird gerade deployed ok funktioniert alles

02:06:31.140 --> 02:06:36.940
ohne probleme weiter aber noch verbackt

02:06:39.100 --> 02:06:44.860
zweiter service ist down also ich hoffe der erste service kommt wieder ab bevor

02:06:44.860 --> 02:06:58.980
der letzte down ist weil ich in sleep 15 drin hab jetzt habt ihr es gesehen der

02:06:58.980 --> 02:07:03.620
erste service war schon wieder da wenn ich auf dem richtigen lande guckt der

02:07:03.620 --> 02:07:09.900
erste service schon wieder da der erste server mit mit fix ist am start

02:07:09.900 --> 02:07:15.820
es werden immer mehr systeme mit mit gefixtem je nachdem auf welchem

02:07:15.820 --> 02:07:20.380
back end ich lande und wenn alle backends wieder da sind ist der fix

02:07:20.380 --> 02:07:23.420
überall ausgerollt

02:07:28.300 --> 02:07:33.540
ist das nicht cool das ist doch richtig nice

02:07:33.540 --> 02:07:36.540
oh

02:07:46.940 --> 02:07:53.140
noch zwei stück verfügbar aber die zwei die zwei mit fix ist noch verfügbar

02:07:54.900 --> 02:07:58.820
so und da sieht man jetzt auch ein bisschen daran warum diese ganzen

02:07:58.820 --> 02:08:03.740
orchestrator geschichten wie kubernetes und containerisierung so beliebt

02:08:03.740 --> 02:08:08.940
geworden ist wenn du das im großen steel machst ist es halt richtig geil du

02:08:08.940 --> 02:08:12.820
hast was noch eine zwischenschicht die sich für dich um so was kümmert bei

02:08:12.820 --> 02:08:17.020
kubernetes würdest du einfach sagen ok wir haben jetzt besonders viele user und

02:08:17.020 --> 02:08:23.220
skalieren unsere container hoch von 5 auf 30 deployment laut balancer rein

02:08:23.220 --> 02:08:27.580
raus und es ist da dafür ist es halt ist es halt praktisch aber auf der anderen

02:08:27.580 --> 02:08:31.980
seite für so was kleines finde ich ist es relativ überflüssig weil du dich

02:08:31.980 --> 02:08:35.420
dann auch um irgendwelche cluster geschichten zusätzlich kümmern

02:08:35.420 --> 02:08:42.660
muss also ich finde für so einen kleinen service hier wie keck ws service ist

02:08:42.660 --> 02:08:46.460
das ziemlich das optimalste was man machen kann

02:08:46.460 --> 02:08:51.940
laut balancer mit zertifikat drauf fünf back end kisten das ist jetzt total

02:08:51.940 --> 02:08:55.300
übertrieben fünf back end kisten bräuchte da im leben nicht da würde da

02:08:55.300 --> 02:08:58.300
würden vielleicht da würdens also eigentlich bräuchte gar kein laut

02:08:58.300 --> 02:09:06.300
balancer dafür ja also

02:09:06.300 --> 02:09:10.260
sagen wir mal so wenn es jetzt der neueste shit wäre hier dass die

02:09:10.260 --> 02:09:15.460
gesamte welt keck ws service benutzen würde dann wäre das wäre das angebracht

02:09:15.460 --> 02:09:27.940
ja aber da müsste zugeben dass ein echt cooles setup jetzt dass du bringst

02:09:27.940 --> 02:09:32.020
vor davon was heute so heute abend so lahm ist das ist nicht nicht hetzner

02:09:32.020 --> 02:09:42.020
oder sonst was aber ich bin begeistert heute ich bin richtig begeistert massive

02:09:42.020 --> 02:09:51.380
poggers macht man einen push mit einem fix und zack bumm ist das deployed

02:09:51.380 --> 02:09:55.980
na gut wir haben maximal 10.000 connections auf dem laut balancer ich

02:09:55.980 --> 02:10:00.180
weiß nicht ob man hier die connection anzahlen sieht target crafts open

02:10:00.180 --> 02:10:03.900
connections ok ne wir sind nicht am connection limit wir sind nicht am

02:10:03.900 --> 02:10:08.580
connection limit wir können 10.000 connections haben gar kein problem

02:10:08.580 --> 02:10:21.580
in no problem life eine stunde

02:10:21.580 --> 02:10:24.580
ja

02:10:35.860 --> 02:10:39.860
richtig diagonal skaliert hier

02:10:39.860 --> 02:11:05.980
richtig 3d diagonal skaliert sehr schön sehr schön ich bin begeistert so ich kann

02:11:05.980 --> 02:11:08.780
euch jetzt bei der gelegenen noch mal eine sache zeigen wir haben hier

02:11:08.780 --> 02:11:15.580
relativ viele sinnlos kommens kommets produziert ich meine guckt euch das mal

02:11:15.580 --> 02:11:23.860
an unsere kommet history ist vielleicht nicht so so clean wie man das wie man

02:11:23.860 --> 02:11:26.660
das gerne hätte

02:11:26.660 --> 02:11:35.980
man sieht eine aktualisierungswut na ja

02:11:39.980 --> 02:11:46.020
sehr atomic aber man könnte man könnte jetzt beispielsweise das ein bisschen

02:11:46.020 --> 02:11:50.860
schöner machen ich könnte jetzt zum beispiel sagen ok wir machen mal wir

02:11:50.860 --> 02:11:56.460
fassen mal die kommets zusammen also sagen wir mal fix fix randomness war mal

02:11:56.460 --> 02:12:00.460
beispielsweise jetzt behalten also die einfachste variante ist wir sagen geht

02:12:00.460 --> 02:12:11.460
reset auf wir sagen geht reset auf das kommet wo wir die historie wegschmeißen

02:12:11.460 --> 02:12:15.580
wollen bei der wei das macht man nur das macht man nur wenn man der einzige ist

02:12:15.580 --> 02:12:20.420
der da dran arbeitet ja interactive rebase ist mir in dem fall zu viel

02:12:20.420 --> 02:12:23.780
arbeit so wir machen wir machen einfach ein reset und dann machen wir neues

02:12:23.780 --> 02:12:34.180
kommet und sagen jetzt status ich muss erst noch mal alles enden geht status

02:12:34.180 --> 02:12:40.900
jetzt ist gerne geht kommet minus a-m fix randomness die ich übrigens nie

02:12:40.900 --> 02:12:45.380
kaputt gemacht habe aber egal in dieser history bäm jetzt haben wir ordentlich

02:12:45.380 --> 02:12:52.020
history push rot zack mit neu deployed ach ja force pushen natürlich was

02:12:52.020 --> 02:13:05.220
sonst so muss es sein excellent

02:13:06.860 --> 02:13:13.380
so und nachdem mein master komplett sinnlos ist geht reset minus minus hart

02:13:13.380 --> 02:13:18.300
brot bäm push master

02:13:21.140 --> 02:13:27.300
gut sehr schön und jetzt haben wir jetzt jetzt die pleite zwar im

02:13:27.300 --> 02:13:30.620
hintergrund noch mal was relativ sinnlos ist deswegen macht man ja so was in

02:13:30.620 --> 02:13:33.580
master und ich in brot

02:13:35.300 --> 02:13:40.260
so und jetzt könnte ich wunderbar hier drin entwickeln und wenn ich fertig

02:13:40.260 --> 02:13:44.160
bin kann ich sogar noch in tech setzen wenn ich brauners cool sein will dann

02:13:44.160 --> 02:13:48.300
gehe ich hier einfach in mein pot branch merge master rein push port bäm geht

02:13:48.300 --> 02:13:54.860
ab action ab geht's die pläne im load balancer läuft die pläne läuft service

02:13:54.860 --> 02:14:00.980
geht runter aber er ist permanent noch verfügbar so muss es sein würde man

02:14:00.980 --> 02:14:04.620
nicht in der branche arbeiten und irgendwann pot mit ja master gleich

02:14:04.620 --> 02:14:10.420
deff kann man sich jetzt drüber streiten was man da weil es ist geschmacks frage

02:14:13.060 --> 02:14:22.020
auf github ist es auch in der regel so master ist gleich def oder main master

02:14:22.020 --> 02:14:30.620
darf man nicht mehr sagen oder was gibt es noch für alternativen main master

02:14:30.620 --> 02:14:40.780
trank es gibt es da sonst noch so für für master branche alternativen

02:14:42.980 --> 02:14:49.700
what are best alternativen main

02:14:55.940 --> 02:14:59.700
ich habe damit kein schmerz wenn mein gitter wenn meine git branche ist master

02:14:59.700 --> 02:15:06.180
branche oder juckt mich nicht ich habe mich da so dran gewöhnt und auf der

02:15:06.180 --> 02:15:09.140
arbeit lasse ich das auch weiterhin master weil wir genug scripts laufen

02:15:09.140 --> 02:15:13.020
haben die im master irgendwo hardcoded drin stehen haben unser deployment

02:15:13.020 --> 02:15:20.020
funst leute wie hat euch der stream gefallen ich fand war richtig poc

02:15:20.020 --> 02:15:25.300
wieder bei der gelegenheit noch mal kurz sellout shoutout dieser stream wurde

02:15:25.300 --> 02:15:32.260
gesponsert von hetzner ausrufezeichen hetzner im chat 20 euro startguthaben

02:15:32.260 --> 02:15:41.260
sichern für neukunden könnte selbst ein bisschen rum bauen aber denkt dran

02:15:41.260 --> 02:15:46.380
nix irgendwie relevantes in die cloud schieben also ihr wollt ja nicht wollt

02:15:46.380 --> 02:15:49.940
ja nicht üben mit irgendwelche linuxserver die im internet stehen und

02:15:49.940 --> 02:16:00.860
dann wichtige daten draufschieben macht kein scheiß und denkt nach davor aber so

02:16:00.860 --> 02:16:04.900
einfach bekommt ihr nie wieder 20 euro startguthaben außer bei meinem nächsten

02:16:04.900 --> 02:16:10.660
stream und am nächsten jahr wenn wir weitermachen mit hetzner sponsor ich

02:16:10.660 --> 02:16:17.020
dann auch die switch man windows tasten control

02:16:17.020 --> 02:16:22.620
feiltaste also windows tasten control drücken und feiltaste keck wie es ist

02:16:22.620 --> 02:16:26.300
service wer sich angucken will was wir heute getrieben haben geht er ja auf

02:16:26.300 --> 02:16:33.100
github kann sich das anschauen da ist der workflow drin da ist das

02:16:33.100 --> 02:16:38.820
ensemble playbook drinnen für die server natürlich könnt ihr damit nix

02:16:38.820 --> 02:16:45.500
direkt anfangen weil ihr nicht meine ap keys habt was er auch so sein soll

02:16:45.500 --> 02:16:51.020
ja und keck keck wie es das service ist am start leute

02:16:52.220 --> 02:16:59.780
so jetzt werden wir noch mal eine sache machen die ns konsole wir die liten wir

02:16:59.780 --> 02:17:02.660
die lieten die records

02:17:05.220 --> 02:17:12.260
und ich lösche den load balancer weil ich will dafür kein geld bezahlen

02:17:12.260 --> 02:17:21.060
ich habe kein bock dass sie mir geld abziehen für was man sich einfach nur

02:17:21.060 --> 02:17:25.940
testweise temporär aufgebaut hat keck wie es das service ist da und no also

02:17:25.940 --> 02:17:28.860
leute wenn ihr keck wie es das service vermisst ihr könnt euch das github

02:17:28.860 --> 02:17:34.260
repo auschecken und lokal laufen lassen ja

02:17:34.260 --> 02:17:44.420
so und server weg zack boom

02:17:53.260 --> 02:17:56.740
ich muss sagen das hänstner klauzeug auch guilletechnisch ist das echt gut

02:17:56.740 --> 02:18:06.380
durchdacht zack infrastructure ist code na ja ein bisschen haben wir ja mit

02:18:06.380 --> 02:18:10.820
unserem end simple playbook schon was das nächste mal machen wir dann big

02:18:10.820 --> 02:18:14.460
brain kontainerisierung eventuell vielleicht machen wir auch noch einen

02:18:14.460 --> 02:18:20.180
anderen stream dazwischen muss die surfer push noch automatisch bauen lassen wenn

02:18:20.180 --> 02:18:28.260
sie nicht da sind nee ist glaube ich keine so gute idee

02:18:31.820 --> 02:18:36.500
kein select all das ist absicht du willst kein select all bei server

02:18:36.500 --> 02:18:40.220
löschen machen das ist schon absicht

02:18:40.220 --> 02:18:54.180
gehe ich davon aus ja nice leute also wir sehen uns guckt mal bei meinem link

02:18:54.180 --> 02:18:58.860
vorbei löst den code ein wenn ihr euch auch ein bisschen austoben wollt und wir

02:18:58.860 --> 02:19:01.700
sehen uns leute im nächsten stream bis denn macht's gut

02:19:01.700 --> 02:19:10.700
zu

