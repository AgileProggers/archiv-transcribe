Das war's für heute.
Test, Test, Test.
Funktioniert das noch?
Funktioniert das noch?
Funktioniert das noch?
Funktioniert das noch?
Funktioniert noch.
Man weiß ja nie.
So Leute, sind wir wieder am Start.
Haben wir Quality Options?
Haben wir Quality Options?
Nein, wir haben keine Quality Options.
Get wrecked.
Von Twitch wieder.
Voll jebaited.
Jebaited.
Weil die gibt's besser auf Kirby Musik.
Barbie Musik.
Progas Hype, so sieht's aus.
Oh, ich muss noch was zum Trinken holen.
Wir machen heute sowas wie eine iOS App.
Allerdings webpassiert.
Weil ich keinen App Store Account hab.
Also keinen Apple Developer Account für 100 Euro.
Ist das Kirby Weihnachtsmusik oder was hat sich heute echt passend an?
Ist das Kirby Weihnachtsmusik oder was hat sich heute echt passend an?
Ja, kauft mal.
Hab ich eigentlich gar keinen Bedarf für.
Weil ich es jetzt eben webbasiert mache.
Weil ich es jetzt auch auf Android Tablets verwenden will.
Und Apple ist das neue Microsoft.
Was Technologien angeht.
Das ist echt krass.
Die sind bei so vielen Sachen massiv hinten dran.
YouTube Money Eats ist doch da.
Genau, weil ich so viel hochgeladen hab auch.
Swift ist wahrscheinlich noch das beste.
GWOZ 13 Kuschrenade.
Ach du Scheiße.
Soll ich das aussprechen?
Swift ist wahrscheinlich noch das beste da dran.
Aber Apple ist mittlerweile so hinten dran bei vielen Sachen.
Der neueste Trend ist ja, das machen wir jetzt nämlich auch.
Ich bin ja bekannt dafür, dass wir immer die neuesten Trends machen müssen.
Der neueste Shit bei Mobile Development sind ja PWA's.
Also Progressive Web Apps.
Und wir hatten es erst letztens im Stream das Thema,
dass sich wahrscheinlich der Browser immer mehr durchsetzen wird.
Sofern er sich nicht eh schon komplett durchgesetzt hat.
Ja, Xcode ist grausam.
Das haben wir mit den Entwicklern gesehen.
Lustigerweise unsere ganzen Java Programmierer auf der Arbeit.
Alles Typen.
Auch alle schon ein bisschen älter.
Und unsere iOS Entwickler.
Alles Grills.
Ein Typ oder so.
Und junge Grills.
Also sprich, da kann man mal sagen,
der junge hippe Zeug,
Appentwicklung, alles Grills.
Und so das oldschool Java Zeug.
Alles alte Typen.
Und die Coil Musik.
Ja.
Und Cobol bei uns auf der Arbeit
ist auch so alles noch ältere Typen.
Bis auf ein Mädel.
Die hat mir die Ausbildung gemacht.
Die hat gesagt, sie macht Cobol.
Das habe ich glaube schon fünfmal erzählt oder so.
Sie macht Cobol, weil sie damit Kohle verdienen kann.
Und es ist ja auch eine valide Ansicht.
Wenn man sagt, hey, Scheiß drauf.
Ich brauche da keinen Spaß bei.
Da kann man das ja schon mal machen.
Also der neueste Shit,
was Mobile Development angeht,
ist ja hier.
Progressive Web Apps.
Und man sieht so ein bisschen,
dass iOS und vor allem Safari und Apple
so diese Mischung da.
Dass das quasi das neue Microsoft Internet Explorer ist.
Wenn man sich anguckt,
was du unter so ziemlich jedem Betriebssystem
schon für schöne Sachen
im Browser machen kannst.
Apple geht nicht.
Aber das ist voll hinten dran.
Oh, die Kölbemusik ist mir zu.
Ah, ist schon vorbei.
Es gibt irgendwie so eine Seite.
Ich habe vergessen, wie die heißt.
What's possible in Browser.
Oder irgendwie sowas heißt die Seite doch.
Update my Browser Org, war es das?
Nee, wie hieß die denn?
Es gab so eine Seite,
die dir schön anzeigt,
was man can I use ist.
Nee, das meine ich nicht.
Es gibt speziell so eine Seite,
die dir quasi anzeigt,
was für Native Sachen der Browser schon kann.
Auf unterschiedlichen Plattformen.
Also sprich so etwas wie Camera Access,
Mikrofon Access, OpenGL, WebAssembly.
Da gibt es so eine extra Seite für.
Da sieht man, wenn man sich das anguckt,
dass es komplett kann.
Das ist wie gesagt ein neuer Internet Explorer.
Das ist nicht can I use gewesen.
Bei can I use sieht es beim Safari gar nicht mal so schlecht aus.
Ich meine, das ist unter der Haube, glaube ich,
ein WebKit, oder?
Ja, ne?
WebPos, sagt mir mal.
Stimmt das?
Ich glaube, das war ein WebKit Safari.
All die Kirby Musik, die macht mich ja ganz verrückt.
Nee, can I use meine ich nicht.
Wobei man auch schon sieht,
da ist das Safari auch schon hinten dran.
Nur noch der Edge hinterher.
Wo ist denn die Übersicht gewesen?
Compare browsers.
Nee, aber das meinte ich nicht.
Es gab so eine schöne
Seite.
Wie hieß das denn die Seite?
Jetzt geht es ab.
Es geht ab.
Ich weiß leider nicht mehr, wie die Seite heißt.
Ich habe das letztens erst gefunden.
Die hieß irgendwie so
What's possible native oder so ähnlich.
Und das war richtig cool zu sehen.
Den Guide zu WebRTC in Safari habe ich auch gelesen.
Das ist teilweise schon echt
haaresträubend, wie man das macht.
Ja, wir machen dazu übrigens WebRTC.
Also, könnt ihr alle zugucken.
Weil dazu gibt es keine ordentlichen Tutorials.
Und das ist der neueste Shit.
Ach so, ja genau.
Eigentlich wollte ich
eine Progressive Web App machen.
Und das mache ich auch.
Und die wird allerdings nur auf Android
und auf allem außer Safari richtig funktionieren.
Beziehungsweise auf allem wahrscheinlich
außer Safari iOS.
Weil Apple sich überlegt hat,
trotz iOS 12.
Das ist das, worauf ich eigentlich raus wollte.
Die ich nicht mehr finde.
Apple ist auf die glorreiche Idee gekommen
und hat gesagt, ja, wir unterstützen
ja jetzt schon seit iOS 11 irgendwie
Progressive Web Apps
alles geil, dass wir auch passwordmäßig
dabei sind. Allerdings
alles, was das braucht, unterstützen wir nicht.
Wo ist die Logik davon?
Apple. Also sprich, wenn man
mal Stack Overflow guckt, Camera.
Wenn man da mal nachsucht,
überall tut das.
Das Ding ist voll damit,
dass, guck hier,
dass es nicht funktioniert.
Das Zeug unter iOS.
Es tut nicht.
Zum Beispiel, eines der Vorteile davon
ist halt, dass du
im Prinzip
ist eine Progressive Web App ein schönes
App von, ich glaube, Google,
um
eigentlich ganz normale
Web Apps zu promoten,
dass man sie zum Homescreen
hinzufügen kann. So im Prinzip.
Also viel mehr ist da nicht drum herum.
Es gibt noch die Möglichkeit,
dass du im Hintergrund ein bisschen was ausführen lässt,
aber das kannst du im Browser genauso machen.
Also eigentlich ist das eine quasi
innen Launcher-Icon
verpackte Desktop-Anwendung
im Endeffekt.
Hallo Flow 96.
Also viel mehr ist da bei der ganzen Sache nicht dabei.
Aber das ist natürlich cool
für den Anwender, weil
mittlerweile sind die Leute so drauf gedrillt,
wenn sie was suchen, gehen sie in den App Store
und wenn es eine App gibt,
dann stehen sie drauf. Die App,
die wollen ja eine Webseite verwenden, die wollen
eine App verwenden, auch wenn die meisten Apps,
guckt euch die mal an, die meisten Apps
von den 0815-Diensten sind
gebrakte Browser.
Da ist nichts dabei. Das kannst du genauso gut im Browser
sehen. Genauso gut, genauso schlecht.
Und da haben sich die Leute
einfach dran gewöhnt.
Und der Vorteil ist vor allem, dass
es auch als eigene Anwendung gilt
für sowas wie Splitscreen oder so.
Also im Prinzip ganz cool. Problem ist,
jetzt kommt Apple um die Ecke und sagt, ja okay,
du kannst natürlich
deine Progressive Web App zum Launcher
hinzufügen. Das ist überhaupt kein Problem.
Allerdings Kamera
und Mikrofon Access gehen nicht.
Also quasi gerade
die native
Schnittstellen vom Browser, die man
braucht.
Bitte Musik. Oh, es sieht so...
Das ist die Stream-Einstellung, ey.
Alter, die Kirby-Musik,
die geht aber ab. Die ist einfach zu laut.
So, ha?
Ja, so.
Wo wollen wir denn stehen geblieben?
So, und deswegen gucken wir mal, wie weit wir damit
auf Apple, wie weit wir damit
kommen. Im Zweifelsfall werde ich halt
im Safari verwenden
und halt nur auf Android
zum Homescreen
adden.
Wir brauchen eine Web App
für Mods, um deine Audio-Einstellung zu tweaken.
Das ist eine sehr gute Idee. Problem
ist nur, da muss ich ganz besonders vorsichtig sein,
nicht, dass irgendwelche andere Leute auf einmal meine Audio-Einstellung
tweaken.
Die Musik macht mich fertig.
Na gut, ich finde, ich sei jetzt nicht.
Also wir fangen jetzt mal ganz
einfach damit an, dass ich versuchen
werde, von meinem iPhone
ich leg mal die Kamera wieder
dahin, dass man das hört.
Der Aufkleber ist immer noch drauf,
also ihr müsst euch keine Achtung auf den Max
Webcam aus Versehen Reveal machen
oder so.
Also ihr kennt ja noch das letzte Programm.
Da muss ich jetzt mal die Kirby, muss sie kurz ein bisschen
ausmachen, dass das funktioniert.
Das, worum wir das letzte Mal
experimentiert haben, war ja
folgendes. Und zwar
hier meine
Schiener Türsprechanlage.
Meine Schiener Türsprechanlage
mit Kamerabild anzeigen
und die Gegensprechfunktion.
Also das funktioniert, ich habe es noch abgeklebt.
Und die Gegensprechfunktion.
Man hört es, ne?
Also, bla bla.
Ich glaube ihr hört es. Also die Gegensprechfunktion
funktioniert.
Und das Ziel des Ganzen ist ja
jetzt nicht, dass es etwa auf dem Desktop funktioniert.
Sondern
warum ich den ganzen Akt eigentlich
mache, ist, dass man es
vom Telefon
und vom Tablet
und von iOS Geräten und von Android
Geräten verwendet.
Das ist ja der ganze Sinn
bei der ganzen, bei der Sache.
Und deswegen werden wir jetzt mal probieren,
ob ich es hinkriege,
dass ich
mit dem
iPhone
mit der
Kameragegensprechanlage
gegensprechen kann.
Und dann müssen wir im Prinzip das
machen, was ich hier auch, also
was wir in der Windows
Anwendung gemacht haben.
Und wir basteln
mal nochmal, zum ausprobieren, wie das
funktioniert, machen wir nochmal
eine Konsolenanwendung
oder sowas auf. Und probieren
das mal aus.
So.
Und wenn wir dann genau wissen,
wie der ganze Krempel funktioniert,
dann
machen wir da irgendein iOS
bzw. irgendein Webzeugs
draus.
Konsolenapp. Achso, ich könnte
nochmal auf Twitter posten,
da ich am Start bin.
So.
Ok. Wunderbar.
So.
So, passt die Musik jetzt von der
Lautstärke jetzt immer noch zu laut?
Das müsste eigentlich gehen jetzt.
Noah9013,
warst du beim letzten Streben dabei?
Wenn nicht, kann ich dir nochmal
kurz erklären. Und zwar, ich habe mir
so eine Billig-China-
Kamera gekauft. Hier sowas. Das ist keine
Billig-China-Kamera, das ist eine
China-Tür-Gegensprechanlage.
Das Ding.
Die sieht hässlich wie die Nacht aus.
So. So schaut das Ding aus.
Aber sie ist vandalismus-resistant.
Also wenn einer von euch
bei mir vorbeikommt und sich denkt,
ihr Max wollt ihr schon immer mal die Türklingel einschlagen,
dann funktioniert das damit nicht.
So. Und das Problem dabei ist,
ich kann es ja auch nicht zeigen,
für alle, die jetzt neu dabei sind,
dass alle wissen, was die Sache ist.
Moment, habe ich meine
V-M schon auf? Ich habe meine V-M schon auf.
Ja klar, habe ich meine V-M schon auf.
So. Und das Problem an dieser Kamera ist,
Windows, please.
Windows.
Wie ist das?
Okay. Wir müssen hier noch das V-M neu
starten, dass ich dir das zeigen kann.
So. Und das Problem an dieser
Kamera ist jetzt, dass es keine
ordentliche Möglichkeit gibt, die zu verwenden.
Ich meine, die Hardware funktioniert,
aber so wirklich
funktioniert das Ganze nur mit der Hersteller-
Software. Die Hersteller-Apps
sind die größte
Größe, die ich jemals gesehen habe.
Das werde ich im Leben nicht verwenden.
Und ansonsten, die Alternative
ist ein ActiveX-Plugin.
Das habe ich schon gesagt, muss ich dir auch noch einmal zeigen.
Ein ActiveX-Plugin für den Internet-Explorer.
Das weinen die
Chinesen ernst, in dem Fall.
Und nachdem ich weder
Bock habe auf diese komischen China-
Handy-Apps, die will ich ehrlich gesagt überhaupt nicht installieren,
noch auf ein ActiveX
Internet-Explorer-Plugin, was ja nur
mobile auch nicht funktioniert, kann ich mich wieder ausmachen,
ist
ziemlich blöd.
So, und deswegen
bastle ich eine eigene App
bzw.
ein eigenes Programm
für die Gegensprechfunktion
von meiner Kamera, wo wir das letzte Mal
ausprobiert haben, wie es prinzipiell funktioniert.
Das ist mehr oder weniger alles.
Das ist jetzt halt rein
Windows-basiert noch,
weil ich einfach ausprobieren wollte,
wie es geht. Hier hast du
den Feed von der Kamera. Man sieht auch, wenn ich die Hand
mache, ist dunkel.
Wenn ich hier auf Play drücke,
dann habe ich die, man hört es,
Gegensprechfunktion aktiviert
von der Kamera.
Das funktioniert. So, und das letzte Mal haben wir herausgekriegt,
was man machen muss, wie es funktioniert.
Und heute probiere ich mal,
dass ich mit dem
iPhone die Gegensprechfunktion
von der Kamera verwenden kann.
Hat man das verstanden?
VirtualBox
oder Vmware? Was findet ihr besser
Vmware?
VirtualBox ist,
wenn es nix kosten darf, okay.
Also,
ganz nice. Ich habe
eigentlich auf den meisten
Systeme, also die meisten Linius-Kisten
auch noch VirtualBox installiert.
Aber ich finde,
sowohl von der Performance
als auch von der Technik, die drunter ist
und wie sie sich integriert, finde ich Vmware
eine ganze Ecke besser. Vor allem
für Desktop.
Aber für iPhone-Apps brauchst du doch
einen Mac. Nicht, wenn man eine
Progressive-Web-App macht.
Wir machen eine Progressive-Web-App,
die für Android funktioniert,
für iOS funktioniert
und für
Windows funktioniert und für
Linux funktioniert und für
alles funktioniert. Im Prinzip wird das ja
eine sehr
rudimentäre App. Also, ich habe mir
die letzten Tage wirklich
jedes Tutorial für WebRTC
gelesen.
So ziemlich
alles, was es gibt.
Und ich kann jetzt
WebRTC, kann ich Video
übertragen, peer-to-peer, ordentlich.
Und vor allem halt auch
vom Server streamen. Also, ich habe hier so,
ich zeige es euch mal, gibt es richtig cooles
Projekt. Ich habe mir
hier einen, das läuft
später auf dem Raspberry. Das habe ich schon ausprobiert.
Das ist das, was ich letztens so lange kompiliert habe.
Es gibt hier einen WebRTC
Gateway.
Nennt sich Janus das Ding.
Und damit
kann man quasi
nicht, also vielleicht soll ich erst einmal
erklären, was WebRTC ist. WebRTC
ist eine Technologie,
ist eine Realtime-Geschichte
für P2P-
Vernetzung,
Video-Video zwischen Endgeräten.
Also zum Beispiel könnte man damit relativ
einfach einen Video-Chat-Raum
machen.
Aber ich muss mal Kirby wirklich ein bisschen leiser machen.
Oh, und danach
müssen wir Epic-Core hören.
Zum Beispiel könnte man mit WebRTC
relativ einfach
eine Video-Video-Audio-
Chat-Funktion basteln,
wo die Geräte untereinander
sich unterhalten. Das heißt, die Latenz ist relativ gering.
Die Sache ist jetzt die,
zwischen Geräten an sich
bringt mir jetzt nicht allzu viel.
Ich möchte ja quasi
mein Bild von der Kamera
mit möglichst
niedriger Latenz streamen.
Auf eine Webseite.
Moment.
Und dazu
mit möglichst geringer Latenz das Audio.
Und um das zu bewerkstelligen,
zeige ich euch hier mal das Beispiel.
Also wenn man jetzt hier zum Beispiel
auf...
Machen wir mal einen Firefox auf.
Machen wir den hier zu.
Ich habe da die Demoseiten
im Prinzip nur drauf bis jetzt.
Das ist das Webfrontend von diesem WebRTC-Gateway.
Ja, es ist not secure.
Ich weiß.
Wobei geht es im Firefox überhaupt nicht.
Ich glaube, im Firefox...
Firefox geht es nur, wenn ich
DNS-Auflösungen habe.
Machen wir es mal hier.
Muss...
Ja, ja.
Unsichere Zertifikate.
Genau, das ist das Demo da vorne.
Man kann es relativ einfach
Audio-Video-Calls hier drin testen.
Wenn ich jetzt hier auf Streaming gehe,
da habe ich schon die Kamera drin.
Okay, erlauben wir mal den Zugriff auf mein Mikrofon.
Streaming, Stream auswählen.
Und dann...
Ach so, ja, ich sollte den Kamerastreamer starten.
Ach so, ja, weil die Twitch mir
heute mal wieder keine Quality Options gönnt.
Ich muss das...
Ich muss das Kamerastreaming anwerfen.
Wartet mal kurz.
Ich muss das Kamerastreaming anwerfen.
Wie habe ich das gemacht?
RTSP Bloop...
Map.
Ja.
Das ist die richtige Uhr.
Ich hoffe,
dass es die richtige ist.
Ja.
Localhost.
So, ich hoffe, das stimmt jetzt, was ich getrieben habe.
Normalerweise sollte hier das Kamerabild von Kameraden gezeigt werden.
Ah, Moment.
Ich habe hier meine Settings vorhin umgestellt.
Worauf ich raus will bei der ganzen Geschichte.
Ich sollte jetzt nicht so sehr kaputt machen,
weil...
Wenn ich es kaputt mache, ist blöd,
dann kann ich...
später dann mal ausprobieren.
Wie war das?
Plugin Streaming.
Ah, ich habe das Videozeug ausgeschaltet.
Lull.
Lull.
So, ich glaube,
das musste man anschalten.
So, dann kann ich euch das zeigen.
Das zeigen.
Okay, mal gucken, ob es jetzt funktioniert.
Ups.
Video Room.
Ach, Quatsch, nicht Video Room.
Streaming Room.
Genau, da haben wir das Kamerabild.
So, wie gesagt, die Kamera ist immer noch abgeklebt.
So, und die Latenz ist halt super...
Guckt es euch an.
Die Latenz ist halt super gering,
wenn du das Ganze über Web-ATC streamst,
weil das macht halt nicht einen Umweg
über zig Handshakes und zig Pakete und sonst was.
Sondern das ist alles UDP
und das ist alles UDP,
das ist alles UDP,
und das ist alles UDP,
und das ist alles UDP,
das ist alles UDP,
das ist ganz furchtbar abgerähte Technik Web-ATC,
das ist ganz furchtbar abgerähte Technik Web-ATC,
die haben da auch
eine Implementierung zwischendurch,
die sich da auch eine Implementierung zwischendurch,
jetzt haltet euch fest,
jetzt haltet euch fest,
und letztens hab ich was gelesen auf TCP,
und letztens hab ich was gelesen auf TCP,
ne, doch TCP über UDP.
Was, was, um den los?
Wenn zumindest möchte ich halt über WebRTC quasi Video von der Kamera streamen und Audio
von der Kamera streamen und vom jeweiligen Endgerät dann das Mikrofon an die Gegensprechanlage
zurück.
So.
Und das ich weiß wie das funktioniert, muss ich jetzt noch ausprobieren, wie ich den Sound
von, wo sind wir hier, da, wie ich den Sound jetzt vom iPhone auf die Kamera bekomme.
Also wenn ich ins iPhone rein labere, wie ich dann das rein bekomme.
Doch, das kann man runterstellen, das kann man einstellen, kannst Rate Limit machen,
wenn du willst.
Das ist ja nur die Demo Seite, kannst du Rate Limit machen, was mache ich, zeigste, kannst
du hier, hier haben sie es beispielsweise drin, wenn du im Videorum bist, im Videorum kannst
du hier einstellen, Bandbreite.
Hi Max, ich wurde gestern von einem 12-Jährigen angeflossed, was ist denn mit der Jugend los?
Mit der Jugend ist genauso viel los wie früher auch, da musst du gleich zeigen was Sache
ist.
Piss dich alter.
Ja, ok, Leute, habt ihr sonst auch noch Probleme mit dem Stream?
Schelle gegeben, so ist richtig, habt ihr Probleme mit dem Stream, soll ich nochmal
neu starten und gucken, dass ich Rollety Options kriege.
Also es läuft jetzt aktuell bloß vom Cheat 125, ich starte mal neu, komm.
Wir sind solidarisch, wir sind solidarisch, wir starten neu für einen, also wenn es dann
nicht geht, ist halt doof.
Schaue auf 65 Zoll 4K, nicht schlecht.
Ok Leute, ich bin gleich wieder da, guck mal, ob das jetzt mit Quality Options funktioniert.
Aber mit 6 MBit sollte das Stream laufen, guck mal, so gerade, gerade so, ha, wartet
mal, wartet mal, kann man im laufenden Betrieb die Bitrate runterstellen, wartet mal kurz,
das gucke ich mir jetzt mal an, kann ich jetzt sagen, Bitrate, weil für Desktop reicht
ohne Probleme 5000, oh nice, das geht, Leute, ja, Bitrate geht runter, jetzt kannst du den
Stream auch gucken.
Das ist ja nice in OBS, man kann mittlerweile die Bitrate im laufenden Betrieb anpassen,
das ist cool.
Das ging, soweit ich mich erinnern kann, früher noch nicht.
CrimeCurryKing, das sehe ich, ich habe auch öfters, bei mir am Südbahnhof bin ich auch
letztens zurückgelaufen zum Zug und da ist so eine Gruppe, so ein kleiner Hüpfer, ist
auf die Straße gesprungen, da wo gerade der Bus gestanden hat und hat diesen Loser-Dance
von Fortnite gemacht, das ist so dumm, dumm, dumm, dumm, ich habe nichts gegen Fortnite,
überhaupt nichts.
Ich habe eigentlich auch nichts gegen die ganzen Kinder die Fortnite spielen, aber irgendwie
wieder streben mir einen Haufen Zwölfjährige die Loser-Dance machen auf der Straße.
Wo bin ich denn jetzt stehen geblieben beim Erzählen?
Genau, also wie gesagt, wir probieren jetzt ob ich irgendwie den Sound von meinem iPhone
auf die Kamera bekomme und so zur Erklärung, wie das Ganze funktionieren wird, ich habe
mir hier diesen, weil komplett selbst WebLTC mache ich bestimmt nicht, ich habe mir hier
diesen Media-Server installiert und den habe ich eingestellt, dass der mir aus dem Video-Demo-Ruhm,
wie gesagt, die Oberfläche mache ich dann, wenn ich weiß wie alles funktioniert.
Im Prinzip wird die App folgendermaßen aussehen, wahrscheinlich einfach ein Viereck wo drauf
steht wenn einer klingelt, Achtung, Achtung, dann schicke ich über irgendeinen Push-Dienst
an die Geräte, schicke ich eine Nachricht, dann kann soviel Nachricht draufklicken und
dann geht die, ach kennt ihr das überhaupt, es gibt jetzt für iOS gibt es jetzt, wie
heißt das, Deep Link oder irgendwie so, oh das ist jetzt Trick 17, das könnte euch wirklich
was bringen wenn ihr mal sowas in der Richtung programmieren wollt und zwar es gibt unter
iOS gibt es die Möglichkeit, dass du mit einem Link, weil die sind ja bei Apple super restriktiv
was du machen kannst, also sprich unter Android ist es ja überhaupt kein Problem, dass ich
mit Tasker im Hintergrund einfach eine Anwendung öffne bei irgendeinem Signal, ja, das ist
ja wirklich überhaupt kein Ding, aber das geht unter iOS nicht, warum iOS, es ist nicht
nur iOS, ich muss es für alles in dem Fall machen, ich habe zwei iOS-Geräte, ich habe
einige Android-Geräte, Linux Windows, das einzige was mir fehlt ist ein Mac, aber ich
werde mir wohl auch kein Mac holen, das heißt die Türklinken sollte schon überall funktionieren,
was wollte ich sagen, genau, links unter iOS und zwar Apple ist halt sehr restriktiv und
es gibt eine Möglichkeit, wie man Apps öffnen kann, wenn sie das unterstützen, das nennt
sich xCallbackUrl, das ist natürlich schön kryptisch, wie das alles so ist unter iOS,
ok, die Seite geht nicht, die haben eine Übersicht von Apps, die das alles unterstützen, zum Beispiel
ist da unter anderem was dabei, VLC ist dabei, so, das heißt wenn ihr einen Push-Nachrichten-Dienst
habt, es ist egal über was ihr Push-Nachrichten schickt, glaubt ihr, ihr könnt Push-Nachrichten
an iOS schicken, ja, also sei es über eine App, zum Beispiel Discord oder so, die installiert
es, die das schon anbietet oder über die Home-Assistant-App oder über Push, wie heißt das, Push-Bullet,
nee, Push-Over, Push-Over, irgendein Push-Dienst, da könnt ihr eine Url verschicken, die quasi
so eine xCallback-Url aufruft mit VLC und das sieht dann so aus, muss ich mal ein Beispiel
suchen, genau, dann schickt ihr so eine Url quasi in der Push-Nachricht an euer iOS-Gerät
oder halt an die iOS-Geräte, wie auch immer, ist egal, und dann bekommt derjenige auf seinem
iOS-Gerät eine Push-Nachricht mit dieser Url drin und ihr könnt auch einfach, man kann
Titel vergeben, Message vergeben und Url vergeben, das heißt man sieht die Url so gar
nicht, man kann dann sagen, ich titel Bloop, Message Bloop in der Push-Nachricht und wenn
dann der User, und das ist halt Policy von Apple, jegliche Sachen, die was machen, müssen
durch User-Aktionen ausgelöst werden, das was halt iOS-Geräte für Automatisierung komplett
useless macht eigentlich, komplett, dadurch durch diese Policy, dass jede Aktion nur durch
eine User-Geste ausgelöst werden kann, kannst du nichts ordentlich automatisieren auf iOS,
es geht einfach nicht, das ist auch nicht gedacht von Apple und ich verstehe zum Beispiel
nicht, warum sie es nicht erlauben mit explizit okay geben, macht Android ja auch so, aber
das ist halt Apple-Philosophie dahinter, also und damit kann man zumindest auf eine Push-Nachricht
das richtige Programm öffnen unter iOS, das ist schon mal ganz praktisch, ja, also
ich könnte jetzt zum Beispiel ohne, dass ich selbst was programmieren müsste, könnte
ich mir eine Push-Nachricht schicken, wenn es klingelt und ich würde mir beispielsweise
die Url zu VLC als Push-Nachricht schicken, die Push-Nachricht anklicken auf iOS und
ich hätte einen VLC mit der RTSP-Url zur Kamera gestartet und würde zumindest das Bild
sehen, das würde funktionieren, so aber jetzt wollen wir ja mal probieren, ob ich irgendwie
schaffe das Mikrofon von meinem iPhone irgendwie an die Kamera weiter zu leiten, ja, moin HeroLP,
genau und ich habe diesen Media-Server so eingestellt, dass der mir alles zum Testen
hier an meine Windows-Kiste an Traffic weiterleitet und wenn wir wissen wie es funktioniert, dann
mache ich ein Webinterface, was ich auf allen Geräten und halt auch vor allem auf iOS verwenden
kann, das wird dann einfach eine Kiste, wo drauf steht es klingelt und du klickst dann
hier drauf, hier jetzt Gegensprechen aktivieren, dann klickst du drauf und dann fragt er dich
ob du willst und dann kannst du mit dem Typ an der Tür labern, soweit von der Theorie
her, ok, also wir kopieren uns mal ein bisschen was von unserem China-Audio raus, genau, ne
wir kopieren uns mal mit was, wir fangen am besten jetzt mal ganz einfach an, ich werde
jetzt mal mein iPhone nehmen und ne erstmal machen wir ein TCP-Socket auf, ne ein UDP-Dings
machen wir auf, UDP machen wir auf, weil das ganze geht UDP wegen möglichst geringer
Tense, übrigens wenn ihr irgendwelche Fragen habt, haut rein, ich kann das auch, ich habe
hier auf dem zweiten Bildschirmchat auf, überhaupt kein Ding, also wir brauchen jetzt den UDP-Client,
so und danach müssen wir mal ein bisschen Protokollspezifikation gucken, das wird ganz grausam,
Listener, Listener UDP-Client, so der UDP-Client soll auf Port, das habe ich vorher so eingestellt,
was mache ich denn da, der soll auf Port 8, 7, 6, 5, darauf kriege ich aktuell den ganzen
Traffic weitergeleitet, das heißt das muss ich jetzt erstmal so machen, später wird es
natürlich so sein, dass das über die API von diesem Web-LTC-Gateway sagt, welcher Port
und sowas, und ich werde das dann eh alles auf dem gleichen Server laufen lassen und
das schöne dran, auch wenn sich das jetzt nach relativ viel Audio-Video-Kram anhört,
dadurch, dass ich nichts encode und recode und transcode, hat es selbst auch beim Raspberry
Pi Zero der ganze Kram, am Ende 10% CPU-Last oder so, das ist halt nix, ne, was wird denn
gebastelt, ich versuche heute mal von meinem iPhone die Gegensprechfunktion von meiner
neuen China-Cam anzusteuern, das letzte Mal haben wir das mit einer Windows-App gemacht,
haben wir grundsätzlich gelernt, wie es funktioniert, und jetzt machen wir das mal vom iPhone aus,
ich lock mich gerade mal bei meinem iPhone ein, so, ok, TCP-Listener, das heißt wir gucken
jetzt, wir schnappen uns jetzt einfach unsere geliebte Endlosschleife, das ist auch wieder
am Start, wir schnappen uns jetzt einfach jeglichen Traffic, der UDP auf Port 8, 7,
8, 5 reinkommt, das ist dann, wenn ich in den Videoraum gehe, das iOS-Mikrofon, wir
haben ein Command von deiner China-Tool-Erklärung, sehr nice, wie hast du denn selber angefangen
zu programmieren, du meinst mit welcher Sprache, oder, wie, wobei wie ist halt, wie, wie,
musst du erklären machen, was meinst du genau, also Sprache habe ich damals mit einem Pyson
angefangen, 2004 oder so, aber das ging mir nach einer Weile schon irgendwie auf den Keks,
und ich habe damals schon dann das Galileo C-Sharp Open Book mir angeguckt, und das ist
bis heute meine Lieblingssprache geblieben, ich kann es zwar mittlerweile in einigen anderen
Sprachen, aber C-Sharp ist immer noch meine Lieblingssprache, die Kirby-Musik, das ist
ja ultra nervig gerade, wir machen jetzt, wir müssen, wir brauchen jetzt die Epic Chillstep
Collection, das ist aber nicht, nicht so geskillt, ok, nachdem wir uns heute um iOS kümmern,
ist ja mal angebracht, dass wir Epic, Epic Music machen, Toothouse Best Epic Music Collection,
oh, das geht ab, passend für iOS-Geräte, nee, für iOS-Geräte müsste ich, müsste ich
wahrscheinlich Till Lindemann anmachen, Features Haftbefehl, um eine große Zuneigung zu iOS-Geräten
zu zeigen, so episch ist das aber nett, Power of Epic Music, ja, das ist schon besser, so
ist das gut, wenn es zu laut ist, sag Bescheid, kennst du Wim? Ja, da, guck hin, da, ein Wim-AC,
sieht schon ein bisschen länger, oh, nice mit E3, E3, E3 ist das beste, ok, wir schnappen
uns jetzt einfach mal jeglichen Traffic, der reinkommt, wie fandest du den Song von Till
Lindemann? Ja, ich hab den ja gestern nach dem Stream noch angehört, nicht sonderlich
doll, also ich bin ja eh kein großer Fan von Till Lindemanns Gesang-Kunst, weil das hat
ja mit Singen nicht viel zu tun, es ist, es ist, es ist, ja, es ist eigentlich Sprechen
im Endeffekt und, dass er unbedingt immer rrrrrr machen muss, weil, ja, und die Texte
sind jetzt auch nicht sonderlich, ne, mein Fall, mein Fall war es nicht, was ist die
Musik? Two Hours, Epic Music, Power of Epic Music, Best of Collection, Volume 3, so,
also wir starten uns jetzt jedes UDP-Paket, was auf diesem Porte reinkommt, ähm, wie ging
das nochmal, Listener, Receive, Beginner, ja, Asynchron, was, was man das Asynchron
macht, Endlosschleife kann ein bisschen heiß laufen, ist schon ok, ähm, mal gucken, hab
ich irgendwo was, ach Quatsch, das kriegen wir auch so hin, das kriegen wir auch so hin,
so, was braucht denn das Empfangsding, einen Endpoint, ok, Endpoint, New, IP, ne, Endpoint,
wie heißt der Kram, IP, Endpoint, oder irgendwie so, ach, tatsächlich, IP Address, IP Address
Any, Port 8, 7, 6, 5, Bam, stimmt das so, was ich da mache, so, dann muss man ein Ref
eingeben, weil das ne uralt AP ist, ok, und was kriegen wir zurück, wir kriegen, wir kriegen
wahrscheinlich Bites, ne, Bites kriegen wir zurück, Bites, ok, gucken wir mal, ob der
jetzt was ausgibt, der sollte uns jetzt massig Bites auf die Konsole, ach ne, ähm, wir müssen
erstmal sagen, Encoding, GetStringFromBites, so, der muss uns jetzt jede Menge Zeug, also,
oh ja, ja, ist ok, so, ähm, jetzt muss ich nochmal kurz mit dem iPhone in den Chatraum
gehen und dann sollte ich hier Traffic bekommen, hoffe ich, allow Camera and Video, äh, ich
hab jetzt nix, wo man mich zufällig sehen könnte, oder, ne, allow, ok, nice, so, was,
was geht ab, hallo, ach, das sind, ich glaub, das sind irgendwelche, ich glaub, das sind
irgendwelche BellControl Characters, oder, ich glaub, lustig, die Strings veranlassen
die Konsole irgendwie dazu, äh, zu klingeln, toll, ha ha, super, ok, ähm, der Jan Michael
hat noch geschrieben, ich selber spiele gerade ein bisschen mit C-Sharp, aber da hab ich
sehr das Problem, dass ich nie weiß, was ich machen soll, und wenn ich was weiß, nicht
wie es geht, ja, das ist auch bei jeder Sprache beim Einstieg so, C-Sharp ist eines der besten
Sachen für Desktop-Sachen, wo du anfangen kannst, das kannst du für alles gebrauchen,
damit kannst du später Web-Anwendungen im Backend machen, damit kannst du mit Unity
kannst du Spiele machen, ähm, für Windows generell, jegliche Desktop-Anwendungen der
letzten Jahre, die kein Spiel ist, wird wahrscheinlich in C-Sharp erstellt worden sein und dort net,
ähm, ok, die meisten, ja, es gibt immer noch so ein paar Hardcore-Win-RP-Fetischisten,
das kommt schon noch vor, so, und, ähm, da kannst du nichts mit schief machen, mit was
für einem Buch fängst du denn an, oder wie, wie hast du denn angefangen, also ich hätte,
ich hätte da einen Tipp für dich, kann aber sein, dass du das schon kennst, ok, ähm,
also, so, mein iPhone ist immer noch der Meinung, dass es im Videoroom mir Zeug schickt, das
Problem ist jetzt, das ist halt geschwuppelt, wir müssen dieses Geschwuppel jetzt pasen,
das wird ganz, ganz furchtbar lustig, das weiß ich jetzt schon, und zwar, das Ding leitet
mir Raw-RTP-Packages weiter, RTP ist quasi so ein Streaming-Protokoll, und jetzt müssen
wir uns mal angucken, ob es da irgendwo eine Beschreibung für gibt, wie das aufgebaut
ist, so war es hier zum Beispiel, ja, und dann müssen wir mal uns die Sachen aus dem
RTP-Header rausholen, und wenn wir dann wissen, weil das Problem ist jetzt, wenn ich jetzt
die kompletten Daten nehme, die in diesem Paket drinnen sind, dann wird es halt rauschen
ohne Ende, können wir ja mal ausprobieren, komm, probieren wir mal aus, ähm, ich gebe
es jetzt einfach mal hier auf meiner Windows-Kiste wieder, was, was da, so installieren wir mal
Audio, ich gebe es jetzt eh generell mal auf meiner Windows-Kiste wieder, bevor ich es
auf der Kamera wieder gebe, das glaube ich besser, und danach auf der Kamera, also sprich,
wenn ich, wenn ich es von der iPhone-Kamera hier im Stream geschafft habe, dass ihr das
hört, was ich in die iPhone-Kamera labere, dann ist der Weg zur Gegensprecherlage ja
nicht mehr weit.
Das Problem ist, wenn ich jetzt einfach den Kram ausgibt, da sind ja noch ein paar Steuerdaten
drum herum, dann wird es wahrscheinlich rauschen wie verrückt.
Mit C++ würde ich nicht anfangen, also C und C++ haben definitiv ihre Daseinsberechtigung,
und für manche Sachen kommst du auch in der heutigen Zeit nicht dran vorbei, aber C++
bzw.
C zum Einstieg ist, C++ erschlägt dich mit der Komplexität und dem, dass du dir immer
noch in den Fuß schießen kannst, und die sprach halt massig viele Altlasten hat, das
ist eindeutig was für Fortgeschrittene, du bist ziemlich advanced, und C ist zwar relativ
einfach, aber dementsprechend ist auch nichts dabei, und du kannst hier in den Fuß schießen,
und es ist nervig.
Also, ich würde weder mit C, mit C++ noch halt anfangen, da war, finde ich, die Sharp
schon gar keine schlechte Wahl zum Anfang, und ich würde dir empfehlen, als kostenloses
C Sharp Buch, das gibt es mittlerweile in der achten Auflage oder so, das habe ich damals
auch gelesen, so 2004 rum, das Open Book, dass die Sharp, das Wishless C Sharp 2012 Open
Book bei, nee früher hieß es die Galileo, mittlerweile heißen die Rheinberg Open Book,
ok, da hast du ein komplettes Buch zu allen möglichen Sachen, was so in.NET drin ist,
gut geschrieben, du brauchst nicht alles, ja, also wenn du quasi gelesen hast bis, ja
so bis hier so in dem Dreh, so bis 12 reicht eigentlich, dann weißt du Bescheid, da hast
du trotzdem was, also bis Kapitel 12 musst du lesen, dann weißt du Bescheid, der Rest
ist eher.NET Framework und nicht wirklich notwendig zu lesen, aber lese das mal bis,
du kannst, eigentlich kannst du bis 14 lesen, ja, XML ist zwar, oder bis 15, bis 16, klingt
auch noch gut, ja, bis 17 sind noch interessante Themen, danach kommt GUI, GUI Programmierung
Zeug und Datenbank Zeug und sowas, das braucht keiner, also bis, also nicht zum Einstieg
unbedingt, ja, also bis Punkt 17 kann man das Ganze lesen und das ist wirklich gut,
das hab ich damals auch, damals war auch mein erstes C Sharp Buch, ok, wir müssen den Kram
jetzt parsen, den wir hier reinkriegen, so sieht also der Header aus, sehr schön, letztes
Mal hat sich doch irgend einer erzählt, wir werden nicht Low Level genug, ist das jetzt
Low Level genug, ist das jetzt Low Level genug, Bites aus einem RTP Header rausholen, aber
gleich kommt der erste und sagt, nein, nein, nein, du musst wenn schon einen Raw Socket
verwenden, so geht das ja nicht, Sekt, Sekt jetzt schreibt, ich find's immer geil wenn
einer sagt, ich programmiere HTML, da sag ich mittlerweile gar nichts mal zu, mittlerweile
ist allein schon HTML und CSS so ne Sache, wo du wirklich dabei bleiben musst, um mithalten
zu können, um auf dem aktuellen Stand zu bleiben, klar, du kannst nicht wirklich was
programmieren in HTML, so in Form was halt irgendwie Logik anbelangt, in Form von Schleifen
und Jumps oder irgendwas so, also Ifs und sowas in der Richtung, aber so pille palle
ist es mal gar nicht, ordentliches HTML zu machen und vor allem ordentliches CSS nicht,
LoloBisMaxFPSHab vor 5 Jahren eine Confidance guckt, richtig, das bin ich, ich hoffe du
hast mal meine Battlefield Videos geguckt, das ist ja die Gelegenheit mal wieder bei
mir auf YouTube vorbei zu gucken, ich hab zwar dieses Jahr nicht viel hochgeladen, aber
in den letzten 5 Jahren gab's schon ein bisschen was, also falls ihr das überlesen, sag
ich mal, das ist ja eine gute Gelegenheit.
Ja Java ist auch okay zum Anfang, das machen viele an der Uni, ich bin zwar kein Java-Fan,
aber das machen viele, gibt Schlimmeres.
Wo genau verwendest du Vue in der App für das Webfront dann, mal gucken ob wir da heute
kommen, so, äh weiter geht's, also wir müssen jetzt erstmal die ganzen Krams uns irgendwie
raus passen, was interessiert uns überhaupt von dem Header, ich geb dir Header alter,
was interessiert uns, Version interessiert uns, eigentlich interessiert uns ja nur der
Payload, weil wir wissen ja was es ist, nee du kannst nichts sagen, ich hab mich immer
nur um euch drum gekümmert, ich erzähl das nur seit einem halben Jahr oder so, interessiert
uns aus diesem Header überhaupt irgendwas, oder können wir den nicht einfach überspringen
wenn wir wissen wie lang er ist, was haltet ihr davon wenn wir den ganzen Krams einfach
mal als Hex ausgeben, den kompletten Mist und gucken ob wir da irgendwie irgendeine
Regelmäßigkeit finden, wie ging das Convert to String, was Convert ist mal Bit Convert
to String oder, Bit Convert to String, wo sind eigentlich unsere C-Sharps Experten
heute, sowas wie der Auskennt Fuchs oder so, wie ging das jetzt nochmal, Bites, dann zwei,
so ne, so konnte man, so kann man, glaub ich zumindest dass es so ging, zeig mal her ja,
so kann man nen Byte Array in C-Sharp relativ einfach in Hex Ausgabe formatieren, also sagst
einfach Bit Convert to String, dann schreibst du die Bites ran, dann sagst du hier hinten
ist glaub ich die Base, nee, ist nicht die Base, Base braucht man logischerweise, aber
Bites nicht, so dann haben wir Bites am Start, so jetzt gucken wir mal ob wir da irgendwie
irgendwie eine Regelmäßigkeit drinne erkennen, dass wir den Pedder vielleicht gar nicht
passen müssen, sondern einfach nur die ersten, keine Ahnung, die ersten 40 Bites wegwerfen
können und gut ist, wie viel bekommen wir eigentlich pro Paket geschickt, 180, 180 pro
Paket, ok, alles, wie gehts dem Friseur, dem gehts gut, ich bearbeite den Shotup'n'Zoom'
mal, dass wir wieder was aufnehmen können, ist es wichtig 2017 oder 2012, das Buch gibt's
doch 2017 gar nicht oder, oder gibt's das 2017, ich würde immer die neueste Ausgabe
nehmen, wenn's die gibt, warum auch nicht, so, jetzt machen wir hier mal nen Sleep rein,
dass wir uns das mal in Ruhe angucken können, also so how to, wie man das eigentlich am
Ende nicht macht, aber zum ausprobieren ist schon mal nicht verkehrt, sleepen wir mal
eine Sekunde, gucken wir mal, ob wir da irgendwas, so Leute, guckt euch mal den Output an, fällt
euch da irgendwas interessantes auf bei, lasst mal gucken, also die ersten drei Zahlen sind
immer, die ersten zwei, drei Bites sind immer gleich, die ersten drei Bites sind immer
gleich, das vierte Byte ist, zählt hoch, ich würd mal sagen, das ist sowas wie ne Sequence
Number oder so, das hat man hier auch gesehen, Sequence, Sequence, Sequence Number, ne, doch
Sequence Number, das hier ist ne Sequence Number, ok, das passt schon mal, ne, jetzt
ist es immer gleich, das ist ne Sequence Number, danach kommt null, ok, also gucken wir uns
mal den Header daneben an, ob wir da irgendwie was checken, so, das erste ist die Version,
die ersten zwei, 90, 90 ist, Moment, aber ne, das ist das erste Byte, das seh ich hier
ja gar nicht, im ersten Byte steckt der ganze Mist drin, ne, da kenn ich nicht, im zweiten
Byte, ne Quatsch, warte mal, das ist ein Byte, ne, ich bin grad irgendwie, ich hab mich
nicht durch in die Ausgabe, das ist ein Byte, ne, das da, so, 70a, was ist denn 70a, 70a,
122, 122 könnte, könnte doch schon das hier sein, wo ist es denn, das da, Payload Type,
122 könnte doch sein, 122 ist 96-127 erlaubt, das wird der Payload Type sein, so, da hat
man irgendwie Sequence Number, das da ist eine Sequence Number, die kommt nach dem Payload
Type, das hier ist die Sequence Number, so, danach kommt ein Timestamp, moin Leute, schön,
dass ihr alle dabei seid, kennst du Gea Cords, ja klar, das ist der iPhone und Playstation
Typ, ich wusste gar nicht, dass der Streams macht, das ist sehr nice, also ich würd ja
fast sagen, wenn ich dann hier so mitten hingucke, das sind irgendwelche Header oder so, also
für mich sieht das so aus, als ist ab hier Payload, oder was meint ihr, guck mal, das
hier ist Header, dann kommt irgendwann 00 und dann kommt Payload, ich find das sieht
irgendwie danach aus, oder, guck mal, Header, Payload, weil dann können wir uns das Gepase
sparen, dann werfe ich einfach die ersten, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9,
10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, die ersten 20 Bites werfen wir weg,
ASMR, LOL, nee, nee, ASMR wäre anders, ASMR wäre sowas hier, Achtung, eine Milka-Verpackung,
das wär'n ASMR-Stream, oder, oder, Dings hier, Moment, warte mal, ich hab noch was geiles,
nee, das hört sich scheiße an, kein ASMR-Stream, ja, das sind 20 Bites, oder?
Hallo Dr.
Bash, 20 Bites, und ich, ganz ehrlich, das sieht wirklich für mich so aus, dass wir
hier gar keine große Parsing-Action, ich mein, wir können das hier mal aus Spaß trotzdem
machen, einfach immer ein Bein wegschmeißen, bis es nicht mehr rauscht, das ist natürlich
auch ein guter Anfang, aber wir gucken jetzt mal, also eigentlich würde ich jetzt hier
erwarten, dass die ersten 2 Bits, die ersten 2 Bits, sind, sollten 2, sollte quasi 1-0 sein,
dann hab ich insgesamt 25 Bites, ich hab die natürlichie alleine, ich hab Goshchaudien
Ich zeig's dir noch mal. Wir haben übrigens auch ein Command dafür, aber ich zeig's dir trotzdem mal.
Wir haben das letzte Jahr meine China-Kamera-Tür-Gegensprechanlage.
Hier ist so eine Windows-Anwendung draus gemacht.
Kamerabild und hier Gegensprechanlage. Blablabla. Man hört's.
Und mein Ziel ist ja nicht eine Windows-Anwendung, sondern eine Web-Anwendung, die ich vom iPhone und Android und von allem verwenden kann.
Das heißt, jetzt gucken wir heute mal, wie ich das iOS von meinem iPhone, das Mikrofon, wie ich das zur Kamera weiterleiten kann.
Der erste Schritt wird sein, dass ich das iPhone-Mikrofon mal weiterleite zu meinem Windows-PC und ausgebe und danach zur Kamera.
90 gleich 1001. Ja, dann sind die ersten zwei Bits, sind doch 100.
Ich kann euch mal zeigen, wie man sowas machen würde.
Pass auf, es kann sein, dass ich jetzt übel fail und es nicht funktioniert.
Ja. Willst du das nicht auf deinem Fire-Tablet laufen lassen? Doch, doch, klar. Auch.
Deswegen mache ich ja eine Progressive-Web-App aus der ganzen Geschichte.
Also sprich, was ich auf allen Endgeräten laufen lassen kann.
Und ich habe halt nur mal zwei iOS-Geräte, auf denen will ich ja auch an die Tür drangehen können, wenn es klingelt.
So, das wollte ich euch jetzt zeigen, wie man das Ganze hier rauskriegt.
Und zwar, man kann, ich hoffe, das funktioniert jetzt ordentlich.
Also wenn ich jetzt zum Beispiel das erste Byte hier haben möchte, also wenn ich jetzt sage, die ersten zwei Bytes interessieren mich bei der ganzen Geschichte,
dann kann ich jetzt hier quasi sagen, wir nehmen jetzt mal hier irgendwie eine Maske und es gibt jetzt ein super neues C-Sharp-Feature.
Könnt ihr bestimmt auch gut gebrauchen, wenn ihr C-Sharp verwendet.
Also man kann jetzt Binary direkt in der Sprache machen.
Also man kann jetzt direkt Binary-Gedöns schreiben.
Also sowas wie hier, eins, zwei, drei, eins, zwei, drei, vier, sowas kann man jetzt direkt schreiben.
Und da kommt dann halt, in Binär kann man das schreiben.
Das ist praktisch, da muss man nicht schiften und Gedöns machen.
Ja, früher hätte man irgendwie sowas machen müssen oder so.
Jetzt kann man das direkt schreiben. Das ist wirklich sehr nice.
Ist das ein integriertes Gerät oder machst du ein Kamera-Kamera-USB mit dem Raspberry?
Beides. Also die Kamera selbst ist ein fertiges Gerät.
Das ist hier so eine Billie-China-Camp.
Wandal-Resistant.
Also eine Gegensprechanlage mit Nachtsicht und Klickknopf und Kamera und Mikro und Lautsprecher.
Das mit dem Raspberry selbst zu bauen, vor allem mit dem Nachtsichtzeug ist zu...
...großer Akt.
So. Und...
Aber ich muss das mit dem Raspberry verbinden, weil irgendwo muss ja die Web-App dann voll ausgeliefert werden.
Irgendwo muss der Media-Server drauf laufen, der das weiterleitet.
Das ist nicht so einfach.
Kennst du Reverse-Engineering mit Signature-Scan?
Signature-Scan sagt mir jetzt nichts.
Aber du kannst ja im Prinzip alles irgendwie Reverse-Enginieren mit.
Aus welchem Bereich denn?
Meinst du jetzt sowas wie, dass du verschlüsseln den Traffic erkennst anhand des...
...so Meta-Zeugturme rum oder was meinst du?
So, also wenn man jetzt zum Beispiel das erste Byte rauskriegen möchte von...
...von Bytes, ne?
Also wir nehmen jetzt das erste Byte und wir wollen jetzt das...
...Byte ignoriert, weil ich gesagt habe, das erste Bit wollen wir rauskriegen.
Dann ist es relativ einfach und kann ich jetzt einfach sagen...
...und die Maske.
So.
Wenn ich das jetzt ausgebe, dann haben wir 128, was im Prinzip das erste Bit ist.
Weil, weil da vorne, da vorne, ne?
Also hier, ne?
2, 4, 8, 16, 32, 34...
Ich hab mich verzählt, aber ich glaube, das sollte, sollte hinhauen.
Also das erste Bit ist quasi gesetzt.
Das kriegt man so raus bei der, bei der Geschichte.
Jetzt, jetzt bestimmt auch einfache Varianten.
Wahrscheinlich könnte man auch irgendwie sowas machen wie...
...ne, Shiften geht nicht so einfach, oder?
Können wir Shiften?
Ja, Shiften könnte ich auch, ne?
Aber das funktioniert ja dann nicht.
Ne, ne, ne, mein Freund, das klappt nicht.
Egal, mit der Maske ist es auf jeden Fall einfacher.
Da kann, da kann ich meinen Hirn zusammenhalten und dann klappt das.
So, so könnte man sich das erste Byte angucken, so.
Und das hier wäre jetzt das zweite Byte.
Äh, das zweite Bit.
Sagen wir hier, so.
Wäre jetzt das zweite Bit.
Wäre jetzt das zweite, zweite Bit.
Und das zweite ist Null.
Was auch passt.
Weil aktuell steht da ja 90 drinne, also sprich, äh, äh...
Also die ersten zwei Zahlen sind 1-0.
Das passt schon.
Also ist das anscheinend wirklich ein ganz normaler RTP-Header, den wir uns hier angucken.
Bevorzugst du iPhone über Android-Geräte und wenn ja, warum?
Nö, mach ich nicht.
Ich fände alles hat seine Daseinsberechtigung.
Es, äh, Apple ist in manchen Bereichen halt mittlerweile echt ein bisschen hinten dran.
Hat man es am Anfang von, äh, also technologisch gesehen, von der Qualität der Apps, würde ich sagen,
die ist, so mal im Durchschnitt betrachtet, im iOS-Store noch ein bisschen höher.
Allerdings, wo halt Apple absolut nicht mithalten kann, ist, ähm, was du automatisieren kannst auf den Geräten.
Aber ich glaube, das will Apple auch gar nicht.
Also es hat, es ist einfach unterschiedliche Anwendungszwecke, was du damit machen kannst.
Ja, also sprich, wenn sich die Oma mit einem iPad aufs Sofa setzen will und, äh, neue, äh, was weiß ich,
Woche der Frau oder so lesen, das ist dann, ist ein iPad wahrscheinlich gar nicht so okay,
wahrscheinlich gar nicht so schlecht.
Das könnte man natürlich auch mit einem Android-Gerät machen.
Äh, sobald man aber irgendwas automatisch machen will, ja, und ein bisschen, ein bisschen was ausgefallener ist,
da kommst du an Android nicht vorbei.
Deswegen, ich hab mittlerweile alles Mögliche.
Ich, ich, ich hab so viele Tablets hier mittlerweile rumliegen, ich kann's gar nicht mehr zählen.
iOS-Geräte kann ich zählen, hab ich zwei.
Nämlich mein iPhone und ein iPad.
Aber Android-Tablets kann ich mittlerweile gar nicht mehr zählen.
Was sich da alles angesammelt hat die letzten Jahre über.
Inklusive das Shield-TV am Fernseh ist ja auch Android, kommt ja auch noch dabei.
Ups.
Hallo, T-Max Electronics.
So, wir sind noch nicht sonderlich weit gekommen heute.
Also, wir wissen jetzt zumindest schon mal, dass wir die ersten, was hab ich gesagt,
die ersten 20 Bytes müssen wir einfach mal kicken.
Kicken wir mal die ersten 20 Bytes weg.
Bytes-Skip.
Das ist die nicht sonderlich effiziente Lösung, aber sie...
Funktioniert.
Gucken wir mal, ob wir das...
Moment, ich bin...
Ich, ich, ich bin verwirrt.
Was mach ich denn hier überhaupt?
War ich nicht zu sehen?
To Array.
ETF.
Jetzt, ha?
Jetzt funktioniert's.
Das sieht doch eigentlich ganz gut aus.
Ich mach jetzt mal ein bisschen Geräusch hier ins iPhone rein, dass ich das...
Ja, das ändert sich auch.
Ja, also sprich, Leute, das was wir jetzt hier im Terminal sehen,
ist der Mikrofon-Sound von meinem iPhone.
Allerdings halt in Hex, was uns jetzt nicht allzu viel bringt, wenn man ehrlich ist.
Dann versuchen wir das mal auf dem Windows-Rechner auszugeben,
bevor wir da weitermachen und das an die Kamera schicken.
Und wenn das alles geht, dann fangen wir an eine ordentliche...
Nennen wir's mal App.
Ey, Mann, in Progressive Web App ist ja schon der Name App drinne.
Okay, also...
Das heißt, das hier ist jetzt mein Payload.
Payload.
Ich hoffe, dass das stimmt.
So, ähm...
Die Musik geht ab.
Das ist schon die passende...
Ja, passende Untermalung dafür.
So, äh...
Also, das heißt, wir brauchen jetzt...
Wave out.
Dann brauchen wir nen...
Buffer und Wave-Provider.
So, dann neues Wave-Format.
Ich hab das in weißer Voraussicht nach schon in dieses absolute Crap-Format umgewandelt,
was die Kamera kann.
Das heißt, hier muss ich jetzt glücklicherweise nichts mehr konvertieren.
Dieses...
Wie gesagt, ich wusste bis vor kurzem gar nicht, dass es dieses Format überhaupt gibt.
Das ist das, wo wir letztens bei Wikipedia nachgelesen haben,
was das Audio-Format ist von 1985.
Ja.
Richtig gehört.
Also, das ist ein Audio-Format von 1985.
Das Schöne ist, was ich danach noch gelesen hab, ist,
dass im WebRTC-Standard das so als Base angegeben ist.
Also sprich, das ist das, was jedes Gerät können muss,
was natürlich ganz cool ist.
Deswegen kann ich jetzt einfach beim Server forsten und sagen,
hier, Endgeräte, macht mal bitte PCM Mular-Format.
Und da muss ich nichts mehr umwandeln, um es an die Kamera zu senden.
Weil denkt dran, jeder Umwandelvorgang,
weil ich meine, ich lasse das am Ende auf einem Raspberry Pi Zero laufen,
des Gedöns, also die Server-Seite, jedes Transcoding und sonst was
lässt das Ding zur Kernschmelze treiben.
Das kannst du komplett vergessen auf einem Raspberry,
auf einem normalen Raspberry ja schon, ja.
Aber auf einem Zero kannst du es komplett vergessen,
irgendwas recht Intensives zu machen.
Und selbst wenn du ihn übertaktest, die 200, kein Opus, nein, kein Opus,
bringt uns in dem Fall aber auch nichts, weil die Kamera ja kein Opus kann.
Die Kamera kann ja nur dieses komische Format von 1985.
Das ist ja die China Cam, ey.
China Cam FTW.
Okay, also, streamen wir mal.
Init.
Init.
Ich kann doch wieder schreiben.
Init.
So, und dann schreiben wir den Buffer, schieben wir da rein in unseren Wave Out.
Dann sagen wir Play.
Und dann schmeißen wir den Payload.
Add.
Schmeißen wir mal hier rein und dann gucken wir mal, was passiert.
Haltet euch schon mal die Ohren zu, das kann jetzt laut werden.
Obbei, wir haben es letztes Mal ja auch gemacht, das ging schon.
Count, Payload, length.
Monkeys, Achtung.
Ach so, ich sollte das Leap vielleicht rausnehmen.
Hallo?
Nice, Freude.
Ich mute mich mal.
Ich mute mich mal, dass er mich.
Jetzt hört er mich nur noch vom iPhone aus.
Oh, nice, oder?
Das funktioniert.
Aber jetzt ist es kein Echo, jetzt ist es...
Aber das ist ja massiv Poggers.
Progers.
Progers, ist das, Progers.
Das war ja einfach.
Also das war viel einfacher, als ich mir das vorgestellt habe.
Nice, sehr nice.
Oh.
Ja.
Nur noch über iPhone.
Aber seht ihr mal Leute, die Verzögerung ist gar nicht so hoch.
Dank WebRTC.
Nimm mal den vollen RTP-Stream inklusive Header.
Ich glaube nicht, dass wir das wollen, dann fliegen euch die Ohren weg.
Wir probieren es mal.
So.
Ich bin wieder da.
Liegst du, Ram?
Möglich, kann schon sein.
Okay, wahrscheinlich fliegen uns jetzt die Ohren weg.
Achtung.
Keine gute Idee, den kompletten, den kompletten Add-Dings zu nehmen.
Es war schon, aber unsere Prude Force Geschichte, oder was das Prude Force Geschichte.
So nach dem Motto, wir passen nicht den Header.
Wir gucken einfach, wie Paylord aussieht und stecken den rein.
Hat gut funktioniert, oder?
Aber das funktioniert echt gut.
So.
Wir streamen jetzt nur noch über Handy.
So, legen wir das Handy dahin.
Oder Handy only streamen.
Easy.
Ups.
Ease.
Ja, sehr schön.
Ich meine.
Guck mal, mal ehrlich, Leute.
Die Qualität ist natürlich nicht damit zu vergleichen, wie mit dem headset.
Das ist schon mal klar.
Kann mir übrigens jemand erklären, warum der Lautsprecher.
Ich meine nicht der Lautsprecher, ich meine das Mikrofon.
Warum das Mikrofon vom iPhone, warum das oben ist und nicht unten.
Weil jetzt laber ich unten rein und jetzt laber ich oben rein.
Warum ist das Mikrofon oben am Ohr?
Wo ist denn der Sinn da?
Apple, please.
Das fällt mir zum ersten Mal auf, dass beim iPhone das Mikrofon oben ist, aber unten nicht.
Na ja.
Gut.
Hallo, mein Name ist Peter.
Wir sind Microsoft-zertifizierter Gold-Partner.
Sie haben viele Virus auf ihrer PC.
So, wieder ordentliche Qualität.
Wie genau hast du dich jetzt damit verbunden?
Ich habe im Hintergrund einen WebRTC-Media-Server laufen.
Das Ding hier, ich zeige es dir mal.
Das da.
Das sind halt nur die Demo-Seiten davon.
Und die haben hier eine Demo-Seite auch für ihren Video Room.
Da gehe ich jetzt nicht rein, da ist meine iPhone-Kamera drin.
Und der Server streamt das dann hier an meinen Rechner, das ich testen kann.
Am Ende wird das alles auf meinem Raspberry laufen.
Und nachdem wir nichts transcoden oder umencoden, läuft es auch auf einem Raspberry halbwegs.
Was sehr, sehr nice ist.
So, und jetzt ist der nächste Schritt.
Wir müssen das, was wir das letzte Mal gemacht haben, also das hier,
müssen wir verbinden mit dem hier.
Microsoft, warum kann ich jetzt nur das komplette verschieben und nicht einzelne Anwendungen?
Wollt ihr mir das... Alter.
Wer denkt sich das denn aus?
Ich möchte Konsolen-App neben Windows-Form-App schieben.
Microsoft-Logik.
Diese Software-Bevormundungsscheiße geht mir so auf den Sack.
Das könnt ihr euch gar nicht vorstellen.
Überall darfst du irgendwas nicht machen, was jetzt sinnvoll wäre,
weil sich der Hersteller denkt, na, das ist nicht so richtig, das geht nicht.
Das ist aber bei allem so mittlerweile.
Das ist wirklich gang und gäbe bei heutiger Software.
Zum Beispiel, noch so ein Beispiel dazu.
Guckt euch mal an, ich gehe jetzt mal auf meinen YouTube-Account.
YouTube Frontend ist ja mein Lieblingsflame-Kund.
Ihr kennt ja so dieses Intro-Video, was da anfängt.
Blablabla, hallo Jungs und Mädels.
Und man könnte sich jetzt ja eigentlich denken, okay,
derjenige hat sich dabei gedacht, dass das quasi irgendwie ein besonders aussagekräftiges Video ist von seinem Channel.
Das heißt, wenn ich neu auf dem Channel bin, würde ich gerne mal das Intro-Video laufen lassen,
mir allerdings schon anschauen, was es denn sonst für Videos auf dem Channel gibt.
Aber das geht nicht.
Das geht nicht, weil Google sich gedacht hat, nein, hier darfst du sicher keine neuen Tab aufmachen.
Neue Tabs sind böse.
Und du musst da draufklicken, dass das Intro-Video ausgeht, dass du die Videos angucken kannst.
Voll für den Arsch.
Das ist das, was ich meine, du wirst so gegängelt mittlerweile bei aller möglicher Software.
Das hängt mir so echt zum Hals raus.
So, so viel dazu.
Weiter im Text.
So, jetzt müssen wir das machen, das, was wir das letzte Mal gemacht haben,
müssen wir verbinden mit dem, was wir heute gemacht haben.
Das heißt, wir werden jetzt das Upload zur Kamera.
Oh, die Kamera ist schon ganz schön heiß hier.
Aber die hängt ja später im Freien, das ist nicht schlimm.
Ja, bei Twitter ist es auch teilweise schlimm.
Wobei, Twitter finde ich, es geht noch.
Also Twitter benutze ich irgendwie noch mit am liebsten.
Okay, wir wollen es jetzt nicht mehr playen.
Wir wollen es nicht mehr bei mir lokal playen.
Wollen wir nicht mehr.
Wir wollen jetzt das Ganze zur Kamera uploaden.
Und wenn das jetzt funktioniert, was danach aussieht,
ist es eines der easiesten Sachen, die wir jehe gebastelt haben
mit der geringsten Code-Anzahl ever.
Okay, also wir müssen uns jetzt ein paar Sachen aus meiner China-Audio-App
rippen vom letzten Mal.
Also wir brauchen erst mal ein Webclient.
Da kommen wir nicht drumherum.
Webclient, Webclient, Webclient, Credentials brauchen wir noch.
Credentials, gleich, Achtung, ganz super, super special Passwort,
Network, Credentials, Admin und Passwort, 1, 2, 3, 4, 5, 6, 7, 8, 9, A.
Weil es muss ein Buchstabe drin vorkommen.
Bestes Passwort.
Und dann gucken wir in der China-App nach, wie ging es als nächstes.
Close, das muss man machen.
Okay, das haben wir jetzt mal schon gemacht.
Hallo, Wabuhaba.
So, und danach haben wir, was haben wir jetzt gemacht?
Start upload, danach haben wir einen Socket aufgemacht,
Stream gelesen, okay, okay, okay, machen wir alles, machen wir alles.
Danach brauchen wir, das Gedöns hier brauchen wir alles nicht.
Das da brauchen wir und das da brauchen wir.
Nice Copy-Paste-Siste.
Das ist doch schön, dass wir das letzte Mal so gut vorbereitet haben.
Deswegen können wir das jetzt einfach nehmen.
Und dann brauchen wir das da, weil das ist das Upload zur Kamera.
So, und dann sagen wir jetzt hier Buffer, Blablabla, Buffer in.
Moment, wir müssen das jetzt austauschen.
Wir wollen jetzt den lokalen, das brauchen wir überhaupt nicht, das brauchen wir nicht.
Wir brauchen, ist gerade alles weg.
Wir nennen das Ding hier noch um, das Ding heißt nicht einfach nur Stream,
sondern es heißt Cam Stream, dass wir wissen, dass das Cam Speaker Stream,
dass wir wenigstens wissen, was das ist, weil spätestens in einem Tag weiß ich nicht.
So, und dann nehmen wir den Payload, den ich von meinem iPhone kriege
und uploaden ihn zur Kamera.
So, und das müsste es eigentlich gewesen sein.
So, ich hab was, was hab ich gemacht.
Publish so am Ende das Code auf GitHub, kann ich machen.
Die Dinger finde ich auch Mist, war nichts.
Die, die, ähm, was gibt's da, äh, Door, Doorbird, äh, Dings, Ring und Dings.
Das ist auch wieder so typische Gangle-Hardware.
Ich mein, die China-Cam ist Crap von der Software drauf, ja, aber wenigstens kann man selbst was machen.
Was hab ich denn vergessen? Ah, mein Create-Header, sorry, hab ich vergessen.
Zu kopieren.
Magic, guck mal hier, accept language, chinesisch, accept Charset, chinesisch.
So, ähm, das sollte jetzt funktionieren.
Jetzt bin ich, jetzt, jetzt, Leute, ich bin echt gespannt, ich bin echt gespannt jetzt.
Close am Ende, ah, overrated, debated.
Okay.
Hallo?
Es geht.
Leute, es geht.
Ich halt euch mal dran.
Also, was ihr jetzt seht, ist mein Gelaber vom iPhone zur Kamera, von der Kamera, Lautsprecher,
in mein Headset-Mikro, über Window, in OBS.
Upload auf Twitch, über eure Soundkarte, an euer Handy.
Das war der Weg.
Wow, wow, oh, ah, Rückkopplung, piss dich.
Monkeys.
Aber es ist sehr nice, dass es einfach geht.
Ich bin, ich bin echt begeistert.
Das ist, das ist sehr nice.
Das war ja easy, das war richtig easy, das hätte ich überhaupt nicht gedacht.
Wusste nicht, dass mein iPhone eine Soundkarte hast.
Ja, wo steckst du sonst einen Klinkeanschluss rein?
Loh, Alter, Loh, Klinkeanschluss.
Ich wollte nur noch mal den Finger in die Wunde legen, ja.
Ja, nice, das funktioniert.
So, Moment.
Und jetzt müssen wir noch irgendwie, wir müssen den anderen Sound ja auch noch irgendwie
aufs iPhone kriegen.
Lass mal, lass mal kurz in mich gehen, wie machen wir das denn?
Ne, müssen wir gar nicht.
Wir haben den Sound ja schon.
Ich hab den Sound von der Kamera ja schon im iPhone.
Ich spiele, ich, ähm, upload ihn plus grad nicht.
Hab ich schon, hab ich schon drin.
Ja, dann können wir jetzt eigentlich noch anfangen, die Web-App zu basteln, oder was
sagt ihr?
Nachdem wir jetzt wissen, wie der ganze Krempel funktioniert.
Ich hab hier leider keinen iPhone-Emulator oder so.
Ich kanns euch ja, ich kanns euch ja zeigen.
Das nächste, was ich machen kann, ist, ähm, hier einzustellen auf, das höchste der Gefühle,
was ich machen kann, ist hier mein Firefox einzustellen irgendwie auf, man kann, man
konnte doch irgendwie, wo konnte man hier denn die Devices umschalten?
Das ging doch irgendwie.
Das machen wir jetzt.
Wir tun, wir faken einfach hier im Browser unser iPhone.
Wo, wo ging das nochmal mit den Geräten umschalten?
Oder ging das vielleicht nur im Chrome?
Wie das vielleicht nur ist, hier gehts, ne?
Hier war das irgendwie.
Was ist das für ein Knopf?
Hier!
Und wie stellt man jetzt die Geräte ein?
Also, ok, es, es, es, es sieht schon mal aus wie ein, wie ein iPhone, ja.
Aber wo stellt man hier nochmal die Geräte um jetzt?
Ok, ähm, Firefox kann das auch, aber brauchen wir nicht, wir haben es ja hier.
Ah, hier, ok, nehmen wir mal ein iPhone 6, passt ja, sehr schön.
So, da haben wir jetzt die Webseite auf iPhone 6 Basis.
Das ist doch sehr neu jetzt.
Das, das gefällt mir schon mal.
Da kann man den Browser auch ein bisschen kleiner machen, oder?
Ok, ähm.
Gut, dann kann ich meine China App zumachen.
Mich verwirrt das, dass der Kram hier offen bleiben muss.
Ich breche das, ich breche das Memeboard mal ab.
Und starte es irgendwie von Hand.
Äh, wo ist es?
Ne, wobei, ha, ha, ha, Moment, das geht nicht.
Äh, äh, Create Shortcut, Shortcut.
So muss man jetzt dahin kopieren, dass es funktioniert.
Dahin, dass er seine Datenbank findet.
Und starten hier drinnen.
Sonst geht es ja nicht.
Ja, jetzt funktioniert es, sehr schön.
Ja, nice. Sehr gut, ähm.
Ok, dann können wir jetzt, ok, ich würde vorstellen,
wir überlegen uns als erstes mal,
wie wir ungefähr so eine App optisch aussehen lassen können.
Ich mein, im Prinzip, wie baut man,
wie würde man sowas am besten aufbauen?
Ich mein, warte mal, wir machen das nicht Prototyp-mäßig.
Wir machen jetzt erst mal ein bisschen Studio Code auf.
Code?
Äh.
Warte mal, äh.
Ich geh mal weg.
Ich mach mal einen neuen Ordner.
Test.
Nicht DD.
Boah, MonkaS.
DD. Oh, das ist natürlich, äh.
Wisst ihr übrigens, was die D heißt?
Ist das eigentlich mittlerweile das schnellere Render-Frontend
bei deinem Meme-Tool?
Ich hatte, ich hatte meinen GIF-Player drinnen,
aber ich hab immer noch ein Memory-Leak,
das ich noch nicht rauskrieg.
Deswegen ist das jetzt erst mal das Alte.
Damage-Dealer. Genau, du hast es erkannt.
Ähm.
Okay, links.
Also, neuer.
Index.
Save.
Index. HTML.
Live-Server open.
Jawoll.
Ja, ist gut.
Windows Firewall.
Edge?
Macht der grad ernsthaft Edge auf, oder was ist das?
Moment.
Nee, das ist Firefox.
Gott sei Dank.
So, jetzt haben wir hier Live-Server am Start.
Jetzt können wir hier so Dinger drinnen machen.
Also, Live-Server muss ich sagen,
ist echt eines der besten, äh, Plugins.
Plugins, ja. Plugins forever.
Warum geht der Live-Server nicht?
Der sollte eigentlich, eigentlich sollte der Live-Server live servern.
Doch, der geht doch.
Guck, jetzt kann ich hier editieren,
und wenn ich speichere, dann refresht er die Seite.
Das ist übelst nice, das Ding.
Das ist wirklich ultra nice.
Jetzt können wir uns nämlich überlegen,
wie wir ungefähr optisch die Seite machen wollen.
NCS, bla, bla, bla.
Style Sheet, Viewport.
Schwubble da, geh weg.
Die App heißt Cling Lords am Ende.
Ja, beste.
Als Metatext braucht kein Mensch.
So.
Also, der Live-Server ist wirklich top.
Ähm, wie könnte man...
Viewport ist wichtig für Mobile.
Ist das so?
Machen wir dann.
Wie könnte man...
Viewport ist wichtig, okay.
Was macht das?
Device, was?
Breite gleich Device-Breite.
Ah, das ist Mobile-Scheiß, ja.
Okay, wie könnte man sowas jetzt aufbauen?
Wie könnte man so eine Sache aufbauen?
Ich meine...
Was wäre denn sinnvoll für einen...
Ich hab doch hier irgendwie...
Draw, IO am Start.
Wir malen jetzt mal.
Draw, IO.
New Diagram.
Untitled, ja.
Also, wir könnten doch...
Ich meine, das muss ja schmal sein, auf einem...
Hat man hier eigentlich so ein iPhone-Shape oder sowas?
Ah, man hat hier so ein iPhone-Shape.
Das ist sehr schön.
Nehmen wir das da.
Äh.
Das sieht aber nicht aus wie ein iPhone.
Das sieht aus wie ein...
Wie ein Fett-Phone.
Wie ein Fett-Phone.
Wir bleiben bei der Kiste.
Also.
Ich meine, wir brauchen einen Button für Mute and Mute.
So viel ist sicher, weil, wie gesagt...
Hallo?
Wir brauchen irgendwie sowas da.
So.
Sowas brauchen wir.
Weil brauchen wir hier oben brauchen wir ein...
Video.
Video-Fenster.
Sag mal.
Warum schreibt der rückwärts?
Draw, IO.
Alter, was ist das?
So, Video.
Hier oben kommt Video rein.
So.
Die Geräte werden eh hauptsächlich hochgekannt verwendet.
Zumindest, ich verwende die Geräte hauptsächlich.
So.
Also, hier oben konnten wir instant das Video anzeigen lassen.
Was soll es am Ende werden?
Äh.
App für meine Billig-China-Kamera-Gegensprechanlage.
Tür-Gegensprechanlage.
Das Bild ist Querformat.
Immer.
Immer Querformat.
Ich kann ihr mal zeigen, wie es grundsätzlich funktioniert.
Wir haben nämlich letzten Stream eine Windows-Anwendung gebaut,
die quasi das macht, was ich als Mobile-Anwendung haben will.
So als Proof of Concept, dass wir rauskriegen, wie es funktioniert.
Oh, Moment.
Ich hab grad das falsche gestartet.
Äh.
Sekunde.
Ich mach mal das Richtige auf.
So, also prinzipiell soll die App Folgendes machen.
Soll nicht die Katze anzeigen, sondern die Gegensprechfunktion.
Irgendwie ist es kaputt.
Moment.
Ich glaub, die Kamera ist am Abspacken.
Ich glaub, die Kamera kackt gerade ab.
Ich restarte die Kamera mal.
Das haben wir schon lange nicht gemacht.
Also im Prinzip, ähm, hab ich mir eine billige China-Gegensprechanlage gekauft.
Das da für die Tür unten.
Mit einer Kamera drin, einem Mikro und einem Lautsprecher.
Aber, ähm, die Software, die dabei ist, ist halt absolut grottig.
Ja, die Apps sind mega scheiße.
Die will ich mir auch nicht installieren auf meinem Gerät.
Und außerdem, auf dem Desktop, funktionieren sie nur ordentlich mit einem Internet-Explorer ActiveX-Plugin.
Und das muss echt nicht sein.
Und wir haben im letzten Stream quasi ein bisschen reverse-ingeniert,
wie diese China-Kamera quasi Audio, Video und Sprache und so überträgt.
Und haben ein kleines Programm für Windows hier gebastelt, was das macht.
Und jetzt will ich eine Mobile-Anwendung daraus basteln.
Für iOS, für Android.
Das wird eine Web-Anwendung werden, unter der Haube.
Einfach, weil es überall läuft.
Aber so viel brauchen wir im Prinzip ja auch nicht.
Sobald die Kamera neu gestartet ist, male ich mal weiter.
Okay, also, man möchte...
Also, wo man dran denken muss, unter iOS muss Sound immer durch eine User-Aktion ausgelöst werden.
Das heißt, da muss ein fetter, fetter Knopf hin.
Ich werde es so machen, wenn man die Anwendung öffnet, geht das Video auf von der Kamera.
Man hört allerdings nichts.
Wie alt ist die Kamera, nicht von 2017 oder so?
Das ist ja ein China-Billig-Kram.
Was erwartet man, ja?
So, ich gucke mal, ob die Kamera jetzt neu gestartet ist, dann kann ich es dir zeigen.
So.
Hallo?
Mir geht es gerade nicht mehr.
Also, ich weiß nicht, warum.
Wir haben irgendwas kaputt gemacht gerade.
Hallo? Test, Test?
Also, irgendwas haben wir kaputt gemacht in unserer Beispiel-Anwendung.
Ich weiß nicht genau, was.
Aber vorhin ging es noch.
Das Kamerabild funktioniert ja auch noch.
Hallo? Test, Test, Test?
Nö, geht nicht mehr.
Ah, jetzt.
Was ist mit der Kamera los jetzt?
Hallo? Kamera?
Irgendwie hatte ich keinen Bock mehr.
Also, ich weiß nicht, was sie für Schmerzen hat, aber man weiß es nicht.
Gucken wir mal, ob das hier noch geht.
Test.
Es geht auch nicht mehr.
Was ist mit der Kamera jetzt los?
Ist jetzt die Kamera verreckt oder was?
Die Kamera ist jubelsam abspacken.
Die Kamera ist jubelsam abspacken gerade.
Eben ging es doch noch.
Ich bin jetzt irgendwie verwirrt.
Hallo? Kamera?
Was ist jetzt los?
Was? Okay.
Wer ist heutzutage nicht einfach, ein 80-Euro-Smartphone hinzuhängen?
Naja, wenn du ein Smartphone auf der Straße hängen haben willst,
bei Wind und Regen und RIP und geklaut werden.
Alter, was geht mit der Kamera ab?
Okay, Start.
Gucken, ob es jetzt funktioniert.
Ich habe jetzt mal das iPhone aus dem Chatraum rausgenommen.
Hallo? Ah, es geht wieder.
Hallo? Es tut wieder.
Also, Gegensprecheranlage tut prinzipiell.
Das war keine Ahnung, warum es kaputt war.
Aber es geht wieder.
Okay, mal weiter unsere komische Anwendung basteln.
Ich meine, die Anwendung kann super simpel sein.
Ich würde sagen, den Hintergrund lassen wir irgendwie blinken, wenn es klingelt.
Und dann brauchen wir einen Hörer zum Annehmen.
Oder gibt es da nicht ein schöneres Symbol für...
Ah, irgendwie sowas da.
Irgendwie so. Ich meine, viel mehr brauchen wir nicht, oder?
Ich brauche einen Knopf zum Annehmen.
Ich brauche einen Knopf zum Annehmen.
Wobei, nee, ich brauche keinen Knopf zum Annehmen.
Warte mal.
Wenn es klingelt, kriege ich eine Push-Nachricht.
Und wenn ich auf die Push-Nachricht klicke, dann geht die App auf.
Das reicht ja schon.
Und dann sehe ich das Video.
Und danach klicke ich hier drauf.
Und jetzt ist die Gegensprecheranlage an.
Fertig.
Mehr brauche ich in der Oberfläche.
Also, die Oberfläche wird super simpel.
Also, im Endeffekt...
Wir müssen nochmal umschalten hier auf...
... auf iOS-Ansicht.
Wo ist denn das hier?
Ah, so.
Mini.
Mini-iPhone.
Ja.
Also.
Willst du damit deine Tür aufmachen?
Nein, das kann es...
Ich habe keinen Türöffner, den ich anschließen würde.
Und den würde ich auch nur mit...
... über Code steuern lassen.
Und nicht mit einfach so einem Knopf übers WLAN.
Na gut, man hier ist immer noch verschlüsselt, aber trotzdem.
So.
Also, wie fangen wir da jetzt am besten an?
Wir machen...
Wir machen wieder...
Ah, ich weiß, was wir machen.
Wir machen wieder unser...
... Dark-Theme.
Oder?
Dark-Theme muss sein.
Oder was sagt ihr?
Dark-Theme muss.
Ohne...
... da platzen dir sonst die Augen, wenn du die Anwendung aufmachst.
Dark-Theme muss sein, ja.
Das klauen wir uns aus unserem Memboard.
Da haben wir doch hier Styles, CSS.
Ja.
Dark Mode, Light Mode.
Bam.
Coby Paste.
Beste.
So.
Dann brauchen wir noch einen Styles, CSS.
So, Styles, CSS.
C, F, S.
CSS.
Ja.
So.
Styles.
Wir können den DBA-Gammer anmachen.
Oh, die sind diesen...
... den da.
Genau, gucken wir mal, ob alles gut ist.
So.
Body.
Body.
Background.
Gucken wir mal.
Wahr.
Ne, wie ging das?
Wahr.
Wahr.
So, ne?
Äh, BG.
Oh, fuck, wie ging das mit CSS-Themes noch mal?
Das war doch irgendwie...
Ah, wie ging das?
Ich muss mal, ich muss mal abgucken.
Class, Theme.
Und dann?
Ne, wie habe ich das noch mal gemacht mit CSS?
Moment, ist doch falsch.
Können wir einen krassen HTML-Skills beiwohnen?
Auf Miner.
Ja, das, sag mal so, das wäre theoretisch damit möglich, aber das habe ich nicht vor.
Deswegen mache ich es ja auch so, dass es nur angeht, alles, wenn wirklich einer klingelt.
Rest ist auch komplett.
Was interessiert mich, was die Leute auf der Straße machen?
Moment, wie ging das jetzt noch mal mit CSS-Themes?
Ich stehe gerade voll auf dem Schlauch, wie das noch mal funktioniert hat.
Nicht K, wahr.
How to easily create themes.
Best Stackoverflow driven ohne Ende.
Ach so, class gleich line-theme.
Ja, genau, stimmt, so war das.
Man gibt hier einfach Dark Mode, gibt man an, und dann sagt man Background BG.
Wobei das eigentlich funktionieren sollte jetzt, was es aber nicht macht, oder?
Ohne Punkt?
Oh, meine CSS-HTML-Skills, man hätte sich denken können, eigentlich nach den letzten
zwei Web-Anwendungen, die wir gebaut haben, ist das besser geworden, aber vergesst es
einfach.
Ich wäre wahrscheinlich nie der krasse CSS-Hackster.
Ja, nice, nice.
Color ist FG.
Schauen wir mal, haben wir ein schönes Dark Mode-Theme.
Dann brauchen wir als nächstes noch eine ordentliche Schriftart.
Was habe ich denn hier von der Schriftart genommen?
Die sah eigentlich ganz gut aus, die wir im Meme-Tool haben.
Schriftart, habe ich welche hier.
Font, hier, da, genau, Material-Icons und Roboto-Font.
Zack, Font, Family, und wie hat man das dann eingegeben?
Copy-Paste-Programming, so.
Ach, guck mal, ich könnte hier einfach auch mein Zeug mal rippen von der anderen Anwendung
wieder.
Color, FG, so.
Was dein CSS-Selektor geht gar, wo habe ich, wat?
Ah, so, ne?
Stimmt.
Boah, ich sehe da keinen Unterschied.
Ne, das müsste schon funktionieren.
Oder?
Doch, doch, das müsste schon gehen.
Weil, weil, dann kann ich die austauschen hier.
Doch, das müsste so gehen, das habe ich im anderen auch so gemacht.
Okay, also wir brauchen jetzt einen, wir brauchen jetzt, was haben wir gesagt?
Wir brauchen einen Video-Element.
Moment, brauchen wir einen Video-Element?
Ich muss mal hier nachgucken, wie die das machen.
Demo, Demo, Streaming, Demo, Watch.
Ja, ist mir egal, ob es geht oder nicht.
Die nehmen ein Video-Element, okay.
Die nehmen ein Video-Element.
Eigentlich können wir das hier mal zumachen.
Video-Element, und zwar ein Video-Element mit einer Breite, irgendwie, keine Ahnung, machen wir mal so.
Mal gucken, ob man das dann wenigstens sieht.
Warum sieht man das Video-Element nicht?
Wahrscheinlich, weil da keine Source drin ist.
Weil man das nur mit Source sieht.
Ist das so, sieht man das Video-Element nur mit Source?
Wir können ja einfach mal den Rand drum herum machen.
Border.
Wide.
Solid.
2 Pixels.
Okay, passt, ich habe es ein bisschen groß gemacht.
So, und das Video-Element machen wir auch von der Breite her.
Das machen wir nicht hardcoded, sondern so, genau.
Das passt eigentlich von der Größe her schon ungefähr.
Wir sagen ihm noch Breite, haben wir ungefähr, was weiß ich, 90%.
Ach nee, da müssen wir es ja noch centern.
Oh, meine CSS-Skills. MP4-Video rein oder so.
Wir gucken mal, wir streamen da jetzt einfach direkt das Kamerafeed rein, würde ich sagen, oder?
Ich muss den Kamerafeed nochmal wieder starten.
Der läuft nämlich nicht mehr.
So.
Mal gucken, ob der Kamerafeed wieder funktioniert.
Gucken wir mal.
Streaming, Test, Start.
Warum genau, ah doch jetzt.
Hat einfach nur ein bisschen gebraucht.
Ein Highspeed-Feed, wie es aussieht.
Sag mal, die Kamera spackt doch irgendwie, oder?
Die Kamera spackt doch irgendwie rum.
Mann, was ist denn das?
Was soll denn das hier?
Wo ist der Kotzen?
Machen wir nochmal VLC-Play.
Das braucht auch schon viel zu lang.
Ich starte die Kamera nochmal neu.
Leute, ich starte die Kamera nochmal neu.
Ich starte nochmal neu.
Man weiß nicht so.
Display Flex Imparent.
Flex, so.
Ach nee, dann macht es aber das komplette, oder?
Und dann?
Und dann, dann sage ich Höhe, oder was?
Nee.
Oh, oh, oh, CSS-Zeug.
Hör mal auf.
Ich bin da wirklich sehr planlos, was das Ganze anbelangt.
Warum ändert eigentlich, wenn ich die Höhe angebe, ändert das was an der Breite?
Was ist denn das für eine Logik?
Margin Null Auto, aha.
Aber da fehlt immer noch was, ne?
Was wirklich schön, sieht das nett aus.
Da hat mir das vorher besser gefallen.
So.
Im Prinzip, ja.
Warum ich jetzt keine ordentliche Höhe angeben kann, weiß ich nicht.
Aber wir versuchen jetzt gleich nochmal da, das Video reinzustremen.
Gucken, ob die Kamera wieder da ist.
Ja.
Habt ihr gesehen, wie lang die Latenz ist mit VLC und wie schnell unser Kram ist?
Mal ein bisschen was schließen hier.
Ist mir gerade ein bisschen viel.
FFmpeg, FFmpeg copy, bla, bla, bla, bla, log lost, bam.
Und jetzt gucken, ob es funktioniert.
Was?
Was ist denn da los?
Was ist denn da los?
Guck mal an, wie lahm das ist.
Fuck.
Was da...
Das war doch vorhin...
Ich hab echt Schiss, dass die Kamera voll abkacken ist gerade.
Ich mach das mal von meiner Windows-Kiste aus jetzt.
Überhitzt...
Überhitzt die Kamera.
Was?
Was?
Echt nicht.
Invalid.
Oh ja, Windows.
Windows, Anführungszeichen.
Aber jetzt brauchen wir nicht Localhost, sondern die IP von meiner VM.
Ja, bekommt ihr bekommt alle Rechte, um daran zu lauschen.
Leute, irgendwas stimmt mit der Kamera nicht.
Close.
Irgendwas stimmt mit der Kamera nicht.
Was ist denn da los?
Warum ist die so langsam, WTF, was ist da los und warum hängt das jetzt?
Hab ich irgendwas im Hintergrund laufen, was was macht oder so?
Ihr hört den Sound, ey, das ist voll am Abscheißen.
Guck mal hier.
Ich drücke jetzt mal den Knopf.
Wo ist jetzt der klingelte Knopf?
So, ich mach das mal aus.
Was hab ich?
Hab ich irgendwas laufen, was im Hintergrund ein Stream von der Kamera auf hat oder so?
Okay, meine Epic Music-Dings wird es wahrscheinlich nicht sein.
So.
Was ist da los?
Häh?
Was, was geht mit der Kamera denn ab?
Ja, Kameradenos, genau.
Ich bin jetzt echt überfragt gerade, was mit dem Ding los ist.
Ich, ich, ich zieh jetzt mal den Stecker raus, warte mal.
Vielleicht liegt es ja auch irgendwie am Access-Point.
Vielleicht liegt es ja auch irgendwie am Access-Point, wo das Ding dranhängt.
Ja, China-Schrott, genau, so sieht es aus.
Aber zumindest hat es bis eben immer getan.
Und das mit dem Überhitzen kann eigentlich nicht sein.
So lange ist es hier nicht an.
Ich hatte die schon den ganzen Tag laufen.
Wisst ihr was, wir gucken uns das jetzt mit dem offiziellen Direct X, Active X Frontend an.
Also okay, wir können jetzt, wir können hier doch eigentlich nichts mehr aufhaben, oder?
Ja, das ist nichts mehr auf zur Kamera.
Ich mach jetzt alles mal zu.
Nichts mehr auf.
Guck mal, ob jetzt die Kamera wieder da ist.
Ich hab keine Einschätzung an der Kamera geändert, ich war ja überhaupt nicht im Web-Interface.
Das habt ihr ja gesehen.
Pass auf, wahrscheinlich startet sie jetzt gar nicht mehr und ist im Arsch.
Oh, sie hat geknackst.
Das ist immer, das ist, auch wenn sich so schlecht anhört, das ist ein gutes Zeichen.
Wenn die Kamera knackst, startet sie sich.
Die knackst immer einmal.
Die Kamera ist wieder da.
Close.
Okay, noch ist sie nicht wieder da.
Ist immer noch nicht wieder da.
Die Kamera ist wieder da.
Hä?
Was ist denn das?
Ah, das brauchen wir ein bisschen, oder?
Okay, jetzt scheinen sie wieder zu gehen.
Okay, es scheint wieder zu tun.
FFmpeg, bam.
Ja.
Komisch.
Komisches Ding, äh.
Also wirklich gut funktioniert, tut es immer noch nicht.
Ganz schönes Delay.
Jetzt ist es okay.
Weil man sagen muss, wirklich gut funktioniert, tut es nicht.
Ah doch, es ist halbwegs, halbwegs schnell.
Okay.
Wobei das ganz schön schwankt, ne?
Haha, sie strebt aus der Zukunft.
Also wenn ich meinen Finger drauf mache, geht es halbwegs von der Geschwindigkeit her.
So eine Sekunde oder so.
Also es ist okay.
Hat sich das Ding irgendwie, es sollte eigentlich konstante Bitrate haben, das Ding.
Ich meine, dass es hier ab und zu mal ein paar Packages dropt, ist okay.
Es sollte aber eigentlich konstante Bitrate haben von irgendwie 4-5 Mbit.
Vielleicht hat sich da irgendwas umgestellt bei dem Ding.
Ja.
Epic Music, es ist epic.
Video.
Ja, constant, es sieht sehr constant aus.
Furchtbar constant.
Lol.
Naja, wir akzeptieren das jetzt einfach mal so wie es ist.
Was passiert, wenn ich sie wieder umschalte auf Variabel?
Saved.
Da ist immer noch constant. Vielleicht muss ich den Stream neu aufbauen.
Da ist kein Unterschied zu sehen, ne?
Vollkommen egal ob Variabel oder nicht.
Jetzt ist sie übel schnell wieder.
Jetzt ist sie übel schnell wieder, wenn ich meinen Finger davor halte.
Okay, anscheinend ist jetzt die Variabel, jetzt ist sie glücklich und dann ist gut.
Alles okay, Kamera, alles gut.
China Crap, ey.
Jetzt stellen wir mal wieder um auf constant, was dann passiert.
Genau das gleiche. Juckt nicht.
Jetzt ist es auch toll, dass constant A4096 sind hier.
Egal, scheiß drauf, es ist wurscht.
Egal, wir wollen uns jetzt nicht wieder aufhalten.
Wir müssen jetzt wieder Firefox aufmachen,
unser Wüschel Studio Code aufmachen und weitermachen.
Den Live Server müssen wir wieder starten.
So, da sind wir. Und wieder umschalten auf iOS Größe.
Sehr schön. Geht das hier noch? Ja.
Okay, also wir machen so grob das Layout.
Hier oben kommt das Video hin.
Und dann brauchen wir, im Prinzip ist die Oberfläche von der App wahrscheinlich echt super simpel.
Class, Material, Icons.
Und dann gibt es da sowas wie Audio.
Mute.
Lass uns die Übersicht angucken von den Icons, was es gibt.
Und dann nehmen wir hier irgendwie was, was nach Audio-Button aussieht.
Mute.
Volume. Mute.
Volume. Gibt sowas wie Call, Video, Video-Call, Call.
Ich glaube, Call ist in dem Fall besser.
Was meint ihr, was besser verständlich ist?
Den Kopfhörer, weil ich meine, ich bin ja nicht der Einzige, der das verwendet.
Den Kopfhörer oder einen Mute-Button?
Mute-Off.
Ich glaube, Mute-Off ist insofern eigentlich besser, weil man daran sieht, dass standardmäßig gemutet ist.
Wo ist der Button?
Da.
Ach, Volume-Off, was?
Ups.
Fail.
Ja.
So, und den wollen wir jetzt, Font-Size.
Irgendwie keine 50 oder...
Was?
Warum geht das nicht?
Kommt das Projekt auf GitHub wahrscheinlich?
Warum geht das jetzt nicht?
Ich meine, die normale Schrift ist ja groß, aber die Material-Icons irgendwie nicht.
Ich bilde mir ein, die ging eigentlich auch so.
Warum wird das nicht groß?
Da machen wir mal einen eigenen Diff drum.
Einen eigenen Diff bei HTML, immer Magic.
Bringt uns aber auch nichts.
Hat jemand eine glaubreiche Idee, warum das nicht groß ist?
Warum sich die Font-Size nicht ändert?
Die kann man scale, ich weiß, dass man die scale kann, das habe ich in anderen Sachen auch schon gemacht.
Mal gucken, ob die color funktioniert, Prinzip, ja.
Ja.
Warum geht denn die Font-Size bitteschön nicht?
Ist das vielleicht irgendwie eine Mobile-Geschichte?
Nee.
Ja, meine krassen CSS-HTML-Skills fangen schon bei sowas an, wenn das Icon einfach nicht groß werden will.
Also keine glaubreiche Idee, oder?
Wie kann ich jetzt den Text übrigens in der Meta machen?
Wo?
Achso.
Das geht?
Warum?
Okay, meinetwegen, dann geht das auch gut.
So, dann sieht das Video kacke aus.
Okay, dann machen wir das jetzt anders an.
Kann man eigentlich in CSS irgendwie das Ding, dass das sich selbst in der Mitte alignt, oder so?
Da geht doch irgendwie so Flexbox-Magic, oder so, oder irgendwas.
CSS-Tricks, Flexbox, was ist CSS-Tricks?
Ich hasse so CSS-Gefriegel, ey.
Wollte das jetzt nicht irgendwie in der Mitte sein danach?
Die Musik geht ab. Wunder, als hätten wir jetzt irgendwas Geiles gemacht, ey.
Bisschen rumgebastelt und gut ist.
Wir können...
So, immerhin im Prinzip ist das eigentlich schon so mit das, was wir brauchen auf der App, oder?
Viel mehr brauchen wir noch eigentlich nicht.
Wir brauchen einen Knopf, wir brauchen einen Button.
Machen wir da mal einen Button draus.
Ja, wir brauchen einen Button zum Entmuten.
Den können wir sogar noch ein bisschen fetter machen, dass keiner vorbeiklickt.
Soll der Mute fürs Hören oder für beides?
Das ist sonst zu aufwendig.
Du willst ja nicht eine halbe Stunde klicken, bis du das hinkriegst.
Weil es ist unter iOS so, du kannst die Permissions nicht speichern.
Also sprich, Safari wird dich jedes Mal fragen, ob du wirklich Mikrofonrechte geben willst.
Das heißt, standardmäßig sieht man einfach nur das Video von dem Dude vor der Tür oder von dem Grill vor der Tür.
Und dann klickt man da drauf und dann fragt dich Safari, wollen sie wirklich Kameraverbindungen herstell...
Dingsrechte geben und dann sagst du Ja und dann hört er dich auch gleich.
Sonst, wenn du da eine halbe Stunde rumfuddeln musst, ist blöd.
Du kriegst eine Push-Nachricht, wenn es klingelt, du kriegst die Push-Nachricht, dann geht die App auf.
Und dann siehst du, was das für ein Typ ist.
Und wenn du da mit dem sprechen willst, dann, wenn das nicht für die Leute sind, sind die fürs Zirkus sammeln oder so.
Da ist dann Instant Ignore angesagt.
Die App ist schon sehr spartanisch jetzt, ne?
Spartan.
Das macht man nicht so, ne? Das macht man anders.
Da macht man Position Absolute Bottom oder sowas.
Da macht man auch irgendwie hier Position Absolute.
Und dann sagt man Top, irgendwie so ging das doch, Top 15 Pixel, Left 0 Pixel, ne Left, keine Ahnung, 5 Pixel, Right 5 Pixel.
Warum geht denn das nicht?
Da ist bestimmt nur Martian oder so drin.
Drumherum, Martian 0, Padding 0.
Kann mir irgend einer jetzt mal logisch erklären, warum dieses Ding auf beiden Seiten nicht gleich ausgerichtet ist?
Heißt, alle Systemdesign anscheinend liegen nur an den Apple Richtlinien.
Richtig, die sind wirklich hinten dran bei der ganzen Geschichte.
Muss man auch irgendwie machen.
Display.
Wie kriege ich denn das jetzt bündig links und rechts?
Brauche ich jetzt mal eure CSS Pro Tipps.
Mute.
Der Auskenn-Fuchs ist am Start.
Vorhin habe ich schon mal gefragt, wo sind denn diese Sharp-Profis wieder?
Auskenn-Fuchs wieder, da ist er.
Box-Sizing-Border-Box, wat?
Nee, bringt auch nichts.
Ich will das doch einfach nur zentriert haben.
Komm an, brah.
Warum geht das denn nicht? So ist das Problem.
So.
Der kommt jetzt bottom.
Bottom 5 Pixels.
Und zwar der Button.
Left.
Eventuell hat der Body noch Padding.
So wird man doch ausmachen, oder?
Hat er nicht.
Den Mindest-Dings kann man uns übrigens komplett schenken hier.
Left.
Ja, da funktioniert das, right?
Hier der Button kann sich ausrichten, aber das Video-Element hat keinen Bock.
Das Video-Element, äh, debated.
Uns richtig.
Oh, das Meme-Board ist aus.
Oh, fatal, fatal, wo ist es?
Wo ist es?
Wo ist das Meme-Board?
Das Meme-Board wird erstarten.
Sollte eigentlich wieder gehen jetzt.
Es geht wieder.
Hey Max, hast du mal irgendein Programm für einen Hardware-YouTuber geschrieben?
Vielleicht Hardware-Rad oder so, ja?
Ja, hab ich.
Das ist immer noch, äh, in der Optimierungsphase.
Stimmt, wir haben sogar ein Kommando für.
Hab ich ganz vergessen schon.
So Leute, ich brauch Ideen, wie man dieses komische Ding da richtig ausrichtet.
Das interessiert sich für rechte Pixel absoluten Scheiß.
Moment.
Das geht?
Aber das geht nicht.
Aha!
Wie war das?
Aha!
Ich mein, so wirklich richtig aligned ist das immer noch nicht.
Aber es macht zumindest was.
Warum Position Absolut?
Frag mich nicht, weil ich mir gedacht hab, das kann ich besser ausrichten damit.
Aber das, ähm, nun ja.
Das war keine so gute Idee wahrscheinlich.
Warte mal, machen wir jetzt hier oben irgendwie Padding.
Ich weiß immer nicht mehr, was ist außen Padding oder Margin?
Margin Top.
Margin Top und dann geht's links, kriegt's...
Ah, nee.
Passt.
Okay, gut.
Ja, so kann ich mitleben.
Aber 40.
Das ist ein bisschen in der Mitte.
Gib dem Video, gib dem Hut-Element von Video Display Flex.
Und dann Align Items Center.
Oh, jetzt wird's Pro.
Nee, klappt nicht.
Aber das brauchen wir nicht mehr mit Text Center.
Oh doch, doch.
Oh doch, das brauchen wir noch.
Ey, wir sollen jetzt nicht so viel Akt machen wegen so ein paar Paddingern da.
Margin Top, einmal 30.
So.
Und hier unten das Ding, das machen wir Bottom 15.
Und dann irgendwo in die...
Wow.
Wie macht man das jetzt eigentlich schön in die Mitte?
Wie macht man das hier jetzt, wie würde man das jetzt schön in die Mitte machen eigentlich?
Ach, deswegen hatte ich das da drinnen.
Deswegen hatte ich das letzte Mal da auch drinnen.
Uh.
Das sieht jetzt noch kaputtere aus als vorher.
Texte Line Center, das hatten wir vorher schon.
Ich möchte jetzt ja das Ding hier in der Mitte ausrichten.
Aha.
So war das, genau.
Richtig, so ging das.
Das Video packt rum, weil du dem Video keine Breite und Höhe gegeben hast.
Du meinst, du meinst hier, ja aber kann ich, ich müsste ihm doch sagen können.
Okay, also meinst du ihm, wenn ich ihm sage, dass wir, wir wollen 80% wollen wir haben.
Oder sagen wir so, wir wollen 90% haben, äh, nicht 980, 90%.
Oh, der ausgehend Fox hat was am Start, das ist ja nice.
Ah ja, ja, ja.
Das gucke ich dann, wenn ich, wenn ich, ähm, gucke ich gleich nochmal rein, wenn ich es irgendwie bra...
Moment, was hat, was hat es jetzt gemacht?
Warum interessiert sich das Ding für...
Okay, ich mach das jetzt neu her, zack.
Ah, der ausgehend Fox, der kennt sich aus.
Genau, und dann können wir hier noch ein Padding im, wie 10 Pixel oder so, im Body machen.
Moment, warum ist das jetzt bloß links?
Habe ich jetzt irgendwas, habe ich irgendwas nicht mitcopy pasted von dir?
Warum?
Warum ist das jetzt links nicht?
Hä?
What the fuck?
Ich hasse diese CS, er ist gefreckelein, er.
Da bin ich aggressiv bei.
Also da fand ich, das was ich bisher gebastelt habe, eigentlich auch ganz okay.
So, gut ist.
Was?
Flex Direction Column.
Wo macht man das rein?
Ich mach jetzt mal wieder das da.
Das sah doch ganz okay aus, da konnte man, da konnte man doch mit leben so, das war doch in Ordnung.
So, jetzt müssen wir mal gucken, wie wir das Video da rein kriegen, das wird noch ewig.
Den Mute Knopf haben wir aber ein bisschen höher.
Und noch ein bisschen größer.
Was?
So, das ist eigentlich okay, das kann man doch so lassen.
Was ist das für Musik?
So, ich guck mal kurz ab, wie ich hier meine Buttons gemacht habe.
Wobei.
Weil der Button ist doch eigentlich okay, den kann man doch so lassen, da muss man doch gar nicht viel, da muss man doch eigentlich gar nicht viel dran rumbasteln, das ist doch okay.
So, die Border Color machen wir noch auf, äh, Comment oder so, ja.
Dann die Button, Background, machen wir noch, was nehmen wir denn mal für eine Farbe?
Das Gleiche.
Border aus.
Border Null.
So, okay, und jetzt gucken wir mal, dass wir da irgendwie das Video rein kriegen.
Macht den Button mit abgerunden, das ist schon, das ist Apple Style, das ist besser.
So, und dann machen wir, bei der Gelegenheit machen wir das Video auch noch mit runden Ecken ein bisschen außen.
So, das Video da rein kriegen wird jetzt ein bisschen WebRTC technisch schwieriger, da müssen wir uns nämlich den Source Code von der Beispielseite angucken.
Wir brauchen erstmal eine JavaScript File.
Wir machen es gerade mal ohne View, wir machen mal Raw JavaScript.
Okay, wie funktioniert das jetzt mit der, woops, ja.
Okay, machen wir hier unten einfach mal Inline Script, wurscht.
Okay, wir müssen uns mal angucken, wie das, ich verschiebe das gerade mal auf den zweiten Desktop.
Jetzt kommen die Windows Pro Features, wenn ihr verwendet.
Und dann unter var www.html und dann gibt es hier irgendwie den StreamingTest.html.
Das ist voll eklig, aber das ist glaube ich gar nicht so schwer, wie das hier funktioniert, also das ist die Testseite von dem hier.
Das ist die Testseite von dem hier, was wir uns vorher angeguckt haben.
So, und das wollen wir im Prinzip machen bei uns.
Jetzt ist die Kamera wieder übelst schnell. Die hat vorhin einfach nur rumgebackt.
Na ja, kann ich mitleben.
Wie switchst du mit Keybindings die Workspaces? Meinst du jetzt den Deluxe oder den Windows?
Control, Windows-Taste, File-Taste. Epileptische Anfälle.
Genau, und das müssen wir jetzt hier irgendwie nachbauen. Wie machen die das hier das denn?
Die haben hier viel geschwuppelt drum herum, was wir alles nicht brauchen.
Wir brauchen im Prinzip Connect.
Das ist von mir da drinnen, das ist von mir drinnen, das ist nicht. Also im Prinzip müssen wir das hier machen.
Init und dann einfach sagen Add Stream oder irgendwie sowas. Ich glaube das ist gar nicht so kompliziert.
Wir müssen jetzt erstmal die komische Library von denen wieder einbinden.
Wo ist denn die? Ah, machen wir mal das HTML auf.
Was ist für eine Eindrückung? Moment, ich muss mal kurz umformatieren.
WebRTC-Adapter.
Brauchen wir das alles? Ne, das brauchen wir nicht alles. Wir brauchen garantiert keinen Bootstrap und Geschiss.
Brauchen wir alles nicht.
Und das können wir verschieben, weil wir nicht so viel Platz für unser Fake-iPhone brauchen.
Das kommt alles raus. Ich weiß nicht genau wofür wir den WebRTC-Adapter brauchen, aber die werden sich schon was bei gedacht haben.
Kann man da vielleicht irgendwie ein bisschen Intellisense oder so jetzt für das? Ah, Moment.
Das funktioniert natürlich so nicht. Das müssen wir erstmal abrufen von...
So.
Konnte Visual Studio nicht irgendwie TypeScript Definitionen irgendwie nachladen von URLs oder sowas?
War das nicht so nice? Konnte das das nicht irgendwie...
Das wäre sehr praktisch jetzt für uns.
Ich will nicht Memory, ich will Network haben.
Ich glaube einfach mal, dass wir das richtige getten, sonst wird es hier auch meckern, wenn das nicht runterladen kann, oder?
Ja. Okay. Kannst du da das Element ins Becken? Doch, doch. Nein, das ist ja das, was ich mir angeschaut habe, ist ja das Sourcecode von der Seite.
Ich weiß, dass du seit neuestem Unix ähnliches OS arbeitest, das eigentlich auch ganz gerne mit der Bash Shell. Lohnt es sich eigentlich Bash tiefer zu lernen? Ja, auf jeden Fall.
Ich finde schon. Ich finde schon, man kann damit viel Kleinkram machen.
So, also was müssen wir jetzt machen? Wie machen die die Jungs das hier denn? Die machen erstmal ein... Moment, falsches File. Die machen erstmal einen...
Blablabla. Init machen die. Init. Debug all ist schon mal super. Da kriegen wir bissi bissi was raus. WebRTC supported. Das wollen wir ohne den Klick machen.
Wir kopieren uns das gerade mal hier raus und probieren mal aus, was jetzt passiert. Schließen wir das Ganze mal. Ich muss nochmal schließen, ne?
Oder? Ne. Ich muss Klammer noch zumachen. Ne. Oh, Leute. Erbar-Script, Einrückung, please. Ne, ich muss auf jeden Fall nochmal schließen. Und dann?
Nochmal schließen. Und dann? Closen. Ne. Closen. What? Okay, diesen ganzen Scheiß hier brauchen wir eh nicht.
Closen. Außerdem machen wir das überhaupt nicht mehr so. Wir machen da irgendwie ne ordentliche... Oder nicht? Moment.
JavaScript-Sundags macht mich gerade wieder durcheinander. Ne, wir müssen... Okay, okay, okay. Wie waren Lambda-Geschichten in JavaScript? War doch so, oder?
Okay, wir machen das mal langsam. Debug all. Zack, zack, zack. Wo ist denn jetzt das Problem schon wieder, Kollegen? Wo?
Wo? Callback-Function. Schreiben wir es mal so, wie es ursprünglich geschrieben hat. Okay. So. Das funktioniert.
So. Und wie hat man den Kram jetzt? Konnte man nicht einfach... War das nicht in Javascript, dass man so einfach ne Lambda-Funktion jetzt gemacht hat? Oder bin ich jetzt gerade komplett verwirrt?
Oder war das jetzt so, wie man das neu geschrieben hat? Ah, genau so war das, wie man das schreiben kann. Das Ding... Er möchte den Namen Callback haben an der Stelle, ne?
Das muss Callback heißen. Ja. Okay.
Es freut mich zu sehen, dass die Leute... Ja, ich bin ja auch nicht der große Javascript. Auch wenn wir in letzter Zeit viel mit Javascript gemacht haben, bin ich da wirklich nicht der Superprofi drin oder so.
Ich finde auch, Javascript ist immer so ein ekliges Rumgehangele. Okay, wie machen sie denn weiter? Attach kommt als nächstes.
Create Session. Create Session. Server. Wo kriegt er... Wo kriegt er Server her? Server. Ach so, hier vorn. Okay, das können wir da von Hand reinschreiben.
Server. Okay, kopieren wir uns das mal. Das scheint mir jetzt das nächste Relevante zu sein, was wir brauchen. Und das haben die wohin gemacht?
In den Success rein. Callback hell is real.
Okay. Server is not... Ich weiß, dass Server not defined ist. Und warum rückst du das so scheiße ein?
Ich kann selbst nicht mehr einrücken. Server is not defined. Ja, das ist klar. Wir wollen HTTP 2150...
Wollen wir Netzwerk down? Ist das Server down? Ist das Server down? Nein. Ist er nicht. Ich habe irgendwas falsch gemacht.
Was ist das eigentlich für ein Commandline Tool, was du benutzt? Welches? Das hier? Das ist T-MAX. T-MAX ist super.
Da kann man so Sachen machen wie Editor auf. Unten eine Auslastungsanzeige und keine Ahnung. Und links irgendwas kompilieren oder so zum Beispiel.
T-MAX ist sehr praktisch. Beste.
Ja, noch skiller prinzipiell ist mir auch klar, wie das funktioniert. Jetzt brauchen wir hier Success.
Ach so, Moment. Der Port ist ja auch falsch. Der Port ist ja auch komplett falsch. Der richtige Port ist ja nicht 80, sondern 8088.
8088. Bam, funktioniert. Session-Talken am Start. Frag mich nicht, warum er so was erzählt wie Server down. Hier unten geht es ja eindeutig.
Creating Session am Start. So, Success. Was geht hier eigentlich mit der Musik ab?
Hey, hey, hey. Wir suchen jetzt, wir machen jetzt Two Hour Epic Things Collection Nummer 4 machen wir jetzt an. Jawoll.
Okay, sehr schön. Also jetzt kriegen wir schon mal ein Session-Talken. Wie geht es denn jetzt weiter als nächstes?
Attach, Attach-On müssen wir uns. Attach-On. Das kopieren wir uns mal. Das kopieren wir uns mal rüber. Das brauchen wir garantiert.
Ich würde gerne das irgendwie ein bisschen aufsplitten. Das wird mir sonst viel zu, die Einrückung werden wir sonst viel zu tief.
Wobei, das können wir kürzer schreiben. Das darf man jetzt ja neuerdings so schreiben. Stimmt's? Ja.
Und jetzt brauchen wir irgendetwas Attach. Den ganzen Schrott kann weg. Auch weg. Auch weg.
Streamlist brauchen wir. Weiß ja nicht ob wir das brauchen. Klammer zu viel. Dings schließen. Wozu gehört das jetzt?
Einrückung auf Doom. So. Genau. Hauptsache klammern. Konnte man das nicht reformaten lassen? Format Selection.
Nicht wirklich. So. Attach. Das sieht ja bis jetzt noch ganz umgänglich aus eigentlich. Oder? Das sieht ja bis jetzt noch ganz okay aus.
Streaming. Plugin Handle. Wo kommt das Plugin Handle her? Ah nee, das kriegen wir hier rein als Parameter.
Sag mal, dieses Success ist das irgendwie ne Promise-Geschichte oder so? Kann man das irgendwie awaiten? Ich kenn mich da zu wenig mit aus. Kann man das irgendwie awaiten und schöner schreiben oder wollen die halt einfach so ein Key-Value-Ding und eins davon muss ne Funktion sein?
Das RTL 5 Element kann kein WebRTC. Du kannst nur... WebRTC musst du Peer2Peer mit Typen machen, die RTC'n. Und das ist der Server. Der Server ist für mich der WebRTC-Partner, der mir ein Video schickt.
Sonst würden wir das Video vom Server überhaupt nicht streamen können ohne das Ding. Weil WebRTC ist ja Peer2Peer, das heißt ich müsste dann quasi... Tja, das geht ja gar nicht. Ich hab ja keinen Peer in dem Sinn.
Ok, wie funktioniert das Streaming gleich? Plugin Attached.
Was ist denn... Was ist denn eine ID? Was will er da haben? Streaming test minus random string. Haha, auch gut. Kann ich auch mitleben. Wo macht er das hier irgendwo, ne?
Ok, und woran hängt das jetzt? Ah, jetzt funktioniert's. Ne. Was hat er jetzt für Schmerzen? Update Streamlist. Ach nee, Moment, das ist ne Funktion, die hab ich ja gar nicht. Ah, jetzt funktioniert's.
Wird das eine reine Web-App nennen? Ich versuch das zu einer Progressive-Web-App zu machen, dass man das quasi auf ein Home-Screen packen kann.
Ok, das heißt ich hab jetzt irgendwie ne Connection connected. Wie macht man das? So? Oder darf man JavaScript auch einfach so machen?
Schön ist es, ne? So, und jetzt macht er... Und jetzt machen sie hier List Streams. Ach, das ist gar nicht so ein großer Akt. Update Streams, Streamlist.
Die haben hier nämlich ganz viel HTML und CSS verwurstet, was wir so gar nicht machen. Das ist richtig Progressive und Agile. Wir sind Scrum.
Streaming, Send. Ah ja. Ah ja, ok. Ah, guck mal, jetzt können wir mit dem Server kommunizieren. Jetzt können wir hier quasi sagen...
Jetzt können wir hier sagen... Request List. Ja, das brauchen wir nicht. Das... Warum kann... Ich hab echt... Kann man das hier nicht irgendwie schöner machen, dass irgendwie...
Dass wir das awaiten können oder so. Das ist übelst hässlich. Mit dem Callback in dem Callback und im Callback, ey, da flippst du aus bei.
So, jetzt hab ich die Liste von meinen Streams. Genau, das ist doch schon mal schön. Ich mein, Callback des Callbacks vom Callback, das kann doch nicht.
So, einfach awaiten kann ich das nicht, ne?
Ok.
Ne, das geht anscheinend nicht.
Amandest du in der Firma auch mit C-Sharp? Leider quasi gar nicht. Ok, Leute, ich sehe, wir brauchen wirklich ein eigenes JavaScript-File, sonst wird es ein bisschen zu viel.
Main.js. Und dann machen wir async-mafe, ne?
Ey, ich struggle schon mit Functions in... Das ist jetzt die C-Style JavaScript-Variante.
Nice. Jetzt haben wir eine Mainfunktion.
Leider, C-Sharp ist seit Anfang an meine Lieblingssprache.
Es gab so eine Möglichkeit, Funktionen... Ja, das kenne ich. Ich dachte, man darf jetzt neuerdings irgendwie sowas hier machen. Davon aber nicht, ne?
So, weil jetzt können wir das ein bisschen aufsplitten. Wir haben hier Funktionen. Ich weiß noch nicht genau wie. Dann kann man das aufrufen von da oben, oder?
Geht das? Ne, Moment, an der Stelle schon mal nicht da. Das geht, ne? Genau. Weil sonst haben wir hier gleich ne Einrückung bis zum Mond.
Ah! Stimmt. Ne. So? So, ha? Oder nicht?
Ne, das ist...
Ich programmier auf der Arbeit nicht wirklich viel. Ich kümmere mich um unsere Software-Repos, um Versionsverwaltung und Merchrequests und Release-Management. Programmieren ist leider nur am Rande. Ich muss aber viel Quellcode lesen.
Ich hätte es gerne manchmal andersrum. Das muss man doch irgendwie schöner machen können hier. Das erstrebt mich ja so richtig.
Also, jetzt kann man doch hier sowas machen. Wir haben irgendwie Funktionen. Irgendwie keine Ahnung. Lists, Streams. Oder so. Get. Get, Stream. So. Get, Stream.
Aber das da unten... Ja, ja, ist ja gut. Get, Stream. Und dann... Das komische Debug-Ding machen wir da weg. Und dann sagen wir hier einfach nur Get, Stream.
Ah, das... Warum funktioniert das denn jetzt wieder nicht? Ach so. Weil Streaming eine globale Variablen aufgeht. Kein Problem. Easy.
Was sind eigentlich der Unterschied in JavaScript zwischen Konst und Wahr? Konst kann ich jetzt natürlich hier nicht editieren, oder? Weil es ist ja Konst.
Ja, genau. Da nimmt man Let. Okay, Let nimmt man da jetzt. Aha.
So, so. Kokona. Da muss ich mir noch irgendwas überlegen, weil man das dann wirklich bei diesem Success, irgendwas, Success, irgendwas. Das geht mir ganz, ganz massiv auf den Keks.
Massive. Huge. Huge geht mir das auf den Keks. Okay, jetzt haben wir den... Moment, haben wir den Stream schon gegettet eigentlich?
Ach nee, wir getten, wir getten den ja nur hier. Return. Result. So.
Okay, Let, Let, Let. Ich lass mich mal über Let. Stream. Gleich. Jetzt haben wir, okay, jetzt haben wir einen Stream. Stream List. Stream List.
Wir wollen, wir wollen eigentlich nur den ersten Stream, weil es der einzige Stream ist. Object, Streaming, List. Warum, warum? Schau mal da.
Lock. Stream. Oder auch nicht. Wo ist denn jetzt mein Stream?
Lock. Hallo. Lock. Ich seh die Ausgabe nicht. Ah. Undefined ist das Stream. Warum, warum ist das Stream undefined? Weil ich das falsche Objekt mir hole, ne.
Oder? Warum geht denn das jetzt schon wieder nicht? Was ist denn das schon wieder? Vollkommen unintuitiver Krempel, ey.
Und welche App geht es? Ich mach, ich programmieren ein Frontend für meine Gegensprechanlage, dass ich die auf allen Endgeräten verwenden kann. Oh, Donation.
Am Start. Dankeschön. Ich kann Donate Desmoron aus 5 Euro. Ein kleines Dankeschön für den eisigen Konrad. Ja, bitte schön. Ich find's nice, dass euch das gefällt.
So. Result. Result. Function. Success. Result. Result. Doch, doch. Wir haben eine Response gekriegt. Aber man muss wirklich in List gucken. Das heißt wirklich List. Allen Ernstes, ey.
Fuck. Was ist das denn für ne API, ey? Wer hat sich das denn ausgedacht, ey?
Hä? Alter, brüch das. Ah, Moment. Wir returnen ja gar nicht. Ah ja, ja ja. Moment. JavaScript. Sekunde. JavaScript. Mein Hirn. JavaScript. Das geht ja gar nicht. Das geht ja gar nicht.
Wir müssten das, wenn schon, awaiten, was wahrscheinlich nicht funktioniert. Kann man das awaiten? Wahrscheinlich nicht, ne?
Wahrscheinlich kann man das nicht awaiten. Ich find in der Ausgabe immer nix.
Oh, doch. Ah, nee. Promise. Pending. Moment. Ich bin verwirrt. Moment. Ah. Wartet mal, wartet mal. Moment, Moment, Moment.
Das geht überhaupt nicht. Oder? Das geht doch überhaupt so nicht. Es bringt mir nix, wenn ich das awaite. An der Stelle.
Ich müsste, wenn schon, nur sowas hier machen. Also zumindest würde das scharpmäßig so aussehen. Aber ich mag's leer an die Ava-Skript.
Aber das wird, das wird einfach nicht, nicht, nicht, äh, Promise me, äh, es sich schon gemacht sein, oder? Nee. Ist es nicht.
Ist es nicht. Das ist wahrscheinlich einfach nicht, ähm, das ist wahrscheinlich einfach nicht so gedacht. Du musst das hier wahrscheinlich inline drinne machen.
Kekschampel an HTML5 vielleicht. List Result. Und was macht er dann damit? Selected Stream. Ach, der schreibt es dann in die globale Variable rein, oder wie?
Eieiei, das ist ja, was ist das für eine API? Meine Fresse, äh. Let Stream. Vor allem, warum sollte das, warum, warum nennt sich das hier Streaming? Das hier ist das Plugin. Beziehungsweise nein, das hier ist, das ist das Remote, wenn man das täuscht mal ordentlich nennen.
Das hier ist das Remote. So. Weil da drüber schicken wir ja offensichtlich Dinger. So. Remote Send. Get Stream. Zack. Mal gucken, ob wir doch heute noch irgendwie ein Video rauskriegen aus der ganzen Geschichte, äh.
So und jetzt speicher ich das, ne. Remote gleich. Ja. Gut. So ist das, so ist das in Ordnung. So machen wir das. Jetzt, ähm. So und wie gehts jetzt hier oben weiter? Jetzt haben wir hier den Stream Selected.
Alter. Alter, das hört ja gerne auf. So. Das brauchen wir alles gar nicht. Der nächste Schritt dürfte jetzt hier eigentlich sein. Genau, das war es jetzt nämlich schon. Error brauchen wir nicht. Wir haben keine Errors. On Message ist jetzt glaube ich das interessante. Und danach kriegen wir nen Stream raus. Hoffe ich mal.
Da hab ich schon ein bisschen Lieberg-Ausgaben mal reingehauen.
Hier. Attach Media Stream. Remote Video. Stream Get Tracks. Hier ist das, wo er sich dann das Zeug holt.
Das ist voll um die Ecke das Ding, ey.
On Message. Message. Yesup. Brauchen wir dann. Yesup. So immer. On Message. Okay. Also brauchen wir jetzt als nächstes eine. Success haben wir. Als nächstes brauchen wir eine. Bin ich im richtigen Fenster? Nein bin ich nicht.
Als nächstes brauchen wir eine. On Message. Die kriegt eine Message und ein Yesup. Was auch immer ein Yesup ist. Weiß nicht. Lock.
Lock. Wir machen jetzt ganz viel Geduld. Was wir sehen, wenn wir eine Message gekriegt haben.
Wir kriegen keine Message. Warum nicht? Weil wir irgendwas falsch gemacht haben wahrscheinlich.
Habt ihr das richtig geschrieben?
Das ist echt. Einfache AP und Beispiele sind schon was anderes.
Sagt doch mal Leute. Das ist doch echt wir.
Macht der Dude hier noch irgendwas? Results. Get Stream. Blablabla. Stream Send. Success. Ja das haben wir gemacht.
Dann macht er doch nix mehr. Selected Stream. Nö nö. Das war's. Mehr macht er nicht.
Moment was ist das hier? Ah das ist irgendein Debug. Das juckt uns nicht.
Ja den Festplatten Partitionierer habe ich zum Laufen gekriegt. Der funktioniert schon seit ein paar Wochen. Die installieren schon.
Alle rechnen damit. On Message.
Das heißt wir sollten doch jetzt eigentlich ne Message kriegen oder etwa nicht.
Aber wir kriegen keine Message. Sackt. Error. Machen wir nochmal Error. Vielleicht gibt es hier irgendeinen Fehler und wir sehen den nicht.
Error. Es gibt doch kein Error. Es gibt gar nichts.
Also wir kriegen ja auch unseren Stream. Wie attachen wir den dann jetzt richtig?
Bis hierhin haben wir es ja. Das andere brauchen wir nicht. Das ist beim Klick auf Start.
Ok was passiert dann beim Klick auf Start? Destroy. Start. Was passiert beim Klick auf Start?
Dieses ganze Gedönswitter gestartet. Ja das ist doch ok. On Message ist ein Pro. Ah Moment. Ja aber.
Ne das ist so schon richtig. Guck mal das funktioniert mit Success auch. Oder meinst du es muss so sein? On Message.
Das muss auch so gehen. Das ist kein Unterschied.
Ok wie geht es denn jetzt weiter? Start. On Message. Got Message. Start.
Wir haben nur 600 Zeilen Beispielcode von denen wir nichts brauchen. Aus dem ganzen Schmodder hier unten brauchen wir überhaupt nicht.
Das ist so hässlich. Wer macht denn sowas? Wer programmiert das sowas? Das ist doch kein Beispielcode. Das ist doch hingerotzt.
Zumal wir das alles nicht brauchen. Start Stream. Select Stream. Vielleicht müssen wir das jetzt einfach machen.
Wir machen jetzt einfach Start Stream. Guck mal was passiert.
Pass, Pass, Pass. Was macht der? So. List. Und in List 0 wollen wir haben.
eins
Objekte all die
Da ist der ID drinne
ID und da sagt der pass int ok warum auch immer aber wenn das notwendig ist dann machen wir das so
so
block also das macht ja echt kein spaß dachte es ist relativ einfach wie man das da rauskriegt
Falle mir diese d-bar ausgabe die ist doch
Da musst du dir stecken permanente marker hin machen dass man versießt
Ja da
request watch
ID 10
Ja auf geht's send wo wo ist das problem
fällt du pass body warum
warum warum fehlt wo ist das problem
Wo ist das problem
Oh mein browser ist gerade abgekackt ich sehe euren chat nicht mehr
Ich muss mal gerade mal mein chrome auf dem zweiten rechner abschießen
Test der ist einfach schwarz geworden gerade der chrome auf dem zweiten rechner
Warum warum was warum ist es jetzt fehlt
Ich meine der request ist doch genau das was die du hier machen
Und wie wäre es denn mal wenn das ding mir sagt warum es fehlt ist
So mal als anregung vielleicht ist es jetzt
message fällt du pass body reference error was
Was genau kann er denn nicht referenzen
Ach streaming ich depp ich habe es in remote hier umbenannt oben
immer noch
Wenn ich das weg mache gibt es keinen fehler mehr
Come on bra muss das sein ach ich setze das hier um alde ich nur das hier ist
stream ich habe mich da voll verschrieben
oh man okay jetzt haben wir den stream gekriegt was no such mount point das
glaube ich kein kein guter kein gutes
no such mount point was was error okay
warum habe ich es eigentlich und genannt moment ich bin
irgendwie gerade nicht auf da ja schaut mal da
ja schaut mal da wir kriegen in den stream geschickt
okay wie geht es jetzt weiter stream send
start stream
Und wie und wie weisen sie jetzt genau diesem diesem stream dem dem media element
zu
ach hier guck mal die erpennten da irgendwie ein video element und dann machen sie den spinner rein
und wie kommt jetzt das video wie kommt jetzt das video da rein
gucken wir noch mal oben was da was da so passiert also bei unseren message functions kriegen
wir irgendwie nix hin
wobei wir brauchen jetzt eine message glaube ich hier müssen wir jetzt irgendwie den stream
adden
ja genau hier hier kriegen wir jetzt wir müssen wir müssen jetzt eine antwort kriegen und
hier
hier attachen sie den kram glaube ich irgendwo
das kompliziert
suchen wir nach sauce das geht natürlich nicht hier attachen sie das ding irgendwie
funktioniert er mittlerweile unsere message kriegen wir eine message
und message haben wir das auch richtig gemacht hier alles haben wir das hier alles richtig
gemacht
und message also success all die haben wir übergeben
ane moment haben wir das haben wir das plug in überhaupt übergeben
wir haben das plug in überhaupt doch haben wir oder
doch haben wir haben wir alles gemacht gut
und moment das kommt ins attach rein
die callback hell is real
so das kommt nämlich gar nicht dahin sondern
was klaus das hier gerade was was ist was klaus das hier die success function ok
das muss nämlich hier hin
hat sie aber nicht wirklich was geändert oder
ist es jetzt im attach drinnen
doch hat sich was getan
message error
was macht essen also ist das folgendermaßen also
ne essung function an sich bringt nichts du machst ne essung eine funktion dran dass
du
verwenden kannst und es ist im endeffekt
eine schönere callback geschichte die du nicht selbst machen musst wenn du sagst wenn
du sagst wait und dann in eine funktion
ja irgendwie so gehen wir mal hier irgendwo rein ja wenn du jetzt hier irgendwie sowas
fasst wie zum beispiel task import import mal task task sowas wie das einfachste ist
task delay task delay von 1000 sekunden
so wenn du sagst wait das ist ein scheiß beispiel das ist ein scheiß beispiel du machst
nen
was ist denn da was ist denn da ein schönes beispiel
task run irgendwas
du startest jetzt hier irgendwie was konsole die 1 printet so und es könnte jetzt ja sein
dass du hier unten drunter was machst was du ausführen willst wenn der task fertig
ist das ist jetzt die einfache variante wenn du jetzt den task nicht ja es ist er sagt
mir dass ich eine essung function brauche
am moment ist ein constructor
hier da essung
auf französische essung
essung so wenn ich das jetzt erwarte bedeutet das im endeffekt
dass das hier unten drunter
als callback registriert wird wenn das hier fertig ist also das ist eigentlich einfach
nur eine schönere eine schönere variante davon
das hier ist im prinzip genau das gleiche
so wenn man es richtig schreibt aber ich glaube das
habe ich jetzt falsch geschrieben
was habe ich falsch geschrieben
so wenn es von der idee her ist ist ist das hier eine schönere so ich darf es nicht erwähnen
das ist einfach nur so taktisch ein bisschen schöner dass du allen code der hier danach
kommt quasi in den callback registriert der dann ausgeführt wird wenn das fertig ist
und ich gehe mal ganz stark davon aus dass es den java script exakt genauso ist
denke ich was ich will jetzt dann auch in stream rauskriegen heute
so on message
result ok der holt sich das result aus der message
log hat man das verstanden was versucht hat zu erklären message result oder ich habe
fünf gedrückt das war keine so gute idee ich versuchte es gerade zu kompilieren
geh weg result preparing aha if result status nicht und die feind und
result nicht null dann wollen wir status haben
wir gehen jetzt einfach mal davon aus dass es nie null und nie und die feind status ist
an dem moment
war also dann was war let macht mehr jetzt habe ich mir sagen lassen let result
result status preparing der status ist preparing ok session result message result starting
what moment
wir lassen das hier unten grad noch mal weg
jeweils vorher nie vorher gibt es keine message preparing was macht er denn da jetzt
auch das ding ist wirklich scheiße zu verwenden
stopp startet also preparing juckt ihn bei mir zumindest schon mal nicht
ich habe keine ahnung was das überhaupt sein soll
log je je je sap ok dass das ist also
ok dass das das steht im jesu drin also ok create answer offer plugin ok das das
machen wir jetzt ok dass das nennen wir anders function
remote heißt das bei uns jesu wird übergeben ok error errors haben wir nicht
success body request start ok wir kommen der sache näher wir kommen der sache näher
Wissen Leute, so ist das manchmal, wenn man sich durch den Code von anderen durchhangeln
muss.
Oh, oh, oh, es geht weiter, es geht weiter.
Preparing, Creating Pair Connection, is data in error, creating data channel.
Es gab zumindest schon mal kein Error, da bin ich sehr froh drüber.
Pogaz, hab ich das richtig?
Äh, what?
Was hab ich denn jetzt gemacht?
Ähm, wer braucht Kommentare, kom-komplett, äh, overrated.
Creating data channel, bla bla bla bla.
Den Errorhändler machen wir mal weg, das ist einfach zu viel Text gerade.
Es gibt ja auch kein Error, so, answer, da sind wir jetzt, Moment, jetzt sind die fertig.
Remote Stream, ah, Moment, hier geht's weiter, on Remote Stream brauchen wir jetzt noch.
On Remote Stream, was ist das hier für eine Eindrückung?
Äh, Stream, Stream, vielleicht kriegen wir jetzt ja unseren Stream endlich mal, Stream,
die epische Musik dabei ist schon mal sehr nice.
God S, äh, SDP, die in Firefox sind witzig, ich kann's euch mal zeigen, ich hab's ja gestern
auf Twitter gepostet, guckt euch das mal an, ähm, ah, wir, wir, wir haben noch, wir haben
die Antwort noch nicht geschickt, ich kann's euch nicht zeigen.
Die von, wenn wir die Antwort dann sehen, ähm, sehen wir, dass Mozilla Leute furchtbar,
furchtbar witzig sein wollen.
On Data Open, meine Güte, ist das kompliziert, aber hier machen die nix großartig, oder?
Hier machen die nix großartig drinnen, deswegen brauchen wir die Funktion erst mal gar nicht.
Hier müssen wir irgendwie hinkommen, hier, hier, hier werden, hier werden die Dinge Attached,
hier ist Attached Media, Remote Media, da, da wird's interessant.
Brauchen wir das hier vielleicht noch gar nicht, weil das, das machen die noch gar nicht
an der Stelle, was machen die nämlich an der Stelle noch gar nicht, alles was ich hier
sehe, was passiert ist, die Attachen sich, blablabla, Message, Debug, irgendwas, Preparing
gibt's bei mir gar nicht, dann schicken sie sich irgendwelche Yesips, ja doch, das brauchen
wir, weil dann geht's weiter hier.
Ja, das ist ja nicht, das ist ja kein WebRTC in dem Sinne, das ist ja diese Library da
drumherum, dass ich den Server als Pair verwenden kann.
Okay, was haben wir denn sonst noch für Funktionen, vielleicht gucken wir mal, wisst ihr was,
wir gucken uns einfach mal die Debug-Ausgabe an, wenn wir auf den Server selbst drauf gehen.
Ja, 1, ne, 2, 1, 5, 9, Inspect, Streaming, ja meinen wegen, okay, alles klar, alles klar,
also wie sieht denn das da aus, vom Ablauf her, wie sieht denn das da vom Ablauf her aus,
Handling, Moment, soweit kommen wir doch gar nicht, oder, wie sieht denn das bei uns aus,
bei uns fängt das an mit Send Message, Send Message, Message to Plugin, Message Send, Handling
SDP as well, das haben wir hier auch, Notifying Application, haben wir auch, Got Message Event
und dann kriegt er ein Event geschickt, Preparing, ach Moment, kann das sein, dass ich gefällt
hab, dass er das bei mir sogar schon macht, ich glaub das macht er schon, ich hab bloß
den Code nicht richtig gelesen, und zwar, Message Streaming, das ist ja wieder was ganz
was anderes, Event, genau, das haben wir nämlich, das haben wir nämlich, das steht nämlich
bei uns drinnen, Let Streaming, Streaming, nein gibt's nicht, du kannst, das Problem
ist, dass WebRTC eigentlich P2P ist, das heißt, du kannst das von einem Browser zum anderen
Browser machen, was du nicht so ohne weiteres machen kannst, ist das vom Server zum Browser
und dann musst du ja da irgendwie noch den Webcam Stream und unser ganzes Gedöns kriegen
und wieder raus und das haben die schon alles gebaut dafür, das würde ich beim besten
Willen nicht selbst bauen wollen, Event, ja genau, jetzt kommen wir der Sache näher,
Streaming Event gleich, hier holen sich die, hier holen sich irgendwie die Streams raus,
ne das steht da alles gar nicht drinnen, das holen sie, ne das steht doch da alles gar
nicht drinnen, in Resyled, oder? Resyled, in Resyled, steht bei mir plus drinnen, preparing,
Status, Moment, ah ne Moment, wir wollen message, message wollen wir mal printen, genau
mehr steht da nämlich gar nicht drinnen, da steht plus drinnen, Resyled und Streaming
Event, so das ist bei uns alles nicht gesetzt, das heißt das können wir überspringen, das
ist auch nicht gesetzt denke ich mal, oh fuck das bringt uns jetzt ja doch nichts, ok wie
geht es denn jetzt im anderen Fenster weiter, naja wir können ein bisschen groß machen, gott
message, notify application, das haben wir auch, notify application, message, ist Triggle
enabled, was auch immer, ist Triggle enabled und defines, ist bei uns auch und defines,
genau sieht nämlich genauso aus wie bei uns, creating pair connection, wir sind doch gar
nicht so schlecht eigentlich, rtc pair connection, creating data channel, handle remote track,
das fehlt uns, da hört es auf, so wo machen die das denn hier im source code, handle remote,
wo ist das denn, remote, hallo, wo ist denn die Ausgabe handle remote track, gibt es
nicht oder was, gibt es nicht, habe ich keinen bock drauf, danach geht es weiter eigentlich,
aber es ist schon spät, schon fast 23h, on remote stream, das haben wir, vielleicht brauche
ich den anderen crempel hier auch noch, soweit kommen wir ja noch gar nicht, das ist ja alles
hier noch drin, das ist ja alles noch in on remote stream, soweit sind wir ja noch gar
nicht, on data open, bringt mir nichts, da machen die nichts drinnen, da machen die
ja überhaupt nichts drinnen, wo rufen die überhaupt, start stream, start stream rufen
sie auf am ende von update streaming list, machen sie das überhaupt, beim click auf watch,
ja das ist ok, das können wir an der stelle aber machen, start stream, genau das machen
wir doch an der stelle, start stream, wo hängt es denn dran, wo hängt es denn, also genau
an der stelle sind wir doch, target, ach nee das ist hier für den spinner, was interessiert
mich da spinner, eigentlich müsste doch jetzt diese komische funktion hier aufgerufen werden,
in der on remote stream geschichte
got a remote stream, das brauchen wir und das Ding können wir dann attachen, got a remote
stream, ja das kommt hier und warum wird das bei uns nicht aufgelöst, ausgelöst, im
moment haben wir das schon gemacht, das machen wir doch, request start send, ja und daraufhin
sollten wir das doch eigentlich kriegen, das sollen wir nicht machen, aber jetzt blick
ich da auch nochmal durch, das ist schon kack, funktioniert irgendwie nicht, Seite hängt
sogar, vielleicht müssten wir, vielleicht müssten wir die anderen dinger hier auch
funktionen, weil er die sonst nicht aufrufen kann, dran machen, ok brava, was machst du
mit meinem Fenster, so brava nicht, spinner stop, data channel, wollen eigentlich, will
überhaupt kein data channel, was du eigentlich brauchst, du juckst den aber nicht, ich hab
keine Ahnung was ich hier dreieinmal, vielleicht sollten wir morgen weiter gucken, das ist
schon, wobei es sieht ja eigentlich nicht so kompliziert aus, aber irgendwie scheint
es schon, ich glaube wir gucken morgen weiter, guck mal das senden klappt irgendwie nicht,
beleg ich mal, der sendet überhaupt nicht oder, der sendet
das hier gar nicht, guck mal da sollte er eigentlich, was weiß ich, da sendet das überhaupt
nicht, der sendet das nicht, warum, warum nicht, der sendet das nicht, kein Wunder
dass wir kein Remodestream kriegen, Anna?
Seid ihr noch da, guck mal der sendet das nicht, ich kann nur immer tippen, meine geilen
debug Ausgaben vor allem, äh, create answer, das macht er irgendwie nicht, das hier macht
er nicht richtig und es gibt weder einen Error, ich darf verwenden was ich will, guck mal
er macht das, der schickt das irgendwie nicht, macht hier, ich schalte mal, ich schalte mal
aus, man weiß ja nie, guck mal hier nach, sollte eigentlich diese, diese Geschichte
kommen mit, mit create answer, macht er aber nicht, ich war remote wieder doppelt belegt
oder so, ne, das da macht er aus irgendwelchen Gründen, macht er das nicht, guck mal hier,
guck mal hier, ha, oder macht er das doch, guck mal hier, guck mal hier, guck mal hier,
guck mal hier, guck mal hier, guck mal hier, guck mal hier, also das hier führt er auf
jeden Fall nicht aus, wie viele messages kriegen wir denn, messages, nur eine und das ist die
create answer, was, was hab ich denn da jetzt übersehen, mega hässlicher Code, ja, media,
das ist alles da, die Klammern sind auch da, seht ihr irgendwas?
Ich nicht, ich meine es kommt weder ein success noch ein error zurück, was macht der dann
vorher, was macht der dann vorher, das streaming event, macht der hier irgendwas drinne noch,
das ist alles nicht defined bei uns, ja ich glaub maxfps tv geht auch, du kannst wupploos.tv
und maxfps.tv machen, das ärgert mich jetzt, ich wollte zumindest mal ein Video heute raus
kriegen, das ist alles, das ist alles nicht zutreffend bei uns, error haben wir auch nicht,
ich seh jetzt bloß das hier, ok, ok, ok, ok, ok, ok, ok, ok, ok, ok, ok, ok, ok, ok,
ok, ok, ok, ok und, tidak mehr die
es kommt da hier danach händling
etizip peer connection sowas haben wir auch
hier nach klappt das aufrufen
btf was das problem also ich weiß ja
dass es funktioniert weil die gleiche
sache bei der offiziellen sachen tun
das muss was ganz blödes
offensichtliches sein
got a remote stream
sowas haben wir hier gar nicht
keine ahnung ich glaube das wird
doch nichts mehr also morgen weitermachen
ich habe ich wahrscheinlich irgendwo
verschrieben oder so was ja dank javascript
nicht auffällt
ich habe das gefühl das sendet das
schon
aber fehlerein mal gucken was
passiert
genau wenn ich das weglasse ist dieses
kommt dieses ist data enable kommt
ja wahrscheinlich sehe ich morgen auf
anheben irgendwie sowas ich will dass
meine tür sprechanlage funktioniert
body request
ich kriege die keine antwort vom
server da würde ich jetzt erwarten dass
das hier jetzt kommt klein
das machen die beim stop
haben wir hier irgendwie eine error
funktion schon eingebaut nicht aufgerufen
wie ist der flow hier nicht ganz klar
kann man im browser das irgendwie die
bangen dass ich quasi die sehe wo die
die seite wo es funktioniert wieder
wieder verlauf ist aber noch mal hier
irgendwie so rum vielleicht finden wir
irgendwie was
So, und, ähm, das hier macht er beim Stopp.
Das ist so eine typische Java-Geschichte.
Ungleich an die Feind, ungleich Null.
Oder irgendwelche Klammer.
Ich dachte jetzt echt nicht, dass da so ein Riesen abhört.
Okay.
Die Warnung oben, meinst du?
Das da unten, cannot play me.
Das ist, weil ich, weil ich kein Video-Element, weil ich im Video-Element nichts drinstehen hab.
Ah, ID ist 10.
Das muss ich doch überhaupt nicht als int parsen.
Warum soll ich denn als int parsen müssen?
Dann hat er Blödsinn.
Der wartet, der wartet aus irgendwelchen Gründen auf den Server und kriegt keine Antwort.
Ist hier nicht passiert.
Event, Event, Event.
Wir hängen hier.
Hier hängen wir.
Hier.
Wir schicken keine Antwort.
Aus Gründen.
Cannot play media?
Ja, das ist, weil ich, äh, weil ich hier nichts drin, fürs Video-Element nichts drin hab.
Naja Leute, wisst ihr was?
Ähm, wir sehen uns morgen wieder.
Macht's gut.
Bis morgen.
Tschüss.
Tschüss.
Tschüss.
Tschüss.
