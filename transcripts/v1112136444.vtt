WEBVTT

01:00.000 --> 01:24.400
Kack wie SSService

01:24.400 --> 01:52.720
Kack wie SSService

01:52.720 --> 02:18.640
Kack wie SSService

02:18.640 --> 02:46.640
Kack wie SSService

02:46.640 --> 03:16.560
Kack wie SSService

03:16.560 --> 03:33.840
Kack wie SSService

03:33.840 --> 03:40.240
Kack wie SSService

03:40.240 --> 03:55.440
Kack wie SSService

03:55.440 --> 04:09.360
Kack wie SSService

04:09.360 --> 04:22.480
Kack wie SSService

04:22.480 --> 04:44.640
Kack wie SSService

04:44.640 --> 05:04.720
Kack wie SSService

05:04.720 --> 05:21.600
Kack wie SSService

05:21.600 --> 05:42.480
Kack wie SSService

05:42.480 --> 06:01.360
Kack wie SSService

06:01.360 --> 06:20.240
Kack wie SSService

06:20.240 --> 06:35.120
Kack wie SSService

06:35.120 --> 06:52.400
Kack wie SSService

06:52.400 --> 07:07.280
Kack wie SSService

07:07.280 --> 07:24.160
Kack wie SSService

07:24.160 --> 07:39.040
Kack wie SSService

07:39.040 --> 08:05.920
Kack wie SSService

08:05.920 --> 08:22.800
Kack wie SSService

08:22.800 --> 08:37.680
Kack wie SSService

08:37.680 --> 08:52.560
Kack wie SSService

08:52.560 --> 09:09.440
Kack wie SSService

09:09.440 --> 09:24.320
Kack wie SSService

09:24.320 --> 09:41.200
Kack wie SSService

09:41.200 --> 09:56.080
Kack wie SSService

09:56.080 --> 10:12.960
Kack wie SSService

10:12.960 --> 10:27.840
Kack wie SSService

10:27.840 --> 10:44.720
Kack wie SSService

10:44.720 --> 10:59.600
Kack wie SSService

10:59.600 --> 11:16.480
Kack wie SSService

11:16.480 --> 11:31.360
Kack wie SSService

11:31.360 --> 11:48.240
Kack wie SSService

11:48.240 --> 12:03.120
Kack wie SSService

12:03.120 --> 12:20.000
Kack wie SSService

12:20.000 --> 12:34.880
Kack wie SSService

12:34.880 --> 12:51.760
Kack wie SSService

12:51.760 --> 13:06.640
Kack wie SSService

13:06.640 --> 13:23.520
Kack wie SSService

13:23.520 --> 13:38.400
Kack wie SSService

13:38.400 --> 13:55.280
Kack wie SSService

13:55.280 --> 14:10.160
Kack wie SSService

14:10.160 --> 14:27.040
Kack wie SSService

14:27.040 --> 14:41.920
Kack wie SSService

14:41.920 --> 14:58.800
Kack wie SSService

14:58.800 --> 15:13.680
Kack wie SSService

15:13.680 --> 15:30.560
Kack wie SSService

15:30.560 --> 15:45.440
Kack wie SSService

15:45.440 --> 16:02.320
Kack wie SSService

16:02.320 --> 16:17.200
Kack wie SSService

16:17.200 --> 16:34.080
Kack wie SSService

16:34.080 --> 16:50.960
Kack wie SSService

16:50.960 --> 17:05.840
Kack wie SSService

17:05.840 --> 17:22.720
Kack wie SSService

17:22.720 --> 17:37.600
Kack wie SSService

17:37.600 --> 17:54.480
Kack wie SSService

17:54.480 --> 18:09.360
Kack wie SSService

18:09.360 --> 18:26.240
Kack wie SSService

18:26.240 --> 18:41.120
Kack wie SSService

18:41.120 --> 18:58.000
Kack wie SSService

18:58.000 --> 19:12.880
Kack wie SSService

19:12.880 --> 19:29.760
Kack wie SSService

19:29.760 --> 19:44.640
Kack wie SSService

19:44.640 --> 20:01.520
Kack wie SSService

20:01.520 --> 20:16.400
Kack wie SSService

20:16.400 --> 20:33.280
Kack wie SSService

20:33.280 --> 20:48.160
Kack wie SSService

20:48.160 --> 21:05.040
Kack wie SSService

21:05.040 --> 21:19.920
Kack wie SSService

21:19.920 --> 21:36.800
Kack wie SSService

21:36.800 --> 21:51.680
Kack wie SSService

21:51.680 --> 22:08.560
Kack wie SSService

22:08.560 --> 22:23.440
Kack wie SSService

22:23.440 --> 22:40.320
Kack wie SSService

22:40.320 --> 22:55.200
Kack wie SSService

22:55.200 --> 23:12.080
Kack wie SSService

23:12.080 --> 23:26.960
Kack wie SSService

23:26.960 --> 23:43.840
Kack wie SSService

23:43.840 --> 23:58.720
Kack wie SSService

23:58.720 --> 24:15.600
Kack wie SSService

24:15.600 --> 24:30.480
Kack wie SSService

24:30.480 --> 24:47.360
Kack wie SSService

24:47.360 --> 25:02.240
Kack wie SSService

25:02.240 --> 25:19.120
Kack wie SSService

25:19.120 --> 25:34.000
Kack wie SSService

25:34.000 --> 25:50.880
Kack wie SSService

25:50.880 --> 26:05.760
Kack wie SSService

26:05.760 --> 26:22.640
Kack wie SSService

26:22.640 --> 26:37.520
Kack wie SSService

26:37.520 --> 26:54.400
Kack wie SSService

26:54.400 --> 27:09.280
Kack wie SSService

27:09.280 --> 27:26.160
Kack wie SSService

27:26.160 --> 27:41.040
Kack wie SSService

27:41.040 --> 27:57.920
Kack wie SSService

27:57.920 --> 28:12.800
Kack wie SSService

28:12.800 --> 28:29.680
Kack wie SSService

28:29.680 --> 28:41.680
Kack wie SSService

28:41.680 --> 28:56.560
Kack wie SSService

28:56.560 --> 29:10.560
Kack wie SSService

29:10.560 --> 29:25.440
Kack wie SSService

29:25.440 --> 29:37.440
Kack wie SSService

29:37.440 --> 29:54.320
Kack wie SSService

29:54.320 --> 30:06.320
Kack wie SSService

30:06.320 --> 30:09.200
Kack wie SSService

30:09.200 --> 30:25.200
Kack wie SSService

30:25.200 --> 30:31.200
Kack wie SSService

30:31.200 --> 30:46.080
Kack wie SSService

30:46.080 --> 31:02.960
Kack wie SSService

31:02.960 --> 31:17.840
Kack wie SSService

31:17.840 --> 31:34.720
Kack wie SSService

31:34.720 --> 31:49.600
Kack wie SSService

31:49.600 --> 32:06.480
Kack wie SSService

32:06.480 --> 32:21.360
Kack wie SSService

32:21.360 --> 32:38.240
Kack wie SSService

32:38.240 --> 32:53.120
Kack wie SSService

32:53.120 --> 33:10.000
Kack wie SSService

33:10.000 --> 33:24.880
Kack wie SSService

33:24.880 --> 33:41.760
Kack wie SSService

33:41.760 --> 33:56.640
Kack wie SSService

33:56.640 --> 34:13.520
Kack wie SSService

34:13.520 --> 34:28.400
Kack wie SSService

34:28.400 --> 34:45.280
Kack wie SSService

34:45.280 --> 35:00.160
Kack wie SSService

35:00.160 --> 35:17.040
Kack wie SSService

35:17.040 --> 35:31.920
Kack wie SSService

35:31.920 --> 35:48.800
Kack wie SSService

35:48.800 --> 36:03.680
Kack wie SSService

36:03.680 --> 36:20.560
Kack wie SSService

36:20.560 --> 36:35.440
Kack wie SSService

36:35.440 --> 36:52.320
Kack wie SSService

36:52.320 --> 37:07.200
Kack wie SSService

37:07.200 --> 37:24.080
Kack wie SSService

37:24.080 --> 37:38.960
Kack wie SSService

37:38.960 --> 37:55.840
Kack wie SSService

37:55.840 --> 38:10.720
Kack wie SSService

38:10.720 --> 38:27.600
Kack wie SSService

38:27.600 --> 38:42.480
Kack wie SSService

38:42.480 --> 38:59.360
Kack wie SSService

38:59.360 --> 39:14.240
Kack wie SSService

39:14.240 --> 39:31.120
Kack wie SSService

39:31.120 --> 39:46.000
Kack wie SSService

39:46.000 --> 40:14.880
Kack wie SSService

40:14.880 --> 40:29.760
Kack wie SSService

40:29.760 --> 40:46.640
Kack wie SSService

40:46.640 --> 41:01.520
Kack wie SSService

41:01.520 --> 41:18.400
Kack wie SSService

41:18.400 --> 41:33.280
Kack wie SSService

41:33.280 --> 41:50.160
Kack wie SSService

41:50.160 --> 42:05.040
Kack wie SSService

42:05.040 --> 42:19.040
Kack wie SSService

42:19.040 --> 42:33.920
Kack wie SSService

42:33.920 --> 42:45.920
Kack wie SSService

42:45.920 --> 43:00.800
Kack wie SSService

43:00.800 --> 43:12.800
Kack wie SSService

43:12.800 --> 43:29.680
Kack wie SSService

43:29.680 --> 43:41.680
Kack wie SSService

43:41.680 --> 43:50.560
Kack wie SSService

43:50.560 --> 43:58.560
Kack wie SSService

43:58.560 --> 44:10.560
Kack wie SSService

44:10.560 --> 44:25.440
Kack wie SSService

44:25.440 --> 44:39.440
Kack wie SSService

44:39.440 --> 44:48.320
Kack wie SSService

44:48.320 --> 44:54.320
Kack wie SSService

44:54.320 --> 45:08.320
Kack wie SSService

45:08.320 --> 45:23.200
Kack wie SSService

45:23.200 --> 45:37.200
Kack wie SSService

45:37.200 --> 46:04.080
Kack wie SSService

46:04.080 --> 46:18.960
Kack wie SSService

46:18.960 --> 46:32.960
Kack wie SSService

46:32.960 --> 46:45.840
Kack wie SSService

46:45.840 --> 46:51.840
Kack wie SSService

46:51.840 --> 46:57.840
Kack wie SSService

46:57.840 --> 47:20.720
Kack wie SSService

47:20.720 --> 47:27.480
Dann machen wir es so, dann wird es jedes Mal neu angelegt, aber wir können es einfach

47:27.480 --> 47:28.480
so machen.

47:28.480 --> 47:34.280
War random gleich Nuda, es ist dann halt bei jeder Anfrage eine neue Instanz, die ist

47:34.280 --> 47:35.280
ja nicht wirklich schlimm.

47:35.280 --> 47:46.320
So random, keine Ahnung, number, number, random, next, so von 0 bis 360, in C sharp ist es

47:46.320 --> 47:53.760
nämlich exclusive, das heißt, das ist jetzt eine random Nummer von 0 inklusive 0 bis exklu-

47:53.760 --> 47:55.200
mal gucken ob das stimmt, ich glaube aber schon.

47:55.200 --> 48:09.880
Exclusive 360, also es ist, es ist 0, 0 taucht auf bis 300, bis inklusive 359.

48:09.880 --> 48:12.600
So, ok.

48:12.600 --> 48:15.600
Und das hauen wir jetzt hier rein.

48:15.600 --> 48:21.320
Und dann sollte unser Keck WSS Service schon soweit fertig sein, dass der, dass der Keck

48:21.320 --> 48:22.320
weht.

48:22.320 --> 48:45.280
I, hallo, I, äh nicht I, N, ok, schauen wir mal, ha, Leute, es ist Keck WSS Service,

48:45.280 --> 49:08.240
es funktioniert, ok, nochmal kurzer recap, was wir jetzt gemacht haben.

49:08.240 --> 49:23.080
Ist es nicht geil, das hat die Welt gebraucht, das hat die Welt gebraucht.

49:23.080 --> 49:30.840
Die Transparenz wird im Browser nicht richtig angezeigt.

49:30.840 --> 49:38.800
Hey, ich bin ein Risiko Investor, natürlich, ähm, war mir schon klar, du bist ja schon

49:38.800 --> 49:42.760
eine Weile am Start, ich hab's schon öfters gesehen, aber, äh, ich dachte schon immer,

49:42.760 --> 49:47.520
schon immer bei deinen Messages, das ist bestimmt ein Risiko Investor und würde gerne absurde

49:47.520 --> 49:51.400
Summen in ihr Startup investieren, wir glauben ihr Service hat das Potenzial, das nächste

49:51.400 --> 49:57.840
Google FB überzuwerden, bitte kontaktieren sie, ey, Fang, Fang ist out, wenn erstmal

49:57.840 --> 50:03.600
Keck WSS Service kommt, da sagen die Leute nicht mehr, sie wollen einen Fang Job, die

50:03.600 --> 50:07.720
sagen, sie wollen ein Keck W, ein Keck W, nein, das sind ja die Amis, die sagen, ich

50:07.720 --> 50:14.280
bin ein Keck W, ein Keck W Job, Tongenbrecher, kannst du ein Autorefresh machen, ja, aber

50:14.280 --> 50:24.240
wozu, so, willst du noch ne API machen, na ist doch, du machst die Seite auf, nur kommst

50:24.240 --> 50:35.520
ein Bild zurück, ok, wunderbar, unsere extrem advanced Keck WSS Service Anwendung ist fertig,

50:35.520 --> 50:42.200
übrigens, nochmal eine Runde Sellout, wenn ihr auch nen virtuellen Linux Server in der

50:42.200 --> 50:47.840
Cloud haben wollt, dann schaut jetzt mal bei meinem Partner Hetzner Cloud vorbei, geht

50:47.840 --> 50:53.120
schon los bei 3€ im Monat und wenn ihr jetzt nen Server mietet, bzw. euch einen neuen Account

50:53.120 --> 51:00.280
habt, und den ganzen, wo hab ich, fuck, ich find's nicht, lull, ah hier, sehr gut, sehr

51:00.280 --> 51:06.560
gut Chat, und das ganze registriert mit meinem Account, alter, ich kann nicht reden, Leute,

51:06.560 --> 51:14.080
Sellout gescheitert, Sellout gescheitert, vorbei, vorbei, jetzt kann ich nicht mal Sellouten,

51:14.080 --> 51:26.960
Kündigung ist raus, äh, jetzt vorbei, IP-Adresse merkt man beim nächsten Reload das Bild senden,

51:26.960 --> 51:34.520
nein, ja, zumindest, wenn ihr euch registriert mit meinem Code, kriegt ihr ein 20€ Startgutschein,

51:34.520 --> 51:41.640
Startguthaben, allerdings nur für neue Kunden, gegen Fake Accounts weiß ich nicht, ob sie

51:41.640 --> 51:47.840
was haben, der Sellout ist richtig sad gewesen, ja, zwar der schlechteste Sellout aller Zeiten,

51:47.840 --> 52:07.320
ist der Frazier on, guck mal so, ist der Frazier on, nein, ah, der war wieder ewig nicht on,

52:07.320 --> 52:18.400
okay, CACW erste Service, okay, machen wir weiter, also unser Webservice ist jetzt fertig,

52:18.400 --> 52:27.160
das Ziel ist jetzt, also wir folgen das machen, Web-Anwendung erstellen, Server einrichten,

52:27.160 --> 52:33.600
reproduzierbar mit Ansible, und dann schieben wir das ganze auf den Server, nur mal kurzer

52:33.600 --> 52:39.720
Recap, vielleicht hat noch nicht jeder so eine ASP.NET Web-Anwendung gesehen, deswegen

52:39.720 --> 52:43.680
zeige ich das nochmal ganz kurz, was es macht, es ist aber wirklich, ihr habt ja gesehen,

52:43.680 --> 52:49.000
es ist äußerst wenig, also die einzigen zwei Dateien, die ich angepasst habe, waren einmal

52:49.000 --> 52:54.360
die Startup-Datei, da habe ich alles rausgeschmissen, wo hier irgendwas von HTTPS oder irgendwelche

52:54.360 --> 53:00.000
API-Generierung drin steht, alles weg, das ist der Rest, ist aber komplett Default, und

53:00.000 --> 53:03.920
ich habe den Standard-Controller umbenannt in CACW-Controller und habe ihm gesagt, dass

53:03.920 --> 53:10.560
er direkt auf dem Route der Seite aktiv sein soll, und sobald man die Seite aufmacht, wird

53:10.560 --> 53:15.440
diese Methode hier aufgerufen mit GET, also wenn du ein GET-Request drauf machst, wird

53:15.440 --> 53:20.880
diese Methode aufgerufen, und er macht nichts anderes, wie aus diesem Ordner ein random

53:20.880 --> 53:34.600
Bild zu lesen und zurückzugeben. Mehr macht das nicht. Das war's, also mehr Anpassungen

53:34.600 --> 53:38.880
gibt es da dran nicht. So, und das reicht schon für CACW SSS-Service, und jetzt werden

53:38.880 --> 53:48.360
wir CACW SSS-Service mal in der Cloud laufen lassen, dass ihr auch alle eine Runde CACW'en

53:48.360 --> 53:56.160
können SSS-Service. Und da ist für jeden Winkel ein Bild drin, genau. Wir machen das

53:56.160 --> 54:01.800
nicht dynamisch, wir machen das nicht dynamisch oder sowas, wir haben im Vorfeld 360 Grad

54:01.800 --> 54:17.000
CACW erstellt. Und dafür wird immer random eins rausgenommen. Ist natürlich auch gut

54:17.000 --> 54:21.360
entlastet den Server, da müssen wir nix on the fly rotaten. Könnten wir vielleicht irgendwann

54:21.360 --> 54:25.280
demnächst, das ist eine coole Sache, dass wir ein bisschen Programmier-Content für den

54:25.280 --> 54:34.280
zweiten Teil oder dritten Teil noch haben. Server-Side-Bild-Rotieren. Dynamisch. Ja,

54:34.280 --> 54:43.160
da könnte man auch eine API machen, Rotate, und dann irgendwie sowas wie Decrease angeben

54:43.160 --> 54:49.680
oder sowas. Big Brain Time, können wir das nächste Mal anbauen, haben wir was zu programmieren.

54:49.680 --> 54:59.200
Gut, also, was haben wir hier? Wir haben unser Master Shit Repo am Start, geht Status, und

54:59.200 --> 55:06.600
jetzt machen wir ein Ansible Repo, weil, Ansible, weil wir wollen ja, und das kann ich euch,

55:06.600 --> 55:10.480
es ist erstmal egal mit welchem Tool, aber ich kann euch das prinzipiell nur empfehlen,

55:10.480 --> 55:16.960
wenn ihr Server aufbaut für Services, die jetzt nicht einfach nur mal angelegt werden

55:16.960 --> 55:23.360
und dann wieder wegschmeißen, weil man mal was ausprobieren wollt, also wenn ihr irgendwas

55:23.360 --> 55:31.760
seriöseres hosten wollt, irgendwas, was vielleicht auch mal ein bisschen länger als zwei Tage

55:31.760 --> 55:37.720
abbleibt, dann kann ich euch nur empfehlen, in irgendeiner Art und Weise, zumal mal mindestens

55:37.720 --> 55:41.840
mal aufzuschreiben, wie ihr den Server eingerichtet habt, was da für Packages drauf sind und sonst

55:41.840 --> 55:48.040
was, oder aber noch besser, das ganze in irgendeinem Skript oder mit irgendeinem Automatisierungstool

55:48.040 --> 55:54.200
zu machen, dass ihr den gleichen Server immer wieder reproduzierbar aufbauen könnt, oder

55:54.200 --> 55:58.880
eventuell auch noch fünf weitere dieser Server reproduzierbar aufbauen könnt. Das ist ja

55:58.880 --> 56:04.440
gerade eine der Punkte, warum dieses ganze Containerzeug so beliebt geworden ist. Ja,

56:04.440 --> 56:11.240
du kannst Container relativ easy immer gleich wieder aufbauen und dementsprechend auch

56:11.240 --> 56:16.240
mit irgendeinem Orchestrator einfach skalieren lassen. Brauchst du heute für 50 User was,

56:16.240 --> 56:24.320
brauchst du nur zwei, hast du morgen 5000 User, brauchst du 20. Ist für euch ein Dockerfile

56:24.320 --> 56:30.160
Ansible gleich Dokumentation? Wenn es ordentlicher Source Code ist, ja. Wenn man es lesen kann.

56:30.160 --> 56:35.960
Ich meine, niemand braucht doch da Files, wo dann drinne steht. Keine Ahnung, so, sagen

56:35.960 --> 56:43.560
wir mal hier in if, if n größer fünf, ja. Es braucht doch niemand Kommentare, wo dann

56:43.560 --> 56:52.520
drinne steht, checks if n is greater than five. Das ist bescheuert, das sieht man ja. Und

56:52.520 --> 56:57.680
dementsprechend, wenn das alles selbsterklärend ist, bräuchte auch kein extra Doku Zeug

56:57.680 --> 57:03.720
für. Für zusätzliche Erklärung ist es natürlich sinnvoll, ne. Was du in Ansible ja nicht reinschreiben

57:03.720 --> 57:08.440
kannst ist, warum nimmst du diese Packages? Ich meine, kannst du schon reinschreiben,

57:08.440 --> 57:11.680
aber ich befürchte mal, das wird da aber keiner drin aktualisieren, außerdem musst

57:11.680 --> 57:16.280
du da ein neues Commit machen, um die Comments zu aktualisieren. Sprich, wenn du bei Ansible

57:16.280 --> 57:21.400
zum Beispiel sagst, wir installieren diese fünf Packages, und du willst irgendwie für

57:21.400 --> 57:26.680
die Nachwelt vorhalten, für die Nachwelt festhalten, warum man diese Packages genommen

57:26.680 --> 57:32.800
hat, dann würde ich das auf n extra Wiki oder so schreiben. Genau, also, es gibt da

57:32.800 --> 57:39.280
verschiedene Tools für Server-Automatisierung. Das bekannteste dürfte wohl Puppet sein,

57:39.280 --> 57:50.120
das ist aber n bisschen Keynes-Champig, find ich. Sieht so aus. Ja, du sagst dir auch,

57:50.120 --> 57:55.680
ich will n User anlegen mit dieser ID und dieser Shell und diesem Home Directory und

57:55.680 --> 57:59.520
sowas. Dann gibt es doch Chef und es gibt Ansible, und Ansible finde ich eigentlich

57:59.520 --> 58:03.920
am nicesten. Ihr wisst, ich hab noch nicht sonderlich viel Ahnung, bzw. noch nicht lange

58:03.920 --> 58:08.320
Ahnung von Ansible, das haben wir vor einem Jahr oder so mal zusammen uns im Stream angeguckt.

58:08.320 --> 58:16.080
Ich muss sagen, mittlerweile finde ich das wirklich sehr nice. Ohne GitHub-Copilot, ja,

58:16.080 --> 58:25.240
ich sehe den Sinn davon nicht. Genau, deswegen machen wir jetzt ein Repo, wo alles reinkommt,

58:25.240 --> 58:31.200
um wir diesen Service aufbauen können. Erpuppet ist, glaub ich, schon bekannter, weil es das

58:31.200 --> 58:39.160
deutlich länger gibt. VirusBLN, Dankeschön für den Sub. Aber Ansible ist auf jeden Fall

58:39.160 --> 58:47.080
beliebter in letzter Zeit. Lass mal gucken, es gibt doch dieses Google vs. Ranking-Geschichte.

58:47.080 --> 59:07.720
Oh, wo war das nochmal? War es Google Trends? Jawoll. Taylor Swift und Kim Kardashian, genau,

59:07.720 --> 59:12.480
das ist Fußball vs. American Football. Das müsste man sich mal für die Welt angucken.

59:12.480 --> 59:19.120
Außer im Freedom-Land ist da wahrscheinlich nicht so viel. Aber es ist ja auch American

59:19.120 --> 59:23.360
Football. Ok, Puppet. Puppet findest du halt immer noch viel mehr, da müssen wir noch

59:23.360 --> 59:28.520
was dazusuchen. Egal, wir suchen einfach mal Puppet und dann suchen wir hier Vergleich

59:28.520 --> 59:46.120
mit Puppet. Puppet ist halt, guck mal, sogar so ist es beliebter. Letzten 5 Jahre. 2004

59:46.120 --> 59:54.560
bis heute. Guck, hier ist das aufgekommen und dann hat es das überholt. Aber insgesamt

59:54.560 --> 59:58.720
würde ich tatsächlich sagen, dass Puppet noch ein bisschen bekannter ist, eben weil

59:58.720 --> 01:00:06.400
es einfach mal 10 Jahre älter ist. Ne, das stimmt nicht, so alt ist es nicht. Egal,

01:00:06.400 --> 01:00:15.440
keck wie erst das Service ist am Start. Gut, also weiter im Text. Nachdem wir alles in

01:00:15.440 --> 01:00:18.920
dieses Geepum machen wollen, legen wir einen extra Ordner für unsere Ansible-File an.

01:00:18.920 --> 01:00:24.240
Ansible ist ein Tool, um Server automatisiert aufzubauen und das heißt, wir brauchen als

01:00:24.240 --> 01:00:29.760
erst mal einen Server, den wir automatisiert konfigurieren können. Das heißt, ich lege

01:00:29.760 --> 01:00:35.840
jetzt mal einen Server an. Mal gucken, ob ich das so mit dem Kommandozeilen-Tool hinkriege.

01:00:35.840 --> 01:00:40.480
Server, Create, Image. Das ist übrigens das gleiche, wenn ich bei Hetzner im Webinterface

01:00:40.480 --> 01:00:45.680
klicke. Also wenn ich hier Add Server mache und durch klicke, ist es genau das gleiche,

01:00:45.680 --> 01:00:50.560
wenn ich hier über die Kommandozeile mache. Nur, dass ich es einfacher finde, wenn man

01:00:50.560 --> 01:00:56.640
öfters ein paar Server anlegen muss, über die Kommandozeile zu machen. Okay, CX11, Name,

01:00:56.640 --> 01:01:07.640
keckweight 2, keck, W, S, Service, SSH Key. Okay, wir nehmen Triple Core, wir nehmen Triple

01:01:07.640 --> 01:01:19.680
Core Kiste, die heißen CPX21. CPX21, hoffe, stimmt das? Und wenn ich Glück habe, kriege

01:01:19.680 --> 01:01:23.280
ich jetzt auch nicht das Hutpasswort angezeigt. Gibt es nicht auch eine Ansible-Rolle für

01:01:23.280 --> 01:01:32.680
die Hetzner-API? Doch, gibt es. Oh, ich darf keine Underscores verwenden. Was ist das?

01:01:32.680 --> 01:01:41.600
Keine Underscores. Wie kommt man da hin? So? Okay, das funktioniert. Warum nicht keckchamp,

01:01:41.600 --> 01:01:50.160
weil es keck, W, S, Service ist. So, also, IP von meinem Server. Was ich jetzt machen

01:01:50.160 --> 01:01:58.080
werde ist, ich werde mich nicht auf dem Server einloggen. Wir legen jetzt erstmal ein Ansible-Playbook

01:01:58.080 --> 01:02:03.880
an, heißt das Ganze. So, wir legen ein Ansible-Playbook an. Ich habe immer keine Ahnung, wie nenne

01:02:03.880 --> 01:02:18.600
ich das denn mal? Setup. Gut. So, und jetzt muss ich nachgucken, weil ich bin in Ansible

01:02:18.600 --> 01:02:25.640
noch nicht so fit, dass ich das aus dem Kopf gut hinbekomme. Was ist denn das? Always.

01:02:25.640 --> 01:02:33.720
Trusten. Wir trusten allem. Immer, immer trusten. Okay, es ist YAML. YAML fängt ja mit so tollen

01:02:33.720 --> 01:02:54.200
Minus an. So. Wobei, ich nenne es nicht Setup, ich nenne es einfach Server.YAML. Eisch.

01:02:54.200 --> 01:03:09.960
So, jetzt hört es aber bei mir auf. Ansible. Ich brauche wieder Ansible. Mist. Ich muss

01:03:09.960 --> 01:03:14.600
nachgucken, wie das heißt. Also, Leute, ich log mich mal kurz. Ich muss euch ausmachen,

01:03:14.600 --> 01:03:24.360
dass ihr mich keinen Bock mehr auf irgendwelche DDoS stellt. He doesn't know he lacks critical

01:03:24.360 --> 01:03:45.960
information. Okay. Wieder an. Also, ich muss mal gucken, wie das funktioniert. Also, normalerweise

01:03:45.960 --> 01:03:50.000
ist das Problem, wenn man sich bei Ubuntu einloggt, dass immer beim Login die IP angezeigt

01:03:50.000 --> 01:03:54.920
wird. Das will ich ausschalten. Ich weiß, dass es dazu... Also, es gibt zwei Möglichkeiten,

01:03:54.920 --> 01:03:59.400
wo das herkommen kann. Einmal Message of the Day oder SSH-Config. Nee, ich mache keinen

01:03:59.400 --> 01:04:11.680
VPN. Leben am Limit, Leute. Ich glaube aber, bei Ubuntu kommt es aus der SSH-Config. SSHD-Config.

01:04:11.680 --> 01:04:23.120
Das habe ich nämlich schon mal nachgeguckt. Was? IP-Leak unten. Da ist kein IP-Leak.

01:04:23.120 --> 01:04:35.920
Ja, der Server. Der Server-IP juckt mich nicht. Server-IP ist mir egal. Es gibt eine Option,

01:04:35.920 --> 01:04:44.440
dass SSH nicht macht. Hier. Print last log no. Okay, so heißt das. Das heißt, das muss

01:04:44.440 --> 01:04:53.280
ich jetzt Ansible konfigurieren, dass er das macht. Also, Ansible SSHD-Config. Wie macht

01:04:53.280 --> 01:04:59.920
man das? Das habe ich keine Ahnung von. Muss ich nachgucken. How to cleanly edit SSHD-Config?

01:04:59.920 --> 01:05:05.920
Nee, Print Message of the Day ist aus, warum auch immer, weil Ubuntu keinen Bock darauf

01:05:05.920 --> 01:05:11.160
hat. Kein Schimmer. Aber das ist das hier. Print last log. Dann zeigt es dir an. Zuletzt

01:05:11.160 --> 01:05:17.760
eingeloggt von und noch ein paar andere Infos. Das ist Ubuntu 20.04. Übrigens, wenn ihr

01:05:17.760 --> 01:05:21.560
irgendwelche Fragen habt, einfach entwupplos in Chat. Ich gehe auch gleich nochmal zwischendurch

01:05:21.560 --> 01:05:35.000
den Chat durch. So, also wie machen wir das jetzt am richtigsten? Was? Test Replays. Okay.

01:05:35.000 --> 01:05:46.960
Also. Ich bin unfähig, was Ansible-Dinger aus dem Kopf zu machen. So. Name. So, das

01:05:46.960 --> 01:06:01.120
Ding heißt Setup. Setup Job. Hosts. Alle, die wir angeben. Asks. Okay. Task is Disable.

01:06:01.120 --> 01:06:14.120
Show IP on Login. Kannst du auch einfach Touch, Hasch, Login? Wirklich? Cool. Wusste ich

01:06:14.120 --> 01:06:28.960
nicht. Asch. How to turn off Login Banner in Linux. Ist das auch für die Geschichte,

01:06:28.960 --> 01:06:39.000
die SSH ausgibt? Ich deaktiviere das im SSH Server und fertig. Okay. Disable Show IP

01:06:39.000 --> 01:06:46.320
on Login. Also, was wollen wir disablen? Print last log. Das ist Mist, wir wollen keine

01:06:46.320 --> 01:06:58.800
Schleife hier machen. Fart. Fart ist etc, ssh, sshd, config. Zack. So, regex. Print

01:06:58.800 --> 01:07:10.240
last log. Aber ohne die Raute. Und jetzt soll man print last log no soll dann da rein.

01:07:10.240 --> 01:07:13.960
Also, soweit wie ich das jetzt verstehe, macht er folgendes. Wo ist der Unterschied

01:07:13.960 --> 01:07:18.920
zwischen Ansible und Docker? Das sind zwei komplett unterschiedliche Programme. Ansible

01:07:18.920 --> 01:07:26.800
ist quasi eine Scripting Umgebung, wo du Server bzw. alles was du willst automatisieren kannst

01:07:26.800 --> 01:07:34.480
über SSH und Docker ist Frontend für Container, Linux Container. Zwei komplett unterschiedliche

01:07:34.480 --> 01:07:39.160
Paar Schuhe. Du kannst mit Ansible aber zum Beispiel auch Container anlegen und Docker

01:07:39.160 --> 01:07:45.880
verwalten. Das geht. Ansible benutzt du zum Beispiel für so Sachen wie geh auf den Server,

01:07:45.880 --> 01:07:58.840
nimmte die Ausgabe von der IP beim Login aus oder geh auf den Server, legt den User an

01:07:58.840 --> 01:08:04.520
mit dem Name xy, Homeverzeichnis sowieso und der User ID sowieso. Danach legt ein Unit

01:08:04.520 --> 01:08:14.160
File hin und stellt in der Firewall ein, dass nur Port 22 erlaubt ist. So was in der

01:08:14.160 --> 01:08:20.920
Richtung. Hetzer hat eine CLI, ja. Hetzer hat eine CLI. Wow, was ich da gerade gemacht

01:08:20.920 --> 01:08:26.440
habe. Ich mach das trotzdem mal weg, auch wenn es egal ist, dass ich das geleakt habe,

01:08:26.440 --> 01:08:34.760
aber man weiß ja nie. So. Wait, könnte ich nicht mein Laptop mit Ansible bootstirpen?

01:08:34.760 --> 01:08:38.480
Doch, könntest du machen. Du musst aber erstmal ein Betriebssystem drauf kriegen und Ansible

01:08:38.480 --> 01:08:42.600
drauf installieren. Ne, musst du nicht, SSH muss laufen. Du brauchst Python drauf, nicht

01:08:42.600 --> 01:08:51.920
Ansible. Kannst du machen, ja. So und von der Idee, wir haben jetzt über die Hetzer

01:08:51.920 --> 01:08:55.040
CLI einen Server angelegt und mit Ansible lassen wir den jetzt konfigurieren. Also

01:08:55.040 --> 01:08:59.440
erstmal SSH Login ausschalten. Das ist schon mal das erste, was wir machen. Dann brauchen

01:08:59.440 --> 01:09:04.360
wir noch ein paar Packages auf unserem Server. Was jetzt vielleicht nicht ganz klar ist an

01:09:04.360 --> 01:09:10.600
der Stelle, was ist der Vorteil, das so zu machen, anstatt einfach sich auf dem Server

01:09:10.600 --> 01:09:15.800
einzulocken und sagen, ab install. Naja, der Vorteil ist, wenn ich mehrfach solche Services

01:09:15.800 --> 01:09:23.160
aufbaue, dann muss ich das jedes Mal machen und immer in der gleichen Reihenfolge und

01:09:23.160 --> 01:09:27.880
ich darf nichts vergessen. So ist einmal quasi so eine Art Dokumentation da, wie der Server

01:09:27.880 --> 01:09:36.600
aufgebaut ist und ich kann das jedes Mal wieder machen. Äh, gute Frage, ob das so funktioniert,

01:09:36.600 --> 01:09:42.880
werden wir echt gleich sehen. W-werden wir echt gleich sehen. Wieso macht man das nicht?

01:09:42.880 --> 01:09:47.520
Im Bash Script kann man auch machen, hat man früher gemacht, als es diese Tools noch nicht

01:09:47.520 --> 01:09:52.600
gab. Ist für kleine Sachen auch vollkommen legitim, aber Ansible hat keine Ahnung, 200

01:09:52.600 --> 01:09:59.080
Module für alle möglichen Sachen drinne. Von Unitfiles verwalten, bis R-Syncs machen,

01:09:59.080 --> 01:10:04.000
bis Mountpoints verwalten und sonst was. Das ist halt im Bash Script alles von Hand nachzubauen,

01:10:04.000 --> 01:10:16.080
wie sehr Pains Champ. Okay, also blablabla. So, und jetzt brauchen wir noch was. Ich will

01:10:16.080 --> 01:10:23.840
standardmäßig Packages installieren. Install Packages. Abt. Das weiß ich aus dem Kopf,

01:10:23.840 --> 01:10:32.560
wie es geht. Abt, Packages installieren. Name. So, Array. Was wollen wir installieren? Telnet.

01:10:32.560 --> 01:10:48.880
Hardtop. Enload. Keymarks. D-Stats. Was brauchen wir sonst noch so? Äh, haben wir schon. NetTools.

01:10:48.880 --> 01:10:56.160
Ne, wie schreibt man das? NetTools, glaub ich. So ist wie if-config. Boomer wie ich verwenden

01:10:56.160 --> 01:11:05.320
if-config, nicht ip-add. So, und jetzt sagen wir noch status latest, glaube ich. Status

01:11:05.320 --> 01:11:13.080
latest. Da muss ich jetzt einmal mal nachgucken. Ansible apt install. Zeig mal her, wie sieht

01:11:13.080 --> 01:11:27.480
das richtig aus? Examples. Äh, state. Update cache brauchen wir auch noch. Genau. Update

01:11:27.480 --> 01:11:37.360
cache brauchen wir auch noch, dass der vorhin ein update macht. Update cache, yes. Äh,

01:11:37.360 --> 01:11:47.440
state wars, ne. Nicht status, state. State latest. Genau. So, und wenn ich das jetzt ausführe,

01:11:47.440 --> 01:11:51.680
sollte von der Idee, äh, von der Idee her Folgendes passieren. Der lockt sich auf dem

01:11:51.680 --> 01:11:57.800
Server ein, installiert mir die Packages und danach disabler, dass das meine IP anzeigt

01:11:57.800 --> 01:12:07.760
beim login. Hypo bei Packages. Ach, das ist eh nur Text. Auch noch ein update-upgrade mit

01:12:07.760 --> 01:12:13.240
rein. Das ist eine gute Idee, das machen wir. Update hab ich ja schon. Update cache. Äh,

01:12:13.240 --> 01:12:23.040
upgrade. Upgrade, wie macht man das? Upgrade. Upgrade. If yes or save. Vielleicht gibt's

01:12:23.040 --> 01:12:29.200
auch ein Exempel für. Upgrade, das muss man wahrscheinlich, ich versuch das mal, ob man

01:12:29.200 --> 01:12:44.440
das alles in einem machen kann. Ich, ich glaube ja nicht. Upgrade dist, full. Ähm. Äh,

01:12:44.440 --> 01:12:57.480
mal gucken, ob man das alles so auf einmal machen kann. So, dann führen wir das ganze mal aus.

01:12:57.480 --> 01:13:04.640
Also wir haben hier, wir haben hier die Datei liegen. Äh, nicht download. CD, repos,

01:13:04.640 --> 01:13:15.520
keqw as a service, ansible. So, äh, ansible, playbook. Playbook, minus i. Oh, wie konnte

01:13:15.520 --> 01:13:22.360
man die Server, Server-IP überschreiben? Normalerweise braucht man ein, ein, ein, ein Inventory mit

01:13:22.360 --> 01:13:29.880
den Hosts drinne, aber das ist jetzt zum testen erstmal, egal. Topminus i. Was ist das upgrade

01:13:29.880 --> 01:13:39.000
yes? Nee. Die sagen selbst, dass es upgrade dist ist. Ach so, yes. Ok. Update yes und

01:13:39.000 --> 01:13:46.520
klar. Und auch yes. Warum kann man da yes machen oder? Ok, und was ist yes? Ist yes,

01:13:46.520 --> 01:14:02.480
full oder dist? Ok, das ist ein bisschen. Ah, nee. Save and it's alias yes. Ok. Yes

01:14:02.480 --> 01:14:12.560
ist yep. Yep, cock. So, ähm, jetzt müsste es funktionieren. Ähm, Moment, wie ging,

01:14:12.560 --> 01:14:15.480
wie ging es auf dem Server auszuführen? Erstmal gucken, was hatte ich denn hier für eine

01:14:15.480 --> 01:14:26.040
IP nochmal? SSH den da. Minus i. Wie ging das nochmal? Ansible Direct IP. How to run ansible

01:14:26.040 --> 01:14:33.040
without specifying. Hier. Minus i, der Name und dann das Playbook. Ja, man muss ein Komma

01:14:33.040 --> 01:14:37.600
machen. Das war total hängen geblieben. Server. So, also von der Idee her sollte er sich jetzt

01:14:37.600 --> 01:14:42.440
auf dem Server einloggen, die Packages installieren. Beziehungsweise, nee, er sollte erstmal ein

01:14:42.440 --> 01:14:45.600
upgrade machen, ein upgrade machen, dann die Packages installieren. Ich bin mir nicht sicher,

01:14:45.600 --> 01:14:53.280
ob man das alles auf einmal machen kann. Danach sollte er aus der SSHD-Config das Ganze rausschmeißen

01:14:53.280 --> 01:14:59.520
und danach brauchen wir noch SSH reload. Danach brauchen wir noch restart SSH, sonst funktioniert

01:14:59.520 --> 01:15:13.280
er nicht. Name. Restart SSHD. Ähm, wie ging das nochmal? Service. Service. Name. SSH.

01:15:13.280 --> 01:15:38.120
Ansible Service. Da muss ich gucken. State. Restarted. Ok. State Restarted. Ok. Test,

01:15:38.120 --> 01:15:51.840
ob es funktioniert. Bam. Grip. Warum? Ah, mein User ist falsch. Remote User. Natürlich

01:15:51.840 --> 01:16:05.000
Route, was sonst? Nur Route tut gut. So, zeigen wir mal. Ah, fuck. Discover Inter, was? Ok,

01:16:05.000 --> 01:16:11.520
das geht nicht in einem, glaube ich. Ich glaube, das funktioniert nicht in einem. Package upgrade.

01:16:11.520 --> 01:16:20.800
Das geht nicht in einem. Dann müssen wir, äh, da müssen wir das, da müssen wir das

01:16:20.800 --> 01:16:33.880
splitten. KQS-Service. Ja, guck, so sieht der aus. Ist das nicht geiler Service? Den

01:16:33.880 --> 01:16:40.960
deployen wir jetzt auf die Kiste. So, ähm, darf man, darf man sowas hier dann zusammen

01:16:40.960 --> 01:16:51.920
machen? Update. Upgrade. Domain gibt's noch keine. Domain müssen wir auch noch machen.

01:16:51.920 --> 01:17:00.440
Ah, ah, guck mal, jetzt, jetzt funktioniert's. Äh, Domain müssen wir auch noch machen,

01:17:00.440 --> 01:17:09.040
das, äh, machen wir hier mit, wenn wir Zertifikate machen. Domain. Es gibt sich, ja, es gibt

01:17:09.040 --> 01:17:17.160
sicherlich eine Ansible-Extension. Macht er das mit den Admin-Rechten automatisch? Äh,

01:17:17.160 --> 01:17:21.520
du musst sagen, welchen Remote-User du verwenden willst. Nachdem wir Route sind, kann ich alles

01:17:21.520 --> 01:17:45.960
machen. Macht er jetzt was? Äh. Äh, der, der scheint zu updaten, ok. Also. Ah, ich kack

01:17:45.960 --> 01:17:53.120
noob. Das hätt ich noch rausschmeißen müssen. Nochmal. Siehste, das Gute ist, wir machen

01:17:53.120 --> 01:17:57.400
das jetzt einmal richtig und können jeden Server wieder so aufbauen. Woher, äh, woher

01:17:57.400 --> 01:18:00.800
zieht er sich die Login-Daten? Äh, das ist mein SSH-Key, den hab ich standardmäßig

01:18:00.800 --> 01:18:10.880
beim Aufbau mit drauf. Ich wähl, guck, wenn ich hier H-Cloud, H-Cloud, sag ich hier SSH-Key

01:18:10.880 --> 01:18:20.840
Test-at-Test. Das ist halt der Titel von meinem SSH-Key. Ok, hat funktioniert. Hat funktioniert,

01:18:20.840 --> 01:18:28.040
das heißt, jetzt hab ich hier unter anderem JIT drauf, genau, N-Load drauf. Ja, perfekt.

01:18:28.040 --> 01:18:43.560
Ah, es hat funktioniert. So, und ist jetzt SSH-ETC-SSHD-Konfig, hat er das jetzt? ATC-SSH-SSHD-Konfig,

01:18:43.560 --> 01:18:57.480
hat er das jetzt richtig gemacht? Äh. Print. Ja, guck, Print-Last-Log, no, hat funktioniert.

01:18:57.480 --> 01:19:05.440
Ohne hat er auch den SSH-Demon neu gestartet. So, guck mal mal, ob der auch wirklich alles

01:19:05.440 --> 01:19:15.680
geupdatet hat. Tatsächlich, Update. Ja, hat alles funktioniert. Server ist jetzt in top

01:19:15.680 --> 01:19:20.520
Zustand, nachdem wir das Skript ausgeführt haben. Ja, super. So, und jetzt ist natürlich

01:19:20.520 --> 01:19:23.720
die Frage, ob meine IP nicht wieder kommt, wenn ich mich einen ausloge. Das testen wir

01:19:23.720 --> 01:19:41.400
jetzt mal. Nope. IP ist weg. Kommt nicht. Hat funktioniert, sehr nice. Alles klar. Ähm,

01:19:41.400 --> 01:19:45.960
dann können wir ja weitermachen. Also, jetzt haben wir erstmal so die Basics eingerichtet

01:19:45.960 --> 01:19:50.880
auf dem Server. Und jetzt mal vielleicht so als Beispiel, warum das cool ist und warum

01:19:50.880 --> 01:19:56.520
das sinnvoll ist. So, hier haben wir den ersten Server oben. Ich lege jetzt nochmal einen Server

01:19:56.520 --> 01:20:04.920
an, der heißt jetzt CAC-WSS-Service 2. Server anlegen kostet nichts. Hetzer Cloud rechnet

01:20:04.920 --> 01:20:11.920
übrigens stündlich ab. Das heißt, ähm, ich bezahle für den ganzen Kram hier so gut

01:20:11.920 --> 01:20:17.680
wie nix. Eigentlich könnten sie die Server, die ich im Stream zeige, wenigstens bezahlen

01:20:17.680 --> 01:20:30.680
eigentlich, oder? So. Äh, nicht default streamen. Guck, CAC-WSS-Service, CAC-WSS-Service 2,

01:20:30.680 --> 01:20:36.000
und Kosten tut das Ganze 1 Cent aktuell. Ich glaube, 1 Cent ist das Minimalste, was geht.

01:20:36.000 --> 01:20:46.080
Engine X oder Apache, was ist besser? Bei Meilen weit ist mir Engine X lieber, viel

01:20:46.080 --> 01:20:56.160
lieber. Okay, guck, wir haben jetzt noch einen zweiten Server aufgebaut. Und jetzt muss ich

01:20:56.160 --> 01:21:03.520
nur noch folgendes machen. Äh, muss ich nur noch sagen, Ansible Playbook Server aufbauen,

01:21:03.520 --> 01:21:08.880
die IP austauscht. Normalerweise hat man Inventory, dass man das per Name machen kann, ja. Zack,

01:21:08.880 --> 01:21:12.520
jetzt führ ich das aus und er geht auf den zweiten Server drauf und richtet ihn exakt

01:21:12.520 --> 01:21:16.440
so ein wie den ersten Server. Dafür ist das praktisch. Ich könnte jetzt noch 20 Server

01:21:16.440 --> 01:21:22.960
hinstellen, die exakt so konfiguriert werden, wie ich das will. Also das ist, gerade bei

01:21:22.960 --> 01:21:32.720
sowas ist das enorm praktisch. Ja, warum er Engine X, Engine X ausspricht, verstehe ich

01:21:32.720 --> 01:21:35.640
auch nicht. Die Schreibweise verwirrt mich immer. Ich kann den auch nie richtig schreiben.

01:21:35.640 --> 01:21:45.160
Echt, richtig 3-Head. Kannst du das nicht als Docker-Container machen? Doch, das machen

01:21:45.160 --> 01:21:51.480
wir in Stream Nummer 3. Wir machen 3 Streams dazu. Heute machen wir die Web-Anwendung,

01:21:51.480 --> 01:21:55.360
richten den Server mal oldschool mit Ansible, aber es ist oldschool. Ansible ist ja nicht

01:21:55.360 --> 01:22:00.760
oldschool, weil oldschool Server ohne Container ein, deployen die App im nächsten Stream,

01:22:00.760 --> 01:22:04.440
gucken wir, dass wir das Bild serverseitig rotieren und so eine kleine API noch einbauen.

01:22:04.440 --> 01:22:08.600
Dann machen wir GitHub Actions, Deployment und Continuous Integration, weil wir sind

01:22:08.600 --> 01:22:14.440
Agile 5-Head-Hackermans. Dann verwenden wir mal den Head-Store-Load-Balancer mit Zertifikaten

01:22:14.440 --> 01:22:23.880
und extra Domain. Und im dritten Stream machen wir dann Containerstellen draus. Auf YouTube

01:22:23.880 --> 01:22:29.000
gibt es die Streams nicht, ne. Aber wir haben einen Archiv, da ist das alles. So, guckt,

01:22:29.000 --> 01:22:35.040
2. Server angelegt und ist direkt konfiguriert, so wie man haben wollen. Also wunderbar. Wann

01:22:35.040 --> 01:22:39.800
ist der 2. Stream? 2. Schnitt. Vielleicht nächstes Wochenende oder nächste Woche. Es

01:22:39.800 --> 01:22:44.560
dauert auf jeden Fall nicht lang. So. Und daran sieht man jetzt den Vorteil schon, ich

01:22:44.560 --> 01:22:50.600
könnte jetzt 20 solcher Server anlegen und total easy konfigurieren lassen. Natürlich

01:22:50.600 --> 01:22:56.440
ist unsere Konfig noch nicht fertig, da muss noch ein bisschen was dabei. So, ich lösche

01:22:56.440 --> 01:23:11.320
mal CACWSS-Service wieder. Delete. Gut. Also, lass mal überlegen, was brauchen wir denn

01:23:11.320 --> 01:23:19.920
noch? Wichtig, wir nehmen eine Heads nach Firewall davor. Da müssen wir uns ja nicht

01:23:19.920 --> 01:23:23.880
selbst drum kümmern. Also, das ist übrigens ein neues Feature bei denen, das gibt es

01:23:23.880 --> 01:23:31.960
noch nicht so lang. Seit 2 Monaten oder so. Bisher musste man sich komplett selbst drum

01:23:31.960 --> 01:23:37.400
kümmern. Also, man musste dann beispielsweise die UFW unter Ubuntu einschalten. Jetzt hat

01:23:37.400 --> 01:23:42.840
Hexner, ich glaube sogar, kostenlos. Ich bin mir gar nicht sicher, was der Kram kostet.

01:23:42.840 --> 01:23:51.720
Guck mal, der ganze Kram ist noch da. Ich weiß gar nicht, was das kostet. Kann man

01:23:51.720 --> 01:23:55.640
jetzt Firewalls anlegen? Das heißt, wir können da auch wirklich nur Sachen freigeben, die

01:23:55.640 --> 01:24:03.160
man braucht. So, wir brauchen Port 22, wir brauchen Ping. Ping ist okay, können wir behalten.

01:24:03.160 --> 01:24:11.600
Wir brauchen Port 80 und wir brauchen später noch Port 443. Und das Ganze soll auf den

01:24:11.600 --> 01:24:29.320
Server gehen. CACW as a service. Apply to one server, Firewall, CACW, Firewall. Create.

01:24:29.320 --> 01:24:40.880
Und jetzt sind wir safe. SSH. Ich hoffe, es funktioniert noch. Kunst, sehr gut. Was natürlich

01:24:40.880 --> 01:24:50.120
sehr praktisch ist, da muss man sich selbst nicht mehr drum kümmern. Es ist nur Ping

01:24:50.120 --> 01:25:01.800
allowed, Port 22 für H80, für HTTP und 443 für HTTPS. Ja, das kommt auf die Anwendung

01:25:01.800 --> 01:25:14.880
an. Oh, sind wir dann hier gelandet. Das kommt auf die Anwendung an. Da gibt es nicht so

01:25:14.880 --> 01:25:18.040
viele Tricks. Du musst den Server halt rebooten, vor allem wenn es ein Kernel-Update ist.

01:25:18.040 --> 01:25:22.880
Ich weiß, es gibt schon die mehr oder weniger trickreiche Geschichten, dass du manche Updates

01:25:22.880 --> 01:25:28.000
machen kannst, Rolling, auch Kernel-technisch, aber in der Regel kann man sagen, Kernel-Update

01:25:28.000 --> 01:25:33.880
gleich Reboot. Also, du musst gucken, wie das deine Anwendung verkraftet. Was hast du

01:25:33.880 --> 01:25:40.040
denn dahinter stehen? Also, wenn du da mehr oder weniger Stateless-Webgeschichten dahinter

01:25:40.040 --> 01:25:47.200
stehen hast, dann ist es ganz einfach. Dann machst du einen Loadbalancer davor. Die FW

01:25:47.200 --> 01:25:51.360
bei Hetzler ist aber eine Stateless-Firewall, soweit ich weiß. Oder wurde das geändert?

01:25:51.360 --> 01:26:08.880
Gibt es wirklich noch Stateless-Firewalls? Kann ich mir gar nicht vorstellen. Es kann

01:26:08.880 --> 01:26:15.040
keine Stateless-Firewall sein, dann würde Ping überhaupt nicht funktionieren, weil

01:26:15.040 --> 01:26:30.440
das Antwortpaket nicht weiß, wozu es gehört. Das muss Stateful sein. Würde mich sehr wundern.

01:26:30.440 --> 01:26:46.000
Müsst ihr mal gucken, ich kann es dir so nicht sagen. So, aber wo sind wir hier? Genau,

01:26:46.000 --> 01:26:54.960
Mr. Mr. Ja, haben wir. Ja, also wenn das Web... also, machen wir mal ganz schnell Überblick.

01:26:54.960 --> 01:27:00.560
Wie patcht man am besten einen Linux-Cluster? Wobei Cluster, Cluster ist in dem Fall das

01:27:00.560 --> 01:27:05.160
falsche Wort. Geklustert ist es ja nur, wenn du verschiedene Notes hast, die irgendwie

01:27:05.160 --> 01:27:12.080
miteinander reden. Hier geht es ja darum, du willst Ausfall, möglichst Ausfallzeiten

01:27:12.080 --> 01:27:20.440
optimiert deine Systeme neu starten. Und das einfachste ist, du stellst einen Loadbalancer

01:27:20.440 --> 01:27:26.720
davor oder einen Loadbalancer-Cluster davor. Also im Angenommen, du hast 10 Web-Server,

01:27:26.720 --> 01:27:33.000
du hast alles relativ stateless, ohne Sticky Sessions oder sonst was, einen Loadbalancer

01:27:33.000 --> 01:27:39.160
davor und dann kannst du die Server neu starten, wie du lustig bist, ist egal. Da hast du

01:27:39.160 --> 01:27:47.400
nur minimale Sachen, die ins Leere gehen. Das funktioniert. Bei Sticky Sessions und

01:27:47.400 --> 01:27:50.840
irgendwelchen Stateful-Sachen wird es ein bisschen komplizierter. Dann musst du quasi

01:27:50.840 --> 01:27:57.960
erstmal auf Server-Ebene, auf Logikebene gucken, dass dieser Server keine neuen Verbindungen

01:27:57.960 --> 01:28:03.800
mehr annimmt und dass die Clients sich zu den neuen Servern verbinden und erst wenn

01:28:03.800 --> 01:28:10.440
alles auf den neuen Servern ist, kannst du es dann ausschalten. Kommt aber ganz hart

01:28:10.440 --> 01:28:24.120
auf die Anwendung an. Ja gut, das beste ist 5 Minuten warten. 5 Minuten ist glaube ich

01:28:24.120 --> 01:28:30.080
Standard-Timeout. Wie man dann einen Loadbalancer patcht? Gar nicht. Es sei denn, du hast einen

01:28:30.080 --> 01:28:35.520
Loadbalancer-Cluster. Dann musst du es genau machen, wie ich gesagt habe. Du schwenkst

01:28:35.520 --> 01:28:41.200
den Loadbalancer, wartest bis alle Sessions drüben sind. Es gibt ja mittlerweile Loadbalancer,

01:28:41.200 --> 01:28:47.920
die können sogar TCP-Sessions quasi sharen. Du wartest bis alle Sessions drüber sind

01:28:47.920 --> 01:28:53.240
oder du hast halt irgendwie BigBrain-Loadbalancer, die geschaerte TCP-Sessions haben. PFSense

01:28:53.240 --> 01:29:02.000
kann das zum Beispiel. Dann startest du den inaktiven, schwenkst und startest. Kannst

01:29:02.000 --> 01:29:06.920
auch Netscaler nehmen, was auch immer. Es gibt noch viel mehr. Wie gesagt, der Aproxy

01:29:06.920 --> 01:29:13.760
kannst du nehmen. Da gibt es total viele Sachen, das kann man so pauschal nicht sagen. Aproxy

01:29:13.760 --> 01:29:18.240
ist aber tatsächlich ganz nice. Aproxy hat auch ein eingebautes Webinterface, wo du gucken

01:29:18.240 --> 01:29:29.720
kannst, wie viele Verbindungen noch drauf sind. Und wenn du super modern bist, der Container-Way,

01:29:29.720 --> 01:29:35.640
da gibt es noch ganz andere Sachen. Aber machen wir mal weiter. Wir haben unsere Fireball angelegt,

01:29:35.640 --> 01:29:43.400
passt. Das kann nicht komplett stateless sein, Leute. Das muss stateful sein. Ich kann euch

01:29:43.400 --> 01:29:50.680
auch sagen, warum. Warte mal. Ich kann einen Ping machen. Und einen Ping, also entweder

01:29:50.680 --> 01:29:55.840
bin ich jetzt richtig eui und ich erzähle euch Scheiße oder die Dinger sind stateful.

01:29:55.840 --> 01:30:02.440
Damit ein Ping funktioniert, muss es doch eigentlich eine stateful Fireball sein, weil

01:30:02.440 --> 01:30:15.720
die Antwort von dem Server muss die Fireball wissen, wo die Anfrage her kam. Und was geht

01:30:15.720 --> 01:30:26.560
einem in eine stateful Fireball? Wenn du ausgehend verkehrlich blockst, das stimmt, da hast du

01:30:26.560 --> 01:30:41.960
recht. Da hast du recht. Ne, stimmt, muss nicht, muss nicht. Du erlaubst ja eh, du erlaubst

01:30:41.960 --> 01:30:50.040
ja eh outgoing zu überall hin. Dann ist egal. Ne, dann kann es, dann muss es das nicht sein.

01:30:50.040 --> 01:30:54.240
Normalerweise muss die Fireball wissen, woher der Ping kommt, wenn du nicht von überall

01:30:54.240 --> 01:31:01.960
her erlaubst. Also stell dir mal vor, du erlaubst, dass dein Server nirgends wohin zugreifen

01:31:01.960 --> 01:31:14.160
kann. Und also dein Server darf ausgehend nirgends wohin Pakete verschicken. Und du möchtest

01:31:14.160 --> 01:31:19.880
dem jetzt sagen, wenn ein Ping reingeht, dass es erlaubt, die Antwort auch erlauben und das

01:31:19.880 --> 01:31:25.880
geht nur stateful. In dem Fall ist aber egal, wenn du nichts geblockt hast als Upsend, ja

01:31:25.880 --> 01:31:32.480
dann müsste es auch so gehen. Müsste ich mir noch mal ein bisschen Gedanken drüber

01:31:32.480 --> 01:31:39.720
machen. Also ich wüsste nicht, wie das stateless funktionieren sollte. Das ist ja gerade der

01:31:39.720 --> 01:31:50.600
Witz von stateful, dass sowas funktioniert. Also irgendwo muss ja markiert werden, hey,

01:31:50.600 --> 01:32:07.120
was ist die Antwort auf das eingehende Paket? Doch, doch, doch. Aber der Fall ist ja in dem

01:32:07.120 --> 01:32:12.640
Fall so, du hast in der Fireball geblockt, dass dein Server nach außen überhaupt kommunizieren

01:32:12.640 --> 01:32:19.640
darf. Theoretischer Fall. Aber du willst, dass er pingbar ist. Das heißt, dann stellst

01:32:19.640 --> 01:32:27.480
du ein, und das geht halt nur stateful, dann stellst du ein, eingehend ICMP erlaubt, ausgehend

01:32:27.480 --> 01:32:34.840
nur related Verbindungen, die quasi zu einer vorher schon eingehenden gehören. Das ist

01:32:34.840 --> 01:32:41.920
ja der Sinn von stateful Fireballs. Und ich wüsste nicht, wie das funktionieren sollte

01:32:41.920 --> 01:32:54.520
stateless. Keine Ahnung. Ich muss euch ehrlich sagen, ich hab mir da jetzt nicht genug Gedanken

01:32:54.520 --> 01:33:00.680
drüber gemacht, ob das jetzt gehen sollte oder nicht. Aber ist auf jeden Fall spannende

01:33:00.680 --> 01:33:06.040
Sache. Okay, weiter im Text, wir sind voll hinten dran. Weiter geht's. Also wir haben

01:33:06.040 --> 01:33:08.920
jetzt unseren Server automatisch aufgebaut. Als nächstes müssen wir irgendwie gucken,

01:33:08.920 --> 01:33:13.640
wie wir unsere Web-Anwendung drauf kommen. Das related ist aber ausschlaggebend. Genau,

01:33:13.640 --> 01:33:17.040
genau. Zumindest bei IP-Tables heißt das so. Fragt mich nicht, wie das bei anderen Sachen

01:33:17.040 --> 01:33:24.080
heißt. Okay, also wir haben den Server eingerichtet mit Ansible. Jetzt müssen wir mal gucken,

01:33:24.080 --> 01:33:27.920
was brauchen wir sonst noch? UFW können wir uns schenken, Pakete haben wir installiert,

01:33:27.920 --> 01:33:32.840
IP haben wir ausgeschaltet, SSH haben wir neu gestartet. Ja, jetzt müssen wir irgendwie

01:33:32.840 --> 01:33:37.000
gucken, wie wir das noch vm, ja. Jetzt müssen wir gucken, wie wir unsere Anwendung drauf

01:33:37.000 --> 01:33:41.000
deployen. Das heißt, ich würde mal sagen, wir legen noch einen neuen User an. Wir legen

01:33:41.000 --> 01:33:50.640
den User für die Anwendung an. Also, wie legt man Ansible User an? Ansible User. Create.

01:33:50.640 --> 01:33:58.280
Übrigens, wenn ihr euch auch mal in der Cloud mit einer Linux VM austoben wollt, dann könnt

01:33:58.280 --> 01:34:03.040
ihr jetzt bei meinem Partner Hetzner Cloud vorbeigucken und euch 20 Euro Startgut haben

01:34:03.040 --> 01:34:09.080
mit meinem Gutschein sichern. Ausrufezeichen Hetzner im Chat. Der Sellout war jetzt okay,

01:34:09.080 --> 01:34:14.960
oder? Vorher habe ich ein bisschen verkackt, aber der war jetzt okay, finde ich. Ne, aber

01:34:14.960 --> 01:34:18.800
ernsthaft, ich verwende das selbst schon. Ich glaube jetzt die letzten drei Jahre oder

01:34:18.800 --> 01:34:26.000
so. Ist für mich, gerade weil es ein deutscher Hosting-Anbieter ist, ist naheliegend, ja.

01:34:26.000 --> 01:34:31.320
Du hast zig andere, klar, aber preisleistungsmäßig und dass du zwei Rechenzentren in Deutschland

01:34:31.320 --> 01:34:37.960
hast, macht für mich Hetzner echt sympathisch und brauchbar. Auch die Speicherpreise sind

01:34:37.960 --> 01:34:43.040
nicht ultra hoch, weil man ein bisschen mehr braucht. Und wie gesagt, 20 Euro Startgut haben

01:34:43.040 --> 01:34:48.240
mit meinem Code für Neukunden, da könnt ihr schon ein paar Monate hier so einen kleinen

01:34:48.240 --> 01:34:54.520
Server betreiben und euch da ein bisschen austoben. Hetzner ist echt nice, also da kann

01:34:54.520 --> 01:34:59.120
man sich nicht beschweren. Ich hätte diese ganze Sponsoring-Geschichte gar nicht angenommen,

01:34:59.120 --> 01:35:03.880
wenn ich den Kram nicht selbst verwenden würde. Ja, das wäre jetzt so wie wenn ich Raid Shadow

01:35:03.880 --> 01:35:10.400
Legends mache, mache ich auch nicht. Also ich kann es euch nur empfehlen mal anzugucken.

01:35:10.400 --> 01:35:16.640
Okay, jetzt aber weiter im Text. Wie kriegen wir unseren Service auf den, wie kriegen wir

01:35:16.640 --> 01:35:23.280
CAC W as a Service auf den Server CAC W as a Service? Gut, wir machen das jetzt mal ganz

01:35:23.280 --> 01:35:27.320
einfach. Ich kopiere es von Hand dahin und danach gucken wir wie wir das Ganze mit Unit

01:35:27.320 --> 01:35:35.040
File und Ansible noch deployed kriegen. Ne, ein User wollten wir noch anlegen, ein User

01:35:35.040 --> 01:35:46.040
wollten wir vorher noch anlegen. Alter, Vmware, du nervst mich hier gerade. Hab ich das, ach,

01:35:46.040 --> 01:35:49.920
ich hab das sticky eingestellt, ich wollte gerade sagen, warum ist das immer wieder da.

01:35:49.920 --> 01:35:57.080
Ansible Create User, Manage User Accounts. Ich brauche einen neuen User. Und zwar nennen

01:35:57.080 --> 01:36:04.960
wir den App. Bester Name, da weiß man sofort was Sache ist. User, das da, perfekt. Die

01:36:04.960 --> 01:36:17.560
einfachste User Variante. Ohne Passwort, ohne Login, ohne alles. Okay. Ja. Create App User.

01:36:17.560 --> 01:36:28.400
Name, Pushkar15, Commodore Style hier. Ne, die heißt einfach nur App, da weiß man sofort

01:36:28.400 --> 01:36:36.520
was Sache ist. App, Passwort, expired, nie. Gibt kein Passwort. Okay, dann führen wir

01:36:36.520 --> 01:36:42.960
das mal aus. Wenn man das jetzt übrigens ordentlich macht, müsste man hier noch einstellen so

01:36:42.960 --> 01:36:46.320
nach dem Motto, okay, das machen wir nur wenn wir es noch nicht gemacht haben, das machen

01:36:46.320 --> 01:36:51.720
wir auch nur wenn es nicht da ist. Das kann man abhängig voneinander machen, aber, okay,

01:36:51.720 --> 01:37:04.760
das Ansible. Das sollte jetzt eh alles ein bisschen schneller gehen. Oh, das ist der

01:37:04.760 --> 01:37:17.280
falsche Server, null. Das ist der richtige. Das ist der richtige Server, stimmt ja, stimmt

01:37:17.280 --> 01:37:24.680
ja gar nicht. He doesn't know, he lacks critical information, ja. Okay, Restart SSR, Create

01:37:24.680 --> 01:37:29.320
User. Gut, wir haben den User angelegt, das heißt Home App haben wir jetzt, sehr schön.

01:37:29.320 --> 01:37:43.400
Kann ich auch Sudo App machen? Was ist denn das? Oldschool Shell. Okay, wir haben dann

01:37:43.400 --> 01:37:50.200
extra User für die App. Okay, dann kopiere ich jetzt mal die App drauf auf den Server,

01:37:50.200 --> 01:37:55.520
dann könnt ihr auch mal ausprobieren. Da könnt ihr auch alle eine Runde Keg WS Service aufrufen

01:37:55.520 --> 01:38:04.280
gleich. Poste euch dann die IP in den Chat, wenn es soweit ist. So, ich ersünke das jetzt

01:38:04.280 --> 01:38:09.680
einfach mal drauf und ich SCP das drauf, ist jetzt erstmal egal. Danach machen wir

01:38:09.680 --> 01:38:25.680
das mit Ansible, schön. Also Keg WS Service, also.NET, Publish, ach du Scheiße, das war

01:38:25.680 --> 01:38:32.640
echt aus dem Kopf, Publish, haben wir das nicht irgendwo in der History? Publish, Publish,

01:38:32.640 --> 01:38:41.600
.NET, Publish, Release, Linux, Self, ja doch, Self-Contains, das bin ich nicht verkehrt.

01:38:41.600 --> 01:38:48.280
History ist die beste Dokumentation aller Zeiten. Äh, Aviator, doch, wir hatten hier schon

01:38:48.280 --> 01:38:53.040
ein paar mal DDoS Action, da konnte Hetzner aber nur am Rande was dafür, da haben uns

01:38:53.040 --> 01:38:59.640
die Leute irgendwelche polnischen Botnetze gemietet und fanden das lustig, dass ich dann

01:38:59.640 --> 01:39:03.800
für 10 Minuten im Stream nichts machen konnte, aber wenn ihnen das Geld wert ist, meinetwegen,

01:39:03.800 --> 01:39:18.440
sollen sie machen. Das ist kein Witz, hatten wir wirklich. Sachen gibt's, ja. Okay, SCP,

01:39:18.440 --> 01:39:40.760
die richtige. SCP, komm, Bam, als Root, wir starten das jetzt als Root, easy, einfach

01:39:40.760 --> 01:39:51.680
um zu gucken, ob es funktioniert. Na, mit den 300 Viewern kommt Hetzner klar, das ist

01:39:51.680 --> 01:39:57.120
kein Problem, aber mit den 50 Milliarden Botnet-Anfragen aus Polen kam es nicht klar.

01:39:57.120 --> 01:40:05.360
By the way, das ist übrigens so, wie man es nicht macht, per SCP eine Anwendung rüber

01:40:05.360 --> 01:40:10.280
kopieren, aber zum Testen ist es vollkommen in Ordnung. Später würde ich es, wenn überhaupt

01:40:10.280 --> 01:40:18.240
per R-Sync machen und der richtige Weg, den machen wir dann im zweiten Stream über GitHub

01:40:18.240 --> 01:40:21.880
Actions deployen lassen und gleich noch ein paar Tests und gucken, ob das alles funktioniert.

01:40:21.880 --> 01:40:47.560
So, auf, gib alles. Oh nee, die ganzen Bilder. Drei Stunden später. Aber zum Glück sind

01:40:47.560 --> 01:41:00.920
die Bilder nur, haben wir die resized und die sind nicht so groß. Okay. Gleich haben

01:41:00.920 --> 01:41:12.640
wir's. SCP dann später in der Pipeline. Ich werde wahrscheinlich mal was über R-Sync.

01:41:12.640 --> 01:41:20.200
Okay. Beides, beides. Beides, das haben auch schon Leute in Tetzner Server selbst gedetost.

01:41:20.200 --> 01:41:28.200
Okay, also das haben wir jetzt rüber kopiert. CACW. Wo ist es? Nee, Publish. Publish, jetzt

01:41:28.200 --> 01:41:38.840
könnt ihr es gleich mal aufrufen. Hier, IP, Home Server. CACW as a Service. Bam, läuft.

01:41:38.840 --> 01:41:45.120
Ah nee, Moment, Local Host. Ich mach doch da jetzt kein Reverse Proxy vor. Urls, gleich.

01:41:45.120 --> 01:41:54.640
HTTP, Doppelpunkt, Doppelslash, Sternchenport 5000. So Leute, gebt alles. Moment, ich muss

01:41:54.640 --> 01:42:10.800
mal kurz gucken, ob ich meine IP leake, wenn ich auf den Server draufgehe. Ah, Port 5000,

01:42:10.800 --> 01:42:15.680
von Port 5000 ist in der Firewall ja gar nicht freigegeben. Okay, machen wir Port 80, machen

01:42:15.680 --> 01:42:20.320
wir Port 80. Scheiß drauf. Dann kriegen sie auch die ganzen China-Chinesen gleich mit,

01:42:20.320 --> 01:42:34.360
dass wir online sind. Okay. Die IPs wird nicht gelegt. Okay, wunderbar. Also, ich mach mal

01:42:34.360 --> 01:42:46.440
wieder an. Ja, wir starten das jetzt. Ihr könnt jetzt hier das da ausführen. Ja, da

01:42:46.440 --> 01:42:52.600
könnt ihr jetzt hin und ihr kriegt alle eine Runde CACW as a Service. Gebt alles hier.

01:42:52.600 --> 01:43:03.000
Wer wollte nicht schon immer CACW in as a Service? Gucken, ob ihr irgendwie ein bisschen nennenswert

01:43:03.000 --> 01:43:20.440
Last verursachen könnt. Boah, boah. Geht, aber so wirklich viel bei Enload. Mal schauen.

01:43:20.440 --> 01:43:31.000
Ist ja nix. Outgoing. Ah, Busybuzz ist da. Busybuzz ist da. Sag mal, ist das jetzt von

01:43:31.000 --> 01:43:35.840
einem Date-Job-Arbeitszeit? Nee, schön wär's. Schön wär's, wenn ich das doppelt bezahlt

01:43:35.840 --> 01:43:40.720
kriegen will. Das wär doch mal geil. Leute, wäre es nicht cool, ich könnte mich bei der

01:43:40.720 --> 01:43:46.520
Arbeit streamen. Da würde ich Geld von der Arbeit verdienen, Stream-Money von den Subs,

01:43:46.520 --> 01:43:56.600
plus das wär doch mal Massive-Brained, Alter. Wenn das gehen würde. Elevenhead. Aber das

01:43:56.600 --> 01:44:07.600
geht nicht. Und Massive League, das stimmt. Ok, Leute, funktioniert's bei euch, wenn ihr

01:44:07.600 --> 01:44:20.600
da hingeht. Kriegt ihr alle schön CACW as a Service. Ja, nice. Bester Microservice überhaupt,

01:44:20.600 --> 01:44:38.120
oder? Ich würd sagen Startup, Startup-verdächtig. Absolut Startup-verdächtig. Fallt an der Börse,

01:44:38.120 --> 01:44:42.640
genau. Ok, zack. Ok, wir haben jetzt getestet, dass es prinzipiell funktioniert. Jetzt machen

01:44:42.640 --> 01:44:49.000
wir das ordentlich. Gehen wir hier mal raus. Gehen wir mal in Ansible rein. Wir wollen

01:44:49.000 --> 01:44:53.480
das Ganze der Reihe nach machen. Ok, Leute, das hab ich noch nie gemacht. Ich hab noch

01:44:53.480 --> 01:44:59.560
nie mit Ansible was ordentlich deploit. Moin, Eyelady, Pina. Ich hab noch nie mit Ansible

01:44:59.560 --> 01:45:06.200
ordentlich was deploit. Ich würd sagen, wir brauchen einen neuen Job für Build. Name.

01:45:06.200 --> 01:45:14.240
Build. Wir machen sowas. Wir machen einen Build-Shop. Wir machen einen Build-Shop und

01:45:14.240 --> 01:45:21.600
wir machen danach da noch einen Deploy-Job. Wir machen Setup. Warte mal, wir machen Setup.

01:45:21.600 --> 01:45:24.720
Das sollte man in unterschiedlichen Dateien machen wahrscheinlich. Bei Ansible kann man

01:45:24.720 --> 01:45:28.400
das glaube ich auch irgendwie taggen. Nicht mehr erreichbar. Ja, ich hab ausgeschaltet.

01:45:28.400 --> 01:45:37.000
Was, die Bilder sind nicht transparent? Doch, doch, die müssten transparent sein. Der Browser

01:45:37.000 --> 01:45:45.520
zeigt das nur nicht richtig an. Aber die müssten transparent sein. Ok, Build und dann brauchen

01:45:45.520 --> 01:45:58.520
wir noch einen weiteren Job. Name. Deploy. In Discord ist transparent. Ja, perfekt.

01:45:58.520 --> 01:46:01.760
Zumindest der nächste Tag. Ich weiß es noch nicht genau. Aber ich streame zwischendurch

01:46:01.760 --> 01:46:05.760
auf jeden Fall noch ein paar Mal und dann können wir das ausprobieren. Kann ich euch

01:46:05.760 --> 01:46:11.920
das zeigen? Wann ich das mache, muss ich mir ausdenken. Also, so, Build. Wie machen wir

01:46:11.920 --> 01:46:18.920
das Build? Lass mal überlegen. Wie mach ich denn das Build von Hand? Ich mach.NET Publish.

01:46:18.920 --> 01:46:28.440
Self-Contained. Also, so, jetzt machen wir... Also, wie sieht mein Build-Shop aus? Wie kann

01:46:28.440 --> 01:46:52.800
man Ansible Local Command machen? Das da, zeig mal her. Ansible Local Action. Hab ich

01:46:52.800 --> 01:46:59.920
nicht verstanden. Wie geht das jetzt? Local Action. Ah, Local Action Build. Da kann man

01:46:59.920 --> 01:47:07.000
auch bestimmt auch Shell nehmen. Ok, also, Build. Wir kommentieren diesen ganzen Schmodder

01:47:07.000 --> 01:47:11.320
mal aus, weil das haben wir jetzt ja schon gemacht. Später brauchen wir das, wenn wir

01:47:11.320 --> 01:47:18.760
einen neuen Server installieren. Aber ok, Build. Da muss ich jetzt bestimmt auch wieder

01:47:18.760 --> 01:47:23.640
diesen ganzen Mist hier dabei kopieren. Da merke ich immer wieder, dass ich mit Ansible

01:47:23.640 --> 01:47:39.200
zu wenig mache. Aber er soll es ja lokal ausführen. Ok, Local Action. Ok, Build App. So, das ist

01:47:39.200 --> 01:47:44.760
nicht Command. Shell. Schau mal nach Raw Command. Aber so müsste es auch funktionieren, oder?

01:47:44.760 --> 01:47:53.680
Shell. Und jetzt sage ich einfach, CD, eins drauf, in den Ordner, keqws-service, weil

01:47:53.680 --> 01:48:03.840
das heißt ja hier so. Guckt. Hier, eins, eins hoch. Keqws-service. Und da mache ich

01:48:03.840 --> 01:48:10.120
jetzt mal ein.NET-Build drinne. Also, Publish. Gucke ob das funktioniert. Da bin ja mal gespannt.

01:48:10.120 --> 01:48:15.080
So. Und von der Idee her müsste das mal ein Build-Command sein. Das machen wir dann wie

01:48:15.080 --> 01:48:19.840
gesagt im nächsten Stream über GitHub Actions. Aber ich habe das noch nie über Ansible gemacht.

01:48:19.840 --> 01:48:29.480
Mal gucken wie das funktioniert. Ich führ das mal aus. Build. Remote User bei Lokalen

01:48:29.480 --> 01:48:37.160
Actions, macht das Sinn? Nee. Ehrlich gesagt nicht, hast du recht. Ich weiß nicht, aber

01:48:37.160 --> 01:48:42.480
vielleicht braucht man das ja. Ich glaube nämlich man braucht das. Nö, braucht man

01:48:42.480 --> 01:48:56.920
nicht. Ok. Dann können wir das alles weglassen. What? Wie jetzt? Aha. Kann ich ja auch Hosts

01:48:56.920 --> 01:49:07.640
weglassen vielleicht? Nee. Ok. Ok, jetzt haben wir ein Bild angestoßen. Lokal. Können

01:49:07.640 --> 01:49:13.400
wir auch mal ausbreiten ob das funktioniert. Neues Tab auf. Wo sind wir hier? Wir sind

01:49:13.400 --> 01:49:22.520
in repos.keqws-service.rm-bin. Wir löschen mal den Output-Folder und lassen noch mal

01:49:22.520 --> 01:49:31.240
das Bild laufen und gucken ob das jetzt funktioniert. Bild. Bin. Jawoll. Funktioniert. Ok. Lokales

01:49:31.240 --> 01:49:36.760
Bild funktioniert. Jetzt ist unsere Anwendung gebaut. Mehr brauchen wir da wahrscheinlich

01:49:36.760 --> 01:49:44.600
an der Stelle gar nicht. Jetzt können wir es deployen. Deploy. Host. All. Wie gesagt

01:49:44.600 --> 01:49:48.920
ich weiß dass das nicht die schöne Ansible Art ist das so alles in einer Datei zu machen.

01:49:48.920 --> 01:49:55.200
So. Tasks. So wie kriegen wir den Kram jetzt rüber auf den Server? Nicht per SCP auf jeden

01:49:55.200 --> 01:50:04.680
Fall. Das wäre zu 3-Head das mit SCP rüber zu kopieren. Am besten wäre so eine Art R-Sync

01:50:04.680 --> 01:50:11.880
oder sowas. Id-Clone kann ich nicht machen weil ich es nicht. Achso doch ich habe es

01:50:11.880 --> 01:50:17.980
ja im Repo. Aber ich habe es ja nicht im Repo mit. Ne ne das bringt nichts. Ich bilde das

01:50:17.980 --> 01:50:23.440
ja lokal. Ich habe ja die Binaries nicht drin. Ich müsste ja dann quasi.NET auf dem Server

01:50:23.440 --> 01:50:29.280
noch installieren und dort den Bild machen. Was kontraproduktiv ist weil in Zukunft mache

01:50:29.280 --> 01:50:33.840
ich das nächste Mal ja über GitHub Actions wo das gebaut wird. Also ich brauche lokal

01:50:33.840 --> 01:50:38.640
kein.NET auf dem Server weil ich quasi eine Self-Contained Application bauen lasse die

01:50:38.640 --> 01:50:45.560
auch ohne.NET läuft. Also. Tasks. Deploy. Gut wie macht man einen R-Sync mit Ansible?

01:50:45.560 --> 01:50:58.880
Ansible R-Sync. Bam. Possix Synchronize. Das klingt schon mal 24-Head. Hat auch 25.000

01:50:58.880 --> 01:51:16.520
Optionen. Was? Source. Dest. Recursive. No. Ok. Copy Paste das jetzt mal. Also Tasks.

01:51:16.520 --> 01:51:29.320
Copy. App. Besser Name. Es soll von. Von. Diesem Verzeichnis. Soll er kopieren. Wo

01:51:29.320 --> 01:51:44.520
liegt denn das. Moment. Wo liegt denn das. Bin. Mach ich mal nochmal ein Publish. Zeig

01:51:44.520 --> 01:51:48.800
den mir doch an wo das wo die Anwendung drin liegt. Hier. Das da. Das will ich kopieren.

01:51:48.800 --> 01:52:01.320
Publish. CacW as a Service. So. Offlich ist es jetzt der richtige Pfad. Eins hoch. CacW

01:52:01.320 --> 01:52:07.800
as a Service bin Release.NET 5 Publish. Das will ich kopieren. So und zwar Destination

01:52:07.800 --> 01:52:13.200
auf dem Server. Soll das jetzt. Wir haben extra. Guck mal wir haben extra einen eigenen User

01:52:13.200 --> 01:52:19.960
dafür angelegt. Home App. Normalerweise würde ich das kopieren. Irgendwie unter WWW. WWW.

01:52:19.960 --> 01:52:29.200
War WWW oder sowas. Ok. Es gibt auch einen Rapper. Das habe ich doch hier schon. Bam.

01:52:29.200 --> 01:52:41.520
Hab ich schon entdeckt. MedV. So Destination. Das ganze nach Home App. CacW as a Service.

01:52:41.520 --> 01:52:49.760
Recursive. Yes. Das ist ja ein Ordner. Vermute ich mal. Recursive. Was macht Archive. Symbol

01:52:49.760 --> 01:52:57.480
brauchen wir nicht. Delete. Delete Remote. Wenn es was nicht gibt. Ja das ist tatsächlich

01:52:57.480 --> 01:53:05.000
nicht verkehrt. Delete. Yes. Er ist immer nur Remote. Also da muss man keine Angst

01:53:05.000 --> 01:53:12.120
haben das Lokal was wegfliegt. Ich würde fast sagen dass die Chance besteht dass das

01:53:12.120 --> 01:53:30.640
so funktioniert. Schauen wir mal. Mal gucken ob der jetzt deploit. Task Build. Task Deploy

01:53:30.640 --> 01:53:43.520
Copy App. Ok. App. Da sind wir schon mal. CacW as a Service. Ok der kopiert noch. Der

01:53:43.520 --> 01:53:51.480
kopiert noch. Steht das so im Backlog. Klar ich habe extra ein Kanban Board angelegt davor.

01:53:51.480 --> 01:53:57.200
Guck mal hat funktioniert. Er hat die App deploit. Und sogar. Guck mal. Oh das ist nice. Guck

01:53:57.200 --> 01:54:01.120
mal der hat die gleich dem richtigen User gegeben. Das schiebe ich jetzt einmal mal

01:54:01.120 --> 01:54:07.560
da drauf. Dass sie das hier einprogrammiert haben. Weil ich bin Root. Und er sync das

01:54:07.560 --> 01:54:13.400
rüber als Root. Das heißt die haben auf jeden Fall dort irgendwas eingebaut. Das wenn

01:54:13.400 --> 01:54:17.720
ich den Heimatverzeichnis rein sync das ist das standardmäßig als der User macht. Vermute

01:54:17.720 --> 01:54:23.840
ich jetzt einfach mal. Das ist ziemlich. Ansible braucht nur Python auf dem Remote System.

01:54:23.840 --> 01:54:32.320
Das ist das ist das ist ziemlich ziemlich feifert. So. Das war es jetzt. Das ist wirklich

01:54:32.320 --> 01:54:35.960
einfach. Guck mal wenn ich jetzt deployen will. Lass ich einfach eine neue Version

01:54:35.960 --> 01:54:40.000
bauen. Und lass es auf den Server schieben. Und das kopieren geht auch schnell. Weil es

01:54:40.000 --> 01:54:47.280
R-Sync ist. R-Sync macht ja nur den diff. Mal kurz gucken ob das. Mal kurz gucken ob

01:54:47.280 --> 01:54:53.280
das. Mit dem Delete auch funktioniert. Er sollte jetzt eigentlich 1 2 3 4 die Datei

01:54:53.280 --> 01:54:59.760
löschen. Weil ich sage ja hier sync die Quelle mit dem Ziel und lösche beim Ziel alle Dateien

01:54:59.760 --> 01:55:13.600
die nicht in der Quelle vorhanden sind. Mal schauen. Ja funktioniert. Pog easy. Wie Anwendung

01:55:13.600 --> 01:55:18.600
durchgehend laufen lassen. Ja jetzt kommt jetzt kommt der Feifert Teil. Aktuell müssten

01:55:18.600 --> 01:55:23.640
wir die Anwendung ja noch von Hand immer starten. Also ich müsste jetzt immer sowas machen.

01:55:23.640 --> 01:55:34.360
Wir machen jetzt ein Systemd Service draus. Da muss ich aber nachgucken. Asp net core

01:55:34.360 --> 01:55:39.680
Systemd. Guck mal hatten wir sogar schon mal offen. Ich brauche ich brauche ein Beispiel

01:55:39.680 --> 01:55:47.120
unit unit file. Sowas hier. Ja genau. Ok. Und das kopieren wir da natürlich auch per

01:55:47.120 --> 01:55:51.440
Ansible drauf. Also ihr seht schon der Vorteil davon ist wenn ich jetzt neue Services oder

01:55:51.440 --> 01:55:58.000
neue App Server brauche dazu. Stellt euch mal vor. Keg WSService wird das nächste Multimillionen

01:55:58.000 --> 01:56:07.320
Startup. Und ich hab von 5 Usern heute zu 5000 Usern morgen. 50.000 User in einer Woche

01:56:07.320 --> 01:56:14.840
und 500.000 User in einem Monat. Da muss ich ja skalieren. Horizontal vertikal diagonal

01:56:14.840 --> 01:56:19.960
da muss skaliert werden. Vorher gehe ich mit KLS noch auf den Mount Everest da sich Bescheid

01:56:19.960 --> 01:56:25.680
weiß wie man ordentlich skaliert. So und dafür ist es natürlich wunderbar. Da kann ich easy

01:56:25.680 --> 01:56:31.760
jetzt ohne Containerstellen oder sonst wie. Da kommen wir im dritten Stream zu. Einfach

01:56:31.760 --> 01:56:38.800
ganz viele Server hochziehen und einen Loadbalancer davor stellen. Das ist eigentlich eine richtig

01:56:38.800 --> 01:56:49.680
coole Sache. Ok wir müssen unit file machen. Jetzt wird es kompliziert. Moment was habe

01:56:49.680 --> 01:57:02.200
ich denn da gemacht. Jetzt jetzt jetzt wird es Sixhead. Name. Wie machen wir das jetzt

01:57:02.200 --> 01:57:18.640
mit unit file. Name. Create. Keg WSService. Unit file. Boah das weiß ich nicht. Ansible.

01:57:18.640 --> 01:57:29.520
Inline content file. Line file block file. Is it possible to include file content in

01:57:29.520 --> 01:57:40.460
the playbook. Genau. Copy. Ja genau. Genau sowas will ich machen. Also. Das heißt ich

01:57:40.460 --> 01:57:53.000
sag jetzt. Copy. Richtig. Content. Wir machen erstmal die destination. Dest. Wo müssen

01:57:53.000 --> 01:58:04.800
unit files hin. Etc. System D glaube. Where put custom unit files. Ich sag euch leute wie

01:58:04.800 --> 01:58:09.000
im letzten. Googeln ist der wichtigste Skill überhaupt. Ihr müsst wissen wie ihr danach

01:58:09.000 --> 01:58:22.160
sucht. I have a custom. Unit file. User lib system D. Was. Nein. Es muss etc sein. Hier.

01:58:22.160 --> 01:58:32.440
Place to put system unit files. Etc. System D. System. Alles klar. Also. Etc. System D.

01:58:32.440 --> 01:58:41.640
System. Bäm. Da sind sie alle. Wobei da wird das eigentlich nur verlinkt. Scheiß drauf

01:58:41.640 --> 01:58:46.720
damals machen wir das hin. Was wird das nächste Video sein. Wahrscheinlich Battlefield. Etc

01:58:46.720 --> 01:58:54.440
System D. System. Und jetzt muss ich das Ding. Irgendwie. Irgendwie benennen. Irgendwie

01:58:54.440 --> 01:59:01.480
Punkt Service oder so. Ok. Punkt Service. Also. Das heißt das Ding heißt jetzt. Pack

01:59:01.480 --> 01:59:13.440
W. Es. Service. Punkt Service. Und jetzt Content. So. Multiline Content. Ich hab vergessen

01:59:13.440 --> 01:59:22.600
was es war. Tilde. Nee. Pipe. Content. Pipe. Und jetzt einfach so. Ob das funktioniert

01:59:22.600 --> 01:59:26.800
da hab ich da so meine Zweifel. Das funktioniert doch im Leben nicht. Das kommt doch im Leben

01:59:26.800 --> 01:59:38.080
so nicht auf dem Server an. Garantiert nicht. Ok. Schauen wir mal. Also. Description. Description

01:59:38.080 --> 01:59:47.120
ist natürlich was sonst. Pack W. Es. Service. Working Directory. Es. Home. App. Pack W.

01:59:47.120 --> 01:59:56.880
Es. Service. X6 Start. Es. Home. Die Namen wissen. Es. Home. Pack W. Es. Service. Pack

01:59:56.880 --> 02:00:06.640
W. Es. Service. Minus. Minus. Wurls. HTTP. Doppelpunkt 80. Der soll ja am Interface

02:00:06.640 --> 02:00:11.840
lauschen dass alle drauf zugreifen können. Restart Always ist ok. Restart Sack ist auch

02:00:11.840 --> 02:00:18.160
ok. Kill Signal Int. Ach was weiß ich. Syslog wie das im Log auftauchen soll. Pack W.

02:00:18.160 --> 02:00:27.360
Es. Service natürlich. User ist App. Environment. Production. Das lass ich einfach mal so stehen.

02:00:27.360 --> 02:00:43.600
Ok. Mal gucken ob das funktioniert. Mal gucken. Ich führs mal aus. Wir brauchen noch ein Reload.

02:00:43.600 --> 02:00:51.040
Wir brauchen noch ein Reload von Unit Files. Egal. Ich führ jetzt erstmal aus und gucke

02:00:51.040 --> 02:00:58.480
ob es funktioniert. Oh. Nein. Sündagsfehler. But why. Muss ich jetzt eins weiter einrücken.

02:00:58.480 --> 02:01:15.120
Ah. Yes. Outplayed. Ok. Das hat jetzt. Meint ihr das? Ok. Etc. Systemd. System. Und jetzt

02:01:15.120 --> 02:01:24.400
haben wir ein Kek. W. Es. Service. Service. Kek. W. Es. Service. Punkt. Service. Service

02:01:24.400 --> 02:01:33.840
File haben wir jetzt. Alles klar. Exquisite. So das ist natürlich die Frage ob das funktioniert.

02:01:33.840 --> 02:01:44.720
System. CTL. Status. Kek. W. Es. Service. Oh. Oh. Oh. Der erkennt es. Pass mal auf. Pass

02:01:44.720 --> 02:01:54.480
mal auf. Start. Wat. Root. Ach so. Ja natürlich. Das muss man als Root machen. Ist ja logisch.

02:01:54.480 --> 02:02:06.640
Ja klar. Ähm. Oh mein sag bloß das funktioniert. Das kann nicht funktionieren Start. Nee. Code.

02:02:06.640 --> 02:02:34.520
Oh. Wait a minute. Ich bin verwirrt. Start. Ok ich hab's. Killed. Was habe ich falsch

02:02:34.520 --> 02:02:48.120
gemacht? Warum mag er nicht? Disabled. Ok. Läuft er vielleicht noch? Ok. Journal. CTL

02:02:48.120 --> 02:02:56.240
minus Xe. Kek. W. Es. Service. Failed. With Result. Signal. Alles klar. Jetzt weiß ich

02:02:56.240 --> 02:03:10.360
ja sofort Bescheid. Äh. Warum? Warum? Warum? Warum failed das? Zeig mal her. Ordner stimmt

02:03:10.360 --> 02:03:16.160
doch. Kek. W. Es. Service. Home. App. Kek. W. Es. Service. Das ist eine Nähdungsform.

02:03:16.160 --> 02:03:20.720
Das ist ein Server bei Hetzner. In der Cloud. So und jetzt mach ich folgendes. Kek. W.

02:03:20.720 --> 02:03:35.600
Es. Service. Pools. Ah. Ich mach irgendwas falsch. Mission Denied. Ach das geht auf

02:03:35.600 --> 02:03:46.640
Port 80 ja nicht. Ich bin ja kein Root. Äh. Gibt's die Möglichkeit sich zu binden und

02:03:46.640 --> 02:03:54.240
dann die Privilege zu droppen irgendwie? Ne wahrscheinlich nicht. Ok da muss ich mir

02:03:54.240 --> 02:03:57.480
jetzt was anderes ausdenken. Wir machen jetzt Port 5000 und gucken ob's dann funktioniert.

02:03:57.480 --> 02:04:25.280
Status. Start. Ah. Start. Oh. Ich muss reloaden sagt er. Äh. Jaja. Start. Start. Start.

02:04:25.280 --> 02:04:45.160
Ah. Jetzt läuft's. Jetzt läuft's. Netstat. 5000. Ja. Jetzt funktioniert's. Da muss ich

02:04:45.160 --> 02:04:51.320
in die Firewall. Da muss ich in die Firewall und mal Port 5000 freigeben. Firewall TCP

02:04:51.320 --> 02:05:00.640
Port 5000. Und jetzt können wir auch ausprobieren ob's funktioniert. Kek. W. Es. Service. Bäm.

02:05:00.640 --> 02:05:06.000
5000. Zack. Das ist sogar ist mir ehrlich gesagt so lieber. Ich will's später auf Localhost

02:05:06.000 --> 02:05:10.400
laufen lassen. Mit einem Reverse Proxy für Zertifikate davor und sowas. Ok funktioniert.

02:05:10.400 --> 02:05:21.840
Nice. Äh. Ambient Capabilities Cap Net Bin Service. Oh hier kommt der. Der Big Brain.

02:05:21.840 --> 02:05:39.720
Äh. Das ist äh. Das ist zum D. Ah. Ja nice. Nice. Das wird's wahrscheinlich sein. Weil

02:05:39.720 --> 02:05:46.520
dann macht er das als Root mit dem Binden und danach droppt er Privileges. Mal schauen

02:05:46.520 --> 02:05:53.600
ob das so funktioniert jetzt. Reload. Ach so. Ah. Dann muss ich das nochmal deployen.

02:05:53.600 --> 02:06:01.000
Reload. Gucken ob das jetzt funktioniert. Wenn man jetzt anfängt die Pläume zu nehmen

02:06:01.000 --> 02:06:04.720
einfach Docker anschauen. Komm drauf an was du machen willst. Da gibt's. Es gibt erstmal

02:06:04.720 --> 02:06:10.440
nix prinzipiell wo man sagen muss. Ähm. Ist ist immer überlegen. Aber Docker zu kennen

02:06:10.440 --> 02:06:17.840
ist ganz. Gut. Heutzutage. Ja. Erstens hilft dir beim entwickeln und zweitens wenn du später

02:06:17.840 --> 02:06:22.320
im Server Bereich bisschen Containergekrams. Äh. Gedöns machen willst. Dann sind so die

02:06:22.320 --> 02:06:26.280
Docker Basics nicht schlecht. Es muss einem halt klar sein unter der Haube ist das alles

02:06:26.280 --> 02:06:32.960
das gleiche. Ja. Egal ob. Also ich rede jetzt vom reinen Containeranteil. Egal ob Spotman,

02:06:32.960 --> 02:06:38.200
Kubernetes, Docker. Was auch immer ist. Die verwenden alle die gleichen Sachen für Container

02:06:38.200 --> 02:06:43.520
im Kernel. Das User Interface ist anders und natürlich das gesamte Ökosystem und das

02:06:43.520 --> 02:06:48.560
das das Skalieren und und die Orchestration Geschichten. Das ist natürlich komplett anders.

02:06:48.560 --> 02:06:53.000
Aber die eigentliche Sache die die Kernel Funktionen. Das ist alles das gleiche. Egal

02:06:53.000 --> 02:06:58.040
was man verwendet. Das heißt man muss immer sehen sei es Docker, Potman, Kubernetes oder

02:06:58.040 --> 02:07:04.960
ein selbst selbst gebasteltes Programm verwenden alle den gleichen Kram unter der Haube. Ok

02:07:04.960 --> 02:07:13.240
jetzt machen wir mal System Status Restart. Status. Ob das jetzt funktioniert mit dem

02:07:13.240 --> 02:07:34.200
Port. Nee. 5000. Stopp. Reload. Ach ich hab ja da immer noch 5000 drinstehen ich Kacknup.

02:07:34.200 --> 02:07:49.920
Meine Güte. Nix. Nix kann man machen lassen. Reload. Und jetzt Start. Restart mein Fing.

02:07:49.920 --> 02:08:00.200
Status. Plus. Bam. Nice. Jetzt gehts auf Port 80. Siehste wieder was gelernt. Der System

02:08:00.200 --> 02:08:05.280
D Boss war am Start. Können wir wieder wieder Port 5000 aus der Firewall rausschmeißen.

02:08:05.280 --> 02:08:15.720
Nice. Siehste wieder was gelernt. Man kann reinschreiben Ambient Capabilities Capnet Bind

02:08:15.720 --> 02:08:21.480
Service. Alles klar. Excellent. System D ist ja schon noch so ein bisschen holprig.

02:08:21.480 --> 02:08:34.240
Kann man den Port als Variabel in der Ansible-Config angeben? Könntest du machen ja. Könntest

02:08:34.240 --> 02:08:41.600
du machen. Letztendlich will ich das später eh nicht so haben sondern es soll Localhost

02:08:41.600 --> 02:08:46.200
lauschen mit einem Reverseproxy davor. Aber für jetzt ist das erstmal ok. Ok jetzt fehlen

02:08:46.200 --> 02:08:51.920
uns noch ein paar Kleinigkeiten dass das gut funktioniert. Als erstes würde ich sagen

02:08:51.920 --> 02:09:02.360
wir müssen noch in unserem. Ja das können wir so lassen. In unserem Deployed Shop sollten

02:09:02.360 --> 02:09:12.840
wir noch einbauen Service stoppen und starten. Service. Ja. Also Kack W ist das Service stoppen

02:09:12.840 --> 02:09:22.840
und starten. Heißt von der Idee her wird deployen eine neue Version und danach sagen wir stopp.

02:09:22.840 --> 02:09:38.320
Kack W ist das Service. Kack W ist das Service stopp. Stoppt muss es sein. Stoppt. Dann sagen

02:09:38.320 --> 02:09:46.640
wir noch Enabled. Yes das ist beim Start automatisch hoch fährt. Enabled Yes und Reload wie auch

02:09:46.640 --> 02:09:51.920
immer das geht. Ansible Service. Weil es könnte ja sein dass wir ein neues Unit-File

02:09:51.920 --> 02:10:16.720
deployet haben. Reload. Reload. Wie Demon. Demon Reload. Ne. Demon Reload. Ne ne nicht

02:10:16.720 --> 02:10:25.760
Reload ich will die Unit-Files selber Reload. Reload. Reload. Ah hier. Ah ok jetzt kann ich

02:10:25.760 --> 02:10:33.400
es nicht mit dem Service Rapper machen ich muss jetzt direkt sagen System D. Ok verstehe.

02:10:33.400 --> 02:10:47.560
Also stopp Kack W ist das Service. Name Kack W ist das Service. State. Stoppt. Stoppt.

02:10:47.560 --> 02:10:54.160
Und jetzt muss ich sagen Reload. Demon Reload. Reload. Yes dass der auch die neuen Unit-Files

02:10:54.160 --> 02:11:06.520
einliest. So und danach das ganze starten. Start. Start Kack W ist das Service. Einmal

02:11:06.520 --> 02:11:13.320
Enable and Start. Weil wir machen hier Enabled gleich Yes. Falls das geht dass das automatisch

02:11:13.320 --> 02:11:22.600
neu startet beim Reboot. Gut. So. State. Started. Gut von der Idee her da sollt ihr

02:11:22.600 --> 02:11:31.760
jetzt eine neue Version deployen. Stoppen und starten. Das ergibt Sinn. Mal gucken ob

02:11:31.760 --> 02:11:41.560
das auch funktioniert. Deploy. Bam. Ich mache erstmal einen Stop. Jetzt hier einen Status.

02:11:41.560 --> 02:11:49.200
Ah das ist aus. Enable Kack W ist das Service. Und jetzt Leute das funktioniert. Das ist

02:11:49.200 --> 02:11:53.560
ja geil. Guck mal da also viel einfacher kann es jetzt ja nicht mehr gehen. Jetzt kann

02:11:53.560 --> 02:11:59.760
ich mal den ganzen Krempel hier wieder einkommentieren. Den wir zwar nur einmalig brauchen aber sei

02:11:59.760 --> 02:12:07.520
es drum. Jetzt habe ich mit einem Kommando den kompletten Server auf den aktuellen Stand

02:12:07.520 --> 02:12:14.160
gebracht. Ne ich könnte nicht reloaden weil ich will ja explizit hier oder ich weiß nicht

02:12:14.160 --> 02:12:20.320
ob das geht. Checkt ihr das mit demen Reload auch wenn ich hier restartet oder so mache.

02:12:20.320 --> 02:12:47.480
Müssen wir mal ausprobieren. Bam. Ah sehr nice sehr nice. Ok. Build jetzt baut er lokal

02:12:47.480 --> 02:12:57.120
die App. Er stoppt den Service. Ok. Restart. Restart. Restart. Oh mal Restart. Das heißt

02:12:57.120 --> 02:13:02.560
wenn ich jetzt Status mache dann ist der Kram auch ab seit 7 Sekunden. Das funktioniert.

02:13:02.560 --> 02:13:14.120
Nice. So also 60. 5. Kack W erstes Service ist wieder da Leute. Euer Lieblings Start

02:13:14.120 --> 02:13:26.240
Up ist wieder verfügbar. Ja wunderbar. Da haben wir doch richtig richtig was gemacht

02:13:26.240 --> 02:13:31.000
jetzt schon cooles. So und das richtig nice daran ist jetzt ich könnte einfach einen

02:13:31.000 --> 02:13:35.600
zweiten Server machen und sagen bau mir den Server so auf und dann funktioniert einfach.

02:13:35.600 --> 02:13:44.320
Richtig nice oder? Ja ich ich gehe einfach von aus das Unit File wird sich reloaden.

02:13:44.320 --> 02:13:56.840
Das ist äußerst nice. Ok. Lass mal kurz überlegen. Müssen wir noch irgendwas machen? Server

02:13:56.840 --> 02:14:01.360
erstellen haben wir gemacht. Ansible Kram haben wir auch. Ja gut wir müssen mal testen

02:14:01.360 --> 02:14:05.600
ob es überhaupt noch funktioniert. Wir müssen wir müssen mal testen ob es überhaupt noch

02:14:05.600 --> 02:14:11.280
funktioniert. Ich mache jetzt mal eine Änderung. Ja ja ich truste alles hier Bam. Alles wird

02:14:11.280 --> 02:14:17.080
getrusted. So wir machen jetzt mal eine Änderung und deployen die. Das schauen wir mal ob das

02:14:17.080 --> 02:14:21.600
wie gut das funktioniert. Wie kann ich denn jetzt eine Änderung machen die möglichst

02:14:21.600 --> 02:14:28.840
offensichtlich ist. Ok. Ich returne nicht File. Ich returne. Ok. Also anstatt einem Bild bekommt

02:14:28.840 --> 02:14:35.600
ich jetzt einen Text wo keqw drinne steht. Soweit von der Idee her. So und ich muss nichts

02:14:35.600 --> 02:14:41.520
anderes machen außer den Source Code ändern. Lokal ausprobieren habe ich schon gemacht.

02:14:41.520 --> 02:14:45.400
Gehe einfach mal von aus das es geht. Und jetzt führe ich meine Ansible Geschichte aus

02:14:45.400 --> 02:14:52.200
und er sollte komplett bilden deployen hinschieben restarten. Gucken wir mal. Noch ist es das

02:14:52.200 --> 02:15:01.560
alte. Install Packages ja ja bla bla bla. Das könnte man ja auch rausnehmen. Oh. Create

02:15:01.560 --> 02:15:07.160
Service File. Ok Bild. Jetzt baut er die neue App. Copy App. Copy App geht schnell

02:15:07.160 --> 02:15:15.200
weil er Sync. Commit. Ja Commit mache ich gleich. So und jetzt. Easy Leute. Also einfaches

02:15:15.200 --> 02:15:22.120
Update Bild und deploy kannst du nur wirklich nicht machen. Zack und jetzt das ganze wieder

02:15:22.120 --> 02:15:31.560
rückgängig. Rückgängig. Mist falsche Version. Neue deployen. Gut diesen Mist könnte man

02:15:31.560 --> 02:15:35.800
echt noch raus machen dass man einfach nur sagt One Time wenn der Server neu ist oder

02:15:35.800 --> 02:15:46.920
sowas. Kann man. Kennt sich jemand mit Ansible aus könnte ich sagen nur. Nur einmalig oder

02:15:46.920 --> 02:15:54.000
sowas gibt sowas. One One Time oder. Weil diesen Mist kann er sich ersparen im Endeffekt

02:15:54.000 --> 02:16:01.160
der anderen Seite viel. Lange dauert das ja auch nicht. So und jetzt hat er neu gestartet

02:16:01.160 --> 02:16:06.040
schon. Jetzt haben wir wieder Bilder. Ist das nicht nice. Also also also einfacher geht

02:16:06.040 --> 02:16:11.680
das mit Bild deploy wirklich jetzt nicht. Außer vielleicht man hat schon einen fertigen

02:16:11.680 --> 02:16:19.200
irgendwie Container Cluster wo man einfach direkt geht Push machen kann. Das ist cool.

02:16:19.200 --> 02:16:23.280
Ok jetzt machen wir nochmal ein Commit. Dass ihr euch das alle angucken könnt. Im Shit

02:16:23.280 --> 02:16:31.040
Hub. Äh ne ich will kein Hetznergedöns hier einbauen weil ich will ja nicht bei jedem

02:16:31.040 --> 02:16:46.720
ausführenden neuen Server anlegen. Widerspricht dem Grundgedanken von Ansible was? Warum hast

02:16:46.720 --> 02:16:51.920
du die Systemdion nicht als Einzeldatei kopierend wird? Äh dass ich alles in einer Datei stehen

02:16:51.920 --> 02:17:01.400
hab. Mach das updaten doch mit Cron. Naja ne will ich nicht. Weil ich will ja wenn ich

02:17:01.400 --> 02:17:12.320
den Server neu aufbaue jetzt instant erst mal updaten. Ach so meinst du äh Michi dankeschön

02:17:12.320 --> 02:17:19.640
für den Zapp. Du meinst dass man äh was Disabled widerspricht dem mit dem Gedanken. Weiß nicht

02:17:19.640 --> 02:17:27.480
sagst du. So also erstmal ein Shit Commit. So und da brauchen wir jetzt erstmal noch

02:17:27.480 --> 02:17:37.000
ein Git Ignore File. Git Ignore. Git Ignore. So und da soll rein meine ganzen Binaries

02:17:37.000 --> 02:17:50.960
weil die will ich garantiert nicht nicht auf auf Shit Hub packen. So. Object Bin. Noch

02:17:50.960 --> 02:18:04.720
irgendwas. Ne. Passt. Oh hab ich das jetzt richtig gemacht. Shit Shit Ignore. So Git

02:18:04.720 --> 02:18:18.880
Ignore ist am Start. So passt mehr brauchen wir nicht. Git Status Git Add minus A. So

02:18:18.880 --> 02:18:27.560
und jetzt sind wir mal nett. Wir äh wir schmeißen dieses komische Commit hier weg. Git Commit

02:18:27.560 --> 02:18:39.440
minus A minus Amendt und sagen nicht LULW sondern äh Ansible ist POC U. Ich hab auch

02:18:39.440 --> 02:18:44.640
die ganzen Bilder eingecheckt LUL. Ja gut warum nicht die braucht man ja dafür. Also Server

02:18:44.640 --> 02:18:48.880
Name. Hab ich irgendwelche haben ich irgendwelche geheimen Secrets Committed. Lass mich mal

02:18:48.880 --> 02:18:53.920
kurz checken. Aber ich glaube nicht ich wüsste nicht wo es da was gibt. So die ganzen Bilder

02:18:53.920 --> 02:18:58.760
Index das könnt ich noch löschen. Upsettings Startup Launch Settings. Ne passt passt passt

02:18:58.760 --> 02:19:13.280
passt. Ok Git Status. Alles klar. Äh Git. Push. Push. Force Bam. So Shit Hub wird geupdatet.

02:19:13.280 --> 02:19:30.520
Git Hub Wubblurts. Ne. Keck W as a Service. Also jeder der schon immer mal sein eigenes

02:19:30.520 --> 02:19:40.280
Keck W as a Service laufen lassen wollte kann das jetzt machen. Weil der einzige Source

02:19:40.280 --> 02:19:44.720
der Nennenswert irgendwie was drinne steht ist ja die Datei alles andere ist ja Default.

02:19:44.720 --> 02:19:59.640
Es ist ja wirklich die einfachste Web Anwendung aller Zeiten die es hier irgendwie gibt. Ja

02:19:59.640 --> 02:20:04.920
das ist das ist nice. So und wisst ihr wisst ihr was wirklich richtig richtig cool da dran

02:20:04.920 --> 02:20:10.720
ist. Ich zeig ich zeig das jetzt noch mal in Action. Weil ich glaube man hat es immer

02:20:10.720 --> 02:20:14.640
noch nicht so genau verstanden was der Vorteil davon jetzt ist gegenüber Hand das von der

02:20:14.640 --> 02:20:19.200
Hand zu machen. Stellt euch mal vor ich mache noch einen zweiten Server. Ich leg jetzt noch

02:20:19.200 --> 02:20:29.280
einen zweiten Server an hier. Keck W as a Service NG. Leg einen zweiten Server an. Weil

02:20:29.280 --> 02:20:34.880
Keck W as a Service ist einfach so krass beliebt dass ich mit einem Server komme ich nicht

02:20:34.880 --> 02:20:39.840
hinterher. Der ist zu ausgelassen. Ich brauche ich brauche noch einen zweiten Server. So

02:20:39.840 --> 02:20:50.880
zweiten Server angelegt. Ansible ausführen. Ansible ausführen auf den zweiten Server.

02:20:50.880 --> 02:20:57.040
Warten bis durch läuft und danach einfach auf den zweiten Server Keck W as a Service aufrufen

02:20:57.040 --> 02:21:04.800
der was es noch nicht gibt weil es noch nicht fertig ist. Run once. Oh das ist cool. Manche

02:21:04.800 --> 02:21:16.080
Sachen will ich wirklich nur einmal machen. Ach ne ne ne das geht wenn es verschiedene

02:21:16.080 --> 02:21:31.280
Hosts sind das ist was anderes. Ist bei der Serveranlage Python direkt drauf? Ja. Firewall

02:21:31.280 --> 02:21:35.040
soll ich nicht vergessen. Brauche ich nicht. Weil standardmäßig ist ja keine Firewall

02:21:35.040 --> 02:21:46.120
davor. Muss ich nichts anpassen. So neuer Server der geht jetzt da drauf macht Package Updates

02:21:46.120 --> 02:21:51.600
und danach bildet er und deployt er die App. Mal gucken jetzt sehen wir auch ob es auf

02:21:51.600 --> 02:21:57.360
dem neuen Server reibungslos funktioniert. Auf was für einem Server deploysst du das

02:21:57.360 --> 02:22:04.640
mach mal Ausrufezeichen Hetzner im Chat. Ich deploy das bei Hetzner in die Cloud. Wo es

02:22:04.640 --> 02:22:11.960
relativ günstig schon virtuelle Linux Kisten gibt. Ganze geht los bei 3 Euro. Ihr könnt

02:22:11.960 --> 02:22:16.440
euch übrigens jetzt auch 20 Euro Startguthaben sichern wenn ihr den Link hier im Chat verwendet.

02:22:16.440 --> 02:22:22.320
Mit meinem Code kann man bis Ende des Jahres glaube ich einlösen. Und da könnt ihr euch

02:22:22.320 --> 02:22:33.680
selbst ein bisschen austoben. So ok Copy App macht er jetzt. Ja die kleinen Server werden

02:22:33.680 --> 02:22:40.320
mit IPv4 bald ein ticken teurer weil es immer knapper wird. So Copy App das dauert jetzt

02:22:40.320 --> 02:22:44.760
ein bisschen länger weil er irgendwie 100 MB erstmal hoch kopieren muss. So Restarting

02:22:44.760 --> 02:22:52.440
KEC WSS Service. Ok jetzt kommt der Moment der Wahrheit. Bäm Leute 2. Server up and

02:22:52.440 --> 02:22:57.600
running. Wir mussten nix machen. Wir mussten nix machen. Guck schon haben wir 2 KEC WSS

02:22:57.600 --> 02:23:04.840
Services am Start. Ist das nicht nice? Das kann nur noch getoppt werden von irgendeinem

02:23:04.840 --> 02:23:11.080
kontainerisierten Deployment mit Loadbalancer davor. Guck mal jetzt haben wir doppelt KEC

02:23:11.080 --> 02:23:20.560
WSS Service. Das ist dann quasi KEC QWSS Service. Ne Engine X und Loadbalancer davor

02:23:20.560 --> 02:23:25.120
machen wir das nächste Mal. Das machen wir heute nicht mehr. Ich finde das richtig nice.

02:23:25.120 --> 02:23:33.040
Ich finde das richtig nice ey. Guck hier neuen Server erstellen. Zack hier die IP reinhauen

02:23:33.040 --> 02:23:38.480
bald ist ein neuer Service da. Also viel schneller besser kann das gar nicht mehr funktionieren.

02:23:38.480 --> 02:23:44.680
Kokieren neue Server erstellt. Bäm IP rein kopieren. Playbook ausführen. Ok ich war

02:23:44.680 --> 02:23:54.160
zu schnell der Server ist noch nicht oben. Also viel einfacher und besser geht das jetzt

02:23:54.160 --> 02:24:12.440
nicht mehr. Genau das machen wir also in Stream Nummer 3 machen wir ein bisschen Containerstells.

02:24:12.440 --> 02:24:15.920
Ich bin mir nicht sicher ob wir da wirklich irgendwelchen Kubernetes Kram machen. Da bin

02:24:15.920 --> 02:24:19.480
ich jetzt nämlich auch nicht der absolute Pro drinnen. Ich meine ich kann Sachen da

02:24:19.480 --> 02:24:25.920
deployen stoppen starten und was auch immer. Aber so der Wahnsinnskenner bin ich da jetzt

02:24:25.920 --> 02:24:38.520
auch nicht. So eine Wissenschaft für sich. So install Packages. Hey swarm ist deprecated.

02:24:38.520 --> 02:25:01.080
Auch wenn der Hersteller sagt es ist nicht deprecated. So gleich ist es durch. Ich meine

02:25:01.080 --> 02:25:07.800
guck mal wir haben jetzt innerhalb von 2 Minuten 2 Server hingestellt. Mit lauffähiger Anwendung

02:25:07.800 --> 02:25:15.440
drauf. Also so kann man das schon ordentlich skalieren auch ohne Containerkram. So guckt

02:25:15.440 --> 02:25:24.680
Bäm Port 80 zack schon haben wir 3 Server. Keqv SSService. Und das tolle an Keqv SSService

02:25:24.680 --> 02:25:29.160
deswegen solltet ihr euch jetzt schon mal ein paar Aktienpakete sichern ist dass es

02:25:29.160 --> 02:25:40.360
komplett stateless voneinander horizontal vertikal und diagonal skaliert. Habt ihr gesehen

02:25:40.360 --> 02:25:56.840
wir haben den Keqv getroffen der der richtig richtig rotiert war. Ist es nicht nice. Doch

02:25:56.840 --> 02:26:02.960
das gefällt mir richtig gut. So bei der Gelegenheit jetzt noch mal kurz Server löschen. Das ist

02:26:02.960 --> 02:26:06.880
übrigens auch das coole ich kann die Server jetzt löschen dann kosten sie mich nichts

02:26:06.880 --> 02:26:13.320
mehr und wenn ich sie wieder brauche innerhalb von 2 Minuten neu aufbauen. Moment Leute eins

02:26:13.320 --> 02:26:16.920
ich probiere ich probiere jetzt mal was aus ich will das noch mal ganz ich will das noch

02:26:16.920 --> 02:26:20.760
mal schnell verskripten das dauert nur 2 3 Minuten glaubt das natürlich ich lösche

02:26:20.760 --> 02:26:31.480
den ganzen Krempel jetzt mal wieder. Keqv SSService ich mach jetzt ich mach jetzt. Äh äh die

02:26:31.480 --> 02:26:36.760
Kuppanete slide ne stimmt ja nicht. Das hatte mit Containern nichts zu tun aber ich könnte

02:26:36.760 --> 02:26:46.800
doch guckt mal ich leg den neuen Server an dann krieg ich am Ende da raus IPv4. So Moment

02:26:46.800 --> 02:26:51.360
Moment Moment Moment Moment jetzt jetzt 5 hat Maut richtiger 5 hat Maut das das muss

02:26:51.360 --> 02:26:58.920
ich jetzt ausbrennen. Wir nehmen einfach die letzte Zeile wie ging letzte Zeile tail minus

02:26:58.920 --> 02:27:12.440
n 1 das muss ich jetzt mal ausprobieren. Echo minus e 1 2 tail minus n 1 jawoll tail

02:27:12.440 --> 02:27:22.680
minus n 1 hat an an doppel an an punkt fällt 2 ok das muss ich jetzt mal ausprobieren ob

02:27:22.680 --> 02:27:32.120
das funktioniert jetzt jetzt kommt massive massive 5 hat mal gucken ob das funktioniert

02:27:32.120 --> 02:27:39.840
ok ok wobei ich machs glaube ich besser am Leerzeichen ach so ah ja ja ja ich lösche

02:27:39.840 --> 02:27:47.560
es ist ja gut ich lösche es ja schon wieder ich lösche es. So das muss ich jetzt das

02:27:47.560 --> 02:27:51.720
muss ich jetzt ausprobieren dann scaleen wir das jetzt auf 10 Stück hoch einfach einfach

02:27:51.720 --> 02:28:00.240
weil es geht ok wunderbar so jetzt muss ich noch den Namen ändern wieder löschen zack

02:28:00.240 --> 02:28:13.680
ok also 4 in 0 bis 10 ich glaube so viel darf ich gar nicht anlegen ich bin mir gar nicht

02:28:13.680 --> 02:28:17.840
sicher wie viel ich in einem Projekt anlegen darf machen wir mal machen wir mal 4 machen

02:28:17.840 --> 02:28:31.760
wir mal 4 ne ich bekomme keine mails weil ich keys verwende so keck w ss service hier

02:28:31.760 --> 02:28:37.400
done so jetzt lege ich server an und jetzt will ich danach das bei ansible über ansible

02:28:37.400 --> 02:28:49.120
ausführen also sagen wir jetzt du habe ich vergessen ansible hier ansible playbook ansible

02:28:49.120 --> 02:28:59.240
playbook warte mal warte mal ansible playbook hier hier kommt die ip rein also das das da

02:28:59.240 --> 02:29:12.440
hier rein so 6 hat time leute ob das jetzt funktioniert so wenn das jetzt stimmt was

02:29:12.440 --> 02:29:17.800
ich da gemacht habe dann sleep ja dann sleep sollten wir machen weil der server sonst nicht

02:29:17.800 --> 02:29:31.880
hochgefahren ist das stimmt wo mache ich den sleep rein ah 4 in das mit dem sleep funktioniert

02:29:31.880 --> 02:29:36.440
jetzt nicht richtig ok moment moment kommando zurück wir machen das anders wir schreiben

02:29:36.440 --> 02:29:54.880
das in eine variable rein ip gleich so machen wir das ip gleich sleep 1 oder sleep 5 ip ausgeben

02:29:54.880 --> 02:30:00.520
und jetzt kommt der ansible stels ob das jetzt funktioniert leute was ich da zusammen gewürstet

02:30:00.520 --> 02:30:08.240
habe das habe ich das habe ich früher täglich gemacht so so bash geschichten hier dollar

02:30:08.240 --> 02:30:20.440
ip so ja ergibt das sinn was ich da programmiert habe also 0 bis 3 so ip hetzer cloud anlegen

02:30:20.440 --> 02:30:32.640
service benennen mit dem aktuellen schleifendurchlauf du hast das i vergesst ah vor i in tail cut

02:30:32.640 --> 02:30:37.880
echo ip sleep 5 und anders playbook laufen also ok von der idee her sollten wir jetzt

02:30:37.880 --> 02:30:57.200
gleich vier kqs service am start haben

02:30:57.200 --> 02:31:13.120
ah du schauen wir mal das könnte man übrigens parallel machen lassen

02:31:13.120 --> 02:31:24.080
der desktop ist i3 ja also halt ohne ohne desktop oh ne ich glaube ich glaube mein sleep reicht

02:31:24.080 --> 02:31:31.960
noch nicht mein sleep ist zu kurz mein sleep ist zu kurz mist abbruch abbruch kommando

02:31:31.960 --> 02:31:36.520
zurück die kisten sind noch nicht aufgebaut sleep ist zu kurz wir machen das parallel

02:31:36.520 --> 02:31:41.080
pass mal auf wir können das noch wir können das aus 6 hat können wir können wir 7 hats

02:31:41.080 --> 02:31:55.440
skript machen alter ist gut ich will löschen wir machen das jetzt parallel ok sleep sleep

02:31:55.440 --> 02:32:04.040
10 das reicht jetzt aber 15 wie kriege ich das jetzt im hintergrund wie oh fuck das weiß

02:32:04.040 --> 02:32:08.200
ich kann ich einfach an der stelle und und dran machen bringt das was ne das ist ansible

02:32:08.200 --> 02:32:22.440
an der stelle äh wie kriege ich denn das jetzt irgendwie mit mit mit mit klammern das

02:32:22.440 --> 02:32:32.520
muss ich jetzt mal testen vor i in testweise 0 bis 3 3 3 ne das ne einfach und geht nicht

02:32:32.520 --> 02:32:48.520
echo 1 dann ok ich will sleep ich will sagen sleep 2 echo 1 so 1 2 bam so und jetzt mal

02:32:48.520 --> 02:32:56.880
gucken ob ich das ganze irgendwie hinkriege dass das dass das im hintergrund ah klammern

02:32:56.880 --> 02:33:11.160
muss man es klammern muss man es dann funktioniert genau klammern muss man es wobei das ich glaube

02:33:11.160 --> 02:33:15.400
das kommt sich in die quere weil ich ip doppelt belege und sowas keine ahnung wir probieren

02:33:15.400 --> 02:33:27.400
es einfach mal aus und jetzt und keine ahnung ey guck mal guck mal parallele server zeug

02:33:27.400 --> 02:33:41.560
da schon mal ja das das funktioniert schon mal es geht da nein nein fast fast ist handpferde

02:33:41.560 --> 02:33:50.240
fast funktioniert ssh connect to host unreachable ist ist das lieb ist das lieb immer noch zu

02:33:50.240 --> 02:33:51.240
langsam

02:33:51.240 --> 02:34:00.640
ich weiß nicht wie man über die kommando zeile deleted deswegen muss ich immer so machen

02:34:00.640 --> 02:34:13.760
bau ein wait for connection ein das ist eine gute idee in netcat oder so jemanden gute

02:34:13.760 --> 02:34:24.520
jemand eine gute idee 15 15 ich hab's ich hab's noch auf warum erstell oh terraform das

02:34:24.520 --> 02:34:29.800
ist eine gute idee das machen wir in stream nummer 3 das passt nämlich richtig zu container

02:34:29.800 --> 02:34:34.880
stellts deployment nächsten stream bauen wir eine kleine api noch ein machen github actions

02:34:34.880 --> 02:34:39.440
continuous integration pipeline geschissen bisschen load balancer zertifikat und im dritten

02:34:39.440 --> 02:34:48.920
stream dazu machen wir container stellts und terraform das ist eine gute idee max ansible

02:34:48.920 --> 02:35:05.640
wait for connection ah woh wohin ansible wait for connection

02:35:05.640 --> 02:35:15.040
wie funs das hier examples wait for connection ich teste das jetzt erst mal mit dem sleep

02:35:15.040 --> 02:35:23.960
drinnen sleep 20 ob das funktioniert man wenn die streams immer sein sonntags wahrscheinlich

02:35:23.960 --> 02:35:43.240
schon ok 3 4 5 6 7 8 9 10 11 12 13 14 15 das könnte fertig sein sind 17 18 19 20

02:35:43.240 --> 02:35:57.680
ok zählen kann ich nicht aber fast ok mal gucken ob es jetzt funktioniert das sieht

02:35:57.680 --> 02:36:00.600
gut aus das sieht gut aus das hängt schon viel länger

02:36:00.600 --> 02:36:13.360
massive scalierung hier angesagt wo ich mir nicht ganz sicher bin das backt doch rum oder

02:36:13.360 --> 02:36:18.280
ich meine ich mache hier ip aber wobei das hier könnte shell locals sein die variable

02:36:18.280 --> 02:36:23.840
und nicht global und deswegen ist es kein problem wenn ich das parallel mache bash ist

02:36:23.840 --> 02:36:34.680
aber da zu 6000 hat für als dass man da noch durchblickt netket aber die idee hier einfach

02:36:34.680 --> 02:36:47.640
das einzubauen beim ansible ist wahrscheinlich das beste funktioniert leute es funktioniert

02:36:47.640 --> 02:36:56.560
es funktioniert er deploit mir 4 server parallel so und danach sollte keck weheste service funktioniert

02:36:56.560 --> 02:37:19.280
ok ha cloud list server list oder auch nicht doch mal gucken wenn er fertig ist wenn er

02:37:19.280 --> 02:37:28.720
fertig sollte hier auf auf allen auf allen keck weheste service laufen moment hellsinki

02:37:28.720 --> 02:37:42.240
warum habe ich die warum warum sind die in finland die server ok bäm oh was oh nein

02:37:42.240 --> 02:37:50.800
oh das geht nicht gibt es doch irgendwelche race race conditions

02:37:50.800 --> 02:37:57.640
aber der ist noch gar nicht fertig der ist noch gar nicht fertig

02:37:57.640 --> 02:38:01.400
wait a minute der war noch gar nicht da war noch gar nicht durch

02:38:01.400 --> 02:38:17.720
jetzt ist keck weheste service da also leute ernsthaft einfacher mal übrigens ihr seht

02:38:17.720 --> 02:38:21.600
dass es transparent ist wegen dem hintergrund ich weiß nicht warum das da so ein shit macht

02:38:21.600 --> 02:38:37.400
bei chrome wir haben jetzt quadruple usd service keck quadruple usd service ich bin ich bin

02:38:37.400 --> 02:38:42.280
echt begeistert wie cool das ist mit mit diesem mit hier in dem fall mit dem ansible playbook

02:38:42.280 --> 02:38:48.520
haben wir noch irgendwelche shit commits die wir noch nicht gemacht haben also wer sich

02:38:48.520 --> 02:38:52.240
das alles ein bisschen näher angucken will was ich heute fabriziert habe ihr findet

02:38:52.240 --> 02:38:57.640
das bei mir alles auf github jetzt hat sein eigener load balancer die probieren beim nächsten

02:38:57.640 --> 02:39:06.920
stream aus wer sich das nochmal angucken will kann sich das hier alles anschauen wir machen

02:39:06.920 --> 02:39:20.240
noch mal was in die read me streamprojekt

02:39:20.240 --> 02:39:38.560
blurz switch und bisschen werbung machen dürftest du das shell script noch mal sehen welches

02:39:38.560 --> 02:39:46.720
welches shell script meinst du das ansible ding ich hab hier meine aliasse nicht git

02:39:46.720 --> 02:39:55.720
commit minus a minus m 0 w größer keck w read me beste aussage kräftigen commits aller

02:39:55.720 --> 02:40:20.920
zeiten ist alles im repo drin jetzt machen wir auch ein bisschen werbung streamprojekt

02:40:20.920 --> 02:40:28.000
es ist und wisst ihr was das coole ist es ist doch echt überschaubar es ist jetzt nicht

02:40:28.000 --> 02:40:32.800
als wäre das wahnsinnig viel source code ich meine die web anwendung ist lächerlich es

02:40:32.800 --> 02:40:37.320
ist jetzt nicht als wäre das wahnsinnig viel source code ich meine die web anwendung ist

02:40:37.320 --> 02:40:45.280
lächerlich wenig source code im prinzip ist das alles was da irgendwie die logik macht

02:40:45.280 --> 02:40:55.480
jetzt das ansible ding ist jetzt sagt man jetzt bei ernsthaft es ist gut lesbar und

02:40:55.480 --> 02:41:00.560
es ist auch nicht viel es sind 78 zeilen da kannst du dich ja echt nicht beschweren

02:41:00.560 --> 02:41:08.760
so der richtet den server ein mit unit file allem schon fertig macht ein bild für lokal

02:41:08.760 --> 02:41:12.720
von der anwendung und deployt das ganze also ich kann euch schon sagen auch wenn wir das

02:41:12.720 --> 02:41:19.240
die nächsten nächsten streams etwas modernisieren werden so ein bisschen eher so das in der

02:41:19.240 --> 02:41:23.920
richtung wie das heute gerade angesagt ist einfacher wird es dadurch garantiert nicht

02:41:23.920 --> 02:41:29.320
allein schon wenn wir das wenn wir das das das bild über über github action machen

02:41:29.320 --> 02:41:34.040
und so was man muss man sich jetzt ernsthaft fragen ich mein für ein stream machen wir

02:41:34.040 --> 02:41:39.400
das einfach weil es weil man dann was lernen kann aber wenn ich diesen kram jetzt so betreiben

02:41:39.400 --> 02:41:45.520
würde dann würde ich mich allen ernstes fragen macht das sinn bei so was kleinem macht das

02:41:45.520 --> 02:41:50.240
sinn reicht es nicht aus wenn ich das auf einem server habe dass ich einfach ein ansible

02:41:50.240 --> 02:41:55.760
script ausführe nachdem ich einen commit gemacht habe auch ich irgendwelche container stels

02:41:55.760 --> 02:42:01.120
geschichten und sonst was man muss es ja nicht man muss ja mit agilität nicht übertreiben

02:42:01.120 --> 02:42:14.640
wenn es das dreimal komplizierter macht auch wenn man dann vielleicht nicht cloud native

02:42:14.640 --> 02:42:25.520
big brain blockchain ai ist also ich bin mir geistert sehr gut sehr gut excellent tja

02:42:25.520 --> 02:42:29.720
leute noch mal eine runde sellout diesen streams werden möglich gemacht durch meinen partner

02:42:29.720 --> 02:42:34.600
hetzner cloud wenn ihr euch das ganze auch mal angucken wollt oder vielleicht auch hier

02:42:34.600 --> 02:42:40.560
mal mit dem beispielprojekt aus dem stream rum experimentieren wollt dann könnt ihr

02:42:40.560 --> 02:42:47.760
euch jetzt 20 euro startguthaben sichern ausrufe zeichnen hetzner in chat und wenn ihr euch

02:42:47.760 --> 02:42:53.080
mit meinem code anmeldet kriegt ihr 20 euro startguthaben und ihr seht für 20 euro kann

02:42:53.080 --> 02:42:57.240
man schon ganz ordentlich was machen ihr könnt euch entweder in eine fette kiste holen oder

02:42:57.240 --> 02:43:02.920
also fett in anführungsstrichen 3 cpus 4 gigabyte ram das zwei drei monate laufen lassen oder

02:43:02.920 --> 02:43:08.320
was kleineres das gute ist dass das ganze stündlich abgerechnet wird das heißt selbst wenn ihr

02:43:08.320 --> 02:43:12.880
das habe ich selbst schon verwendet nur als neukunde nur als neukunde ja ich weiß nicht

02:43:12.880 --> 02:43:18.640
ob sie was gegen fake accounts haben deswegen sage ich da jetzt nichts zu was ich auch schon

02:43:18.640 --> 02:43:28.520
mal benutzt habe ist diese geschichte hier aber glaube ich sogar im stream gemacht diese

02:43:28.520 --> 02:43:35.560
geschichte hier also wenn man mal was braucht mit nein jetzt nein jetzt noch ich will lass

02:43:35.560 --> 02:43:44.680
mich prising gucken wenn ihr mal anwendungszwecke habt dass ihr was richtig fettes braucht dann

02:43:44.680 --> 02:43:49.920
könnt ihr euch auch das hier mieten ich habe beispielsweise mal open street maps preprocessed

02:43:49.920 --> 02:43:58.120
das braucht extrem für routing information das braucht extrem viel ram ob die gpu instanzen

02:43:58.120 --> 02:44:02.960
haben habe ich noch nicht gesehen ich glaube nicht und habe ich mir so eine kiste hier gemietet das

02:44:02.960 --> 02:44:10.440
hat vier stunden prozess und der vorteil war ich habe dann am ende 23 euro bezahlt im monat kostet

02:44:10.440 --> 02:44:16.400
es zwar 321 aber ich habe das ja nur vier stunden gebraucht und ich habe diese leistung

02:44:16.400 --> 02:44:26.400
einfach nicht lokal ansatzweise gehabt um es damit machen zu können so so sieht es aus

02:44:26.400 --> 02:44:32.120
dankeschön für die ganzen subs leute wenn ihr in zukunft auch immer live mit dabei sein wollt

02:44:32.120 --> 02:44:39.360
könnt ihr auch bei mir auf youtube und twitch und twitter und wo auch immer vorbeigucken wir hatten

02:44:39.360 --> 02:44:44.800
hier alles subscribt jenna am start vier monate huge project ja aber richtig der michi ist auch

02:44:44.800 --> 02:44:53.160
am start muniradur hat auch subscribt für drei monate ribbonsch vor einer stunde und der virus

02:44:53.160 --> 02:45:03.120
der schnabulator auch danke für die subs leute ja wenn es euch gefällt freue ich mich immer

02:45:03.120 --> 02:45:07.680
über jeden sub zumal ich jetzt ja auch noch weniger bekomme weil twitch der meinung ist die

02:45:07.680 --> 02:45:13.920
sub in die subpreise umgestellt zu haben heißt ich brauche jetzt mehr subs für weniger geld

02:45:13.920 --> 02:45:26.600
was aber nicht schlimm ist also ich habe nicht angefangen zu streamen wegen wegen big stonks

02:45:26.600 --> 02:45:33.840
money das wisst ihr ja und ich muss sagen ich bin mal wieder begeistert über den chat es gibt

02:45:33.840 --> 02:45:40.600
keinen anderen channel der so non-toxic ist mal chain law außen vor genommen außen vor der so

02:45:40.600 --> 02:45:43.520
non-toxic ist und so big brain wieder chat bei mir

02:45:43.520 --> 02:46:03.920
loll wein nicht noch js warum nicht cobalt noch besser fort ran

02:46:13.520 --> 02:46:33.360
ja es sind sehr boom aber die auf der also noch boomerische boomer als als bei mir auf

02:46:33.360 --> 02:46:40.880
der arbeit soll ich gehe jetzt noch mal schnell durch den chat durch aber schauen ob ich

02:46:40.880 --> 02:46:45.680
irgendwelche sachen überlesen habe wie gesagt denkt dran entwupplose schreiben sonst übersehe

02:46:45.680 --> 02:47:00.120
ich die ganzen comments so haben wir nix wie gesagt weiß ich nicht glaube nicht

02:47:00.120 --> 02:47:10.520
da sieht man doch eindeutig toxic hier willst du die domain keck wie services dafür haben ja das

02:47:10.520 --> 02:47:17.560
wäre richtig gut keck wie punktservices die nämlich die müssen wir auch nicht transferieren

02:47:17.560 --> 02:47:23.720
ich kann dir für dns einfach die ip geben transferieren ist immer dass das das sind

02:47:23.720 --> 02:47:32.200
die die law die law end provider zu zu 3 hat für ob und oder liebste serverlinienungs ja

02:47:32.200 --> 02:47:42.000
das stimmt genau das ist es es ist natürlich cool wenn du dir dann irgendwie was erzählen

02:47:42.000 --> 02:47:50.680
kannst von hyper hyper skaliertem kupa netes jetzt könnte man daraus jetzt machen hyper

02:47:50.680 --> 02:48:05.640
skaliertes kupa net cloud native hyperskalierendes cloud native kupa netes continuous deployment

02:48:05.640 --> 02:48:10.200
oder sowas ja natürlich das ist cool aber manchmal muss es einfach nicht sein und in

02:48:10.200 --> 02:48:14.920
dem fall würde ich echt sagen das ist so simpel das projekten gerade mit ein paar servan warum

02:48:14.920 --> 02:48:22.520
da irgendwie eine große als sache noch drumherum bauen schon spät nee spät ist es erst ab 22

02:48:22.520 --> 02:48:36.040
uhr nicht okta ju stimmt es ist vier fahrt vierfach wes okta ju keck okta ju was wäre

02:48:36.040 --> 02:48:44.680
sieben fach koch sepp sepp da ju was ist neun was ist neun auf lateinisch weiß ich nicht was

02:48:44.680 --> 02:48:51.880
ist neun nona das habe ich noch nie gehört

02:49:05.880 --> 02:49:12.400
hier schauen wir mal kap kap ja nicht viel hier also wenn ihr was wissen wollt schreibt

02:49:12.400 --> 02:49:22.560
die frage ruhig in chat bin jetzt noch halbe stunde da wenn man den namen weglässt ja

02:49:22.560 --> 02:49:25.680
ich will ja nicht mehr haben ich will da sehen wozu sie gehören ach so habe ich die server

02:49:25.680 --> 02:49:30.240
jetzt eigentlich alle gelöscht oder ist keck ws service immer noch da ok ks service läuft

02:49:30.240 --> 02:49:36.280
ja noch vielleicht sollte ich die kisten mal wieder löschen sonst sonst wirds teuer

02:49:36.280 --> 02:49:55.640
heute nacht

02:49:55.640 --> 02:50:18.920
ich habe glaube ich nix übersehen wenn ich hier so durch scroller hatten wir ja

02:50:18.920 --> 02:50:32.560
ne holprig habe ich doch irgendwas anderes mit gemeint naja na gut ich muss dir ehrlich

02:50:32.560 --> 02:50:41.800
sagen so ich als boomer linux admin die standard bash skripte für das alte im it hatten auch

02:50:41.800 --> 02:50:45.880
schon seine vorteile zum beispiel hätte ich da irgendwie den health check rein hacken

02:50:45.880 --> 02:50:50.920
können was bei system der nicht gescheit funktioniert also in health check zum beispiel

02:50:50.920 --> 02:50:55.640
der irgendwie in den wege macht alle fünf sekunden also halt wie gesagt wirklich wirklich

02:50:55.640 --> 02:51:04.160
nur irgendwie rein rein basteln der hatte eigentlich nix zu suchen ja hier wieder was

02:51:04.160 --> 02:51:18.680
gelernt richtig richtig 6 hat wusste nicht dass man das machen kann

02:51:18.680 --> 02:51:25.800
er wusste es auch aber im unit file ist natürlich schöner funktioniert über hetsner auch so

02:51:25.800 --> 02:51:34.040
was wie proxmox zu hosten ja natürlich ach so du meinst in der cloud da wäre ich mir

02:51:34.040 --> 02:51:40.240
nicht so sicher das wäre ja das wäre das wäre ja quasi nested virtualisierung da würde

02:51:40.240 --> 02:51:45.160
ich mir wahrscheinlich bei der server aktion lieber einkaufen also ich weiß nicht genau

02:51:45.160 --> 02:51:50.120
wie die linux virtualisieren ich vermute mal dass es kvm und nested virtualisierung ist

02:51:50.120 --> 02:51:54.480
eines der anwendungszwecke wo ich mir wo ich wirklich genau drauf gucken würde ob es ordentlich

02:51:54.480 --> 02:52:04.440
funktioniert also du bist auf windows in vmw in linux der auf einem hetsner server ist

02:52:04.440 --> 02:52:11.880
ja korrekt ich bin auf windows hab da meine vm und dort war ich eingeloggt auf dem linux

02:52:11.880 --> 02:52:27.560
server genau so siehts aus

02:52:27.560 --> 02:52:30.320
habe ich die habe ich eigentlich die sub alerts aus kann das sein

02:52:30.320 --> 02:52:56.240
tatsächlich soll ich die auslassen oder anlassen sagt man man hört es aber anstört

02:52:56.240 --> 02:53:02.720
ich da lassen wir es an micky van b dankeschön für den zapp

02:53:02.720 --> 02:53:16.960
ok ich glaube ich habe nichts übersehen so schauen wir nochmal runter fast

02:53:16.960 --> 02:53:22.800
ja proxmox auf den richtigen hardware server ja wundert mich nicht

02:53:22.800 --> 02:53:35.800
sag mal blue media ich weiß nicht irgendjemand aus dem chat arbeitet bei hetsner und hat

02:53:35.800 --> 02:53:39.920
mein stream an die marketing abteilung weiter geleitet warst du das

02:53:39.920 --> 02:54:02.680
jetzt sagt jeder ich ja jetzt sagt jeder ich nee

02:54:02.680 --> 02:54:07.360
machst du eigentlich noch irgendwann ausbildungs story video ja klar als nächstes mache ich

02:54:07.360 --> 02:54:11.960
die geschichte über den azubi der illegale sachen bei uns im rechenzentrum geostet hat

02:54:11.960 --> 02:54:16.000
da muss ich aber echt aufpassen dass ich alles anonymisieren dass ich nicht mal den vornamen

02:54:16.000 --> 02:54:17.080
den richtigen nenne

02:54:17.080 --> 02:54:26.360
ja wir hatten mal ein azubi der hat bei uns auf den server unten ich habe mich die ganze

02:54:26.360 --> 02:54:31.560
zeit immer gefragt was was was macht er mit was macht er mit vmw wir hatten ein azubi

02:54:31.560 --> 02:54:36.360
wir hatten ein zubi vmw cluster und er hat die ganze zeit rum genervt ob er den nicht

02:54:36.360 --> 02:54:38.840
mal neu machen kann den azubi vmw cluster

02:54:38.840 --> 02:54:43.840
er hat gesagt ja ich setze ihn auf neue hardware ich mach das neu das ist doch viel besser

02:54:43.840 --> 02:54:50.240
da können wir üben und alles und bis bis also nicht bei mir ich hatte damit nichts zu tun

02:54:50.240 --> 02:54:56.080
also der war auch der azubi war auch bei mir aber mit der eigentlichen sache nicht nichts

02:54:56.080 --> 02:55:00.600
zu tun bis dann hat irgendwann einer gesagt naja gut dann mach halt den azubi esx cluster

02:55:00.600 --> 02:55:07.960
neu und bis dann irgendwann mal jemand dahinter gekommen ist was der macht es ging überhaupt

02:55:07.960 --> 02:55:12.840
nicht es ging überhaupt nicht darum dass er den azubi esx cluster neu aufbaut sondern

02:55:12.840 --> 02:55:17.840
er wollte den also nicht nicht nicht aus reiner nächsten liebe der wollte den azubi esx cluster

02:55:17.840 --> 02:55:21.480
neu aufbauen weil er darauf illegales stream also was ist illegales streaming der hat

02:55:21.480 --> 02:55:26.880
ein streaming server also er hat einen streaming dienst gehostet mit film drauf der hat sogar

02:55:26.880 --> 02:55:32.680
ein werbevideo auf youtube gemacht für den streaming dienst der hat natürlich keiner

02:55:32.680 --> 02:55:37.240
der rechte oder sonst was in der richtung der hat sogar ein werbevideo richtig richtig

02:55:37.240 --> 02:55:42.000
schlechtes aber sogar ein werbevideo auf youtube gemacht und das alles liegt bei uns im rechten

02:55:42.000 --> 02:55:47.960
zentrum wie lang hat das gedauert das weiß ich tatsächlich nicht weil ich hab wie gesagt

02:55:47.960 --> 02:55:57.720
ich war nicht daran beteiligt an an an an der aufdeckung ich vermute mal so zwei drei

02:55:57.720 --> 02:56:02.600
wochen also es lief schon ein bisschen das ist auch der erste und ich glaube auch bis

02:56:02.600 --> 02:56:09.600
jetzt einzige azubi der nicht übernommen wurde und auch nicht die alibi 30 nicht die

02:56:09.600 --> 02:56:14.720
alibi halbes jahr hintendran her endpunkt wurde auch übernommen ein halbes jahr aber

02:56:14.720 --> 02:56:21.200
das ist der erste azubi der komplett gekickt wurde danach den hätten sie eigentlich schon

02:56:21.200 --> 02:56:24.560
während der ausbildung kicken können wahrscheinlich wollte das keiner an die große klocke hängen

02:56:24.560 --> 02:56:31.400
ist der preis gem schon profitabel mit den reflings der preis gem hat nur in amazon refling

02:56:31.400 --> 02:56:36.120
und er kommt so selten dran das glaube ich erst einer bisher je was über amazon gekauft

02:56:36.120 --> 02:56:46.080
hat lohnt sich überhaupt gar nicht preis gem bezahle ich jeden monat irgendwie 50 euro

02:56:46.080 --> 02:56:56.720
für nix bald auf status kw service das finde ich ist eine gute idee was läuft eigentlich

02:56:56.720 --> 02:57:04.200
auf kw was läuft eigentlich auf kw punkt service gerade nix aber die domain die die

02:57:04.200 --> 02:57:11.560
machen wir dafür das ist das ist richtig gut weil den uns des droben mancharo mit

02:57:11.560 --> 02:57:27.000
e3 wm so

02:57:27.000 --> 02:57:40.320
der aua wird auch gesponsert ja habe ich gesehen materius ich bin gleich auf 20 minuten noch

02:57:40.320 --> 02:57:47.000
wir sind mit dem projekt für heute auch schon durch der typ der typ hat echt gedacht er

02:57:47.000 --> 02:57:51.800
ist massive big brain dabei ist es eigentlich eines der lausten aktionen die du machen kannst

02:57:51.800 --> 02:58:09.920
hat er wenigstens die vms ich weiß es nicht keine ahnung ich habe den klasse nie in action

02:58:09.920 --> 02:58:23.160
gesehen aber nachdem ist der azubi vm klasse aber hat er eh keiner drauf geguckt

02:58:23.160 --> 02:58:29.640
ja man wollte es wahrscheinlich an die große glock ja ich würde mit der endpunkt gerne

02:58:29.640 --> 02:58:35.440
ein video aufnehmen aber der hat gerade wohl bisschen bisschen was ich probleme jobmäßig

02:58:35.440 --> 02:58:39.640
ich weiß nicht genau lange nichts mehr gehört aber er hat gesagt er will auf jeden fall

02:58:39.640 --> 02:58:53.280
was aufnehmen ich mache da keine ads drauf

02:58:53.280 --> 02:58:57.800
ich sehe nicht was du bestellt hast ich sehe nur was bestellt wurde nicht wer da was bestellt

02:58:57.800 --> 02:59:05.120
hat heute was da über meine ref links teilweise bestellt wird ich gucke da aber mittlerweile

02:59:05.120 --> 02:59:07.800
ich habe da früher immer mal reingeguckt weil es interessant fand mittlerweile gucke

02:59:07.800 --> 02:59:21.520
da rein wie alt bist du eigentlich oder ist das geheim

02:59:21.520 --> 02:59:26.520
ich meine es weiß ja eh schon jeder ich bin 36 stimmt nicht stimmt nicht ich bin 37 ich

02:59:26.520 --> 02:59:35.200
bin 37 geworden vor nicht allzu langer zeit 37

02:59:35.200 --> 02:59:40.240
das war nun ein vorwand gehe ich mal von aus dass er neue hardware bekommt der wollte neue

02:59:40.240 --> 02:59:47.320
hardware haben für den neuen azubi esx cluster und wie ist das am ende aufgeflogen das ist

02:59:47.320 --> 02:59:52.800
eine gute frage wie gesagt ich war dann ich war da nicht so involviert ich muss ich frage

02:59:52.800 --> 02:59:59.520
man nächste woche bei mir das mitgekriegt hat ich kenne ich kenne das youtube werbevideo

02:59:59.520 --> 03:00:08.360
von ihm aber ansonsten habe ich da nicht viel mitgekriegt

03:00:08.360 --> 03:00:16.160
den triggert immer rechtsklick kopien muss dich nicht triggern das ist muss man so machen

03:00:16.160 --> 03:00:40.000
das werbevideo noch online weiß ich nicht

03:00:40.000 --> 03:00:47.480
ich weiß gar nicht wie die die hat er ich das ist echt eine gute frage wieder das gemacht

03:00:47.480 --> 03:00:55.840
hat irgendwie hat er sich ist nicht immer gucken

03:00:55.840 --> 03:01:15.320
er meint er war nicht blöd er hat es halt übertrieben

03:01:15.320 --> 03:01:20.160
das ist ein reverse proxy naja so ein bisschen das gegenteil von einem normalen proxy normaler

03:01:20.160 --> 03:01:24.840
proxy greift so mit kleins drauf zu der dann stellvertretend für dich ins internet geht

03:01:24.840 --> 03:01:29.680
die seite abruften dir zurückschickt reverse proxy ist umgedreht das steht zwischen server

03:01:29.680 --> 03:01:34.640
und dem internet du greifst aus dem internet drauf zu wirst weitergeleitet an server und

03:01:34.640 --> 03:01:42.880
die antwort kommt zurück zu dir das machst du zum beispiel wenn du irgendeine web anwendung

03:01:42.880 --> 03:01:48.440
hast der du nicht so ganz draus unter irgendwas robustes davor haben willst was das internet

03:01:48.440 --> 03:01:53.080
faced oder wenn du vielleicht basic aus davor machen willst weil es deine anwendung nicht

03:01:53.080 --> 03:01:57.580
kann oder wenn du zertifikatsmanagement handeln lassen willst von irgendwas was es ordentlich

03:01:57.580 --> 03:02:02.160
macht und ich irgendwie selbst einbauen willst und so was also ich würde ich würde auch

03:02:02.160 --> 03:02:06.960
keck ws service nie ins internet hängen direkt das war heute zum testen da kommt immer da

03:02:06.960 --> 03:02:14.120
kommt immer ein reverse proxy davor es geht nicht um entweder oder du kannst einen docker

03:02:14.120 --> 03:02:19.440
container laufen lassen und mit einem reverse proxy den ansprechen du kannst auch ein reverse

03:02:19.440 --> 03:02:23.440
dem docker container laufen lassen aber ein reverse proxy ersetzt kein docker container

03:02:23.440 --> 03:02:29.160
ein docker container kein reverse proxy weil beides zwei komplett unterschiedliche arten

03:02:29.160 --> 03:02:48.800
an dingern sind also hat noch nicht mal hat noch nichts mal miteinander was zu tun ja die

03:02:48.800 --> 03:02:55.720
server gibt es nicht mehr ja wenn du eine webseite hast also wenn du selbst in web server

03:02:55.720 --> 03:03:01.400
laufen hast also eine web anwendung laufen hast dann ist es sinnvoll davon reverse proxy

03:03:01.400 --> 03:03:15.680
zu machen und darüber zertifikats handling und solche solche sachen abzufackeln ja aber

03:03:15.680 --> 03:03:27.220
das kannst du dir auch downloaden also das ist jetzt nicht so das problem ja der typ

03:03:27.220 --> 03:03:32.280
der typ der sieht wahrscheinlich der typ also mr snot die hätte uns jetzt erstmal erzählt

03:03:32.280 --> 03:03:43.040
dass reverse proxy benutzer grüne wähler sind oder irgendwie sowas in der richtung

03:03:43.040 --> 03:03:46.920
ist die server handling auch in stream beziehungsweise video ich habe vor ein paar wochen so ein

03:03:46.920 --> 03:03:51.760
bisschen linux einsteiger server mäßig gemacht aber das war ein bisschen unstrukturiert

03:03:51.760 --> 03:03:55.780
da mache ich vielleicht noch mal was zu im prinzip das beste was du machen kannst um

03:03:55.780 --> 03:04:03.720
was zu herten keine ports aufmachen was nicht läuft kann ich angegriffen werden fertig

03:04:03.720 --> 03:04:08.320
ansonsten sind wenn du wenn du bei hetzena sagt man mal hetzena ubuntu und den server

03:04:08.320 --> 03:04:18.600
ist jetzt sind die schon ziemlich sicher vorkonfiguriert da musst du nicht viel machen für komfort

03:04:18.600 --> 03:04:25.320
würde ich das über ss h keys machen einfach dass man kein password eintippen muss passwort

03:04:25.320 --> 03:04:29.920
was nicht eingetippt werden muss kann auch nirgendswo abgegriffen werden oder die auch

03:04:29.920 --> 03:04:40.280
keine über die schultern gucken ja also habe ich jetzt meine ganzen services gelöscht

03:04:40.280 --> 03:04:53.880
ja ja es ist exzellent kacke ss service hat richtig richtig startup mäßig eingeschlagen

03:04:53.880 --> 03:05:07.800
das ist hundertprozentig jemand aus dem chat

03:05:07.800 --> 03:05:11.600
was ist das denn

03:05:11.600 --> 03:05:16.640
junge junge ist das bei mir unter video

03:05:16.640 --> 03:05:27.360
das bestimmt ist das nordisch zweite korn unter welchem video ist das

03:05:27.360 --> 03:05:35.440
wo ist das drunter hast du nicht demnächst geburtstag ich hatte geburtstag jetzt bin

03:05:35.440 --> 03:05:41.120
ich m6 90 fps

03:05:41.120 --> 03:05:46.480
unter welchen video ist das jörg it junge junge noch nie so viel falsch

03:05:46.480 --> 03:05:50.320
aussagen in einem video gesehen wie heute schön ohne plan mit gameplay im hintergrund

03:05:50.320 --> 03:05:54.840
was in die welt präsent aber nicht mit fakten hinterlegen dank jetzt weiß ich das ist doch

03:05:54.840 --> 03:06:02.240
miss das nordisch zweite korn das ist doch das kann mir doch keiner erzählen

03:06:02.240 --> 03:06:09.840
ok ich suche jetzt unter welchem video das bei mir angeblich ist

03:06:09.840 --> 03:06:17.880
wahrscheinlich hat das photoshop gefakt oder sowas

03:06:17.880 --> 03:06:29.160
ne das ist überhaupt nicht bei mir unter dem video

03:06:29.160 --> 03:06:54.840
das hat er das hat er das hat er wahrscheinlich foto photoshop hast du nicht photoshop also

03:06:54.840 --> 03:07:04.760
ich habe ich habe in meinen ernsthaft

03:07:04.760 --> 03:07:09.320
ich glaube immer noch du tschie beides mich das gucken wir zwar das ist so ein video von

03:07:09.320 --> 03:07:30.400
einer telekom ich habe keine in meinen mails gesucht aber nix gibt es nicht das kommandar

03:07:30.400 --> 03:07:41.520
das ist jebaited ich sag doch der chain als richtig krasser jebader

03:07:41.520 --> 03:08:02.400
jetzt hätte mich gewundert das hätte ich nämlich schon gesehen

03:08:02.400 --> 03:08:18.840
ja muss muss so sein

03:08:18.840 --> 03:08:33.480
oh das ist big brain na gut

03:08:33.480 --> 03:08:48.280
leute ich geh jetzt auf betke betke time ich hoffe euch hat das stream gefallen

03:08:48.280 --> 03:08:56.440
wir sehen uns die tage machts gut bis denn

