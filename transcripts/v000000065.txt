Bevor alle nachher Fussball gucken müssen, Fussball in 2k18, ich glaube es nicht.
Der Serious Max ist auch da, ja du hast schon gelesen was ich geschrieben habe auf GitHub, gehe ich mal voll aus, weil du hast ja zugemacht.
So, ich muss jetzt nochmal schnell auf Twitter posten, dann geht es los.
Ich habe nämlich ein bisschen was, ich zeige euch gleich mal was es Neues hier gibt.
Es gibt richtig viele geile, also naja, es war jetzt vielleicht ein bisschen dick aufgetragen, richtig viele geile Sachen.
Aber es ist schon ganz nice, es ist vor allem viel hübscher, sogar Javascript sieht ganz hübsch aus mittlerweile.
So, ich muss gerade nochmal Cider refreshen, weil irgendwie sehe ich weder Chat noch New Account richtig.
Nur in der Vorschau, so perfekt. Eats clap. Very to Eats, Eats as fuck.
So, Twitter post.
Eigentlich könnte man den Titel vom Stream wieder irgendwie nennen, Max quält sich mit Javascript oder sowas.
Das wird wieder grausam, ich kriege echt zu viel wenn ich Javascript Zeugs machen muss, muss ich euch mal zeigen.
So, Eier Eats.
Eier Eats.
So, okay, auf gehts, ich habe den Grandloftwitter gepostet.
Übrigens mal eine Frage an euch, an die ganzen Javascript Kenner oder wie natürlich die coolen Leute sagen an die Javascript Kenner, an die Javascript Experts.
Wo kann man, wobei, ich wollte gerade, richtig dumm oder, ich wollte gerade nach einer Seite suchen wo man online Javascript ausführen kann.
Wie wäre das mit meinem Browser?
Geht ab, geht da ab. Naja, okay suchen wir mal ein bisschen schöneres Javascript.
Ich muss euch nämlich mal was fragen. Der Javascript, ja genauerdings hier, das ist gut. Und dann gibt es ja noch CodePen oder sowas.
Muss euch mal was fragen, habe ich nämlich letztens in einem Vortrag gesehen, übelst geil. Und ihr müsst raten was da rauskommt.
In Javascript, das haben wir ja schonmal gemacht sowas, aber das war das beste was ich bisher gesehen habe.
So, Javascript. Kann man hier die Schriftgröße ändern? Settings. Schriftgröße ist komplett overrated. Brauchen wir nicht.
Schriftgröße ändern. Wie ändert man Schriftgröße? Fuck. Okay, keine Ahnung. Wie ändert man Schriftgröße? Kann nicht sein.
So, was meint ihr was hier rauskommt, wenn man das ausführt? Denkt dran es ist Javascript. Jetzt kann ich hier nicht scrollen.
Macht man den Krempel denn größer? Was meint ihr was hier rauskommt, wenn man das ausführt in Javascript?
Beste. Habt ihr irgendeine Idee? Also ich mein, wir dürfen nicht vergessen, es ist Javascript. Also das heißt schonmal.
Ja gut, die Leute kennen das wahrscheinlich. Oder ihr kennt das wahrscheinlich, aber das ist so bescheuert, dass das da rauskommt.
Das ist einfach total beknackt. Also ich mein, wir müssen uns das erstmal auf der Zunge zergehen lassen, was uns Javascript hier mal sagen wird.
Das hab ich übrigens aus einem Vortrag, den ich auf YouTube gesehen hab. Also, es gibt einen Array mit 6, also so wie man das jetzt als unbedarfter Javascript Benutzer liest.
Es gibt einen Array mit 16 Plätzen, halb leer, würd ich mal sagen. Halb mit 16, was auch immer. Das ist ja auch schon das geile in Javascript. Mit 16, was auch immer. Man weiß es nicht, genau.
So, und jetzt jedes Element. Was zum Teufel ist String-1? Was bitte ich schon ist String-1? Also man könnte sagen, ok, alles bis hier macht noch irgendwie Sinn.
So, join ist halt, man macht das Array zu einem String und halt mit diesem Separator. Also sprich, ne, wenn man jetzt hier in dem Array abcd drin steht, mit join, sagst du dann, join Leerzeichen zum Beispiel.
Kommt halt ein String aus A Leerzeichen, B Leerzeichen, C Leerzeichen. Allerdings hab ich schon mal keine Ahnung, was genau String-1 macht. Ich hab keine Ahnung.
Ich würd auch, ich würd sowas sagen wie das Serious Max, also dass das quasi dann String oder so gibt. So, aber folgendes kommt drauf. Wie führt man hier Sachen aus?
Fuck, äh, ähm, äh, Console, Log. So, ok, das funktioniert hier drinnen nicht. Wie kann man das jetzt hier ausführen? Ok, ich fühl's jetzt im Browser aus.
Also, was da rauskommt, das Beste. Haha, das kommt raus. Ich mach mal ein bisschen größer hier, das kommt raus. Ich hab keine Ahnung warum.
Ich hab keine Ahnung warum, ehrlich gesagt. Das ist hier absolut, ähm, ich, also, von der, von der Idee her, von, also, ok, versuch, ich hab's mal versucht zu verstehen.
Ich mein, das hier ist relativ, das hier ist relativ klar. Ein Array mit 16, man weiß es nicht. So, und in JavaScript ist wahrscheinlich, man weiß es nicht, not a number. Was ja so auch nicht ganz verkehrt ist, ja.
Oder? Ich hab keine Ahnung ob das, ok, machen wir mal einzeln. Was ist Array 16, was kommt da raus? Empty. 16 mal nichts. Ok, das ist das, daher kommt schon mal nicht not a number. So.
So, und dann ist String minus 1. Was, was ist String minus 1? Aha, String minus 1 is not a number. Ich, ich bin ja geneigt dazu, JavaScript in dem Fall sogar recht zu geben. Aber, lass uns überhaupt gehen.
Also ich hätte jetzt erwartet eigentlich, wenn man sich das so anguckt, String minus 1 ist halt einfach nur String oder sowas. Ich mein, warum auch immer man String und eine Zahl mit Minus, warum das überhaupt zusammen sowas.
Ja, was auch immer, ja. Zumindest String minus 1 is not a number. Das heißt, wenn man jetzt 16 mal nichts in JavaScript mit separator not a number joint, dann kommt dann das hier raus.
Es ist total, es ist, es ist JavaScript. Es ist JavaScript, man muss es nicht verstehen. Ja, das, das kenn ich, Sychin, was du geschrieben hast. Das ist geil, das kenn ich. Ich weiß aber nicht genau, was rauskommt.
Plus, ist es false oder true oder irgendwie sowas? Ach nee, Null, genau. Ja, das gibt so auch so Dinger, die man nicht so genau checkt. Ach ja, und das ist übrigens was anderes, wenn ich das Richtige in Erinnerung habe. So rum ist was anderes wie so rum.
Das ist auch JavaScript-Logik. Normalerweise bei einem Plus, würdest du eigentlich sagen, okay, so wie man das gelernt hat in der, ich weiß nicht in der wievielten Klasse man das lernt, ich sag jetzt einfach mal in der, keine Ahnung, in der zweiten Klasse oder so, ist es egal, bei einem Plus, ob es links oder rechts steht.
Das ist allerdings, nur weil man das in der zweiten Klasse gelernt hat, heißt das noch lange nicht, dass es in JavaScript auch so ist.
Also man kann sich das schon irgendwie dann zurechtbiegen und erklären, warum das so ist. Und wenn man die ganzen Einzelheiten auch mal sich irgendwann gemerkt hat, kann man auch bei solchen Dingen durchsteigen. Aber intuitiv ist was anderes.
Das nochmal zum Einstieg. Ich zeige euch mal was das Memetool tolles Neues kann. Nein, das kann ich Deep House Relaxing Study Music. Das kann es noch nicht, vielleicht kann es das auch mal irgendwann.
Wir haben das nämlich ein bisschen abgecradet. Und zwar, wir sind jetzt voll im Trend. Und zwar habe ich das ein bisschen neu gebastelt. Ich zeige euch das jetzt mal, ich muss das jetzt mal aufmachen.
Also, ich habe eine neue Ordnung. Wir machen das erstmal in Visual Studio jetzt auf. Oh, die Cuts. Moment, warum sind die Fotos immer anders, je nachdem wie man klickt?
Was zum Teufel? Ah, das hat anscheinend irgendwie Bilder zusammengesucht. Ich weiß nicht genau warum. Übrigens, beste Bild. Max Gesicht revealed in der Suppe. Ich weiß nicht, ob sich das geschwiegelt hat.
Aber Visual Studio auf. Ja, Green Monster, das machen wir auch noch mal irgendwann. WebAssembly müssen wir uns auch noch mal irgendwann geben.
Wie sieht das eigentlich mittlerweile aus? Vielleicht weiß das jemand von euch. Wie sieht das eigentlich aus in WebAssembly mittlerweile mit Dom-Elemente ändern? Geht das mittlerweile? Das erste Mal, wo ich mir das ein Beispiel von angeguckt habe, konntest du halt quasi mehr oder weniger musstest du alles selbst malen auf ein Canvas oder sowas.
Was dann ein bisschen so die Sache in Frage stellt, warum ich das dann überhaupt im Browser mache. So, also, VM, nee, vMysterion, das ist das Backend.
Also, das Ding besteht aus, jetzt kann ich gleich mal die neue Ordnerstruktur zeigen, wo wir gerade dabei sind. Ich habe das hier nämlich schon mal ein bisschen aufgeräumt.
Wer das das letzte Mal gesehen hat, weiß wie eklig das war. Es gibt drei Teile im Endeffekt. Es gibt hier so einen, wie nennt man das, Data Layer, der dafür zuständig ist, Bildchen einzulesen.
Und in dem Fall halt sowas hier, so, Min-Bildchen. Da kannst du ja alles bei den möglichen Bildchen einlesen. Dann gibt es ein Web-Interface und es gibt das eigentliche Frontend, was dafür zuständig ist, die Bilder dann auf dem Rechner anzuzeigen.
Ich zeige das mal kurz. Oh nee, ich glaube, ich habe keine Bilder drin. Ich muss erstmal Bilder reinziehen. Was wird zum Schluss rauskommen? Ja, ich zeige euch das für die, die es noch nicht gesehen haben.
Genau, und das ist in C-Sharp. Also, die Backend-Geschichte ist komplett in C-Sharp. Das Frontend ist in, ja, zumindest das Web-Frontend ist halt in JavaScript und HTML. Weil, mein Web-Frontend, was soll das sonst sein?
Und jetzt ganz neu, ich zeige es euch gleich, mit Vue.js. Ich habe mir so ein abge-dingst abgebrochen bei ihr. Und ich habe mein ekliges JavaScript. Wir gucken uns das jetzt das letzte Mal an. Komm jetzt, ich zeige euch nochmal, wie es letztes Mal ausgesehen hat.
Wo geht denn das hier auf GitHub überhaupt? Komm jetzt. Das da. Und letztes Mal war alles noch in einem Ordner drin und HTML JavaScript des Todes. Wo ist es denn? Index.
Nein, das letzte Mal hatte ich alles in einer Datei. Guckt hier, Logik, JavaScript, zusammengefuddelt, irgendwelche CSS zusammengefuddelt. Alles schön inline mit Styles und so richtig, also so wie man es nicht macht.
Und jetzt habe ich das Ganze ein bisschen schöner sortiert. So und jetzt kopieren wir mal ein paar Memes rein, dass wir ein paar Bildchen zum Anzeigen haben. So, wir müssen aber mal Steuerung C löschen, sonst ist es ein bisschen nervig. Steuerung T, Steuerung S löschen wir auch. Und R, glaube ich, ist auch keine so gute Idee.
So, also was das Tool macht, kann ich doch mal kurz zeigen. Also ohne das Webinterface jetzt einfach nur, wenn man einen Ordner hat, wo man seine Memepildchen drin hat und das Tool startet, man sieht es hier unten ist es.
Man kann auch das Webinterface starten, aber man kann es auch ohne Webinterface benutzen. Man kann einfach Memoverlays, Memepildchen einblenden.
Und das Schöne daran ist, ich weiß jetzt ja schon mittlerweile, was ich erzählen muss, was die Leute interessiert, weil das wird in jedem Stream quasi 30 mal gefragt, was das eigentlich macht. Und man achtet übrigens mal auf die RAM-Auslastung, das ist richtig geil.
Die jumped übel, guck mal hier, bam, einfach mal 500 MB, weil ich das GIF angezeigt habe. Wenn der Garbage-Collector läuft, geht es dann wieder runter, aber schon geil.
So, und das Gute daran ist, das zeigt nicht einfach irgendwelche Bildchen an, weil einfach Bildchen anzeigen bringt es dir jetzt auch nicht, wenn es sich dann komplett aus dem Game raushaut.
Diese Bildchen sind komplett transparent, also sprich, man kann durchklicken, siehst du ja hier, ich markiere im Hintergrund, obwohl ich im Bild rumklicke. Jetzt habe ich irgendwas komisches copy pasted.
So, man kann komplett durchklicken, das heißt, man kann die auch verwenden, während man spielt und auch das anzeigen nimmt keinen Fokus weg.
Das macht das, also sprich, das ist für Streamer, die Bildchen einplanten wollen, so wie ich. Das war nämlich der ursprüngliche Gedanken, hallo Mason, das war der ursprüngliche Gedanke, warum ich das überhaupt programmiert habe.
Ja, die Sharp hat einen Garbage-Collector. Man sieht das auch hier dran, wenn ich jetzt zum Beispiel mal da hingehe und sage hier einmal, keine Ahnung, gc collect, dann sieht man auch, dass an der Stelle jetzt nicht der Garbage-Collector läuft, wenn er lustig ist, sondern jedes Mal, wenn ich ein Bild anzeige.
Und das dann auch schneller aufräumt oder auch nicht. Ich weiß nicht, warum es nicht macht, ehrlich gesagt, aber keine Ahnung.
Ach, was weiß ich, zumindest funktioniert es, ohne dass man manuell Garbage-Collector aufrufen braucht man eh nicht, also ganz selten.
Und wenn man das braucht, muss man sich überlegen, ob man das nicht eh irgendwie anders macht. Normalerweise muss man den Garbage-Collector nicht direkt aufrufen.
So, aber ich zeige euch jetzt mal, was es Neues gibt. Also als erstes haben wir natürlich eine neue Ordnerstruktur, dass es nicht mehr ganz so eklig ist. Und hier ist das Webinterface drinnen, das war vorher wie gesagt ja alles in einem. Und ist die Schriftgröße so okay Leute, passt das? Ich habe ja an den Settings nichts geändert, aber man weiß ja nie.
Wie ein Doktor, das ist nicht schlecht. Wenn du den Garbage-Collector startest, installiert es sich Java. Allerdings, wer hat denn in 2k18 überhaupt noch Java installiert?
Außer irgendwelche Minecraft-Kinder, ne? Das ist ja, ne, ne, ne, Java in 2018. Hyperlulpoggers.
Mittlerweile ist es so schlimm, ne, mit meinen Twitch-Chat-Geschichten. Ich laber manchmal, es ist sogar auf der Arbeit so schlimm, ich laber manchmal vor mich hin. Also ich sitze dann da und sag dann irgendwann Hyperlulp oder sowas.
Einfach so, einfach so. Oder poggers oder so, einfach so. Ich weiß nicht genau, was das auslöst, aber es wirkt glaube ich ein bisschen verwirrend auf Leute, die das Ganze nicht kennen.
Aber lange rumgeschwätzt, ich zeige euch das jetzt erstmal, wie das aussieht. Weil die neue Oberfläche sieht richtig gut aus, sehr, sehr nice, schon viel besser.
Ja, das zeige ich gleich. Wir starten die ganzen Templates erstmal. Und ich habe es jetzt so eingestellt, das muss man wissen, falls ihr das auch bei euch ein bisschen mit dran basteln wollt.
Oder, ich meine vielleicht euch auch dran Beteiligung und Pull-Request aufmacht oder sowas. Ich habe es mittlerweile so eingestellt, dass der im Debug-Mode, also sprich wenn Environment-Development neu ist, dann benutzt er einen lokalen, dann benutzt er hier lokal was zum Seiten ausliefern.
Und wenn man Production startet, dann nimmt er die Seiten, die quasi in der Echse drin sind. Das ist eigentlich ganz praktisch, das heißt es ist nach wie vor eine Echse, die man verteilen kann und alles ist drin.
So, das heißt wir starten das Ganze jetzt in meinem Debug-Mode. So, starten den Webserver. Müssen wir machen. Und machen mal das kleine JavaScript-Zeug auf.
Visual Studio Code habe ich mir jetzt mal neu installiert. Finde ich ist eine super Geschichte. Ups, äh, ich habe es falsch aufgemacht. Lul.
Client-Code. So, das HTML zeige ich euch auf und nun starte ich hier mal, das ist so ein Plugin von Visual Studio, dass der die Files lokal bereitstellen kann, denn ich zeige euch nämlich nochmal was cooles, was ich rausgekriegt habe.
Also unsere Web-Developer hat hier der Witz schlechthin. Aber wenn ich jetzt auf das Memboard drauf gehe, das läuft bei mir hier lokal, Index, HTML. Bam, guck mal wie schön das jetzt aussieht.
Guck mal, wie nice das jetzt aussieht. Guck mal hier. Darklight-Seam oben, Searchbar. Also ich kann jetzt hier oben zum Beispiel den POG. Drücke Enter und dann ist es auch gleich an.
Sehr nice. Man kann suchen nach Shortcut, man kann suchen nach Name oder nach was weiß ich. Aber es sieht schon mal nice aus, muss man sagen. Absolut nice.
So. Und wie gesagt, es ist gedacht, dass man das auf dem zweiten Rechner aufmacht. Nur mal so zur Erklärung, weil es das letzte Mal immer gefragt wurde, was bringt es denn, wenn ich über den Webinterface Bilder auf dem gleichen Rechner anzeige.
Die Idee ist ja, dass man das startet auf einem Rechner und dann macht man es vom zweiten Rechner auf oder vom Tablet oder vom Smartphone. Und während man am Streamen ist und ich quasi am zweiten Rechner bin, ich zeige euch, ich gehe jetzt mal am zweiten Rechner. Ihr seht das jetzt zwar nicht, aber was habe ich für eine IP? 64.
Was habe ich denn? Ja, 64, ok. Ich gehe jetzt mal auf den zweiten Rechner und wenn ich das da aufmache, dann zeigt, seht ihr, dann kann ich jetzt im zweiten, also ihr seht es nicht, aber ihr seht es, dass ich hier nicht anklicke.
Jetzt kann ich vom zweiten Rechner aus hier, während ich irgendwas spiele, streame, sonst was, blöde Memes einplanten, auch wenn ich mir die Shortcuts nicht merke.
Also sprich, man kann ja auch Shortcuts belegen, dass man das schnell aufrufen kann, während man streamt, aber ich kann es auch vom zweiten Rechner aus bedienen. Dafür ist halt eben die Oberfläche.
So und was wir heute machen ist, ich mache es mal wieder hier auf dem ersten Rechner auf. So und was wir heute machen ist, wir basteln eine Upload-Funktion, weil zur Zeit kann man nur Memes hinzufügen, wenn man das, Poggers muss da noch rein, fällt mir gerade auf.
Poggers, guckt und wenn man es reinkopiert, ich will es nicht moveen, ich will es kopieren, zack, erscheint es hier. Wo ist es, wo ist Poggers?
Warum geht das nicht? Jetzt gehts. Ok, das muss ich mir nochmal angucken, warum man das jetzt nicht geladen hat richtig, aber man kann es reintracken, droppen im Windows Explorer oder halt hier, dann lädt es automatisch, während es läuft.
Die Sache ist die, das ist ziemlich doof, weil dann muss man quasi, wenn man neue Sachen hinzufügen will oder Shortcuts ändern oder sowas und man am Streamen ist, quasi in-game, also müsste man hier den Ordner aufmachen und das Zeug umbenennen und sowas, das ist nicht so schön.
Deswegen basteln wir heute eine Upload-Funktion, dass man sich überhaupt nicht mehr drum kümmern muss, sondern man kann einfach das Web-Interface aufmachen, irgendwas, ich zeige das jetzt mal exemplarisch, weil das funktioniert jetzt natürlich nicht, weil wir haben es noch nicht programmiert.
Wenn man hier confused, man sieht, er fügt das auch hinzu, ist jetzt nicht gemapped auf einem Key und das alte hat er entfernt, löschen wir mal.
Ah ne, kann ich jetzt nicht löschen, ja, aber ihr seht, was ich meine. Und ich will es halt nicht im Ordner umbenennen, sondern ich will es halt hier reintracken, droppen können, also zum Beispiel das hier, zack, geht jetzt natürlich noch nicht, jetzt macht es da Pause auf, ich will es hier reintracken, droppen können und er fügt es automatisch hinzu, also vom zweiten Rechner aus.
Das heißt, wir müssen zwei wichtige Sachen machen, wir müssen einmal in unserem Backend, dem beibringen, dass File Uploads möglich sind und wir müssen File Uploads implementieren in unserem Frontend.
Schauen wir mal, wie wir das machen. Und hier oben machen wir noch einen Settings-Icon oder sowas hin, dass man auch ein paar... also ich will halt komplett ohne Config-Datei auskommen, die man von Hand schreiben muss, aber wenn man jetzt eine Oberfläche hat, kann man ein paar einfache Settings reinmachen, wie zum Beispiel, was der für eine Shortcut-Taste verwendet.
Also Woodface ist jetzt auf F gelegt, allerdings ist es halt Steuerung F, Steuerung F zeigt er das an. Das heißt, wir brauchen noch ein Setting, wo ich auswählen kann, was er für ein Modifier-Key nehmen soll, keine Ahnung, Steuerung Alt oder nur Steuerung F oder Shift-Ctrl-F oder was auch immer.
Deswegen, das ist das erste, das dürfte relativ simpel sein, wir machen so ein Settings-Icon hier oben hin. Und das Settings-Icon würde ich gerne animieren, wenn Uploads laufen oder irgendwie sowas.
Muss dazu sagen, ich hab von JavaScript nicht großartig Ahnung, ich hab mir da schon ganz schön einen abgebrochen bisher. Ich hab mir da bisher ganz schön schon einen abgebrochen.
Das hinzukriegen. Okay, wir machen jetzt erstmal Settings-Icon. Achso, ja, das müssen wir auch mal machen. Ich füg das mal wieder ein.
Ja, und wenn das funktioniert, also sprich, wenn ich, dass man jetzt Bilder reintracken droppen kann, dann werde ich die nächste Vorschau-Version auf GitHub veröffentlichen, dass man sich den Kram eben nicht mehr selbst kompilieren muss.
Dann würde ich als fertiges Windows-Exil einfach Downloaden ausführen, Memes reinziehen und fertig. So, jetzt starten wir das aber erstmal selbst.
Ist die Musik laut? Stärke okay, lauter, leiser, passt das. Bist du sicher, dass du das nicht für 200.000 an Microsoft Twitch Elgato verkaufen willst? Elgato gibt's doch nicht mehr.
Äh, was wollte ich jetzt machen? Auf Web-Interfell starten. Elgato gibt's doch nicht mehr. Elgato ist jetzt, haltet euch fest, wer es nicht mitgekriegt hat. Elgato ist jetzt Corsair, Corsair.
Das Stream ist kaputt. Geht ja wieder. Ja, das ist noch nicht so lang her, die Meldung. Corsair, Corsair, Corsair. Corsair. Ja, das sind Sachen, die versteht man nicht so genau, aber gut, gab's wahrscheinlich ein gutes Angebot.
GG Eats.
Okay, ähm, so, ach ja, noch eine geile Sache wollte ich euch ja auch zeigen. Dadurch, dass wir das jetzt so eingestellt haben, dass, ähm, richtig geil, also zumindest zum Entwickeln übelst nice, wir haben das jetzt ja so eingestellt, dass wenn das im Developer-Modus läuft, also im Debug-Modus, dass der das dann von einem lokalen Server sich die, ähm,
die HTML und JavaScript-Geschichten von unserer Anwendung holt. Dadurch haben wir jetzt auch, ich zeig's euch mal ausführen, das Ganze. Das ist jetzt wirklich sehr, sehr nice. Das macht das Ganze viel einfacher.
So, wenn ich jetzt den Browser hier rechts mache und hier links mein Visual Studio und ich editier jetzt hier irgendwas, sagen wir, ich mach jetzt den Style hier raus, weil warum ist der überhaupt noch da, keine Ahnung, und ich drücke Speichern. Fuck, ich hätte erstmal reloaden müssen.
Äh, Moment, das hab ich vergessen. Ah ja, so, kommt mal, und ich drücke jetzt Speichern, bäm, dann reloadet sich das automatisch.
So, mach mal Platz, Alter. Geh weg. Das reloadet sich automatisch, also sprich, sobald ich hier was ändere im Editor, reloadet sich die Seite, das heißt, ich muss hier nicht mehr jedes Mal reinklicken, ja 5 drücken. Das ist ultra nice.
Also sprich, ich kann jetzt hier zum Beispiel sagen, gehen wir jetzt mal hier Style, Dark Mode wollen wir irgendwie, irgendwas, dass man's halt sieht, ja. Also sprich, wir wollen jetzt hier Dark Mode Color irgendwie, keine Ahnung, das da als Hintergrund haben, und jetzt drücke Speichern, bäm, automatisch refreshed auf der rechten Seite.
Und saumäßig schnell, ne. Das ist wirklich übelst nice. Was einem nämlich super auf den Sack geht, ist, wenn man JavaScript-Zeug macht, das war eins der ersten Sachen, die mich schon so abgefuckt haben, dass ich eigentlich keinen Bock mehr hatte, dass man jedes Mal, wenn man im Editor was speichert, den Browser aufmachen muss, ein F5 drücken oder auf dieses komische Häkchen hier oben.
Ich dachte erst so, so quasi Frontend-Java-Script-Noop, wie ich bin, ich mach hier nen Chrome-Plugin, dass die Seite, die alle 5 Sekunden neu lädt, aber das ist auch kacke, da lädt es halt die Seite neu, wenn man das grad nicht will, zum Beispiel, wenn man hier tippt oder so.
Pogas, alter, der Patrick ist da, Pogas. Ja, drück mal Steuerung S, zack, automatisch reload. Das geht allerdings nur im Debug-Mode. Das geht nur im Debug-Mode, wenn er das hier über diesen lokalen Server abruft, wenn das Ding hier quasi im Release-Mode läuft, dann nicht, dann ist es auch ein bisschen schneller.
So. Okay. Und auf Wiedersehen, was für JavaScript-Lull. Tja, JavaScript halt, ne? Das ist halt JavaScript, was willst du machen? Das wollte ich jetzt zeigen.
Ja, aber man sieht schon, es ist mittlerweile ziemlich ordentlich. Das letzte Mal war ja alles in einer Datei und jetzt machen wir das mit Vue.js. Das ist ja so der aktuelle Hyper-S-Trend.
Ja, das Skaronator, das habe ich auch ausprobiert. Und zwar mit, es gibt hier so einen, ich zeig das mal, weil ich kann jetzt hier nichts editieren.
Es gibt bei ASP.NET Core so ein Hot-Reload-Dingsgedöns, aber das hat den Nachteil, dass es übelst kompliziert einzurichten ist.
Dann funktioniert das auch. Da musst du den Webpack installieren und npm und irgendwelche kryptischen Webpack-Config basteln und so was. Und der Nachteil daran ist auch, dass dann keiner mehr, der das nicht kann, mitmachen kann.
Also sprich, du brauchst, du musst das dann haben. Wenn du das damit machst, wenn du das ganze über Webpack noch bundeln lässt und so was, dann muss halt jemand das lokal am Start haben und quasi auch wissen, dass das gibt und verwenden können und alles, dass er hier überhaupt mitmachen kann.
Ich will es so einfach wie möglich halten, deswegen habe ich auch keine extra View-Component-Bundle-Geschichte gemacht, sondern das ist einfach nur ein ganz normales HTML-File und ein JavaScript-File, wo wir gerade wieder beim Thema sind.
Aber im Vergleich zum letzten Mal ist das viel, viel lesbarer und viel schöner. Wie gesagt, das letzte Mal hier, ich habe es euch ja gerade gezeigt, hier alles inline JavaScript und sonst was und ich muss sagen, View ist wirklich schön simpel zu lesen.
Also guck mal, wir haben jetzt hier in 61 Zeilen JavaScript, auch mit ein bisschen Boilerplate-Gedöns noch dabei, also sprich in 61 Zeilen JavaScript und in 33 Zeilen HTML, was viel ordentlicher ist als das letzte, sogar noch eine ganze Ecke mehr Funktionen drin und das Ganze noch hübscher.
Ich finde, das sieht gar nicht so übel aus, die Geschichte.
Ja, sehbaro, das sind wir uns einig. Alles, was Java im Namen hat, ganz vergessen.
Also wir haben die gleiche Funktion wie das letzte Mal noch, dass man die Sachen anklicken kann, plus halt die Suche und den Theme-Switcher haben wir auch noch.
So, als erstes will ich jetzt aber hier oben mal einen Settings-Knopf oder irgendwie sowas hinmachen.
Achja, und was auch noch nice ist, ihr seht ja, das floated hier oben, also sprich die Suchleiste hat man immer, egal wie man scrollt.
Hier oben ist die Suchleiste, das machen wir hier, schreiben wir was rein, POC oder irgendwas oder sonst was.
Oder selbst wenn wir hier unten sind und nicht oben suchen, dann funktioniert das auch.
Also das haben wir in CSS so eingestellt, dass das hier so floated oben drüber, der ganze Krämpel.
So, also wir brauchen jetzt noch einen zweiten Button, und zwar einen Button für Settings.
Und eigentlich habe ich ja von Vue kaum Ahnung, weil ich habe ein paar Tutorials geguckt und das hier jetzt gebastelt.
Das heißt, kann sein, dass man da jetzt ein bisschen... Ich hoffe, das ist respon... Es ist einigermaßen responsive.
Moment, warum aktualisiert Windows das nicht?
Windows, hallo? Du darfst den Browser auch bewegen, das ist schon erlaubt.
Also so, alter, Windows.
So halbwegs, so halbwegs responsive ist es, guck, so halbwegs.
Ab der Größe ist er nicht mehr responsive, so halbwegs, aber immerhin.
Immerhin.
Und das movet auch mit da oben.
Was es halt nicht kann, was halt richtig pro ist, also was halt richtig pro wäre,
wenn man jetzt da krasse CSS-Logik machen würde, dass da jetzt quasi sagt, okay, jetzt ist da Platz weg,
jetzt macht er nur noch fünf Spalten oder so, ne?
So.
Das könnte man machen.
Aber das könnt ihr ja alles...
Wenn ihr wisst, wie das geht, könnt ihr da gerne ein Pull-Request aufmachen.
Ja, Max, da war das allerdings noch nicht Vue.js.
Also jetzt ist das so, jetzt ist das hier irgendwie ein Crit.
Das können wir jetzt mal machen, also wenn ihr wisst, wie das geht, wir können das jetzt auch machen, schnell.
Dann müsst ihr ja mal erzählen, wie das funktioniert.
Und zwar aktuell ist es so, die Items, da, Items ist ein ListView, da hier, unordered list, Items,
und der hat als CSS das da.
Display, Crit, Crit, Template, Columns, sechs Stück und ein FR. Ich hab ja wieder vergessen, was FR ist.
Irgendso ein vom Gesamtplatz, sonst was.
Ich hab keine Ahnung, wie das funktioniert, ich hab mir das auch noch von Stack Overflow kopiert,
weil es gibt ja, wenn man sich das hier mal anguckt, 30 Milliarden Sachen, die man da setzen kann,
die kann man gerade alle wissen.
Der Sideman ist richtig proer Frontend Developer, da kann man das. Ein Franzose.
Das passt thematisch heute sogar ganz gut.
So, also CSS Profis.
Wie mach ich mein Crit mehr responsive, dass das jetzt hier sich anpasst?
Irgendjemand hat gesagt, drei Zeilen zählt erst, dann zeichnet man, dann schießt man los.
Was mit Bootstab verwenden, ja gut, das ist natürlich auch ne Magande.
Das ist ja nur hier so entstanden, weil ich eigentlich gar nicht weiß, was es macht.
Aber dafür funktioniert es gut, muss man da sagen.
Das geht nur, wenn man das mit dem Fenster skalieren, das geht nur, wenn man links und rechts,
also wenn man quasi so gemacht hat hier, wenn man das so an die Seite, beide Fenster an die Seite irgendwie so
enttatscht hat. Aber es buggt auch rum, wie du siehst hier teilweise. Manchmal skaliert der Browser nicht richtig mit und so.
Es ist irgendwie ziemlich kaputt. Habt ihr das gerade gesehen beim linken Fenster?
Okay, Crit, Template, Columns, Auto Fit. Oh, oh, oh, oh, jetzt kommt's, jetzt bin ich gespannt.
Achtung, Achtung Leute. Seht Auto Reload? Habt ihr das gesehen? Nice.
Fuck. Alter. Oh, ist das responsive? Ist das responsive? Ja, guckt's euch an.
Responsive as fuck ist das. Boah, ist das nice. Siehste, deswegen mache ich das hier on stream.
Dann sehen Sie, wie ein paar Leute da die Ahnung haben von der ganzen Geschichte.
So, und jetzt, Serious Max, jetzt muss ich mir nur noch erklären, was das macht.
Okay, Repeat, Repeat, kann ich mir irgendwie, ne, wobei, ich hab nicht mal, was macht Repeat?
Was? Ich hab keine Ahnung, was das macht, aber es funktioniert.
04D. Ach, du hast das auch noch, Stack Overflow Copy Paste. Naja, gut, das kann ich auch.
Okay, ich wollte ein Settings Icon machen. Okay, ganz, ganz wichtig, wir brauchen ein passendes Emoji für dieses Settings Icon.
Warum ein Emoji, da will ich keine Image Fonts einbinden muss. So, oh, das ist ein super, das ist ein super Settings Emoji hier.
Ne, das sieht scheiße aus. Einfach nur der Hammer vielleicht. Ne, sieht auch kacke aus. Der Hammer, ja, der Hammer ist gut.
Moment, warum ist das jetzt falsch rum? Ach so, weil das eine so rum und das andere so rum wäre, das ist klar.
Settings Icon. Zahnrad, ja, hab ich auch schon gedacht, aber, also es gibt hier irgendwo ein Zahnrad, aber das sieht auch kacke aus, guck mal.
Oder, warte mal. Ach, so schlecht sieht es gar nicht aus. Kockers. So, Zahnrad ist outtale, aber so muss das sein.
So, wie kriege ich jetzt den Abstand dazwischen hin? Also, ich will jetzt, dass der Abstand zwischen dem und dem nicht so groß ist.
Übrigens, jetzt, jetzt wird, also, jetzt, jetzt mal eine Frage an die richtig krassen.
Das Kockers GIF, ja, das, das muss ich, das muss ich wirklich noch ganz, das muss man sein. Ernsthaft, Mann. Das da.
Kockers GIF, F11 oder so, machen wir das. Kockers. So, das muss da rein. Moment, wo ist es? Desktop Memes.
Kockers. Habe ich F11 schon? Oh, nee, F11 habe ich schon. Dann ist es jetzt F12. Mehr, mehr, mehr Shortcuts habe ich auch gar nicht.
F12 habe ich noch nicht, ne? Kockers, da ist es. Kockers.
Aber man sieht schon, dass es relativ einfach da was hinzuzufügen und dass es auch im Web-Interface erscheint.
Und mit F12 funktioniert es auch.
Okay, als, als Settings-Symbol, nee, nee, nee. So, und jetzt, jetzt ist die Frage, also mal angenommen.
Man kann jetzt ja auch irgendwie mit, ja, die Software ist richtig sophisticated.
Du musst dir mal angucken hier, wie das automatisch hinzugeedet hat sich im Web-Interface, als ich den Ordner gezogen habe. Sehr, sehr nice.
Easy Money, wobei, Moment, ich kriege da kein Geld für.
Ich lasse mich immer so leicht ablenken, wenn ich am Stream bin. Jetzt habe ich schon wieder vergessen, was ich machen wollte.
Ja, genau. Man kann doch jetzt irgendwie, und ich habe es gesehen, im Chat sind auch ein paar, die wissen anscheinend, was sie machen.
Im Gegensatz zu mir, was JavaScript angeht.
In JavaScript kann man doch, äh, in CSS kann man doch jetzt irgendwelche Animationen machen.
Kann ich jetzt dieses Zahnrad, kann ich das irgendwie drehen lassen? Geht das? Mit CSS-Animation?
Also zu was weiß ich, wenn ich dem Ding jetzt irgendwie mal eine ID gebe von irgendwie, äh, Animation-Test oder irgendwie sowas.
So. Klar geht das, aha, ja, wie geht das? Ähm, so, probieren wir mal aus.
Transform, Rotate, aha. Ich will allerdings nur das Bild rotaten lassen und nicht den Button.
Wie haben wir das genannt? Animation? Okay, probieren wir das jetzt mal aus. Also wie geht das? Wie könnte man das jetzt animieren lassen?
Transform, Rotate, einfach so? Nee, nee, okay, das wäre zu einfach.
Ah ja, einfach das Zahnrad in ein Span oder, oder, oder, ah ja, stimmt, stimmt, das ist natürlich stimmt. Wir müssen das ja nicht dem ganzen, ganzen Button das, das geben. Ja, das stimmt, das ist, das ist gut.
So, genau.
Okay, ähm, da muss ich jetzt mal suchen, wie das geht.
Rotate Animation, Stack Overflow, beste. Animation, Spin Linear Infinite, beste. Stack Overflow, beste. Geht nicht. Geht nicht. Achso, geht immer noch nicht.
Ha.
Geht auch nicht, warum nicht?
Warum geht das nicht?
Alter, was ist das für Musik, das ist ja nervig.
Das hört, das hört sich an als, als, als hängt irgendwie ein Lego-Motor oder sowas. Kennt ihr das noch von früher? Hatte ich auch mal einen Lego-Motor?
Die Dinger haben sich ungefähr so angehört, wenn man sie zu sehr belastet hat.
So. Okay, ich muss mal gucken, ob das jetzt dieses Ding überhaupt annimmt, diese Animation, wenn man müsste eigentlich, ne.
Können wir mal ausbilden, ob das jetzt annimmt irgendwie, keine Ahnung.
Background, Color, irgendwie so. Ja, da nimmt das. Okay, das funktioniert nicht. Warum, warum geht das nicht?
Eventuell noch Display Inline-Plug, okay. Ich mach das einfach, ich mach das, was du sagst.
Nope. Nein, zu einfach ist es nicht. CSS-Tricks, oh, gleich mit einem Code-Pen-Link. Ach so.
Ja, im Moment der Rotate-Image, wir wollen ja ein Zeichen rotaten, so. Okay, ich copy-paste das jetzt mal von der anderen, von der anderen Seite, ob das hierfür auch funktioniert.
Ah, Koggers, funktioniert. Warum das andere nicht funktioniert, verstehe ich allerdings nicht.
Ja, warum das, warum das, das rotiert nicht in der Mitte, ja, das ist auch, irgendwie rotiert das, aber das Bild ist wahrscheinlich nicht ganz gerade, was da rotiert oder so.
Keine Ahnung. Ja, fancy Zeugs, warum sollte man da irgendwie, jetzt machen wir das Ganze noch ein bisschen schneller, noch ein bisschen schneller.
Bam. Okay, das ist vielleicht ein bisschen zu schnell. Es ist aber nicht ganz gerade.
Moment, ich will jetzt, ich, das, CSS-Rotate-Infinite, das kann doch nicht so schwer sein. Endless Rotation Animation, okay, wie geht das?
Man muss da echt, man muss da echt so eine Rotation, aber das haben wir ja, haben wir ja angegeben. Alter, die Musik geht mir mega offen, sag.
Das muss doch irgendwie funktionieren. Ah, der, okay, nice.
Ich copypaste das jetzt einfach mal, was er hier macht. Ansonsten kann ich auch erstmal damit leben. Ach nee, Moment, du meinst zusätzlich, ne?
Nun ja. Übrigens, das ist gar nicht so unsinnig, ne? Mit diesem, also warum ich das drehen lassen will, das kann ich euch jetzt auch mal verraten, was ich eigentlich vorhabe.
Span Alignment, okay, ja, das ist eine gute Idee. Kann man nicht einfach so Keyframes machen?
Also warum ich will, dass ich das dreht, das kann ich jetzt mal revealen, warum ich das eigentlich machen will.
Also ich will, dass das zwei Funktionen hat, dieses Icon hier oben. Und zwar einmal, wenn man draufklickt, also noch ist es halt der Button wie hier, das ist ein bisschen kacke.
Wenn man draufklickt, kommt man in das Settings-Menü. Ach, in die Animation muss das rein, okay. Ich hab doch keine Ahnung.
Ist das jetzt gerade? Nee. Was? Die Animation rein? Wie geht das? So? So?
Ich weiß nicht, was ich machen muss. Aber Span Alignment, also warum ich will, dass ich das dreht, ist, ich will, dass das anzeigt, wenn ein Upload, weil eigentlich wollen wir heute ein Upload programmieren für das Ding, dass ich neue Memes uploaden kann.
Vom zweiten Rechner aus oder vom Smartphone aus oder so. Und ich will, dass es sich dreht, solange der Upload läuft und sie nicht mehr dreht, sobald es nicht mehr läuft. Das ist richtig big brain.
Okay, aber Alignment, das ist eine gute Idee, das können wir machen. Span Alignment hier. Ach so, du meinst hier.
Nee, Textalign. Nee.
Und das muss mit bei den Webkit transformen. Ach so. Also das muss da dahinter oder was?
Ich hab keine Ahnung, wie das aussehen muss. CSS, Alter.
Ach, ach, da unten dran. Ach hier. Alter Leute.
Wow, das ist krass. So viel besser.
Okay, jetzt verstehe ich sogar, was du meinst. Jetzt verstehe ich, dass man das hier einfach anpassen kann, wenn es nicht gerade ist.
Okay, ja, ich hab's verstanden. Ich hab's verstanden.
Ich gehe mal davon aus, dass es einfach nicht gerade ist.
Also ich vermute mal, dass es nicht... Doch, das ist genau in der Mitte.
Nee, ist es nicht. Guckt mal. Seht ihr das? Das ist ein bisschen zu weit oben.
Guckt mal.
Sieht es nur für mich so aus oder ist es bei euch auch so, dass das oben, dass das Bild einfach nicht ganz gerade ist?
Das Bild hat links und rechts. Also das Bild ist 20, irgendwas mal 20. Ist kein Wunder, dass es nicht richtig dreht.
Kann man das hier anpassen? Irgendwie darf ich sagen.
Okay, das probieren wir jetzt mal aus. Mit so einem Scheiß verschwendet man immer die meiste Zeit, die man hat.
Okay, also das heißt... Okay, im Button, im Button. Das können wir probieren. Also wir machen jetzt Button. Button.
Style. Probieren wir mal aus. Button, Style. Und dann müssen wir das irgendwie alignen.
Oh, jetzt kommen die krassen Tipps am Start. Display Flex, Justify Center, Align Center. Für den Button, ne?
Also nicht für die Animation, sondern für den Button. Also für den da. Oder?
Fast. Haha, fast.
Das Span muss man style. Okay, also nicht den Button.
Das sieht schon deutlich besser aus jetzt. Oder? Kommt es nur mir so vor? Es ist zwar nicht ganz gerade, aber ich finde es ist... Es ist gerade.
Bisschen gerade als vorher. Ich glaube, da kann man im Prinzip nichts machen. Das Icon ist einfach nicht gerade. Guckt es euch doch mal an hier.
Seht ihr das nicht? Das ist einfach weiter oben als unten rechts. Das ist einfach nicht gerade.
Was? Justify Center? Okay, Moment.
Moment, habe ich jetzt irgendwie ein bisschen zu viel copy pasted hier? Ah ja. Ne, nicht wirklich. Scheiß drauf. Wir halten uns jetzt viel zu lange an diesem hässlichen Zahnrad auf.
Also falls einer eine gute Idee hat. Ja, das stimmt schon. Wahrscheinlich muss man das wirklich transformen. Aber ganz ehrlich, wir können es noch mal kurz probieren.
Anderes Icon. Warum rotate das jetzt eigentlich nicht mal?
Oh, Hä? Warum muss ich eigentlich Display Inline Block machen, dass es überhaupt rotatet?
Was auch immer das macht.
Das gucke ich mir mal an. Aber damit kann ich jetzt erst mal leben, so wie es ist. Es sollte sich ja gar nicht dauerhaft drehen. Sollte sich ja gar nicht dauerhaft drehen. Also wir haben hier Klaas. Koggers.
Und wird also so viel Zeit mit irgendeinem blödsinnigen Kram verschwendet.
Okay, die Klaas kommt jetzt weg. Jetzt einfach nur gucken, wie das funktioniert hat.
Okay, also lass mich mal überlegen. Ich will jetzt track and dropen. Jetzt wird es kompliziert. Also was ich machen will ist, ich will ein Item hier drauf track and dropen dürfen.
Das habe ich schon mal gemacht. Also von der Idee her weiß ich, wie das geht. Allerdings weiß ich nicht, wie das in Vue.js geht. Aber ich weiß nicht mehr genau, wie das funktioniert.
Von der Idee her, ich bastel jetzt erstmal was und mal gucken, ob das funktioniert. Also als erstes müssen wir erstmal hier sowas wie on track enter track leave brauchen.
Also ich werde das so machen. Ich habe mir das ja im Vorfeld schon mal überlegt. Wenn hier irgendjemand was rein zieht.
Was ist denn Patrick? Was ist eigentlich WM-Finale? Ich wollte heute ausnahmsweise mal auf Fußball gucken. Es ist doch glaube ich erst um 17 Uhr, oder?
Jaja, 17 Uhr. Okay. Dauer noch. Eigentlich guter Stream. Und uneigentlich. Ist auch noch gut. Ich hoffe es wird zumindest.
Okay. Also ich bastel jetzt erstmal in der Hoffnung, dass das irgendwie funktioniert. Also wir brauchen sowas wie track. Weil das ist ja Vue. Das heißt wir machen das jetzt mit einem add davor.
Weil die Tutorials das so sagen. Track over. Also das heißt wir brauchen jetzt die Events. Track enter und track over.
Also sprich, sobald hier was reingezogen wird, löst das aus und sobald es drüber bewegt wird, löst das aus. So. Da machen wir jetzt eine Funktion dafür, die hier aufgerufen wird.
Und zwar hier. Die nennen wir einfach irgendwie track. So. Und das Ding kriegt einen Event. Weil es kriegt alles in JavaScript einen Event. Kann man sich gar nicht dagegen wehren.
Track. Und jetzt gucken wir mal, ob das funktioniert, wenn ich da was reinziehe. Ob das dann ausgelöst wird, das Event.
Habe ich da Vue.js gehört? Ja, wir sind im Trend. Wir gehen mit der Zeit. Wir machen das jetzt mit Vue.js. Wir machen kein Raw DOM Manipulation 300 Zeilen Index JS mehr.
Wir machen das jetzt ordentlich. Coggers log Event. Gucken wir mal, ob das Event auslöst.
Konsole öffnen. Event löst aus. Guckt. Ich ziehe es drüber. Track enter. Track enter. Funktioniert.
So. Und wie gesagt, nachdem ich wenig Frontends Zeug mache, weiß ich nicht, d.h. bevor ihr jetzt sagt, ok, der Max, der macht das so, so ist das gut, guckt euch lieber nochmal an anderen Stellen an, wie das richtig funktioniert.
Aber von der Idee her werde ich jetzt so machen, sobald Track enter bzw. Track over ist, blende ich hier so einen Overlay ein. So ein Fullscreen Overlay, wo dann drauf steht, give your Memes oder irgendwie sowas.
Und wenn man das dann loslässt, dann uploadet er das zum Server. D.h. wir müssen auch noch auf der Serverseite programmieren, dass er Uploads entgegennimmt.
Musste aber noch alles außer GIFs Image filtern. Ja, richtig, richtig. Ich filte einfach alles, was nicht mit meinem Type Image anfängt.
Trollprogramm. Das ist kein Trollprogramm. Also die Idee ist ja dahinter gewesen. Ich habe ja selbst sowas gesucht für meinen Stream. Oh, serious Max, das ist eine super Idee.
Wir machen C9 GIF Energy. Den da, den machen wir. Der kommt da als Text dann rein. Das kommt dann als Text da rein, das ist gut, das ist nice.
Das kopiere ich mir hier mal rein, damit ich es nicht vergesse.
Okay, also wenn Track, also Track, okay, okay. Da brauchen wir noch irgendwas, wo wir uns das merken, ob ein Trackvorgang läuft. Also sowas wie, keine Ahnung, Track Active.
Ich bastel jetzt einfach nur irgendwas grob hin, sowas von der Idee her hinkommen müsste. Okay, Track Enter, Track Offer. Das heißt wir brauchen jetzt noch ein GIF, ein GIF, was ich dann einplende.
So, dann sagen wir, if, wenn Track Active, dann plenden wir das Ganze ein. Mal gucken, ob das funktioniert, wenn das nicht Active ist.
Achso, das ist jetzt dahinter. Okay, dann nennen wir das jetzt mal ID. Das Ding brauchen wir noch CSS Styles, Track Overlay.
So, CSS Styles, Coggers, ganz wichtig, Track Overlay. So, und dann kriegt das Ganze hier eine Höhe von, wir werden mal gucken, ob das anzeigt, und eine Höhe von 500 Pixel.
Da ist es, okay. Dann haben wir Background, Background Color ist, jetzt, wir machen das erstmal fürs Dark Seam, Background Color ist Dark.
Und dann lassen wir das einfach weg und sagen jetzt einfach nur Opacity, also, dass man durchgucken kann, ist 09. Das funktioniert nicht.
Achso, Moment, ich muss das ja als Overlay machen. Das heißt, ich muss jetzt noch sagen, Position Fixed. Nee, fuck. Ach, du Scheiße, wie ging das nochmal? Ich will das ja als Overlay haben. Ich will ja, dass das nicht, ach du Scheiße, wie ging das hier Fixed?
Float, nein. Display Flex, was Display Flex Fixed? Nee. Ach, fuck, wie ging das jetzt nochmal? Ähm, dass das als Overlay angezeigt wird.
Ist das vielleicht im Hintergrund irgendwie? Nee. Absolut, absolut, ja genau. Nee. Warte mal, was mache ich denn hier jetzt verkehrt? Ähm, warte mal, also von der Idee her, ich will es ja immer, ich will es ja immer an der gleichen, an der gleichen Stelle anzeigen lassen.
Also wir brauchen, wir brauchen schon sowas wie, ach, ich weiß, was wir machen müssen. Wir sagen Fixed und dann müssen wir nämlich noch sagen, Top, wo, wohin, müssen wir sagen, Left. Oder auch nicht.
Warte mal. Warum zeigt es denn jetzt nicht an? Hä?
Warte mal, was? Moment, das zeigt es doch an, oder? Oder nicht?
Was mache ich denn jetzt verkehrt? Okay, was, warum zeigt das den Scheiß nicht an?
Absolut, okay. Moment, das ist, ich hab doch, ich hab mich doch hier irgendwo garantiert verschrieben.
Wirst du ein Video machen, wenn das Tool fertig ist? Weiß ich nicht, genau. Okay, von der Idee her ist es doch da. Warte mal, irgendwas, irgendwo habe ich gerade einen Denkfehler, das kann ja nicht so, kann ja nicht so schwierig sein.
Also, das Ding muss doch Position Fixed. Hä?
Track Overlay, ich hab mich auch nicht verschrieben, ne? Was, was mache ich denn jetzt hier verkehrt? Das kann doch nicht sein. Schieben wir das mal woanders hin. Man sagt nicht egal, wo das ist. Du mein, das ist ein Overlay, was absolut platziert ist.
Schreiben wir mal was rein.
Aber wirklich, wo ist denn dieses kack Overlay jetzt? Hä? Ich check's noch. Warum, warum wird das nicht angezeigt?
Oh, ich krieg links geschickt, wie es richtig geht. How to CSS Overlay. Okay, gucken wir uns jetzt zusammen an. How to CSS Overlay.
Ja, hab ich doch. Es ist doch fast genau das gleiche, was ich da gemacht hab. Doch, hier mehr oder weniger. Okay, Z-Index 2, meinetwegen.
Ich check's nicht, warum wird das Overlay nicht angezeigt?
Ich bin jetzt grad echt. Nee, nee, nee, sehbar, aber es ist ja, ich hab hier überhaupt keine Bedingungen irgendwie drinne. Ja, Displan, ja Displan None will ich ja auch nicht. Ich will's ja displanen.
Wenn ich sag, hidden by default. Ich will's ja nicht heiden by default. Ich will's ja anzeigen by default.
Ich bin verwirrt. Ach, ich, könnte das daran liegen, dass ich, warte mal. Ha! Ich hatte kein Background.
Lull! Da muss er erstmal drauf kommen. Meine Fresse, ey. Richtig Omega-Lull. Alter! Das hat mich jetzt geschockt, ey.
Nice. Okay, okay, okay. Weiter geht's, weiter geht's. Wir wollen das in Dark. Overlay. Jetzt können wir das machen, was ich eigentlich machen wollte.
Und zwar sagen, durchsichtig. Genau. Das will ich als Overlay haben. So, und da kommt jetzt noch ein Text rein.
Alter, CSS, JavaScript. Ich krieg echt die Krise, ey. Vor allem kann mir mal jemand erklären, warum erbt denn jetzt bitte schön nicht das
Diff-Background-Color von Diff außen rum. Aus welchen Gründen ist das jetzt so? Kann das jemand erklären? Give memes. Give memes.
Okay, so. Und da machen wir jetzt noch Schriftgröße. Da haben wir noch Text-Align. Da haben wir noch Center. So.
Und, ähm, das ist Trick 17. Das hab ich mir mal gemerkt. Mit der Zeilenhöhe kann man das hier irgendwie auch noch vertikal zentrieren,
weil ich weiß, ehrlich gesagt, aus dem Kopf nicht, wie man Text vertikal richtig zentriert in der Mitte. Wie macht man das eigentlich?
So. Give memes. Dann sagen wir jetzt noch, äh, Font-Size. 50. Mal 50. Okay, vielleicht bisschen, bisschen viel. 40.
Ein bisschen mehr Platz. So, schön. Es ist nicht sonderlich responsive, ja. Aber das passt schon. Vielleicht machen wir das noch ein Ticken weniger durchsichtig.
Und noch ein bisschen mehr. Nee, das ist okay. Das ist gut so. So. Okay. Ähm. So, und das zeigen wir nur an. If this track active.
Okay. Dann testen wir mal, ob das funktioniert. Von der Idee her. Also, das bedeutet, wenn ich jetzt was reinziehe. Und das ist das Schöne an Viewchairs,
was ich sofort zu schätzen gelernt hab. Quasi schon während ich das Tutorial geguckt hab. Das bindet in beide Richtungen.
Also sprich, ähm, oder besser gesagt, wenn ich jetzt sage hier, ähm, wo ist es denn jetzt hier? Ich sag hier, das wird nur angezeigt, wenn track active.
Das heißt, wenn ich jetzt hier drinne irgendwo halt das hier auf True setze, dann rendert das automatisch rein. Das heißt, ich muss nichts machen.
Nichts extra. So. Wir testen es jetzt einfach mal ganz billig, sagt track active. Das ist natürlich nicht so der Weisheitsletzter Schluss. Aber wenn ich jetzt was reinziehe, geht das Overlay hin. Sehr nice. Aber es geht noch nicht wieder weg.
Das heißt, das müssen wir auch noch machen. So. Also jetzt gucken wir mal. Wenn Event. Ähm. Ich hab keine Ahnung, auf was ich checken kann.
Event. Gucken wir uns mal das Event an, was da gefeuert wird. Kogas. So. Ähm. Event. Hat das irgendwie so was wie ein Type oder sowas?
Type. Track over. Ok. Also wenn. Gucken wir mal, ob das so funktioniert. Wenn Event. Type. Track over. Oder Event. Type. Gleich. Track enter.
Dann ist es active. Wobei, das können wir einfacher schreiben. So. Dann ist es active. Genau. So. Und jetzt müssen wir noch sagen.
Und jetzt müssen wir noch registrieren, dass Track. Track. Oder Drop. Oder was auch immer für ein Event genau geworfen wird.
Wenn man das. Wenn man das. Ach nee. Wir müssen. Es gibt ja zwei Fälle. Es gibt entweder. Es wird getropped. Oder es wird rausgezogen wieder. Wenn es wieder rausgezogen wird, müssen wir hier sagen. Ähm. Leave.
Frag mich nicht, warum wir das alles in der gleichen Funktion machen, aber das ist jetzt erstmal ziemlich einfach. So. Eats.
Funktioniert. Wobei. Es buggt. Guck mal. Es buggt. Wenn man schnell. Wenn man schnell reintrop, buggt es. Habt ihr es gesehen? Weil es mehrfach auslöst dann.
Oh, das ist doof. Dann machen wir es anders. Wir machen es anders. Ha. Viel besser. Track. Leave. Binden wir nicht hier drauf, sondern. Track. Leave. Binden. Funktioniert das überhaupt? Äh. Mal gucken. Track. Leave. Binden wir hier drauf. Ha. Easy.
Es gibt auch keine Bugs mehr. Oh, das ist doch. Das ist doch mega nice, oder? So. Und jetzt. Okay. So. Und jetzt brauchen wir. Jetzt müssen wir noch hier uns das Event für drop registrieren.
Drop. Das heißt wahrscheinlich einfach nur Drop. On. Drop. Ja. Drop. Track. Oh, mega nice. Ja. Richtig nice. So. Warum auch immer wir jetzt unser Drop Event auf Track binden, aber das ist. Ich meine. Das ist JavaScript.
Kannst mal richtig einrücken hier. So. Okay. Und jetzt müssen wir mal gucken, wenn das Event Type wahrscheinlich Drop ist. Vielleicht heißt es einfach nur Drop. Gehe ich mal von aus.
Dann geben wir mal was aus. So. Drop. Moment. Ach. Moment. Ja. Moment. Ah. Scheiße. Ich muss dem Ding jetzt erst mal sagen, dass die. Dass die Standardaktion, die rausführt, nicht, nicht gemacht werden soll.
Drag. Drop. JavaScript. Default. Action. Prevent Default. Klingt gut. Google Foo ist echt strong heute. Wir finden heute alles auf Anhieb.
Ah. Ich muss F muss noch weg. Lohnen muss man in dem Framework die Methoden wirklich alle in ein Objekt packen. Man kann das irgendwie. Man kann das wohl auch irgendwie splitten.
Also man kann irgendwie auch sagen, man macht den Skript Anteil in ein eigenes File und den Template Anteil und irgendwie sowas. Aber wir machen das alles alleine. Ich meine, es ist ja noch sehr übersichtlich.
Sind ja 70 Zeilen. Das ist ja nichts. Und ich finde insgesamt, auch wenn JavaScript an sich immer ziemlich hässlich ist, das finde ich sogar recht gut lesbar.
Unterschied zwischen Java und JavaScript sind zwei komplett unterschiedliche Programmersprachen. Nur weil die ähnlich heißen, haben die überhaupt nichts miteinander zu tun.
JavaScript ist das Ding, was du im Browser hast, beziehungsweise Node.js. Also JavaScript meistens V8. Also du hast ja im Prinzip, JavaScript gibt es im Prinzip in, also von den Implementierungen her eigentlich drei große.
Es gibt noch ein paar andere, aber eigentlich JavaScript hast du drei große. Du hast Chakra, du hast heute wie heißt die Firefox Implementierung, irgendwas mit Monkey glaube ich und du hast V8.
V8 ist mit Abstand das am verbreitetsten. Das ist das aus Chrome und aus Node.js und das was eigentlich fast jeder verwendet. Chakra ist das von Microsoft Edge.
Genau. Und Java ist halt eine komplett andere Programmersprache von Sun, äh von Oracle. Sun ist ja nicht mehr, hat es ja ausgesunt.
Ich soll es erloschen bei Sun. 5 Milliarden Jahre zu früh, aber Sun ist Geschichte.
Event-Default. Ich muss das gerade nochmal kurz stoppen. Ich muss noch hier das, äh, Steuerung F löschen, weil ich das zum Suchen brauche, das ziemlich doof ist.
Event-Prevent-Default. Das hört sich gut an.
Gibt es eine Programmiersprache, mit der man ins Programmieren einsteigen möchte? Ja, da habe ich ein paar Empfehlungen für. Es kommt drauf an, was du machen willst.
Also, bzw. nicht so sehr, nicht so sehr was sagen wir mal, ne, das war alles blöd.
Ähm, erstmal natürlich schon was du machen willst, aber wo du, auf welcher Plattform du unterwegs bist. Das ist ähm eine wichtige Entscheidung. Also sprich bist du unter Windows unterwegs und willst, sagen wir mal, mit Windows-Programmen anfangen, dann finde ich es zum einsteigen.net und C-Sharp das beste.
Dazu gibt es auch so viele Tutorial-Videos und Bücher kostenlose und Stack-Overflow-Einträge und alles. Also unter Windows kann man nicht, äh, also da führt eigentlich kein Weg an.net vorbei und C-Sharp, wenn man unter Windows anfangen will.
Ansonsten, ähm, weitere Sachen zum Einstieg finde ich ganz gut, so mal ganz allgemein, sind, äh, Python und Ruby. Einfach weil es, äh, somantisch, finde ich, sehr, sehr schöne, beides schöne Sprachen sind.
Zwar komplett anders, ja, Python ist eindeutig das ordentliche, aber Ruby ist, äh, relativ nah an, also an der natürlichen Sprache dran, wie man Ruby programmieren kann. Und das, das, ja, das vierte im Bunde ist eindeutig JavaScript, wenn du Web-Geschichten machen willst.
Und eigentlich ist das, sind diese, diese vier Sachen. Lassen wir mal Ruby, lassen wir mal Ruby weg. Wobei Ruby nicht schlecht ist, weil viele, viele der aktuellen, moderner Tools kommen von der Idee her so ein bisschen aus der Ruby-Ecke.
Auch wenn Ruby schon ziemlich, also die besten Tage hinter sich hat, vor allem Rails, ja, ähm, aber viele Ideen, also auch die ganzen, so wie die Web-Frameworks heute funktionieren und wie die, wie die ganzen Test-Tools und so funktionieren, das ist sehr stark von Ruby-Sachen inspiriert.
Ähm, aber eigentlich, wenn, wenn du, wenn du, ähm,.NET, also wenn du C-Sharp kannst und JavaScript und vielleicht noch Python, wenn du das in Kombination hast, du kannst eigentlich alles machen. Du kannst wirklich, es gibt nichts, was du nicht machen kannst.
Ähm, alles. Du kannst alles, Unity kannst du C-Sharp programmieren. Du kannst alles machen. Wenn du die drei Sachen kennst, ist, ist perfekt. Und natürlich gibt's immer noch, muss man sich immer weiterbilden. Das gibt's jetzt Go ist angesagt. Dann gibt's jetzt noch Flutter. Kennt, kennt ihr Flutter? Das ist von Google jetzt was Neues für, für UIs.
Ähm, aber wenn die drei Sachen hast, da kannst du wirklich, da fehlt dir nichts, ja? Und mit was du davon anfängst, ist eigentlich egal. Ich würd's davon abhängig machen, auf welcher Plattform ich bin und ähm, was ich, was ich machen will.
Sprich bist du unter Windows und willst Windows-Programme machen, dann würd ich mit.NET anfangen und C-Sharp. Willst du Web-Geschichten machen, egal wo, dann mit JavaScript und, ähm, bist du vielleicht unter Mac oder Linux oder so unterwegs und willst, ähm, da irgendwas machen bzw. äh, in Verbindung für, für JavaScript Web-Geschichten mit Python lernen.
Es ist, nimmt sich eigentlich nix großartig mit was du anfängst. Mein persönlicher Favorit zum Anfang ist, weil die meisten Leute sind unter Windows und so Windows-Programme sind auch immer ne schöne Sache zum Üben, ist mit.NET und C-Sharp anzufangen.
Du kannst, du kommst im Prinzip, aber angenommen, du lernst das jetzt und hast dann, lernt es spät und du willst das irgendwann mal auch beruflich machen und lernst das dann bei der richtigen Firma, du müsstest theoretisch nie wieder was anderes lernen, wenn die Firma das macht und das sich noch hält.
Aber eigentlich will das kein Programmierer, also keiner den ich kenne und da wirklich was taugt, ja, und die wollen jetzt in der Regel lernen die Leute freiwillig neue Sachen, weil es es interessiert. So, genug geschwätzt.
Okay, PreventDefault, haben wir gesagt, ne, muss man machen. PreventDefault. Habe ich die Frage auch beantwortet damit? Ich weiß nicht mehr wer sie gefragt hat, aber ich hoffe das hat jetzt irgendwie Sinn ergeben, was ich vor mir gegeben habe.
Ha, funktioniert, guckt. Nice. Also der Upload funktioniert nicht, aber rein und raus funktioniert und beim loslassen funktioniert es jetzt auch. Das ist schon mal, das ist schon mal richtig, das ist schon echt extrem Korgas gerade.
Die Musik eher.
Okay, so, also wir können jetzt Bilder reintrecken, droppen, sehr schön. Jetzt müssen wir noch gucken, dass der Scheiß geuploadet wird. So, ifEventDrop, also sprich, der Typ hat das Bild reingezogen und hat es auch losgelassen.
Das war eine sehr gute Ahnung, das ist schön. Bin ja froh, wenn das was bringt, was ich so erzähle. Okay.
Wenn das EventDrop ist, also sprich, der Typ hat die Bilder losgelassen, dann muss ich mir mal das Event angucken, was da jetzt eigentlich reinkommt. Zack.
EventType, kann man das ein bisschen kürzer machen hier ohne, jawoll, dass ihr auch was seht. EventType ist Drop. Nice. Desmond.
Nee, Desmond, das kann ich nicht aussprechen, ich sag mal Desmond. Also, ich finde die Motivation, das ist falsch rum. Man braucht was, was man machen will, dann lernt sich die Sprache und das Drumherum quasi dabei bzw. von alleine.
Also, wenn man sagt, man lernt jetzt eine Sprache und wenn man die Sprache kann, dann mach ich was damit, dann hat man nicht die Motivation, das zu lernen.
Du musst, als erstes muss stehen, dass du, also, das erste, was man machen muss, man braucht eine Idee, was man machen will und dann sucht man sich das, was dafür passt und setzt das damit um.
Dann hat man auch keine Motivationsprobleme, weil man ja als Ziel hat, dass man was Spezielles machen will. Wenn man einfach nur was lernt, um danach was mitzumachen, wird man es nicht lernen.
Also, du brauchst, du brauchst irgendeinen Aufhänger. Also, zu sagen, ich will jetzt ein, keine Ahnung, ein Meme Tool programmieren.
Was brauch ich dazu? Ich brauch irgendwie ein Backend-Geschichte und ich brauch Javascript.
So. Und ich hatte hier vor auch keine Ahnung von Vue.js oder sonst was, paar Tutorials angeguckt, weil dementsprechend auch die Motivation da war, weil ich das machen will und eats as fuck.
So. Okay, also, Trangle-Trop. Wenn das Event-Trop ist, dann... Moment.
Jetzt hab ich hier eine halbe Stunde reincopy-pasted. Also, wenn das Event-Trop ist, was ist denn da alles so drinnen?
IsTrusted, bla, bla, bla, Path. Wo krieg ich denn jetzt die Files her? Ich meine, muss ja irgendwo stehen, welche Files getracked and dropped wurden.
Track-Overlay, Two Element, bla, bla, bla. Wo stehen denn jetzt die Files drinnen?
Datatransfer. Oh, das klingt gut. Datatransfer-FileList. FileList ist 0. Warum ist denn die FileList 0?
Ich glaube, das buggt rum im Browser, die Anzeige. Aber FileList klingt gut. Also sprich, Files ist Event-Datatransfer-Files.
Ähm, da machen wir mal ne Schleife drüber und lassen uns mal die Files... Ups. Alter. JavaScript. In File...
Übrigens, ist ein JavaScript auch übelst verwirrend, ne? Dass es for each, for off und for in gibt und so. But why? Weil JavaScript. File.
Coggers, da ist es. F12, Coggers. File, FileName. F12, Coggers. Ok, das heißt, hier haben wir die Files drinnen.
Ok. Oh fuck, wie schicke ich denn das jetzt zu meinem Server? Äh, wie schicke ich das jetzt zu meinem Server? Ich brauch, ich brauch nen...
ViewHTTPPost. Wie macht man das? ViewResource. Das klingt gut. SendPostRequest. Weil ich muss jetzt ja, also von der Idee her, ne, was ich jetzt vorhabe,
ob das funktioniert oder was ganz anderes. Also, wenn irgendjemand ein Bild hier reinzieht und loslässt, dann wird das hier aufgerufen.
Ich, ähm, hol mir die Dateinamen raus. Beziehungsweise, wahrscheinlich kann man das auch irgendwie einlesen hier drüber, muss ich da mal gucken.
Ähm, ich hol mir die Dateinamen raus, was gedroppt wurde, weil ich mein, es kann ja auch sein, dass irgendwie einer drei Sachen droppt oder so.
Und jetzt muss ich die irgendwie zum Server schicken. Das heißt, wir müssen jetzt zwei Sachen machen. Ich muss, ähm, auf dem, auf dem Server muss ich einstellen,
muss ich noch was, müssen wir hier im Backend noch basteln, dass ich überhaupt das annehme. Aber bevor ich das mache, will ich erstmal im Frontend einstellen,
dass es überhaupt zum Server hinschickt. Moin, Elina, Elinas, was ein S ausmachen kann. Das S macht Grill oder nicht Grill aus.
Ähm, genau, und dann schickt das zum Server. Das muss ich dem jetzt irgendwie beibringen. Wie macht man ein Postrequest aus Vue.js?
Beziehungsweise, wie macht man überhaupt im Browser das? Geht das nicht mit Fetch? Fetch ist doch irgendwie ein neuer, neuer Special API.
Axios? Nee, das ist echt, ich will irgendwas eingebautes nehmen. Das gibt es, das habe ich letztendlich nicht mehr gelesen, es gibt so ein neuer, neue HTTP API im Browser.
Hä? Ah, hier oben. Fetch? MethodPost?
Ähm, warte mal, da gibt es doch bestimmt irgendetwas, warte mal. Ich habe doch das da. Das ist irgendwie ein bisschen für Vue.js da. Das ist doch viel, viel nicer.
Ja, so. Oh, das ist schön. Das ist nice. Das ist schick, sowas hier. Einfach nur blablabla. Anstatt, anstatt, anstatt get kann man hier bestimmt auch post machen. Das ist schön. Das nehmen wir.
Da müssen wir uns nicht mit hier irgendwie, ähm, merkwürdig in APIs rumquälen. Vue.Resource nehmen wir, Vue.Resource.
Packen wir das mal als Skript rein zum Testen nur. Danach laden wir das runter und schieben. Aber wir können es auch gleich runterladen.
Aber gleich runter. Ladest du das am besten jetzt runter? Lol. Scheiß drauf. Ich will jetzt erstmal ausbringen, ob das funktioniert. Danach laden wir das runter.
So, ähm, wo ist es denn hier? Skript. So, und jetzt kann ich hier sagen, this things, rttp, oder wie ging das jetzt? Post, post, url, ok.
Post. Hat er ein Beispiel für ein Post? Post. Ich denke, dass wir Dinge mit Postrequest machen können. Und sonst kannst du das überhaupt nicht gebrauchen.
Fetch ist simpler. Ok, ja, kann auch sein. Also, ja gut, Fetch ist wirklich simpel. Ja, das stimmt schon. Guck mal, das ist eats as fuck eigentlich.
Ich mein, du musst ja nichts machen. Du sagst die World, wo du hin willst. Ich mach das jetzt mal mit Vue.Resource und danach stellen wir das auf Fetch um.
Also hier, so, das will ich. Das will ich haben. So, also, Post machen wir api slash upload. Ähm, das muss ich noch anlegen, das gibt's auf Serverseite noch nicht.
Diese Seite. So, senden tun wir. Fuck, was sende ich denn da? Die Files? Nee, das kann nicht sein. Config haben wir nicht. Und jetzt machen wir Trick 17, ich sehe, das ist so ein Promise Zeug, da können wir Await verwenden.
So, als alter C-Sharp-Fan. Ist mir, ist mir das hier eine viel lieber Syntax. What? Ist mir die Syntax so viel lieber? Moment.
Await is only, ach so, Async Functions. Ok. Async. Ja, ach gut. Upload Files. Files kann ich so, das geht so nicht. Garantiert geht das so nicht. Aber wir können mal gucken, was passiert.
Restart. Also wir laden das jetzt zu unserem Server hoch, hier unter dieser Uhr. Allerdings gibt's das auf Serverseite noch gar nicht. Dementsprechend kann das nicht funktionieren.
So, method not allowed. Das ist klar, mein Server sagt, gibt es nicht. Aber es funktioniert prinzipiell.
Also das, das klappt doch. Kann man, kann man eigentlich sowas hier machen? Also jetzt haben wir eine Frage an die JavaScript-Kanäle.
Also angenommen, ich benutze hier Await. Was, was kann ich ihm denn sagen, was er im Fehlerfall machen soll? Also ich sag jetzt hier Await Result und was sag ich ihm auf, was sag ich ihm on Error?
Try Catch. Ich weiß nicht, ob sowas gibt. Keine Ahnung. Await Promise Error. Wie macht man das? How to write?
Noob. Ja, richtig. Reject. Reject. Aha. Interessant. Reject. Gucken wir uns das mal an. Reject. Reject.
Ah ja. Okay, also sprich, geht das, geht das dann so? Reject. Äh. Keine Ahnung. Kein Chimmer.
Try Catch? Nein, nein, nein, nein.
Reject. Ja, mach ich doch.
Wir gehen einfach davon aus, dass es keinen Fehler gibt. Ja, ich bin, ich bin geneigt dazu, das zu machen, ja.
Reject is not a function. Was mach ich denn verkehrt?
Oder ist das gar kein Promise? Aber wenn es kein Promise wäre, könnte ich es doch gar nicht Awaiten.
When, when we use Async and Await, we write it because... But, but... Alter, warum ist das in JavaScript alles so kompliziert?
Egal. Es gibt keine Fehlerfälle. Es gibt keine. Es gibt keine Fehler. Easy. Wir ignorieren es einfach, dass es Fehler gibt.
Ach so. Punkt Catch ist es. Punkt Catch. Ha. Nee. Ach fick dich, keine Ahnung.
Lol. Was weiß ich wie der Scheiß funktioniert. Es gibt keine Fehler. Fehler outdated, overrated, debated. Brauchen wir nicht.
Ja, ja doch. Aber ich will es ja eigentlich mit Await machen. Also, dass ich schreiben kann irgendwie.
Wenn sonst was, sowieso ist klar. Aber warum kann ich nicht Await und Error oder irgendwie sowas. Also, quasi Await da drauf und wenn Fehler dann... Ach, keine Ahnung.
Ich hab das Promise Prinzip noch nicht verstanden. Das ist richtig. Das ist korrekt. Da kann ich nichts dagegen sagen. Das ist so. Await debated.
Jetzt gucken wir uns dann klar hin. Jetzt will ich erstmal den Upload hinkriegen. Das ist aber richtig, Ibims Mary. Ich hab das Promise Prinzip wirklich nicht verstanden.
Ich hab allgemein wenig verstanden, weil es um JavaScript geht. So. Result. Okay Result ist dann... Moment. Ist das Result? Ist in dem Result dann vielleicht irgendwie das?
Was ist drinnen? Also Saito, wenn du irgendwas hast, im Zweifel machst du auf Pastebin oder so. Aber ich lasse es jetzt erstmal. Ich will jetzt erstmal gucken, dass es mit dem Upload funktioniert.
Okay. Also, wenn ich es jetzt hier reintrack und droppe, dann versucht ihr es zum Server zu posten. Gut. Nice. Das heißt, als nächstes müssen wir uns auf der Serverseite einstellen.
Mit einer ordentlichen Programmiersprache, dass er das entgegennimmt. Da geben wir uns einen AP-Controller, der noch nicht allzu viel macht, außer bei Index irgendwie ein sinnloses JSON zurück zu liefern.
Das heißt, das können wir uns auch gleich schon mal schenken. So. Oder wir schreiben das einfach um. So. Das Ding haben wir genannt Upload. Upload. Upload. Mega Upload. Mega.
Wir brauchen gleich noch mal den Mega Upload Song, oder? Leute, was sagt ihr? Bist du eigentlich auch schon so hyped auf die Black Ops 4 Beta? Du weißt gar nicht, dass es eine Black Ops 4 Beta gibt. Gibt es eine Black Ops 4 Beta?
Open Beta für August angekündigt. Oh mein Gott. Black Ops 4 Beta. Mit Granaten. Mit Noobtube Grill. Warum? Warum? Also nicht warum. Ist das überhaupt ein Grill? Ich weiß nicht. Aber warum Noobtube? Warum sehen wir schon den Noobtube auf dem... Warum?
Wenn du als BWLerin sitzt und keine Ahnung hast, was passiert. Ja, aber das ist doch als BWLer normal, oder? Omega Lul. Also ich weiß nicht, ob ich so gehypt bin auf Black Ops. Keine Ahnung. Dreck.
Also wenn die Beta kostenlos ist, dann werde ich mir das wahrscheinlich mal angucken. Ah, nee, nee, nee. Okay, also. Wir müssen dem Ding jetzt irgendwie beibringen. Paste Bin. Oh, das Saito. Das Saito blickt durch.
Await Promise Function Catch Error. Das habe ich ausprobiert eben. Das hat nicht funktioniert, weil ich probiere es jetzt nochmal aus.
Ich probiere es nochmal aus. So. Wo habe ich es denn hier? Da. Also. Okay, wir probieren es jetzt nochmal aus.
Ach, ich habe es wieder verkackt. Ich habe wieder auf den Kopf gedrückt, obwohl ich nicht auf den Kopf drücken darf.
Das hat jetzt zwar keiner verstanden, was ich meine, aber ich habe es verstanden. Das reicht. So. Weil es geht kaputt, wenn ich jetzt zweimal starte.
So. Also. Angeblich geht das so, schreibt das Saito. Das bedeutet. Await Blablabla. Falsch Catch. Das habe ich eben. Ach so. Ah. Muss man das dahinter schreiben?
So was hier. Achtung Leute. Gucken, ob das jetzt funktioniert. Bam. Ja. Ja. Das funktioniert.
Coggers Leute. Nice. Error Handling in 2K18. Ah. Mein Chat ist halt einfach der beste. Mein Chat weiß halt Bescheid.
Das sieht überall hässlich aus. Egal, wo ich es hinschiebe. So. Nee. So. Nee. Sieht ja egal, wo ich es hinschiebe. Kacke aus.
Wir lassen es da hinten dran hängen. Ok. Sehr schön. Sehr, sehr nice. So. Jetzt müssen wir unseren AP Controller. So. Ja. Ja, warum nicht? Ja, stimmt. Sieht doch ganz hübsch aus.
Ok. So. Jetzt müssen wir uns dem Server irgendwie beibringen, dass er die Upload-Geschichte entgegen nimmt. Und dazu muss ich, weil meine Standard-Routen komplett fail sind, die werfe ich einfach mal alle raus.
Sonst reagiert das überhaupt nicht auf Upload. So. Dann sagt man eben hier, für welche Route er zuständig ist. Route. Und zwar ist er zuständig für slash ap slash upload.
Das ist das. Also sprich, nur so zur Erklärung, wenn man jetzt sagt, ich rufe auf meinem Server auf, also quasi sowas hier, ap slash upload.
So. Dann muss er ja wissen, welchen Code er letztendlich aufruft dahinter. Und das sagt man hiermit. Ok. Upload. Und das Ganze ist ein HTTP-Post. HTTP-Post.
Kein Get, sondern ein Post. Weil wir wollen ja was schicken. Also wir wollen ja was zum Server schicken. Wir wollen nichts abrufen. Da wäre es ein Get. Wir wollen was posten. Zum Server. So. Upload.
Dann müssen wir eben natürlich auch noch sagen, was wir haben. Ok. Scheiß. Wie macht man, ich bin echt jetzt überfragt. Wie macht man denn jetzt einen Image-Upload? Wie macht man das jetzt richtig? Datei-Uploads in ASP.NET Core. Also wir sind heute wirklich Weltmeister im Googeln.
Highform-File. Post. Ok, die schreiben das ein bisschen anders, aber das ist wurscht letztendlich. Ok, wir kriegen eine Liste mit Files. Das ist von der Idee her auch logisch, weil ich kann ja mehrere Dateien markieren und hochladen.
Ok. Eine Stunde geht Fußball aus. Alter Fußball. Also ich glaube ich werde es mir heute echt mal geben. Ich glaube ich gebe mir heute mal eine Runde Fußball. So Files. Files kann ich mal angucken. So.
Also brauchen wir im Endeffekt das hier. Lists. Muss man erstmal einbinden.
Fußball. Doch. Normalerweise bin ich richtiger Informatiker, was Fußball angeht. Ich gucke nie Fußball. Ich gucke nie Fußball. Ich habe aber auch früher nie Fußball geguckt. Was ich früher gerne geguckt habe ist, wahrscheinlich werde ich jetzt sagen, wie kann man sowas gucken.
Ich habe immer gerne Tour de France und sowas geguckt. Als ich noch ein bisschen jünger war. Als ich in Ulrich noch am Start war und sowas. Da habe ich immer Opa zusammen geguckt immer. So Rundfahrzeugs.
Upload Files. Ich habe keine Ahnung ob das funktioniert. Ok. Wir geben jetzt mal 200 zurück. 200 ist immer gut. 200. Easy.
Und jetzt lasse ich mir mal ausgeben, falls das in irgendeiner Form funktionieren sollte, ist es beim Programmieren eigentlich normal, dass man fast 95% der Zeit auf Stack Overflow ist oder Sachen googelt. Ja.
Nicht falsch verstehen. Das gibt es nicht falsch verstehen. Ist so. Ist so. Ist so. Wenn 75% mal reichen. Wenn du was neues lernst, sind es wahrscheinlich sogar 90%.
So. Ob das jetzt funktioniert? Ich glaube ja nicht, aber probieren wir mal aus. Vielleicht sollte man eine Konsolenausgabe einstellen.
Danke, dann kommst du wieder. Also du musst dir nicht blöd vorkommen, wenn du googelst. Das ist vollkommen normal. Das ist das Normalste der Welt. Stack Overflow gucken, googeln. Ist das JavaScript? Das ist C-Sharp. Das ist JavaScript.
So. Jetzt bin ich ja mal gespannt, ob das jetzt irgendwie funktioniert. Ok. Ich track and drop jetzt mal ein Bild. Oh. Not acceptable. Warum nicht? Moment.
Ach so. Ja, weil das das falsche Format ist, in dem ich das schicke.
Wir haben Leute vor Google programmiert. Sehr viel langsamer. Sehr viel langsamer und für jeden Scheiß das Rad neu erfinden. Arbeitest du mit ASP.NET? Ja, das ist ASP.NET Core 2.1? 2.0? Ich glaube 2.0.
Es ist ja auch klar, dass das nicht funktioniert, weil das Format nicht stimmt, in dem ich das schicke. Das Format ist fail. Ich kann nicht einfach die Files da dran hängen.
Da muss ich, siehste? Google. Upload. Files. JavaScript. I form data. Ok. Form data. Das heißt ich, achja gut, ich hängs aktuell einfach nur als dieses komische File Objekt dran, was ich kriege. Ich muss das als Form data posten. Also quasi wie, wenn ich das in so einem File select Dialog drin hätte.
Ja. Form data append. Append. Append user file. File input elements file. Input. Ok, wir haben aber kein Input. Aber wir haben eine Files Liste. Das machen wir jetzt einfach mal so. Wir machen das so. Jetzt wird einfach mal ganz eiskalt wieder copy pasted.
So. Files. Also Form data. Eine Schleife über das ganze. File. Nein. File. Of files. Und dann sagen wir Form data append. File.
Und jetzt gucken wir, ob das Scheiß funktioniert. Ups. Was hab ich jetzt gemacht? Ah, ich hab F5 gedrückt. Das war keine gute Idee.
Wie wurde eigentlich der erste Compiler kompiliert? Gar nicht. Achso. File. Files. Irgendwie so. Files. Ja. Ja. Ja. Ob das jetzt klappt. Ich bin skeptisch.
Fuck. Ha. Ah, Moment. Vielleicht soll ich auch das Richtige pasten. No happy meal, mein. So. Not acceptable.
Ha. Was mach ich denn jetzt falsch? Was mach ich jetzt falsch?
Hm. Warum klappt das jetzt nicht? Was mach ich denn falsch?
Hm. Happy upload. Ist in meinem Controller irgendwas falsch?
Ah. Muss das da hin? Mit oder ohne Slash? Ah, bin ich mir nicht so sicher.
Okay. Probieren wir es nochmal aus, ob ich mich da vielleicht irgendwie verschrieben hab. Aus Versehen. Ach. Fuck. Was ist denn das Problem jetzt, Alter? Wo ist das Problem?
Was? Warum spackt es denn jetzt rum? Was mach ich denn falsch hier? File upload. Ha.
Hm.
Was ist daran denn jetzt bitteschön falsch?
Was? Was ist daran jetzt verkehrt?
Not acceptable. Hab ich irgendwie zu viel Zeug deaktiviert oder was?
Schauen wir mal. Schalten wir alles an.
Ha. Ich hab irgendwas war nicht aktiviert, was aktiviert sein musste. Okay. Was auch immer. Was auch immer. Sehr, sehr nice.
Okay. Das funktioniert. Das funktioniert. Also das Upload funktioniert. Jetzt müssen wir nur noch gucken, wie ich auf Serverseite dieses Bild irgendwie speichere. Funktioniert. Sehr, sehr nice.
Okay.
Okay.
Aber der Upload klappt. So, jetzt muss ich nur noch gucken, wie man das Bild irgendwie speichert. So, das Result brauchen wir nicht.
Okay, dann speichern wir den Kram jetzt mal. Ach nee, wir müssen auch noch hier eine Sache einbauen und zwar, dass wir nur.
Wir akzeptieren nur Images. Richtig. Wir akzeptieren nur Images. Und das müssen wir Serverseitig und Kleinseitig machen, weil ich mein, Kleinseitig kann jeder, jeder machen, was er will.
Beziehungsweise.
Eigentlich können wir drauf scheißen, wir machen das nur Serverseitig. Wenn irgendwie einer so doof ist und lädt da Scheiße hoch, dann nehmen wir es einfach Serverseitig nicht an.
So, also for each, File in Files, File Type, Content Type. So, Content Type ist dann wahrscheinlich so was wie Image slash PNG und sowas.
Startet muss starten mit Image. Ansonsten wollen wir es gar nicht.
Das machen wir hier mit Link, dann ist das viel schöner. Select, F, Content Type starts with Image.
Das heißt, wir nehmen jetzt nur die Bilder, die auch mit Image starten. Und nu.
So, und nun speichern wir das irgendwo. Also, File, was gibt es denn da alles so?
Objekt. Objekt, das muss iPhone-File sein. Objekt, the fuck? Wegen dem Select oder was?
Ja, wegen dem Select, was auch immer. Das War ist eigentlich nur so eine taktische Geschichte. Also guck, wenn ich über das War gehe, der weiß, dass das ein iPhone-File ist.
Also, so oder so ist genau das gleiche. Das ist einfach nur kürzer. Also, War ist in sich nicht wahr. Ich habe auch, ehrlich gesagt habe ich keine Ahnung. Also, War ist quasi nicht, ist quasi halt einfach nur für Variable anlegen, nicht, dass der Typ Variabel wäre.
Ja klar, ich kann es danach wieder casten, aber warum weiß er das nicht, dass es ein iPhone-File ist? Was soll das sonst sein? Das ist eine List auf iPhone-File. Keine Ahnung, da war mir das If drin.
War ist nicht wahr. Content-Type, Start, das schreiben wir jetzt gleich zum zwanzigsten Mal. Image, so. Wenn das, wenn das ein Image, wir machen das einfach so, wenn das, wenn das ein Image ist, dann...
Ach, Wear, nicht Select. Ach, ja, WTF, klar, natürlich. Oh Mann. Ja, klar ist es Wear, nicht Select. Oh Mann. Das ist zu viel, zu viel Sprachen, Müschtmasch. Da blickst du aber durch.
Ich glaube, in Javascript ist Select, oder was, in Javascript war es Filter? Ja, genau. In C-Sharp ist War quasi einfach nur syntaktisch. Das ist immer fest.
Deswegen, nur mal so zu erklären, ich kann sagen War, Plup ist eins, allerdings was da nicht geht ist das hier. In Javascript wird das funktionieren, dass ich quasi erstmal sage Plup ist eins und danach ist es in String irgendwas, geht aber in C-Sharp nicht.
Weil, sobald das Ding einmal angelegt ist, sieht man auch hier, dass es in 32 und das ist, bis dieser Scope hier fertig ist, ist es immer in 32. Javascript ist Filter, ok. Moin Informatiker, underscore, Formatikorps.
Ok, also File, blablabla, Plup. So, und nun will ich das Ding einfach mal irgendwo serverseitig wo hin speichern, einfach nur damit ich weiß, ob das funktioniert mit dem Upload.
Copy2, oh nice, da ist schon alles eingebaut. Also ich mag ohne Scheiß die, man kann auf Microsoft viel rumhalten, aber die.NET, das ist ja nicht mal die.NET Standard Library, halt die ganzen offiziellen.NET Libraries, die sind alle super durchdacht, das macht Spaß damit rumzubasteln, das ist einfach schon alles dabei.
File, Copy2, ok, was jetzt hier noch fehlt ist File, Copy2 und dann da Teilnahme, da muss ich jetzt halt selbst machen, also dass ich da irgendwie sowas sage wie Using, File, Dot, File, Reader, File, File, File, Stream, ne, warte mal.
File, was gibt es denn File, ich weiß nicht, achso, weil es doppelt belegt ist, lull. File, File, Stream, Stream, Stream gleich, File, Stream, File, Stream müssen wir importieren, zack.
So und zwar File, Stream für File, File Name, ok, dann speicher das jetzt einfach im aktuellen Verzeichnis, wo es läuft, das Bild, das ist ja ok.
Mode, Create, ok, so und dann sage ich File, Copy2, das ist halt wirklich Eats, Stream und dann sollte, also von der Idee her sollte ich jetzt ein Bild,
no happy meal for you habe ich gehört, aber hat er nicht Berufung nochmal eingelegt, dass er nicht ausgeliefert wird.
So also von der Idee her, ich track and drop jetzt ins Webinterface ein Bild und dann erscheint das hier.
Bam, easy clap, funktioniert, Bilder Upload klappt.
Sogar ziemlich easy, das war, also das war jetzt wirklich nicht schwer.
Ja, das ist geil, wie gut das funktioniert. Moin, Mango United Gaming, das war jetzt wirklich einfach, viel einfacher als ich mir das vorgestellt habe.
Ok, weiter im Text, also wir haben jetzt noch 40 Minuten Zeit bis Fußball losgeht, dann machen wir das mal.
Also wir schaffen es jetzt Bilder hochzuladen, das heißt wir wollen ja eigentlich nicht die Bilder hochladen in irgendwie ein Verzeichnis,
sondern in das Memeverzeichnis, dass es dann da erscheint, das heißt ich muss jetzt erstmal mir ein Memelippo besorgen, wo ich mir den Fad hole.
So, das muss man noch hier injecten, dass es funktioniert. Magic, mehr muss man dazu nicht sagen, also sprich dadurch, dass ich das jetzt hier beim Anlegen von dem Server eingegeben habe,
kann ich jetzt das Repo auch auf Magic Art und Weise irgendwie hier verwenden, weil Magic, so und jetzt heißt ich kopiere das Ganze jetzt in Tag, also der Fad,
der Fad, wo das Bild hin muss, ist PathCombine und zwar mein Meme-Ordner, der da plus Filename von dem hochgeladenen Image und dann kopiere ich das dahin.
So, wenn das jetzt alles funktioniert, dann sollte jetzt folgendes passieren, ich track and drop jetzt quasi hier in den Meme rein, wenn man irgendein 20 noch nicht drinne hat,
so das da zum Beispiel, ich track and drop das hier jetzt rein und dann, das müssen wir mal Vollbild machen, dass man es sieht und dann lädt er das zum Server hoch, also ich ziehe das hier rein,
dann kommt das Upload auf Alley, ich lasse den Maus, ich lasse jetzt los, dann lädt das zum Server hoch und fügt es hinzu. Das hat nicht funktioniert.
Warum nicht? Moment, warum hat das nicht funktioniert?
Warum hat das nicht funktioniert? Ah, weil ich, oh ich noob, guck mal, ich habe den Ort nicht eingetragen, der hat es jetzt wieder, guck mal, da hat es jetzt wieder in dem Verzeichnis von vorher gespeichert.
Ah, da ist es, da soll es ja gar nicht hin. Ja, Spatzgranate, hast du recht, das war eher Spatzbremse hier gerade, dass es nicht funktioniert.
So, nu aber, ok, nochmal. Warum kann, ich muss mich jetzt mal kurz über Windows nochmal auskotzen, warum kann der Windows Explorer keine Tabs?
Ich meine, WTF Microsoft, warum? Guck mal, im Windows Explorer spätestens, wenn man vier so Dinger, drei so Dinger auf, du blickst nicht mehr durch, du hast keine Ahnung, warum kann dieses Scheiß Ding keine Tabs? Ich verstehe es nicht. So, easy.
Ha! Bam! Oh, ich habe es irgendwie kaputt gemacht. Ah, ok, das muss ich noch ausschalten, dass es nur für externe Bilder geht und nicht für eigene Bilder. Aber es hat funktioniert.
Wird die App dann immer über den Browser angesprochen? Ja gut, die App an sich hat ja kein User Interface. Die App an sich funktioniert ja über Shortcuts, wie die hier siehst.
Also, das da. Also, da hast du Shortcuts an deinem Streaming Rechner. Das Web Interface ist ja dafür gedacht, dass man das vom zweiten Rechner oder vom Smartphone oder Tablet bedienen kann. Und das ist, wenn man sich das mal überlegt, auch die einzig sinnvolle Variante, eine Oberfläche zu machen für ein Tool, was quasi im Hintergrund sein soll während dem Streamen.
Deswegen ist die einzige Oberfläche, die es gibt, halt Web Interface, weil es die einzig sinnvolle Sache ist an der Stelle. Aber man hat gesehen, Track & Drop funktioniert sehr nice.
Ja, Stream Deck Integration machen wir noch. Allerdings ist meins, finde ich, ich finde mein Tool ist besser in einem Punkt als Stream Deck, deutlich besser. Und zwar der Streamer sieht selbst, was er anzeigt. Und das ist der hauptsächliche Grund, warum ich das Ganze überhaupt programmiert habe.
Das Problem nämlich mit Shortcuts in OBS und Stream Deck und sowas ist, das ist quasi per OBS Plugin. Also, der rendert das in OBS rein, aber du selbst siehst es nicht. Das heißt, wenn ich jetzt einen Shortcut habe im OBS und blende das hier ein.
Ich blende irgendwas ein in OBS über einen Shortcut. Dann lasse ich es eine halbe Stunde eingeblendet, weil ich es selbst nicht sehe. Und außerdem haben wir ja noch super Features wie Kogas schnell und Kogas langsam. Das ist witzig, weil ich habe ja eingebaut, dass man Bilder drehen kann und sowas.
Und wenn man jetzt einen lustigen Effekt ergibt, wenn man hier Lull Shake macht. Wenn der Streamer das nicht selbst sehen will, dann würde ich das nicht verwenden. Aber das war ja gerade auch die Aufhängung bei mir. Ich wollte es ja gerade sehen.
Ja, ein X-Button zum entfernen braucht auch noch Max. Das ist richtig. Das können wir jetzt eigentlich auch noch machen. Das probieren wir jetzt mal aus, ob wir das noch hinkriegen. Nee, nee, nee, machen wir nicht. Wir müssen unsere krassen Animationen hier oben noch machen, während Upload ist.
Das witzige ist, dass man jetzt quasi Kogas, weil es sich ja schon dreht, wenn ich die Drehanimation mache, dreht sich schneller. Hyper Kogas ist das dann.
Guck, das hier, das ist normal Kogas. Das ist Hyper Kogas. Kannst du aber, was, kannst du ja aber eigentlich noch einbinden? Rendern für eine Videoquelle, aber nicht für einen selbst. Was meinst du?
Das verstehe ich jetzt nicht. Was, Rendern für eine Videoquelle, aber nicht für einen selbst?
Du meinst, dass man das dann nur ins OBS rein kriegt? Na gut, aber wenn ich es doch nur im OBS machen will, dann kann ich ja auch OBS Shortcuts verwenden. Und das ins OBS rein zu kriegen, ist ein größerer Akt, da müsste man... Nee, das geht nicht.
Weil aktuell seht ihr es ja im Stream, weil OBS mein Screen crappt.
OBS crappt den Stream. Also mein Screen und deswegen sieht man es ja. Ich muss es selbst sehen, dass OBS das auch sieht.
Wenn ich das nur in OBS... Man kann es allerdings auch nicht mit Fullscreen crappt machen, weil man sieht es ja hier. Das Programm hat ja hier ein Hauptfenster, sprich das kann ich auch mit OBS crappen, wenn ich es haben will.
Aber das nur ins OBS reinrendern ist ziemlich kompliziert. Das müsste man dann mit irgendeinem OBS Plugin oder sowas machen. Nee, das übersteigt meine OBS Skills.
Ist es nicht möglich per Browser Source in OBS das einfach auf einer Seite anzeigen zu lassen? Das ist eine gute Idee, doch...
Das mit Browser Source ist eine... Das mit Browser Source ist eine gute Idee. Geht das dann auch bei Game Stream? Das geht bei allem.
Das geht bei allem was dein Bildschirm aufnimmt. Das hat nichts mit OBS oder so zu tun. Weil du siehst es ja selbst und weil du es selbst siehst kannst du mit allem aufnehmen.
Aber das mit Browser Source finde ich jetzt eine gute Idee. Das könnte man noch einbauen, dass der quasi das ausgibt auf irgendeiner Seite oder so.
Ja, das geht. Dass man beispielsweise hier noch so ein Output tappt. Das könnte man machen. Mit Browser Source könnte funktionieren.
So, aber jetzt müssen wir noch unser Rädchen hier oben zum Spinnen kriegen. Wenn der Upload läuft. Echt mal guck mal, das ist doch keine Usability hier Windows.
Da blickst du doch nicht durch. Windows. Zu Windows kann ich nur sagen...
Omega Little. Omega Little. Omega Little.
Fidget Spinner als Settings Symbol. Wenn du denn den Emoji Fidget Spinner hast, dann geht das.
Ok, Track and Drop funktioniert. Sehr schön.
Black Dare. Doch, du musst einfach beides Captchern. Also entweder captcherst du deinen kompletten Monitor. Dann ist natürlich immer drauf. Oder du stellst dem OBS halt ein, dass du quasi dein Bild, dass du dein Game captcherst.
Plus jetzt halt zum Beispiel. Kannst doch hier sagen...
Irgendwie Window Capture. Wo geht denn das Scheiß hier?
Window Capture.
Ok, dann muss ich Game Capture machen. Irgendwie.
Also es funktioniert prinzipiell. Du musst dann einfach im OBS einstellen, dass du das Fenster auch noch captcherst.
Wenn man es richtig macht.
Wobei ich mich frage, warum das das nicht Captchern kann.
Also mir ist nicht ganz klar, warum sich das jetzt nicht Captchern lässt. Es müsste sich eigentlich ohne Probleme Captchern lassen. Aber von der Idee her funktioniert das.
Warum lässt es sich denn nicht Captchern?
Hä?
Achso.
Ja, wahrscheinlich weil ich das...
Hä?
Also ich weiß ehrlich gesagt nicht, warum sich das gerade nicht Captchern lässt. Bin ich überfragt.
Aber von der Idee her sollte sich das in OBS auch Captchern lassen. Dann kannst du beides Captchern und gut ist.
Muss ich mal gucken, warum das OBS nicht Captchern kann.
Da machst du nämlich einfach Window, Window Captcher und musst es halt nochmal ein Overlay im OBS machen. Ich bin jetzt aber echt...
Ich hab keine Ahnung, warum das denn funktioniert.
Ich bin jetzt echt überfragt, warum das das hier nicht Captchert. Keine Ahnung.
Ist auch egal. Ich hab eh immer Full Display. Und das muss ich mir mal angucken, warum es das nicht Captchert.
Alter, es gibt einen Fidget Spinner Emoji. Allen Ernstes, ja? Ist das wirklich jetzt... Ach du Scheiße. Warum?
Also von allen Emojis diese... Aber sieht kacke aus, guck mal. Sieht scheiße aus. Fidget Spinner Emoji.
Das sieht des Kogas doch besser aus.
Ja, Promise. Ich hab es aber gerade angezeigt. Aber wie gesagt, keine Ahnung, warum das nicht funktioniert.
Das muss ich mal ausprobieren. Vielleicht muss man OBS auch nochmal neu starten, nachdem man das Programm gestartet hat.
Oder irgendwie sowas. Aber es müsste gehen, weil es ist prinzipiell ein ganz normales Fenster, wie jedes andere Fenster auch.
NvEng ist doch voll der schlechte Codierer. Mit gleicher Bitrate sieht NvEng schlechter aus.
Aber es macht halt keine Last auf dem System, was dann wieder ganz gut ist.
Und mittlerweile kann man ja auf Twitch mit ein bisschen höherer Bitrate streamen. Da geht das eigentlich schon.
Moin, xAzerbaidscher an.
So, wir wollten das spinnen lassen, wenn Upload an ist.
Das müssen wir jetzt noch machen.
Wir haben noch eine halbe Stunde Zeit.
Also, Drag Over.
Also wir brauchen noch eine neue Variable.
Drag Active. Wir müssen sowas wie Is Uploading oder sowas machen.
False. Is Uploading.
So, und wenn Is Uploading, dann wollen wir sowas hier machen.
Wenn das hoch lädt, dann setzen wir hier unser Kogas Class.
So, und von der Idee her, wenn Is Uploaded, soll sich das drehen.
Funktioniert. Also, Ich hab's jetzt mal negiert.
Also wenn Is Uploaded, das heißt, das muss ich jetzt hier drinnen noch setzen.
Das finde ich an View geil. Das ist mega einfach.
Wie gesagt, ich hab mir ein paar Tutorials angeguckt und flutscht.
So, im Prinzip sag ich hier einfach, also sag ich hier davor schon, sag ich hier, Is Uploading.
Und wenn das fertig ist, so.
So, und von der Idee her, wenn Ich jetzt was hochlade, sollte sich das drehen.
Probieren wir mal aus.
Ja, habt ihr's gesehen?
Warum geht das jetzt nicht nochmal?
Ach doch, der ist nur einfach zu schnell.
Ja guck, wenn ich mehr hochlade, dann geht's auch.
Seht ihr's?
Also wenn wir da jetzt was Großes hochladen würden, dann geht das.
Ich mein, es sieht ganz schön räudig aus, wie das humpelt, ja.
Haben wir hier irgendwas Größeres, was ich hochladen kann?
Ich werf's ja Server-seitig eh weg.
Ah, ich guck nochmal, werf ich Server-seitig weg?
Ja, genau, ich werf Server-seitig weg.
Haben wir noch ein bisschen was Größeres hier, was ich uploaden kann?
Aufnahme zu Meltdown, Aufnahme zu Antivirus, ja.
Ja guck, das lädt ein bisschen länger hoch.
Der hat gesagt, gibt's nicht, mach ich nicht.
Und der hat's halt gecasht, der Browser, deswegen geht das jetzt so schnell.
Aber es funktioniert, wir können das übrigens ganz einfach simulieren,
wenn der Upload etwas länger dauert.
Können wir einfach simulieren?
Ach Quatsch, wir simulieren jetzt einfach mal, wenn's wieder etwas länger dauert.
Der Upload dauert jetzt 5 Sekunden auf Server-Seite.
Guckt, solang der Upload läuft, Coggarts vor sich hin.
Der ist sehr nice, ich bin begeistert.
Oder in DevTools einstellen, ja, aber so ging's jetzt auch.
Man hat ja gesehen, dass das prinzipiell geht.
Was mir natürlich nicht gefällt, ist, dass es so eiert.
Ich mach jetzt das Fidget Spinner Emoji.
Fidget Spinner.
So, und wir stellen jetzt mal ein, dass das immer rotiert, auch ohne Upload.
Das sieht so richtig kacke aus.
So, da waren wir die.
Wir müssen jetzt eh gleich Schluss machen, weil hier klein 17 Uhr ist.
Das Poise machen wir noch ein bisschen fancy.
Das sieht übelst kacke aus.
Das sieht übelst kacke aus, der Fidget Spinner.
Und so ganz rund ist der auch nicht, oder?
Da bleib ich lieber mal hier bei meinem Coggarts, auch wenn das irgendwie ein bisschen humpelt.
Ja, dann ist da noch was.
Wie kriege ich denn den Button da jetzt irgendwie rüber?
Wir machen das jetzt noch ein bisschen hübscher.
Wie kriege ich denn den Button da irgendwie rüber jetzt?
Dann machen wir noch mal ein eigenes Diff drum.
Ha, nice.
Jetzt hängt es aneinander.
Da machen wir jetzt noch ein Padding dabei und Margin auf der rechten Seite, den Button.
15 Pixel, ja.
Ist doch ganz nice.
Kann mir mal jemand erklären, warum die Buttons jetzt vertauscht sind?
Warum sind die jetzt vertauscht die Buttons, nur weil ich einen Diff drum gemacht habe?
Ach so.
Deswegen, ja.
Transform Origin Property.
Ja, sowas in der Richtung haben wir vorhin schon probiert, dass wir hier irgendwie noch
irgendwie Translate oder irgendwie sowas gemacht haben.
Oder wie wird das jetzt?
Ja, irgendwie sowas haben wir vorhin schon ausprobiert, aber ja.
Das ist eklig.
Was macht denn Translate 3D?
Keine Ahnung.
Aber das sieht doch, ich meine, man muss sagen, ich meine, ihr erinnert euch vielleicht
auch daran, wie räudig der erste Versuch vom Web-Interface ausgesehen hat.
Vielleicht macht jemand einen Pull-Request.
Ja, genau, stimmt.
Also Leute, wenn ihr da gute Ideen für habt oder noch ein paar Sachen einbauen wollt,
also Pull-Requests sind immer willkommen.
Ich habe hier auch noch ein paar auf, die sind leider schon ein bisschen älter, beziehen
sich aber auf das quasi dieses unsichtbare WPF-Fenster, wo man Rotationen sowas so einstellen
kann.
Das heißt, das stand jetzt noch nicht auf dem Programm in letzter Zeit, dass ich daran
weiter gebastelt habe.
Aber wenn ihr da noch was habt, ihr könnt gerne alle Pull-Requests aufmachen, die ihr
wollt.
Wir haben auch ein paar gemercht letztens schon.
Aber hier vom Auskern Fuchs das letzte Mal, genau, vom Max hier, der sich die Buttons hier
ausgedacht hat.
Aber ich muss sagen, es ist doch echt schick geworden.
Jetzt kann man hier oben suchen, sucht man nach POG, findet man die beiden Dinger, ist
ja ganz logisch.
Drückt man Enter, zeigt er das erste an.
Das ist übrigens doof, dass der jetzt das Diff so breit macht.
Der macht das Diff so breit, weil wir super responsive sind.
Wobei eigentlich finde ich gar nicht so schlecht, dass er das komplett anzeigt.
Monka Shake können wir hier auch simulieren.
Sieht man das eigentlich im Webinterface, sieht man das im Stream richtig?
Warte mal, das muss ich mir jetzt mal angucken, Leute.
Ich muss mir jetzt mal meinen eigenen Stream angucken.
So, sieht man das?
Ja, man sieht das, Monka Shake.
Ja, übrigens, der Sebaro hat ein Archiv gebaut.
Äh, nee, der Sebaro hat ein Archiv gebaut, das heißt, falls ihr irgendwas gesehen habt,
mal in einem älteren Stream und es ist auf Twitch nicht mehr da, weil Twitch löscht
es ja nach einer Zeit.
Und wenn die Seite dann eben mal fertig geladen ist, es gibt maxfps.tv und es gibt wubblos.tv,
kann man hier im Archiv gucken, hat der Sebaro gebaut.
Das sind alle Streams seit September dabei.
So, das nächste, was wir machen, ist, dass wir jetzt noch ein kleines Video machen, das
ist, also im nächsten Stream, wahrscheinlich morgen, weil es wird mal Zeit, wir stellen
das um.
Und das ist das einzige, was ich noch machen will, bevor ich quasi so mal die erste Version
von dem Ding hochlade, die jeder benutzen kann, also die erste nicht-ultra-alpha-test-Version,
und zwar, ich will das Umstellen von einem Ordner, wo alles drin ist, auf einen Ordner
plus eine Lightdb, wo man dann auch ein paar Sachen drin speichern kann, weil aktuell ist
es ja so, ich habe keine Möglichkeit, irgendwo Settings zu speichern, also den Shortcut kann
ich hier quasi mit diesem komischen Hack, quasi Shortcut-Dateinahme reinbauen.
Ein Auto-Updater, Max, das machen wir auch noch, stimmt, stimmt, die zwei Sachen, stimmt,
muss ich mal kleiner aufschreiben, weil die zwei Sachen, da weiß ich auch schon, wie
wir das machen.
Also ein Auto-Updater braucht es nicht, es braucht einen Updater, mal gucken, also sprich,
wir sind ja unter Windows, da wird ja alles runtergeladen und von Hand installiert, das
heißt, wir brauchen einen Updater, ich mache es einfach so, dass das Ding nachguckt, ob
es eine neue Version gibt, und dann sagt es hier, hallo, neue Version ist verfügbar,
das ist dann relativ simpel, so und wir stellen das um von eben nur diesem Ordner, wo die
Bilder drin liegen, auf eine Lightdb mit, ja, wo man dann sich ein paar Sachen drin merken
kann, zum Beispiel, dass man dann, wenn man mal genommen hat, hat es da 50 Bilder drin
und man möchte ein paar favorisieren, dass die immer oben stehen und sowas, ich habe
aktuell keine Möglichkeit, irgendwo zusätzliche Infos zu speichern, oder Settings, dass ich
nicht Ctrl-B haben will für das Bild, sondern vielleicht Alt-B oder so, ich habe keine Möglichkeit,
Settings zu speichern, das heißt, da machen wir noch eine Lightdb drunter, die Bilder bleiben
weiterhin im File-System liegen, weil die machen wir garantiert nicht in die Datenbank
rein, und das mache ich noch, und dann hauen wir die erste Version raus hier, vielleicht
morgen schon, mal gucken, wann kann das jeder verwenden, das ist halt ein Tool, was aus
dem, was ich brauche für ein Stream, entstanden ist, und ihr habt ja quasi alles mitverfolgt,
von Anfang an, konntet ihr das ja quasi mitverfolgen, wie das entstanden ist, dieses Tool, und was
ist so eine Frage jetzt, für die, die seit Anfang an dabei sind, die ersten Sachen,
wo ich rumgewurstet habe hier, das ist schon ganz gut geworden mittlerweile, von den ersten
Anfängen, wo wir es gerade mal hingekriegt haben, irgendwie mit Fehlermeldung noch Bilder
anzuzeigen, zu einem Web-Interface, wo man drinnen suchen kann, dass alles quasi Echtzeit
geupdatet wird, wenn ich das anzeige, plus, dass ich sogar noch Text-to-Speech abspielen
kann, und das sogar automatisch wieder deaktiviert, wenn das fertig abgespielt ist und sowas.
Ach ja, und dass wir Memes löschen können, das muss man auch noch einbauen, das wird
aber ein bisschen schwer, ohne dass ich diese Datenbank-Geschichte eingebaut habe, weil
aktuell ist es ja so, es ist entweder auf dem File-System da oder nicht, und wenn ich
ein Bild hier quasi anzeige, kann ich es nicht löschen, und selbst wenn ich das nächste
Bild anzeige, kann ich das davor nicht löschen, weil das noch offen im Cache ist, das heißt,
da muss ich die Light-DB noch dazwischenladen.
Und dann bauen wir ein, dass wir noch Memes löschen können, genau, die drei Sachen machen
wir Updater, Light-DB und Memes löschen, sondern ich glaube, ich werde das Ganze hier
rein verpacken, das ist so ein Setup-Creator für Windows-Zeug, allerdings ohne großartigen
Installer, also das klickt man einfach an und dann startet das und kopiert es dann in
App-Folder, in App-Data oder so hin, das ist super simpel und hat dann Updater dabei,
also sprich, das kann einem dann sagen, hier, guck mal, gibt eine neue Version und kann
sich das auch runterladen und sowas, und die Installation wird auch nicht schwerer, einfach
runterladen, anklicken, gut ist, übrigens, muss ich hier nochmal zeigen, wo man sich
nicht so sehr verwirren lassen kann, darf es, ich habe hier schonmal eine Testversion gepusht
letzte Woche, die sieht aber noch viel, viel, allein schon zwischen der ersten Version,
die ich gepusht habe und jetzt sind schon Welten dazwischen, nur mal um das zu zeigen,
wenn man das runterlädt, dann ist mindestens der Meinung, weil diese Datei noch nicht
oft genug runtergeladen wurde und ich glaube, Chrome meckert schon, oh nein, mittlerweile
nicht mehr, oder, doch, genau, dann ist Windows ja der Meinung, oh, das ist eine, von einem
Unknown Publisher runtergeladene Datei, oh mein Gott, da muss man einmal bestätigen
und das geht nach einer Zeit wieder weg, jetzt gucken wir uns nochmal ganz schnell an, wie
das Programm vor einer Woche ausgesehen hat, weil es war noch ein bisschen anders,
ich weiß gar nicht mehr, wie ich den Scheiß aufrufen musste, habe ich sie irgendwie reingeschrieben,
ah hier, so, so musste man das damals noch aufrufen, ok, noch nichts, nichts, ok, wartet
mal, Downloads, Memes, ziehen wir mal was rein, ich glaube, das hat damals schon funktioniert,
ja, so sah die Oberfläche letzte Woche noch aus, ihr seht den Unterschied, oder, das
ist schon ein Unterschied, das da, oder das da, ja und unser Theme-Switcher und sowas,
sehr, sehr nice, für die Epilepsischen Anfälle, guckt mal, seht ihr das hier, wie das Symbol
invertiert wird, weiß, schwarz, weiß, schwarz, je nach Theme, das ist richtig, das ist massiv
poggers, achso, es läuft ja gar nicht mehr, kann es auch nicht angehen, ja ja, Omega Lone,
ja, so siehts aus, graues Symbol wäre schöner, wo, was für ein graues Symbol hat Omega Lone,
eh, achso, ich habe Brüssel Studio zugemacht, Code zugemacht, da kann es natürlich nicht
funktionieren, grau anstatt schwarz, ja, da muss ich mal gucken, wie das geht, weil, das
ist ziemlich primitiv, wie ich das mache, das ist ein SVG, ich sag einfach invert, vielleicht
kann man sagen, probieren wir mal aus, invert 80%, ja, guckt daher, grau, ja gut, das andersrum
geht da natürlich nicht, weil, weil das ursprüngliche Symbol ist schwarz, kann man das in CSS, kann
man SVG, color changen, geht das, das wird mich mal interessieren, was ist das für komische
Symbol, das geht nicht, ne, echt, wie, fill, fill, aha, aha, interessant, interessant, Poggers,
fill und dann, fuck, was zum Teufel mache ich da eigentlich gerade, ja, 65, 50 mal, gleich
los, achso, fill, fill, fill, color, color, color, was, what the fuck, geht das so, ups,
ob ich das jetzt richtig kopiert, Moment, was kopiere ich da, okay, keine Ahnung, wie
es funktioniert, das kriegen wir doch alles raus, wie lautet das jetzt überhaupt gerade,
ne, aus irgendwelchen Gründen reloaden wir das nicht, aber ist auch egal, wir machen
Schluss, ich hoffe euch hat es gefallen, morgen geht es weiter, morgen machen wir noch die
letzten drei Punkte, dass wir den Grams dann endlich mal, dass wir endlich mal eine Version
raushauen können, ich hoffe euch hat es gefallen, macht es gut, bis denn, tschüss.
