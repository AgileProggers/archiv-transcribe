1
00:00:00,000 --> 00:00:02,000
Das war's für heute.

2
00:00:02,000 --> 00:00:30,000
Das war's für heute.

3
00:00:32,000 --> 00:00:34,000
Das war's für heute.

4
00:00:34,000 --> 00:00:48,860
Das war's für heute.

5
00:00:48,860 --> 00:00:50,260
Das war's für heute.

6
00:00:50,260 --> 00:00:51,260
Das war's für heute.

7
00:00:51,260 --> 00:00:53,260
Das war's für heute.

8
00:00:53,260 --> 00:01:21,260
Das war's für heute.

9
00:01:53,260 --> 00:01:55,260
Das war's für heute.

10
00:01:59,340 --> 00:02:01,340
Das war's für heute.

11
00:02:01,340 --> 00:02:03,980
Das war's für heute.

12
00:02:03,980 --> 00:02:05,980
Das war's für heute.

13
00:02:05,980 --> 00:02:07,980
Das war's für heute.

14
00:02:07,980 --> 00:02:09,980
Das war's für heute.

15
00:02:09,980 --> 00:02:11,980
Das war's für heute.

16
00:02:11,980 --> 00:02:13,980
Es war's für heute.

17
00:02:13,980 --> 00:02:15,980
Das war's für heute.

18
00:02:15,980 --> 00:02:17,980
Das war's für heute.

19
00:02:17,980 --> 00:02:19,980
Das war's für heute.

20
00:02:19,980 --> 00:02:21,980
Das war's für heute.

21
00:02:21,980 --> 00:02:23,980
Das war's für heute.

22
00:02:23,980 --> 00:02:51,980
Das war's für heute.

23
00:02:53,980 --> 00:02:55,980
Das war's für heute.

24
00:02:55,980 --> 00:02:59,980
Das war's für heute.

25
00:02:59,980 --> 00:03:01,980
Das war's für heute.

26
00:03:01,980 --> 00:03:03,980
Das war's für heute.

27
00:03:03,980 --> 00:03:05,980
Das war's für heute.

28
00:03:05,980 --> 00:03:33,980
Das war's für heute.

29
00:03:36,980 --> 00:03:38,980
Das war's für heute.

30
00:03:39,980 --> 00:03:40,980
Das war's für heute.

31
00:03:41,980 --> 00:03:42,980
Das war's für heute.

32
00:03:42,980 --> 00:03:43,980
Das war's für heute.

33
00:03:44,980 --> 00:03:45,980
Das war's für heute.

34
00:03:46,480 --> 00:03:47,480
Das war's für heute.

35
00:03:47,980 --> 00:03:48,980
Das war's für heute.

36
00:03:49,980 --> 00:03:50,980
Das war's für heute.

37
00:03:51,980 --> 00:03:52,980
Das war's für heute.

38
00:03:53,980 --> 00:03:54,980
Das war's voor heute.

39
00:03:55,480 --> 00:03:56,480
Das war's für heute.

40
00:03:57,480 --> 00:03:58,480
Das war's für heute.

41
00:03:59,480 --> 00:04:00,480
Das war's für heute.

42
00:04:00,980 --> 00:04:01,980
Das war's für heute.

43
00:04:02,480 --> 00:04:03,480
Das war's für heute.

44
00:04:03,480 --> 00:04:05,480
Das war's für heute.

45
00:04:05,480 --> 00:04:33,480
Das war's für heute.

46
00:05:05,480 --> 00:05:07,480
Das war's für heute.

47
00:05:07,480 --> 00:05:09,480
Das war's für heute.

48
00:05:09,480 --> 00:05:11,480
Das war's für heute.

49
00:05:11,480 --> 00:05:13,480
Das war's für heute.

50
00:05:13,480 --> 00:05:15,480
Das war's für heute.

51
00:05:15,480 --> 00:05:17,480
Das war's für heute.

52
00:05:17,480 --> 00:05:19,480
Das war's für heute.

53
00:05:19,480 --> 00:05:21,480
Das war's für heute.

54
00:05:21,480 --> 00:05:23,480
Das war's für heute.

55
00:05:23,480 --> 00:05:25,480
Das war's für heute.

56
00:05:25,480 --> 00:05:27,480
Das war's für heute.

57
00:05:27,480 --> 00:05:29,480
Das war's für heute.

58
00:05:29,480 --> 00:05:31,480
Das war's für heute.

59
00:05:31,480 --> 00:05:33,480
Das war's für heute.

60
00:05:33,480 --> 00:06:03,440
Jetzt stell dir vor, du hast... was? Moment, das muss ich mal... was? Und jetzt stell

61
00:06:03,440 --> 00:06:09,720
dir vor, du hast den BWL-Unterricht nicht, weil keine Lehrer da sind, musst du es im November zur

62
00:06:09,720 --> 00:06:15,600
Abschlussprüfung... ja, das ist was in der Abschlussprüfung an BWL dran kommt, ist easy, easy as fuck hier. So ist das.

63
00:06:15,600 --> 00:06:23,720
Generell ist die IHK-Prüfung der absolute Witz. So, also gucken wir mal, was, was gibt es denn hier so im Umkreis?

64
00:06:23,720 --> 00:06:35,320
Umkreis, umkreis vor allem auf 50 Kilometer, Frankfurt am Main, dein Wunschberuf eingeben, okay. Fachinformatik, ah, okay, okay, es gibt ja gar keine

65
00:06:35,320 --> 00:06:43,560
Unterscheidung, alles klar. Okay, in Frankfurt, das ist der größte Scheißladen, Alter. ERTO, GmbH, ich hatte

66
00:06:43,560 --> 00:06:48,320
jemand in der Berufsschule, die war da, das ist irgendein Erotikunternehmen in Frankfurt, die haben

67
00:06:48,320 --> 00:06:58,840
so Webcam-Pornseiten und Zimmervermietung und... frag mich nicht, was die alles haben. Übelster Kackladen.

68
00:06:58,840 --> 00:07:07,440
Also, also der echte Proxy, geil mag das sein, allerdings nicht dort zu arbeiten. Also was die

69
00:07:07,440 --> 00:07:10,400
erzählt hat in der Berufsschule, muss das wirklich der allergrößte Mistladen sein.

70
00:07:10,400 --> 00:07:23,000
Ah, ne, ne, das muss übelst Ausbeutungsladen sein, wo keiner gerne arbeitet. Also das geht auf gar

71
00:07:23,000 --> 00:07:26,200
keinen Fall hin, ich hab da nur schlechtes gehört. Also ich kenn einen, der hat da eine

72
00:07:26,200 --> 00:07:31,000
Praktikierung gemacht, der fand's grausam, ich kenn einen aus der Berufsschule, der fand's grausam und mein jetziger

73
00:07:31,000 --> 00:07:35,440
Azubi, oder unser jetziger Azubi, der hat auch zwei Leute in der Berufsschule, die dort arbeiten, die

74
00:07:35,440 --> 00:07:41,080
finden's auch übelst kacke. Also es kann einfach nur Müll sein. Ist das nicht voll spannend? Ich glaube

75
00:07:41,080 --> 00:07:45,320
nicht, dass du für solche Sachen so zuständig bist, was du dir so vorstellst, sondern für ganz

76
00:07:45,320 --> 00:07:50,760
normales IT-Zeug nur, dass dir halt die Arbeit, dass sich die Arbeit abfuckt. Und die Leute,

77
00:07:50,760 --> 00:07:55,840
dein Chef und alles. Also was man da so hört, ist grausam, also hier würde es auf gar keinen Fall

78
00:07:55,840 --> 00:07:59,920
hingehen. Wir können ja mal suchen, wir können ja mal gucken, wir können ja mal gucken, was die

79
00:07:59,920 --> 00:08:04,960
sagen. Wir können ja mal gucken, was die sagen. Also was schreiben die denn? Wie gesagt, geht da

80
00:08:04,960 --> 00:08:10,720
nicht hin. Ich hab nur schlechtes gehört über den Laden bisher. Ausnahmslos, nur schlechtes.

81
00:08:10,720 --> 00:08:20,240
Nichts, nirgendswo was Gutes. Steht da nicht der Name? Der Name von denen dabei? Was schreiben

82
00:08:20,240 --> 00:08:25,760
die denn hier? Für unseren Standort suchen wir für 2020 Auszubildende. Naja, als Full-Surface,

83
00:08:25,760 --> 00:08:30,400
Full-Surface. Okay, das ist bei einem Erotik-Laden jetzt die Frage, was die darunter verstehen.

84
00:08:30,400 --> 00:08:37,560
Oh, der Tanzer geht wieder ab hier. 5 Stufe 1 Abos hat er verschenkt. Der Chat, der Kopf explodiert

85
00:08:37,560 --> 00:08:45,440
Leute im Chat. Wer hat denn, wer hat denn was gekriegt? Prali99, gepad1HD, Solea von Astora.

86
00:08:45,440 --> 00:08:50,240
Das hört sich irgendwie so, der Name, ich weiß nicht, Solea von Astora, das hört sich irgendwie so

87
00:08:50,240 --> 00:08:56,640
griechisch, griechisch, philosophisch, big brain-mäßig an. Also, excellent hört sich das an. Aber

88
00:08:56,640 --> 00:09:05,520
da bist du ja hier, richtig. Der Crazy, Emoy Carl und Foxtetzen. Alles klar, nice. Danke schön für die Subs.

89
00:09:05,520 --> 00:09:12,560
Also, was verstehen hier drunter? Als Full-Surface-Werbe- und Medienagentur mit Star-Full-Surface. Okay,

90
00:09:12,560 --> 00:09:17,840
wenn man weiß, was der Laden macht, stellt sich irgendwie Full-Surface irgendwie ein bisschen

91
00:09:17,840 --> 00:09:33,760
anders da. Ähm, ich muss halt kurz schnell schauen. Oh, das Scam-Train ist am Start.

92
00:09:33,760 --> 00:09:37,360
Oh, meint mal, Leute, ich hab den Chat aus Versehen zugemacht, das geht ja nicht.

93
00:09:43,360 --> 00:09:47,280
Irgendwas übersehen? Nee, der 5, Michael 5 Billion hat abonniert, das hab ich schon gesehen.

94
00:09:47,280 --> 00:09:50,400
Vollkorn-Mischbrot hat auch 7 Monate abonniert, hab ich jetzt sehe ich. Aber ich weiß nicht,

95
00:09:50,400 --> 00:09:56,800
ob ich schon gesagt hab, danke schön für den Sub. So, also, ähm, da blablabla, im Bereich

96
00:09:56,800 --> 00:10:00,720
Print-Online-Medien, wie gesagt, das ist irgendwie so ein Erotikladen. Wir entwickeln individual,

97
00:10:00,720 --> 00:10:09,520
blablabla, blablabla, blablabla. Okay, da steht jetzt nichts Großartiges dabei. Ich weiß halt,

98
00:10:09,520 --> 00:10:13,920
dass der Laden, dass ich nur von keinem was Gutes bisher gehört habe und dass es irgendwie so ein

99
00:10:13,920 --> 00:10:18,480
komischer Abgang vor der Erotikladen ist. Nee, alles, alles Müll. So, Moment, jetzt hab ich

100
00:10:18,480 --> 00:10:22,000
ja aus Versehen zugemacht. Was, gibt's denn ein paar gescheite Läden, die was haben? Hab ich

101
00:10:22,000 --> 00:10:26,160
noch nie gehört, hab ich noch nie gehört, hab ich auch noch nicht gehört. Äh, die ist irgendwo bei

102
00:10:26,160 --> 00:10:34,400
uns um die Ecke. Äh, keine Ahnung, ob das was taugt. Wie wär's, wie wär's mal nach Entfernung zu

103
00:10:34,400 --> 00:10:40,000
sortieren? Null. Provades, von denen hab ich schon mal was gehört, keine Ahnung, ob die was taugen.

104
00:10:40,000 --> 00:10:46,400
Oh, bei der VFG, bei der, oh, exzellent. Das sind die, die, die, äh, U-Bahn und Straßenbahn in

105
00:10:46,400 --> 00:11:11,440
Frankfurt macht. Gibt's da nicht so, äh, ja, ja, wie heißt das? Konunu oder so, ne? RTO. Okay,

106
00:11:11,440 --> 00:11:28,240
die scheinen ja richtig gut zu sein. Weiter Empfehlung, 28%. Oh, äh, okay, okay, bla, bla, bla.

107
00:11:28,240 --> 00:11:36,560
Das, ah, die sind ja gar nicht so, ah, hier. Der hat, der war hier wenigstens wirklich am Start.

108
00:11:36,560 --> 00:11:41,440
Flexibel, schlecht Respekt, weniger schlechter. Also, das deckt sich exakt mit dem, was ich von den Leuten

109
00:11:41,440 --> 00:11:49,440
gehört hab, die dort, die dort, die dort arbeiten. Äh, mach bitte Position aus, wo geht denn das? Hier?

110
00:11:49,440 --> 00:11:59,120
Okay. Hier, die meisten. Der find's übelst schlecht. Arbeitsatmosphäre, also, wie gesagt, ich hab nichts

111
00:11:59,120 --> 00:12:03,360
Gutes bisher davon gehört, ja. Alle, allen, mit denen ich Kontakt hat, die da gearbeitet haben,

112
00:12:03,360 --> 00:12:09,520
fand's richtig mies. Also, wenn das schon das einzige Gute ist, Gehalt kommt pünktlich an.

113
00:12:09,520 --> 00:12:19,680
Das ist halt wirklich das Mindeste, oder? Schlecht für dich, kann ich gar nicht alles aufzählen. Am

114
00:12:19,680 --> 00:12:24,720
besten alles ändern, was geht, okay. Die Arbeitsatmosphäre ist, ja, das haben auch alle gesagt, die ich, äh,

115
00:12:24,720 --> 00:12:33,520
kennengelernt gearbeitet haben. Inoffiziell zu schwer. Das ist, das geht, das ist auch teilweise schlimm in

116
00:12:33,520 --> 00:12:38,080
manchen Läden. So dieses, offiziell ist es so und so, weil man muss sich ja angesetzliche Vorgaben

117
00:12:38,080 --> 00:12:44,800
halten, aber in dir inoffiziell wird erwartet, dass bla bla bla. Wir sind ja nicht in Japan, wo du nicht

118
00:12:44,800 --> 00:12:48,800
vom Chef aus dem Büro gehen darfst, wobei ich keine Ahnung hab, ob das wirklich so ist, ne. Ich sag,

119
00:12:48,800 --> 00:12:55,200
das wird immer so gesagt, keine Ahnung, ob das stimmt. Nicht alles ist schlecht, dafür aber sehr

120
00:12:55,200 --> 00:13:07,360
vieles. Als ein Punkt wäre zum Beispiel, dass man sich einmal im Mund über ein Ticket an unseren

121
00:13:07,360 --> 00:13:12,480
Vorgesetzten melden kann und diesem dann die aktuellen Probleme melden kann. Moment, du kannst,

122
00:13:12,480 --> 00:13:17,520
du musst ein Ticket bei deinem Chef aufmachen, dass du mit ihm über aktuelle Probleme reden

123
00:13:17,520 --> 00:13:27,520
darfst. Das ist gut. Eigentlich sollte man bei seinen, bei Problemen, wenn der jetzt grad im

124
00:13:27,520 --> 00:13:31,040
Haus ist oder nicht grad irgendwie jederzeit zu seinem Chef gehen könnte. Was ist das für ein

125
00:13:31,040 --> 00:13:47,360
Pluspunkt, Alter. Scheint ja ein absolut erstklassiger GitHub-Issue aufmachen, erstklassiger Arbeitgeber

126
00:13:47,360 --> 00:13:52,720
zu sein. Also wie gesagt, geht da nicht hin. VFG ist wahrscheinlich gar nicht, VGF ist wahrscheinlich

127
00:13:52,720 --> 00:13:57,120
gar nicht so übel. Die machen hier aber auch gar keinen, die fackeln aber auch nicht lange hier.

128
00:13:57,120 --> 00:14:04,080
Die fackeln auch nicht lange. Gewünschte Vorqualifikation, Office. Okay, erweiterte

129
00:14:04,080 --> 00:14:09,000
Fremdsprachenkenntnisse. Kein Problem. Ich habe mir die Rede vom Oettinger angehört. Ich kann jetzt

130
00:14:09,000 --> 00:14:16,560
sagen, we are all sitting in one boat. Das reicht. Genug Fremdsprachenkenntnisse. Oh, die Bahn. Die

131
00:14:16,560 --> 00:14:27,840
Bahn sucht auch Leute. Die habe ich sogar mal eingeladen. Aber ich habe mich nie wieder gemeldet.

132
00:14:27,840 --> 00:14:35,120
Also nicht zur Ausbildung eingeladen. Also so eingeladen. Oh, ich bin da nie hin. Hab ich nie

133
00:14:35,120 --> 00:14:44,640
gemeldet. Okay, Stadt Frankfurter Main. Nope. Okay. Die Messe sucht auch Leute. Zumindest anscheinend

134
00:14:44,640 --> 00:14:48,560
gibt es da wirklich genug. Ich wollte mir jetzt gar nicht die Fachinformatik Ausbildung angucken.

135
00:14:48,560 --> 00:14:54,680
So wirklich. Ich weiß nicht, wie ich da treffe. Moment, ich gucke mir lieber die Fachinformatik

136
00:14:54,680 --> 00:14:58,080
Ausbildung, bevor ich mir irgendwas angucke, was mit C++ zu tun hat. Das müssen wir uns jetzt gleich

137
00:14:58,080 --> 00:15:06,680
schon oft genug angucken. Ihr seht es hier oben rechts wieder. Ihr seht es ja hier, da. Ah ja, ja,

138
00:15:06,680 --> 00:15:14,080
Display ist am Start. Wegen dem DB-Video. Wahrscheinlich wegen dem Video und wahrscheinlich

139
00:15:14,080 --> 00:15:19,400
weil ich immer so Übels rumflame auf Twitter. Da hat mich einer eingeladen, ob ich nicht mal

140
00:15:19,400 --> 00:15:25,200
meine Kritikpunkte da irgendwie, da irgendwie, ob ich da mal irgendwie dran betracht. Keine Ahnung.

141
00:15:25,200 --> 00:15:34,280
Die haben so einen Turm, so ein Innovationsgebäude irgendwie in Frankfurt und so. C++ ist halt ein

142
00:15:34,280 --> 00:15:39,360
Options-Type. Ja, ich habe mich notgedrungen die letzten Tage ein bisschen, ein bisschen mehr noch

143
00:15:39,360 --> 00:15:44,400
mit C++ beschäftigt. Und C++ hat tatsächlich relativ vieles, wo man gar nicht denkt, dass es

144
00:15:44,400 --> 00:15:48,880
das hat. Aber es ist übelst, also es ist nicht nur übelst, es ist mega beschissen integriert zum

145
00:15:48,880 --> 00:15:55,960
größten Teil. Und also richtig beschissen zum größten Teil. Ich krieg so Anfälle. Was ich auch,

146
00:15:55,960 --> 00:16:01,080
das ist auch so ein Ding, was ich in C++ nicht verstehe, ist, die haben, für vieles haben die

147
00:16:01,080 --> 00:16:07,000
Typen drinne. Zum Beispiel, dass man nicht mehr mit irgendwelchen Raw-Pointern rumhantieren muss,

148
00:16:07,000 --> 00:16:12,800
haben die sowas hier drinne. Wär ja wunderbar. Aber dann haben die anstatt ordentlichen Constructor

149
00:16:12,800 --> 00:16:21,240
für diese Klassen, haben die dann sowas drinne. Hä? Und allein schon, wer der noch irgendwie bei

150
00:16:21,240 --> 00:16:27,000
Verstand ist, erkennt denn jetzt auf den ersten Blick aus dieser Typdefinition, was man da für

151
00:16:27,000 --> 00:16:35,240
Argumente reinstecken darf, oder? Was ist das hier? Ich mein, ich erkenne es mittlerweile. Das hier

152
00:16:35,240 --> 00:16:40,000
ist das Template-Parameter 1, das ist Template-Parameter 2 und davon kannst du so viel wie du willst angeben.

153
00:16:40,000 --> 00:16:44,840
Aber kann man den Scheiß nicht mal ordentlich benennen? Ich mein, so schwer kann das doch

154
00:16:44,840 --> 00:16:51,360
nicht sein. Den Kram mal irgendwie einen Namen zu geben, wo man was mit anfangen kann. Aber es

155
00:16:51,360 --> 00:16:57,400
ist halt echt grausam. Also ich werde euch mal kurz sagen, was wir heute vorhaben. Ich weiß nicht

156
00:16:57,400 --> 00:17:01,400
genau, wie weit wir kommen und ich weiß auch gar nicht, ob es klappt. Ich habe im Vorfeld,

157
00:17:01,400 --> 00:17:07,560
also auch wenn ich jetzt ein bisschen ahnungslos tue, dem Entertainment-Faktor zuliebe, ich habe

158
00:17:07,560 --> 00:17:14,240
mir das im Vorfeld schon ein bisschen angeguckt. Wieso ist es erst 13.30 Uhr? Du meinst auf,

159
00:17:14,240 --> 00:17:20,320
ist es da echt nur 13.30 Uhr erst? Ah, weil die Zeitzone nicht stimmt. Die Zeitzone stimmt nicht.

160
00:17:20,320 --> 00:17:30,120
Wahrscheinlich habe ich die falsche Zeitzone angegeben in meinem AJAJA-NTP-Gedöns. Wahrscheinlich

161
00:17:30,120 --> 00:17:33,680
ist es die falsche Zeitzone. Wollen wir gleich mal gucken. Ich denke mal, es ist die falsche

162
00:17:33,680 --> 00:17:51,160
Zeitzone. Ja. NTP. Das ist nicht die richtige Zeitzone, oder? CET-1, CST-2. Das ist nicht

163
00:17:51,160 --> 00:18:02,000
die richtige, oder? Was haben wir denn jetzt gerade? Wir haben plus, wir sind CET plus eins und im

164
00:18:02,000 --> 00:18:09,040
Sommer plus zwei, oder? Wie sind wir? Summertime ist plus zwei und Winterzeit ist plus eins, oder?

165
00:18:09,040 --> 00:18:16,840
Gut. Upload. Gucken wir mal, ob es jetzt stimmt. Machen wir das gleich mal richtig. Nicht, dass

166
00:18:16,840 --> 00:18:25,040
die Uhrzeit jetzt irgendwie uns was bringen wird. Schauen wir mal, ob das jetzt richtig ist. Oh,

167
00:18:25,040 --> 00:18:29,920
huge, massive Upload-Speed. Zum Glück müssen wir für die meisten Sachen gar nicht direkt

168
00:18:29,920 --> 00:18:33,960
uploaden, sondern können vieles runterprogrammieren, ohne dass wir das uploaden müssen. Wir müssen

169
00:18:33,960 --> 00:18:39,240
bloß abends mal uploaden zwischendurch, um zu gucken. Exzellent. Eine IP haben wir gekriegt.

170
00:18:39,240 --> 00:18:50,160
Und stimmt's? Ich sehe es in der Vorschau net. Okay, NTP hat sich noch nichts geholt. Also,

171
00:18:50,160 --> 00:19:00,560
der muss erst mal zum NTP sich eine Zeit holen. Jahr 70. Wer BigBrain-CET? Warum ist es erst der

172
00:19:00,560 --> 00:19:09,800
1. der 1970? Ich weiß, der Chat ist BigBrain, er weiß das. Oder warum war das? Unix-Time. Richtig.

173
00:19:09,800 --> 00:19:18,000
Erst der 1. der 1970 geht die Unix-Zeitrechnung los. Und nachdem sehr viele Netzwerksachen irgendwelche

174
00:19:18,000 --> 00:19:27,640
Unix-Forks sind, also auch Windows hat auch so viel von BSD übernommen, deswegen ist das unter viel

175
00:19:27,640 --> 00:19:34,040
Betriebssystem so. Aber jetzt hat er sich per NTP Zeit geholt und jetzt haben wir auch 13.33.

176
00:19:34,040 --> 00:19:52,880
Ja, gut. Hat nicht so ganz funktioniert, würde ich sagen. Hat nicht so ganz funktioniert. Okay,

177
00:19:52,880 --> 00:19:58,760
wir ignorieren das mal. Ich lasse das mal hier stehen. Wir ignorieren das. Keine Ahnung. Ich

178
00:19:58,760 --> 00:20:02,600
gebe mal die Build-Time aus, ob der jetzt auch wirklich alles abgeloadet und gepusht hat. Nicht,

179
00:20:02,600 --> 00:20:10,000
dass der jetzt vielleicht kaputt ist oder so. Ich mag. Man weiß ja nicht. Aber das ist eigentlich

180
00:20:10,000 --> 00:20:16,480
falsch. Minus eins. Was auch immer. So, aber das ist gar nicht, was wir heute machen wollen. Also,

181
00:20:16,480 --> 00:20:23,240
die Uhrzeit von diesem Display ist eigentlich erst mal vollkommen egal. Heute machen wir was relativ

182
00:20:23,240 --> 00:20:32,760
kompliziertes. Was haben wir für eine Build-Time? 15.84. Das ist eigentlich recht korrekt. Aber

183
00:20:32,760 --> 00:20:36,760
auf dem Display stimmt es nicht. Ja gut, das ist ja auch statisch. Also, ihr werdet vielleicht

184
00:20:36,760 --> 00:20:41,480
feststellen, im Vergleich zum letzten Projekt. Das letzte Projekt war ja, was wir hatten,

185
00:20:41,480 --> 00:20:46,000
dass das Display funktioniert und dass man ein Firmware-Update übers WLAN machen kann. Also,

186
00:20:46,000 --> 00:20:56,640
auf das Gerät um. 15.84. Äh, 15.34 habe ich 84 gesagt. Aber man darf da nicht so genau

187
00:20:56,640 --> 00:21:00,800
hinhören, was ich immer erzähle. So, im Vergleich zum letzten Projekt, seht ihr,

188
00:21:00,800 --> 00:21:07,400
es sieht ein bisschen anders aus heute. Ich habe ein paar Sachen hier oben nach Lips geschoben und

189
00:21:07,400 --> 00:21:12,640
es ist kein Arduino-Projekt mehr. Es ist, ich kaufe es in der Playstation 5 wahrscheinlich

190
00:21:12,640 --> 00:21:18,160
erst mal nicht. Nee. Hat das Display Touch? Nee. Aber es hat zwei Knöpfe. Es hat links und rechts

191
00:21:18,160 --> 00:21:26,880
zwei Knöpfe. Die kann man verwenden. Ich will jetzt nicht aufstehen, das reinschieben. Ich

192
00:21:26,880 --> 00:21:31,360
zeige euch mal ein Bild davon. Das hat zwei Knöpfe, die man programmieren kann, was die

193
00:21:31,360 --> 00:21:36,040
machen sollen. Aber es ist kein Touch. Ich sage, das ist ja auch, aber das ist klein. Das ist ein

194
00:21:36,040 --> 00:21:43,920
1,6 Zoll oder irgendwas. Nee, 1,14 Zoll Display. Was willst du denn da touchen? Da brauchst du erst

195
00:21:43,920 --> 00:21:47,640
mal, musst du erst mal deinen Finger irgendwie in die Presse stecken, dass er so klein wird,

196
00:21:47,640 --> 00:21:54,920
dass du ihn da touchen kannst drauf. Link. Hier, TT-Go-T-Display heißt das Ding. Das,

197
00:21:54,920 --> 00:22:02,920
was für ein Display da drauf ist, da ist ein IPS ST7789V drauf. Oder irgendein Stylus benutzen.

198
00:22:02,920 --> 00:22:08,800
Aber Touch ist da drauf nicht so sinnvoll. Kriegst du darauf Doom zum Laufen? Ganz ehrlich,

199
00:22:08,800 --> 00:22:15,040
keine Ahnung, ob irgendjemand schon versucht hat, Doom auf den ESP32 zu portieren. Anscheinend.

200
00:22:15,040 --> 00:22:24,200
Anscheinend. Geht euch YouTube auch so auf den Sack in letzter Zeit mit diesem Pop-Up? Das kam

201
00:22:24,200 --> 00:22:31,160
nie. Das kam nie. Das kommt seit einer Woche. Das ist so nervig. Ich frage mich, wann die ganzen

202
00:22:31,160 --> 00:22:36,440
Pop-Up-Blocker das endlich hinkriegen. Das muss weg. Das nervt. Das ist wirklich extrem

203
00:22:36,440 --> 00:22:43,600
massiv nervig. YouTube White Scene. Oh je, nee, das geht ja nicht. Warte mal, wo stellt man das

204
00:22:43,600 --> 00:22:53,280
überhaupt um? Hier, da. Dark Scene. Exzellent. Lens Zeroes schreibt, ich habe keine Ahnung

205
00:22:53,280 --> 00:22:56,760
vom Programmieren, geschweigenen von dem, was abgeht, aber ich höre trotzdem zu nur wegen Max.

206
00:22:56,760 --> 00:23:02,760
Das ist schön, vielleicht ist ja trotzdem was für dich bei. Heute ist es ein bisschen komplizierter.

207
00:23:02,760 --> 00:23:08,480
Genau, also anscheinend sind schon Leute auf die Idee gekommen und haben Doom laufen lassen auf

208
00:23:08,480 --> 00:23:19,920
einem ESP32. Also ja, das scheint zu gehen. Es sieht ein bisschen abenteuerlich aus, aber ja,

209
00:23:19,920 --> 00:23:25,200
es scheint zu funktionieren. Doom läuft ja nun mittlerweile echt überall drauf. Auf Druckern.

210
00:23:25,200 --> 00:23:28,520
Wahrscheinlich läuft das sogar, wenn ich ein Display anschließen könnte auf meinem Klo.

211
00:23:28,520 --> 00:23:40,440
HS-Yohi, neun Monate. Dankeschön für den Sub. Toostmyname sagt, so ein Russe, also du meinst so ein

212
00:23:40,440 --> 00:23:48,680
Kekommret, hat auch mal alte Ram-Dims an einem Arduino angeschlossener Linux mit Bash über

213
00:23:48,680 --> 00:23:57,320
ein paar Stunden geboot. Tja, also es gibt ja ein X86-Arduino, wo man Linux drauf laufen lassen kann.

214
00:23:57,320 --> 00:24:00,040
Hast du noch Kontakt mit dem Frisur? Ja klar, ab und zu. Wenn du jetzt fragst,

215
00:24:00,040 --> 00:24:03,440
mit dem Kambum? Ja, mit dem Kambum auch. Mit dem war ich vor drei Wochen oder so Sushi futtern

216
00:24:03,440 --> 00:24:08,080
in Frankfurt. So, also was wir heute machen ist, als erstes muss ich mal sagen, das Projekt sieht

217
00:24:08,080 --> 00:24:13,080
ein bisschen anders aus. Doom auf dem Schwangerschaftssitz, das habe ich noch nicht gesehen,

218
00:24:13,080 --> 00:24:19,320
aber ich habe gelesen, dass es das gibt. Das Projekt sieht ein bisschen anders aus und zwar,

219
00:24:19,320 --> 00:24:26,280
ich habe geupdatet. Erstens ist das Plattform IO50 jetzt, also das allerneueste, was es gibt und das

220
00:24:26,280 --> 00:24:37,640
ist kein normales Arduino Projekt mehr. Das ist ein, kannste mal zeigen, das ist ein ESP-EDF-Projekt

221
00:24:37,640 --> 00:24:43,760
mit Arduino als Modul. Das hat ein paar Vorteile, zum Beispiel, dass die Tools neuer sind, dass man

222
00:24:43,760 --> 00:24:50,000
C++17 verwenden kann, ohne dass man sich in beiden ausreißen muss. Und auch die eingebauten Libraries

223
00:24:50,000 --> 00:24:55,640
sind ein bisschen neuer, das ist ganz praktisch. Das schöne an Plattform IO ist ja, man kann den

224
00:24:55,640 --> 00:25:01,560
ganzen Kram so konfigurieren über dieses INI-File, warum auch immer es unbedingt ein INI-File sein

225
00:25:01,560 --> 00:25:07,720
musste, weiß ich auch nicht. Und dann läuft das auch. Und ich habe noch was, ich habe einen Custom

226
00:25:07,720 --> 00:25:12,960
Build-Script, was läuft, wenn man einen Build macht. Und zwar, was das Custom Build-Script macht,

227
00:25:12,960 --> 00:25:19,760
ist, ich zeige es euch mal, Moment, wo ist es? Hier. Ob man sowas wie Ingui zum Laufen bekommt,

228
00:25:19,760 --> 00:25:24,280
da weiß ich nicht, was es unten drunter macht, kann ich mir durchaus vorstellen. Es gibt ja ein

229
00:25:24,280 --> 00:25:29,160
paar Grafik-Libraries für den ESP32, also das ist wahrscheinlich gar nicht so weit weg von. So,

230
00:25:29,160 --> 00:25:33,760
das Version-File schreibt nämlich einfach Build-Number, wir sind gerade bei, ich habe das aus

231
00:25:33,760 --> 00:25:42,600
einem anderen Projekt kopiert, wir sind gerade bei compile-build-Vorgang 1898 und da schreibt ihr

232
00:25:42,600 --> 00:25:46,240
auch die Zeit rein. Das ist ganz nützlich, da kann ich mir unten nämlich ausgeben lassen,

233
00:25:46,240 --> 00:25:50,640
sprich, welche Version das ist und wann ich das Ganze gebaut habe. Da weiß ich, wie aktuell die

234
00:25:50,640 --> 00:25:56,360
Kisten ungefähr sind. Und das ist so ein Mini, ein Mini-Python-Script, was das macht. Das zählt

235
00:25:56,360 --> 00:26:07,120
einfach den ganzen Kram hoch pro compile-Folge, sprich, wenn ich jetzt Build mache, dann werdet

236
00:26:07,120 --> 00:26:13,000
ihr gleich sehen, dann ist es dann eine Versionsnummer höher. Das ist zum Debuggen wirklich nützlich.

237
00:26:13,000 --> 00:26:19,200
So, guckt, jetzt ist es 1899. Wenn wir noch ein bisschen machen, sind wir bei der aktuellen

238
00:26:19,200 --> 00:26:25,200
Windows-Version angekommen heute irgendwann noch. So, ich habe jetzt übrigens geupdatet. So,

239
00:26:25,200 --> 00:26:30,600
genau. Und das ist jetzt ein ESP-EDF-Projekt mit Arduino als Modul. Das heißt, man kann da

240
00:26:30,600 --> 00:26:37,040
ein paar Sachen mehr konfigurieren und hat neuere Tools und einen neueren C++-Standard. Das ist

241
00:26:37,040 --> 00:26:42,600
ganz praktisch. Ja, so weit, so gut. So, und was ich hier sonst auch drinnen liegen habe, ist

242
00:26:42,600 --> 00:26:49,560
eigentlich mehr oder weniger, dass auch, das ist die Display-Klasse, die wir das letzte Mal

243
00:26:49,560 --> 00:26:54,440
gebastelt haben, die oben rechts jetzt hier, was ihr seht, auf dem Display das ganze Zeug anzeigt.

244
00:26:54,440 --> 00:27:00,200
Dann habe ich ein paar Helper-Sachen am Start zum File einlesen und sowas. Das ist mittlerweile

245
00:27:00,200 --> 00:27:06,280
übelst lang. Ich zeige es euch mal. Guck mal hier, weil C++ halt nur mal so sackt, muss man halt viel

246
00:27:06,280 --> 00:27:14,920
Zeug selbst machen. 500 Zeilen Helper-Gedöns. Guck mal, ein paar Dinger sind sogar so ordentlich

247
00:27:14,920 --> 00:27:23,720
gemacht, dass ich sogar einen Kommentartext oben dran gemacht habe. Ja, warum die Uhrzeit nicht

248
00:27:23,720 --> 00:27:27,800
stimmt, ist wirklich Frage. Ich weiß nicht, warum die Uhrzeit nicht stimmt. Ich würde eigentlich

249
00:27:27,800 --> 00:27:42,480
sagen, die Uhrzeit ist richtig eingestellt. Also das stimmt nicht, aber... Tja. Ja, und ich habe mich

250
00:27:42,480 --> 00:27:49,040
hier teilweise übelst ausgelassen mit... Ach ja, übrigens, ich habe sogar was eingebaut, dass man

251
00:27:49,040 --> 00:27:56,800
pingen kann und sowas. Das ist wirklich ganz nützlich. Also, wie gesagt, ich habe da ein paar

252
00:27:56,800 --> 00:28:01,800
Sachen selbst gebastelt, weil die mir halt einfach in C++ gefehlt haben. Zum Beispiel, dass man den

253
00:28:01,800 --> 00:28:07,400
internen Temperatursensor vom ESP verwenden kann, dass man einfach mal filtern kann. Wieso

254
00:28:07,400 --> 00:28:14,800
CST-2? Ich weiß, das ist verkehrt, aber auch wenn ich es ändere, ändert sich nichts. Warte mal,

255
00:28:14,800 --> 00:28:31,920
gibt es da nicht eine Seite, wo man CZ-Infos-Generator machen kann? So. Falls da irgendwie einer Time Zone

256
00:28:31,920 --> 00:28:42,480
Generator... Time Zone String Generator... Ich weiß nicht, wie der Kram richtig heißt. Nee. Ja,

257
00:28:42,480 --> 00:28:50,920
sowas hier brauche ich. Ups. Sowas hier brauche ich. Da gibt es irgendwo Generator für und ich war

258
00:28:50,920 --> 00:28:54,880
vergessen, wo. Aus irgendeinem Generator habe ich mir mal diesen DateTimeString hier auch

259
00:28:54,880 --> 00:29:03,440
rausgeholt. Aber ich weiß beim besten Willen nicht, warum das jetzt hier nicht stimmt. Also,

260
00:29:03,440 --> 00:29:07,120
ich meine, das ist falsch, aber wenn ich das update, stimmt es auch nicht. Wir hatten immer

261
00:29:07,120 --> 00:29:13,280
eben gemacht plus 1 und plus 2 und dann habe ich wieder abgeloadet, aber da ging es auch nicht. Ja,

262
00:29:13,280 --> 00:29:16,440
weil ich sagen wollte, ich habe mir da so ein paar Sachen eingebaut, zum Beispiel, dass man

263
00:29:16,440 --> 00:29:21,960
einen Container filtern kann, ob es Elemente hat, ob es Elemente hat, die auf was matchen. Ich habe

264
00:29:21,960 --> 00:29:27,880
mir im Prinzip, wenn man ehrlich ist, C++ ein bisschen mehr VC-Sharp gemacht mit so ein paar

265
00:29:27,880 --> 00:29:34,080
Sachen, die hier drin sind. Ja, dass du Arduino-String zu C++-String und C++-String zu Arduino-String

266
00:29:34,080 --> 00:29:38,000
machen kannst. Ein paar kleine Sachen, nichts großartiges. Also, man wird auch so alles

267
00:29:38,000 --> 00:29:45,480
verstehen. So, was macht die Uhrzeit jetzt? Nee, stimmt immer noch nicht. Ich brauche so

268
00:29:45,480 --> 00:29:54,480
einen komischen Generator, tz-info. Wie erstellt man sowas? Kannst du auch to upper und to lower?

269
00:29:54,480 --> 00:29:59,520
Ja, kann ich, kann ich. Kann ich, pass mal auf, kann ich. Habe ich extra eingebaut,

270
00:29:59,520 --> 00:30:11,400
weil mir das immer übelst auf den Sack geht, dass C++ sowas nicht hat. Kann ich? Hallo? Auto

271
00:30:11,400 --> 00:30:23,280
completion, please? Come on, brah. Also ja, habe ich. Kann ich dir zeigen? Da. Da, kann ich,

272
00:30:23,280 --> 00:30:30,800
aber warum mag ich den denn nicht? Warum geht mein Auto-Complete gerade nicht? Ah, plus plus.

273
00:30:30,800 --> 00:30:36,840
Ah, jetzt geht es aus Gründen, die sich mir nicht erschließen. String to lower, String,

274
00:30:36,840 --> 00:30:44,320
da habe ich eingebaut, ja. Kriegt übrigens C++ in 20, in C++ 20 kriegt das angeblich.

275
00:30:44,320 --> 00:30:51,840
Moin Max, wie ist deine Meinung zu den neuen Konsolen? Konnte leider bei dem Chaos keine

276
00:30:51,840 --> 00:30:57,240
PS5 vorbestellen. Würdest du die günstige Variante kaufen? Ich lade mir den Kram eh nur noch runter,

277
00:30:57,240 --> 00:31:02,280
ich würde mir die ohne Lauf verkaufen. Aber ich habe es nicht verfolgt und ich habe mir auch die

278
00:31:02,280 --> 00:31:07,840
letzte Vorstellung nicht angeguckt. Weiß ich gar nicht, keine Ahnung. Tja, also falls irgendwie

279
00:31:07,840 --> 00:31:12,880
einer so einen Time Zone Generator, kann das sein, dass ich das gar nicht richtig setze?

280
00:31:12,880 --> 00:31:29,440
Doch tzinfo. Für was ist die 1 da hinten dran? Override. Wie generiert man sowas?

281
00:31:29,440 --> 00:31:46,760
Da ist doch sowas hier. Europe, Berlin. Okay, ich habe es richtige. Guck mal,

282
00:31:46,760 --> 00:31:51,360
ich habe es richtige. CET-1, was auch immer. Aber es funktioniert nicht.

283
00:31:51,360 --> 00:31:56,360
Habe ich den richtigen NTP Server? Vielleicht habe ich den falschen NTP Server gesetzt.

284
00:31:56,360 --> 00:32:02,680
Also anscheinend muss man tatsächlich Minus dazwischen machen. Nee, der NTP Server stimmt.

285
00:32:02,680 --> 00:32:12,920
Nee, der NTP Server ist falsch. Guck mal, was für ein IP habe ich? Aha, das ist der falsche

286
00:32:12,920 --> 00:32:19,840
NTP Server, deswegen geht das nicht. Der kommt nicht zum NTP Server hin, würde ich mal vermuten.

287
00:32:19,840 --> 00:32:23,760
Wobei doch, der muss zum NTP Server kommen, sonst hätte er die Zeit ja nicht abrufen können.

288
00:32:23,760 --> 00:32:33,120
Na ja gut, ich kann ihn mal. Ich weiß es gar nicht, ist es 1.1? Ich weiß gar nicht,

289
00:32:33,120 --> 00:32:36,920
was mein Gateway ist. Probieren wir es mal so aus, vielleicht geht die Zeit jetzt.

290
00:32:36,920 --> 00:32:43,360
Aber wir halten uns da nicht so, doch wir sind GMT plus 2, aber anscheinend gibt es hier keine

291
00:32:43,360 --> 00:32:50,760
Plusse, sondern nur Minusse. Es ist aber auch wurscht, das kriege ich easy gefixt. Wir wollen

292
00:32:50,760 --> 00:32:54,080
heute nämlich was ganz anderes zu machen. Schon so früh zu Hause? Nee, ich habe Apppoint frei.

293
00:32:54,080 --> 00:32:59,960
Morgen auch, übermorgen auch, in einem Monat auch. Legion 14982 Monate, dankeschön. Excellent

294
00:32:59,960 --> 00:33:08,400
Subscription, big brain. So, wie sieht es jetzt aus? Nein, 13.57. Scheiß drauf. Kein Bock,

295
00:33:08,400 --> 00:33:16,640
das machen wir jetzt nicht. Wir lassen das jetzt so. Ich mache da jetzt nichts, sonst brauche ich

296
00:33:16,640 --> 00:33:26,640
ewig bis NTP geht und in Wirklichkeit ist es sinnlos. Das wollen wir gar nicht machen. Also,

297
00:33:26,640 --> 00:33:37,840
was wir heute machen ist folgendes. Irgendeine Nase gelaufen gerade. Also, was wir heute machen

298
00:33:37,840 --> 00:33:41,680
ist folgendes. Wir haben uns das letzte Mal programmiert, dass das Display funktioniert

299
00:33:41,680 --> 00:33:46,840
und dass man Firmware Update hochladen kann hier dran. Ich weiß, dass das funktioniert,

300
00:33:46,840 --> 00:33:53,880
dass man Standard Transform und Gedöns machen kann, aber mich nervt, dass es so kompliziert ist.

301
00:33:53,880 --> 00:34:01,720
Deswegen habe ich wieder was eigenes gebastelt. Man könnte ja einfach in die Standard String

302
00:34:01,720 --> 00:34:06,200
Klasse so was einbauen, so ein paar Basic Sachen. So to Upper, to Lower, Trim Left, Trim Right,

303
00:34:06,200 --> 00:34:14,560
Replace und sonst was. Teilweise haben sie es drin. Ich hole mir eine 3090, sobald es das gibt. Also,

304
00:34:14,560 --> 00:34:18,160
das hier haben wir gebastelt, dass das hier funktioniert, das letzte Mal im Stream,

305
00:34:18,160 --> 00:34:23,400
so from scratch. Ich habe jetzt das Projekt konvertiert von einem reinen Arduino Projekt

306
00:34:23,400 --> 00:34:30,880
zu einem ESP-EDF mit Arduino Projekt, dass wir ein bisschen neuere Tools haben und eine Sache,

307
00:34:30,880 --> 00:34:37,040
die ja übelst nervig war, für mich auch die letzten Streams, die wir gebastelt haben, ist,

308
00:34:37,040 --> 00:34:41,920
dass die ganzen Web-Server alle irgendwie sucken. Also, ich möchte ja einen Web-Server haben,

309
00:34:41,920 --> 00:34:50,360
der HTTPS kann für Firmware Upload. Hauptsächlich, weil es geht, nicht weil ich denke,

310
00:34:50,360 --> 00:34:54,200
dass irgendwie einer meiner Firmware mitschneidet oder so, was auch nicht schlimm wäre. Da gibt es

311
00:34:54,200 --> 00:34:59,840
ja eh nichts Kompliziertes, nichts Tolles drin. Aber ich mag das einfach, wenn Firmware Update

312
00:34:59,840 --> 00:35:03,960
über HTTPS ist und außerdem lernt man da ein bisschen was bei. Und eine Sache, die ich auch

313
00:35:03,960 --> 00:35:09,400
schon eine ganze Weile machen will, ist, dass man sich die Logs hier unten auch über eine

314
00:35:09,400 --> 00:35:14,040
HTTPS-Verbindung schicken lassen kann. So, und die ganzen Web-Server, die es so gibt,

315
00:35:14,040 --> 00:35:21,120
finde ich ziemlich, ziemlich am Mist. Der eingebaute Web-Server von ESP ist ganz merkwürdig. Der ist

316
00:35:21,120 --> 00:35:26,480
rein Single-Core und bleibt laufend hängen. Dann gibt es einen anderen, der auch noch HTTPS kann,

317
00:35:26,480 --> 00:35:31,400
der bleibt, wenn man die Verbindung abbricht, hängen. Deswegen habe ich gedacht, wir probieren mal

318
00:35:31,400 --> 00:35:40,280
einen Mini, wirklich einen Mini-Web-Server, was ganz kleines, also einer, der quasi nur Get und

319
00:35:40,280 --> 00:35:48,040
Post kann und sonst nix. Get, Post und dann auch nur quasi Index-HTML ausliefern oder so was und

320
00:35:48,040 --> 00:35:53,200
ein Post-Firmware-Update machen, weil unter Slash-Logs halt die Logs hier raus bekommen,

321
00:35:53,200 --> 00:36:01,560
den eigenen Web-Server zu basteln. Allerdings soll der HTTPS können. Ich habe mir im Vorfeld

322
00:36:01,560 --> 00:36:06,800
schon mal angeguckt, wie das funktioniert. Es gibt da, es gibt hier ein Beispielprojekt und zwar,

323
00:36:06,800 --> 00:36:25,120
das müssen wir uns heute angucken. Examples haben die hier irgendwo oder Programs. Irgendwo haben

324
00:36:25,120 --> 00:36:31,880
die hier einen Server-Example, genau. Es sieht mega kryptisch aus, fand ich auch am Anfang,

325
00:36:31,880 --> 00:36:39,360
aber es ist gar nicht so kompliziert. Der ESP32 benutzt das hier als Libraries für TLS oder für

326
00:36:39,360 --> 00:36:48,160
SSL. Was wir machen müssen, ist eigentlich nur dieses Beispiel hier in ein bisschen schöner

327
00:36:48,160 --> 00:36:55,000
übersetzen, sodass es auf dem ESP32 auch ordentlich funktioniert. Dann sollten wir eine

328
00:36:55,000 --> 00:37:02,320
verschlüsselte Verbindung vom Browser zu dieser Kiste hier aufbauen können und statische HTML

329
00:37:02,320 --> 00:37:07,240
abrufen können. Wenn wir statisches HTML abrufen können, dann ist das kein großartiges Ding,

330
00:37:07,240 --> 00:37:11,520
weil dann können wir auch einfach vom Flash-Speicher eine Webseite ausliefern.

331
00:37:11,520 --> 00:37:16,400
Das probieren wir jetzt mal. Wie gesagt, ich habe im Vorfeld schon ein bisschen geguckt,

332
00:37:16,400 --> 00:37:22,600
wie das Ganze funktioniert. Mich stört es ehrlich gesagt, dass die Zeit falsch ist,

333
00:37:22,600 --> 00:37:28,880
aber da können wir jetzt nichts machen. Da habe ich jetzt auch keinen Bock. Großartig

334
00:37:28,880 --> 00:37:39,320
dran rumzuwursten, bis das funktioniert. Vielleicht sollten wir mal den NTP-Server setzen. Ich habe

335
00:37:39,320 --> 00:38:04,880
eine Idee. Wir setzen mal den NTP-Server nachdem das WLAN ab ist.

336
00:38:04,880 --> 00:38:24,520
C++, hallo? What the fuck? Ich habe zwei Zeilen verschoben. Was ist dein Problem?

337
00:38:34,880 --> 00:39:02,920
The fuck? What? Was denn jetzt? What the fuck? Das hat sich überhaupt nichts geändert. Was zum

338
00:39:02,920 --> 00:39:19,360
Teufel geht ab? Was ist denn jetzt los? Habe ich irgendwas kaputt gemacht? What?

339
00:39:19,360 --> 00:39:45,440
Okay, ich bin absolut planlos. Was hat er denn jetzt für Schmerzen? What the fuck?

340
00:39:45,440 --> 00:39:54,440
Das ist so typisch C++. Du hast nichts geändert. Du kompilierst einfach nochmal. Bäm, geht nicht

341
00:39:54,440 --> 00:40:01,400
mehr. Was hat er denn für Probleme jetzt auf einmal? Guck mal, hier, der meckert über die... Das ist

342
00:40:01,400 --> 00:40:11,560
irgendwie... Moment. Ich habe nichts gesagt. Ich bin im falschen Fenster. Nee, bin ich nicht. Ich

343
00:40:11,560 --> 00:40:19,560
bin im richt... Moment. Moment, ich war im falschen Fenster. Was ist das Richtige davon? Das ist das

344
00:40:19,560 --> 00:40:42,360
Falsche. Das ist das Richtige. Ah ja, gut. Ich war nur im falschen Projekt. Ich war im falschen

345
00:40:42,360 --> 00:40:50,360
Editor. Also wir programmieren, wir probieren heute einen Webserver zu bauen. Einen Mini. Einen wirklichen Mini. Einen kleinen, der nur ein bisschen

346
00:40:50,360 --> 00:40:56,520
statisches HTML ausliefern kann. Allerdings... Also einen Webserver, der statisches HTML ausliefern kann auf dem

347
00:40:56,520 --> 00:41:04,440
ESP32. Allerdings, der auch SSL können soll. Stimmt jetzt die Uhrzeit wenigstens? Nee, immer noch

348
00:41:04,440 --> 00:41:09,400
verkehrt. Okay, wunderbar. Nee, ATX nicht schon vorbestellt. Ich bestell mir wenn überhaupt eine

349
00:41:09,400 --> 00:41:14,440
3090. So, wo bin ich jetzt stehen geblieben? Genau, also das ist das Beispiel hierfür, für die

350
00:41:14,440 --> 00:41:23,360
eingebauten SSL-Dinger vom ESP32. Und wir bauen einfach mal das nach, das Example und gucken,

351
00:41:23,360 --> 00:41:28,440
gucken wie weit wir kommen. Also, müssen wir mal gucken, ob wir irgendwas aufräumen müssen, aber ich

352
00:41:28,440 --> 00:41:43,000
glaube das passt. So, also wie fangen wir das am besten an? Wir machen hier ein neues File. Das nennen wir... Wie nennen wir das?

353
00:41:43,000 --> 00:41:54,280
Ich hab doch gerade gesagt, das wird ein Mini-Webserver. Da nennen wir das Ding Mini-Surfer-Punkt. Top. So, und da brauchen wir eine

354
00:41:54,280 --> 00:42:01,360
Klasse drin. Wir machen das mal in der C++-Way. Da brauchen wir eine Klasse drin. Vielleicht soll ich

355
00:42:01,360 --> 00:42:08,480
es nicht... Vielleicht soll ich einfach erst mal ganz billig das Example nachbauen und gucken, ob

356
00:42:08,480 --> 00:42:13,400
es funktioniert, bevor ich da irgendeine Klasse draus baue. Wollen wir gleich hier uns die volle

357
00:42:13,400 --> 00:42:19,640
C++-Objektorientierungsladung geben oder wollen wir erst mal das das Example nachbauen, so wie es

358
00:42:19,640 --> 00:42:26,920
hier drin steht? Nee, komm, wir geben, wir machen das gleich richtig. Easy. Gar kein Problem. Alles klar.

359
00:42:26,920 --> 00:42:33,600
Wie gesagt, ich habe es mir im Vorfeld schon ein bisschen angeguckt. Also, ich weiß, dass dieses

360
00:42:33,600 --> 00:42:39,760
Example funktioniert. Das habe ich schon ausprobiert. Das geht. Also, prinzipiell, prinzipiell geht

361
00:42:39,760 --> 00:42:44,360
das. Muss ich das jetzt nicht nochmal machen. So, also, wenn wir uns... Also, das ist übrigens auch so ein

362
00:42:44,360 --> 00:42:50,400
komisches C++-Feature, was ich sehr merkwürdig finde. Warum, vielleicht hat da einer von euch

363
00:42:50,400 --> 00:42:56,280
irgendeine Erklärung zu, warum kann ich sowas hier machen? Also, das ist ja die Vermischung von

364
00:42:56,280 --> 00:43:02,880
allem Möglichen. Also, das hier legt die Klasse Minisurf an und das hier legt im gleichen Zuge

365
00:43:02,880 --> 00:43:08,080
eine globale Variable vom Typ Minisurf an, die Minisurf heißt. Was heißt, ich habe hier eine

366
00:43:08,080 --> 00:43:13,160
Instanz von der Minisurf-Klasse unter Minisurf. Also, das muss ich erst mal importieren. Warum

367
00:43:13,160 --> 00:43:19,000
geht sowas überhaupt? Wo ist der Sinn davon? Das leuchtet mir nämlich überhaupt nicht ein.

368
00:43:19,000 --> 00:43:30,520
Wo machen wir denn mal den Include hin? Also, ich meine, wozu ist das gut? Das checke ich null.

369
00:43:30,520 --> 00:43:45,400
Eigentlich sollte ich jetzt was haben. Ach so, dann soll ich vielleicht mal... Vielleicht muss

370
00:43:45,400 --> 00:43:54,800
ich es anders schreiben. Ah, da ist er. Also, den Sinn verstehe ich nicht davon, weil ich könnte

371
00:43:54,800 --> 00:44:01,280
auch einfach... Geht mit Structon Union in C auch? Ja, aber ich verstehe gerade hier den Sinn von nicht.

372
00:44:01,280 --> 00:44:09,840
Ehrlich gesagt. Aber da bin ich wahrscheinlich zu low-prane, weil ich könnte genauso gut danach

373
00:44:09,840 --> 00:44:17,800
hingehen und sagen... So, ist genau das gleiche, aber viel klarer getrennt, was was ist. Also,

374
00:44:17,800 --> 00:44:22,960
wo ist da jetzt der Unterschied? Also, warum brauche ich das überhaupt? Aber wahrscheinlich

375
00:44:22,960 --> 00:44:27,040
checke ich es nicht. So, und falls es für den Fall sein sollte, dass ich keine Klasse mehr von

376
00:44:27,040 --> 00:44:30,520
diesem Typ anlegen können darf, ja, dann kann ich das aber auch anders machen. Das kann ich in den

377
00:44:30,520 --> 00:44:35,880
Constructor Private machen und mache mir eine Public Create Methode oder sowas, was ich viel

378
00:44:35,880 --> 00:44:40,560
sauberer finde, als irgendwie Klassendeklaration und das Initialisieren das irgendwie so komisch

379
00:44:40,560 --> 00:44:56,440
zu vermischen. Aber war es nicht. Da war es nicht, genau. Übrigens eine Sache müssen wir machen,

380
00:44:56,440 --> 00:45:06,920
weil das uns mega rumspackt. Ich muss das inline machen, weil ich habe eine Sache gelernt in meiner

381
00:45:06,920 --> 00:45:16,400
letzten Zeit, wo ich mich mit C++ beschäftigt habe, ist entweder man ist ultra pingelig zwischen

382
00:45:16,400 --> 00:45:22,720
der Trennung zwischen Header und C++-File oder wenn einem das auf den Keks geht, dass man im Jahr

383
00:45:22,720 --> 00:45:28,800
2020 noch sowas wie Header und C++-File überhaupt trennen muss, kann man einfach alles in Header

384
00:45:28,800 --> 00:45:34,280
schreiben. Dann muss man aber davor schreiben inline, weil er ansonst Fehler schmeißt,

385
00:45:34,280 --> 00:45:43,320
dass das Duplicate Definition und alles geht kaputt. Sonst, ja. Na gut, das kann ich jetzt nicht so

386
00:45:43,320 --> 00:45:57,520
nennen, weil das gibt es ja schon. Ist ja auch egal. Also wunderbar. Haben wir den jetzt. Gut. Also

387
00:45:57,520 --> 00:46:04,120
was braucht so ein Web Server als Public Methode? Verwende einfach einen Header Guard. Funktioniert

388
00:46:04,120 --> 00:46:10,160
nicht. Funktioniert nicht. Muss ich auch lernen. Also man kann sowas hier machen. Funktioniert

389
00:46:10,160 --> 00:46:17,800
nicht. Funktioniert nur, solange die Dateien zusammen kompiliert werden. Also zum Beispiel,

390
00:46:17,800 --> 00:46:23,560
wenn ich jetzt hier eine lib habe, da eine lib und da mein Mainprogramm und ich inklude jetzt quasi

391
00:46:23,560 --> 00:46:29,960
das hier und das hier, dann sagt der Duplicate Definition, egal ob man sagt, Header nur einmal

392
00:46:29,960 --> 00:46:37,640
oder nicht. Ja, genau. Die ganzen Libraries, die komplett im Header-File sind, die verwenden

393
00:46:37,640 --> 00:46:46,080
alle inline. Der einzige Fall, den ich jetzt gefunden habe, wo man das nicht machen kann,

394
00:46:46,080 --> 00:46:54,360
ist, wenn man Sachen verstecken will. Also wenn man beispielsweise hier was inkluden will,

395
00:46:54,360 --> 00:47:01,200
was man nicht in Main inkluden will. Weil ansonsten ist ja, ist ja, das quasi, geht inklud komplett

396
00:47:01,200 --> 00:47:05,640
durch. Also wenn ich hier was inklude und dieses dann hier inklude, inklude, dann das, was ich hier

397
00:47:05,640 --> 00:47:13,480
inklude, auch noch da rein. Warum schreibst du eigentlich C++? Ja, weil es nicht anders geht.

398
00:47:13,480 --> 00:47:20,040
Du musst, für den ESP32 gibt es nur C++ als Variante. Du hast noch, noch die theoretische

399
00:47:20,040 --> 00:47:25,840
Möglichkeit. Also es gibt noch weitere Varianten, wenn man es unbedingt will. Du kannst den ESP32

400
00:47:25,840 --> 00:47:32,440
in Micro-Python programmieren. Da hat das halt aber ganz andere Probleme. In Lua, dafür gibt es kaum

401
00:47:32,440 --> 00:47:46,600
was. Es gibt eine Rust, eine Rust Preview-Build, was auch nicht richtig funktioniert und es gibt

402
00:47:46,600 --> 00:47:53,140
sogar eine.NET-Implementierung, die auf dem ESP32 funktioniert. Dafür gibt es aber auch kaum

403
00:47:53,140 --> 00:48:00,400
Libraries. Also die einzig sinnvolle Variante ist halt leider, dass man das in C++ programmiert.

404
00:48:00,400 --> 00:48:07,640
Ja, C++ 20 mit Modules könnte die erste Version werden, die halbwegs benutzbar wird. Wobei ich

405
00:48:07,640 --> 00:48:12,480
letzten schon wieder gesehen habe, dass sie Sachen, die andere Sprachen seit 15 Jahren haben und die

406
00:48:12,480 --> 00:48:17,840
sehr sinnvoll wären für C++ schon wieder nicht machen werden oder vielleicht nicht machen werden

407
00:48:17,840 --> 00:48:23,600
oder sowas. Es gibt zum Beispiel für C++, also ich muss es sagen, es gibt in C-Sharp, das war

408
00:48:23,600 --> 00:48:27,760
einer der ersten Sprachen, die glaube ich sowas hatte. Also der einen der größeren objektorientierten

409
00:48:27,760 --> 00:48:36,080
Sprachen, die sowas hatte, war, hatte die Möglichkeit, dass man Klassen erweitert, ohne dass man sie

410
00:48:36,080 --> 00:48:41,520
vererbt. Also zum Beispiel, wenn ich jetzt hier einen Arduino-String anlege. So und das Ding hat

411
00:48:41,520 --> 00:48:47,240
halt nur eine gewisse Anzahl an Methoden, was man damit machen kann. So und sagen wir mal, ich möchte

412
00:48:47,240 --> 00:48:56,880
jetzt neben diesen toChar, toDouble, toInt, toFloat noch ein toCuteChat haben. Und ich kann die Klasse

413
00:48:56,880 --> 00:49:03,600
nicht erweitern, das funktioniert nicht. Das einzige, was ich machen kann ist, ich kann die Klasse erben

414
00:49:03,600 --> 00:49:10,320
und eine neue Klasse bauen, wo ich dann toCuteChat bastele. So in C-Sharp gibt es sowas wie

415
00:49:10,320 --> 00:49:16,320
Extension-Methods. Das heißt, ich kann statisch was programmieren, was dann hier als Erweiterung

416
00:49:16,320 --> 00:49:20,920
angezeigt wird, ohne dass ich eine Subklasse ableiten muss. Das ist für kleine Sachen wie

417
00:49:20,920 --> 00:49:26,280
beispielsweise StringExtension, ist das unglaublich praktisch und sorgt dafür, dass man viel weniger

418
00:49:26,280 --> 00:49:37,240
Klassen braucht und viel weniger, wir war, wo was ist. Und das wollten sie in C++, glaub für, das

419
00:49:37,240 --> 00:49:42,600
gibt es seit 2014, wollten sie das einbauen, immer wieder in den nächsten C++-Standard und

420
00:49:42,600 --> 00:49:46,880
haben es noch nie geschafft. Und jetzt sind sie schon wieder am überlegen, soll das denn in C++20

421
00:49:46,880 --> 00:49:53,080
rein? Ich weiß nicht so genau. Die tun sich da selbst das Leben schwer machen, zumal die

422
00:49:53,080 --> 00:49:59,520
C++-Standard-Library eh schon einfach nur, wie soll man das beschreiben, irgendwie wir ist.

423
00:49:59,520 --> 00:50:09,720
Mal wollen sie es so, mal wollen sie es so. Also C++ halt. Also was wir brauchen ist für

424
00:50:09,720 --> 00:50:18,760
den Web-Server, erstmal brauchen wir sowas wie Start. Wir machen das in eigenes C++-File. Wir

425
00:50:18,760 --> 00:50:29,360
sind mal so nett. Void, Start. So, damit er das noch richtig schreiben könnte. So, da braucht man

426
00:50:29,360 --> 00:50:52,440
sowas wie einen Port. 8, ne Moment, wie heißt das Ding nochmal? Int 8, uint 8, uint, ne 16 brauchen wir,

427
00:50:52,440 --> 00:50:59,200
uint. Warum ist das nicht drinnen? Was muss ich da importen für? Was muss man da importen,

428
00:50:59,200 --> 00:51:07,000
dass es erstmal Arduino-Include, das brauchen wir eh, kommen wir eh nicht drum herum. Uint 16 haben

429
00:51:07,000 --> 00:51:22,800
wir es doch, oder? Uint 8 haben wir, haben wir auch 16, Port. Ja, ich habe meine Zweifel,

430
00:51:22,800 --> 00:51:27,200
dass Modules und so richtig funktionieren werden in C++, weil eigentlich fast nichts in C++ so

431
00:51:27,200 --> 00:51:32,200
funktioniert, wie man es erwartet. Das ist ja grad der Witz. Die haben relativ viel eingebaut auch

432
00:51:32,200 --> 00:51:38,120
die letzten Jahre, aber es ist einfach so wir und an jeder Stelle anders, dass man nicht durchblickt.

433
00:51:38,120 --> 00:52:03,080
Tuhappen, kennt ihr Happen? Happen, das war früher so ein Eis. Riesenhappen. Heißt heute Big Sandwich. Weiß nicht, wie ich da grad drauf komm. So, also, Tuhappen fragt, hey, wenn ich nach

434
00:52:03,080 --> 00:52:33,000
circa 200 Stunden Java-Programmier irgendwie die Lustmotivation verloren habe, willst du sagen, das ist nichts für mich? Das ist kein Wunder, das ist ja auch Java. Es kommt drauf an, was sich da dran nervt. Wenn es Java ist, probier mal eine andere Programmiersprache. Probier mal was ordentliches. Wenn du was ähnliches wie Java willst, probier mal.NET Core. Ich finde.NET Core viel angenehmer an den meisten Stellen. Oder

435
00:52:33,000 --> 00:53:02,360
aber wenn es dir gar nichts ist und du was Dynamisches angucken willst, guck dir mal vielleicht sogar Frontend Sachen mit JavaScript, HTML, CSS, JavaScript an. Wenn du visuell was sehen möchtest, was passiert. Generell finde ich zum Einstieg die Kombination JavaScript, HTML, CSS mittlerweile fast das Beste. Die Frage kommt ja fast jedes Mal. Was ich empfehlen würde zum Einstieg und ich sag dann immer, wenn du das machen willst, dem das, wenn du Windows Desktop

436
00:53:02,360 --> 00:53:08,840
Wenn du das desktop machen willst mit das ich mittlerweile muss ich fast sagen ich habe da meine ich habe da meine meinung ein bisschen geändert

437
00:53:09,000 --> 00:53:16,280
Ich denke dass das beste zum einstieg tatsächlich mittlerweile css html javascript ist weil man kommt eh nicht dran vorbei

438
00:53:16,600 --> 00:53:20,040
Egal ob du später frontend sachen machst oder backendsachen oder sonst was

439
00:53:20,600 --> 00:53:24,280
bisschen html javascript css was anderes

440
00:53:24,560 --> 00:53:29,760
kannst du kommst nie dran vorbei ein bisschen was musst du damit immer machen, ein bisschen dich mit auskennen

441
00:53:29,760 --> 00:53:33,280
Und zum einstieg ist es halt ganz cool weil du siehst was passiert

442
00:53:34,520 --> 00:53:38,720
Wenn man mit irgendwelchen kommando zeilen tool oder sonst was anfängt dann ist das so unspektakulär

443
00:53:39,400 --> 00:53:43,280
Ja, aber wenn man eine webseite macht wo dann auch dynamisch was passiert wo sich dann vielleicht

444
00:53:44,080 --> 00:53:45,760
auch

445
00:53:45,760 --> 00:53:49,640
Irgendwie was reagiert wenn ich was anklick und so dann ist das

446
00:53:49,640 --> 00:54:00,760
Taubisch motivierender für den einsteiger als wenn er sich irgendwelche kommando zeilen dinge anguckt. Ja

447
00:54:00,920 --> 00:54:06,480
Okay also das brauchen wir brauchen einen port und ich habe gedacht wir sind mal wir sind mal ganz ganz mutig

448
00:54:06,720 --> 00:54:13,000
Wir sind ganz mutig und implementieren auch noch basic auth. Ich habe basic auth noch nie implementiert ich weiß nicht wie das funktioniert

449
00:54:13,000 --> 00:54:15,000
Ich weiß es theoretisch

450
00:54:15,920 --> 00:54:17,920
Ich weiß dass basic

451
00:54:17,920 --> 00:54:24,440
Authifizierung im browser das ist quasi username passwort base 64 encoded das ist big brain

452
00:54:24,840 --> 00:54:27,240
kryptographie wobei soll ja gar nicht gar nicht

453
00:54:28,080 --> 00:54:35,400
verschlüsselt sein also basic auth müssen wir eigentlich müssten wir eigentlich hinkriegen wenn der rest funktioniert basic auth

454
00:54:36,840 --> 00:54:41,640
Steht ein header drinne im request und der ist base 64 encoded username passwort also

455
00:54:41,640 --> 00:54:45,920
Ja, deswegen auch übrigens wichtig dass man das über hattet tps macht

456
00:54:46,640 --> 00:54:51,760
So dann brauchen wir noch ein paar variablen nämlich halt mein passwort und mein

457
00:54:52,800 --> 00:54:54,800
user und mein

458
00:54:55,360 --> 00:55:00,920
Port ne port brauchen wir nicht gut und jetzt schauen wir mal das ist eine sache die mache ich fast nie

459
00:55:01,680 --> 00:55:06,400
Jetzt machen wir nämlich ein c++ file weil ich habe im vorfeld schon rausbekommen

460
00:55:06,400 --> 00:55:10,320
Ja, du hast recht herving jetzt ja ich habe sie auch schon gesagt das hat ja mit verschlüsselung eigentlich gar nichts zu tun

461
00:55:13,160 --> 00:55:15,160
Ich habe nämlich im vorfeld schon rausbekommen

462
00:55:16,000 --> 00:55:21,120
Wir kommen rein mit header only nicht hin denn wir müssten hier dieses ganze

463
00:55:21,840 --> 00:55:28,080
Tls zeug inkluden und wenn man das tls zeug inkludet geht das wlan in main kaputt

464
00:55:28,880 --> 00:55:30,880
weil das irgendwelche sachen umdefiniert

465
00:55:32,080 --> 00:55:34,080
Was halt was wir hier machen

466
00:55:34,080 --> 00:55:39,840
Das heißt dadurch dass ich hier das inkluder und ich hier tls zeug inkluder

467
00:55:40,480 --> 00:55:45,960
inkluder der ja das hier und hier an der stelle dann auch das tls zeug und dadurch dass das tls zeug

468
00:55:45,960 --> 00:55:49,920
Inkludet wird bevor ich mein wi-fi anlege die zweifel geht es wlan kaputt

469
00:55:51,400 --> 00:55:53,400
Hat man das jetzt verstanden

470
00:55:56,040 --> 00:55:59,720
Also wenn ich irgendwelche header importiere die was mit

471
00:55:59,720 --> 00:56:04,280
Netzwerksachen zu tun haben bevor ich wlan starte geht es wlan kaputt

472
00:56:04,840 --> 00:56:08,480
Deswegen muss ich dafür sorgen dass das hier nicht inkludet wird

473
00:56:09,480 --> 00:56:15,040
Das ist halt fail ja so und die einzige variante wie man das machen kann soweit ich rausbekommen habe ist

474
00:56:16,320 --> 00:56:23,800
Man muss einen c++ feil anlegen was genauso heißt wie das hier und dann versteckt er alles was man z++ feil macht vor dem rest

475
00:56:23,800 --> 00:56:32,200
Ist halt ein bisschen doof wenn man halt eine sprache hat die keine ordentlichen exports module oder irgendwas hat wo sowas standardmäßig schon geht und wo man sich

476
00:56:32,200 --> 00:56:39,080
auch mit header und irgendwelche c++ feils rum ärgern muss also mal sowas hier das habe ich noch nie gemacht ich muss mal gucken ob das

477
00:56:39,800 --> 00:56:41,800
funktioniert so

478
00:56:42,280 --> 00:56:46,400
Und wie und wie geht das jetzt sage ich jetzt hier inklud

479
00:56:46,400 --> 00:56:53,680
Header so und dann legt man. Moment wie ging das so, ne?

480
00:56:57,040 --> 00:56:59,520
Jetzt muss man nämlich den ganzen kram noch mal schreiben

481
00:57:00,560 --> 00:57:04,240
Allerdings dann nicht mit einer class dazwischen weil weil weil

482
00:57:05,040 --> 00:57:09,240
So ging das so und jetzt bilden wir das ganze mal gucken ob es funktioniert

483
00:57:09,240 --> 00:57:17,000
Okay, er muss erst mal wieder das ganze ding neu bilden mach mal du programmierst eine lennungsform korrekt wenn dich die config interessiert

484
00:57:19,000 --> 00:57:25,240
Leider nicht auf einem ganz aktuellen stand ich muss mal wieder poschen ich habe so die mini config habe ich mal hier auf github hochgeladen

485
00:57:27,240 --> 00:57:29,240
Und jetzt muss ich das ganze mal wieder ausprobieren

486
00:57:30,600 --> 00:57:32,600
Und jetzt muss ich das ganze mal wieder ausprobieren

487
00:57:32,600 --> 00:57:38,360
Und jetzt muss man wieder poschen ich habe so eine mini config habe ich mal hier auf github hochgeladen

488
00:57:43,320 --> 00:57:48,080
Kannst du die config angucken und da muss ich habe ja mein notebook auf der arbeit neu installiert

489
00:57:48,200 --> 00:57:55,760
Vor ein paar tagen und da habe ich genau die gleiche config hier verwendet und ich war begeistert wie gut das funktioniert einfach config also

490
00:57:57,040 --> 00:57:59,040
Ich verwende das hierfür

491
00:57:59,040 --> 00:58:02,440
Also das ist ein config manager config file manager

492
00:58:03,960 --> 00:58:06,360
Das kann ich vielleicht mal im stream zeigen aber nicht jetzt

493
00:58:06,920 --> 00:58:12,120
Da sagt man einfach nur mit diesem config manager clone dieses repo und verlinkt mir die ganzen dateien

494
00:58:13,080 --> 00:58:19,640
Und dann legt er dir dann klont er das repo verlinkt alle dateien an die richtigen stelle wo sie sein müssen und ich habe mein notebook

495
00:58:19,840 --> 00:58:21,840
neu gemacht

496
00:58:21,840 --> 00:58:29,120
Mein mein mein config file repo geklont und ein paar pakete nachinstalliert und instant war mein war mein notebook auf der arbeit

497
00:58:29,120 --> 00:58:31,200
Exakt so eingerichtet wie die vm daheim richtig gut

498
00:58:35,480 --> 00:58:38,640
To happen das ist kein problem du musst du musst das nicht studiert haben

499
00:58:40,560 --> 00:58:44,480
Also ich habe den kram auch nicht studiert ich habe den kram mal ich habe eine ausbildung gemacht vor uhrzeiten

500
00:58:45,400 --> 00:58:50,120
Aber das wichtigste ehrlich gesagt ist dass man sich dafür interessiert

501
00:58:50,120 --> 00:58:54,800
Und wenn man sich für einen bereich interessiert wird man auch immer besser in diesem bereich und umso besser man in einem bereich ist

502
00:58:54,800 --> 00:59:01,360
umso größer sind die chancen dass man in diesem bereich auch arbeiten kann und umso besser wird man wieder also es hat

503
00:59:01,880 --> 00:59:03,880
schon seine vorteile

504
00:59:04,600 --> 00:59:06,600
wenn man

505
00:59:06,840 --> 00:59:10,440
Da hartnäckig halt ist bei einer sache die einen interessiert

506
00:59:13,080 --> 00:59:16,320
Es können die unterschiedlichsten dinger sein also ist man es muss nicht jeder

507
00:59:16,320 --> 00:59:20,480
javascript css html mögen es muss auch nicht jeder

508
00:59:21,040 --> 00:59:24,720
java zeug mögen nicht jeder pyson ai gedöns mögen

509
00:59:25,440 --> 00:59:26,480
oder

510
00:59:26,480 --> 00:59:30,080
irgendwelche dotnet geschichten und sonst was es hat jeder es hat jeder ganz unterschiedliche sachen

511
00:59:30,640 --> 00:59:33,520
Manch einer mag vielleicht irgendwelche datenbank design

512
00:59:34,240 --> 00:59:37,960
Geschichten ja manch einer mag halt vielleicht bisschen mehr die design

513
00:59:38,480 --> 00:59:42,880
Ecke also es gibt ja da 1000 1000 richtung was man machen kann

514
00:59:42,880 --> 00:59:45,360
Und wenn man das kann wird man gebraucht

515
00:59:46,720 --> 00:59:50,480
Ja es gibt leute mögen die mögen fort ran ja es gibt auch leute mögen kobold

516
00:59:51,360 --> 00:59:56,200
Bei mir hat einer eine ausbildung gemacht die hat ist jetzt im bereich

517
00:59:56,480 --> 01:00:02,240
IBM großrechner und macht kobold im jahr 2020 muss man sich mal vorstellen aber die fand das toll

518
01:00:02,560 --> 01:00:04,560
Wir müssen mal anfangen sonst wird das ganze nix

519
01:00:05,120 --> 01:00:10,400
Also wo haben wir hier das Beispiel was was für was für headers brauchen wir denn das hier

520
01:00:10,400 --> 01:00:17,200
Alles mal inkluden alles mal inkluden so und das problem ist jetzt wenn ich das hier hier inklude ich zeige es euch einfach mal

521
01:00:17,600 --> 01:00:21,840
dass ihr mir das auch glaubt wenn ich das hier hier inklude an der stelle

522
01:00:22,640 --> 01:00:28,720
und hochlade auf den esp dann geht mein wlan nicht mehr werdet ihr gleich werdet ihr gleich sehen

523
01:00:29,440 --> 01:00:33,040
Und selbst wenn es geht ich weiß dass es später nicht geht weil ich habe schon ausprobiert

524
01:00:33,040 --> 01:00:39,200
Huge upload massiv zum glück muss man das nicht so oft machen

525
01:00:42,160 --> 01:00:44,160
Wie wechselst du die

526
01:00:48,800 --> 01:00:50,800
Ja

527
01:00:52,480 --> 01:00:54,480
Es hat funktioniert das wlan geht

528
01:00:56,480 --> 01:01:00,080
Aber das liegt bestimmt auch daran weil ich hier nicht drauf zu arbeiten bin ich hier nicht drauf zu arbeiten

529
01:01:00,080 --> 01:01:06,560
Aber das liegt bestimmt auch daran weil ich hier nicht drauf zugreife ich habe es ich habe es ausprobiert im vorfeld und es ging nicht

530
01:01:06,560 --> 01:01:08,560
Es ging es ging nicht

531
01:01:08,720 --> 01:01:13,440
Deswegen mache ich das jetzt mal mache ich das jetzt hier mal wirklich mal weiter weil ich weiß als früher noch spielen wir machen

532
01:01:13,440 --> 01:01:19,040
Einfach mal weiter wir machen hier einfach mal so weiter wenn es kaputt geht kann ich es ja immer noch kann ich sie immer noch ändern

533
01:01:21,360 --> 01:01:23,600
Hier übrigens das ist eine gute frage vom

534
01:01:23,600 --> 01:01:25,600
Wo ist es denn

535
01:01:30,400 --> 01:01:33,360
Genau das hier was das der plops thrusher geschrieben hat also

536
01:01:34,080 --> 01:01:38,320
Es gibt wirklich so viele bereiche wo man was machen kann also mal grundsätzlich gesagt

537
01:01:39,040 --> 01:01:42,080
Alles das was ich jetzt aufgezählt habe war ja eigentlich nur

538
01:01:43,120 --> 01:01:45,120
unter unter

539
01:01:45,120 --> 01:01:48,640
Punkte es gibt ja noch komplett andere bereiche zum beispiel

540
01:01:48,640 --> 01:01:53,600
Das was ich war was wir jetzt hier machen fällt ja schon so ein bisschen in den embedded bereich also irgendwelche

541
01:01:53,920 --> 01:01:55,920
microcontroller und und und kleinst

542
01:01:56,960 --> 01:02:02,160
Dinger ja das ist noch mal ein ganz anderer bereich für sich dann gibt es irgendwelche industriesteuerungs

543
01:02:02,960 --> 01:02:06,720
Sachen und es gibt so viele bereiche und so viele unterschiedliche

544
01:02:07,280 --> 01:02:13,120
Gebiete also man findet da was was einem gefällt sofern man sich dafür interessiert und bei mir ist es so

545
01:02:13,120 --> 01:02:19,680
Ich habe gemerkt ich mag das halt nicht so wenn ich am stück immer die gleichen sachen macht zum beispiel

546
01:02:19,920 --> 01:02:22,800
Wenn ich in einem monat an einem programm rumbasteln

547
01:02:23,520 --> 01:02:28,800
Da habe ich dann irgendwann kein bock mehr drauf und wenn ich da noch mal einen monat weiter dran rumbasteln dann fasse ich es nie wieder an

548
01:02:29,120 --> 01:02:36,000
Das ist halt doof deswegen habe ich immer so zwei drei sachen wo ich dran rumbasteln kann also sprich wenn mir jetzt hier dieses microcontroller

549
01:02:36,000 --> 01:02:42,160
ESP 32 C++ gebastelt auf dem keks geht dann bastel ich weiter an meiner

550
01:02:43,360 --> 01:02:45,360
webcam nicht webcam

551
01:02:46,560 --> 01:02:48,560
nicht webcam

552
01:02:49,280 --> 01:02:51,280
security cam

553
01:02:51,280 --> 01:02:53,280
sicherheits- also überwachungskamera

554
01:02:54,000 --> 01:02:56,000
browser

555
01:02:56,000 --> 01:02:58,000
übersicht

556
01:02:58,400 --> 01:03:00,400
also meine meine sicherheitskamera

557
01:03:00,400 --> 01:03:07,920
streaming sache mit go so und das sind dann zwei komplett unterschiedliche sachen das hier ist jetzt reines ekliges

558
01:03:08,480 --> 01:03:12,000
abartiges c++ und das andere ist eine mischung aus go und c-sharp

559
01:03:13,440 --> 01:03:18,960
Hast du dir eigentlich eine neue cam bestellt ja genau die gleiche wie das letzte mal und ich hoffe die geht jetzt nicht kaputt weil ich hab es bei amazon umgetauscht

560
01:03:20,400 --> 01:03:25,760
Wie wechselst du den desktop ohne die vm erst detaching zum ich detach ich detach nur schlafen

561
01:03:25,760 --> 01:03:32,320
Guck ich klicke ich sache control alt und direkt danach control mit windows links

562
01:03:33,680 --> 01:03:39,040
Und dann wieder rechts und reinklicken ich detach ich detach nur schnell

563
01:03:41,360 --> 01:03:48,480
Ich habe mir den makro gebaut für die für die für die maus hier kann man kann sie dir gut mit der logitech software mit irgendwas anderem bauen

564
01:03:49,280 --> 01:03:54,320
Das ist ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen ein bisschen

565
01:03:54,320 --> 01:03:56,320
Ich waiting for you

566
01:03:56,320 --> 01:04:02,680
den seitentasten der maus das machen kannst ja angular hör wegen angular ist ja auch zum

567
01:04:02,680 --> 01:04:08,240
kotzen angular ist so ein overengineertes enterprise ding damit bin ich nie ich will

568
01:04:08,240 --> 01:04:11,800
nicht sagen das schlecht ist aber damit bin ich nie warm geworden und dann bin ich eigentlich

569
01:04:11,800 --> 01:04:16,160
schon am start eine stunde wir haben noch erst noch keine zeile richtig programmiert

570
01:04:16,160 --> 01:04:23,360
exzellent so wie immer also so so wir legen jetzt hier mal an dass das nicht nicht kaputt

571
01:04:23,360 --> 01:04:32,880
geht wo ist mein set-up wo ist mein set-up hier ist mein set-up so start start port 4433 user

572
01:04:32,880 --> 01:04:44,160
exzellent admin password 123456 so highly secure und nur hier gesehenes passwort verwendet sonst

573
01:04:44,160 --> 01:04:48,600
keiner sondern implement jetzt fangen wir mal an also gucken wir uns mal das beispiel an den

574
01:04:48,600 --> 01:04:54,440
kram haben wir included http response das ist so wer es noch nicht gesehen hat so sieht eine

575
01:04:54,440 --> 01:05:02,920
webseite aus wenn man die abruft im klartext logitech lure ja das ist leider lure aber man

576
01:05:02,920 --> 01:05:06,960
kann das auch mit diesem makro editor machen man muss das nicht direkt in lure machen so

577
01:05:06,960 --> 01:05:14,840
so sieht eine webseite eine billige webseite aus wenn man sie per http geschickt kriegt das

578
01:05:14,840 --> 01:05:22,200
ist die antwort http status code 1 0 ok und dann gibt es content type text html und jede

579
01:05:22,200 --> 01:05:28,960
http requests ne nicht ja request auch und response auch die einzelnen sachen enden immer mit einem

580
01:05:28,960 --> 01:05:32,560
carriage return new line carriage return new line immer diese zwei sachen hintereinander

581
01:05:32,560 --> 01:05:40,320
so und das hier ist im prinzip des http was man dann zurück zurückgeliefert kriegt welche

582
01:05:40,320 --> 01:05:44,480
programmiersprache würdest du empfehlen wenn man anfangen will gut dass du fragst weil das hab

583
01:05:44,480 --> 01:05:48,400
ich vor fünf minuten beantwortet deswegen kann ich jetzt noch mal ganz kurz wiederholen ich

584
01:05:48,400 --> 01:05:54,040
war früher der meinung man muss sich erstmal überlegen was für ein gebiet einem gefällt

585
01:05:54,040 --> 01:05:59,600
und habe ich die leute immer gefragt so was meinst du was was ist so die richtung was dir gefällt

586
01:05:59,600 --> 01:06:04,600
und dann habe ich den leuten was empfohlen mittlerweile bin ich andere ansicht das beste

587
01:06:04,600 --> 01:06:09,920
zum einsteigen ist wenn man nicht schon ganz konkrete vorstellungen hat was man machen will

588
01:06:09,920 --> 01:06:13,800
ja also wenn du jetzt wenn du jetzt sagst hey ich würde gerne irgendwelche microcontroller

589
01:06:13,800 --> 01:06:18,680
programmieren oder ich würde gerne windows desktop software machen oder oder was auch immer also

590
01:06:18,680 --> 01:06:23,000
wenn du noch keine genauen vorstellungen hast dann ist das beste meiner meinung nach aktuell

591
01:06:23,000 --> 01:06:31,160
man fängt mit dem standard gespannt aus javascript html und css an einfach weil man sieht was

592
01:06:31,160 --> 01:06:40,040
passiert und weil man an frontend geschiss geschiss ähnlich vorbeikommt also ein bisschen html

593
01:06:40,040 --> 01:06:45,280
javascript css muss man immer machen immer guck mal ich bastel ich versuche in den webserver zu

594
01:06:45,280 --> 01:06:51,680
basteln der statisches html ausliefert so das muss das das html muss doch aber irgendwas machen

595
01:06:51,680 --> 01:06:56,360
dass im endeffekt ein bisschen html ein bisschen javascript da drin dass die seite dann funktioniert

596
01:06:56,360 --> 01:07:01,480
die übrigens nicht in line hier in mein c++ dokument schreiben würde brauchst du dann wieder

597
01:07:01,480 --> 01:07:07,280
also du kommst im prinzip nicht drum herum deswegen bin ich der man das beste was man machen kann

598
01:07:07,280 --> 01:07:15,080
erst mal zum einstieg ist javascript html css so also fangen wir mal an dieses beispiel habe das

599
01:07:15,080 --> 01:07:21,400
habe ich das habe ich ausprobiert das funktioniert so start also ich kopiere mir das gerade mal wir

600
01:07:21,400 --> 01:07:29,160
schmeißen mal raus was wir nicht brauchen so also komischer name für den ssl sauber brauchen wir

601
01:07:29,160 --> 01:07:38,520
schon mal netz moment mach mal kurz auf der anderen seite was auf dass ich das im zweiten

602
01:07:38,520 --> 01:07:43,760
monitor abgucken kann da muss ich nicht muss ich nicht ganz so viel hin und her switchen

603
01:07:43,760 --> 01:08:03,880
wo ist es ok so genau also müssen das ganze starten als erstes müssen wir noch sagen dass

604
01:08:03,880 --> 01:08:10,120
ups soll das passwort was hier übergeben wird speichern wir hier oben in passwort drinne und

605
01:08:10,120 --> 01:08:13,840
der user der hier übergeben wird speichern wenn user dass man das später basic aus mit machen

606
01:08:13,840 --> 01:08:23,800
können und dann legen wir mal unseren server an also net context listen kleine das werden

607
01:08:23,800 --> 01:08:28,760
wir wahrscheinlich brauchen wobei ich tue jetzt mal nicht so als hätte ich keine ahnung wie gesagt

608
01:08:28,760 --> 01:08:32,280
ich habe das schon ein bisschen ausprobiert dass die klein geschichte brauchen wir nicht und den

609
01:08:32,280 --> 01:08:39,720
kram können wir auch wegschmeißen so also was das hier macht nur mal so kurz kurz kurz zur erklärung

610
01:08:39,720 --> 01:08:49,360
ember tls ist eine tls oder ssl https wie auch immer man es nennen mag implementierung für

611
01:08:49,360 --> 01:08:58,360
microcontroller also für so krams ihr kennt wahrscheinlich eher open ssl open ssl ist die

612
01:08:58,360 --> 01:09:04,080
fette variante die so ziemlich 90 prozent allen verschlüsselten traffic im internet abhandelt

613
01:09:04,080 --> 01:09:09,280
das ist so der standard schlechthin gibt es ein paar forks von was gibt es in der open ssl libre

614
01:09:09,280 --> 01:09:14,720
ssl und und free ssl und und alle möglichen dinger die haben sich ja wieder geforkt bis zum

615
01:09:14,720 --> 01:09:20,760
gegner gegabelt bis bis zum geht nicht mehr zumindest open ssl ist eigentlich so mit mit

616
01:09:20,760 --> 01:09:29,440
das bekannteste also sprich wenn ihr irgendwelche software verwendet die https verwendet da ist

617
01:09:29,440 --> 01:09:35,960
garantiert das meister open ssl von ich bin mir gar nicht sicher was microsoft macht microsoft

618
01:09:35,960 --> 01:09:41,360
unter windows wahrscheinlich was eigenes allerdings auf webserver seite also sprich wenn ihr was

619
01:09:41,360 --> 01:09:51,240
abruft ist das zu 90 prozent wenn ich wenn nicht sogar zu 95 prozent open ssl und ember tls ist

620
01:09:51,240 --> 01:09:56,600
quasi so was ähnliches wie open ssl bloß ein bisschen ressourcen sparen dafür hier kleine

621
01:09:56,600 --> 01:10:03,120
kleine microcontroller und deswegen müssen wir das ganze tls zeug importieren dass das funktioniert

622
01:10:03,120 --> 01:10:10,920
so was man jetzt machen muss ist die initialisierung ist ein bisschen eklig deswegen copy paste sich

623
01:10:10,920 --> 01:10:15,920
jetzt auch zum größten teil das beispiel und gut ist man muss hier irgendwie kontexte anlegen man

624
01:10:15,920 --> 01:10:20,640
muss hier irgendwie gedürft muss muss jetzt eigentlich nicht sonderlich großartig interessieren

625
01:10:20,640 --> 01:10:25,040
weil ich habe es im vorfeld schon ausprobiert dass alles richtig so und das klappt ich habe

626
01:10:25,040 --> 01:10:29,200
nämlich im vorfeld schon ein bisschen gebastelt und hat mir grad auf dem zweiten bildschirm das

627
01:10:29,200 --> 01:10:32,400
beispiel aufgemacht was ich schon ein bisschen gebastelt habe da muss ich jetzt nicht komplett

628
01:10:32,400 --> 01:10:38,920
planlos hier rum tippen übrigens eine sache die mir gerade auffällt das will ich gar nicht so

629
01:10:38,920 --> 01:10:54,160
nämlich konfig setting ich will tabs ich will zwei tabs nicht vier editor tabs zwei ja spaces

630
01:10:57,960 --> 01:11:05,080
wie sage ich dem jetzt dass er reformatet dass er die spaces neu einrückt wie sage ich ihm das

631
01:11:05,080 --> 01:11:14,280
denn jetzt einfach mal zumachen

632
01:11:14,280 --> 01:11:34,560
vier spaces ja wie sage ich ihm jetzt dass ich zwei spaces haben will er können vier spaces das

633
01:11:34,560 --> 01:11:41,840
ist wie das code ja ich will zwei spaces ich habe es doch jetzt auch schon eingestellt aber

634
01:11:41,840 --> 01:11:49,240
ein tab size lull ich habe das falsche in dem moment jedoch doch richtig indent

635
01:11:49,240 --> 01:11:59,120
was rechts unten habe ich doch gerade schon jaja aber ich stelle ich das um aber ich stelle ich

636
01:11:59,120 --> 01:12:16,320
das um wie reformat ich das format

637
01:12:16,320 --> 01:12:32,240
was klickt dort auf using spaces ah ja ok easy das hätte ich jetzt ewig gesucht

638
01:12:32,240 --> 01:12:38,840
mich das gefunden hätte ok wie gesagt ich tippe das jetzt aus meinem eigenen gebastelten

639
01:12:38,840 --> 01:12:43,200
beispiel ein bisschen ab übrigens wir können an der stelle hier ein neues c++ feature verwenden

640
01:12:43,200 --> 01:12:49,280
was wieder auf die absolut und also abwegigste art und weise überhaupt implementiert wurde

641
01:12:49,280 --> 01:13:01,800
nämlich man kann jetzt das hier machen das ist neu sei glaube c++ 14 oder so wenn man also ok ich

642
01:13:01,800 --> 01:13:06,880
flame jetzt nicht c++ warum sie das so gemacht haben ja aber was das macht ist folgendes wenn

643
01:13:06,880 --> 01:13:13,640
man hier einen parameter übergibt und man den parameter nirgendswoanders mehr verwendet dann

644
01:13:13,640 --> 01:13:24,800
man das in tabs und wenn man den parameter nirgendswoanders verwendet dann kann man dem kann

645
01:13:24,800 --> 01:13:28,880
man hiermit quasi dem keine ahnung wie es unter der haupe fung ich sage jetzt mal dem compiler

646
01:13:28,880 --> 01:13:35,880
sagen dass er quasi den diesen diese variable hier nicht kopieren muss von da nach da sondern

647
01:13:35,880 --> 01:13:43,040
quasi einfach umlinken kann intern quasi verschieben kann also sprich weil ich weiß dass es hier unten

648
01:13:43,040 --> 01:13:48,720
nicht mehr verwendet wird kann ich einfach sagen anstatt dass du jetzt user von hier nach user hier

649
01:13:48,720 --> 01:13:54,400
oben kopierst kannst du einfach quasi das den speicherbereich umlinken du kannst einfach das

650
01:13:54,400 --> 01:14:09,600
user da drauf zeigen lassen ja exakt aber vor allem warum denn so standard move rast macht das

651
01:14:09,600 --> 01:14:19,160
übrigens auch so allerdings nicht mit standard move rast hat quasi das eingebaut dass man solche

652
01:14:19,160 --> 01:14:25,120
sachen hier machen kann und dann ist das relativ offensichtlich wie man es benutzen muss das

653
01:14:25,120 --> 01:14:28,800
benutzt man hat immer gleich und hier haben sie sich gedacht ach nee wir bauen irgendwie im

654
01:14:28,800 --> 01:14:35,000
standard namesprays so eine magic methode ein die das macht typisch zippen moment leute

655
01:14:35,000 --> 01:14:43,480
muss man kurz time on so weiter geht's also das ist jetzt angeblich viel mehr und krassere

656
01:14:43,480 --> 01:14:46,880
performance und so nicht dass wir das bräuchten aber das ist jetzt ein neues plus plus feature

657
01:14:46,880 --> 01:14:53,520
also können wir es mal verwenden gut weiter geht's was wir jetzt brauchen ist einmal einen

658
01:14:53,520 --> 01:15:03,480
mbeth tls net context das ist quasi der port an dem der server später lauscht wenn man so will

659
01:15:03,480 --> 01:15:11,720
was wird hier gebastelt ein webserver also ein ssl fähiger webserver der auf dem esp 32 läuft

660
01:15:11,720 --> 01:15:18,200
und alle esp 32 kerne verwendet also quasi maximal vier threats weil dann der ram all ist mit ssl

661
01:15:18,200 --> 01:15:24,840
oder 5 5 maximal fünf verbindungen gleichzeitig habe ich ausprobiert vorhin schafft er weil

662
01:15:24,840 --> 01:15:31,160
dann ist der ram all ssl braucht halt ein bisschen mehr speicher als normales htp ja 14 die die

663
01:15:31,160 --> 01:15:35,840
uhrzeit ist falsch der ntp server macht komische dinger und meine zeitzone settings sind fail

664
01:15:35,840 --> 01:15:43,440
vielleicht ist es aber einfach nur ein re broadcast um an ich habe einfach nur chat

665
01:15:43,440 --> 01:15:52,080
overlayt man weiß es nicht man weiß es nicht also das hier ist quasi der port an dem der

666
01:15:52,080 --> 01:16:02,960
server lauscht also quasi bei uns viel für drei so das legen wir jetzt an dann muss man sagen

667
01:16:02,960 --> 01:16:23,120
mbeth tls net init und dann muss man den kram übergeben weil weil c und c++ so und nachdem

668
01:16:23,120 --> 01:16:30,160
wir den kram nicht also diese variable hier nicht nur einmal brauchen sondern die komplette

669
01:16:30,160 --> 01:16:37,360
zeit während wir den server laufen haben kopieren wir die mal hier weg und kopieren die in die klasse

670
01:16:37,360 --> 01:16:46,960
rein nämlich da ober hin da kopieren wir das jetzt aber funktioniert das nämlich auch

671
01:16:46,960 --> 01:16:58,080
und jetzt können wir gucken dass das ding an dem port lauscht da kommen jetzt mbeth tls ssl

672
01:16:58,080 --> 01:17:07,080
konfig init und damit das funktioniert müssen wir jetzt erstmal eine standard konfig also

673
01:17:07,080 --> 01:17:13,200
erstmal konfig anlesen wie er die also was er alles einstellen soll an dem system das muss

674
01:17:13,200 --> 01:17:26,720
jetzt mal kurz abgucken copy paste mir das jetzt nämlich einfach copy paste mir das jetzt einfach

675
01:17:26,720 --> 01:17:30,280
da muss ich den kram nämlich nicht nochmal tippen so den ganzen miss brauchen wir jetzt

676
01:17:30,280 --> 01:17:37,280
klein so also wir müssen ssl konfig anlegen ups wenn ich das so richtig machen würde

677
01:17:37,280 --> 01:17:46,800
da können wir dann später so sachen konfigurieren wie welcher timeout bei connections und sowas in

678
01:17:46,800 --> 01:17:50,840
der richtung also sprich ab wann bricht der connections ab wenn keine daten mehr kommen

679
01:17:50,840 --> 01:17:55,240
und sowas ist ganz nützlich weil ich glaube das standard also nagelt mich jetzt nicht drauf fest

680
01:17:55,240 --> 01:18:01,200
ich bin mir da jetzt nicht ganz sicher also wie gesagt nagelt mich nicht drauf fest ich

681
01:18:01,200 --> 01:18:08,480
glaube standard htm standard ttp timeout sind glaube ich fünf minuten oder 15 minuten ehrlich

682
01:18:08,480 --> 01:18:20,480
gesagt weiß ich aus dem kopf was ok request nach 30 minuten was ist was ist die fault fünf

683
01:18:20,480 --> 01:18:33,560
minuten zumindest zu lang zumindest zu lang weil wie gesagt das ding hat nicht viel ram ich glaube

684
01:18:33,560 --> 01:18:42,680
ich glaube man hat ungefähr mich nicht 80 gigabyte oder so zur verfügung und

685
01:18:42,680 --> 01:18:53,200
ach moment ich verwechsel das gerade der pc der tcp timeout ist fünf minuten hatte tp keine ahnung

686
01:18:53,200 --> 01:19:00,360
ehrlich gesagt ist auch wurscht bei man hat hier nicht so viel ram das heißt jede connection die

687
01:19:00,360 --> 01:19:07,240
offen ist ist eine connection zu viel also jede connection die offen ist und 80 80 kilobyte nicht

688
01:19:07,240 --> 01:19:13,600
80 gigabyte 80 gigabyte wäre poggers da hätten sie neue ram chips hier der 80 gigabyte ram chip

689
01:19:13,600 --> 01:19:22,000
ist hier seht ihr eindeutig 80 kilobyte 80 kilobyte ram meistens zur verfügung das heißt jede

690
01:19:22,000 --> 01:19:30,240
connection die offen ist und nichts macht ist eine connection zu viel also jetzt müssen wir

691
01:19:30,240 --> 01:19:35,520
dem erstmal sagen an welchem port er lauschen soll ich copy paste übrigens mal den anderen

692
01:19:35,520 --> 01:19:40,920
kram ja auch das ist einfacher da müssen wir uns das nicht angucken das ist initialisierungs kram

693
01:19:40,920 --> 01:19:45,720
der legt hier speicherplatz an wo man ein zertifikat drin speichern kann dann wo man

694
01:19:45,720 --> 01:19:51,360
ein private key drin speichern kann dann irgendwelche random generator und sowas ich

695
01:19:51,360 --> 01:19:54,440
habe keine ahnung was es genau macht ich weiß nur dass es funktioniert und man muss es machen

696
01:19:54,440 --> 01:20:00,360
weil wenn man es nicht macht dann funktioniert es nicht so und was wir auch noch brauchen ist

697
01:20:00,360 --> 01:20:06,840
wir müssen den key einlesen und wie ihr seht ich habe hier einen zertifikat und einen private key

698
01:20:06,840 --> 01:20:13,200
den müssen wir einlesen weil den brauchen wir jetzt denn irgendwie muss der server ja

699
01:20:13,200 --> 01:20:18,480
https ssl verschlüsselung machen dazu brauchst du ein zertifikat und dazu brauchst du private key

700
01:20:18,480 --> 01:20:27,720
dass das ganze funktioniert ja deswegen sagen wir wir brauchen noch wir brauchen noch ein paar

701
01:20:27,720 --> 01:20:38,480
variablen für unsere keys und da machen wir sowas wie ein standard vector wir sind ja hier in c++

702
01:20:38,480 --> 01:20:48,240
uint alter komm visual studio code gibt alles brauchen das so lang übrigens ich wollte mal

703
01:20:48,240 --> 01:20:55,400
in nächster zeit sea lion ausprobieren können wir eigentlich auch mal im stream angucken weil

704
01:20:55,400 --> 01:21:01,600
das chat brains zeug ist ziemlich gut also alles was ich bisher verwendet habe go land ist top

705
01:21:01,600 --> 01:21:11,400
rider für dort net ist top ich muss sagen pp web storm habe ich nicht so viel mit gemacht hat

706
01:21:11,400 --> 01:21:23,840
mir jetzt nicht so extrem gut gefallen aber pie charm ist ziemlich gut und ruby mein war früher

707
01:21:23,840 --> 01:21:27,960
auch ziemlich gut also die machen die machen wirklich gutes teuer und die haben jetzt seit

708
01:21:27,960 --> 01:21:36,040
einer weile was schon ein bisschen her auch eine c++ ide und ich finde die c++ unterstützung in

709
01:21:36,040 --> 01:21:41,320
visual studio code sehr hakelig das funktioniert aber ihr seht es ist teilweise richtig langsam

710
01:21:41,320 --> 01:21:50,080
kommt man hier ich habe hier grad uint also das ist das ist nicht so nicht so snappy oder so wie

711
01:21:50,080 --> 01:21:55,640
man das auch immer nennen mag ja also wir brauchen wir brauchen speicher für unseren key und wir

712
01:21:55,640 --> 01:22:10,600
brauchen speicher für unser unser zertifikat so weil ohne funktioniert das ganze tls ssl zeug

713
01:22:10,600 --> 01:22:14,680
nicht das müssen wir jetzt einlesen da können wir einen von meinen big brain helper methoden

714
01:22:14,680 --> 01:22:23,280
verwenden nämlich read file from spiff normalerweise macht man das so open ich kann ich kann

715
01:22:23,280 --> 01:22:26,840
euch einfach die metode sein dass man sieht was er unter der haufe macht ignoriert man dass es

716
01:22:26,840 --> 01:22:30,360
irgendwelche templates in ignoriert man dieses eklig zeug hier unten drunter das habe ich nur

717
01:22:30,360 --> 01:22:37,680
gemacht weil c++ wieder nicht das macht was ich gerne hätte normalerweise ist so öffnet man

718
01:22:37,680 --> 01:22:45,960
dateien vom flash vom flash speicher vom esp 32 flash speicher ich weiß dass es seit gestern oder

719
01:22:45,960 --> 01:22:52,000
vorgestern c++ 1.0 ist in visual studio code allerdings die also die c++ extension besser

720
01:22:52,000 --> 01:22:56,880
geworden ist dadurch auch nicht so macht man das normalerweise also sprich man sagt spiff

721
01:22:56,880 --> 01:23:04,760
open dann gibt man ein fad an also zum beispiel sowas hier slash index html haben wir hier auch

722
01:23:04,760 --> 01:23:10,440
nie haben wir gar nicht drin sowas hier zum beispiel zert spips fader fangen wir mit

723
01:23:10,440 --> 01:23:15,400
dem slash an so ein bisschen linux unix style dann kriegt man die filesize dann braucht man

724
01:23:15,400 --> 01:23:24,120
den buffer liest das ein schließt das feil wieder so das gedacht zu verwenden der rückt

725
01:23:24,120 --> 01:23:28,640
dinger komisch ein für mich meinetwegen solange ich wieder kaputt geht und ich habe versucht ich

726
01:23:28,640 --> 01:23:32,840
muss das ist das erste mal dass ich jetzt gucken kann ob das funktioniert weil ich habe da vorher

727
01:23:32,840 --> 01:23:38,400
noch ein bisschen drum gebastelt ich habe gedacht ich bin jetzt mal ganz besonders massive brain und

728
01:23:38,400 --> 01:23:42,720
zwar ich habe mir versucht ein template zu bauen was folgendes macht das ist wieder typische

729
01:23:42,720 --> 01:23:47,240
c++ eigenheit das geht sonst in keiner anderen sprache aber keine anderen sprache braucht man

730
01:23:47,240 --> 01:23:55,000
das auch jeder fad ist immer ist immer slash und dann dateiname also slash so hat der man kann

731
01:23:55,000 --> 01:24:01,880
man ordner hat wenn man den ordner hat ist es slash ordner name slash sonst was ich habe hier

732
01:24:01,880 --> 01:24:08,440
folgendes probiert deswegen sieht das auch so eklig mit template aus ich wollte wenn man

733
01:24:08,440 --> 01:24:13,400
übrigens das können wir wegschmeißen da hinten das war habe ich ausprobiert wenn man das das

734
01:24:13,400 --> 01:24:23,080
ist jetzt wieder c++ deluxe also wenn man sagt man möchte die datein als bytes haben dann macht

735
01:24:23,080 --> 01:24:30,520
er einen vector mit bytes wenn man sagt man möchte die datei einlesen als arduino string dann gibt

736
01:24:30,520 --> 01:24:34,360
er dann arduino string zurück und wenn man sagt man möchte ihn als c++ string haben dann gibt

737
01:24:34,360 --> 01:24:40,840
er c++ string zurück dass das als template überhaupt funktioniert ist an sich schon mal wir

738
01:24:40,840 --> 01:24:47,000
komplett unverständlich warum das funktioniert also ich weiß dass es wie man es machen muss in c plus

739
01:24:47,000 --> 01:24:52,160
es ergibt für mich nur keinen sinn warum das geht weil hier gebe ich ein vector typ zurück und hier

740
01:24:52,160 --> 01:24:57,920
gebe ich ein einfacher also hier gibt es ein container zurück mit elementen drinne und hier

741
01:24:57,920 --> 01:25:04,160
gebe ich quasi ein objekt zurück warum ich quasi warum das warum das so ein takt also keine ahnung

742
01:25:04,160 --> 01:25:12,880
warum das geht aber es funktioniert jetzt kann ich nämlich sowas einlesen und jetzt es kommt der

743
01:25:12,880 --> 01:25:17,600
moment der wahre ob das funktioniert was ich da programmiert habe also wir lesen jetzt mal meinen

744
01:25:17,600 --> 01:25:30,200
den da ein sort punkt der lesen wir ein und key punkt der und was er jetzt einliest ist ein ich

745
01:25:30,200 --> 01:25:37,360
krieg einen weg also quasi in den array zurück mit den einzelnen bytes also quasi in den array mit

746
01:25:37,360 --> 01:25:45,120
den mit den vector mit den bytes von dieser datei der zertifikat ist nie müde der key ist auch immer

747
01:25:45,120 --> 01:25:51,200
von dem chef im büro so und jetzt können wir das ganze um reinschreiben also key buffer ob es

748
01:25:51,200 --> 01:25:59,160
falsch rum key buffer gleich das und sort buffer ist das also alles was wir jetzt gemacht haben ist

749
01:25:59,160 --> 01:26:07,600
das zertifikat vom flash lesen und in sort buffer schreiben und den key einlesen vom flash und in

750
01:26:07,600 --> 01:26:22,720
key buffer schreiben der key encrypted immer schweißfrei der ist gut so weiter weiter im

751
01:26:22,720 --> 01:26:29,080
text jetzt können wir nämlich gucken ob der server an sich tut jetzt den key also die wichtigsten

752
01:26:29,080 --> 01:26:35,280
sachen haben wir jetzt wir haben komisches ssl zeug initialisiert wir haben key private key und

753
01:26:35,280 --> 01:26:41,160
zertifikat eingelesen als nächstes können wir folgendes machen kann ich mir auch copy pasten aus

754
01:26:41,160 --> 01:26:47,040
meinem test so als nächstes können wir folgendes machen wir müssen jetzt nämlich gucken ob das

755
01:26:47,040 --> 01:26:52,840
zertifikat gültig ist heute cold war ich habe kein beta key ich habe mich auch null drum gekümmert

756
01:26:52,840 --> 01:26:57,040
und beta key ich habe das auch überhaupt nicht verfolgt die letzten tage ich habe zehn tage am

757
01:26:57,040 --> 01:27:05,080
stück jetzt gearbeitet ich habe nichts mitgekriegt was das angeht ist echt ist open alpha jetzt

758
01:27:05,080 --> 01:27:17,440
excellent geht es auf dem pc pc auf ps4 only was ist dann hier sony was ist denn hier los

759
01:27:17,440 --> 01:27:27,440
ne ps4 spiele nicht ganz ehrlich ich kann mit dem ps4 controller nicht umgehe ich kriege es

760
01:27:27,440 --> 01:27:32,600
nicht gebacken ich bin schon mit dem xbox controller komplett außer übung aber wenn ich am ps4 oder

761
01:27:32,600 --> 01:27:39,680
wisst ihr was ich machen kann ich kann meinen cheat auspacken ich habe ja so ein so ein maus zu den

762
01:27:39,680 --> 01:27:43,880
verwende ich normalerweise nicht weil es im prinzip einfach cheating ist ja aber ich habe so einen

763
01:27:43,880 --> 01:27:54,520
so einen konverter so ein maus maus zu tastatur konverter den könnte ich verwenden ob man mit

764
01:27:54,520 --> 01:28:00,760
visual studio code auf remod mit ssr beim kunde arbeiten kann ja klar du kannst ramedes ich zeige

765
01:28:00,760 --> 01:28:07,320
dir mal was falls du das nicht schon kennst was für dich sehr praktisch sein könnte und zwar

766
01:28:07,320 --> 01:28:15,000
ich muss mal eine ssh server starten dass ich das zeigen kann so ich starte mal kurz den ssh server

767
01:28:15,000 --> 01:28:24,640
stmctl start sshd ich weiß gar nicht ob ich jetzt sehne habe ich ok also ssh local host yes alles

768
01:28:24,640 --> 01:28:31,400
klar also ich verbinde mich jetzt mal per ssh auf meinen auf meinen lokalen rechner aber das ist

769
01:28:31,400 --> 01:28:35,760
egal also sprich das könnte auch in remote remote rechner sein es ist vollkommen vollkommen egal

770
01:28:35,760 --> 01:28:43,360
ja also was man machen kann ist man kann mit jedem man kann mit jedem editor mit allem remote

771
01:28:43,360 --> 01:28:49,720
ssh arbeiten weil es gibt so was schönes das nennt sich ssh fs und ssh fs funktioniert folgendermaßen

772
01:28:49,720 --> 01:28:54,760
also wir gehen jetzt mal von aus ich habe irgendwo remote einen server stehen auf dem ich was

773
01:28:54,760 --> 01:29:00,280
editieren möchte auf dem ich was editieren will so da kann ich nämlich einfach sagen ssh fs ich

774
01:29:00,280 --> 01:29:09,560
hoffe ich habe sie haben ich überhaupt installiert ich muss mal kurz installieren so was ist denn

775
01:29:09,560 --> 01:29:15,800
hier los oh ich muss mir glaube wieder updaten aber ssh fs ist es installiert ist übrigens

776
01:29:15,800 --> 01:29:29,040
hat nicht installiert oder na toll ok ich muss mal schnell updaten ja aber wie gesagt ich zeig

777
01:29:29,040 --> 01:29:34,240
dir das gleich das ist äußerst praktisch da kannst du nämlich einfach im ordner auf einem

778
01:29:34,240 --> 01:29:39,640
remote server benutzen wie als wäre aber dir lokal das heißt du musst gar nicht wishell studio

779
01:29:39,640 --> 01:29:44,680
ssh beibringen und du musst auch deine wim oder deinem emacs oder deinem atom oder deine wishell

780
01:29:44,680 --> 01:29:53,920
studio kein ach du große scheiße was will der dann alles updaten musst du nicht beibringen

781
01:29:53,920 --> 01:30:03,640
du machst einfach ssh fs und dann hast du den remote ordner lokal bei dir so lange der jetzt

782
01:30:03,640 --> 01:30:12,280
updaten macht zeig ich zeig ich dir jetzt irgendwie ein beispiel gibt genau das ist das ist viel zu

783
01:30:12,280 --> 01:30:25,520
übertrieben was die hier machen so ein bisschen so was wie nfs ja das ist total einfach genau

784
01:30:25,520 --> 01:30:33,960
hier ist ein schönes beispiel du sagst du sagst einfach ssh ssh fs username server doppel punkt

785
01:30:33,960 --> 01:30:39,960
und dann in dem fall ist das heimatverzeichnis und dann den ordner wo du es rein mounten willst

786
01:30:39,960 --> 01:30:45,040
so und das heißt am ende hast du dann einen ordner von remote lokal gemountet und in diesem

787
01:30:45,040 --> 01:30:50,920
lokalen ordner kannst du da mit jedem editor drin rumwursten wie du willst und der singt das dann

788
01:30:50,920 --> 01:30:54,720
auf den remote server ich zeige es dir auch gleich wenn er irgendwann mal geupdatet hat

789
01:30:54,720 --> 01:31:01,920
übrigens wisst ihr wie kacke wie kacke betriebssystem update über lte sind ich musste

790
01:31:01,920 --> 01:31:04,920
auf der arbeit als ich auf der arbeit war und wie gesagt wir hatten ziemlich viele ausfälle

791
01:31:04,920 --> 01:31:11,040
der netzwerk war auch im arsch teilweise ich musste einen update machen so ungefähr so ungefähr so

792
01:31:11,040 --> 01:31:16,520
ein update wie hier über lte lte mitten in frankfurt über den wlan über den wlan hotspot den ich mit

793
01:31:16,520 --> 01:31:27,320
meinem handy aufgemacht habe das hat keine ahnung drei stunden gedauert oder so das hat gar nicht

794
01:31:27,320 --> 01:31:36,200
mehr aufgehört also wenn das hier fertig ist dann zeige ich dir so jetzt können wir starten jetzt

795
01:31:36,200 --> 01:31:44,720
zumindest mal nebenbei den htp server so also wo sie mal stehen geblieben ich warte hier noch bis

796
01:31:44,720 --> 01:31:48,880
das update durch dann zeige ich dir das mit sshfs weil das ist eines der praktischsten und

797
01:31:48,880 --> 01:31:55,120
einfachsten tools dies gibt und die lösen so viele probleme also an sshfs sollte man immer

798
01:31:55,120 --> 01:32:00,240
so als erstes denken wenn man remote sachen bearbeiten muss größere sachen remote bearbeiten

799
01:32:00,240 --> 01:32:06,720
muss mit und und gerne die sachen verwenden möchte lieber lokal hat er stellt ihr vor du

800
01:32:06,720 --> 01:32:11,520
musst eine router konfig über 2g das ist kein problem router konfig ist ja nur text und nicht

801
01:32:11,520 --> 01:32:18,440
groß ja selbst so eine riesen sysco was auch immer konfig ist vielleicht was weiß ich 50 kilobyte

802
01:32:18,440 --> 01:32:27,680
doch kein ding dauer trotzdem eine halbe stunde was ist da drin router konfig mit binaries oder

803
01:32:27,680 --> 01:32:38,680
der update der wirklich drei stunden so also was wir kommen mal zurück zum webserver was

804
01:32:38,680 --> 01:32:43,800
wir jetzt als nächstes checken müssen ist ob das zertifikat funktioniert also sprich

805
01:32:43,800 --> 01:32:49,000
ob man das zertifikat pasen kann also ich habe jetzt hier das zertifikat und den key eingelesen

806
01:32:49,000 --> 01:32:52,640
und es könnte ja sein dass sie im falschen format sind deswegen muss ich jetzt erstmal

807
01:32:52,640 --> 01:32:59,600
sagen ok pasen mal das zertifikat und schreibt dann deine interne geschichte was auch immer du

808
01:32:59,600 --> 01:33:04,520
mit dem zertifikat machst hier in diese variablen weil wir müssen ja davon also wir müssen ja

809
01:33:04,520 --> 01:33:10,240
aufpassen dass die variablen nicht aus dem scope rausgehen c und c plus plus machen das so wenn

810
01:33:10,240 --> 01:33:15,520
man variablen anlegt und die funktion wird verlassen dann werden die wieder gelöscht es sei denn man

811
01:33:15,520 --> 01:33:21,640
hat vorher gesagt man will das nicht das ist übrigens auch das wo die meisten memory leaks

812
01:33:21,640 --> 01:33:27,800
herkommen also wenn man sagt ok so kann es so gibt es keine memory leaks ja also wenn ich

813
01:33:27,800 --> 01:33:34,240
variablen nur so anlege dass sie automatisch wieder auf auf geräumt werden sobald die funktion

814
01:33:34,240 --> 01:33:41,520
beendet wird kann es logischerweise keine memory leaks geben aber nachdem man ja auch variablen

815
01:33:41,520 --> 01:33:49,240
braucht die es länger gibt als die funktion muss man muss man dem halt auch dann sagen hey ich

816
01:33:49,240 --> 01:33:55,080
brauche das länger und da kommen halt auch die meisten memory leaks her genau also der passt jetzt

817
01:33:55,080 --> 01:33:59,720
das zertifikat der passt im private key und schreibt hier einmal nach key und einmal nach

818
01:33:59,720 --> 01:34:04,440
zert jetzt muss man irgendwelche magic sachen machen die kopiere ich mir auch aus dem example hier jetzt

819
01:34:04,440 --> 01:34:11,080
das ist eins zu eins zu eins aus dem example von denen ich habe keine ahnung was es macht magic

820
01:34:11,080 --> 01:34:19,080
braucht man sonst geht es nicht und jetzt kann man gucken dass man verbindung annehmen kann wenn

821
01:34:19,080 --> 01:34:24,120
ich es nicht nur irgendwas vergessen habe doch ich habe das leute ich habe das wichtigste vergessen

822
01:34:24,120 --> 01:34:30,000
ich habe mich verguckt das sind jetzt auch zwei sachen die aus dem beispiel kommen und zwar man

823
01:34:30,000 --> 01:34:33,840
muss ihm ja sagen an welchem port an welchem port man den server betreiben will den port

824
01:34:33,840 --> 01:34:37,880
übergeben wir hier port 443 ist das bei uns so und nachdem wir das gemacht haben können wir

825
01:34:37,880 --> 01:34:45,520
gleich mal gucken ob es funktioniert man sagt jetzt embed tls es fängt übrigens alles alles

826
01:34:45,520 --> 01:34:52,600
so an net bind und da muss man ihm jetzt sagen welchen port da muss man erstmal den kontext

827
01:34:52,600 --> 01:34:59,000
übergeben das ist das ist das da das ist das was wir hier oben hier oben angelegt haben das

828
01:34:59,000 --> 01:35:04,120
nennen sie das nennen sie irgendwie in intern immer kontext kontext ist so eines der aussage

829
01:35:04,120 --> 01:35:14,800
losesten worte überhaupt ist das ein selbst sein ja das ist komplett selbst generiert ja ja es

830
01:35:14,800 --> 01:35:23,440
ist glaube ich von der ca keckw für den benutzer 0w ausgestellt das zertifikat können wir gleich

831
01:35:23,440 --> 01:35:31,560
mal im browser gucken was das zertifikat meint update fertig ok ssh ssh fs also zeige ich das

832
01:35:31,560 --> 01:35:39,720
mal falls ich jetzt installieren darf jo keckel hoffentlich geht das jetzt weil ich habe ein

833
01:35:39,720 --> 01:35:42,760
kernel update hier drinnen gehabt und ich vielleicht vielleicht muss ich neu starten

834
01:35:42,760 --> 01:35:48,680
vorher müssen wir mal schauen also ssh fs wir machen mal einen mount punkt nennen wir mal

835
01:35:48,680 --> 01:35:54,720
remote so jetzt verbinden wir uns ich nehme jetzt mal nicht local host weil das viele leute immer

836
01:35:54,720 --> 01:35:59,560
verwirrt wenn man in dem beispiel local host verwendet es ist zwar vollkommen egal ob der

837
01:35:59,560 --> 01:36:03,600
endpunkt local host ist oder ein remote server aber viele leute sind immer verwirrt wenn man

838
01:36:03,600 --> 01:36:11,040
local host verwendet deswegen verwenden wir jetzt mal eine ip jetzt sage ich ssh fs und zwar möchte

839
01:36:11,040 --> 01:36:16,120
ich den ordner dort nehmen wir mal den ordner wollte ich habe kommens in der shell ausgeschaltet

840
01:36:16,120 --> 01:36:25,160
wir nehmen jetzt mal den ordner in dem wir gerade hier am programmieren sind platform projects web

841
01:36:25,160 --> 01:36:34,400
server also das ist der ordner remote auf dem auf dem remote server jetzt sage ich ssh fs auf

842
01:36:34,400 --> 01:36:45,440
diesem server dieses verzeichnis möchte ich mounten lokal bei mir auf remote ok ich muss

843
01:36:45,440 --> 01:36:54,680
wieboten kernel update gemacht dann geht es nicht dann ist die webseite im browser untrusted wenn

844
01:36:54,680 --> 01:36:58,720
du selbst sein zertifikat verwendest korrekt aber das ist ja nicht wild ich meine das ist ein

845
01:36:58,720 --> 01:37:03,640
dashboard für meinen esp 32 der bei mir rumhängt für firmware update zu machen klar ist das

846
01:37:03,640 --> 01:37:09,520
untrusted ich könnte mir den letzten kript zertifikat ausstellen lassen aber wozu dann

847
01:37:09,520 --> 01:37:15,800
muss ich das alle drei monate erneuern haben wir heute für hintergrund jede menge scharfe alles

848
01:37:15,800 --> 01:37:25,160
klar firefox wer manchmal übrigens probleme hat wenn so sachen wie ssh fs nicht gehen wenn

849
01:37:25,160 --> 01:37:31,360
ihr vorhin kernel update gemacht habt dann muss das muss ihr müsst ihr neu starten moment und

850
01:37:31,360 --> 01:37:40,880
jetzt muss ich muss ich ssh neu starten so wunderbar so also ssh fs remote server verzeichnis wird

851
01:37:40,880 --> 01:37:51,760
gemontet auf lokales verzeichnis zack und ihr seht jetzt gehe ich in mein lokales verzeichnis und

852
01:37:51,760 --> 01:37:55,720
ich habe dort alle dateien vom remote server drin das heißt ich kann hier drinnen jetzt

853
01:37:55,720 --> 01:38:05,920
dateien editieren wie lokal hier speichern und das singt mir das quasi rüber auf den remote server

854
01:38:05,920 --> 01:38:13,600
das heißt ich kann alle tools verwenden ich muss das ding übrigens an mounten danach wieder wenn

855
01:38:13,600 --> 01:38:17,880
ich fertig bin das heißt ich kann alle sachen und ihr seht jetzt ist das verzeichnis wieder

856
01:38:17,880 --> 01:38:23,800
leer das heißt ich kann alle tools verwenden die ich lokal habe zum editieren obwohl die

857
01:38:23,800 --> 01:38:29,600
dateien auf dem remote server liegen und wie gesagt lasst euch jetzt nicht dafür verwirren

858
01:38:29,600 --> 01:38:40,200
dass ich das hier alles quasi von meiner vm mich über meine vm in meine vmp ssh also verbunden

859
01:38:40,200 --> 01:38:54,800
hab es funktioniert aber im remote server du kannst die eigene ca du kannst die eigene ca

860
01:38:54,800 --> 01:39:02,880
im browser hinterlegen ja das geht kannst du machen kannst du ll statt ls la ich glaube das

861
01:39:02,880 --> 01:39:08,760
habe ich gar nicht angelegt doch habe ich angelegt lg gibt es ja nicht ls ist nur ein alias der bei

862
01:39:08,760 --> 01:39:14,560
manchen sachen mitgeliefert wird ich habe mir aber mittlerweile den hier angewöhnt übrigens das ist

863
01:39:14,560 --> 01:39:25,440
kein ls aber funktioniert bei ls genauso weil also ls das macht folgendes also list all reverse time

864
01:39:25,440 --> 01:39:32,920
und mit human ist das human readable ob das ist human readable size genau also sprich der

865
01:39:32,920 --> 01:39:42,200
listet alle dateien auf in umgedrehter rein folge nach dem änderungsdatum nach dem änderungsdatum

866
01:39:42,200 --> 01:39:50,640
und das hier ist dass er die datei größe in ordentlichen einheiten anzeigt und nicht alles

867
01:39:50,640 --> 01:40:12,520
in bites ja was für den status bar benutzt du das ist die drei

868
01:40:12,520 --> 01:40:23,360
die drei status rast ist das warum auch immer es nicht installiert ist

869
01:40:23,360 --> 01:40:33,080
weil hier outdated paket verwende ok die config dafür gibt es übrigens hier wenn

870
01:40:33,080 --> 01:40:46,520
du es genau wissen willst ja da irgendwo hier die config drin da ist nicht sonderlich viel

871
01:40:46,520 --> 01:40:54,480
aber wichtig dass man emojis verwendet exzellent ja und so sieht das mit sshfs aus das ist eines

872
01:40:54,480 --> 01:41:12,120
der praktischsten tools überhaupt exzellent mal kurz schauen ob ich irgendwas mein chat kann ich

873
01:41:12,120 --> 01:41:22,880
kann mein chat immer noch nicht scrollen auf anderen bildschirme ja gut aber das ist doch

874
01:41:22,880 --> 01:41:33,400
egal also bei einem normalen service nicht aber bei einem esp 32 daheim im netzwerk ist das egal

875
01:41:33,400 --> 01:41:40,440
und und übrigens die meisten iot geräte haben ungültige zertifikate du musst es nicht an

876
01:41:40,440 --> 01:41:45,240
maunden aber ich an maunters immer der flascht und sinkt normalerweise auch so also musst du es

877
01:41:45,240 --> 01:41:49,080
nicht unbedingt an maun aber ich an maunter das immer allein schon dass ich nicht aus versehen

878
01:41:49,080 --> 01:41:53,640
was drin ender remote auf dem server also ich habe mal in meiner ausbildung den fehler gemacht

879
01:41:53,640 --> 01:42:01,640
ich habe meinen ssh remote gemontet und habe dann dateien gelöscht in meinem heimatverzeichnis

880
01:42:01,640 --> 01:42:09,960
recursive in meinem heimatverzeichnis dateien gelöscht und der ssh mount war halt da auch

881
01:42:09,960 --> 01:42:20,320
drunter aber ich hatte glück das ding ist schlau genug und löscht nicht auf ssh mounts aber das

882
01:42:20,320 --> 01:42:26,360
kann mal relativ einfach passieren also sprich wenn du den server gemontet hast über ssh fs und du

883
01:42:26,360 --> 01:42:34,320
löscht dann was aus versehen dann geht es halt mit pech auch direkt über ssh fs drüber also ich

884
01:42:34,320 --> 01:42:38,680
würde es immer an maunten wenn ich fertig bin gerade wenn es ein produktiver server ist ist immer

885
01:42:38,680 --> 01:42:46,280
doof wenn man das aus wenn man dann aus versehen irgendwas irgendwas kaputt macht also machen wir

886
01:42:46,280 --> 01:42:50,760
mal wieder hier den editor auf machen wir weiter aber wie gesagt man muss es nicht an maunten also

887
01:42:50,760 --> 01:42:56,440
wenn es vergisst zu an maunten ist es nicht schlecht ist es nicht schlimm was oh

888
01:42:56,440 --> 01:43:09,040
please don't klo alles klar ich klohse nicht ich ich war ab re-reload ja leider z plus plus und monka

889
01:43:13,640 --> 01:43:20,440
darf ich jetzt monitor aufmachen von meinem controller sehr gut also wo sind wir stehen geblieben

890
01:43:20,440 --> 01:43:29,000
wir wollten jetzt testen ob der server funktioniert wir wollen jetzt gucken ob der

891
01:43:29,000 --> 01:43:32,880
ob der ob der server prinzipiell funktioniert und zwar muss man jetzt sagen an welchem port

892
01:43:32,880 --> 01:43:38,680
er lauschen soll also sprich mit net bind und einem port kann man ihm sagen woran er lauschen

893
01:43:38,680 --> 01:43:44,360
soll also wir sagen jetzt mal hier port kratzsch nie ip die ip ist ip ist egal es gibt wir haben nur

894
01:43:44,360 --> 01:43:48,640
ein interfaz port viel für 33 da sieht man auch schon wieder mal komische sache die wollen den

895
01:43:48,640 --> 01:43:55,240
port unbedingt als string ok meinetwegen können wir machen port viel für drei und protokoll das

896
01:43:55,240 --> 01:44:00,600
ist tatsächlich relativ wichtig dass man das angibt weil ja sonst uns funktioniert es halt

897
01:44:00,600 --> 01:44:07,040
einfach nicht wenn man das nicht angibt so da muss man ihm sagen m bed tls aner score net proto

898
01:44:07,040 --> 01:44:14,080
tcp so und jetzt lauscht der server an port viel für drei und das kann man auch gleich ausprobieren

899
01:44:14,080 --> 01:44:22,800
ob das funktioniert wir verbinden uns dann nämlich einfach mal per open ssl hin und gucken ob wir da

900
01:44:22,800 --> 01:44:27,240
irgendwie eine art antwort bekommen so und jetzt muss man noch ein bisschen magic hinten dran

901
01:44:27,240 --> 01:44:31,440
machen das copy paste ich aus dem example wieder weil wir das einfach machen muss dass es funktioniert

902
01:44:31,440 --> 01:44:40,720
man muss die den random generator muss man sieben und und anwerfen und so und drauf geschissen ob

903
01:44:40,720 --> 01:44:48,200
das funktioniert ja so und jetzt können wir das ganze mal speichern und hochladen gucken

904
01:44:48,200 --> 01:45:15,800
ob es funktioniert hat es noch bin die klärt also ja logisch ok alles klar

905
01:45:19,200 --> 01:45:24,080
what the fuck was zum geier jetzt schon wieder los z plus plus

906
01:45:37,560 --> 01:45:39,360
alter wo ist denn jetzt ein problem schon wieder

907
01:45:39,360 --> 01:45:51,000
oh man download update was hat er jetzt für schmerzen

908
01:45:58,880 --> 01:46:06,440
warum kann warum schaffe dies eigentlich ordentliche fehlermeldungen zu geben

909
01:46:06,440 --> 01:46:34,160
was ist das problem also ich kann mir vorstellen wo das problem ist glaube weil

910
01:46:34,160 --> 01:46:42,120
ich hier nicht aufgepasst habe wartet mal weil ich nicht aufgepasst habe als ich hier mein

911
01:46:42,120 --> 01:46:51,600
template angelegt habe zwar wo ist mein komisches template ne passt in line eigentlich alles

912
01:46:51,600 --> 01:47:01,640
richtig ja ich weiß nicht was er für schmerzen hat ok also der mag nicht der mag nicht weil

913
01:47:01,640 --> 01:47:07,680
ich den kram hier include so gut aus irgendwelchen gründen darf ich es hier nicht inkluden alles

914
01:47:07,680 --> 01:47:11,400
klar welche sie mich nicht include dann geht allerdings kann ich dann die sachen nicht verwenden

915
01:47:11,400 --> 01:47:23,520
was auch ziemlich toll ist ja exzellent redefinition ok das ist das ist der kram den ich meine wenn du

916
01:47:23,520 --> 01:47:30,040
das nicht im z plus plus fein macht spackter irgendwie spackte irgendwie rum ich weiß nicht

917
01:47:30,040 --> 01:47:37,400
genau was er jetzt für schmerzen hat ehrlich gesagt also warum er da jetzt rum meckert aber

918
01:47:37,400 --> 01:47:44,040
wir machen das jetzt einfach z plus plus feil ist gut was bevor nun mehr was was ist happening

919
01:47:44,040 --> 01:48:11,320
ok redefinition of template bool und so ist ja was ich nur reden das jetzt machen das jetzt

920
01:48:11,320 --> 01:48:20,320
so copy paste ist jetzt darüber und alles ist gut da geht es nämlich zack naja start

921
01:48:20,320 --> 01:48:30,280
keine ahnung was der was der im detail für für probleme wieder hat aber wir machen es

922
01:48:30,280 --> 01:48:39,320
einfach so so und jetzt funktioniert das passt und das da machen wir auch hier raus und kopieren

923
01:48:39,320 --> 01:48:45,960
das da rein und dann funktioniert oder ich weiß nicht genau warum aber es funktioniert oder auch

924
01:48:45,960 --> 01:49:13,600
nicht was ach ist das geil exzellent aber wahrlich exzellent exzellent

925
01:49:13,600 --> 01:49:27,880
ach so muss auch inkluden mache ich mache ich ich ich inklude ich inklud alles ich inklud

926
01:49:27,880 --> 01:49:41,120
alles was du willst mir egal include und jetzt ha komm on bra gibs mir mach ha wo ist das

927
01:49:41,120 --> 01:49:47,080
problem alter das scheiß funktioniert doch im anderen projekt eins zu eins was habe ich

928
01:49:47,080 --> 01:49:51,840
denn jetzt vergessen ich bin immer wieder begeistert wie schön das ganz funktioniert

929
01:49:51,840 --> 01:50:10,880
titan toaster mein beileid ja so was was was ist dein problem was ist dein problem c++ jetzt was

930
01:50:10,880 --> 01:50:21,680
magst du nicht ich kopiere mir jetzt einfach mal den kram rüber aus meinem testprojekt wo das

931
01:50:21,680 --> 01:50:29,040
alles funktioniert hat wohlgemerkt noch das können wir drin lassen gut

932
01:50:29,040 --> 01:50:54,000
alter ich habe das eins zu eins aus meinem testprojekt probiert ah im moment was hat

933
01:50:54,000 --> 01:51:06,240
er hier verschmerzen was was hat er da jetzt was hat er da jetzt für probleme standard ok ok ok

934
01:51:06,240 --> 01:51:17,000
ok ich ich kopiere es ich kopiere es mir noch mal das ist das ist das was ich in meinem test

935
01:51:17,000 --> 01:51:33,920
testprojekt habe geht das jetzt warum geht das jetzt moment

936
01:51:33,920 --> 01:51:46,160
ich habe mein logger eingebunden ansonsten geht es nicht

937
01:51:47,840 --> 01:51:53,040
ja natürlich geht das nicht logger war nicht da ja natürlich dann kann das ja auch nicht

938
01:51:53,040 --> 01:51:56,920
funktionen alter bin ich blöd ok dann probieren wir das doch mal ohne hederf dann probieren wir

939
01:51:56,920 --> 01:52:01,200
das doch mal alles im hederfall zu machen weil ich bin wirklich gespannt ob das alles ob das

940
01:52:01,200 --> 01:52:05,520
funktioniert wenn ich das alles im hederfall mache ich habe nämlich in meinem test das problem dass

941
01:52:05,520 --> 01:52:20,920
dann wähler nicht ging jetzt ist helper nicht drin ok ja so ordentliches modulsystem hätte doch was

942
01:52:20,920 --> 01:52:31,600
oder so uint 8 ja das geht gleich weg was halt auch legendär ist an c++ in die hilfreichen

943
01:52:31,600 --> 01:52:38,240
fehlermeldungen erst mal irgendwo kommen vergessen und hier 30.000 zeilen übrigens

944
01:52:38,240 --> 01:52:44,480
wisst ihr was meine lieblings meine lieblings c++ moment ich muss mal kurz raussuchen weil

945
01:52:44,480 --> 01:52:48,160
ich weiß gar nicht mehr genau aus dem kopf wie es funktioniert was meine lieblings c++

946
01:52:48,160 --> 01:52:59,400
fehlermeldungs generierungs taktik ist moment ich zeig es euch ja passt mal auf also wenn

947
01:52:59,400 --> 01:53:04,040
ihr mal unendlich viele c++ fehler sehen wollt dann müsst ihr das hier machen

948
01:53:04,040 --> 01:53:16,960
sieht nicht so böse aus oder also sieht nicht so sieht nicht so mittlerweile erkennt er das sogar

949
01:53:16,960 --> 01:53:22,120
oh er erkennt das ok gut gut ich habe nichts gesagt

950
01:53:28,480 --> 01:53:29,280
achso moment

951
01:53:32,080 --> 01:53:32,480
ane

952
01:53:38,200 --> 01:53:39,840
moment wie ging das so wie ging

953
01:53:39,840 --> 01:53:53,400
moment wie war es ein schlüssel wort ok ok ok dann geht das gar nicht mehr dann geht das

954
01:53:53,400 --> 01:53:59,480
gar nicht mehr das ist ja cool das haben ok das haben sie mittlerweile auch mitgekriegt dass

955
01:53:59,480 --> 01:54:23,240
es dass es ein fehler ist ja weil ein vergleich verkehrt ist

956
01:54:29,480 --> 01:54:36,560
aber ich bin begeistert die letzte version von den c++ tools in visual studio hat das

957
01:54:36,560 --> 01:54:41,000
noch nicht als fehler angezeigt da wusste ich gar nicht was sache ist warum es kaputt geht

958
01:54:41,000 --> 01:54:49,080
aber es ist es ist schon ein bisschen merkwürdig warum darf man das ist auch so eine inkonsistente

959
01:54:49,080 --> 01:54:55,960
geschichte von c++ warum darf ich also das ist rhetorisch gefragt ich weiß warum ich darf weil

960
01:54:55,960 --> 01:55:00,640
die weil hier equals überladen haben aber warum ist das warum ist das überhaupt so und warum

961
01:55:00,640 --> 01:55:05,960
ist das im standard so und im standard library warum darf ich in den null pointer einem standard

962
01:55:05,960 --> 01:55:12,960
string zuweisen aber warum darf ich dann wiederum diese diesen standard nicht checken ob er null

963
01:55:12,960 --> 01:55:22,840
ist ergibt erstmal keinen sinn wie so viel ist in c++ ergibt es keinen sinn das liegt daran weil

964
01:55:22,840 --> 01:55:29,400
der gar kein weil das gar kein null pointer ist weil der wenn eine null pointer kriegt einfach

965
01:55:29,400 --> 01:55:38,280
den leeren string draus macht also die haben die haben das hier überladen also es kann sein dass

966
01:55:38,280 --> 01:55:41,520
es nicht 100 prozentig stimmt ich habe mir die implementierung jetzt nicht genau angeguckt aber

967
01:55:41,520 --> 01:55:47,840
so weit ich es verstand die haben diesen assign operator überladen und wenn sie eine null pointer

968
01:55:47,840 --> 01:55:58,080
bekommen machen sie einfach da raus das hier magic machen sie da draus das funktioniert jetzt ja

969
01:55:58,080 --> 01:56:05,000
im moment funktioniert das nicht das ist mist das muss funktionieren der vergleich aber also das

970
01:56:05,000 --> 01:56:12,920
hier ist es gleich wie das hier es ist halt einfach wir warum macht es magic da unten

971
01:56:12,920 --> 01:56:19,960
drunter warum weshalb es ergibt für mich keinerlei sinn wenn man wenn man das nicht gegen null pointer

972
01:56:19,960 --> 01:56:30,480
checken kann ok dann ist es halt ein typ der nie null sein darf es ist in ordnung aber dann sollte

973
01:56:30,480 --> 01:56:36,320
man auch nicht equals null pointer sagen können sondern einfach dann gibt es error wenn man null

974
01:56:36,320 --> 01:56:43,680
pointer zuweist oder kommt am besten compiler error type cannot be null irgendwas halbwegs wie

975
01:56:43,680 --> 01:56:48,280
sie immer sagen irgendwie sowas was halt sein ist was halt irgendwie noch sein auf deutsch noch

976
01:56:48,280 --> 01:56:56,520
noch bei verstand ist irgendwie gesund gesund ja was halt noch gesund ist und nicht so magic

977
01:56:56,520 --> 01:57:00,200
dinger so wir waren hier aber gerade bei unserem webserver jetzt gucken wir mal ob das funktioniert

978
01:57:00,200 --> 01:57:10,520
ich habe ich habe ich habe ich gerade abgelaudet ich upload immer auf unseren esp und dann checken

979
01:57:10,520 --> 01:57:20,520
wir mal ob das funktioniert auch huge upload speed ich rede mich nicht auf wegen visual studio

980
01:57:20,520 --> 01:57:25,080
code das ist tatsächlich ganz gut ich rede mich auf wegen c++ weil vieles davon kann

981
01:57:25,080 --> 01:57:33,120
im visual studio code nichts da ist c++ dran schuld josen in dem fall ist es ganz einfach wenn

982
01:57:33,120 --> 01:57:38,920
du das für so microcontroller machen willst installier platform iow und es macht alles für

983
01:57:38,920 --> 01:57:47,920
dich komplett vorkonfiguriert ok also telnet oh wir haben was vergessen das geht noch gar nicht

984
01:57:47,920 --> 01:58:00,120
telnet was haben wir für eine ip gekriegt ja ip 443 geht übrigens oh guck mal da wir haben

985
01:58:00,120 --> 01:58:05,280
eine verbindung zum server hat funktioniert gut mehr funktioniert nichts weil ich rufe

986
01:58:05,280 --> 01:58:14,280
noch nichts ab also ihr seht der server läuft port 443 da connect the two was wir jetzt auch

987
01:58:14,280 --> 01:58:19,320
machen können ist ein curl aber das wird jetzt schon mal nicht da also da passiert jetzt nix

988
01:58:19,320 --> 01:58:25,040
kann ich gleich sagen dass es mag nix weil das macht ja noch auf der ebene nix da der

989
01:58:25,040 --> 01:58:30,160
kantor kann sich connecten und kann was hinschicken das ist aber alles mehr kann er nicht weil es

990
01:58:30,160 --> 01:58:35,760
kommt ja nichts zurück also was wir jetzt gemacht haben ist in den surfer gestartet der auf port

991
01:58:35,760 --> 01:58:46,440
443 läuft kein HTTPS kein sonst was nix gerade wenn ich ich versuche auf HTTPS zu connecten

992
01:58:46,440 --> 01:58:54,280
dann sagt er hier ok verbindung ist connected und jetzt versucht er einen ssl handshake zu machen

993
01:58:54,280 --> 01:58:58,080
der noch nicht funktionieren kann weil wir haben ja noch nichts gemacht außer eben den

994
01:58:58,080 --> 01:59:03,000
server zu starten auf port 443 also der macht kein ssl handshake kein zertifikataustausch oder

995
01:59:03,000 --> 01:59:11,160
irgendwas also josen wenn du keinen microcontroller programmiert habe ich das noch nie gemacht die

996
01:59:11,160 --> 01:59:14,520
einfachste variante ist vielleicht dann wirklich so was wie das hier mal in der trial version

997
01:59:14,520 --> 01:59:19,840
auszuprobieren ob das nicht einfach alles schon gut einrichtet keine ahnung das problem an c plus

998
01:59:19,840 --> 01:59:26,840
plus und diesen ganzen uralt liegt daran dass halt viele tools teilweise richtig uralt sind und das

999
01:59:26,840 --> 01:59:32,480
setup eklig ist dazu kommt dass c plus plus kein eingebauten module und package manager hat also

1000
01:59:32,480 --> 01:59:37,880
das heißt du musst ja auch irgendwie den files rum kopieren oder was nicht offizielles verwenden

1001
01:59:37,880 --> 01:59:42,800
das macht alles in der handhabung nicht schön also wenn du einfach nur anfangen willst zu

1002
01:59:42,800 --> 01:59:47,960
programmieren ohne dass du jetzt dass es c plus plus sein muss würde ich was anderes nehmen als

1003
01:59:47,960 --> 01:59:55,000
c plus plus den plus plus ist an vielen stellen einfach nur blanke zumutung wenn man ein bisschen

1004
01:59:55,000 --> 02:00:03,080
was neueres gewöhnt ist oder muss es c plus plus sein muss ja dann kommst du nicht drumherum dann

1005
02:00:03,080 --> 02:00:11,400
gut aber was man jetzt sieht ist läuft und wir können uns zum selber verbinden ssl funktioniert

1006
02:00:11,400 --> 02:00:15,920
noch nicht das ist das nächste was wir jetzt machen jetzt gucken wir das irgendwie ssl funktioniert

1007
02:00:15,920 --> 02:00:20,440
bei the way das hat übrigens in meinem test nicht funktioniert dagegen mein wähler nicht mehr wenn

1008
02:00:20,440 --> 02:00:24,360
ich den kram hier so eingestellt habe also so ist mir das ja sogar noch viel lieber wenn ich das

1009
02:00:24,360 --> 02:00:31,320
alles im header file schreiben kann so das nächste ist was wir jetzt machen müssen also verbindung zu

1010
02:00:31,320 --> 02:00:38,120
diesem server geht hallo kengin so ich übrigens ich ich zeige ich zeige euch noch mal was ich

1011
02:00:38,120 --> 02:00:43,760
habe nämlich was gebastelt die wollen ja hier aus irgendwelchen unerfindlichen gründen den port

1012
02:00:43,760 --> 02:00:51,640
als string haben und wir übergeben den port aber wie ich es persönlich für sinnvoller halte als

1013
02:00:51,640 --> 02:00:58,600
int ein import ist halt einfach eine zahl und wir übergeben es auch nur als in 16 weil wie viel

1014
02:00:58,600 --> 02:01:10,960
passt in den anscheinend in 16 rein leute big brain chat wie viel passt da rein anscheinend anscheinend

1015
02:01:10,960 --> 02:01:26,080
wohlgemerkt 64k ja genau 2 ja so in dezimal ich will da auf was bestimmtes rauf deswegen

1016
02:01:26,080 --> 02:01:32,840
muss jetzt einer die richtige sache sagen ja ok der hörwink sagt schon genau flinster sagt 65

1017
02:01:32,840 --> 02:01:43,560
536 exakt und wer ihr netzwerk technik ausge aufgepasst hat weiß dass es auch 565 535 ports

1018
02:01:43,560 --> 02:01:49,160
gibt das heißt in dem fall bietet sich das einfach allen anscheinend in 16 zu nehmen weil

1019
02:01:49,160 --> 02:01:56,640
hier passen exakt so viel zahlen rein wie es ports gibt und null mal drauf geschissen auf null

1020
02:01:56,640 --> 02:02:07,040
jetzt erst mal egal empfinde es immer irgendwas was nicht doch portnull gibt es tatsächlich es

1021
02:02:07,040 --> 02:02:15,440
gibt tatsächlich portnull portnull ist reserviert haben sie sich gedacht mit so ein blödsinn fangen

1022
02:02:15,440 --> 02:02:19,840
wir erst gar nicht an aber gibt es theoretisch natürlich ja weil es auch ein anscheinend in 16

1023
02:02:19,840 --> 02:02:26,960
nummer ist man könnte wahrscheinlich wirklich was auf portnull laufen lassen habe ich noch nie

1024
02:02:26,960 --> 02:02:32,720
probiert ob das funktioniert probieren wir mal aus wenn man ruht was auf portnull netcat minus

1025
02:02:32,720 --> 02:02:43,840
listen wie ist meine ip wobei brauche man für listen brauche man gar keine ip ne portnull

1026
02:02:43,840 --> 02:03:03,040
hört er jetzt wirklich auf portnull ich mache das ich mache das glaube ich falsch ich glaube

1027
02:03:03,040 --> 02:03:17,880
man musste kam netcat geschichten die aus dem kopf kann man nicht was ach minus p genau ja ja

1028
02:03:17,880 --> 02:03:37,600
ne war das minus ich jetzt blöd wie das ging doch so und letztes die ip weglassen

1029
02:03:37,600 --> 02:03:47,480
okay gucken ob man auf portnull lauschen kann ne das mag er nicht dann will er random in port

1030
02:03:47,480 --> 02:03:56,280
aus also man kann auf port 666 lauschen er lauscht auf port 6666 aber auf portnull darf man nicht

1031
02:03:56,280 --> 02:04:00,480
lauschen dann sucht er sich random ein aus wie es aussieht na gut darf man auf port 1 lauschen

1032
02:04:00,480 --> 02:04:08,560
auf port 1 darf man lauschen auf portnull darf man nicht laufen lauschen ja wahrscheinlich ist es

1033
02:04:08,560 --> 02:04:13,080
besser hätte sein können habe ich noch nie ausprobiert der chat der chat bringt mich immer auf so

1034
02:04:13,080 --> 02:04:23,640
ideen das ist gut wenn du random port brauchst ja ganz ehrlich habe ich mir noch nie gedanken

1035
02:04:23,640 --> 02:04:29,800
darüber gemacht aber ist gut zu wissen man lernt ja nie aus was das angeht also wir haben jetzt

1036
02:04:29,800 --> 02:04:37,520
ein server gestartet auf port 443 die wollen dass sie ja irgendwie als als string haben so als

1037
02:04:37,520 --> 02:04:48,440
character character c string character array mit null hinten dran und zwar ihr seht ja ich

1038
02:04:48,440 --> 02:04:56,280
habe hier die format library drinne dies ist übrigens eine eine die einzige die einzige

1039
02:04:56,280 --> 02:05:02,240
c++ library die ich wirklich gerne verwende weil damit kann man seine strings so formatieren wie

1040
02:05:02,240 --> 02:05:07,760
man das beispielsweise aus python kennt oder ein bisschen teilweise wie man es jetzt aus dem neuen

1041
02:05:07,760 --> 02:05:12,320
string aus die scharp kennt also man muss sich nicht mehr mit printf rum ärgern man kann sowas

1042
02:05:12,320 --> 02:05:17,720
machen fmt format und dann kannst du hier den kram reinschreiben also ein bisschen wie printf

1043
02:05:17,720 --> 02:05:23,080
allerdings deutlich besser als printf kann mehr typen hat mehr format option kann eigene typen

1044
02:05:23,080 --> 02:05:30,200
formatieren nicht nur wie printf was irgendwie nur eine handvoll sachen kann named arguments das

1045
02:05:30,200 --> 02:05:37,520
was c++ schon lange fehlt bringt auch so ein thema in c++ was ich übelst beschissen finde c++ hat

1046
02:05:37,520 --> 02:05:43,160
ganz sich auch formatieren muss man ausprobieren gut es kann so viel sachen machen dass es auch

1047
02:05:43,160 --> 02:05:50,480
dein hirn formatiert wahrscheinlich c++ hat ja sowas wie default arguments also ich kann jetzt

1048
02:05:50,480 --> 02:05:56,040
sagen keine ahnung mein standard password ist blub das heißt wenn ich diese funktion aufrufe

1049
02:05:56,040 --> 02:06:03,320
und nicht die nicht pw übergebe dann setzt er pw auf blub also hat die default arguments

1050
02:06:03,320 --> 02:06:10,400
allerdings irgendwie hat sich ein c++ gremium gedacht wir machen die fault arguments ohne

1051
02:06:10,400 --> 02:06:20,040
named arguments was heißt so was zum beispiel heißt wenn ich jetzt sowas hier habe dann muss

1052
02:06:20,040 --> 02:06:24,760
ich immer alles angeben in einer normalen sprache könnte man ich zeige ich mache da mal eine

1053
02:06:24,760 --> 02:06:31,000
funktion draus da kann ich euch das besser zeigen also wir haben jetzt hier die funktion start die

1054
02:06:31,000 --> 02:06:39,160
funktion start kann ich folgendermaßen aufrufen so das war es mir muss was halt für schmerzen

1055
02:06:39,160 --> 02:06:45,840
stimmt so was da jetzt passiert ist der ruft die funktion auf mit diesem port und nimmt für

1056
02:06:45,840 --> 02:06:51,640
user und für passport das default argument was ich hinten angegeben habe das ist ja schon mal

1057
02:06:51,640 --> 02:06:57,480
gut dass die sowas eingebaut haben in c++ aber was es jetzt fail macht ist dass c++ keine named

1058
02:06:57,480 --> 02:07:03,920
arguments hat das bedeutet mal angenommen ich möchte jetzt nicht user setzen sondern nur

1059
02:07:03,920 --> 02:07:11,680
passport setzen dann geht das nicht also wenn ich sowas hier machen möchte wie gleich lull das

1060
02:07:11,680 --> 02:07:23,520
geht nicht das gibt es nicht das kann das nicht also ich muss immer sagen ich muss immer sagen neuer

1061
02:07:23,520 --> 02:07:30,960
user neues password ich kann da keine named arguments also ich weiß nicht wie man auf die

1062
02:07:30,960 --> 02:07:36,640
idee kommt die fault arguments einzuführen allerdings nicht zeitgleich named arguments

1063
02:07:36,640 --> 02:07:42,320
verstehe ich nicht das eine braucht das andere irgendwie und in dem fall ist es ja noch relativ

1064
02:07:42,320 --> 02:07:46,800
sinnvoll wenn man das passport ändert dass man auch den usernamen aber überlegt euch mal ihr

1065
02:07:46,800 --> 02:07:51,480
habt jetzt irgendeine funktion die was vom datalysystem liest ja sowas hier nach der

1066
02:07:51,480 --> 02:08:12,240
nach dem motto file name keine ahnung size mode blocking irgendwas so ihr habt irgendwas langes

1067
02:08:12,240 --> 02:08:18,200
so und es wurde im prinzip für alles die falsachen alles für alle für alles wurde

1068
02:08:18,200 --> 02:08:24,880
die falsachen definiert so und die falsachen sind gut und ihr wollt bloß sagen ok ich will

1069
02:08:24,880 --> 02:08:28,480
es nicht blocking sondern ich will es asynchron haben dann könnt ihr nicht einfach sagen ok

1070
02:08:28,480 --> 02:08:37,040
wir machen jetzt hier datei datei index html und sagen jetzt blocking gleich falls so wäre

1071
02:08:37,040 --> 02:08:42,200
das in jeder sinnvollen programmiersprache gelöst wurde gelöst wäre das in jeder sinnvollen

1072
02:08:42,200 --> 02:08:46,800
programmiersprache gelöst oder so oder so irgendwie so ist was ich meine aber das geht

1073
02:08:46,800 --> 02:08:51,920
nicht weil c++ ich gedacht habe nein named arguments brauchen wir nicht und das heißt

1074
02:08:51,920 --> 02:08:56,800
wenn ich diese funktion hier aufrufen will und möchte nur das hier hinten ändern alles andere

1075
02:08:56,800 --> 02:09:04,640
ist ok muss ich das jedes mal so machen und gucken dass ich auch ja nicht das falsche

1076
02:09:04,640 --> 02:09:12,840
vergesse dass das falsche machen total hängen geblieben dazu kommt auch das problem bei

1077
02:09:12,840 --> 02:09:20,720
langen funktions aufrufen ist es so dass man man sieht hier an dieser funktion nicht was was ist

1078
02:09:20,720 --> 02:09:26,000
also man hat keine ahnung dass das hier feilen ist dass das hier size ist dass das hier mode ist

1079
02:09:26,000 --> 02:09:32,480
und das hier blocking oder nicht hat man nicht mit name mit named arguments hättest du das weil

1080
02:09:32,480 --> 02:09:36,440
dann würde es jetzt beispielsweise reinschreiben ok ich will den mode ändern ich will sagen mode

1081
02:09:36,440 --> 02:09:44,280
gleich reed so das wird dann funktionieren aber nein in c++ das ganze nicht es gibt

1082
02:09:44,280 --> 02:09:51,880
so einen so einen so einen so einen so einen antrag dafür glaube ich im c++ starr aber so

1083
02:09:51,880 --> 02:09:55,800
was kommt nie man muss sagen ordentliche programmiersprachen wie sagen wir massi

1084
02:09:55,800 --> 02:10:00,920
scharp oder so was javascript kann das übrigens glaubt mittlerweile auch wenn also wenn javascript

1085
02:10:00,920 --> 02:10:05,680
was schon kann ordentliche programmiersprachen sowas wie scharp heißen sonst was die können des

1086
02:10:05,680 --> 02:10:16,120
seit 15 jahren oder so wenn man null über gibt nein wenn man null über gibt ist das du hast

1087
02:10:16,120 --> 02:10:22,920
ein parameter gesetzt du musst es höchstens weglassen oder aber wenn du das default behalten

1088
02:10:22,920 --> 02:10:27,840
willst musst du explizit mal angenommen du willst das default behalten ja und du willst nur blocking

1089
02:10:27,840 --> 02:10:34,160
ändern du musst explizit das angeben was du oben schon mal geschrieben hast nur um hier dann falls

1090
02:10:34,160 --> 02:10:42,640
rein zu stecken woops richtig hängen geblieben dings scharp kann das passen rubik also können

1091
02:10:42,640 --> 02:10:50,560
die meisten programmiersprachen c++ hat es bis heute geschafft ist halt c++ also wir haben

1092
02:10:50,560 --> 02:10:59,120
den server gestartet server läuft auf port 443 wunderbar also normalerweise läuft er da jetzt

1093
02:10:59,120 --> 02:11:04,360
ist er gerade abgekackt irgendwie aber der läuft nach port 443 und ich habe euch ja gerade diese

1094
02:11:04,360 --> 02:11:10,760
format lip gezeigt du kannst es mit function ja das ist ein gutes beispiel das kann ich auch

1095
02:11:10,760 --> 02:11:17,120
noch mal zeigen du kannst es mit function overloading teilweise machen aber ich meine ganz ehrlich es

1096
02:11:17,120 --> 02:11:22,600
wird es wird noch eklig ja es wird noch eklig du kannst das natürlich mit overloading machen also

1097
02:11:22,600 --> 02:11:26,440
du kannst sowas hier machen aber da sieht man auch schon gleich dass es irgendwie eine merkwürdige

1098
02:11:26,440 --> 02:11:32,320
idee ist also du kannst natürlich sowas hier machen aber das das das ändert auch nichts

1099
02:11:32,320 --> 02:11:36,400
da dran dass du nicht einfach mal das letzte argument ändern kannst du kannst natürlich

1100
02:11:36,400 --> 02:11:40,960
sowas hier machen das wird funktionieren aber kannst du auch nicht das letzte argument ändern

1101
02:11:40,960 --> 02:11:47,680
was du machen kannst ist jede nur erdenkliche kombination einen overload erstellen aber das

1102
02:11:47,680 --> 02:11:53,840
heißt du brauchst dann schon für eine für eine sagen wir mal für eine funktion wie read mit

1103
02:11:53,840 --> 02:11:58,080
ein paar parametern die fünf die fünf parameter bekommt da bräuchte es die ja schon allein schon

1104
02:11:58,080 --> 02:12:10,480
was ich keine ahnung 40 overloads oder so und dann kommen die big brain leute wieder an start und

1105
02:12:10,480 --> 02:12:16,680
basteln dann für c++ irgendwie einen preprozessor ding was das für dich macht im zweifelsfall noch

1106
02:12:16,680 --> 02:12:23,800
am besten sowas einfach in die sprache einbauen dann ist es auch benutzbar also das

1107
02:12:23,800 --> 02:12:30,200
läuft auf port 43 ich kann jetzt mal die was zeigen von dieser format lip was wirklich praktisch ist

1108
02:12:30,200 --> 02:12:40,480
ok in dem fall ist es jetzt ehrlich gesagt ziemlich ziemlich ziemlich low brain aber

1109
02:12:40,480 --> 02:12:45,440
unter dem strich was wir jetzt machen müssen ist in 16 in zu einem string zu konvertieren da

1110
02:12:45,440 --> 02:12:51,880
gibt es bestimmt eingebaute metoden aber wir können das mit der format library machen ich

1111
02:12:51,880 --> 02:12:56,200
habe mir da so klein so eine kleine rapper funktion drum gebastelt die in den c++ string

1112
02:12:56,200 --> 02:13:02,520
draus macht die in den arduino string da draus macht ist im prinzip unter der haube immer noch

1113
02:13:02,520 --> 02:13:14,920
jedes gleiche wie die format library da sagen wir jetzt hier nicht am format zahl zack port und

1114
02:13:14,920 --> 02:13:21,600
weil es alles ist müssen wir so sagen und jetzt wandelt er den wenn ich es richtig gemacht habe

1115
02:13:21,600 --> 02:13:29,960
jetzt wandelt er die zahl in ein string um ich weiß ehrlich gesagt nicht was die empfohlene

1116
02:13:29,960 --> 02:13:38,880
variante ist in c++ also die eine robuste variante wie man ein int in einen string umwandelt keine

1117
02:13:38,880 --> 02:13:46,120
ahnung was es da eingebautes gibt in dort nett würde ich übrigens genauso machen also in dort

1118
02:13:46,120 --> 02:13:55,320
nett würde ich auch würde ich auch sagen war blubb gleich moment jetzt steht auf dem schlauch wie

1119
02:13:55,320 --> 02:14:10,200
sieht es in scharp noch mal aus moment wie sah das jetzt in scharp noch mal aus ach hier ja port so so

1120
02:14:10,200 --> 02:14:15,600
wird es in scharp aussehen hier setzt er den port ein ist noch ein bisschen kürzer als das hier

1121
02:14:15,600 --> 02:14:22,360
jetzt setzt er den port ein schon hast du die zahl als string hast du irgendwelche aktiven

1122
02:14:22,360 --> 02:14:28,960
haskel projekte nein genau und du könntest natürlich in scharp habe ich gar nicht dran

1123
02:14:28,960 --> 02:14:34,080
gedacht du könntest machen port to string ja das wäre die einfachste variante richtig aber

1124
02:14:34,080 --> 02:14:40,600
sowas gibt es in c++ selbstverständlich nicht wo kommen wir denn dahin jungfels point schön

1125
02:14:40,600 --> 02:14:47,120
dass du am start bist excellent chat iq steigt wieder ins unermessliche ich sehe schon gut jetzt

1126
02:14:47,120 --> 02:14:52,320
haben wir einen server laufen auf port 443 denn jetzt kommt die eigentliche big brain variante was

1127
02:14:52,320 --> 02:14:56,440
ich vor habe nämlich dass das ganze multithreaded funktioniert weil man darf nicht vergessen wir

1128
02:14:56,440 --> 02:15:08,840
machen das ja auf einem auf einem esp 32 bord zwar auf dem hier und der esp 32 hat zwei kerne um

1129
02:15:08,840 --> 02:15:12,520
genau zu sein hat er drei aber der dritte ist jetzt erst mal egal den kann man dafür nicht

1130
02:15:12,520 --> 02:15:21,360
verwenden der esp 32 hat zwei kerne mit jeweils 240 megahertz also das ist für so ein kleines

1131
02:15:21,360 --> 02:15:29,360
scheißding was in der billigsten ausführung 2 euro 50 kostet doch ziemlich ordentlich und

1132
02:15:29,360 --> 02:15:36,040
dementsprechend kann man auch den webserver multithreaded machen das heißt pro connection

1133
02:15:36,040 --> 02:15:42,080
machen wir den eigenen thread auf und lassen den unabhängig voneinander laufen das hat den

1134
02:15:42,080 --> 02:15:53,960
vorteil dass man zum beispiel locks dampen kann über htp gleichzeitig aber auch noch den webserver

1135
02:15:53,960 --> 02:16:00,640
verwenden kann für zum beispiel ein dashboard das geht normalerweise nicht gescheit ansonsten

1136
02:16:00,640 --> 02:16:07,640
muss eins immer warten und gerade für locks ist das doof weil locks will man möglich zeitnah

1137
02:16:07,640 --> 02:16:12,680
sehen und spätestens wenn die kiste rebooted hat sind die locks weg und zum beispiel wenn man

1138
02:16:12,680 --> 02:16:19,120
ein update hochlädt möchte man gerne schon auf einem auf einer zweiten verbindung sehen können

1139
02:16:19,120 --> 02:16:25,320
ok wenn man etwas debacken will ok was für locks kommen da eigentlich ja und das ist ja das was

1140
02:16:25,320 --> 02:16:31,480
ich schon seit einer weile probieren den server zu basteln oder den webserver zu basteln oder zu

1141
02:16:31,480 --> 02:16:37,240
verwenden falls es fertige sachen gibt über den ich ordentlich updates machen kann über wlan hat

1142
02:16:37,240 --> 02:16:41,280
der htps kann über den ich updates machen kann übers wlan firmware updates übers wlan machen

1143
02:16:41,280 --> 02:16:46,720
kann halt auf dem controller und nebenbei mir auch noch die locks über htp anzeigen lassen

1144
02:16:46,720 --> 02:16:53,000
kann also spricht hier die serielle ausgabe an sich eigentlich kein problem aber die ganzen

1145
02:16:53,000 --> 02:16:56,640
server die ich gefunden habe taugen irgendwie nix meiner wird nicht wirklich besser werden

1146
02:16:56,640 --> 02:16:59,880
kann ich euch gleich sagen aber meiner wird wahrscheinlich das machen was ich will und

1147
02:16:59,880 --> 02:17:10,840
sonst nix wo hast du es gekauft bei bengut habe ich gekauft bengut ist kein porn seite ist

1148
02:17:10,840 --> 02:17:21,520
china shop seite bengut gibt es glaube ich sogar gerade im angebot dieser shop hat eigentlich

1149
02:17:21,520 --> 02:17:30,640
exzellente bewertung bengut 1,9 sterne itygo t display der ist aber nicht schlecht habt

1150
02:17:30,640 --> 02:17:40,200
auch noch bestellt der der der d1 mini ist gut aber das ist kein esp 32 das ist ein esp 82 66

1151
02:17:40,200 --> 02:17:49,000
das 80 megahertz single core ist eine nummer nummer schwächer also aktuell gibt es die im

1152
02:17:49,000 --> 02:18:00,000
angebot hier auf bengut und sogar aus uk glaube ich aber ein bisschen zu teuer gut china shop

1153
02:18:00,000 --> 02:18:10,600
6 dollar 99 cent das ist ein komplett fertiges kit also sprich das board mit den pins und

1154
02:18:10,600 --> 02:18:16,520
halt dem display corona kommt gleich mit ja das ist ein bisschen und das ist guck mal das ist 14

1155
02:18:16,520 --> 02:18:20,960
tage unterwegs da musst du dir keine gedanken machen dann bestellt man sich gleich mal zehn

1156
02:18:20,960 --> 02:18:27,240
stück wenn man damit öfters was machen will oder fünf fünf fünf stück fünf stück und dann

1157
02:18:27,240 --> 02:18:38,760
bezahlst du im endeffekt aus china gerade mal 34 euro 95 inklusive versand für ein komplettes

1158
02:18:38,760 --> 02:18:43,160
board mit display da kannst du dich nicht beschweren wenn du was einfacheres brauchst wenn

1159
02:18:43,160 --> 02:18:50,200
du nicht unbedingt ein board mit display haben willst oder was esp 32 gibt es dort für für

1160
02:18:50,200 --> 02:18:55,280
für unter drei dollar das stück kleine andere andere module aber ich finde das hier gerade gut

1161
02:18:55,280 --> 02:19:10,720
stromverbrauch mit display was mich hier was 0,1 watt weiß ich nicht wenig sehr wenig

1162
02:19:10,720 --> 02:19:32,920
0,1 watt 0,5 keine ahnung nicht viel auf jeden fall das ding hat so im durchschnitt irgendwie

1163
02:19:32,920 --> 02:19:42,720
bei 5 volt zieht das irgendwie so 150 milliampere oder so kannst ja ausrechnen 5 mal 0,15

1164
02:19:42,720 --> 02:19:54,920
also brauche volle pulle beim wlan senden mit display an ungefähr 0,75 watt in wirklichkeit

1165
02:19:54,920 --> 02:20:03,480
das ist wahrscheinlich mehr also die brauchen nicht wirklich viel gibt es die dinge auch mit

1166
02:20:03,480 --> 02:20:14,280
das schöne daran ist ja dass du massig viele zumindest beim esp 32 gpo pins hast da kannst du

1167
02:20:14,280 --> 02:20:19,000
anschließen was du willst da kaufst du dir noch ein 50 cent relay dabei und alles ist gut bei

1168
02:20:19,000 --> 02:20:24,120
dem hier hast du einen ticken weniger gpo pins aber immer noch genug wie du siehst weil das display

1169
02:20:24,120 --> 02:20:35,040
braucht ja auch ein paar gpo pins in sein stufe eins dankeschön big brain subscription aber wenn

1170
02:20:35,040 --> 02:20:41,120
du dir so mal so einen anderen esp 32 anschaust zum beispiel den hier so node mcu was ist du

1171
02:20:41,120 --> 02:20:48,360
du hast hier du hast massig gpo aus und da kannst du ohne probleme so viele relays anschließen so

1172
02:20:48,360 --> 02:21:02,440
viele relays brauchst du nicht also damit kann man eigentlich nicht viel falsch machen und am

1173
02:21:02,440 --> 02:21:08,680
besten das ist so mein universal tipp wenn es um so wenn es um so controller bestellen geht am

1174
02:21:08,680 --> 02:21:12,960
besten wenn er irgendwie mal so auf bingo zeigt und euch irgendwas raus oder auf aliexpress geht

1175
02:21:12,960 --> 02:21:20,080
geht übrigens genauso wenn ihr grad seid und euch irgendwas raussucht also sagen wir jetzt mal

1176
02:21:20,080 --> 02:21:27,160
ihr nehmt hier irgendwie den node mcu oder so das ist eigentlich auch relativ beliebte

1177
02:21:27,160 --> 02:21:35,840
beliebte boards sagen wir mal ihr wollt jetzt das da haben so und das ganze irgendwie fünf

1178
02:21:35,840 --> 02:21:43,520
mal nehmt das mehr als einmal nehmt das die haben weifer die haben bluetooth die also die

1179
02:21:43,520 --> 02:21:50,000
dingen haben wirklich die haben alles drauf gepackt was irgendwie geht du hast wlan allerdings nur

1180
02:21:50,000 --> 02:21:59,600
2,4 gigahertz wlan ich glaube die neuen esp 32 die könnten es zwei die können fünf gigahertz

1181
02:21:59,600 --> 02:22:08,400
wlan haben da bin ich mir aber nicht ganz sicher ja die neuen haben glaub fünf gigahertz also die

1182
02:22:08,400 --> 02:22:14,640
sind nicht wirklich neu das ist das ist eine andere produkt also die esp 32 s2 das ist nicht

1183
02:22:14,640 --> 02:22:18,960
wirklich neu also das ist eine andere produktlinie haben beispielsweise auch nur eine cpu und sowas

1184
02:22:18,960 --> 02:22:25,120
also von der leistungsfähigkeit sind die esp 32 immer noch am besten von denen die haben

1185
02:22:25,120 --> 02:22:33,760
alles mögliche drauf du hast du hast wlan du hast bluetooth low energy bluetooth zwei cpu kerne mit

1186
02:22:33,760 --> 02:22:41,520
jeweils 240 megahertz im dritten low power cpu kerne mit acht megahertz also features das das

1187
02:22:41,520 --> 02:22:47,920
gedöns hat wirklich also die haben da die haben echt alle register gezogen was da drauf ist genau

1188
02:22:47,920 --> 02:22:56,560
also 2 dual core dual core cpu 240 megahertz was echt viel ist ne ne sickb haben sie nicht drauf

1189
02:22:56,560 --> 02:23:00,480
sickb kann es aber vielleicht mit irgendeinem schild nach nach russ das habe ich mir noch

1190
02:23:00,480 --> 02:23:06,640
da habe ich noch nie geguckt ob es da nicht irgendwelche zusätzlichen sachen gibt

1191
02:23:06,640 --> 02:23:14,480
keine ahnung ob es da irgendwelche sickb sachen gibt keine ahnung weiß ich nicht

1192
02:23:14,480 --> 02:23:23,360
wpa 3 habe ich noch nicht daheim so du hast wie gesagt 2 2 dual core 2 30 bit cpus 240 megahertz

1193
02:23:23,360 --> 02:23:28,560
was ziemlich ziemlich schnell ist die arduinos sind kacken da richtig dagegen ab du hast ein

1194
02:23:28,560 --> 02:23:34,440
low power prozessor und der dritte hast quasi drei cpus der low power prozessor der hat zwar nur

1195
02:23:34,440 --> 02:23:38,560
acht megahertz aber das trickreiche daran ist haben wir übrigens auch mal programmiert in

1196
02:23:38,560 --> 02:23:44,520
einem stream von vor zwei jahren oder so schon ewig her du kannst wenn du den sensor dran hast

1197
02:23:44,520 --> 02:23:50,840
an diesem teil da kannst du mit dem low power prozessor diesen sensor abfragen und erst wenn

1198
02:23:50,840 --> 02:23:56,720
der sensorwert sich ändert und du darauf reagieren möchtest kannst du quasi mit dem low power

1199
02:23:56,720 --> 02:24:02,840
prozessor dann eigentlich in die eigentliche cpu starten das spart halt ungemein strom also

1200
02:24:02,840 --> 02:24:08,840
du fragst deinen sensor quasi low power ab und sagen wir mal sagen wir mal du hast irgendwie nen

1201
02:24:08,840 --> 02:24:13,480
temperatursensor in deinem fischteich oder so ja und du möchtest eine warnung bekommen wenn

1202
02:24:13,480 --> 02:24:19,160
der fischteich unter zehn grad wird weil du weißt okay vielleicht unter fünf grad das gefriert du

1203
02:24:19,160 --> 02:24:25,080
möchtest abdecken so oder fragst du deinen sensor ab mit dem low power prozessor die cpu kerne sleep

1204
02:24:25,080 --> 02:24:32,120
wlan sleep bluetooth sleep alles alles lieb und sobald der low power prozessor dein er fragt keine

1205
02:24:32,120 --> 02:24:37,200
ahnung der fragt dann alle zwei minuten fragt er deinen oder alle halbe stunde reicht er alle halbe

1206
02:24:37,200 --> 02:24:42,480
stunde fragt er deinen sensor ab und sobald der sensor sagt ah fünf grad dann wächst du mit

1207
02:24:42,480 --> 02:24:47,840
diesem ultra low power prozessor eben deine haupt cpus und dort verbinden sich dann im wlan und

1208
02:24:47,840 --> 02:24:57,120
senden die nachricht fischteich temperatur unter fünf grad oder was auch immer spart strom wenn

1209
02:24:57,120 --> 02:25:02,880
man wenn man mit esp 32 was machen möchte weil hier gerade jemand fragt wie schließt man die

1210
02:25:02,880 --> 02:25:08,600
am besten an strom an usb einfach usb kabel dran und gut ist es gibt die möglichkeit über batterie

1211
02:25:08,600 --> 02:25:14,080
allerdings muss man das richtige bord dafür nehmen die meisten developer boards also sprich boards

1212
02:25:14,080 --> 02:25:20,880
wo alles schon on board drauf ist und usb anschluss und alles hat sind nicht so strom sparen dass man

1213
02:25:20,880 --> 02:25:26,280
sie gut an ein akku anschließen könnte die sind zwar strom sparend aber um einer batterie oder

1214
02:25:26,280 --> 02:25:30,600
einem akku zu laufen musst du halt schon ziemlich strom sparen sein dass das über den sinnvollen

1215
02:25:30,600 --> 02:25:38,400
zeitraum läuft und es gibt es gibt dafür ein paar ganz gute boards zum beispiel das ist der erste

1216
02:25:38,400 --> 02:25:48,000
der mir einfällt der ist ein bisschen teurer 22 ist deutlich zu teuer gibt es das bord das hat

1217
02:25:48,000 --> 02:25:53,920
halt einen richtig richtig geringen eidel eidelverbrauch und das eignet sich auch das

1218
02:25:53,920 --> 02:25:59,640
kannst du dann auch mit einem 1200 milliampere milliampere stunden akku kannst du das auch zwei

1219
02:25:59,640 --> 02:26:05,680
jahre laufen lassen du brauchst aber halt ein low power bord dass das gut funktioniert ansonsten

1220
02:26:05,680 --> 02:26:13,360
einfach usb usb und gut ist so du hast ram nicht so viel und nicht so viel wo man wirklich viel

1221
02:26:13,360 --> 02:26:21,440
am stück verwenden kann von trickboard trickboard ist aber fail in dem sinn weil es trickst das

1222
02:26:21,440 --> 02:26:28,200
trickboard ist nicht wirklich low power das trickboard hat einen timer was quasi alles

1223
02:26:28,200 --> 02:26:36,080
abschaltet und den time ab und zu aufweckt die den kerben und irgendwie glaubt man dann den

1224
02:26:36,080 --> 02:26:45,400
timer eine uhrzeit checkt oder so und das trickboard ist sp 266 kein sp 32 du kannst den strom auch

1225
02:26:45,400 --> 02:26:50,240
über pins anschließen das geht auch also wenn du eine batterie hast da kannst du die also besser

1226
02:26:50,240 --> 02:26:55,200
gesagt akku dann kannst du die auch an die pins anschließen manche boards haben dafür schon

1227
02:26:55,200 --> 02:27:00,760
den passenden akkuanschluss da guckt der hier zum beispiel der hat so einen passenden akku

1228
02:27:00,760 --> 02:27:10,280
anschluss für so eine für so ein normalen akku formfaktor da es gibt viele boards muss man

1229
02:27:10,280 --> 02:27:13,440
einfach gucken was man machen will welche man braucht nur mal kurz hier drüber zu gehen was

1230
02:27:13,440 --> 02:27:18,840
das ding noch für features hat wie gesagt im vergleich zu den billigen arduino relativ viel

1231
02:27:18,840 --> 02:27:28,920
ram aber ich meine wir reden hier von 520 kilobyte ram und um genau zu sein kibi beid ram für alle die

1232
02:27:28,920 --> 02:27:33,240
das jetzt hier ganz genau wissen wollte hier bei also ist nicht viel also man kommt also damit

1233
02:27:33,240 --> 02:27:40,560
kannst keine allzu großen sprünge machen du bekommst dafür wählen bluetooth beides relativ

1234
02:27:40,560 --> 02:27:47,480
neu jetzt gerade wählen nicht super neu aber relativ neu du hast analog digital konverter

1235
02:27:47,480 --> 02:27:59,320
digitaler log konverter touch sensor spi interface sp was ist denn sqs kenne ich gar nicht du hast

1236
02:27:59,320 --> 02:28:06,520
sqc 2 2 bus anschlüsse du kannst an ein sqc klauen bis zu 86 gerät oder so anschließen wenn die

1237
02:28:06,520 --> 02:28:13,480
ursprünge hat du hast 3 serielle verbindungen du hast anschlüsse für sd karten und sonstige

1238
02:28:13,480 --> 02:28:17,800
geschichten du kannst theoretische netzwerk anstehen du kannst für autos eine kann bus

1239
02:28:17,800 --> 02:28:23,520
sachen machen du kannst das ding remote steuern über infrarotfernbedienung du kannst pwm machen

1240
02:28:23,520 --> 02:28:30,680
für einen motor für den lüfter für sonst was du kannst led pwm machen also sprich auch leds

1241
02:28:30,680 --> 02:28:36,200
steuern die über pwm gesteuert werden es hat einen eingebauten magnet sensor der übrigens sagt es

1242
02:28:36,200 --> 02:28:43,000
hat einen eingebauten temperatursensor der übrigens auch sagt ja und also das hat schon wirklich also

1243
02:28:43,000 --> 02:28:50,720
features hat das ding wirklich ordentlich drauf also im vergleich zu so einem arduino 5000

1244
02:28:50,720 --> 02:29:00,680
prozent mehr dafür würde ich sagen sind die arduinos ein tick robuster wobei die sp32 geht

1245
02:29:00,680 --> 02:29:06,880
auch nicht wirklich kaputt also arduino ist halt so ein ding das kannst du quasi drei jahre ist

1246
02:29:06,880 --> 02:29:12,680
übertrieben gesagt drei jahre im schlamm verbuddeln und das geht danach immer noch das ist bei so einem

1247
02:29:12,680 --> 02:29:19,960
sp32 eher nicht so jetzt habe ich mich dazu mal ausgelassen ok wo sind wir stehen geblieben

1248
02:29:19,960 --> 02:29:25,080
genau wir wollen jetzt mit dem big mit dem mit mit dem big brain part anfangen und zwar dass

1249
02:29:25,080 --> 02:29:29,560
wir die verbindung multithreaded annehmen also wir haben ja gesehen wir haben hier den server offen

1250
02:29:29,560 --> 02:29:35,360
ja ich muss mal kurz den esp resetten dann kann ich euch mal zeigen dass das server läuft weil

1251
02:29:35,360 --> 02:29:40,920
das wlan geht nach zehn minuten aus das muss ich nach zehn minuten immer neu verbinden das

1252
02:29:40,920 --> 02:29:44,160
zehn minuten sind jetzt um ich habe zehn minuten lang geschwätzt

1253
02:29:44,160 --> 02:29:52,680
so schauen wir immer zu sehen wir gleich wenn er gebootet ist

1254
02:29:52,680 --> 02:30:07,040
ah ja ja wunderbar 1544 so server läuft port viel für 3 ist auf also sprich das funktioniert

1255
02:30:07,040 --> 02:30:12,440
und wir sehen es ja auch wenn man es mit karl auf htps probiert er sagt halt ok ich kann mich

1256
02:30:12,440 --> 02:30:17,440
verbinden auf den port aber wenn ich jetzt meinen tls handshake ssl handshake machen will das geht

1257
02:30:17,440 --> 02:30:24,080
nicht ist ja auch klar wir lesen ja noch überhaupt nichts ein und und machen ja nichts und jetzt

1258
02:30:24,080 --> 02:30:28,680
müssen wir dafür sorgen dass der die verbindung annimmt also erst mal muss die verbindung richtig

1259
02:30:28,680 --> 02:30:34,080
richtig also die die die verbindung annehmen und dann muss er einen ssl handshake machen dass

1260
02:30:34,080 --> 02:30:40,080
ich eine verbindung über htps herstellen kann so und wie man das jetzt machen ist folgendes ich

1261
02:30:40,080 --> 02:30:43,720
habe gesagt wir machen das ganze multithreader also sprich pro verbindung

1262
02:30:43,720 --> 02:30:55,560
genau pro verbindung machen wir ein thread auf das machen wir folgendermaßen die ich

1263
02:30:55,560 --> 02:31:01,500
ich zeige mal ganz kurz zwei varianten die man eingebaut verwenden kann wenn man mehrere

1264
02:31:01,500 --> 02:31:07,800
also wie gesagt der esp 32 hat hier zwei kerne und hat ein mini betriebssystem drunter mit einem

1265
02:31:07,800 --> 02:31:15,400
scheduler der quasi mehr also man hat hier zwei kerne aber man kann bis zu standardmäßig glaube

1266
02:31:15,400 --> 02:31:23,240
ich bis zu bis zu 4 bis zu 32 oder 64 glaube ich standardmäßig eingestellt prozesse oder

1267
02:31:23,240 --> 02:31:29,560
oder tasks laufen lassen weil die haben einen scheduler drunter der quasi cpu zeit halbwegs

1268
02:31:29,560 --> 02:31:34,640
gleichmäßig verteilt also so ein bisschen wie das windows auf eurem desktop auch macht also

1269
02:31:34,640 --> 02:31:40,240
sprich ich habe zwar nur zwei cpu kerne aber ich kann bis zu 32 tasks starten die sich je

1270
02:31:40,240 --> 02:31:46,200
nach priorität die cpu kerne teilen und halt mal zeit bekommen mal keine zeit bekommen dann

1271
02:31:46,200 --> 02:31:52,840
mal wieder zeit bekommen und sowas zwei eingebaute wege um diese task zu verwenden zeige ich euch

1272
02:31:52,840 --> 02:32:07,160
mal schnell es gibt die native variante das ist wie task create das ist die eingebaute

1273
02:32:07,160 --> 02:32:15,000
funktion um solche also die low leveligste funktion um tags anzulegen die es gibt man kann

1274
02:32:15,000 --> 02:32:21,240
entweder sagen x task create oder x task create pin to core da kann man eben sagen ok mir ist

1275
02:32:21,240 --> 02:32:26,160
egal auf welchem cpu kerne das ganze läuft kannst auch abwechselnd machen juckt mich nicht oder du

1276
02:32:26,160 --> 02:32:32,520
kannst sagen ich möchte dass er nur auf core 1 läuft das ist ganz sinnvoll weil was vermissen

1277
02:32:32,520 --> 02:32:40,960
muss dass wenn man arduino benutzt arduino die main arduino loop läuft immer auf core 1 das

1278
02:32:40,960 --> 02:32:45,720
ist vorkonfiguriert die haben das standardmäßig so eingestellt dass arduino komplett auf core 1

1279
02:32:45,720 --> 02:32:51,840
läuft und iow und wlan und so läuft auf core 0 das hat natürlich das hat seinen charm

1280
02:32:51,840 --> 02:33:01,080
das hat seinen charm weil du kommst du nicht in die quere also sprich selbst wenn ich arduino

1281
02:33:01,080 --> 02:33:08,640
komplett blocker und und dicht mache wlan geht immer noch das muss aber in dem fall einfach

1282
02:33:08,640 --> 02:33:14,360
einfach klar sein wenn man da seine seine kerne verteilt ja fips was du verpasst hast ja das kann

1283
02:33:14,360 --> 02:33:24,320
ich ja wie wir basteln kann ssl in den mini webserver der ssl kann so x task create und hier kann

1284
02:33:24,320 --> 02:33:29,240
man eben sagen auf welchem core erlaufen soll die argumente sind folgendermaßen als erstes muss

1285
02:33:29,240 --> 02:33:38,560
man angeben was man ausführen möchte also zum beispiel geben wir hier mal lambda an oder so also

1286
02:33:38,560 --> 02:33:44,560
irgendeine funktion die ausgeführt wird dann muss man ihm sagen den name für den task keine

1287
02:33:44,560 --> 02:33:52,880
ahnung cute chat task dann muss ihm sagen stack size stack size war ganz einfach gesagt ist wie

1288
02:33:52,880 --> 02:34:00,640
viel arbeitsspeicher der thread der task verwenden darf gibt es denn keine vorgefertigten sachen

1289
02:34:00,640 --> 02:34:04,720
doch gibt es gibt es gibt noch eine andere sache aber das ist die low level variante da

1290
02:34:04,720 --> 02:34:12,760
sagt man dann zum beispiel du darfst du darfst 4096 byte an also 4k 4 kilobyte an ram verwenden

1291
02:34:12,760 --> 02:34:18,640
das reicht normalerweise dicker aus ja so da kann ich parameter übergeben das wollen wir

1292
02:34:18,640 --> 02:34:24,080
nicht priorität sagen wir mal priorität eins immer der task mit der höchsten priorität wird

1293
02:34:24,080 --> 02:34:29,760
ausgeführt und ein task handle das brauche ich nicht so so ist die native art in den tag zu

1294
02:34:29,760 --> 02:34:36,160
starten hier sage ich beispielsweise was der task machen soll endlos schleife sensor abfragen zum

1295
02:34:36,160 --> 02:34:46,200
beispiel so würde so einen standard wie formatiert der das das ist ja abartig und ks so würde das

1296
02:34:46,200 --> 02:34:50,120
standardmäßig bringen sie noch die parameter so würde das standardmäßig aussehen wenn man

1297
02:34:50,120 --> 02:34:56,480
einen low level task machen will was ist das für eine notierung für lambda z plus plus mehr

1298
02:34:56,480 --> 02:35:07,320
muss ich dazu nicht sagen zu sagen sieht halt nun mal so aus und die sache noch komplett so machen

1299
02:35:07,320 --> 02:35:12,120
man dafür bringt den kram teilweise weglassen sieht so aus was es nicht schöner macht das

1300
02:35:12,120 --> 02:35:17,160
ist jetzt quasi hier würde ich den task starten der immer in der endlos schleifenden sensor abfragt

1301
02:35:17,160 --> 02:35:27,480
ne da gibt es keine library für es gibt eine library für es gibt eine eingebaute https library

1302
02:35:27,480 --> 02:35:33,280
mit einer neuen esp edf version die ist aber rein singel threaded und plockt alle furz lang und es

1303
02:35:33,280 --> 02:35:38,760
gibt ein github projekt der in endlos schleifen hängen bleibt wenn man die verbindung abbricht

1304
02:35:38,760 --> 02:35:46,080
also und auch nicht so genau das macht was ich will dazu kommt dass ich sowas schon immer mal

1305
02:35:46,080 --> 02:35:51,320
selbst ausprobieren wollte wie es funktioniert so also das ist die low level variante ein task

1306
02:35:51,320 --> 02:35:56,680
anzulegen die ist die würde ich bevorzugen wenn man das macht dann jetzt auch die z plus plus

1307
02:35:56,680 --> 02:36:02,960
variante standard thread ist im prinzip genau das gleiche bloß dass ich weniger optionen habe

1308
02:36:02,960 --> 02:36:12,080
das ist die das ist die z plus plus variante das problem dabei ist das funktioniert übrigens

1309
02:36:12,080 --> 02:36:17,600
genauso wie das andere da würde ich auch in den lander rein machen und sagen hier endlos schleife

1310
02:36:17,600 --> 02:36:26,400
zu sensor abfragen das wäre die z plus plus variante sie ist ein bisschen kleiner und ein

1311
02:36:26,400 --> 02:36:31,480
bisschen hübscher aber das problem dabei ist das ist übrigens mal so formatieren sonst jetzt kacke

1312
02:36:31,480 --> 02:36:38,480
aus das problem dabei ist dass man keinerlei konfig optionen hat für den task der unter der

1313
02:36:38,480 --> 02:36:43,120
haube angelegt wird also der z plus plus das hier macht genau das gleiche was ich euch vorher

1314
02:36:43,120 --> 02:36:48,160
gezeigt habe unter der haube nur dass ein party fault parameter setzt das problem ist dass die

1315
02:36:48,160 --> 02:36:52,920
wirklich dass sie eine viel zu hohe priorität vergeben für den task die vergeben priorität

1316
02:36:52,920 --> 02:36:59,000
fünf priorität fünf ist höher als alles andere was standardmäßig läuft und dementsprechend

1317
02:36:59,000 --> 02:37:04,680
kackt das ding ab wenn das hängt also sprich wenn ich hier sowas laufen lasse mit priorität

1318
02:37:04,680 --> 02:37:10,720
fünf und das ist und ich schliebe da drin nicht oder oder ich hänge zu lange in dem task fest

1319
02:37:10,720 --> 02:37:19,200
dann kackt mir der kackt mir das das der kontrolle ab und das nächste problem ist dass die stack size

1320
02:37:19,200 --> 02:37:23,480
viel zu klein ist ich glaube die habe ich weiß nicht was die standard für eine stack size haben aber

1321
02:37:23,480 --> 02:37:30,920
man kann einfach nicht genug ram verwenden in so einem z plus plus ding so und deswegen ihr wisst

1322
02:37:30,920 --> 02:37:35,640
ja dass ich ein c sharp fern bin deswegen habe ich mir was eigenes gebaut ich habe mir den wrapper

1323
02:37:35,640 --> 02:37:40,480
gebaut um das hier und ich habe mir sehr viele wrapper schon gebaut weil ich wie gesagt z plus

1324
02:37:40,480 --> 02:37:47,000
plus nicht lange ertrage ich habe mir den wrapper für das hier gebaut und zwar kann man das ganze

1325
02:37:47,000 --> 02:37:54,600
folgenden verfolgen der mast fern helfer task run vielleicht erfüllt sich da ein oder andere jetzt an

1326
02:37:54,600 --> 02:38:02,040
die standard task api für von dort nett erinnert ist ein bisschen ähnlich weil ich das erste ist

1327
02:38:02,040 --> 02:38:11,320
woran ich gedacht habe ja task run und hier kann ich jetzt angeben was ich was ich was ich laufen

1328
02:38:11,320 --> 02:38:18,600
lassen will nur dass ich bei meinem eigenen wrapper die möglichkeit habe wie man hier sieht noch

1329
02:38:18,600 --> 02:38:26,920
stack size priorität und auf welchem kern ich laufen will anzugeben also ich finde recht

1330
02:38:26,920 --> 02:38:33,120
sinnvolle abstraktion das ganze überlassen jetzt mal komplett die fault alles und sagen die task

1331
02:38:33,120 --> 02:38:39,360
run und was wir jetzt machen wollen ist folgendes wie gesagt verbindung annehmen funktioniert ja

1332
02:38:39,360 --> 02:38:44,240
jetzt müssen wir bloß sagen verbindung except und danach neu in zwölf also hier neun zwölf

1333
02:38:44,240 --> 02:38:48,680
starten und ssl handshake machen ich hoffe das kriegen wir heute noch hin wir sind doch schon

1334
02:38:48,680 --> 02:38:51,160
ein bisschen wir sind ein bisschen am starten ich merke es auch schon ein bisschen heißer wäre

1335
02:38:51,160 --> 02:38:57,200
zweieinhalb stunden zweieinhalb stunden big big brain programm so also wir haben jetzt einen

1336
02:38:57,200 --> 02:39:04,400
task gestartet und da drin machen wir jetzt eine endlos schleife endlos schleife immer beste

1337
02:39:04,400 --> 02:39:10,080
so machen wir endlos schleife drinne die connections annimmt und zwar funktioniert das folgendermaßen

1338
02:39:10,080 --> 02:39:23,080
ich habe hier gesagt er soll auf port 443 port 443 lauschen port 443 so und damit das ganze

1339
02:39:23,080 --> 02:39:29,120
funktioniert der also der nimmt jetzt connection auf port 459 der hat der lauscht auf port 443

1340
02:39:29,120 --> 02:39:33,040
der nimmt noch keine connections an damit der connection annimmt muss ich folgendes machen

1341
02:39:33,040 --> 02:39:40,960
stripes 007 exzellent damit der connections annimmt muss ich folgendes machen ich muss

1342
02:39:40,960 --> 02:39:45,800
ihm sagen except connection also wer hätte wer hätte das gedacht zwar muss ich ihm hier sagen

1343
02:39:45,800 --> 02:39:55,760
embed tls net accept und dann muss ich ihm sagen okay hier nehmen wir haben ich das ding genannt

1344
02:39:55,760 --> 02:40:08,720
hier listen fd habe ich es genannt ich muss auch sagen dass ich hier drauf zugreifen darf

1345
02:40:08,720 --> 02:40:27,960
ignoriert das ist irgendein c++ geschäft ach listen listen fd wie habe ich genannt alles gut

1346
02:40:38,720 --> 02:40:48,920
ich glaube die auto das auto komplett mag nicht weil das gibt es offensichtlich ich glaube das

1347
02:40:48,920 --> 02:41:01,160
auto komplett mag nicht also immer genau jetzt muss ich sagen connection annehmen der und

1348
02:41:01,160 --> 02:41:05,080
operator mit nene ich will ja das ganze ding übergeben als referent das passt schon ich habe

1349
02:41:05,080 --> 02:41:10,200
es ja auf dem vorfeld schon mal ausprobiert so und jetzt kommt ein bisschen magic ich kopiere

1350
02:41:10,200 --> 02:41:16,600
das gerade mal dass ich mich nicht verschreibe ich kopiere das mal schnell dass ich mich nicht

1351
02:41:16,600 --> 02:41:33,240
verschreibe und zwar das hier wtf ich ich ignoriere das mal weil ich weiß dass es funktioniert ich

1352
02:41:33,240 --> 02:41:38,480
habe das vorher ausprobiert also man legt jetzt erst mal noch eine variable an wo man die infos

1353
02:41:38,480 --> 02:41:44,960
wer sich verbindet hinterlegt zum beispiel kann ich hier dann abfragen welche ip hat der client

1354
02:41:44,960 --> 02:41:50,240
der sich verbunden hat also ich muss hier irgendwo die information speichern sprich aktueller status

1355
02:41:50,240 --> 02:41:56,040
der verbindung welche ip hat der client und solche geschichten das muss ich auch noch übergeben

1356
02:41:56,040 --> 02:42:09,200
klein fd wie lahm die autos auto komplett ist und dann der rest kann den rest kann man hier kann

1357
02:42:09,200 --> 02:42:12,800
man übrigens die ip abfragen vom client das könnte das könnte man eigentlich mal machen

1358
02:42:12,800 --> 02:42:17,800
das war mal gleich mal wenn wir gucken wenn wir gucken dass das hier funktioniert da kann

1359
02:42:17,800 --> 02:42:22,560
man sich nämlich die ip ausgeben lassen die der client verwendet so was hat er jetzt für schmerzen

1360
02:42:22,560 --> 02:42:35,880
was mag er hier dran nicht ah es funktioniert alles klar erst mal fehler anzeigen wo keiner ist

1361
02:42:35,880 --> 02:42:50,600
genau also sprich das hier ist quasi ein zeiger da da da drauf hier auf die klasse auf die

1362
02:42:50,600 --> 02:42:57,560
member variable so oder klassen variabler wenn man das genau nennen markt in c++ so

1363
02:42:57,560 --> 02:43:04,080
nee das wird nicht übergeben aber ich muss hier oben reinschreiben was ich übergeben will ich

1364
02:43:04,080 --> 02:43:08,400
könnte auch so was hier machen dann nimmt er alles auf was ich referenziere aber ich kann so

1365
02:43:08,400 --> 02:43:13,040
was reinschreiben finde ich ein bisschen überflüssig ehrlich gesagt man könnte einfach sagen okay

1366
02:43:13,040 --> 02:43:18,840
nimm standardmäßig alles per copy was ich hier drinnen nehme referenzier das automatisch für

1367
02:43:18,840 --> 02:43:23,440
mich oder wenn ich halt per reference haben muss ich es angeben oder wenn ich was exkluden will

1368
02:43:23,440 --> 02:43:30,080
muss ich unnötig viel geschreibe eigentlich so und jetzt jetzt nimmt er die verbindung an der macht

1369
02:43:30,080 --> 02:43:34,280
jetzt einen neuen thread auf und dieser thread macht nichts anderes wie immer in der endlosschleife

1370
02:43:34,280 --> 02:43:38,440
gucken gibt es neue verbindung gibt es neue verbindung gibt es neue verbindung wenn es

1371
02:43:38,440 --> 02:43:45,440
eine neue verbindung gibt dann annehmen dementsprechend muss ich jetzt auch gucken ob das

1372
02:43:45,440 --> 02:43:51,400
funktioniert hat also sprich aber aber die verbindung angenommen hat also ob das funktioniert

1373
02:43:51,400 --> 02:43:56,160
hat ich meine ich könnte ja könnte irgendwelche fehler geben könnte sein dass der client die

1374
02:43:56,160 --> 02:44:00,320
verbindung abgebrochen hat dass ich nicht genug ram habe um die verbindung anzunehmen oder was

1375
02:44:00,320 --> 02:44:07,480
kann ja alles mögliche sein so also können wir es okay wenn wenn ich die verbindung angenommen

1376
02:44:07,480 --> 02:44:12,700
habe dann mal handel connection das war mal als nächstes und wenn ich viel interessanter in

1377
02:44:12,700 --> 02:44:16,960
dem fall ist wenn die connection nicht annehmen konnte vielleicht weil er klein die verbindung

1378
02:44:16,960 --> 02:44:20,800
schon geschlossen hat dann muss ich noch ein bisschen aufräumen weil wir sind ja hier in

1379
02:44:20,800 --> 02:44:33,200
im low level c++ land das heißt was ich jetzt machen muss ist mtls net free free und zwar den

1380
02:44:33,200 --> 02:44:44,960
da klein fd den muss ich freeen und danach muss ich ihn löschen also in dem fall ich leg das hier

1381
02:44:44,960 --> 02:44:51,560
an ich reserviere hier speicher für manuell den räumt er nicht automatisch auf weil ich will

1382
02:44:51,560 --> 02:44:56,120
sonst die verbindung nicht wegschmeißen und wenn das annehmen der verbindung nicht funktioniert

1383
02:44:56,120 --> 02:45:01,200
da muss ich das wieder aufräumen ansonsten habe ich in memory leak und dann ist der esp startet

1384
02:45:01,200 --> 02:45:09,200
sich random neue und ich frage mich warum memory leaks sagt wollen wir nicht so und jetzt haben

1385
02:45:09,200 --> 02:45:12,920
wir die verbindung angenommen da können wir jetzt mal gucken was jetzt ob das jetzt anders aussieht

1386
02:45:12,920 --> 02:45:23,680
als vorher aber ich denke mal noch nicht allzu sehr die musik eintöner könnte sein aber dafür

1387
02:45:23,680 --> 02:45:32,680
längt sie nicht ab so mein ziel ist jetzt dass wir gleich noch ein ssl handshake machen da muss

1388
02:45:32,680 --> 02:45:38,720
unbedingt was essen ich hab übelst hunger vielleicht guck mal ne runde barbeque pit boys so zack guckt

1389
02:45:38,720 --> 02:45:45,160
ihr seht wir kommen schon ein bisschen weiter er nimmt die verbindung an er nimmt die verbindung

1390
02:45:45,160 --> 02:45:52,680
an er möchte den ssl handshake machen aber das funktioniert nicht warum naja ganz klar weil ich

1391
02:45:52,680 --> 02:45:57,320
nix weiter mache mit der verbindung außer sie annehmen ich nehme die verbindung an und danach

1392
02:45:57,320 --> 02:46:05,600
mache ich nichts mehr willst du dann gleich für jede verbindung einen neuen thread aufmachen so

1393
02:46:05,600 --> 02:46:10,720
ist der plan ja so ist der plan dementsprechend muss man auch sagen also wie gesagt das ding hat

1394
02:46:10,720 --> 02:46:13,720
nicht sonderlich viel ram ich zeige es euch mal wie viel ram das hat das hält sich echt in grenzen

1395
02:46:13,720 --> 02:46:24,360
esp get free hip geben wir mal geben wir mal den speicher aus dass ihr gleich seht wie wieder

1396
02:46:24,360 --> 02:46:33,120
speicher runter purzelt wenn ich da verbindung aufbau gucken wir uns mal an also das hat also

1397
02:46:33,120 --> 02:46:39,400
wie gesagt die sachen zwar hier dass sie 520 kb ram haben allerdings ist der ram ein bisschen

1398
02:46:39,400 --> 02:46:44,000
anders aufgeteilt wie das so bei einem normalen rechner ist also wenn ihr auf eurem desktop keine

1399
02:46:44,000 --> 02:46:50,040
ahnung 2 gigabyte ram habt ihr auch 2 gigabyte ram hier ist es ein bisschen anders ihr seht

1400
02:46:50,040 --> 02:46:59,160
sie habt ihr standardmäßig nur guck mal bei es zu kilobyte habt ihr nur 170 kilobyte ram zur

1401
02:46:59,160 --> 02:47:05,000
verfügung von diesen 520 das ist alles ein bisschen wird alles ein bisschen anders gehandhabt zum

1402
02:47:05,000 --> 02:47:13,280
beispiel gehen für statische variablen und solche sachen geht schon mal ram weg für für den wlan

1403
02:47:13,280 --> 02:47:20,040
für den wifi stack geht ram weg solche sachen also wir haben die schreiben zwar man hat 520

1404
02:47:20,040 --> 02:47:31,240
kilobyte kilobyte ram aber benutzbar sind im endeffekt nur so 170 wobei es auch hier unser

1405
02:47:31,240 --> 02:47:37,240
display unser display frisst ja auch noch ein bisschen ram keine ahnung 40 40 kilobyte ram

1406
02:47:37,240 --> 02:47:44,000
oder so wird wahrscheinlich auch die ganze display geschichte fressen normalerweise hat man so

1407
02:47:44,000 --> 02:47:54,760
circa 220 kilobyte zur verfügung ram das reicht aber auch dicke ich weiß im vergleich zu einem

1408
02:47:54,760 --> 02:48:04,320
desktop mit was mal kurz gucken mit 32 gigabyte ram kommen einem jetzt 220 kilobyte ram vielleicht

1409
02:48:04,320 --> 02:48:14,720
nicht allzu viel vor aber auf so einer plattform ist das doch ganz ordentlich was meint ihr wie

1410
02:48:14,720 --> 02:48:19,640
viel ram son arduino hat noch viel weniger weiß ich hat von euch einer mal arduino programmiert

1411
02:48:19,640 --> 02:48:24,040
das ging bisher an mir vorbei aber die haben teilweise noch deutlich weniger ram

1412
02:48:24,040 --> 02:48:30,400
und

1413
02:48:30,400 --> 02:48:44,920
sebaro bist du eigentlich am start ist der cute mod da glaube ich glaube nicht das war jetzt

1414
02:48:44,920 --> 02:48:51,360
noch schnell also wo sie stehen geblieben handel connection soweit so gut wir machen jetzt für

1415
02:48:51,360 --> 02:48:56,040
jeden hier müssen wir mal sagen kann man kann man der sache halbwegs folgen was ich hier treibe

1416
02:48:56,040 --> 02:49:01,280
jetzt war für die also ich weiß dass wir ein paar leute am start haben die sich damit gut auskennen

1417
02:49:01,280 --> 02:49:04,840
und ich weiß auch dass wir ein paar leute am start haben die einfach nur gucken weil sie es

1418
02:49:04,840 --> 02:49:08,800
entspannend finden und eigentlich sich nicht so damit beschäftigen aber so war die frau für

1419
02:49:08,800 --> 02:49:13,240
die leute das interessiert so kann man der sache halbwegs folgen was ich hier treibe ich meine ich

1420
02:49:13,240 --> 02:49:20,000
bin mir selbst nicht hundertprozentig sicher was ich mache und dass ich erhebe da jetzt auch keinen

1421
02:49:20,000 --> 02:49:26,040
anspruch darauf dass das alles so hundertprozentig stimmt was ich sag also es kann durchaus sein dass

1422
02:49:26,040 --> 02:49:32,560
ich mal ein bisschen misst erzähle aber unwissentlich zwischendurch zum beispiel ist es ja zum es ist ja

1423
02:49:32,560 --> 02:49:38,360
auch nicht ganz korrekt wenn ich sage dass die stack size von einem task gleich der sache ist

1424
02:49:38,360 --> 02:49:45,440
die das an speicher verwenden kann aber im großen und ganzen stimmt halt so also wir haben jetzt hier

1425
02:49:45,440 --> 02:49:53,360
ein extra task ich nenne es mal task weil das halt so der die die sagt man so schön die terminologie

1426
02:49:53,360 --> 02:49:58,480
ist also halt so einfach das wort was man dafür verwendet auf der plattform unter windows wären

1427
02:49:58,480 --> 02:50:06,240
das thread so ich habe hier einen extra thread gestartet wir nennen es mal task ich bin thread

1428
02:50:06,240 --> 02:50:12,760
spricht sich irgendwie für nicht native speaker so kompliziert aus das ist also wir haben extra

1429
02:50:12,760 --> 02:50:18,640
task gestartet mit der endlos schleife die macht quasi die ganze zeit das da plus bisschen schneller

1430
02:50:18,640 --> 02:50:26,840
und dort gucken wir einfach gibt es eine verbindung wenn ja nehmen wir die verbindung an wenn nein

1431
02:50:26,840 --> 02:50:34,440
beziehungsweise wenn die verbindung irgendwie geschlossen wurde dann machen wir den speicher

1432
02:50:34,440 --> 02:50:37,240
wieder frei soll jetzt kommen das eigentlich interessant jetzt müssen wir die connection

1433
02:50:37,240 --> 02:50:43,040
handeln also sprich jetzt müssen wir müssen wir in den ssl handshake machen also in den ssl handshake

1434
02:50:43,040 --> 02:50:50,720
das man weil aktuell ist es ja so wenn ich im browser da drauf gehe 1 2 2 1 6 8 1 1 2 auf fuck

1435
02:50:50,720 --> 02:51:00,480
was das 5 4 3 3 dann geht nix und auch mit HTTPS geht da nix secure connection fällt bäm end of

1436
02:51:00,480 --> 02:51:07,120
file error geht nicht aber er merkt schon mal dass da irgendwas ist und jetzt muss ich in ssl handshake

1437
02:51:07,120 --> 02:51:14,080
machen vielleicht klingt nach bedrohung ja das stimmt das stimmt schritt ist neuer schritt ist

1438
02:51:14,080 --> 02:51:20,320
das neue task jetzt muss die verbindung annehmen und in ssl handshake machen also sprich den

1439
02:51:20,320 --> 02:51:26,000
verbindungsaufbau für eine verschlüsselte verbindung muss ich jetzt machen und wir starten

1440
02:51:26,000 --> 02:51:33,440
jetzt einen weiteren task pro connection hier nehme ich die connection an und jetzt starte

1441
02:51:33,440 --> 02:51:40,400
ich einen weiteren task pro connection das heißt jede jede verbindung die kommt ist unabhängig von

1442
02:51:40,400 --> 02:51:47,320
der anderen das bedeutet ich kann zum beispiel einen firmware update machen und mir dabei über

1443
02:51:47,320 --> 02:51:52,000
eine andere verbindung die logs angucken die das firmware update verursacht also zum beispiel ich

1444
02:51:52,000 --> 02:51:59,000
könnte das hier unten mir anschauen in einem browser oder per curl oder sonst wie und gleichzeitig

1445
02:51:59,000 --> 02:52:02,960
ein firmware update machen und gucken okay gibt es einen fehler beim firmware update und so was

1446
02:52:02,960 --> 02:52:06,880
ein bisschen mehr low level gucken weil die verbindungen komplett unabhängig voneinander

1447
02:52:06,880 --> 02:52:13,080
sind ansonsten müsste die eine verbindung auf die andere warten was zum beispiel einem update gar

1448
02:52:13,080 --> 02:52:18,720
nicht funktionieren würde weil bei einem update block den kompletten vorgang ein update ist ja

1449
02:52:18,720 --> 02:52:25,800
den upload im endeffekt den upload von keine ahnung 600 kilobyte großer firmware und solang

1450
02:52:25,800 --> 02:52:30,120
ich 600 kilobyte firmware upload kann ich nichts anderes machen wenn das single threaded wäre

1451
02:52:30,120 --> 02:52:35,480
wird er upload upload upload und nach dem ende des firmware updates wird er einfach den esp neu

1452
02:52:35,480 --> 02:52:40,560
starten und ich hätte nichts mitbekommen hier meine logs im browser was denn während im

1453
02:52:40,560 --> 02:52:44,640
firmware update passiert ist deswegen ist es denke ich mal ganz ganz praktisch wenn man das

1454
02:52:44,640 --> 02:52:50,360
ganze multithreaded macht natürlich braucht es ein bisschen mehr ram als als alles in einem task

1455
02:52:50,360 --> 02:52:57,600
logisch und wir haben ja auch nur hier noch 170 kilobyte ram frei das heißt im endeffekt ich kann

1456
02:52:57,600 --> 02:53:02,960
auch nicht so viele verbindungen aufbauen also eine tls ssl htps verbindung wie auch immer man

1457
02:53:02,960 --> 02:53:08,400
es jetzt genau nennen mag braucht ungefähr 30 bis 40 kilobyte ram oder könnt ihr mal ausrechnen

1458
02:53:08,400 --> 02:53:14,040
wie viel verbindung ich da rein kriege realistisch betrachtet sind es wahrscheinlich drei vier oder

1459
02:53:14,040 --> 02:53:23,720
fünf insgesamt das liegt aber auch daran weil ich kontinuierlichen speicherplatz brauche und ich

1460
02:53:23,720 --> 02:53:30,200
muss erstmal 30 kilobyte am stück speicherplatz frei haben also wir machen jetzt für diese neue

1461
02:53:30,200 --> 02:53:37,320
verbindung noch einen neuen task auf und zwar was der macht ist der gibt das einfach zu einer

1462
02:53:37,320 --> 02:53:45,840
methode weiter die wir gleich oben anlegen also erst mal neuen lambda anschmeißen das da übrigens

1463
02:53:45,840 --> 02:53:51,400
wer sich das hier fragt diese dieses konstrukt hier ist eine funktion die keinen namen hat also

1464
02:53:51,400 --> 02:53:56,120
sprich ich könnte hier oben auch so was hinschreiben wie also anstatt dem hier könnte ich

1465
02:53:56,120 --> 02:54:03,080
dann auch so was machen wie keine woid bla bla blob sonst was hier irgendwas und dann anstatt anstatt

1466
02:54:03,080 --> 02:54:11,400
dem das da machen das wird auch funktionieren aber ich finde es insofern schöner dass man

1467
02:54:11,400 --> 02:54:16,320
die funktion an der stelle hat wo was passiert dann kann man kann man halt direkt sehen was ist

1468
02:54:16,320 --> 02:54:21,520
sobald das ein bisschen länger wird würde ich das nicht mehr im lambda in line schreiben sondern

1469
02:54:21,520 --> 02:54:24,600
wird halt wirklich eine eigene funktion machen das machen wir jetzt auch gleich also wir haben

1470
02:54:24,600 --> 02:54:31,720
jetzt die verbindung angenommen das heißt viel smart man excel das ist das gegenteil von dem

1471
02:54:31,720 --> 02:54:41,960
hier quasi quasi ex exquisite smart man da muss aber den stream oft gucken weil das ist ja

1472
02:54:41,960 --> 02:54:51,320
bekanntlicher maßen IQ steigerung bis mehr geht nicht mehr vor allem wenn man zappt wenn man

1473
02:54:51,320 --> 02:55:00,520
zappt habe ich gehört ist das noch mal eine steigerung was das angeht jeder sub plus 40

1474
02:55:00,520 --> 02:55:12,760
IQ punkte für den gesamten chat wissenschaftlich belegt so also neuer neuer task aufmachen und da

1475
02:55:12,760 --> 02:55:20,600
drin sagen wir jetzt okay nehmen die verbindung nehmen die verbindung und machen mal sowas hier

1476
02:55:20,600 --> 02:55:26,560
die mit die methode gibt es noch nicht also das gibt es ich schreibe das nur mal rein das gibt

1477
02:55:26,560 --> 02:55:35,480
es noch nicht also wir machen mit der verbindung gleich irgendwas aber zumindest eine sache brauchen

1478
02:55:35,480 --> 02:55:41,680
wir hier unten auch noch sollte die verbindung abkacken dann muss ich auf jeden fall auch wieder

1479
02:55:41,680 --> 02:55:48,680
aufräumen weil sonst habe ich memory leak ich zelebriere das hier jetzt so weil das schießt

1480
02:55:48,680 --> 02:55:53,840
dann total oft ins knie dass man das aufräumen vergisst und wir sind ja wir sind ja keiner sprache

1481
02:55:53,840 --> 02:55:58,000
die gabitsch collector oder sonst was hat alles seine vornachteile hier muss es halt webs machen

1482
02:55:58,000 --> 02:56:01,720
das heißt man dürfte auf keinen fall vergessen den graben den wir oben angelegt haben wieder

1483
02:56:01,720 --> 02:56:06,640
freizugeben sollte man es hier einfach so anlegen ist kein problem legt er automatisch wieder an

1484
02:56:06,640 --> 02:56:12,960
legt man das allerdings so an dann muss man das selbst wieder frei frei also new alles was man mit

1485
02:56:12,960 --> 02:56:17,560
new anlegt oder maloc in c muss man wieder freigeben in dem fall mit delete oder mit

1486
02:56:17,560 --> 02:56:38,440
free in c sonst memory leak und f in chat genau so jetzt werden wir mal die die metode anlegen

1487
02:56:38,440 --> 02:56:50,840
was wir wollen ssl handshake machen mit einem scheren pointer funktioniert glaube ich nicht mit

1488
02:56:50,840 --> 02:56:54,640
einem scheren pointer funktioniert nicht war das habe ich das habe ich mich ausprobieren

1489
02:56:54,640 --> 02:57:02,800
sonst beschwerst du dich die ganze zeit über c++ also es gibt genug über c++ wo man sich

1490
02:57:02,800 --> 02:57:08,600
beschweren kann unabhängig von c apis und gerade interop mit c apis müsste nur wirklich

1491
02:57:08,600 --> 02:57:14,640
eines der steckenpferden von c++ schlechthin sein und dafür ist es an einigen stellen ordentlich

1492
02:57:14,640 --> 02:57:31,800
haklich ich überlege gerade was war das doch doch an der stelle könnte man wirklich ein scherz pointer

1493
02:57:31,800 --> 02:57:41,320
machen also anstatt dem da anstatt dem da könnte man könnte kein scherz pointer machen konnte man

1494
02:57:41,320 --> 02:57:48,320
nicht machen ein scherz pointer also man könnte nein könnte man nicht machen weil wenn ich den

1495
02:57:48,320 --> 02:58:00,960
hier oben anlege dann geht er hier dann geht er hier aus dem scope und wenn er hier aus

1496
02:58:00,960 --> 02:58:05,760
dem scope geht funktioniert glaube ich nicht wenn ich den scherz pointer hier anlegen wird

1497
02:58:05,760 --> 02:58:18,160
ist das scope hier fertig ich könnte zwar hier übergeben aber ich glaube das bringt nichts

1498
02:58:18,160 --> 02:58:32,280
und vielleicht geht es auch ich glaube es geht nicht ich könnte das höchstens

1499
02:58:32,280 --> 02:58:36,440
moveen irgendwie wobei ich da nicht weiß ob das mit diesem c zeug funktioniert

1500
02:58:36,440 --> 02:58:42,600
ich probiere das nicht ich lasse es einfach so weil da weiß ich hat es funktioniert so

1501
02:58:42,600 --> 02:58:46,920
also wir brauchen jetzt eine neue metode für händel connection der kriegt die information

1502
02:58:46,920 --> 02:58:54,520
über den client übergeben also sprich ip vom client status vom client und sonst was so das

1503
02:58:54,520 --> 02:59:02,920
ding als händel connection kann visual studio sowas wie create method oder sowas geht das hier

1504
02:59:02,920 --> 02:59:13,000
anders sowas wie reflektor na anscheinend nicht gut da müssen wir da müssen wir das ganze von

1505
02:59:13,000 --> 02:59:25,160
hand anlegen händel connection also gehen wir mal hier ruf und sagen private void händel connection

1506
02:59:25,160 --> 02:59:37,160
so und das braucht als parameter ein m bünd tls net context den wir einfach mal so nennen oder

1507
02:59:37,160 --> 02:59:46,760
den pointer ist das na wie es code kann es auch muss ein plugin installieren ok welches

1508
02:59:48,760 --> 02:59:52,480
gibt ja bestimmt tausende ich glaube wir machen jetzt mal eine andere playlist die

1509
02:59:52,480 --> 03:00:00,000
habe ich jetzt schon zum dritten mal zum dritten mal durch gedudelt

1510
03:00:00,000 --> 03:00:11,880
was denn ok scheint scheint halt fix brauchbar zu sein und es geht mir nicht so sehr auf den

1511
03:00:11,880 --> 03:00:17,120
keks so also jetzt gucken jetzt mal mit ssl handshake also sprich aktuell kann sich der

1512
03:00:17,120 --> 03:00:20,600
browser ja nicht hierhin verbinden und jetzt nehmen wir die verbindung von dem browser an

1513
03:00:20,600 --> 03:00:28,200
da geben wir hoch in händel connection und müssen als erstes mal den ssl context anlegen

1514
03:00:28,200 --> 03:00:37,640
das ist das wo die ganzen informationen was verschlüsselung sachen und irgendwelche aktuellen

1515
03:00:37,640 --> 03:00:43,720
things wie heißt es session nummern und so geduldet drin gespeichert werden also sprich

1516
03:00:43,720 --> 03:00:47,640
alles was man braucht dass die verbindung mit klein weiter verschlüsselt funktionieren

1517
03:00:47,640 --> 03:01:00,640
kann kommt alles hier in diesen ssl context rein so den muss man erstmal anlegen das ist

1518
03:01:00,640 --> 03:01:05,520
jetzt nichts was man immer so macht das ist halt so eine mbtls spezifische geschichte

1519
03:01:05,520 --> 03:01:11,600
das habe ich auch noch aus dem tutorial dass das halt nun mal so gemacht werden muss man

1520
03:01:11,600 --> 03:01:16,960
sonst nicht funktioniert so und jetzt können wir gucken ob das ganze funktioniert hat also

1521
03:01:16,960 --> 03:01:30,800
sprich mal so was hier result oder so setup und da muss man eben jetzt das hier übergeben

1522
03:01:30,800 --> 03:01:37,240
sprich hier stehen die informationen vom client drin aktuell also sprich irgendwelche tcp

1523
03:01:37,240 --> 03:01:43,160
geschichten connection also was zu der verbindung gehört und hier stehen dann die ganzen ssl

1524
03:01:43,160 --> 03:01:47,000
informationen für den client drin also was man zum verschlüsseln braucht so und das

1525
03:01:47,000 --> 03:01:52,960
muss man jetzt sagen ok nimm mal die kleinen die die die kleinen verbindung und dein ssl

1526
03:01:52,960 --> 03:01:59,720
context wurschtel das zusammen und mach halt ssl setup also sprich richte das mal so ein

1527
03:01:59,720 --> 03:02:06,080
dass ich jetzt in der ssl verbindung handshake machen kann aufbauen kann übrigens ich erzähle

1528
03:02:06,080 --> 03:02:11,880
euch mist das ist nämlich verkehrt ich muss den ssl context übergeben und die es stimmt

1529
03:02:11,880 --> 03:02:16,920
übrigens auch die config die ich vorhin angelegt habe also vergiss es weil ich gesagt habe

1530
03:02:16,920 --> 03:02:23,180
das kommt jetzt gleich genau result so und jetzt müssen wir checken ob das funktioniert

1531
03:02:23,180 --> 03:02:30,080
hat also sprich wenn das result nicht null ist null ist immer ok das ist das das ist

1532
03:02:30,080 --> 03:02:35,400
aber vielen libraries so und das ist auch nicht eine reine cc plus plus geschichte also viele

1533
03:02:35,400 --> 03:02:44,640
programmiersprachen die oder libraries die ins als als fehler code verwenden da bedeutet

1534
03:02:44,640 --> 03:02:52,040
es meistens null ist meistens ok und alles was nicht null ist ist meistens nicht gut

1535
03:02:52,040 --> 03:03:01,080
also sprich wenn ich jetzt kein ssl context anlegen konnte dann gebe ich eine fehlermeldung

1536
03:03:01,080 --> 03:03:09,120
aus und die copy paste das copy paste ich mir mal weil ich das nicht machen muss error message

1537
03:03:09,120 --> 03:03:14,800
error message brauche ich noch copy paste ich mir auch mal das habe ich nämlich im

1538
03:03:14,800 --> 03:03:23,680
vorfeld schon mal gebastelt und zwar ember tls gibt ganz ultra kryptische fehlermeldung aus also

1539
03:03:23,680 --> 03:03:32,520
sowas wie ssl setup failed minus 582179 so und dann soll dann irgendeiner was dran erkennen

1540
03:03:32,520 --> 03:03:39,760
glücklicherweise haben die eine möglichkeit eingebaut nämlich mit dieser geschichte ember

1541
03:03:39,760 --> 03:03:46,840
tls error dem übergibt man einen error code einen buffer und eine länge und dann wandelt

1542
03:03:46,840 --> 03:03:54,480
er diese kryptische kryptische error fehlermeldung um in eine lesbare fehlermeldung was wir dazu

1543
03:03:54,480 --> 03:04:01,000
noch machen müssen ist allerdings ember tls error einbinden dann sollte es eigentlich

1544
03:04:01,000 --> 03:04:10,200
funktionieren sehr gut exzellent jetzt haben wir schöne fehlermeldung und er schreit ja auch

1545
03:04:10,200 --> 03:04:18,320
fett in rot wenn das nicht funktioniert ja und deswegen müssen wir danach auch sagen wenn wir

1546
03:04:18,320 --> 03:04:23,920
kein ssl setup machen konnten dann hier raus aus der funktion weil da können wir nicht weiter

1547
03:04:23,920 --> 03:04:27,600
machen ist klar wir können ja keine ssl verbindung aufbauen wenn es am anfang schon gescheitert ist

1548
03:04:27,600 --> 03:04:32,960
und danach kommt er dann wieder hier raus und macht ihn free das wichtig sonst sonst in your face

1549
03:04:32,960 --> 03:04:37,400
memory leak ich glaube ich probiere das nachher mal mit dem shared pointer ob das wirklich

1550
03:04:37,400 --> 03:04:42,680
funktioniert wie gesagt ich glaube das funktioniert nicht ich bin nach flow 690 wenn du heute

1551
03:04:42,680 --> 03:04:52,280
ein stream mitgekriegt hast ich bin definitiv kein c++ fanboy also ich bin das letzte wirklich das

1552
03:04:52,280 --> 03:04:57,520
allerletzte was ich wäre c++ fanboy es gibt halt keine andere möglichkeit wie viel den kram

1553
03:04:57,520 --> 03:05:05,240
sonst programmieren wenn ich mit c++ so also jetzt haben wir hier den ssl setup gemacht

1554
03:05:05,240 --> 03:05:11,880
du bist das grad von arbeit ich habe heute wieder übelst geflammt über c++ und jetzt kommt jetzt

1555
03:05:11,880 --> 03:05:18,360
kommt das eigentlich interessante so jetzt machen wir nämlich ein ssl handshake also sprich jetzt

1556
03:05:18,360 --> 03:05:22,880
machen wir verbindungsaufbau mit dem client hier also dass da nicht mehr dieser fehler kommt als

1557
03:05:22,880 --> 03:05:32,680
man wirklich ssl verbindungsaufbau der esp 32 kann lure allerdings gibt es dafür so wenig

1558
03:05:32,680 --> 03:05:41,840
esp 32 kannst du micro python machen lure aber hauptsächlich cc plus plus auch die ganzen

1559
03:05:41,840 --> 03:05:46,200
offiziellen libraries und sachen sind cc plus plus und auch die ganze die arduino geschichte

1560
03:05:46,200 --> 03:05:54,840
meistens auch alles c++ es gibt eine experimentelle rast implementierung und es gibt so eine low

1561
03:05:54,840 --> 03:06:03,600
level.net geschichte wo es aber auch keine libraries für gibt also es lohnt sich eigentlich nicht

1562
03:06:03,600 --> 03:06:08,480
die lure macht auch keinen spaß außerdem wie gesagt ich glaube mit lua hast du das

1563
03:06:08,480 --> 03:06:17,080
problem dass du auch viele sachen nicht verwenden kannst also jetzt war mein ssl handshake dazu

1564
03:06:17,080 --> 03:06:21,280
müssen wir vorher noch ein paar sachen machen und zwar ich copy paste mir das dann erkläre ich was

1565
03:06:21,280 --> 03:06:26,320
das macht weil sonst verschreibe ich mich da garantiert bei also man muss einmal das hier setzen

1566
03:06:26,320 --> 03:06:33,360
und zwar wenn die verbindung wieso c++ ja weil es die einzige sprache ist wo man das gescheit

1567
03:06:33,360 --> 03:06:40,360
machen kann ja für den controller also esp 32 musst du quasi fast schon in cc plus plus

1568
03:06:40,360 --> 03:06:45,760
programmieren die alternativen haben auch ihre probleme aber das also ich mache sie nicht umsonst

1569
03:06:45,760 --> 03:06:54,960
freiwillig in c++ da kannst du von ausgehen ich mache nichts freiwillig in c++ so was das hier

1570
03:06:54,960 --> 03:07:00,840
jetzt macht ist folgendes wir setzen ein timeout also sprich nach zehn sekunden wo die verbindung

1571
03:07:00,840 --> 03:07:07,360
nichts übertragen hat ah wlan ist abgekackt okay nach zehn sekunden wo die verbindung nicht

1572
03:07:07,360 --> 03:07:12,320
übertragen hat bricht er ab das ist insofern ganz wichtig weil wir haben eh nicht viel ram und wenn

1573
03:07:12,320 --> 03:07:15,920
ich irgendwann nach fünf verbindungen hängen habe kann ich keine sechste verbindung aufbauen

1574
03:07:15,920 --> 03:07:19,040
weil ich kein ram mehr habe und die verbindung machen gar nichts also wir sagen zehn sekunden

1575
03:07:19,040 --> 03:07:26,000
nach zehn sekunden ist schluss nach spätesten zehn sekunden ist schluss damit das ganze funktioniert

1576
03:07:26,000 --> 03:07:31,640
müssen wir sagen okay wir wollen nicht einfach nur senden empfangen wir wollen mit timeout das

1577
03:07:31,640 --> 03:07:37,520
ist alles was das hier macht also sprich das setzt ein timeout gut und jetzt kommt jetzt kommt

1578
03:07:37,520 --> 03:07:42,360
der eigentliche nackpunkt jetzt machen wir ein ssl handshake da überlege ich nur grad wie man

1579
03:07:42,360 --> 03:07:55,960
das am besten machen m wird tls handshake ssl und dann ist wieder das gleiche wenn das ungleich

1580
03:07:55,960 --> 03:08:01,800
null ist dann hat es funktioniert so ist die so ist die einfache variante also sprich man guckt

1581
03:08:01,800 --> 03:08:08,400
man macht einen ssl handshake guckt ob der ungleich null ist und dann ist gut ob der null

1582
03:08:08,400 --> 03:08:13,440
ist dann ist gut wenn der ungleich null ist dann gibt es einen fehler die sache ist jetzt nur die

1583
03:08:13,440 --> 03:08:22,320
dass das leider ein bisschen komplizierter ist man kann sich das hier auch im im offiziellen

1584
03:08:22,320 --> 03:08:28,160
example mal angucken wenn man sich hier den handshake anguckt die machen das in einer

1585
03:08:28,160 --> 03:08:34,720
schleife und zwar es könnte ja sein dass der client wenn ich das hier aufrufe ssl handshake

1586
03:08:34,720 --> 03:08:39,960
dass der client noch gar nicht genug informationen geschickt hat dass ich überhaupt einen ssl handshake

1587
03:08:39,960 --> 03:08:47,480
machen kann also stellt euch vor mein client ist kein 8700k desktop cpu sondern irgendwie was noch

1588
03:08:47,480 --> 03:08:52,880
schlechteres noch langsameres und er hat jetzt einen verbindungsaufbau gemacht aber noch gar

1589
03:08:52,880 --> 03:08:58,120
nicht genug daten geschickt dass ich überhaupt den ssl handshake machen kann dementsprechend machen

1590
03:08:58,120 --> 03:09:04,960
die das hier in der schleife und sagen okay wir machen so lang ssl handshake wie ich wieder client

1591
03:09:04,960 --> 03:09:12,600
noch sachen zum schrei mir sachen schicken will oder mir sachen oder oder ich sachen von ihm lesen

1592
03:09:12,600 --> 03:09:18,600
will und wenn das nicht der fall ist und trotzdem fehler dann kacken wir ab und dann gibt es eine

1593
03:09:18,600 --> 03:09:23,480
fehlermeldung also sprich die hab die behandeln den fall hier halt auch dass der client lahm ist

1594
03:09:23,480 --> 03:09:28,640
und das ist nicht verkehrt das sollten wir auch machen deswegen koppeln copy und paste ich mir

1595
03:09:28,640 --> 03:09:33,080
das auch mal mehr oder weniger aus dem beispiel fast eins zu eins raus wir können jetzt folgendes

1596
03:09:33,080 --> 03:09:38,960
machen wir können sagen okay wir machen so lange ssl handshake so lange ssl handshake ungleich

1597
03:09:38,960 --> 03:09:44,960
null ist ungleich null heißt irgendein fehler beziehungsweise irgendwas was nicht okay bedeutet

1598
03:09:44,960 --> 03:09:49,840
null bedeutet okay dann können wir weitermachen also sprich wenn ssl handshake okay gleich null

1599
03:09:49,840 --> 03:09:56,840
ist dann mache ich weiter also hier unten wenn es ungleich null ist dann gucke ich nach ob es

1600
03:09:56,840 --> 03:10:01,720
vielleicht bedeutet der klein möchte noch was schreiben beziehungsweise ich möchte dem klein

1601
03:10:01,720 --> 03:10:06,440
noch was senden umgedreht der klein möchte ich möchte vom klein noch was lesen oder der

1602
03:10:06,440 --> 03:10:12,440
klein möchte mir noch was senden wenn das der fall ist dann mache ich einfach so lange weiter bis

1603
03:10:12,440 --> 03:10:16,160
ich alles gelesen habe und alles dem klein geschickt habe was ich brauche dass ich den

1604
03:10:16,160 --> 03:10:22,440
ssl handshake machen kann so ist das nicht der fall dann kacke ich ab mit einem fehler und wir

1605
03:10:22,440 --> 03:10:32,040
müssen mal wieder die sachen freen weil ansonsten halt memory leak da machen wir return das heißt

1606
03:10:32,040 --> 03:10:37,880
wir kommen wieder hier unten raus und räumen auf und nehmen die nächste verbindung an und haben es

1607
03:10:37,880 --> 03:10:46,080
beendet so aber wir hoffen ja dass der ssl handshake funktioniert so und deswegen geben wir mal

1608
03:10:46,080 --> 03:10:54,520
hier irgendwie was aus handshake okay weil wir wissen wenn wir hier ankommen hat der ssl handshake

1609
03:10:54,520 --> 03:10:59,160
funktioniert dann müssen wir noch der form halber zwei sachen machen dass der klein nicht hängen

1610
03:10:59,160 --> 03:11:04,120
bleibt das ist auch recht wichtig wir müssen sagen okay wenn die verbindung beendet ist also

1611
03:11:04,120 --> 03:11:09,560
wenn ich fertig bin mit dem klein dann sage ich hier mach mal verbindung zu weil ansonsten bleibt

1612
03:11:09,560 --> 03:11:15,360
der bleibt ja unendlich lang hier hängen was auch nicht schön ist und danach machen wir wieder

1613
03:11:15,360 --> 03:11:18,000
sauber und jetzt ablauen wir das mal gucken ob das scheiß funktioniert

1614
03:11:18,000 --> 03:11:30,400
haas joho sagt ich mache gerade freiwillig t++ und opengl und das trex teil macht einfach

1615
03:11:30,400 --> 03:11:35,000
nix das ist ganz toll exzellent aber du hast ja aber auch eine tolle kombination ausgesucht

1616
03:11:35,000 --> 03:11:47,240
so jetzt schauen wir mal ich schieb mal die konzili schieb mal meine konsole hierüber dass

1617
03:11:47,240 --> 03:11:52,760
ich was sehe und jetzt gucken wir mal jetzt gucken wir mal ob der ssl handshake funktioniert

1618
03:11:52,760 --> 03:12:01,480
ja nee oder das ist schlecht

1619
03:12:11,960 --> 03:12:16,960
das hat nicht funktioniert das ist schon mal nicht gut weil jetzt weiß ich nicht warum

1620
03:12:16,960 --> 03:12:28,800
doch doch ich glaube das hat funktioniert es kam bloß keine antwort kann das sein okay

1621
03:12:28,800 --> 03:12:33,400
dass das das müssen wir uns jetzt genauer angucken wir gehen jetzt mal mit open ssl ran

1622
03:12:33,400 --> 03:12:43,040
open ssl boah fuck das weiß ich auch gar nicht open ssl handshake test irgendwie es klein

1623
03:12:43,040 --> 03:12:47,000
connect oder sowas das weiß ich doch aus dem kopf nicht wie der kram funktioniert genau

1624
03:12:47,000 --> 03:12:51,680
das thomas krenn wiki weiß das bestimmt ja das hier suche ich genau das da das da suche ich

1625
03:12:51,680 --> 03:12:54,800
thomas krenn wiki ist bescheid

1626
03:12:54,800 --> 03:13:11,640
so connected sieht doch eigentlich ganz gut aus

1627
03:13:11,640 --> 03:13:33,640
nee das sieht nicht gut aus das hat nicht funktioniert ok warum nicht es hat aber auch

1628
03:13:33,640 --> 03:13:42,640
kein fehler gegeben hier und das hat auch gesagt gibt doch kein fehler es gibt auch kein fokus

1629
03:13:42,640 --> 03:13:59,520
ok es gibt es gibt kein fehler habe ich irgendwas vergessen handel connection fd trs klar es gibt

1630
03:13:59,520 --> 03:14:08,080
kein fehler aber wo hängt er dann jetzt da gibt irgendwas nicht frei ok irgendwas habe

1631
03:14:08,080 --> 03:14:14,400
ich verkehrt gemacht kommst du aus der inneren weilschleife raus ja das das die vermute habe

1632
03:14:14,400 --> 03:14:18,480
ich auch dass ich irgendwo hänge drin drin hängen wir machen also mal gutes altes printf

1633
03:14:18,480 --> 03:14:25,840
debugging na gut das hier muss funktioniert haben sonst wobei ich mache sie auch ich mache

1634
03:14:25,840 --> 03:14:41,360
über mein was dahinter ok upload kannst du ob auf dein controller nachsehen ob der überhaupt

1635
03:14:41,360 --> 03:14:48,440
ist naja verbindung geht ja hier oben siehst ja verbindung geht auf 443 auf 443 3 also die

1636
03:14:48,440 --> 03:15:04,560
verbindung klappt aber der ssl handshake klappt nicht

1637
03:15:04,560 --> 03:15:23,960
was da geht da gar nicht rein ach oh leute ich weiß nee moment was what the hell warum

1638
03:15:23,960 --> 03:15:28,000
geht er da nicht rein der muss doch in der muss doch hier reingehen in die funktion wenigstens

1639
03:15:28,000 --> 03:15:45,400
moment moment moment er macht gar nichts der geht da gar nicht rein warum geht er da nicht

1640
03:15:45,400 --> 03:15:52,680
rein was hat er für schmerzen face gesicht neun monate dankeschön big brain big brain

1641
03:15:52,680 --> 03:16:14,000
manager huge face head was auch immer warum geht er da nicht rein what the fuck warum da

1642
03:16:14,000 --> 03:16:22,920
geht er überhaupt nicht rein auch visual studio court please nicht abkacken jetzt habe ich

1643
03:16:22,920 --> 03:16:39,680
irgendwas vergessen task run task startet er den task überhaupt kannst du mir das programmier

1644
03:16:39,680 --> 03:16:49,640
beibringen ja 350 euro die stunde eats nee aber du kannst natürlich öfters mal hier

1645
03:16:49,640 --> 03:16:53,000
im stream vorbeigucken vielleicht lernst du das eine andere das kannst natürlich ruhig

1646
03:16:53,000 --> 03:16:57,840
machen wenn du fragen hast kannst mich auch fragen aber also was mir geschützt wird das

1647
03:16:57,840 --> 03:17:10,560
programmier beibringen wird ein bisschen schwierig what the fuck will er mich verarren was ist

1648
03:17:10,560 --> 03:17:27,440
das okay moment also jetzt blick ich blick ich den mal durch was ist eine schleife

1649
03:17:27,440 --> 03:17:34,320
ich wollte jetzt den doofen spruch mit schleife machen weil die gar weil ihr wisst ja schleife

1650
03:17:34,320 --> 03:17:39,360
ist ja meine meine beliebteste sache wo ich mich dann immer am anfang ein bisschen drüber

1651
03:17:39,360 --> 03:17:49,120
beschweren kann bei den meisten leuten unser zu wie kam ja auch letztes damit schleife

1652
03:17:49,120 --> 03:17:59,640
okay das funktioniert moment das ging doch eben noch nicht trace ist gibt die aktuelle

1653
03:17:59,640 --> 03:18:07,120
zeile aus wo er was macht das habe ich mir selbst zusammengestrickt jetzt funktioniert

1654
03:18:07,120 --> 03:18:20,720
es irgendwie so 108 108 ist das da das funktioniert innet except aber das verbindung annehmen geht

1655
03:18:20,720 --> 03:18:39,960
nicht das verbindung annehmen geht nicht guck mal 108 was was warum geht ich blick ich den

1656
03:18:39,960 --> 03:18:49,160
mal durch warum geht das nicht okay ich habe keine ahnung warum das nicht funktioniert

1657
03:18:49,160 --> 03:19:03,480
ich meine die schleife läuft ja offensichtlich kommst du aus hessen ja richtig komm ich die

1658
03:19:03,480 --> 03:19:07,720
schleife läuft ja offensichtlich und die hängt hier auch weil ansonsten würde ja nicht immer

1659
03:19:07,720 --> 03:19:17,720
wieder wenn ich eine verbindung aufbauen aber aber die except nicht okay anders ich glaube

1660
03:19:17,720 --> 03:19:22,840
ich weiß woran es liegt ich glaube ich weiß woran es liegt ich bin total bescheuert lul

1661
03:19:22,840 --> 03:19:41,200
lul leute seht ihr es richtig richtig hängen geblieben guck mal

1662
03:19:41,200 --> 03:19:50,960
ich muss gucken ob das auch null ist ansonsten ist null ja falls und falls heißt alt else

1663
03:19:50,960 --> 03:20:11,160
ja pass mal auf jetzt funktioniert es was so geier ist miesra motor ich habe keine nachgut

1664
03:20:11,160 --> 03:20:18,800
motorindustrie software reliability association okay flow 96 was sagt miesra dazu erhelle

1665
03:20:18,800 --> 03:20:26,480
uns außer händewaschen wahrscheinlich sagen gerade alle so pass mal auf jetzt geht's easy

1666
03:20:26,480 --> 03:20:36,280
jetzt funktioniert es also was der jetzt sagt ist mein zertifikat ist falsch das ist aber

1667
03:20:36,280 --> 03:20:40,080
in ordnung mein zertifikat ist ja auch falsch kann es übrigens mal ignorieren bei der guck

1668
03:20:40,080 --> 03:20:44,720
ssl handshake bamb funktioniert hier haben wir übrigens mein tolles zertifikat und zwar

1669
03:20:44,720 --> 03:20:55,360
für keck weh ausgestellt von der ca 0w irgendwo steht drin also jemand zertifikat ssl schäder

1670
03:20:55,360 --> 03:21:09,760
funktioniert sehr schön ja aktuell ist es wirklich so if error except was ja keinen

1671
03:21:09,760 --> 03:21:14,800
sinn ergibt ich finde es aber gut dass es ist ich finde es beeindruckend dass das nicht

1672
03:21:14,800 --> 03:21:19,600
dass sie das so gut programmiert haben dieses mbc tls dass es nicht abkackt weil ich meine

1673
03:21:19,600 --> 03:21:24,880
ich habe hier was total ungültiges übergeben im endeffekt ok dann also weiß ich woran

1674
03:21:24,880 --> 03:21:29,320
es liegt jetzt kann ich mein ganzes trace wieder rausnehmen excellent übrigens diese

1675
03:21:29,320 --> 03:21:38,400
trace funktion die ist so eklig programmiert die will ich euch nicht zeigen aber es schon

1676
03:21:38,400 --> 03:21:45,000
cool dass es die aktuelle zeile anzeigen kann ok jetzt erklärt uns der flow 690 bz

1677
03:21:45,000 --> 03:21:53,120
hier wie es richtig geht und zwar bei misra muss bei einer if schleife ok ich gehe davon

1678
03:21:53,120 --> 03:22:00,120
aus dass es absicht zuerst die konstante dann die variable kommen beispielsweise if true

1679
03:22:00,120 --> 03:22:14,520
gleich gleich x und nicht if x gleich das ist eine gute idee das ist eigentlich gar

1680
03:22:14,520 --> 03:22:21,720
nicht so verkehrt das finde ich nicht schlecht welche im leben wahrscheinlich nicht machen

1681
03:22:21,720 --> 03:22:26,080
so wie ich mich kenne aber finde ich nicht schlecht hast du die preview von c sharp neu

1682
03:22:26,080 --> 03:22:31,320
gesehen ich habe morgen viertel stunde von zum 2 stunden video geguckt aber nicht lange

1683
03:22:31,320 --> 03:22:37,080
wir können wenn ihr wollt wenn ich wenn es mir mal wieder danach ist wir können mal uns

1684
03:22:37,080 --> 03:22:41,080
das angucken hast du ein gutes video dazu ich habe nur so ein webcast gesehen wo sie

1685
03:22:41,080 --> 03:22:59,880
so 2 stunden rumgelabert haben ich kein bock haben weiterzukommen stream ideen sie schatten

1686
03:22:59,880 --> 03:23:02,880
9 features so eine blog post auch gut aber ich muss da sagen flow 690 die idee finde

1687
03:23:02,880 --> 03:23:09,740
ich nicht schlecht ich nehm mir einen

1688
03:23:09,740 --> 03:23:32,340
wir haben ja nicht skin

1689
03:23:32,340 --> 03:23:39,300
C-Standard unklar spezifiziert sind. Zum Glück nicht im C++-Standard, weil da

1690
03:23:39,300 --> 03:23:44,540
du kannst es umgedreht machen, was ist da klar, sodass der Hersteller des Compilers

1691
03:23:44,540 --> 03:23:48,900
eine eigene Interpretation wählen muss. Eigentlich gut, ja, gefällt mir.

1692
03:23:48,900 --> 03:24:04,060
Find ich gut. Und ich find's auch in dem Fall gar nicht so blöd. Normalerweise sagt man ja

1693
03:24:04,060 --> 03:24:09,180
immer so, ah hier gleich gleich true und sowas, ah nee, oder gleich gleich voll sowas,

1694
03:24:09,180 --> 03:24:13,860
schreibt man ja nicht. Aber ich muss sagen, in dem Fall finde ich gar nicht mal so doof,

1695
03:24:13,860 --> 03:24:20,500
wenn halt in dem Fall der Return-Code eben nicht ganz klar True-False ist,

1696
03:24:20,500 --> 03:24:28,220
sondern ein Int. Und dann ergibt das tatsächlich Sinn. Na klar, ich meine,

1697
03:24:28,220 --> 03:24:31,780
wenn die Funktion schon gleich True-False zurückliefert, ob man weiß ob die jetzt

1698
03:24:31,780 --> 03:24:34,980
funktioniert hat oder nicht, dann kannst du einfach den ganzen Kram weglassen,

1699
03:24:34,980 --> 03:24:43,380
aber in dem Fall sind es ja Ints. Ja, ist eine gute Idee, finde ich nicht verkehrt.

1700
03:24:43,380 --> 03:24:52,780
So, aber mal unabhängig davon. Es hat funktioniert, seht ihr? Ah nee. Ja, Handshake,

1701
03:24:52,780 --> 03:25:02,300
Bam, Handshake, okay. Hat funktioniert, Poggers. Also Verbindungsaufbau klappt und da kann ich

1702
03:25:02,300 --> 03:25:10,020
meine 50 Milliarden Trace-Sachen auch wieder rausnehmen. So, alles Fott, weg, weg. Können

1703
03:25:10,020 --> 03:25:14,140
wir noch so ein globales Flag irgendwie mal setzen, dass der Trace das automatisch rausschmeißt.

1704
03:25:14,140 --> 03:25:20,140
So, wunderbar. In meine Main, werde ich das übrigens mal ein bisschen anders machen.

1705
03:25:20,140 --> 03:25:30,220
Den Heapspace, den müssen wir unbedingt mal in Orange machen. Ich bin da gerade,

1706
03:25:30,220 --> 03:25:36,660
das ist ein bisschen mehr Farbe. Ja. So, wie machen wir denn jetzt weiter, Leute? Eigentlich

1707
03:25:36,660 --> 03:25:42,060
habe ich übelst Hunger, wisst ihr das? Und mein Brain macht auch langsam nicht mehr weiter mit,

1708
03:25:42,060 --> 03:25:46,820
aber eine Sache würde ich noch machen, nämlich wir liefern mal ein bisschen. Also wir haben

1709
03:25:46,820 --> 03:25:51,860
jetzt ja so lange rumgewurstet. Ich will noch eine Webseite ausliefern. Ich will noch eine

1710
03:25:51,860 --> 03:25:58,380
Webseite ausliefern. Einfach nur HTTP 200. Okay, hast du einen Link reingeschickt? Ja,

1711
03:25:58,380 --> 03:26:02,100
na, heute gucke ich, ich bin zu low-primit, das heute anzugucken. Das müssen wir in einem der

1712
03:26:02,100 --> 03:26:06,420
nächsten Streams machen. Falls ich es vergessen soll, du kannst mir ruhig nochmal Bescheid sagen,

1713
03:26:06,420 --> 03:26:10,340
wir machen das. Mich interessieren nämlich die neuen Features auch. Wir gucken uns hier auf

1714
03:26:10,340 --> 03:26:18,100
jeden Fall im, ich schreibe sie mal auf hier, C++ neuen Features. Gucken wir uns das an. Und

1715
03:26:18,100 --> 03:26:20,540
wenn nicht, und du bist im Stream, kannst du mir ruhig Bescheid sagen, weil dann gucken wir uns

1716
03:26:20,540 --> 03:26:26,140
in der nächsten Stream an, wenn wir ein bisschen C-Sharp machen. So, ihr guckt mal, habt ihr es

1717
03:26:26,140 --> 03:26:32,700
gesehen? SSL Handshake failed. Das ist, wenn ich die Verbindung anfange und dann abbreche.

1718
03:26:32,700 --> 03:26:44,860
Sogar die Fehlermeldung funktionieren. Excellent. Excellent. Musik ist ein bisschen laut jetzt.

1719
03:26:44,860 --> 03:26:56,820
So, und jetzt will ich noch mal eine Browser, ich will noch mal eine Webseite ausliefern. Das

1720
03:26:56,820 --> 03:27:06,300
probieren wir jetzt noch mal aus. Also, wir haben, ab hier steht die SSL-Verbindung. Das

1721
03:27:06,300 --> 03:27:24,300
bedeutet, ab hier kann ich lesen aus der Verbindung. Ich kann lesen aus der Verbindung. Also, das heißt

1722
03:27:24,300 --> 03:27:32,380
sowas wie MBITT-TLS-READ oder sowas. Nein, SSL-READ. So, was ich da jetzt rüber rauskriege,

1723
03:27:32,380 --> 03:27:36,940
ist ganz normales HTTP. Also, da kommt jetzt ein GET. Also, das da kriege ich im Endeffekt.

1724
03:27:36,940 --> 03:27:43,660
Ah, nee, ich sehe es. Moment, ich zeige euch, was ich jetzt lesen will. Einlesen will. Oder

1725
03:27:43,660 --> 03:27:49,460
auch nicht. Was hat er für Schmerzen? Hallo? Ah, jetzt. So, ich will das hier einlesen. Guckt,

1726
03:27:49,460 --> 03:27:58,820
GET. Wir machen ein GET-Request auf slash im Endeffekt. GET slash. So, ich habe jetzt ja TCP-Verbindung

1727
03:27:58,820 --> 03:28:06,460
aufgebaut. Darüber eine verschlüsselte SSL-Verbindung. GitHub CLI, was ist das denn?

1728
03:28:06,460 --> 03:28:13,740
Git hat eigentlich eine ziemlich gute Kommandozeile. Sebaro, ja, genau so ist es.

1729
03:28:13,740 --> 03:28:22,980
Und jetzt kriege ich eigentlich hier normal diesen Text drüber. Also, das ganz normale

1730
03:28:22,980 --> 03:28:29,100
HTTP-Request kann ich jetzt hier drüber einlesen. So, also, machen wir mal MBITT-SSL-TLS-READ. Als

1731
03:28:29,100 --> 03:28:35,140
erstes brauchen wir den SSL-Kontext. Den braucht man immer für alles in MBITT-TLS. Wo ist er? Da

1732
03:28:35,140 --> 03:28:50,980
ist er. Und SSL. So, und wie geht es jetzt weiter? Buffer-Size-T-Length. Mal Frage an die C++ und

1733
03:28:50,980 --> 03:28:56,380
C-Leute, falls hier der ein oder andere da ist. Was bevorzugt ihr in diesem Fall? So was hier.

1734
03:28:56,380 --> 03:29:11,660
So was hier. 2048. So was hier. Oder, was ja auch eine Möglichkeit ist, in C++.

1735
03:29:11,660 --> 03:29:27,020
Das geht ja auch. Also, wie gesagt, es gibt einmal die Möglichkeit, das so zu schreiben.

1736
03:29:27,020 --> 03:29:42,460
Also einmal die Möglichkeit so zu schreiben. So. Oder die Möglichkeit, das so zu schreiben. Ich

1737
03:29:42,460 --> 03:29:53,220
glaube Size. Was ist davon besser? Das zweite sieht doch super aus. Sebaro, ich höre da irgendwie

1738
03:29:53,220 --> 03:30:03,500
so ein bisschen raus bei dir. Das zweite hat seinen Charme insofern, weil man hier die Size

1739
03:30:03,500 --> 03:30:06,980
direkt abfragen kann, aber nach dem es in der Zeit ist, kann ich einfach die Zahl doppelt schreiben.

1740
03:30:06,980 --> 03:30:17,260
Das C++-Cremium mag mit Sicherheit das zweite. Übrigens eine Sache, wo man auch wieder sieht,

1741
03:30:17,260 --> 03:30:22,420
finde ich, dass das Ganze, was das C++-Cremium mag, nicht immer so hundertprozentig durchdacht

1742
03:30:22,420 --> 03:30:31,660
ist. Man kann ja mit Standard-C-Arrays kann man ja sowas hier machen. Size, keine Ahnung, 2084.

1743
03:30:31,660 --> 03:30:38,980
Oder kann ich sowas hier machen? Sowas kann ich hier nicht machen. Also ich kann quasi,

1744
03:30:38,980 --> 03:30:47,740
nennen wir mal, dynamischer Wert kann ich quasi einen Array initialisieren oder Länge anlegen.

1745
03:30:47,740 --> 03:30:55,900
Const exp geht dann. Was? Echt? Ja gut, dann ist es ja zur Compile-Zeit. Dann ist es ja zur

1746
03:30:55,900 --> 03:31:09,460
Compile-Zeit. Ich meine ja, wenn man das einliest jetzt. Also zum Beispiel, es gibt ja jede Menge

1747
03:31:09,460 --> 03:31:19,860
Passing-Funktionen. Pass, bla bla bla. Und das gibt dann irgendwie eine Länge zurück. Und wenn ich

1748
03:31:19,860 --> 03:31:24,820
jetzt das hier anlegen will. Na gut, das ist jetzt ein doofes Beispiel, weil das gibt nichts zurück.

1749
03:31:24,820 --> 03:31:34,980
So und das wird funktionieren, wenn ich das mache in C. Allerdings in C++ geht das mit

1750
03:31:34,980 --> 03:31:40,500
dem Standard-Array nicht. Es ist klar, dass es nicht geht, weil es sind Template-Parameter.

1751
03:31:40,500 --> 03:31:47,540
Template-Parameter müssen zur Compile-Zeit feststehen. Ja, aber wie mache ich das denn dann?

1752
03:31:47,540 --> 03:31:55,140
Also mal angenommen. Also mal angenommen, ich bräuchte das jetzt. Ich meine klar,

1753
03:31:55,140 --> 03:31:59,660
ich kann einen Vektor machen. Das ist mir auch klar, das funktioniert. Wobei das dann hier

1754
03:31:59,660 --> 03:32:07,580
wieder schwierig wird. Wie würde ich das denn mit einem Vektor machen? Also sagen wir mal hier 2048.

1755
03:32:07,580 --> 03:32:15,900
Zack. Das ist nicht Standard. Okay, also das heißt, ich habe Glück, dass der GCC das frisst,

1756
03:32:15,900 --> 03:32:24,700
in dem Fall hier jetzt. Oder wie? Ja, also wie gesagt, mal angenommen. Mal angenommen. Okay,

1757
03:32:24,700 --> 03:32:33,700
wir machen das jetzt mal als Beispiel. Also mal angenommen, ich habe hier wirklich sowas. So und

1758
03:32:33,700 --> 03:32:40,300
das ist halt eine Parsing-Funktion, die gibt mir irgendwie zurück, wie viel Zeichen gelesen wurden

1759
03:32:40,300 --> 03:32:50,060
oder so. Irgendwas ist jetzt auch egal. So und also sprich, das ist dynamisch, je nach Input.

1760
03:32:50,060 --> 03:33:01,980
So, fangen wir erstmal an der Stelle an. Wie würde man das den C richtig machen? Also,

1761
03:33:01,980 --> 03:33:05,740
ich habe jetzt Glück, dass mein GCC, also wenn ich euch richtig verstanden habe,

1762
03:33:05,740 --> 03:33:19,700
ich habe jetzt Glück, dass der GCC das macht. So, mal angenommen. Ich will das jetzt,

1763
03:33:19,700 --> 03:33:26,300
ich will das jetzt machen. Also, mal angenommen, mein GCC könnte das nicht. Dann würde ich dann

1764
03:33:26,300 --> 03:33:33,780
sowas hier machen. Nur mal so. Nur ich habe keine Ahnung davon. Interessiert mich jetzt,

1765
03:33:33,780 --> 03:33:53,020
wie man es sagt. Alter, ist ja gut. Und jetzt irgendwie, keine Ahnung. Len mal size of, ja gut,

1766
03:33:53,020 --> 03:34:04,940
was ist es in dem Fall? Sowas hier, oder wie? Also, müsste ich dann in der Richtung machen,

1767
03:34:04,940 --> 03:34:22,420
oder? Ja, stimmt. Also sprich, so ist dann quasi die offizielle Variante. Ja gut, ob das jetzt auf

1768
03:34:22,420 --> 03:34:25,940
dem Stack liegt oder nicht, ist mir ehrlich gesagt ziemlich wurscht. Ich muss mich in dem Fall eh so

1769
03:34:25,940 --> 03:34:30,820
und so drum kümmern, dass ich selbst aufräume. Also, kommt mir ja nichts. Also, wo ist es dann

1770
03:34:30,820 --> 03:34:37,580
speichern? Juckt mich nicht. So, genau, in C kann ich new machen. Das heißt, in dem Fall müsste

1771
03:34:37,580 --> 03:34:45,820
ich jetzt das da machen. So müsste ich aufräumen jetzt wieder. So, ich meine, das ist jetzt

1772
03:34:45,820 --> 03:34:50,380
natürlich böse, weil klar. So, so rum. Also, jetzt müsste ich wieder aufräumen. Sprich,

1773
03:34:50,380 --> 03:35:13,980
das wäre die Variante, wenn mein GCC das nicht kann. So, ok. Also, so, und in C++. Und in C++

1774
03:35:13,980 --> 03:35:28,980
mache ich jetzt was? New uint. So. Würde das funktionieren? Ja, klar, mit dem Vektor geht's,

1775
03:35:28,980 --> 03:35:48,740
ist das klar? Das geht, ok. Ok. Und das geht jetzt auch nicht nur, weil ich GCC habe, sondern

1776
03:35:48,740 --> 03:35:54,660
das ist jetzt quasi C++ standardmäßig. Das ist ok, oder wie? Danach müsste ich mal wieder

1777
03:35:54,660 --> 03:36:00,020
aufräumen. Wenn mit dem Vektor ist, wie gesagt, mit dem Vektor ist klar, dass das funktioniert.

1778
03:36:00,020 --> 03:36:10,860
Wobei, was mir bei Vektor nicht ganz klar ist. Ich meine, ich glaube, wir machen das

1779
03:36:10,860 --> 03:36:19,380
jetzt mit Vektor. Also, was denkst du hier? Bovver. Wobei, das kann man ja auch schon

1780
03:36:19,380 --> 03:36:29,100
wieder so und so anlegen, ne? So. So, wie sage ich dem denn jetzt, dass er, warte mal,

1781
03:36:29,100 --> 03:36:33,100
da hat doch, da hat doch irgendeiner Travorekt, da hat doch gerade irgendwas im Chat geschrieben,

1782
03:36:33,100 --> 03:36:42,900
wie das funktioniert. Kann leider nicht richtig scrollen, weil es irgendwie sackt. Ähm, ja,

1783
03:36:42,900 --> 03:36:49,340
das ist offiziell C++. Ach, ok, man schreibt direkt die Size dahinter. Also, so was,

1784
03:36:49,340 --> 03:37:18,580
was ist das hier dann? Excellent. Und da Data. Ok, so wird das funktionieren? Wird das so

1785
03:37:18,580 --> 03:37:24,180
jetzt gehen? Ich mein, den muss ich jetzt ja nicht löschen, ne? Der räumt ja automatisch

1786
03:37:24,180 --> 03:37:31,260
wieder auf. Also, ok, also sprich, das ist dann, das hat dann die Länge. Also, in dem

1787
03:37:31,260 --> 03:37:36,420
Fall, sag mal mal, hat das dann, wir schreiben es jetzt mal rein und machen das sinnlose

1788
03:37:36,420 --> 03:37:48,860
Pass hier oben wieder weg. Ähm, also sprich, das wäre dann ein Vektor mit 2048 Nuller.

1789
03:37:48,860 --> 03:37:52,700
Ja, das ist eigentlich auch ok, warte mal. Da kann ich sie jetzt gar nicht dafür flamen,

1790
03:37:52,700 --> 03:37:56,300
großartig, das ist in Ordnung. Da kann ich, das ist in Ordnung, da kann ich mitleben,

1791
03:37:56,300 --> 03:38:01,300
das ist ok. Ähm, da probieren wir auch mal gleich aus, ob das Ganze funktioniert. Also,

1792
03:38:01,300 --> 03:38:11,300
jetzt müssen wir allerdings aufpassen, wenn wir hier was einlesen. Du kannst den Namen

1793
03:38:11,300 --> 03:38:17,700
Vektor flamen. Ja, das stimmt. Wie würdest du es nennen? So, so, so Dynamic Array oder,

1794
03:38:17,700 --> 03:38:24,060
oder wie würdest du es nennen? List? Oh, List, List, wie in, äh, wie in, äh,.net

1795
03:38:24,060 --> 03:38:28,780
könnte man es nennen, ja. Genau, Tommy, könnte man machen, aber pff. Weil, mit List könnte

1796
03:38:28,780 --> 03:38:34,060
ich jetzt auch eher was anfangen als mit Vektor, ehrlich gesagt. Denn Vektor ist für mich

1797
03:38:34,060 --> 03:38:38,860
eher sowas, wo es, äh, von irgendwie umgeschwindig, um Beschleunigung von Punkt A nach B oder

1798
03:38:38,860 --> 03:38:52,540
irgendwie sowas geht oder sowas. List ist auch schwarz. Äh, ja gut, ist ja auch, ist

1799
03:38:52,540 --> 03:39:01,580
ja auch egal. Also, zumindest es funktioniert. Äh, xxminifinixxx sagt, ich programmiere

1800
03:39:01,580 --> 03:39:06,220
in C ein Programm für einen, für meinen NXT-Roboter. Er hat aber noch ein Problem

1801
03:39:06,220 --> 03:39:09,260
mit kleinen Kurven. Könntest du mir helfen? Oh, nee, da hab ich gar keine Ahnung. Ist

1802
03:39:09,260 --> 03:39:16,180
das Lego? Übrigens, ihr habt's gesehen. Ihr habt's gesehen, der Browser ist der Meinung.

1803
03:39:16,180 --> 03:39:25,740
Da kommt ein SSL-Zertifikat. Äh, NXT-Roboter. Ist das Lego? Ah, Mindstorm ist das. Nee,

1804
03:39:25,740 --> 03:39:31,100
nee. Kein Schimmer. Hab ich noch nie was mitgemacht. Keine Ahnung. Machst du es einfach, weil es

1805
03:39:31,100 --> 03:39:38,620
dich interessiert oder machst du das für den Markt jetzt in der Schule? Aber ich hab,

1806
03:39:38,620 --> 03:39:42,980
ich hab, so und so hab ich absolut keinen Plan davon. Okay, also, wir lesen, wir lesen

1807
03:39:42,980 --> 03:39:55,860
das jetzt ein. Ähm, so, jetzt, jetzt muss ich mir mal überlegen. Also, Moment, wie,

1808
03:39:55,860 --> 03:40:04,540
wie, wie, wie, Example, Example, äh, Read. Okay, Read. Ei, was machen die dann hier?

1809
03:40:05,540 --> 03:40:07,540
embed tls read

1810
03:40:08,180 --> 03:40:10,180
Verstehe

1811
03:40:10,260 --> 03:40:14,140
Die lesen quasi so lange ein bis der klein nichts mehr schickt

1812
03:40:15,700 --> 03:40:22,180
Denke ich mal dass die dass es so was in der richtung ist so und da müssten wir den htp request request rausbekommen

1813
03:40:24,820 --> 03:40:32,060
Okay, also ich mache mal die einfache weil wir lesen jetzt mal ein bis das hier gleich null oder was ist

1814
03:40:32,060 --> 03:40:34,060
ähm

1815
03:40:34,060 --> 03:40:36,060
Ne

1816
03:40:36,060 --> 03:40:38,780
Moment was gibt es zurück?

1817
03:40:40,620 --> 03:40:43,260
Return, boah alter, die haben aber

1818
03:40:43,780 --> 03:40:50,780
Dokus as fuck hier positive numbers of bytes read also sprich es muss größer null sein

1819
03:40:50,780 --> 03:40:52,780
Nein

1820
03:41:00,460 --> 03:41:06,260
Also sagen wir mal okay größer größer null größer null wenn sie größer null ist dann habe ich was eingelesen alles klar

1821
03:41:12,820 --> 03:41:14,820
Achso moment das muss ich mir

1822
03:41:14,820 --> 03:41:19,580
Moment das muss ich mir speichern weil ansonsten kriege ich ja kriege ich ja die länge nicht raus

1823
03:41:21,420 --> 03:41:25,700
Länge so wenn die länge größer null ist

1824
03:41:30,060 --> 03:41:36,260
Ja tommys könnte ich machen aber also irgendwelche typedefs noch mal um fünf ecken finde ich machen die ganze sache noch komplizierter

1825
03:41:37,060 --> 03:41:39,980
Als einfach die die typen zu verwenden auch wenn sie blöd benannt sind

1826
03:41:39,980 --> 03:41:46,620
So also länge wenn die länge doch größer größer null ist dann habe ich was eingelesen größer gleich nur ist im prinzipiel auch

1827
03:41:46,620 --> 03:41:48,620
Okay, dann hat der klein nix geschickt

1828
03:41:50,420 --> 03:41:54,020
Und nun gebe ich das doch einfach mal aus würde ich sagen

1829
03:41:59,620 --> 03:42:04,980
Okay, gebe ich das doch einfach mal aus also was ich jetzt erwarten würde was der hier ausgibt ist

1830
03:42:04,980 --> 03:42:12,180
das art of the house also quasi kommt zu zumindest teilweise weiß ich aber ein Stück einlesen kann

1831
03:42:12,900 --> 03:42:15,840
Eigentlich müssen wir das ja auch in der schleifereien lesen weil ansonsten

1832
03:42:16,320 --> 03:42:21,440
Erhört einfach mittendrin auf aber mal gucken wie weiter einliest und jetzt müssen wir sagen jetzt brauchen einen string

1833
03:42:21,920 --> 03:42:25,840
Vor einem buffer aber wenn ich das ganz falsch liege kann man das so machen

1834
03:42:28,980 --> 03:42:30,980
Kann man nicht

1835
03:42:31,460 --> 03:42:33,460
Warum nicht?

1836
03:42:35,980 --> 03:42:39,380
Ach so, ich glaube das liegt daran, weil es Char sein muss. Kann das sein?

1837
03:42:44,420 --> 03:42:46,420
Moment.

1838
03:42:48,260 --> 03:42:50,260
Das nicht?

1839
03:42:53,540 --> 03:42:58,380
Ich meine, ich könnte einfach tricksen, weil ich habe schon mal nachgeguckt, wie das geht

1840
03:42:58,380 --> 03:43:03,860
und habe einfach mir was gebastelt. Mal gucken, wie ich das gemacht habe.

1841
03:43:06,060 --> 03:43:11,340
Wieso? Das ist doch richtig, was ich da gemacht habe. Guck mal da. Genauso habe ich es auch gerade gemacht.

1842
03:43:13,740 --> 03:43:15,740
Ah, ist das kein Int? Da ist auch ein Int.

1843
03:43:17,940 --> 03:43:24,140
Ach, das ist ja ein Vektor, da muss ich datake. Natürlich, ja klar. Aha, richtig. Stimmt ja.

1844
03:43:24,140 --> 03:43:30,740
Ja, klar. Aber jetzt müsste es eigentlich funktionieren.

1845
03:43:33,500 --> 03:43:39,780
Ich, ich upload einfach mal und gucke, ob es funktioniert. Das zeigt bestimmt einfach nur Mist an. Oh, nee. Monkeys.

1846
03:43:39,780 --> 03:43:48,780
Ach, der Cast, genau.

1847
03:43:58,260 --> 03:44:00,260
Bei der Gelegenheit.

1848
03:44:00,260 --> 03:44:15,620
So, jetzt, jetzt, aber jetzt, jetzt funktioniert es. So, und jetzt gucken wir mal, was wir da eingelesen haben.

1849
03:44:15,620 --> 03:44:34,740
Bäm, hier, der HTTP Request am Start. Exzellent. Funktioniert.

1850
03:44:34,740 --> 03:44:50,020
So, und jetzt bleibt uns nichts anderes übrig. Wir haben jetzt den HTTP Request eingelesen, haben festgestellt, dass es ein Get Request ist.

1851
03:44:50,020 --> 03:44:54,020
Das sparen wir uns jetzt alles, weil ich weiß, dass es ein Get Request ist, weil ich mach den Get Request selber.

1852
03:44:54,020 --> 03:45:05,220
Und jetzt antworten wir mit einer Webseite, mit einer, mit der simpelsten Webseite, die man sich nur vorstellen kann, antworten wir jetzt.

1853
03:45:05,220 --> 03:45:10,020
Und zwar schicken wir da jetzt folgendes zurück.

1854
03:45:10,020 --> 03:45:33,220
MWTLS write, SSL write. So, Buffer und Länge. OK. Also, HTML. Nee, nicht HTML. Spons. Da ist ja noch Zeug drin.

1855
03:45:33,220 --> 03:45:45,940
Was, was, was müssen wir jetzt sagen? Da krieg ich jetzt HTTP slash 1.1200. OK. So, und dann immer, immer, immer, immer schön Ctrl-R, Ctrl-N.

1856
03:45:45,940 --> 03:45:58,580
So, dann brauchen wir als nächstes, so ist die Content-Type, Content-Type.

1857
03:45:58,580 --> 03:46:10,900
Content-Type, was ist das Text? Text-HTML.

1858
03:46:10,900 --> 03:46:22,820
Auto. Ja, warum nicht Auto? Auto Beste. Warum soll ich den Kram von Hand schreiben?

1859
03:46:22,820 --> 03:46:34,340
Was ist Ctrl-R? Das ist Carriage Return. Das ist auf einer Schreibmaschine das Zurückschieben des Schreibkopfes.

1860
03:46:34,340 --> 03:46:41,620
Das klingt bescheuert, aber daher kommt das.

1861
03:46:41,620 --> 03:46:49,060
Deswegen ist ja Newline unter Windows. Falls ihr euch schon mal gefragt habt, warum Newline unter Windows das hier ist.

1862
03:46:49,060 --> 03:46:58,820
Das liegt daran, weil die Schreibmaschine, die Schreibmaschine macht, für eine neue Zeile macht die Schreibmaschine,

1863
03:46:58,820 --> 03:47:05,140
zurück auf Null schieben und dann eins nach unten drehen.

1864
03:47:05,140 --> 03:47:11,940
Und deswegen hat sich Microsoft gedacht, das ist es, was wir in Windows auch brauchen.

1865
03:47:11,940 --> 03:47:21,780
Ja, übrigens, Cheat95, das ist die beste Erklärung. Die ersten Terminals waren ja Drucker.

1866
03:47:21,780 --> 03:47:29,140
Also sprich, das was ihr hier seht, dieses Terminal, das ist ja, deswegen nennt man das ja auch Terminal Emulator.

1867
03:47:29,140 --> 03:47:34,180
Das ist kein Emulator im eigentlichen Sinne, wie jetzt irgendwie ein N64 Emulator.

1868
03:47:34,180 --> 03:47:39,140
Es ist aber kein richtig echtes Terminal oder auch kein richtig echter Drucker in dem Sinn.

1869
03:47:39,140 --> 03:47:43,540
Die ersten Terminals waren Drucker und da war das halt wirklich so, da musstest du zum Schreiben sagen,

1870
03:47:43,540 --> 03:47:50,500
ok, Drucker, Kopf nach links und nächste Zeile. So, und deswegen gibt es ja auch noch die Steuerzeichen für.

1871
03:47:50,500 --> 03:47:55,700
Das Backslash R ist Carriage Return, das ist das Steuerzeichen für Schreibkopf von der,

1872
03:47:55,700 --> 03:48:01,700
wie nennt man das, Schreibleser, nee, Schreibkopf von der Schreibmaschine nach links zurückschieben

1873
03:48:01,700 --> 03:48:08,660
und dann kommt nen Backslash N, das ist das Zeichen für Newline.

1874
03:48:08,660 --> 03:48:17,460
Andere Leute waren da ein bisschen fortschrittlicher und haben gesagt, ok, auf dem Computer reicht uns Newline zu verwenden.

1875
03:48:17,460 --> 03:48:23,860
Weil, naja, gut, Carriage Return gibt es da halt nicht so, wenn man hier sowas hat, aber daher kommt das.

1876
03:48:23,860 --> 03:48:28,980
Und bei HTML ist es halt, bei HTTP ist es halt nun mal im Protokoll so definiert,

1877
03:48:28,980 --> 03:48:33,380
dass die einzelnen Abschnitte eben mit Carriage Return Newline beendet werden.

1878
03:48:33,380 --> 03:48:36,340
Also sprich, das hier ist eigentlich die HTTP-Response.

1879
03:48:36,340 --> 03:48:40,100
Erst der Header, zweiter Header drin und alles muss Carriage Return Newline getrennt sein

1880
03:48:40,100 --> 03:48:48,660
und am Ende kommt ein Carriage Return Newline, Carriage Return Newline, dann ist es fertig.

1881
03:48:48,660 --> 03:48:52,020
Stimmt, Windows kann das mittlerweile auch, ja.

1882
03:48:52,020 --> 03:48:55,380
Und wir können jetzt übrigens noch mal eine richtig Big-Brain-Geschichte machen.

1883
03:48:55,380 --> 03:49:01,220
Wir können nämlich noch sagen, charset gleich utf8.

1884
03:49:01,220 --> 03:49:03,860
So, das ist dann noch besser.

1885
03:49:03,860 --> 03:49:07,700
Dann kommt der Browser gar nicht auf die Idee, das in irgendwelchen komischen Encodings anzuzeigen,

1886
03:49:07,700 --> 03:49:11,140
sondern utf8 bleibt einfach utf8 und ist utf8 und gut ist.

1887
03:49:11,140 --> 03:49:16,980
So, das ist die Response und jetzt kommt das HTML rein.

1888
03:49:16,980 --> 03:49:27,780
Ich glaube aber, dafür muss man erst mal sagen, dafür muss man das hier erst mal abschließen.

1889
03:49:27,780 --> 03:49:34,900
Genau, das ist quasi Response und Header und jetzt kommt der eigentliche Content.

1890
03:49:34,900 --> 03:49:52,580
Also, HTML, grandiose Seite gibt das jetzt, body, body, cute, cute chat, aiaia, so.

1891
03:49:52,580 --> 03:49:55,940
Und da schreiben wir jetzt, Response.

1892
03:49:55,940 --> 03:49:59,060
Wisst ihr was, ich bin faul.

1893
03:49:59,060 --> 03:50:02,980
Wobei, ich weiß, ich weiß, ich weiß, da schreien die C-Leute jetzt.

1894
03:50:02,980 --> 03:50:10,500
Ich meine, man kann auch einfach sowas hier machen, Response und strillen, strillen kann man machen.

1895
03:50:10,500 --> 03:50:12,180
Ach, das geht auch.

1896
03:50:12,180 --> 03:50:16,740
Äh, ups, doch nicht.

1897
03:50:16,740 --> 03:50:24,100
Äh, also, Moment, unsigned, const unsigned char.

1898
03:50:24,100 --> 03:50:45,460
Aha, so, einfach mal weggecastet, gut, so muss das sein.

1899
03:50:45,460 --> 03:50:51,300
So, upload und jetzt schauen wir mal, ob deine Webseite zurückkommt.

1900
03:50:51,300 --> 03:51:01,140
Übrigens, ich hätte jetzt einfach den Arduino-String genommen dafür und nicht strillen.

1901
03:51:01,140 --> 03:51:15,700
Chat, ich muss mal kurz das Fenster neu laden.

1902
03:51:15,700 --> 03:51:21,620
Und dann gucken wir mal, ich guck mal, irgendwas hat das Sebaro geschrieben, ich kann nämlich

1903
03:51:21,620 --> 03:51:22,620
gerade nicht hochscrollen.

1904
03:51:22,620 --> 03:51:36,340
Okay, also, seit der Umstellung von VDSL und letztens auf SVDSL habe ich seit eineinhalb

1905
03:51:36,340 --> 03:51:40,420
Jahren eine Störung, das DSL immer abbricht, mittlerweile wurde die Störung gefunden, 24

1906
03:51:40,420 --> 03:51:47,980
Volt Fremdspannung, machen die Leute denn da, hat da irgendwie einer ein Licht angeschlossen

1907
03:51:47,980 --> 03:51:48,980
oder so.

1908
03:51:48,980 --> 03:51:56,660
Was ist denn so eine typische Sache, 24 Volt, Akkustaubsauger laden oder so, nee, das ist

1909
03:51:56,660 --> 03:52:04,260
eigentlich mehr, halbes PoE, macht da, holt sich da einer irgendwie PoE-Lite raus oder

1910
03:52:04,260 --> 03:52:05,540
so aus der Telefonleitung.

1911
03:52:05,540 --> 03:52:11,460
So, jetzt gucken wir mal, ob eine Webseite zurückkommt und es kommt eine Webseite zurück

1912
03:52:11,460 --> 03:52:13,060
und jetzt gucken wir mal, ob es funktioniert.

1913
03:52:13,060 --> 03:52:20,460
Jetzt kommt der Moment der Wahrheit im Browser, okay, übrigens mein Zertifikat ist natürlich

1914
03:52:20,460 --> 03:52:27,740
Müll, ihr seht es ja hier, also, CACW, Organisation Unit, CACW, sonst was, also das Zertifikat

1915
03:52:27,740 --> 03:52:31,700
ist totaler Müll, kein Wunder, dass das dann funktioniert und das Zertifikat ist auch

1916
03:52:31,700 --> 03:52:33,900
für einen anderen Host ausgestellt und alles.

1917
03:52:33,900 --> 03:52:42,540
So, okay, wir, wir, wir accepten, we accepten the risk and continue, und bam, cute chat,

1918
03:52:42,540 --> 03:52:52,340
aiaia, wir haben eine, wir haben eine eigene Webseite über, einen eigenen Web-Server über

1919
03:52:52,340 --> 03:52:53,900
HTTPS ausgeliefert.

1920
03:52:53,900 --> 03:53:08,060
So, und jetzt ist es natürlich einfach, da mehr drüber auszuliefern, also, also wenn

1921
03:53:08,060 --> 03:53:11,980
ich jetzt cute chat darüber ausliefern kann, kann ich da noch mehr drüber ausliefern,

1922
03:53:11,980 --> 03:53:17,100
wir probieren jetzt mal was, wir probieren jetzt mal was, passt mal auf, passt mal auf,

1923
03:53:17,100 --> 03:53:20,900
wir machen jetzt, wir machen jetzt das nächste, und zwar, wir legen jetzt hier unter data

1924
03:53:20,900 --> 03:53:28,060
mal eine neue Webseite ein, index.html, so, und da legen wir, wir machen jetzt dort eine

1925
03:53:28,060 --> 03:53:37,900
richtige Webseite, richtig, in Anführungsstrichen, ne, so, 0W, ja, ja, das ist alles okay, und

1926
03:53:37,900 --> 03:53:51,820
ich brauche ein 0W-Bild, ja, 0W, perfekt, ja, 0W, nein, nein, nein, nein, keine halbnackischen

1927
03:53:51,820 --> 03:53:57,500
Twitch-Mädels, das brauchen wir jetzt nicht, ich brauche ein Bild, ich brauche ein Bild

1928
03:53:57,500 --> 03:54:13,500
zu 0W, ja, 0W, perfekt, View Image, so, Image, Source, 0W, exellent, haben wir ein schönes

1929
03:54:13,500 --> 03:54:17,780
Bild, muss man eigentlich Images so beenden, oder geht das auch ohne, so, dann machen wir

1930
03:54:17,780 --> 03:54:25,740
noch eine Überschrift, H1, Omega Lul, so, und diese Seite liefern wir jetzt aus vom

1931
03:54:25,740 --> 03:54:32,100
Flash, diese Seite liefern wir jetzt aus vom Flash, das wird, Leute, das wird big brain

1932
03:54:32,100 --> 03:54:41,540
jetzt, dass das funktioniert, so, also wir brauchen erstmal ein Terminal, Terminal,

1933
03:54:41,540 --> 03:54:47,620
Upload, also ich habe jetzt eine Webseite angelegt, die wahnsinnig wirklich High Octane

1934
03:54:47,620 --> 03:54:51,780
Inhalt hat, wir können übrigens, ich schaue mir mal kurz an, ob die Webseite an sich überhaupt

1935
03:54:51,780 --> 03:55:01,580
funktioniert, Platform, Documents, Platform IO, Projects, Web Server, Data, Chrome, habe

1936
03:55:01,580 --> 03:55:08,540
ich nicht drauf, Chrome, Index, HTML, ok, die Webseite funktioniert prinzipiell, jetzt

1937
03:55:08,540 --> 03:55:16,660
müssen wir nur gucken, dass wir die vom ESP ausgeliefert kriegen, so, Webseite abgeloadet,

1938
03:55:16,660 --> 03:55:22,900
Webseite abgeloadet, und nun gucken wir mal, so, Response hier ist klar, die Response brauchen

1939
03:55:22,900 --> 03:55:28,780
wir nach wie vor, allerdings der Inhalt, den brauchen wir noch anderes, noch andere Inhalte,

1940
03:55:28,780 --> 03:55:40,460
so, dann sagen wir Helper, read file from spiffs, ähm, als, keine Ahnung, String, oh, ich hoffe,

1941
03:55:40,460 --> 03:55:43,780
das was ich da gebastelt habe funktioniert, sonst müssen wir es von hart machen, slash

1942
03:55:43,780 --> 03:55:57,460
Index, HTML, also ist das was ich hier hochgeladen habe, ähm, zack, das ist jetzt HTML, Distortion,

1943
03:55:57,460 --> 03:56:05,780
Dankeschön, exzellent, so, ähm, und jetzt machen wir hier noch was, jetzt sagen wir

1944
03:56:05,780 --> 03:56:15,180
keine Ahnung, HTML gleich, Response plus HTML, und jetzt haben wir einen String mit der Webseite

1945
03:56:15,180 --> 03:56:24,060
und der Response, und wahrscheinlich müssen wir jetzt noch mal hinten dran, carriage return

1946
03:56:24,060 --> 03:56:28,100
newline, carriage return newline machen, denke ich, weil das funktioniert, das ist jetzt

1947
03:56:28,100 --> 03:56:41,500
aber einfach nur geraten, und jetzt schicken wir das ganze mal, ob das jetzt funktioniert,

1948
03:56:41,500 --> 03:56:50,100
was ich mir da gerade vorstelle, jetzt bin ich echt gespannt, ob das funktioniert, also

1949
03:56:50,100 --> 03:56:56,900
wir lesen jetzt die Datei, die ich gerade erstellt habe, vom Flash, und, ähm, zeigen

1950
03:56:56,900 --> 03:57:00,260
sie den Browser an, ich weiß ja nicht, ob meine Read Function funktioniert, die ich

1951
03:57:00,260 --> 03:57:12,020
hier gebaut habe, okay, jetzt, jetzt, jetzt kommt es drauf an, okay, wir testen es erstmal

1952
03:57:12,020 --> 03:57:24,300
mit dem Curl, ob es funktioniert, sieht sehr gut aus, sieht sehr gut aus, bam, Leute, Webseite

1953
03:57:24,300 --> 03:57:31,100
vom Flash Speicher ausgelesen, über den eigenen Webserver, über TLS ausgeliefert, an den Browser,

1954
03:57:31,100 --> 03:57:32,100
was gibt es besseres?

1955
03:57:32,100 --> 03:57:40,260
Also, ohne Scheiß, also, viel mehr kannst du dann wirklich in 4 Stunden streamen nicht

1956
03:57:40,260 --> 03:57:41,260
wollen.

1957
03:57:41,260 --> 03:57:50,660
So, und das nächste Mal erweitern wir das dann noch, dass der erstmal den Get Request

1958
03:57:50,660 --> 03:57:56,940
passen kann, und dass er einen Post annehmen kann, und Basic Ors machen wir das nächste

1959
03:57:56,940 --> 03:58:00,780
Mal noch, also ich muss jetzt aufschreiben, weil ich's dann vergesse, ich bin ja ganz

1960
03:58:00,780 --> 03:58:09,420
begeistert, also nächstes Mal mal Basic Ors, Postrequest und Request Passen, und dann

1961
03:58:09,420 --> 03:58:15,100
die Seite auf dem ESP-Display, ne, die Seite brauch ich nicht auf dem ESP-Display, außerdem

1962
03:58:15,100 --> 03:58:21,540
ne HTML-Seite auf dem ESP-Display rendern, dazu fehlt mir ne Render-Engine für den ESP,

1963
03:58:21,540 --> 03:58:37,940
der als HTML rendert, welches SDK ist das, was denn, achso, das ist, ich zeig's dir,

1964
03:58:37,940 --> 03:58:47,300
das ist ESP-IDF-4 mit Arduino als Modul, also im Prinzip ist es ein Arduino mit der Möglichkeit

1965
03:58:47,300 --> 03:58:48,700
ein bisschen mehr zu konfigurieren.

1966
03:58:48,700 --> 03:59:05,860
Mit nem reinen Arduino, ähm, geht ihr das auch ohne Probleme, dass, was dir da in die

1967
03:59:05,860 --> 03:59:12,700
Quere kommt, also was mir in die Quere kommt ist, dass ich ein paar, ne, das ist schon

1968
03:59:12,700 --> 03:59:19,500
ein ESP-32, genau, das ist ein ESP-32, das müsstest du aber auch auf dem ESP-2866 machen

1969
03:59:19,500 --> 03:59:23,420
können, allerdings, da machst du nicht mehr als eine Verbindung wahrscheinlich, da hat

1970
03:59:23,420 --> 03:59:34,100
er noch weniger RAM, also ich müsste hier so 4-5 Verbindungen maximal hinkriegen, da

1971
03:59:34,100 --> 03:59:42,620
ist auch der RAM vom ESP-32 voll, ähm, ja, das Problem mit dem offiziellen Arduino-Package

1972
03:59:42,620 --> 03:59:50,740
via Platform.io ist, die sind noch auf ESP-IDF-3.3, das ist uralt, das kann glaub ich nicht mal

1973
03:59:50,740 --> 03:59:59,300
C++, das kann glaub ich sogar nur C++14 oder so, das ist der Grund warum ich ein IDF-Projekt

1974
03:59:59,300 --> 04:00:02,660
eigentlich gemacht habe, dass ich eben die neueren Tools verwenden kann, also sprich,

1975
04:00:02,660 --> 04:00:07,940
dass ich ordentlichen C++17er Unterstützung habe, weil wenn schon C++, also wenn man sich

1976
04:00:07,940 --> 04:00:17,020
schon mit dem ganzen Kack rum ärgern muss, dann wenigstens was halbwegs neues, so, aber

1977
04:00:17,020 --> 04:00:20,860
das ist ja cool, also das hat jetzt echt einfacher funktioniert als ich mir das Ganze vorgestellt

1978
04:00:20,860 --> 04:00:23,900
hab, ich mein klar, ich will jetzt nicht so tun, ich hab es ja schon ein paar mal, ich

1979
04:00:23,900 --> 04:00:28,620
will es nicht so tun, als hab ich das jetzt hier einzig und allein im Stream jetzt zusammengesucht,

1980
04:00:28,620 --> 04:00:32,900
ich hab im Vorfeld schon ein bisschen ausprobiert, wie es funktioniert, klar, aber insgesamt

1981
04:00:32,900 --> 04:00:39,340
ging das doch deutlich einfacher als ich mir das vorgestellt hab, aber guck mal, da kann

1982
04:00:39,340 --> 04:00:47,020
man sich doch nicht beschweren, 132 Zeilen und man kann den Kram ja sogar lesen, so ist

1983
04:00:47,020 --> 04:00:56,060
das ja nun auch wieder nicht, also 132 Zeilen für ein bisschen statisches HTML ist doch

1984
04:00:56,060 --> 04:01:01,740
in Ordnung, zumal wir ab jetzt ja auch easy mehr machen können, wir haben schon ne Webseite

1985
04:01:01,740 --> 04:01:07,700
vom Flash ausgelesen hier und zurückgeschickt, das heißt, als nächstes, wie gesagt, als

1986
04:01:07,700 --> 04:01:12,500
nächstes machen wir Basic Auth, wir passen die HTTP Request und gucken, dass wir einen

1987
04:01:12,500 --> 04:01:18,180
Post Request für ein Update handeln können, achja und Logs ausliefern über ne Verbindung,

1988
04:01:18,180 --> 04:01:21,940
wobei das mit dem Logs ausliefern wird wahrscheinlich relativ simpel gehen, ich mach einfach die

1989
04:01:21,940 --> 04:01:28,700
Verbindung nicht zu und sende weiterhin Dinge, ich kann das ja mal kurz ausprobieren, das

1990
04:01:28,700 --> 04:01:35,260
schöne ist ja, dadurch, dass wir eben für jede Verbindung einen eigenen Thread aufmachen,

1991
04:01:35,260 --> 04:01:43,180
ist es auch ziemlich einfach, ich kommentier den Kram hier mal aus, dadurch, dass wir

1992
04:01:43,180 --> 04:01:49,780
für jede Verbindung einen neuen Thread aufmachen, ist es auch ziemlich einfach, hier Sachen

1993
04:01:49,780 --> 04:02:04,620
zu schicken, ne? So, Text, wollen wir mal Text Plane und ähm, ich glaub, das hat jetzt funktioniert,

1994
04:02:04,620 --> 04:02:09,820
so, jetzt machen wir hier mal ne Endloschleife und sagen, ok, wir verschicken einfach alle,

1995
04:02:09,820 --> 04:02:19,340
alle, keine Ahnung, 5, 5, alle, alle, jede Sekunde, jede Sekunde schicken wir jetzt mal

1996
04:02:19,340 --> 04:02:36,740
ne Nachricht, keck W, so und jetzt sollte die Verbindung eigentlich offen bleiben und

1997
04:02:36,740 --> 04:02:46,060
ich müsste jede Sekunde ne Nachricht kriegen, was ist eigentlich das aktuellste Http, äh,

1998
04:02:46,060 --> 04:02:55,140
irgendein Zweier, was hab ich jetzt verkehrt gemacht, achso, muss casten, ja was ist denn

1999
04:02:55,140 --> 04:03:03,300
nur mit casten los, hab ich nicht, haben sie nicht sogar schon was mit Http 3 letztens,

2000
04:03:03,300 --> 04:03:13,700
äh, Preview mäßig erzählt, ja doch, genau, genau, Http 3 ist hier grad ab, ab coming,

2001
04:03:13,700 --> 04:03:18,860
also wie gesagt, die sind auch schon bei 2, 2, 2 ist sogar schon mäßig verbreitet.

2002
04:03:18,860 --> 04:03:36,100
Ok, das, ah, Moment, Moment, ich hab ja das wichtigste vergessen, Ctrl R, Ctrl N, muss

2003
04:03:36,100 --> 04:03:42,420
ich noch schicken und er sollte jetzt jede Sekunde eigentlich ne Message schicken, äh,

2004
04:03:42,420 --> 04:03:54,460
was ist denn der aktuelle Standard, der am meisten benutzt wird, 1, 1, 1, 1, 1, 1 ist

2005
04:03:54,460 --> 04:04:03,700
so mit Abstand, äh, würd ich mal sagen 95% des Internet-Traffics wahrscheinlich, so

2006
04:04:03,700 --> 04:04:09,060
mal gucken, ob das jetzt klappt, ne, ok, es funktioniert doch nicht so, wie ich mir

2007
04:04:09,060 --> 04:04:14,460
das, ah doch, guck mal, hier, Leute, jede Sekunde krieg ich nen KQ geschickt, das ist

2008
04:04:14,460 --> 04:04:20,580
wunderbar um Logs zu schicken, äh, per Http, und die Verbindung geht nicht zu, jetzt können

2009
04:04:20,580 --> 04:04:29,060
wir auch gleich noch mal gucken, jetzt gucken wir doch gerade mal, ähm, guckt euch mal

2010
04:04:29,060 --> 04:04:36,700
den Speicher, oh der Speicher wird nicht freigegeben, warum wird der Speicher nicht freigegeben,

2011
04:04:36,700 --> 04:04:44,980
guck mal, der Speicher wird nicht freigegeben, achso, weil die Schleife nie endet, lull,

2012
04:04:44,980 --> 04:04:53,460
kann ja nicht gehen, die Schleife geht nie, ok, ähm, also, wenn hier, wenn ein Fehler

2013
04:04:53,460 --> 04:05:02,340
zurückkommt, ungleich Null, ungleich Null, ok, also wenn das, wenn das, äh, ungleich

2014
04:05:02,340 --> 04:05:13,300
Null ist, dann Break, oh, sieht das hässlich aus jetzt, ja, ja, ich wär mir den nicht

2015
04:05:13,300 --> 04:05:20,580
für Schönheit bezahlt, na, die Schleife eben, ich hör ja nie auf mit der Schleife hier,

2016
04:05:20,580 --> 04:05:23,740
kein Wunder, dass der Speicher nicht freigegeben wird, der hängt für Ewigkeiten in dieser,

2017
04:05:23,740 --> 04:05:31,780
in dieser Wildschleife jetzt drinne, so, Upload mal ein bisschen schneller, ich hab übelst

2018
04:05:31,780 --> 04:05:40,500
Kohldampf, oder wie der Karsten jetzt sagen würde, ich hab Knast, das sagt man im Osten

2019
04:05:40,500 --> 04:05:51,060
wohl irgendwie so, ich hab Knast, klingt, klingt eben beknackt, so, also, warum ist es

2020
04:05:51,060 --> 04:05:57,060
jetzt abgebrochen, solls nicht abbrechen, solls weiterschreiben, aber zumindest sieht

2021
04:05:57,060 --> 04:06:01,660
man jetzt, der Speicherplatz wird freigegeben, seht ihr, der Speicherplatz wird wieder freigegeben

2022
04:06:01,660 --> 04:06:10,460
das ist schonmal gut, nach einem Keg W bricht er ab, warum bricht er nach einem Keg W ab,

2023
04:06:10,460 --> 04:06:22,020
das gehört sich aber nett, na gut, dann mach ich das nochmal weg, und wir testen mal wie

2024
04:06:22,020 --> 04:06:25,860
viele Verbindungen, kann man zwar nur einmal testen, aber wie viele Verbindungen wir aufgebaut

2025
04:06:25,860 --> 04:06:32,180
kriegen, der break ist aber conditional gewesen, dass das nur abbricht, wenn er nicht richtig

2026
04:06:32,180 --> 04:06:37,700
schreiben kann, und der müsste einen schreiben können, weil die Verbindung noch läuft, so,

2027
04:06:37,700 --> 04:06:40,820
das ist das letzte was wir ausprobieren, ich will mal gucken wie viele Verbindungen ich

2028
04:06:40,820 --> 04:06:48,820
aufgebaut kriege, also ich tipp mal so auf drei oder vier oder maximal fünf, mehr gehen

2029
04:06:48,820 --> 04:06:55,580
da nicht, aber für so ein kleines Kackding, also für, ist das nicht verkehrt, ok, erste

2030
04:06:55,580 --> 04:07:02,380
Verbindung, geht, erste mal, zack 40 Kilobyte, na nicht ganz, 30 Kilobyte weg, so, nächste

2031
04:07:02,380 --> 04:07:09,700
Verbindung, zack, nochmal 30 Kilobyte weg, ja ungefähr, ungefähr 30 Kilobyte pro Verbindung,

2032
04:07:09,700 --> 04:07:16,540
zack, nächste Verbindung, wieder 30 Kilobyte, jetzt wird der RAM aber langsam schon knapp,

2033
04:07:16,540 --> 04:07:24,820
oh geht nicht mehr, ok, drei Verbindungen, mehr geht nicht, memory allocation fehlt,

2034
04:07:24,820 --> 04:07:32,020
mehr geht nicht, ok, aber ich mein, was willst du mehr, ja, ich denke mal wenn ich das Display

2035
04:07:32,020 --> 04:07:38,740
nicht finde, das Display, die ganze Display Geschichte braucht auch nochmal so ungefähr

2036
04:07:38,740 --> 04:07:43,540
40 Kilobyte RAM, also wenn wir die Displaysachen ein bisschen optimieren kriegen wir vielleicht

2037
04:07:43,540 --> 04:07:50,100
noch eine Verbindung hin, jaja brauche ich nur für mich, also das reicht wenn ich da

2038
04:07:50,100 --> 04:07:55,940
eins, zwei Verbindungen, zwei Verbindungen wären gut, zwei Verbindungen wären gut, weil

2039
04:07:55,940 --> 04:08:00,780
dann könnte ich locks mir angucken remote während ich einen Firmware Update mache,

2040
04:08:00,780 --> 04:08:13,540
zwei Verbindungen sind ok, der Rest ist jetzt nicht unbedingt, das muss nicht sein, exellent,

2041
04:08:13,540 --> 04:08:27,780
ich bin begeistert, wunderbar, Leute Chat, habe ich Fragen übersehen, wenn nicht dann

2042
04:08:27,780 --> 04:08:49,340
könnt ihr es jetzt noch raushauen, ich gucke jetzt nochmal durch, hast du WSL2 schonmal

2043
04:08:49,340 --> 04:08:56,340
probiert, ja, wenn man keine Linux VM benutzen kann ordentlich und wenn man kein Linux installieren

2044
04:08:56,340 --> 04:09:11,220
kann auf irgendeine andere, dann ist WSL2 nicht verkehrt, so Moment Chat, Dissortion

2045
04:09:11,220 --> 04:09:40,580
hat abonniert, habe ich gar nicht gesehen, Dankeschön, zwei Monate, exellent, so, jetzt

2046
04:09:40,580 --> 04:09:50,340
kann ich es jetzt noch raushauen, ich glaube ich habe nix übersehen, großartig, ne, WSL2

2047
04:09:50,340 --> 04:09:54,460
löst meine VM nicht ab, das liegt ja schon daran, dass grafische Programme nicht gut

2048
04:09:54,460 --> 04:09:59,660
funktionieren mit WSL, du kannst mit WSL2 zwar den X Server verwenden für Windows,

2049
04:09:59,660 --> 04:10:19,740
aber die X Server für Windows sind ja noch schlechter als die X Server für Linux, ne,

2050
04:10:19,740 --> 04:10:35,140
noch nicht, noch nicht, mein Chef hat geschrieben um 14.26, Briefing 14.30 bei mir, bin ich

2051
04:10:35,140 --> 04:10:43,720
ja froh, dass ich heute frei habe, im Oktober dann, an Weihnachten gibt es Cobalt Stream

2052
04:10:43,720 --> 04:10:49,980
und da gucken wir, da programmieren wir ein bisschen Cobalt, ich weiß gar nicht wie wir

2053
04:10:49,980 --> 04:10:54,540
darauf gekommen sind, irgendeiner war so hartnäckig und ich musste mich dann darauf festlegen

2054
04:10:54,540 --> 04:11:07,940
dass wir Weihnachten Cobalt programmieren, das wird schrecklicher, Cobalt exellent, aber

2055
04:11:07,940 --> 04:11:16,860
richtig ja, da brauchst du das passende Gehirn dafür, dass du Cobalt programmieren kannst,

2056
04:11:16,860 --> 04:11:25,620
exquisite Gehirn brauchst du da, also entweder so oder so, eins von beiden, so normale Leute

2057
04:11:25,620 --> 04:11:33,940
dazwischen, für die ist das nix, aber was sagt ihr denn, also ich bin ja heute wirklich,

2058
04:11:33,940 --> 04:11:38,980
ich bin heute wirklich zufrieden mit dem was wir hingekriegt haben, also ich sag jetzt wir,

2059
04:11:38,980 --> 04:11:43,220
der Chat ist ja auch immer mit dabei, ja, aber ich bin da wirklich zufrieden mit, dass

2060
04:11:43,220 --> 04:11:48,860
wir da einen halbwegs lauffähigen Webserver hinbekommen haben, der zwar nur statische

2061
04:11:48,860 --> 04:11:55,860
Seiten ausliefern kann und das auch nur auf einem Pfad, ja, weil einer url, aber ich

2062
04:11:55,860 --> 04:12:05,860
bin mit SSL und das funktioniert auch ziemlich gut, richtig nice, 1,7, exellent, passt ja,

2063
04:12:05,860 --> 04:12:16,620
das war ich eingeblendet habt, so, also Chat, wenn jetzt keiner mehr irgendwelche Fragen

2064
04:12:16,620 --> 04:12:26,380
hat, dann geh ich jetzt was essen und vorher geh ich mal aufs Klo, wann ist der nächste

2065
04:12:26,380 --> 04:12:27,380
Stream?

2066
04:12:27,380 --> 04:12:30,940
Morgen wahrscheinlich, ich hab jetzt ja frei, das ist, Leute ich sag euch, das ist richtig

2067
04:12:30,940 --> 04:12:38,660
angenehm, weil man 10 Tagen in Folge am Start war, auf der Arbeit und ohne Wochenende, 10

2068
04:12:38,660 --> 04:12:43,500
Tagen in Folge, jetzt 4 Tage frei zu haben, das ist ult, das kommt einem extrem erholsam

2069
04:12:43,500 --> 04:12:59,620
vor, nee, gibt's nicht, nein, was ich futter, irgendwas normales zum Abendessen, ich ess

2070
04:12:59,620 --> 04:13:04,220
jetzt kein Schnitzel oder Pizza oder so, irgendwie ein Brötchen oder sowas, gibt's auch mal

2071
04:13:04,220 --> 04:13:08,900
wieder PoE, ich weiß die neue Season fängt jetzt gleich an oder hat schon angefangen,

2072
04:13:08,900 --> 04:13:12,580
ich komm da grad nicht dazu, mich da auch einzulesen, PoE muss man immer ein bisschen

2073
04:13:12,580 --> 04:13:20,660
Theorie craften, ach heute um 10, nee, ich krieg das grad nicht hin, ich bin da auch

2074
04:13:20,660 --> 04:13:27,860
grad nicht drin, was sich da geändert hat und sowas, wahrscheinlich erst nächste Season

2075
04:13:27,860 --> 04:13:34,100
wieder, oder mich packts irgendwie am Wochenende noch, aber dann stream ich wieder nicht, weil

2076
04:13:34,100 --> 04:13:42,620
dann bin ich ja am Kreiselkraten, wir machen morgen weiter, wir erweitern morgen noch den

2077
04:13:42,620 --> 04:13:51,500
Webserver um Basic-Authentifizierung, um Postrequest, die Log-Geschichte und dass der überhaupt

2078
04:13:51,500 --> 04:14:12,980
HTTP-Request ordentlich parsen kann, exzellent, was die deutsche Telekom, was, ach so die Sponsoren,

2079
04:14:12,980 --> 04:14:22,500
irgendein LOL-Turnier wahrscheinlich, ja das hat die bestimmt ordentlich was gekostet,

2080
04:14:22,500 --> 04:14:31,540
weil das macht ja heute keiner mehr umsonst, was machen die sonst, also das, also LOL juckt

2081
04:14:31,540 --> 04:14:36,060
mich ehrlich gesagt nicht die Bohnen, was machen die, was machen die denn sonst so, Videos,

2082
04:14:36,060 --> 04:14:50,900
deutsche Telekom, Videos, was machen die sonst so, Clash Royale, what, Clash Royale, Lennarkrind,

2083
04:14:50,900 --> 04:15:10,900
Clash Royale, scheint voll angesagt zu sein, 4,47.000 Views, was ist mit der, warum streamt

2084
04:15:10,900 --> 04:15:17,500
die Telekom Clash Royale, das sind doch bestimmt keine Leute von der Telekom, das sind doch

2085
04:15:17,500 --> 04:15:28,420
irgendwelche eingekauften, halbwegs bekannten Streamer-Dudes, oder? Also ich kenne sie nicht,

2086
04:15:28,420 --> 04:15:40,700
aber das ist bestimmt kein Telekom, Leute. Ja Leute, schön, dass ihr alle dabei wart

2087
04:15:40,700 --> 04:15:44,740
heute, wir sehen uns wahrscheinlich morgen im Stream, machts gut, ich geh jetzt was essen,

2088
04:15:44,740 --> 04:15:47,860
bis dann, tschüss.

